; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
$SG6775	DB	'Invalid', 00H
$SG6776	DB	'nv12', 00H
	ORG $+3
$SG6777	DB	'yv12', 00H
	ORG $+3
$SG6778	DB	'yuy2', 00H
	ORG $+3
$SG6779	DB	'yuv422', 00H
	ORG $+1
$SG6780	DB	'nv16', 00H
	ORG $+3
$SG6781	DB	'yuv444', 00H
	ORG $+1
$SG6782	DB	'yv12(9bit)', 00H
	ORG $+1
$SG6807	DB	'rgb', 00H
$SG6783	DB	'yv12(10bit)', 00H
$SG6809	DB	'gbr', 00H
$SG6784	DB	'yv12(12bit)', 00H
$SG6812	DB	'y8', 00H
	ORG $+1
$SG6785	DB	'yv12(14bit)', 00H
	ORG $+4
$SG6786	DB	'yv12(16bit)', 00H
$SG6787	DB	'p010', 00H
	ORG $+7
$SG6788	DB	'yuv422(9bit)', 00H
	ORG $+3
$SG6789	DB	'yuv422(10bit)', 00H
	ORG $+2
$SG6790	DB	'yuv422(12bit)', 00H
	ORG $+2
$SG6791	DB	'yuv422(14bit)', 00H
	ORG $+2
$SG6792	DB	'yuv422(16bit)', 00H
	ORG $+2
$SG6793	DB	'p210', 00H
	ORG $+3
$SG6794	DB	'yuv444(9bit)', 00H
	ORG $+3
$SG6795	DB	'yuv444(10bit)', 00H
	ORG $+2
$SG6796	DB	'yuv444(12bit)', 00H
	ORG $+2
$SG6797	DB	'yuv444(14bit)', 00H
	ORG $+2
$SG6798	DB	'yuv444(16bit)', 00H
	ORG $+2
$SG6799	DB	'yuva444', 00H
$SG6800	DB	'yuva444(16bit)', 00H
	ORG $+1
$SG6801	DB	'rgb24r', 00H
	ORG $+1
$SG6802	DB	'rgb32r', 00H
	ORG $+1
$SG6803	DB	'rgb24', 00H
	ORG $+2
$SG6804	DB	'rgb32', 00H
	ORG $+2
$SG6805	DB	'bgr24', 00H
	ORG $+2
$SG6806	DB	'bgr32', 00H
	ORG $+2
$SG6808	DB	'rgba', 00H
	ORG $+3
$SG6810	DB	'gbra', 00H
	ORG $+3
$SG6811	DB	'yc48', 00H
	ORG $+3
$SG6813	DB	'yc16', 00H
	ORG $+3
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA DW 00H		; Array_MASK_YCP2Y
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA DW 0ffffH		; Array_MASK_YCP2UV
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_ssse3
PUBLIC	?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_ssse3
PUBLIC	?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i_ssse3
PUBLIC	?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_bgr24_to_rgb24_ssse3
PUBLIC	??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb24_simd<30>
PUBLIC	?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_bgr32_to_rgb32_ssse3
PUBLIC	??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_simd<31>
PUBLIC	?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb32_ssse3
PUBLIC	?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb32_ssse3
PUBLIC	?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_gbr_to_rgb24_ssse3
PUBLIC	?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb_ssse3
PUBLIC	?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_bgr24_to_rgb_ssse3
PUBLIC	?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb_ssse3
PUBLIC	?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_ssse3
PUBLIC	__xmm@00001000000010000000100000001000
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@00020002000200020002000200020002
PUBLIC	__xmm@08000800080008000800080008000800
PUBLIC	__xmm@10001000100010001000100010001000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
	DD	imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z+284
	DD	imagerel $unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
$pdata$?memcpy_sse@@YAXPEAEPEBEH@Z DD imagerel ?memcpy_sse@@YAXPEAEPEBEH@Z
	DD	imagerel ?memcpy_sse@@YAXPEAEPEBEH@Z+872
	DD	imagerel $unwind$?memcpy_sse@@YAXPEAEPEBEH@Z
$pdata$?select_by_mask@@YA?AT__m128i@@T1@00@Z DD imagerel ?select_by_mask@@YA?AT__m128i@@T1@00@Z
	DD	imagerel ?select_by_mask@@YA?AT__m128i@@T1@00@Z+118
	DD	imagerel $unwind$?select_by_mask@@YA?AT__m128i@@T1@00@Z
$pdata$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
	DD	imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z+308
	DD	imagerel $unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
$pdata$?separate_low_up@@YAXAEAT__m128i@@0@Z DD imagerel ?separate_low_up@@YAXAEAT__m128i@@0@Z
	DD	imagerel ?separate_low_up@@YAXAEAT__m128i@@0@Z+383
	DD	imagerel $unwind$?separate_low_up@@YAXAEAT__m128i@@0@Z
$pdata$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z DD imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z
	DD	imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z+501
	DD	imagerel $unwind$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z
$pdata$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1300
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1509
	DD	imagerel $unwind$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1521
	DD	imagerel $unwind$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
	DD	imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z+789
	DD	imagerel $unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
$pdata$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
	DD	imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z+179
	DD	imagerel $unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
$pdata$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z+233
	DD	imagerel $unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
$pdata$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z+901
	DD	imagerel $unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
$pdata$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
	DD	imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z+1715
	DD	imagerel $unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
$pdata$?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1879
	DD	imagerel $unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2185
	DD	imagerel $unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN18
	DD	imagerel $LN18+3441
	DD	imagerel $unwind$??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN18
	DD	imagerel $LN18+1481
	DD	imagerel $unwind$??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3474
	DD	imagerel $unwind$??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3567
	DD	imagerel $unwind$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3567
	DD	imagerel $unwind$??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3569
	DD	imagerel $unwind$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1909
	DD	imagerel $unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@10001000100010001000100010001000
CONST	SEGMENT
__xmm@10001000100010001000100010001000 DB 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __xmm@08000800080008000800080008000800
CONST	SEGMENT
__xmm@08000800080008000800080008000800 DB 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __xmm@00020002000200020002000200020002
CONST	SEGMENT
__xmm@00020002000200020002000200020002 DB 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00001000000010000000100000001000
CONST	SEGMENT
__xmm@00001000000010000000100000001000 DB 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB
CONST	SEGMENT
?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB DW 0ffffH ; `gather_y_u_v_from_yc48'::`2'::maskY_shuffle
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
CONST	ENDS
;	COMDAT ?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB
CONST	SEGMENT
?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB DW 0ffffH ; `gather_y_u_v_from_yc48'::`2'::maskY_select
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	00H
CONST	ENDS
;	COMDAT ?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
CONST	SEGMENT
?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA DD 08000H ; `_mm_packus_epi32_simd'::`2'::VAL
	DD	08000H
	DD	08000H
	DD	08000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
	DD	080008000H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	03f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb32_to_rgb32_simd<31>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb32_to_rgb32_simd<31>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	042H
	DB	047H
	DB	052H
	DB	034H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 04dH ; convert_rgb32_to_rgb32_simd<31>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	047H
	DB	042H
	DB	052H
	DB	034H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+14
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0d0H ; convert_rgb32_to_rgb32_simd<31>
	DD	010H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_rgb32_to_rgb32_simd<31>
	DD	00H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	09d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	04d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb24_simd<30>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb24_simd<30>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	042H
	DB	047H
	DB	052H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	00H
	ORG $+6
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb24_to_rgb24_simd<30>
	DD	070H
	DQ	FLAT:??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb24_simd<30>
	DD	00H
	DQ	FLAT:??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD 033f19H
	DD	07015e219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?memcpy_sse@@YAXPEAEPEBEH@Z DD 032e01H
	DD	0220117H
	DD	07010H
$unwind$?select_by_mask@@YA?AT__m128i@@T1@00@Z DD 022801H
	DD	070107214H
$unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD 022901H
	DD	0700bf212H
$unwind$?separate_low_up@@YAXAEAT__m128i@@0@Z DD 032901H
	DD	01a0112H
	DD	0700bH
$unwind$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z DD 032e01H
	DD	0200117H
	DD	07010H
$unwind$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	03b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	041011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
$unwind$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	041011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
$unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD 032e01H
	DD	0360117H
	DD	07010H
$unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD 023001H
	DD	07015d219H
$unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD 023301H
	DD	07015f21cH
$unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD 033301H
	DD	034011cH
	DD	07015H
$unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD 032e01H
	DD	0740117H
	DD	07010H
$unwind$?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	075011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0390H
$unwind$?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	085011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0410H
$unwind$?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	0af011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0568H
$unwind$?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	0b5011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0590H
$unwind$?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	0b5011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0590H
$unwind$?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	0b5011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0590H
$unwind$?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	07b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
xdata	ENDS
CONST	SEGMENT
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0 DB 079H ; thread_y_range
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_i_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc DD 038H ; thread_y_range
	DD	0cH
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData DD 01H ; thread_y_range
	DD	00H
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yuy2_to_nv12_i_simd
	DB	030H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yuy2_to_nv12_i_simd
	DB	031H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_yuy2_to_nv12_i_simd
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb32_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0f0H ; convert_yuy2_to_nv12_i_simd
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0c0H
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb32_simd
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb32_simd
	DD	00H
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24r_to_rgb32_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb24_to_rgb32_simd
	DD	010H
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24r_to_rgb32_simd
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24r_to_rgb32_simd
	DD	00H
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_p010_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb24r_to_rgb32_simd
	DD	010H
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01a0H ; convert_yc48_to_p010_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0170H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0110H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0d0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_p010_i_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_i_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb_to_rgb24_simd<4278321153>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01b0H ; convert_yc48_to_p010_i_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0180H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0128H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb_to_rgb24_simd<4278321153>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	032H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb_to_rgb24_simd<4278321153>
	DD	00H
	DQ	FLAT:??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb_simd<4278190338,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb_to_rgb24_simd<4278321153>
	DD	030H
	DQ	FLAT:??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb_simd<4278190338,0>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	032H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb_simd<4278190338,0>
	DD	00H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb_simd<4278321408,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0b0H ; convert_rgb24_to_rgb_simd<4278190338,0>
	DD	030H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb_simd<4278321408,0>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	032H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb_simd<4278321408,0>
	DD	00H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb_simd<4278190338,1>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0b0H ; convert_rgb24_to_rgb_simd<4278321408,0>
	DD	030H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb_simd<4278190338,1>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	032H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb_simd<4278190338,1>
	DD	00H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0b0H ; convert_rgb24_to_rgb_simd<4278190338,1>
	DD	030H
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	033H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0180H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	0150H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0120H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T9 = 88
Y_line$ = 104
U_line$ = 112
V_line$ = 120
pixel$ = 128
xC_pw_one$ = 160
$T10 = 192
xC_YCC$ = 224
$T11 = 256
x1$ = 288
x2$ = 336
x3$ = 384
y$12 = 404
Y$13 = 408
U$14 = 416
V$15 = 424
ycp_fin$16 = 432
ycp$17 = 440
$T18 = 448
$T19 = 464
$T20 = 480
$T21 = 496
$T22 = 512
$T23 = 528
$T24 = 544
$T25 = 560
$T26 = 576
$T27 = 592
$T28 = 608
$T29 = 624
$T30 = 640
$T31 = 656
$T32 = 672
$T33 = 688
$T34 = 704
$T35 = 720
$T36 = 736
$T37 = 760
$T38 = 784
$T39 = 800
$T40 = 816
$T41 = 832
$T42 = 848
$T43 = 864
$T44 = 880
$T45 = 896
$T46 = 912
$T47 = 928
tv213 = 944
tv241 = 948
tv269 = 952
__$ArrayPad$ = 960
dst$ = 1008
src$ = 1016
width$ = 1024
src_y_pitch_byte$ = 1032
src_uv_pitch_byte$ = 1040
dst_y_pitch_byte$ = 1048
height$ = 1056
dst_height$ = 1064
thread_id$ = 1072
thread_n$ = 1080
crop$ = 1088
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_simd<0>

; 1724 : static __forceinline void convert_yc48_to_yuv444_16bit_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1008]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1725 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 38 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 30
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 20
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 f8
	02 00 00	 lea	 rcx, QWORD PTR $T37[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1726 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte + y_range.start_dst;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000aa	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000b2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000b6	48 03 c1	 add	 rax, rcx
  000b9	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000be	48 03 c1	 add	 rax, rcx
  000c1	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax

; 1727 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte + y_range.start_dst;

  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 01	 imul	 rax, rax, 1
  000cf	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d7	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000df	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000e3	48 03 c1	 add	 rax, rcx
  000e6	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000eb	48 03 c1	 add	 rax, rcx
  000ee	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax

; 1728 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte + y_range.start_dst;

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 02	 imul	 rax, rax, 2
  000fc	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  00104	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0010c	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00110	48 03 c1	 add	 rax, rcx
  00113	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  00118	48 03 c1	 add	 rax, rcx
  0011b	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax

; 1729 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00120	b8 08 00 00 00	 mov	 eax, 8
  00125	48 6b c0 00	 imul	 rax, rax, 0
  00129	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00130	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00135	48 63 c9	 movsxd	 rcx, ecx
  00138	48 8b 94 24 f8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00140	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00144	48 8b c1	 mov	 rax, rcx
  00147	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1730 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0014f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00157	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00160	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00169	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1731 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  00172	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  0017a	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00183	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  0018c	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1732 :     __m128i x1, x2, x3;
; 1733 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00195	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  001a0	eb 76		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  001a2	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  001a9	ff c0		 inc	 eax
  001ab	89 84 24 94 01
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  001b2	48 63 84 24 08
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ba	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001c2	48 03 c8	 add	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax
  001d0	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Y_line$[rsp]
  001dd	48 03 c8	 add	 rcx, rax
  001e0	48 8b c1	 mov	 rax, rcx
  001e3	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax
  001e8	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR U_line$[rsp]
  001f5	48 03 c8	 add	 rcx, rax
  001f8	48 8b c1	 mov	 rax, rcx
  001fb	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax
  00200	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00208	48 8b 4c 24 78	 mov	 rcx, QWORD PTR V_line$[rsp]
  0020d	48 03 c8	 add	 rcx, rax
  00210	48 8b c1	 mov	 rax, rcx
  00213	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax
$LN4@convert_yc:
  00218	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0021c	39 84 24 94 01
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00223	0f 8d 23 05 00
	00		 jge	 $LN3@convert_yc

; 1734 :         short *Y = (short *)Y_line;

  00229	48 8b 44 24 68	 mov	 rax, QWORD PTR Y_line$[rsp]
  0022e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax

; 1735 :         short *U = (short *)U_line;

  00236	48 8b 44 24 70	 mov	 rax, QWORD PTR U_line$[rsp]
  0023b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax

; 1736 :         short *V = (short *)V_line;

  00243	48 8b 44 24 78	 mov	 rax, QWORD PTR V_line$[rsp]
  00248	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax

; 1737 :         short *const ycp_fin = (short *)pixel + width * 3;

  00250	6b 84 24 00 04
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00258	48 98		 cdqe
  0025a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00262	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00266	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR ycp_fin$16[rsp], rax

; 1738 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  0026e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pixel$[rsp]
  00276	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  0027e	eb 50		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00280	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00288	48 83 c0 30	 add	 rax, 48			; 00000030H
  0028c	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  00294	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  0029c	48 83 c0 10	 add	 rax, 16
  002a0	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax
  002a8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  002b0	48 83 c0 10	 add	 rax, 16
  002b4	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax
  002bc	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  002c4	48 83 c0 10	 add	 rax, 16
  002c8	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax
$LN7@convert_yc:
  002d0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$16[rsp]
  002d8	48 39 84 24 b8
	01 00 00	 cmp	 QWORD PTR ycp$17[rsp], rax
  002e0	0f 83 61 04 00
	00		 jae	 $LN6@convert_yc

; 1739 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  002e6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  002ee	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002f2	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002fb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00304	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1740 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0030d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00315	48 83 c0 10	 add	 rax, 16
  00319	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031d	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00326	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0032f	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1741 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00338	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00340	48 83 c0 20	 add	 rax, 32			; 00000020H
  00344	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00348	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00351	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0035a	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1742 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00363	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  0036b	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  00373	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  0037b	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1743 :             _mm_store_switch_si128((__m128i *)Y, convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00380	33 c0		 xor	 eax, eax
  00382	85 c0		 test	 eax, eax
  00384	74 7e		 je	 SHORT $LN9@convert_yc
  00386	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0038e	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00397	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003a0	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  003a9	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b6	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003be	41 b8 04 00 00
	00		 mov	 r8d, 4
  003c4	48 8d 94 24 f0
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  003cc	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  003d4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003d9	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003e2	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  003ea	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  003f3	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003f7	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
  00402	eb 7c		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00404	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0040c	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00415	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0041e	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00427	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  0042f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00434	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0043c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00442	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0044a	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  00452	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00457	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00460	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00468	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00471	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00475	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
$LN10@convert_yc:

; 1744 :             _mm_store_switch_si128((__m128i *)U, convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  00480	33 c0		 xor	 eax, eax
  00482	85 c0		 test	 eax, eax
  00484	0f 84 ae 00 00
	00		 je	 $LN11@convert_yc
  0048a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00492	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0049b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  004a3	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004ac	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  004b5	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  004be	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  004c7	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  004d0	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  004d8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004dd	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR $T41[rsp]
  004e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ea	45 33 c9	 xor	 r9d, r9d
  004ed	4c 8d 84 24 40
	02 00 00	 lea	 r8, QWORD PTR $T26[rsp]
  004f5	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  004fd	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  00505	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0050a	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00513	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  0051b	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  00524	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00528	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
  00533	e9 a9 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00538	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00540	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  00549	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00551	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0055a	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00563	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  0056c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00575	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0057e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00586	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0058b	48 8d 84 24 60
	03 00 00	 lea	 rax, QWORD PTR $T43[rsp]
  00593	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00598	45 33 c9	 xor	 r9d, r9d
  0059b	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  005a3	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR $T28[rsp]
  005ab	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  005b3	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  005b8	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  005c1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  005c9	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  005d2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  005d6	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
$LN12@convert_yc:

; 1745 :             _mm_store_switch_si128((__m128i *)V, convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  005e1	33 c0		 xor	 eax, eax
  005e3	85 c0		 test	 eax, eax
  005e5	0f 84 ae 00 00
	00		 je	 $LN13@convert_yc
  005eb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  005f3	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  005fc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00604	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0060d	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00616	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  0061f	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00628	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  00631	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00639	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0063e	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR $T45[rsp]
  00646	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0064b	45 33 c9	 xor	 r9d, r9d
  0064e	4c 8d 84 24 a0
	02 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  00656	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0065e	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00666	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0066b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  00674	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0067c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  00685	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00689	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
  00694	e9 a9 00 00 00	 jmp	 $LN14@convert_yc
$LN13@convert_yc:
  00699	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  006a1	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  006aa	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  006b2	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  006bb	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  006c4	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  006cd	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  006d6	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  006df	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006e7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006ec	48 8d 84 24 a0
	03 00 00	 lea	 rax, QWORD PTR $T47[rsp]
  006f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f9	45 33 c9	 xor	 r9d, r9d
  006fc	4c 8d 84 24 d0
	02 00 00	 lea	 r8, QWORD PTR $T35[rsp]
  00704	48 8d 94 24 c0
	02 00 00	 lea	 rdx, QWORD PTR $T34[rsp]
  0070c	48 8d 8c 24 90
	03 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  00714	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00719	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00722	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0072a	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  00733	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00737	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
$LN14@convert_yc:

; 1746 :         }

  00742	e9 39 fb ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1747 :     }

  00747	e9 56 fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1748 : }

  0074c	48 8b cc	 mov	 rcx, rsp
  0074f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00756	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0075b	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00763	48 33 cc	 xor	 rcx, rsp
  00766	e8 00 00 00 00	 call	 __security_check_cookie
  0076b	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  00772	5f		 pop	 rdi
  00773	5e		 pop	 rsi
  00774	c3		 ret	 0
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_ssse3

; 82   : void convert_yc48_to_yuv444_16bit_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 83   :     convert_yc48_to_yuv444_16bit_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_simd<0>

; 84   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
dst0Line$ = 120
dst1Line$ = 128
dst2Line$ = 136
srcLine$ = 144
MASK_RGB_TO_RGB24$ = 176
xmask0$ = 240
$T6 = 256
xmask1$ = 272
$T7 = 288
xmask2$ = 304
$T8 = 320
xmask3$ = 336
$T9 = 352
y$10 = 368
ptr_src$11 = 376
ptr_dst0$12 = 384
ptr_dst1$13 = 392
ptr_dst2$14 = 400
x$15 = 408
x_fin$16 = 412
xSrc0$17 = 416
$T18 = 432
xSrc1$19 = 448
$T20 = 464
xSrc2$21 = 480
$T22 = 496
x0$23 = 512
$T24 = 528
x1$25 = 544
$T26 = 560
x2$27 = 576
$T28 = 592
$T29 = 608
$T30 = 624
$T31 = 640
$T32 = 656
$T33 = 672
$T34 = 688
$T35 = 704
$T36 = 720
$T37 = 736
$T38 = 752
$T39 = 768
$T40 = 784
$T41 = 800
$T42 = 816
$T43 = 832
$T44 = 848
$T45 = 864
$T46 = 880
x_offset$47 = 896
xSrc0$48 = 912
$T49 = 928
xSrc1$50 = 944
$T51 = 960
xSrc2$52 = 976
$T53 = 992
x0$54 = 1008
$T55 = 1024
x1$56 = 1040
$T57 = 1056
x2$58 = 1072
$T59 = 1088
$T60 = 1104
$T61 = 1120
$T62 = 1136
$T63 = 1152
$T64 = 1168
$T65 = 1184
$T66 = 1200
$T67 = 1216
$T68 = 1232
$T69 = 1248
$T70 = 1264
$T71 = 1280
$T72 = 1296
$T73 = 1312
$T74 = 1328
$T75 = 1344
$T76 = 1360
$T77 = 1376
$T78 = 1400
tv133 = 1416
__$ArrayPad$ = 1424
dst$ = 1472
src$ = 1480
width$ = 1488
src_y_pitch_byte$ = 1496
src_uv_pitch_byte$ = 1504
dst_y_pitch_byte$ = 1512
height$ = 1520
dst_height$ = 1528
thread_id$ = 1536
thread_n$ = 1544
crop$ = 1552
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb_simd<4278190338,1>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 05
	00 00		 sub	 rsp, 1448		; 000005a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 01 00 00	 mov	 ecx, 362		; 0000016aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1472]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 469  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 470  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 471  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 472  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 08 06
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 00
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 78
	05 00 00	 lea	 rcx, QWORD PTR $T78[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 02	 imul	 rax, rax, 2
  0010e	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00115	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00125	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00129	48 8b c1	 mov	 rax, rcx
  0012c	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 01	 imul	 rax, rax, 1
  0013a	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00141	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00146	48 63 c9	 movsxd	 rcx, ecx
  00149	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00151	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00160	b8 08 00 00 00	 mov	 eax, 8
  00165	48 6b c0 00	 imul	 rax, rax, 0
  00169	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00170	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00175	48 63 c9	 movsxd	 rcx, ecx
  00178	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00180	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  0018f	33 c0		 xor	 eax, eax
  00191	83 f8 01	 cmp	 eax, 1
  00194	74 1e		 je	 SHORT $LN11@convert_rg
  00196	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  0019a	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001a1	2b c8		 sub	 ecx, eax
  001a3	8b c1		 mov	 eax, ecx
  001a5	2b 44 24 48	 sub	 eax, DWORD PTR y_range$[rsp]
  001a9	ff c8		 dec	 eax
  001ab	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  001b2	eb 0b		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  001b4	8b 44 24 48	 mov	 eax, DWORD PTR y_range$[rsp]
  001b8	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
$LN12@convert_rg:
  001bf	b8 08 00 00 00	 mov	 eax, 8
  001c4	48 6b c0 00	 imul	 rax, rax, 0
  001c8	8b 8c 24 d8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  001cf	0f af 8c 24 88
	05 00 00	 imul	 ecx, DWORD PTR tv133[rsp]
  001d7	48 63 c9	 movsxd	 rcx, ecx
  001da	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  001e2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001e6	48 03 c1	 add	 rax, rcx
  001e9	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  001ee	48 63 c9	 movsxd	 rcx, ecx
  001f1	48 03 c1	 add	 rax, rcx
  001f4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001fc	c6 84 24 b0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp], 0
  00204	c6 84 24 b1 00
	00 00 03	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+1], 3
  0020c	c6 84 24 b2 00
	00 00 06	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+2], 6
  00214	c6 84 24 b3 00
	00 00 09	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+3], 9
  0021c	c6 84 24 b4 00
	00 00 0c	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+4], 12
  00224	c6 84 24 b5 00
	00 00 0f	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+5], 15
  0022c	c6 84 24 b6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+6], -1
  00234	c6 84 24 b7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+7], -1
  0023c	c6 84 24 b8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+8], -1
  00244	c6 84 24 b9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+9], -1
  0024c	c6 84 24 ba 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+10], -1
  00254	c6 84 24 bb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+11], -1
  0025c	c6 84 24 bc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+12], -1
  00264	c6 84 24 bd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+13], -1
  0026c	c6 84 24 be 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+14], -1
  00274	c6 84 24 bf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0027c	c6 84 24 c0 00
	00 00 01	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+16], 1
  00284	c6 84 24 c1 00
	00 00 04	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+17], 4
  0028c	c6 84 24 c2 00
	00 00 07	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+18], 7
  00294	c6 84 24 c3 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+19], 10
  0029c	c6 84 24 c4 00
	00 00 0d	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+20], 13
  002a4	c6 84 24 c5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+21], -1
  002ac	c6 84 24 c6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+22], -1
  002b4	c6 84 24 c7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+23], -1
  002bc	c6 84 24 c8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+24], -1
  002c4	c6 84 24 c9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+25], -1
  002cc	c6 84 24 ca 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+26], -1
  002d4	c6 84 24 cb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+27], -1
  002dc	c6 84 24 cc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+28], -1
  002e4	c6 84 24 cd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+29], -1
  002ec	c6 84 24 ce 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+30], -1
  002f4	c6 84 24 cf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  002fc	c6 84 24 d0 00
	00 00 02	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+32], 2
  00304	c6 84 24 d1 00
	00 00 05	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+33], 5
  0030c	c6 84 24 d2 00
	00 00 08	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+34], 8
  00314	c6 84 24 d3 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+35], 11
  0031c	c6 84 24 d4 00
	00 00 0e	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+36], 14
  00324	c6 84 24 d5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+37], -1
  0032c	c6 84 24 d6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+38], -1
  00334	c6 84 24 d7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+39], -1
  0033c	c6 84 24 d8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+40], -1
  00344	c6 84 24 d9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+41], -1
  0034c	c6 84 24 da 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+42], -1
  00354	c6 84 24 db 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+43], -1
  0035c	c6 84 24 dc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+44], -1
  00364	c6 84 24 dd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+45], -1
  0036c	c6 84 24 de 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+46], -1
  00374	c6 84 24 df 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0037c	b8 01 00 00 00	 mov	 eax, 1
  00381	48 6b c0 00	 imul	 rax, rax, 0
  00385	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  0038d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00391	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0039a	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  003a3	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR xmask0$[rsp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  003ac	b8 01 00 00 00	 mov	 eax, 1
  003b1	48 6b c0 10	 imul	 rax, rax, 16
  003b5	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003bd	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003c1	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  003ca	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  003d3	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xmask1$[rsp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  003dc	b8 01 00 00 00	 mov	 eax, 1
  003e1	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003e5	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003ed	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003f1	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  003fa	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00403	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR xmask2$[rsp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  0040c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00414	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  0041d	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00426	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR xmask3$[rsp], xmm0

; 487  :     if (source_reverse) {

  0042f	33 c0		 xor	 eax, eax
  00431	83 f8 01	 cmp	 eax, 1
  00434	74 0f		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  00436	6b 84 24 d8 05
	00 00 ff	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], -1
  0043e	89 84 24 d8 05
	00 00		 mov	 DWORD PTR src_y_pitch_byte$[rsp], eax
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  00445	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00450	e9 82 00 00 00	 jmp	 $LN4@convert_rg
$LN2@convert_rg:
  00455	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045c	ff c0		 inc	 eax
  0045e	89 84 24 70 01
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00465	48 63 84 24 d8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0046d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00475	48 03 c8	 add	 rcx, rax
  00478	48 8b c1	 mov	 rax, rcx
  0047b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax
  00483	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0048b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dst0Line$[rsp]
  00490	48 03 c8	 add	 rcx, rax
  00493	48 8b c1	 mov	 rax, rcx
  00496	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax
  0049b	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dst1Line$[rsp]
  004ab	48 03 c8	 add	 rcx, rax
  004ae	48 8b c1	 mov	 rax, rcx
  004b1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax
  004b9	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004c1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst2Line$[rsp]
  004c9	48 03 c8	 add	 rcx, rax
  004cc	48 8b c1	 mov	 rax, rcx
  004cf	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax
$LN4@convert_rg:
  004d7	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004db	39 84 24 70 01
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004e2	0f 8d e0 08 00
	00		 jge	 $LN3@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  004e8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR srcLine$[rsp]
  004f0	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  004f8	48 8b 44 24 78	 mov	 rax, QWORD PTR dst0Line$[rsp]
  004fd	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  00505	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dst1Line$[rsp]
  0050d	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  00515	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dst2Line$[rsp]
  0051d	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00525	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00530	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  00534	8b 8c 24 d0 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0053b	2b c8		 sub	 ecx, eax
  0053d	8b c1		 mov	 eax, ecx
  0053f	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  00543	83 e8 10	 sub	 eax, 16
  00546	89 84 24 9c 01
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  0054d	eb 61		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  0054f	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00556	83 c0 10	 add	 eax, 16
  00559	89 84 24 98 01
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00560	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00568	48 83 c0 30	 add	 rax, 48			; 00000030H
  0056c	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax
  00574	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  0057c	48 83 c0 10	 add	 rax, 16
  00580	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax
  00588	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  00590	48 83 c0 10	 add	 rax, 16
  00594	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax
  0059c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  005a4	48 83 c0 10	 add	 rax, 16
  005a8	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN7@convert_rg:
  005b0	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  005b7	39 84 24 98 01
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  005be	0f 8d af 03 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  005c4	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005d0	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  005d9	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  005e2	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xSrc0$17[rsp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  005eb	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005f3	48 83 c0 10	 add	 rax, 16
  005f7	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005fb	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00604	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0060d	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xSrc1$19[rsp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00616	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  0061e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00622	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00626	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  0062f	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  00638	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR xSrc2$21[rsp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00641	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  0064a	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00654	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  0065d	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00666	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  0066f	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  00678	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00682	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0068b	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T26[rsp]
  00694	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0069d	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  006a6	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  006b0	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  006b9	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  006c2	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  006cb	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  006d4	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  006df	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  006e8	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  006f1	66 0f 38 00 84
	24 60 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T29[rsp]
  006fb	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00704	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0070d	66 0f eb 84 24
	70 02 00 00	 por	 xmm0, XMMWORD PTR $T30[rsp]
  00716	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0071f	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  00728	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00731	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  0073a	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00745	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  0074e	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  00757	66 0f 38 00 84
	24 90 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T32[rsp]
  00761	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  0076a	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00773	66 0f eb 84 24
	a0 02 00 00	 por	 xmm0, XMMWORD PTR $T33[rsp]
  0077c	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  00785	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T34[rsp]
  0078e	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00797	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  007a0	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  007ab	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  007b4	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  007bd	66 0f 38 00 84
	24 c0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T35[rsp]
  007c7	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  007d0	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  007d9	66 0f eb 84 24
	d0 02 00 00	 por	 xmm0, XMMWORD PTR $T36[rsp]
  007e2	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  007eb	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T37[rsp]
  007f4	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  007fd	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00806	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00811	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  0081a	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00823	66 0f 38 00 84
	24 f0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T38[rsp]
  0082d	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00836	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0083f	66 0f eb 84 24
	00 03 00 00	 por	 xmm0, XMMWORD PTR $T39[rsp]
  00848	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  00851	66 0f 6f 84 24
	10 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T40[rsp]
  0085a	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  00863	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  0086c	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00877	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  00880	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00889	66 0f 38 00 84
	24 20 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T41[rsp]
  00893	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0089c	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  008a5	66 0f eb 84 24
	30 03 00 00	 por	 xmm0, XMMWORD PTR $T42[rsp]
  008ae	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  008b7	66 0f 6f 84 24
	40 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  008c0	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  008c9	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  008d2	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  008dd	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  008e6	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  008ef	66 0f 38 00 84
	24 50 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T44[rsp]
  008f9	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00902	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  0090b	66 0f eb 84 24
	60 03 00 00	 por	 xmm0, XMMWORD PTR $T45[rsp]
  00914	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  0091d	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  00926	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  0092f	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00937	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  00940	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00944	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  0094c	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00955	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00959	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  00961	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  0096a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 512  :         }

  0096e	e9 dc fb ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  00973	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0097a	83 e0 0f	 and	 eax, 15
  0097d	85 c0		 test	 eax, eax
  0097f	0f 84 94 00 00
	00		 je	 $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  00985	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0098c	83 e0 0f	 and	 eax, 15
  0098f	b9 10 00 00 00	 mov	 ecx, 16
  00994	2b c8		 sub	 ecx, eax
  00996	8b c1		 mov	 eax, ecx
  00998	89 84 24 80 03
	00 00		 mov	 DWORD PTR x_offset$47[rsp], eax

; 515  :             ptr_src -= x_offset * 3;

  0099f	6b 84 24 80 03
	00 00 03	 imul	 eax, DWORD PTR x_offset$47[rsp], 3
  009a7	48 98		 cdqe
  009a9	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$11[rsp]
  009b1	48 2b c8	 sub	 rcx, rax
  009b4	48 8b c1	 mov	 rax, rcx
  009b7	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 516  :             ptr_dst0 -= x_offset;

  009bf	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009c7	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst0$12[rsp]
  009cf	48 2b c8	 sub	 rcx, rax
  009d2	48 8b c1	 mov	 rax, rcx
  009d5	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 517  :             ptr_dst1 -= x_offset;

  009dd	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009e5	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst1$13[rsp]
  009ed	48 2b c8	 sub	 rcx, rax
  009f0	48 8b c1	 mov	 rax, rcx
  009f3	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 518  :             ptr_dst2 -= x_offset;

  009fb	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  00a03	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst2$14[rsp]
  00a0b	48 2b c8	 sub	 rcx, rax
  00a0e	48 8b c1	 mov	 rax, rcx
  00a11	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00a19	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a21	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a25	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  00a2e	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T49[rsp]
  00a37	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR xSrc0$48[rsp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  00a40	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a48	48 83 c0 10	 add	 rax, 16
  00a4c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a50	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00a59	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T51[rsp]
  00a62	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR xSrc1$50[rsp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00a6b	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a73	48 83 c0 20	 add	 rax, 32			; 00000020H
  00a77	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a7b	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  00a84	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T53[rsp]
  00a8d	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR xSrc2$52[rsp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00a96	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00a9f	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00aa9	66 0f 7f 84 24
	00 04 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00ab2	66 0f 6f 84 24
	00 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  00abb	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00ac4	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00acd	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00ad7	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  00ae0	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T57[rsp]
  00ae9	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00af2	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00afb	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b05	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00b0e	66 0f 6f 84 24
	40 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T59[rsp]
  00b17	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  00b20	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b29	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  00b34	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T60[rsp], xmm0
  00b3d	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00b46	66 0f 38 00 84
	24 50 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T60[rsp]
  00b50	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T61[rsp], xmm0
  00b59	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00b62	66 0f eb 84 24
	60 04 00 00	 por	 xmm0, XMMWORD PTR $T61[rsp]
  00b6b	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T62[rsp], xmm0
  00b74	66 0f 6f 84 24
	70 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T62[rsp]
  00b7d	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00b86	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00b8f	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00b9a	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T63[rsp], xmm0
  00ba3	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00bac	66 0f 38 00 84
	24 80 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T63[rsp]
  00bb6	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T64[rsp], xmm0
  00bbf	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00bc8	66 0f eb 84 24
	90 04 00 00	 por	 xmm0, XMMWORD PTR $T64[rsp]
  00bd1	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T65[rsp], xmm0
  00bda	66 0f 6f 84 24
	a0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T65[rsp]
  00be3	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00bec	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00bf5	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00c00	66 0f 7f 84 24
	b0 04 00 00	 movdqa	 XMMWORD PTR $T66[rsp], xmm0
  00c09	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00c12	66 0f 38 00 84
	24 b0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T66[rsp]
  00c1c	66 0f 7f 84 24
	c0 04 00 00	 movdqa	 XMMWORD PTR $T67[rsp], xmm0
  00c25	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00c2e	66 0f eb 84 24
	c0 04 00 00	 por	 xmm0, XMMWORD PTR $T67[rsp]
  00c37	66 0f 7f 84 24
	d0 04 00 00	 movdqa	 XMMWORD PTR $T68[rsp], xmm0
  00c40	66 0f 6f 84 24
	d0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T68[rsp]
  00c49	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  00c52	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00c5b	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00c66	66 0f 7f 84 24
	e0 04 00 00	 movdqa	 XMMWORD PTR $T69[rsp], xmm0
  00c6f	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00c78	66 0f 38 00 84
	24 e0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T69[rsp]
  00c82	66 0f 7f 84 24
	f0 04 00 00	 movdqa	 XMMWORD PTR $T70[rsp], xmm0
  00c8b	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00c94	66 0f eb 84 24
	f0 04 00 00	 por	 xmm0, XMMWORD PTR $T70[rsp]
  00c9d	66 0f 7f 84 24
	00 05 00 00	 movdqa	 XMMWORD PTR $T71[rsp], xmm0
  00ca6	66 0f 6f 84 24
	00 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T71[rsp]
  00caf	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  00cb8	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00cc1	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00ccc	66 0f 7f 84 24
	10 05 00 00	 movdqa	 XMMWORD PTR $T72[rsp], xmm0
  00cd5	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00cde	66 0f 38 00 84
	24 10 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T72[rsp]
  00ce8	66 0f 7f 84 24
	20 05 00 00	 movdqa	 XMMWORD PTR $T73[rsp], xmm0
  00cf1	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00cfa	66 0f eb 84 24
	20 05 00 00	 por	 xmm0, XMMWORD PTR $T73[rsp]
  00d03	66 0f 7f 84 24
	30 05 00 00	 movdqa	 XMMWORD PTR $T74[rsp], xmm0
  00d0c	66 0f 6f 84 24
	30 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T74[rsp]
  00d15	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  00d1e	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00d27	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  00d32	66 0f 7f 84 24
	40 05 00 00	 movdqa	 XMMWORD PTR $T75[rsp], xmm0
  00d3b	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00d44	66 0f 38 00 84
	24 40 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T75[rsp]
  00d4e	66 0f 7f 84 24
	50 05 00 00	 movdqa	 XMMWORD PTR $T76[rsp], xmm0
  00d57	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00d60	66 0f eb 84 24
	50 05 00 00	 por	 xmm0, XMMWORD PTR $T76[rsp]
  00d69	66 0f 7f 84 24
	60 05 00 00	 movdqa	 XMMWORD PTR $T77[rsp], xmm0
  00d72	66 0f 6f 84 24
	60 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T77[rsp]
  00d7b	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00d84	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00d8c	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00d95	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00d99	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  00da1	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00daa	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00dae	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  00db6	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00dbf	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 535  :     }

  00dc3	e9 8d f6 ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 536  : }

  00dc8	48 8b cc	 mov	 rcx, rsp
  00dcb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dd7	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00ddf	48 33 cc	 xor	 rcx, rsp
  00de2	e8 00 00 00 00	 call	 __security_check_cookie
  00de7	48 81 c4 a8 05
	00 00		 add	 rsp, 1448		; 000005a8H
  00dee	5f		 pop	 rdi
  00def	5e		 pop	 rsi
  00df0	c3		 ret	 0
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278190338,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb_ssse3

; 78   : void convert_rgb24r_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 79   :     convert_rgb24_to_rgb_simd<RGB_PLANE(2, 1, 0, -1), true>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb_simd<4278190338,1>

; 80   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
dst0Line$ = 120
dst1Line$ = 128
dst2Line$ = 136
srcLine$ = 144
MASK_RGB_TO_RGB24$ = 176
xmask0$ = 240
$T6 = 256
xmask1$ = 272
$T7 = 288
xmask2$ = 304
$T8 = 320
xmask3$ = 336
$T9 = 352
y$10 = 368
ptr_src$11 = 376
ptr_dst0$12 = 384
ptr_dst1$13 = 392
ptr_dst2$14 = 400
x$15 = 408
x_fin$16 = 412
xSrc0$17 = 416
$T18 = 432
xSrc1$19 = 448
$T20 = 464
xSrc2$21 = 480
$T22 = 496
x0$23 = 512
$T24 = 528
x1$25 = 544
$T26 = 560
x2$27 = 576
$T28 = 592
$T29 = 608
$T30 = 624
$T31 = 640
$T32 = 656
$T33 = 672
$T34 = 688
$T35 = 704
$T36 = 720
$T37 = 736
$T38 = 752
$T39 = 768
$T40 = 784
$T41 = 800
$T42 = 816
$T43 = 832
$T44 = 848
$T45 = 864
$T46 = 880
x_offset$47 = 896
xSrc0$48 = 912
$T49 = 928
xSrc1$50 = 944
$T51 = 960
xSrc2$52 = 976
$T53 = 992
x0$54 = 1008
$T55 = 1024
x1$56 = 1040
$T57 = 1056
x2$58 = 1072
$T59 = 1088
$T60 = 1104
$T61 = 1120
$T62 = 1136
$T63 = 1152
$T64 = 1168
$T65 = 1184
$T66 = 1200
$T67 = 1216
$T68 = 1232
$T69 = 1248
$T70 = 1264
$T71 = 1280
$T72 = 1296
$T73 = 1312
$T74 = 1328
$T75 = 1344
$T76 = 1360
$T77 = 1376
$T78 = 1400
tv133 = 1416
__$ArrayPad$ = 1424
dst$ = 1472
src$ = 1480
width$ = 1488
src_y_pitch_byte$ = 1496
src_uv_pitch_byte$ = 1504
dst_y_pitch_byte$ = 1512
height$ = 1520
dst_height$ = 1528
thread_id$ = 1536
thread_n$ = 1544
crop$ = 1552
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb_simd<4278321408,0>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 05
	00 00		 sub	 rsp, 1448		; 000005a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 01 00 00	 mov	 ecx, 362		; 0000016aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1472]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 469  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 470  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 471  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 472  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 08 06
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 00
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 78
	05 00 00	 lea	 rcx, QWORD PTR $T78[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00115	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00125	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00129	48 8b c1	 mov	 rax, rcx
  0012c	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 01	 imul	 rax, rax, 1
  0013a	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00141	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00146	48 63 c9	 movsxd	 rcx, ecx
  00149	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00151	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00160	b8 08 00 00 00	 mov	 eax, 8
  00165	48 6b c0 02	 imul	 rax, rax, 2
  00169	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00170	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00175	48 63 c9	 movsxd	 rcx, ecx
  00178	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00180	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  0018f	33 c0		 xor	 eax, eax
  00191	85 c0		 test	 eax, eax
  00193	74 1e		 je	 SHORT $LN11@convert_rg
  00195	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00199	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001a0	2b c8		 sub	 ecx, eax
  001a2	8b c1		 mov	 eax, ecx
  001a4	2b 44 24 48	 sub	 eax, DWORD PTR y_range$[rsp]
  001a8	ff c8		 dec	 eax
  001aa	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  001b1	eb 0b		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  001b3	8b 44 24 48	 mov	 eax, DWORD PTR y_range$[rsp]
  001b7	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
$LN12@convert_rg:
  001be	b8 08 00 00 00	 mov	 eax, 8
  001c3	48 6b c0 00	 imul	 rax, rax, 0
  001c7	8b 8c 24 d8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  001ce	0f af 8c 24 88
	05 00 00	 imul	 ecx, DWORD PTR tv133[rsp]
  001d6	48 63 c9	 movsxd	 rcx, ecx
  001d9	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  001e1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001e5	48 03 c1	 add	 rax, rcx
  001e8	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  001ed	48 63 c9	 movsxd	 rcx, ecx
  001f0	48 03 c1	 add	 rax, rcx
  001f3	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001fb	c6 84 24 b0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp], 0
  00203	c6 84 24 b1 00
	00 00 03	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+1], 3
  0020b	c6 84 24 b2 00
	00 00 06	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+2], 6
  00213	c6 84 24 b3 00
	00 00 09	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+3], 9
  0021b	c6 84 24 b4 00
	00 00 0c	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+4], 12
  00223	c6 84 24 b5 00
	00 00 0f	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+5], 15
  0022b	c6 84 24 b6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+6], -1
  00233	c6 84 24 b7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+7], -1
  0023b	c6 84 24 b8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+8], -1
  00243	c6 84 24 b9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+9], -1
  0024b	c6 84 24 ba 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+10], -1
  00253	c6 84 24 bb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+11], -1
  0025b	c6 84 24 bc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+12], -1
  00263	c6 84 24 bd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+13], -1
  0026b	c6 84 24 be 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+14], -1
  00273	c6 84 24 bf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0027b	c6 84 24 c0 00
	00 00 01	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+16], 1
  00283	c6 84 24 c1 00
	00 00 04	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+17], 4
  0028b	c6 84 24 c2 00
	00 00 07	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+18], 7
  00293	c6 84 24 c3 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+19], 10
  0029b	c6 84 24 c4 00
	00 00 0d	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+20], 13
  002a3	c6 84 24 c5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+21], -1
  002ab	c6 84 24 c6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+22], -1
  002b3	c6 84 24 c7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+23], -1
  002bb	c6 84 24 c8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+24], -1
  002c3	c6 84 24 c9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+25], -1
  002cb	c6 84 24 ca 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+26], -1
  002d3	c6 84 24 cb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+27], -1
  002db	c6 84 24 cc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+28], -1
  002e3	c6 84 24 cd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+29], -1
  002eb	c6 84 24 ce 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+30], -1
  002f3	c6 84 24 cf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  002fb	c6 84 24 d0 00
	00 00 02	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+32], 2
  00303	c6 84 24 d1 00
	00 00 05	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+33], 5
  0030b	c6 84 24 d2 00
	00 00 08	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+34], 8
  00313	c6 84 24 d3 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+35], 11
  0031b	c6 84 24 d4 00
	00 00 0e	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+36], 14
  00323	c6 84 24 d5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+37], -1
  0032b	c6 84 24 d6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+38], -1
  00333	c6 84 24 d7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+39], -1
  0033b	c6 84 24 d8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+40], -1
  00343	c6 84 24 d9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+41], -1
  0034b	c6 84 24 da 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+42], -1
  00353	c6 84 24 db 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+43], -1
  0035b	c6 84 24 dc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+44], -1
  00363	c6 84 24 dd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+45], -1
  0036b	c6 84 24 de 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+46], -1
  00373	c6 84 24 df 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0037b	b8 01 00 00 00	 mov	 eax, 1
  00380	48 6b c0 00	 imul	 rax, rax, 0
  00384	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  0038c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00390	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00399	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  003a2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR xmask0$[rsp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	48 6b c0 10	 imul	 rax, rax, 16
  003b4	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003bc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003c0	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  003c9	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  003d2	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xmask1$[rsp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  003db	b8 01 00 00 00	 mov	 eax, 1
  003e0	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003e4	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003ec	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003f0	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  003f9	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00402	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR xmask2$[rsp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  0040b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00413	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  0041c	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00425	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR xmask3$[rsp], xmm0

; 487  :     if (source_reverse) {

  0042e	33 c0		 xor	 eax, eax
  00430	85 c0		 test	 eax, eax
  00432	74 0f		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  00434	6b 84 24 d8 05
	00 00 ff	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], -1
  0043c	89 84 24 d8 05
	00 00		 mov	 DWORD PTR src_y_pitch_byte$[rsp], eax
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  00443	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0044e	e9 82 00 00 00	 jmp	 $LN4@convert_rg
$LN2@convert_rg:
  00453	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045a	ff c0		 inc	 eax
  0045c	89 84 24 70 01
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00463	48 63 84 24 d8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0046b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00473	48 03 c8	 add	 rcx, rax
  00476	48 8b c1	 mov	 rax, rcx
  00479	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax
  00481	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00489	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dst0Line$[rsp]
  0048e	48 03 c8	 add	 rcx, rax
  00491	48 8b c1	 mov	 rax, rcx
  00494	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax
  00499	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dst1Line$[rsp]
  004a9	48 03 c8	 add	 rcx, rax
  004ac	48 8b c1	 mov	 rax, rcx
  004af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax
  004b7	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004bf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst2Line$[rsp]
  004c7	48 03 c8	 add	 rcx, rax
  004ca	48 8b c1	 mov	 rax, rcx
  004cd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax
$LN4@convert_rg:
  004d5	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d9	39 84 24 70 01
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004e0	0f 8d e0 08 00
	00		 jge	 $LN3@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  004e6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR srcLine$[rsp]
  004ee	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  004f6	48 8b 44 24 78	 mov	 rax, QWORD PTR dst0Line$[rsp]
  004fb	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  00503	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dst1Line$[rsp]
  0050b	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  00513	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dst2Line$[rsp]
  0051b	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00523	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052e	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  00532	8b 8c 24 d0 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00539	2b c8		 sub	 ecx, eax
  0053b	8b c1		 mov	 eax, ecx
  0053d	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  00541	83 e8 10	 sub	 eax, 16
  00544	89 84 24 9c 01
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  0054b	eb 61		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  0054d	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00554	83 c0 10	 add	 eax, 16
  00557	89 84 24 98 01
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0055e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00566	48 83 c0 30	 add	 rax, 48			; 00000030H
  0056a	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax
  00572	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  0057a	48 83 c0 10	 add	 rax, 16
  0057e	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax
  00586	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  0058e	48 83 c0 10	 add	 rax, 16
  00592	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax
  0059a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  005a2	48 83 c0 10	 add	 rax, 16
  005a6	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN7@convert_rg:
  005ae	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  005b5	39 84 24 98 01
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  005bc	0f 8d af 03 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  005c2	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005ca	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005ce	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  005d7	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  005e0	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xSrc0$17[rsp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  005e9	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005f1	48 83 c0 10	 add	 rax, 16
  005f5	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005f9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00602	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0060b	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xSrc1$19[rsp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00614	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  0061c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00620	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00624	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  0062d	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  00636	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR xSrc2$21[rsp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  0063f	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  00648	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00652	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  0065b	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00664	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  0066d	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  00676	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00680	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00689	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T26[rsp]
  00692	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0069b	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  006a4	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  006ae	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  006b7	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  006c0	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  006c9	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  006d2	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  006dd	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  006e6	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  006ef	66 0f 38 00 84
	24 60 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T29[rsp]
  006f9	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00702	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0070b	66 0f eb 84 24
	70 02 00 00	 por	 xmm0, XMMWORD PTR $T30[rsp]
  00714	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0071d	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  00726	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  0072f	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00738	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00743	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  0074c	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  00755	66 0f 38 00 84
	24 90 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T32[rsp]
  0075f	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  00768	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00771	66 0f eb 84 24
	a0 02 00 00	 por	 xmm0, XMMWORD PTR $T33[rsp]
  0077a	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  00783	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T34[rsp]
  0078c	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00795	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  0079e	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  007a9	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  007b2	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  007bb	66 0f 38 00 84
	24 c0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T35[rsp]
  007c5	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  007ce	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  007d7	66 0f eb 84 24
	d0 02 00 00	 por	 xmm0, XMMWORD PTR $T36[rsp]
  007e0	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  007e9	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T37[rsp]
  007f2	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  007fb	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00804	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  0080f	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  00818	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00821	66 0f 38 00 84
	24 f0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T38[rsp]
  0082b	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00834	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0083d	66 0f eb 84 24
	00 03 00 00	 por	 xmm0, XMMWORD PTR $T39[rsp]
  00846	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  0084f	66 0f 6f 84 24
	10 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T40[rsp]
  00858	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  00861	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  0086a	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00875	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  0087e	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00887	66 0f 38 00 84
	24 20 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T41[rsp]
  00891	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0089a	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  008a3	66 0f eb 84 24
	30 03 00 00	 por	 xmm0, XMMWORD PTR $T42[rsp]
  008ac	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  008b5	66 0f 6f 84 24
	40 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  008be	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  008c7	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  008d0	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  008db	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  008e4	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  008ed	66 0f 38 00 84
	24 50 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T44[rsp]
  008f7	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00900	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  00909	66 0f eb 84 24
	60 03 00 00	 por	 xmm0, XMMWORD PTR $T45[rsp]
  00912	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  0091b	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  00924	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  0092d	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00935	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0093e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00942	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  0094a	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00953	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00957	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  0095f	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  00968	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 512  :         }

  0096c	e9 dc fb ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  00971	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00978	83 e0 0f	 and	 eax, 15
  0097b	85 c0		 test	 eax, eax
  0097d	0f 84 94 00 00
	00		 je	 $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  00983	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0098a	83 e0 0f	 and	 eax, 15
  0098d	b9 10 00 00 00	 mov	 ecx, 16
  00992	2b c8		 sub	 ecx, eax
  00994	8b c1		 mov	 eax, ecx
  00996	89 84 24 80 03
	00 00		 mov	 DWORD PTR x_offset$47[rsp], eax

; 515  :             ptr_src -= x_offset * 3;

  0099d	6b 84 24 80 03
	00 00 03	 imul	 eax, DWORD PTR x_offset$47[rsp], 3
  009a5	48 98		 cdqe
  009a7	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$11[rsp]
  009af	48 2b c8	 sub	 rcx, rax
  009b2	48 8b c1	 mov	 rax, rcx
  009b5	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 516  :             ptr_dst0 -= x_offset;

  009bd	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009c5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst0$12[rsp]
  009cd	48 2b c8	 sub	 rcx, rax
  009d0	48 8b c1	 mov	 rax, rcx
  009d3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 517  :             ptr_dst1 -= x_offset;

  009db	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009e3	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst1$13[rsp]
  009eb	48 2b c8	 sub	 rcx, rax
  009ee	48 8b c1	 mov	 rax, rcx
  009f1	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 518  :             ptr_dst2 -= x_offset;

  009f9	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  00a01	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst2$14[rsp]
  00a09	48 2b c8	 sub	 rcx, rax
  00a0c	48 8b c1	 mov	 rax, rcx
  00a0f	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00a17	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a1f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a23	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  00a2c	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T49[rsp]
  00a35	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR xSrc0$48[rsp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  00a3e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a46	48 83 c0 10	 add	 rax, 16
  00a4a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a4e	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00a57	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T51[rsp]
  00a60	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR xSrc1$50[rsp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00a69	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a71	48 83 c0 20	 add	 rax, 32			; 00000020H
  00a75	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a79	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  00a82	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T53[rsp]
  00a8b	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR xSrc2$52[rsp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00a94	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00a9d	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00aa7	66 0f 7f 84 24
	00 04 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00ab0	66 0f 6f 84 24
	00 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  00ab9	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00ac2	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00acb	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00ad5	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  00ade	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T57[rsp]
  00ae7	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00af0	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00af9	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b03	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00b0c	66 0f 6f 84 24
	40 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T59[rsp]
  00b15	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  00b1e	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b27	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  00b32	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T60[rsp], xmm0
  00b3b	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00b44	66 0f 38 00 84
	24 50 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T60[rsp]
  00b4e	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T61[rsp], xmm0
  00b57	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00b60	66 0f eb 84 24
	60 04 00 00	 por	 xmm0, XMMWORD PTR $T61[rsp]
  00b69	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T62[rsp], xmm0
  00b72	66 0f 6f 84 24
	70 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T62[rsp]
  00b7b	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00b84	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00b8d	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00b98	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T63[rsp], xmm0
  00ba1	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00baa	66 0f 38 00 84
	24 80 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T63[rsp]
  00bb4	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T64[rsp], xmm0
  00bbd	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00bc6	66 0f eb 84 24
	90 04 00 00	 por	 xmm0, XMMWORD PTR $T64[rsp]
  00bcf	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T65[rsp], xmm0
  00bd8	66 0f 6f 84 24
	a0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T65[rsp]
  00be1	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00bea	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00bf3	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00bfe	66 0f 7f 84 24
	b0 04 00 00	 movdqa	 XMMWORD PTR $T66[rsp], xmm0
  00c07	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00c10	66 0f 38 00 84
	24 b0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T66[rsp]
  00c1a	66 0f 7f 84 24
	c0 04 00 00	 movdqa	 XMMWORD PTR $T67[rsp], xmm0
  00c23	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00c2c	66 0f eb 84 24
	c0 04 00 00	 por	 xmm0, XMMWORD PTR $T67[rsp]
  00c35	66 0f 7f 84 24
	d0 04 00 00	 movdqa	 XMMWORD PTR $T68[rsp], xmm0
  00c3e	66 0f 6f 84 24
	d0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T68[rsp]
  00c47	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  00c50	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00c59	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00c64	66 0f 7f 84 24
	e0 04 00 00	 movdqa	 XMMWORD PTR $T69[rsp], xmm0
  00c6d	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00c76	66 0f 38 00 84
	24 e0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T69[rsp]
  00c80	66 0f 7f 84 24
	f0 04 00 00	 movdqa	 XMMWORD PTR $T70[rsp], xmm0
  00c89	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00c92	66 0f eb 84 24
	f0 04 00 00	 por	 xmm0, XMMWORD PTR $T70[rsp]
  00c9b	66 0f 7f 84 24
	00 05 00 00	 movdqa	 XMMWORD PTR $T71[rsp], xmm0
  00ca4	66 0f 6f 84 24
	00 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T71[rsp]
  00cad	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  00cb6	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00cbf	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00cca	66 0f 7f 84 24
	10 05 00 00	 movdqa	 XMMWORD PTR $T72[rsp], xmm0
  00cd3	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00cdc	66 0f 38 00 84
	24 10 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T72[rsp]
  00ce6	66 0f 7f 84 24
	20 05 00 00	 movdqa	 XMMWORD PTR $T73[rsp], xmm0
  00cef	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00cf8	66 0f eb 84 24
	20 05 00 00	 por	 xmm0, XMMWORD PTR $T73[rsp]
  00d01	66 0f 7f 84 24
	30 05 00 00	 movdqa	 XMMWORD PTR $T74[rsp], xmm0
  00d0a	66 0f 6f 84 24
	30 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T74[rsp]
  00d13	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  00d1c	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00d25	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  00d30	66 0f 7f 84 24
	40 05 00 00	 movdqa	 XMMWORD PTR $T75[rsp], xmm0
  00d39	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00d42	66 0f 38 00 84
	24 40 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T75[rsp]
  00d4c	66 0f 7f 84 24
	50 05 00 00	 movdqa	 XMMWORD PTR $T76[rsp], xmm0
  00d55	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00d5e	66 0f eb 84 24
	50 05 00 00	 por	 xmm0, XMMWORD PTR $T76[rsp]
  00d67	66 0f 7f 84 24
	60 05 00 00	 movdqa	 XMMWORD PTR $T77[rsp], xmm0
  00d70	66 0f 6f 84 24
	60 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T77[rsp]
  00d79	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00d82	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00d8a	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00d93	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00d97	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  00d9f	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00da8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00dac	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  00db4	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00dbd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 535  :     }

  00dc1	e9 8d f6 ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 536  : }

  00dc6	48 8b cc	 mov	 rcx, rsp
  00dc9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dd5	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00ddd	48 33 cc	 xor	 rcx, rsp
  00de0	e8 00 00 00 00	 call	 __security_check_cookie
  00de5	48 81 c4 a8 05
	00 00		 add	 rsp, 1448		; 000005a8H
  00dec	5f		 pop	 rdi
  00ded	5e		 pop	 rsi
  00dee	c3		 ret	 0
??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278321408,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_bgr24_to_rgb_ssse3

; 74   : void convert_bgr24_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 75   :     convert_rgb24_to_rgb_simd<RGB_PLANE(0, 1, 2, -1), false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPACABAA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb_simd<4278321408,0>

; 76   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_bgr24_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
dst0Line$ = 120
dst1Line$ = 128
dst2Line$ = 136
srcLine$ = 144
MASK_RGB_TO_RGB24$ = 176
xmask0$ = 240
$T6 = 256
xmask1$ = 272
$T7 = 288
xmask2$ = 304
$T8 = 320
xmask3$ = 336
$T9 = 352
y$10 = 368
ptr_src$11 = 376
ptr_dst0$12 = 384
ptr_dst1$13 = 392
ptr_dst2$14 = 400
x$15 = 408
x_fin$16 = 412
xSrc0$17 = 416
$T18 = 432
xSrc1$19 = 448
$T20 = 464
xSrc2$21 = 480
$T22 = 496
x0$23 = 512
$T24 = 528
x1$25 = 544
$T26 = 560
x2$27 = 576
$T28 = 592
$T29 = 608
$T30 = 624
$T31 = 640
$T32 = 656
$T33 = 672
$T34 = 688
$T35 = 704
$T36 = 720
$T37 = 736
$T38 = 752
$T39 = 768
$T40 = 784
$T41 = 800
$T42 = 816
$T43 = 832
$T44 = 848
$T45 = 864
$T46 = 880
x_offset$47 = 896
xSrc0$48 = 912
$T49 = 928
xSrc1$50 = 944
$T51 = 960
xSrc2$52 = 976
$T53 = 992
x0$54 = 1008
$T55 = 1024
x1$56 = 1040
$T57 = 1056
x2$58 = 1072
$T59 = 1088
$T60 = 1104
$T61 = 1120
$T62 = 1136
$T63 = 1152
$T64 = 1168
$T65 = 1184
$T66 = 1200
$T67 = 1216
$T68 = 1232
$T69 = 1248
$T70 = 1264
$T71 = 1280
$T72 = 1296
$T73 = 1312
$T74 = 1328
$T75 = 1344
$T76 = 1360
$T77 = 1376
$T78 = 1400
tv133 = 1416
__$ArrayPad$ = 1424
dst$ = 1472
src$ = 1480
width$ = 1488
src_y_pitch_byte$ = 1496
src_uv_pitch_byte$ = 1504
dst_y_pitch_byte$ = 1512
height$ = 1520
dst_height$ = 1528
thread_id$ = 1536
thread_n$ = 1544
crop$ = 1552
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb_simd<4278190338,0>

; 468  : static void __forceinline convert_rgb24_to_rgb_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 05
	00 00		 sub	 rsp, 1448		; 000005a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 01 00 00	 mov	 ecx, 362		; 0000016aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1472]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 469  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 470  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 471  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 472  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 473  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 08 06
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 00
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 78
	05 00 00	 lea	 rcx, QWORD PTR $T78[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 474  :     uint8_t *dst0Line = (uint8_t *)dst[(plane_from >>  0) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 02	 imul	 rax, rax, 2
  0010e	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00115	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00125	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00129	48 8b c1	 mov	 rax, rcx
  0012c	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax

; 475  :     uint8_t *dst1Line = (uint8_t *)dst[(plane_from >>  8) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 01	 imul	 rax, rax, 1
  0013a	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00141	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00146	48 63 c9	 movsxd	 rcx, ecx
  00149	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00151	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax

; 476  :     uint8_t *dst2Line = (uint8_t *)dst[(plane_from >> 16) & 0xff] + dst_y_pitch_byte * y_range.start_dst;

  00160	b8 08 00 00 00	 mov	 eax, 8
  00165	48 6b c0 00	 imul	 rax, rax, 0
  00169	8b 8c 24 e8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00170	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00175	48 63 c9	 movsxd	 rcx, ecx
  00178	48 8b 94 24 c0
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00180	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax

; 477  :     uint8_t *srcLine  = (uint8_t *)src[0] + src_y_pitch_byte * ((source_reverse) ? (height - crop_bottom - y_range.start_src - 1) : y_range.start_src) + crop_left * 3;

  0018f	33 c0		 xor	 eax, eax
  00191	85 c0		 test	 eax, eax
  00193	74 1e		 je	 SHORT $LN11@convert_rg
  00195	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00199	8b 8c 24 f0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001a0	2b c8		 sub	 ecx, eax
  001a2	8b c1		 mov	 eax, ecx
  001a4	2b 44 24 48	 sub	 eax, DWORD PTR y_range$[rsp]
  001a8	ff c8		 dec	 eax
  001aa	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  001b1	eb 0b		 jmp	 SHORT $LN12@convert_rg
$LN11@convert_rg:
  001b3	8b 44 24 48	 mov	 eax, DWORD PTR y_range$[rsp]
  001b7	89 84 24 88 05
	00 00		 mov	 DWORD PTR tv133[rsp], eax
$LN12@convert_rg:
  001be	b8 08 00 00 00	 mov	 eax, 8
  001c3	48 6b c0 00	 imul	 rax, rax, 0
  001c7	8b 8c 24 d8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  001ce	0f af 8c 24 88
	05 00 00	 imul	 ecx, DWORD PTR tv133[rsp]
  001d6	48 63 c9	 movsxd	 rcx, ecx
  001d9	48 8b 94 24 c8
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  001e1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001e5	48 03 c1	 add	 rax, rcx
  001e8	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  001ed	48 63 c9	 movsxd	 rcx, ecx
  001f0	48 03 c1	 add	 rax, rcx
  001f3	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax

; 478  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 479  :         0,  3,  6,  9, 12, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  001fb	c6 84 24 b0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp], 0
  00203	c6 84 24 b1 00
	00 00 03	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+1], 3
  0020b	c6 84 24 b2 00
	00 00 06	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+2], 6
  00213	c6 84 24 b3 00
	00 00 09	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+3], 9
  0021b	c6 84 24 b4 00
	00 00 0c	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+4], 12
  00223	c6 84 24 b5 00
	00 00 0f	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+5], 15
  0022b	c6 84 24 b6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+6], -1
  00233	c6 84 24 b7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+7], -1
  0023b	c6 84 24 b8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+8], -1
  00243	c6 84 24 b9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+9], -1
  0024b	c6 84 24 ba 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+10], -1
  00253	c6 84 24 bb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+11], -1
  0025b	c6 84 24 bc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+12], -1
  00263	c6 84 24 bd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+13], -1
  0026b	c6 84 24 be 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+14], -1
  00273	c6 84 24 bf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+15], -1

; 480  :         1,  4,  7, 10, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  0027b	c6 84 24 c0 00
	00 00 01	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+16], 1
  00283	c6 84 24 c1 00
	00 00 04	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+17], 4
  0028b	c6 84 24 c2 00
	00 00 07	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+18], 7
  00293	c6 84 24 c3 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+19], 10
  0029b	c6 84 24 c4 00
	00 00 0d	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+20], 13
  002a3	c6 84 24 c5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+21], -1
  002ab	c6 84 24 c6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+22], -1
  002b3	c6 84 24 c7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+23], -1
  002bb	c6 84 24 c8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+24], -1
  002c3	c6 84 24 c9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+25], -1
  002cb	c6 84 24 ca 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+26], -1
  002d3	c6 84 24 cb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+27], -1
  002db	c6 84 24 cc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+28], -1
  002e3	c6 84 24 cd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+29], -1
  002eb	c6 84 24 ce 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+30], -1
  002f3	c6 84 24 cf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+31], -1

; 481  :         2,  5,  8, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

  002fb	c6 84 24 d0 00
	00 00 02	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+32], 2
  00303	c6 84 24 d1 00
	00 00 05	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+33], 5
  0030b	c6 84 24 d2 00
	00 00 08	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+34], 8
  00313	c6 84 24 d3 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+35], 11
  0031b	c6 84 24 d4 00
	00 00 0e	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+36], 14
  00323	c6 84 24 d5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+37], -1
  0032b	c6 84 24 d6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+38], -1
  00333	c6 84 24 d7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+39], -1
  0033b	c6 84 24 d8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+40], -1
  00343	c6 84 24 d9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+41], -1
  0034b	c6 84 24 da 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+42], -1
  00353	c6 84 24 db 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+43], -1
  0035b	c6 84 24 dc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+44], -1
  00363	c6 84 24 dd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+45], -1
  0036b	c6 84 24 de 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+46], -1
  00373	c6 84 24 df 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+47], -1

; 482  :     };
; 483  :     __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  0037b	b8 01 00 00 00	 mov	 eax, 1
  00380	48 6b c0 00	 imul	 rax, rax, 0
  00384	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  0038c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00390	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00399	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  003a2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR xmask0$[rsp], xmm0

; 484  :     __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	48 6b c0 10	 imul	 rax, rax, 16
  003b4	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003bc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003c0	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  003c9	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  003d2	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xmask1$[rsp], xmm0

; 485  :     __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  003db	b8 01 00 00 00	 mov	 eax, 1
  003e0	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003e4	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  003ec	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003f0	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  003f9	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00402	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR xmask2$[rsp], xmm0

; 486  :     __m128i xmask3 = _mm_set1_epi8(-1);

  0040b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00413	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  0041c	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00425	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR xmask3$[rsp], xmm0

; 487  :     if (source_reverse) {

  0042e	33 c0		 xor	 eax, eax
  00430	85 c0		 test	 eax, eax
  00432	74 0f		 je	 SHORT $LN8@convert_rg

; 488  :         src_y_pitch_byte = -1 * src_y_pitch_byte;

  00434	6b 84 24 d8 05
	00 00 ff	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], -1
  0043c	89 84 24 d8 05
	00 00		 mov	 DWORD PTR src_y_pitch_byte$[rsp], eax
$LN8@convert_rg:

; 489  :     }
; 490  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dst0Line += dst_y_pitch_byte, dst1Line += dst_y_pitch_byte, dst2Line += dst_y_pitch_byte) {

  00443	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0044e	e9 82 00 00 00	 jmp	 $LN4@convert_rg
$LN2@convert_rg:
  00453	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045a	ff c0		 inc	 eax
  0045c	89 84 24 70 01
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00463	48 63 84 24 d8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0046b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00473	48 03 c8	 add	 rcx, rax
  00476	48 8b c1	 mov	 rax, rcx
  00479	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcLine$[rsp], rax
  00481	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00489	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dst0Line$[rsp]
  0048e	48 03 c8	 add	 rcx, rax
  00491	48 8b c1	 mov	 rax, rcx
  00494	48 89 44 24 78	 mov	 QWORD PTR dst0Line$[rsp], rax
  00499	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dst1Line$[rsp]
  004a9	48 03 c8	 add	 rcx, rax
  004ac	48 8b c1	 mov	 rax, rcx
  004af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dst1Line$[rsp], rax
  004b7	48 63 84 24 e8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004bf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst2Line$[rsp]
  004c7	48 03 c8	 add	 rcx, rax
  004ca	48 8b c1	 mov	 rax, rcx
  004cd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst2Line$[rsp], rax
$LN4@convert_rg:
  004d5	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d9	39 84 24 70 01
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004e0	0f 8d e0 08 00
	00		 jge	 $LN3@convert_rg

; 491  :         uint8_t *ptr_src  = srcLine;

  004e6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR srcLine$[rsp]
  004ee	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 492  :         uint8_t *ptr_dst0 = dst0Line;

  004f6	48 8b 44 24 78	 mov	 rax, QWORD PTR dst0Line$[rsp]
  004fb	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 493  :         uint8_t *ptr_dst1 = dst1Line;

  00503	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dst1Line$[rsp]
  0050b	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 494  :         uint8_t *ptr_dst2 = dst2Line;

  00513	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dst2Line$[rsp]
  0051b	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax

; 495  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00523	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052e	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  00532	8b 8c 24 d0 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00539	2b c8		 sub	 ecx, eax
  0053b	8b c1		 mov	 eax, ecx
  0053d	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  00541	83 e8 10	 sub	 eax, 16
  00544	89 84 24 9c 01
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 496  :         for (; x < x_fin; x += 16, ptr_src += 48, ptr_dst0 += 16, ptr_dst1 += 16, ptr_dst2 += 16) {

  0054b	eb 61		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  0054d	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00554	83 c0 10	 add	 eax, 16
  00557	89 84 24 98 01
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0055e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00566	48 83 c0 30	 add	 rax, 48			; 00000030H
  0056a	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax
  00572	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  0057a	48 83 c0 10	 add	 rax, 16
  0057e	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax
  00586	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  0058e	48 83 c0 10	 add	 rax, 16
  00592	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax
  0059a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  005a2	48 83 c0 10	 add	 rax, 16
  005a6	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN7@convert_rg:
  005ae	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  005b5	39 84 24 98 01
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  005bc	0f 8d af 03 00
	00		 jge	 $LN6@convert_rg

; 497  :             __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  005c2	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005ca	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005ce	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  005d7	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  005e0	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xSrc0$17[rsp], xmm0

; 498  :             __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  005e9	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  005f1	48 83 c0 10	 add	 rax, 16
  005f5	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005f9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00602	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0060b	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xSrc1$19[rsp], xmm0

; 499  :             __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00614	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  0061c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00620	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00624	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  0062d	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  00636	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR xSrc2$21[rsp], xmm0

; 500  :             __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  0063f	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  00648	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00652	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  0065b	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00664	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 501  :             __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  0066d	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  00676	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00680	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00689	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T26[rsp]
  00692	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 502  :             __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  0069b	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$17[rsp]
  006a4	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  006ae	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  006b7	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  006c0	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 503  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  006c9	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  006d2	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  006dd	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  006e6	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  006ef	66 0f 38 00 84
	24 60 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T29[rsp]
  006f9	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00702	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0070b	66 0f eb 84 24
	70 02 00 00	 por	 xmm0, XMMWORD PTR $T30[rsp]
  00714	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0071d	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  00726	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 504  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  0072f	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00738	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00743	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  0074c	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  00755	66 0f 38 00 84
	24 90 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T32[rsp]
  0075f	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  00768	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00771	66 0f eb 84 24
	a0 02 00 00	 por	 xmm0, XMMWORD PTR $T33[rsp]
  0077a	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  00783	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T34[rsp]
  0078c	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 505  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00795	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  0079e	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  007a9	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  007b2	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$19[rsp]
  007bb	66 0f 38 00 84
	24 c0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T35[rsp]
  007c5	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  007ce	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  007d7	66 0f eb 84 24
	d0 02 00 00	 por	 xmm0, XMMWORD PTR $T36[rsp]
  007e0	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  007e9	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T37[rsp]
  007f2	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 506  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3,  5)));

  007fb	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00804	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  0080f	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  00818	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00821	66 0f 38 00 84
	24 f0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T38[rsp]
  0082b	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00834	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0083d	66 0f eb 84 24
	00 03 00 00	 por	 xmm0, XMMWORD PTR $T39[rsp]
  00846	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  0084f	66 0f 6f 84 24
	10 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T40[rsp]
  00858	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 507  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3,  5)));

  00861	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  0086a	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00875	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  0087e	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  00887	66 0f 38 00 84
	24 20 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T41[rsp]
  00891	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0089a	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  008a3	66 0f eb 84 24
	30 03 00 00	 por	 xmm0, XMMWORD PTR $T42[rsp]
  008ac	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  008b5	66 0f 6f 84 24
	40 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  008be	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x1$25[rsp], xmm0

; 508  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3,  6)));

  008c7	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  008d0	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  008db	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  008e4	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$21[rsp]
  008ed	66 0f 38 00 84
	24 50 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T44[rsp]
  008f7	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00900	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  00909	66 0f eb 84 24
	60 03 00 00	 por	 xmm0, XMMWORD PTR $T45[rsp]
  00912	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  0091b	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  00924	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR x2$27[rsp], xmm0

; 509  :             _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  0092d	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00935	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  0093e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 510  :             _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00942	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  0094a	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$25[rsp]
  00953	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 511  :             _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00957	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  0095f	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$27[rsp]
  00968	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 512  :         }

  0096c	e9 dc fb ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 513  :         if (width & 15) {

  00971	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00978	83 e0 0f	 and	 eax, 15
  0097b	85 c0		 test	 eax, eax
  0097d	0f 84 94 00 00
	00		 je	 $LN9@convert_rg

; 514  :             int x_offset = (16 - (width & 15));

  00983	8b 84 24 d0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0098a	83 e0 0f	 and	 eax, 15
  0098d	b9 10 00 00 00	 mov	 ecx, 16
  00992	2b c8		 sub	 ecx, eax
  00994	8b c1		 mov	 eax, ecx
  00996	89 84 24 80 03
	00 00		 mov	 DWORD PTR x_offset$47[rsp], eax

; 515  :             ptr_src -= x_offset * 3;

  0099d	6b 84 24 80 03
	00 00 03	 imul	 eax, DWORD PTR x_offset$47[rsp], 3
  009a5	48 98		 cdqe
  009a7	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$11[rsp]
  009af	48 2b c8	 sub	 rcx, rax
  009b2	48 8b c1	 mov	 rax, rcx
  009b5	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 516  :             ptr_dst0 -= x_offset;

  009bd	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009c5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst0$12[rsp]
  009cd	48 2b c8	 sub	 rcx, rax
  009d0	48 8b c1	 mov	 rax, rcx
  009d3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR ptr_dst0$12[rsp], rax

; 517  :             ptr_dst1 -= x_offset;

  009db	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  009e3	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst1$13[rsp]
  009eb	48 2b c8	 sub	 rcx, rax
  009ee	48 8b c1	 mov	 rax, rcx
  009f1	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR ptr_dst1$13[rsp], rax

; 518  :             ptr_dst2 -= x_offset;

  009f9	48 63 84 24 80
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$47[rsp]
  00a01	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst2$14[rsp]
  00a09	48 2b c8	 sub	 rcx, rax
  00a0c	48 8b c1	 mov	 rax, rcx
  00a0f	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR ptr_dst2$14[rsp], rax
$LN9@convert_rg:

; 519  :         }
; 520  :         __m128i xSrc0 = _mm_loadu_si128((__m128i *)(ptr_src +  0));

  00a17	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a1f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a23	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  00a2c	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T49[rsp]
  00a35	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR xSrc0$48[rsp], xmm0

; 521  :         __m128i xSrc1 = _mm_loadu_si128((__m128i *)(ptr_src + 16));

  00a3e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a46	48 83 c0 10	 add	 rax, 16
  00a4a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a4e	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00a57	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T51[rsp]
  00a60	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR xSrc1$50[rsp], xmm0

; 522  :         __m128i xSrc2 = _mm_loadu_si128((__m128i *)(ptr_src + 32));

  00a69	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a71	48 83 c0 20	 add	 rax, 32			; 00000020H
  00a75	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a79	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  00a82	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T53[rsp]
  00a8b	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR xSrc2$52[rsp], xmm0

; 523  :         __m128i x0 = _mm_shuffle_epi8(xSrc0, xmask0);

  00a94	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00a9d	66 0f 38 00 84
	24 f0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$[rsp]
  00aa7	66 0f 7f 84 24
	00 04 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00ab0	66 0f 6f 84 24
	00 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  00ab9	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 524  :         __m128i x1 = _mm_shuffle_epi8(xSrc0, xmask1);

  00ac2	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00acb	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$[rsp]
  00ad5	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  00ade	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T57[rsp]
  00ae7	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 525  :         __m128i x2 = _mm_shuffle_epi8(xSrc0, xmask2);

  00af0	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc0$48[rsp]
  00af9	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b03	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00b0c	66 0f 6f 84 24
	40 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T59[rsp]
  00b15	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 526  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask2, xmask3, 10)));

  00b1e	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00b27	66 0f 3a 0f 84
	24 50 01 00 00
	0a		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 10
  00b32	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T60[rsp], xmm0
  00b3b	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00b44	66 0f 38 00 84
	24 50 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T60[rsp]
  00b4e	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T61[rsp], xmm0
  00b57	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00b60	66 0f eb 84 24
	60 04 00 00	 por	 xmm0, XMMWORD PTR $T61[rsp]
  00b69	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T62[rsp], xmm0
  00b72	66 0f 6f 84 24
	70 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T62[rsp]
  00b7b	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 527  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask0, xmask3, 11)));

  00b84	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00b8d	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00b98	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T63[rsp], xmm0
  00ba1	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00baa	66 0f 38 00 84
	24 80 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T63[rsp]
  00bb4	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T64[rsp], xmm0
  00bbd	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00bc6	66 0f eb 84 24
	90 04 00 00	 por	 xmm0, XMMWORD PTR $T64[rsp]
  00bcf	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T65[rsp], xmm0
  00bd8	66 0f 6f 84 24
	a0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T65[rsp]
  00be1	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 528  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc1, _mm_alignr_epi8(xmask1, xmask3, 11)));

  00bea	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00bf3	66 0f 3a 0f 84
	24 50 01 00 00
	0b		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 11
  00bfe	66 0f 7f 84 24
	b0 04 00 00	 movdqa	 XMMWORD PTR $T66[rsp], xmm0
  00c07	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc1$50[rsp]
  00c10	66 0f 38 00 84
	24 b0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T66[rsp]
  00c1a	66 0f 7f 84 24
	c0 04 00 00	 movdqa	 XMMWORD PTR $T67[rsp], xmm0
  00c23	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00c2c	66 0f eb 84 24
	c0 04 00 00	 por	 xmm0, XMMWORD PTR $T67[rsp]
  00c35	66 0f 7f 84 24
	d0 04 00 00	 movdqa	 XMMWORD PTR $T68[rsp], xmm0
  00c3e	66 0f 6f 84 24
	d0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T68[rsp]
  00c47	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 529  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask1, xmask3, 5)));

  00c50	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$[rsp]
  00c59	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00c64	66 0f 7f 84 24
	e0 04 00 00	 movdqa	 XMMWORD PTR $T69[rsp], xmm0
  00c6d	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00c76	66 0f 38 00 84
	24 e0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T69[rsp]
  00c80	66 0f 7f 84 24
	f0 04 00 00	 movdqa	 XMMWORD PTR $T70[rsp], xmm0
  00c89	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00c92	66 0f eb 84 24
	f0 04 00 00	 por	 xmm0, XMMWORD PTR $T70[rsp]
  00c9b	66 0f 7f 84 24
	00 05 00 00	 movdqa	 XMMWORD PTR $T71[rsp], xmm0
  00ca4	66 0f 6f 84 24
	00 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T71[rsp]
  00cad	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x0$54[rsp], xmm0

; 530  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask2, xmask3, 5)));

  00cb6	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$[rsp]
  00cbf	66 0f 3a 0f 84
	24 50 01 00 00
	05		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 5
  00cca	66 0f 7f 84 24
	10 05 00 00	 movdqa	 XMMWORD PTR $T72[rsp], xmm0
  00cd3	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00cdc	66 0f 38 00 84
	24 10 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T72[rsp]
  00ce6	66 0f 7f 84 24
	20 05 00 00	 movdqa	 XMMWORD PTR $T73[rsp], xmm0
  00cef	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00cf8	66 0f eb 84 24
	20 05 00 00	 por	 xmm0, XMMWORD PTR $T73[rsp]
  00d01	66 0f 7f 84 24
	30 05 00 00	 movdqa	 XMMWORD PTR $T74[rsp], xmm0
  00d0a	66 0f 6f 84 24
	30 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T74[rsp]
  00d13	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x1$56[rsp], xmm0

; 531  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xSrc2, _mm_alignr_epi8(xmask0, xmask3, 6)));

  00d1c	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$[rsp]
  00d25	66 0f 3a 0f 84
	24 50 01 00 00
	06		 palignr xmm0, XMMWORD PTR xmask3$[rsp], 6
  00d30	66 0f 7f 84 24
	40 05 00 00	 movdqa	 XMMWORD PTR $T75[rsp], xmm0
  00d39	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xSrc2$52[rsp]
  00d42	66 0f 38 00 84
	24 40 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T75[rsp]
  00d4c	66 0f 7f 84 24
	50 05 00 00	 movdqa	 XMMWORD PTR $T76[rsp], xmm0
  00d55	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00d5e	66 0f eb 84 24
	50 05 00 00	 por	 xmm0, XMMWORD PTR $T76[rsp]
  00d67	66 0f 7f 84 24
	60 05 00 00	 movdqa	 XMMWORD PTR $T77[rsp], xmm0
  00d70	66 0f 6f 84 24
	60 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T77[rsp]
  00d79	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR x2$58[rsp], xmm0

; 532  :         _mm_storeu_si128((__m128i *)ptr_dst0, x0);

  00d82	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR ptr_dst0$12[rsp]
  00d8a	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$54[rsp]
  00d93	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 533  :         _mm_storeu_si128((__m128i *)ptr_dst1, x1);

  00d97	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR ptr_dst1$13[rsp]
  00d9f	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x1$56[rsp]
  00da8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 534  :         _mm_storeu_si128((__m128i *)ptr_dst2, x2);

  00dac	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR ptr_dst2$14[rsp]
  00db4	66 0f 6f 84 24
	30 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$58[rsp]
  00dbd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 535  :     }

  00dc1	e9 8d f6 ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 536  : }

  00dc6	48 8b cc	 mov	 rcx, rsp
  00dc9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dd5	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00ddd	48 33 cc	 xor	 rcx, rsp
  00de0	e8 00 00 00 00	 call	 __security_check_cookie
  00de5	48 81 c4 a8 05
	00 00		 add	 rsp, 1448		; 000005a8H
  00dec	5f		 pop	 rdi
  00ded	5e		 pop	 rsi
  00dee	c3		 ret	 0
??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb_simd<4278190338,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb_ssse3

; 70   : void convert_rgb24_to_rgb_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 71   :     convert_rgb24_to_rgb_simd<RGB_PLANE(2, 1, 0, -1), false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb_simd@$0PPAAABAC@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb_simd<4278190338,0>

; 72   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcRLine$ = 120
srcGLine$ = 128
srcBLine$ = 136
MASK_RGB_TO_RGB24$ = 160
dstLine$ = 216
y$6 = 224
ptr_srcR$7 = 232
ptr_srcG$8 = 240
ptr_srcB$9 = 248
ptr_dst$10 = 256
xmask0$11 = 272
$T12 = 288
xmask1$13 = 304
$T14 = 320
xmask2$15 = 336
$T16 = 352
x$17 = 368
x_fin$18 = 372
xR$19 = 384
$T20 = 400
xG$21 = 416
$T22 = 432
xB$23 = 448
$T24 = 464
x0$25 = 480
$T26 = 496
x1$27 = 512
$T28 = 528
x2$29 = 544
$T30 = 560
$T31 = 576
$T32 = 592
$T33 = 608
$T34 = 624
$T35 = 640
$T36 = 656
$T37 = 672
$T38 = 688
$T39 = 704
$T40 = 720
$T41 = 736
$T42 = 752
$T43 = 768
$T44 = 784
$T45 = 800
$T46 = 816
$T47 = 832
$T48 = 848
x_offset$49 = 864
xR$50 = 880
$T51 = 896
xG$52 = 912
$T53 = 928
xB$54 = 944
$T55 = 960
x0$56 = 976
$T57 = 992
x1$58 = 1008
$T59 = 1024
x2$60 = 1040
$T61 = 1056
$T62 = 1072
$T63 = 1088
$T64 = 1104
$T65 = 1120
$T66 = 1136
$T67 = 1152
$T68 = 1168
$T69 = 1184
$T70 = 1200
$T71 = 1216
$T72 = 1232
$T73 = 1248
$T74 = 1264
$T75 = 1280
$T76 = 1296
$T77 = 1312
$T78 = 1328
$T79 = 1344
$T80 = 1368
__$ArrayPad$ = 1384
dst$ = 1424
src$ = 1432
width$ = 1440
src_y_pitch_byte$ = 1448
src_uv_pitch_byte$ = 1456
dst_y_pitch_byte$ = 1464
height$ = 1472
dst_height$ = 1480
thread_id$ = 1488
thread_n$ = 1496
crop$ = 1504
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb_to_rgb24_simd<4278321153>

; 539  : static void __forceinline convert_rgb_to_rgb24_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 78 05
	00 00		 sub	 rsp, 1400		; 00000578H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 5e 01 00 00	 mov	 ecx, 350		; 0000015eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1424]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 540  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 541  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 542  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 543  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 544  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 c0 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 d8 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 d0
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 58
	05 00 00	 lea	 rcx, QWORD PTR $T80[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 545  :     uint8_t *srcRLine = (uint8_t *)src[(plane_from >>  0) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 01	 imul	 rax, rax, 1
  0010e	8b 8c 24 a8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 98
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00131	48 03 c1	 add	 rax, rcx
  00134	48 89 44 24 78	 mov	 QWORD PTR srcRLine$[rsp], rax

; 546  :     uint8_t *srcGLine = (uint8_t *)src[(plane_from >>  8) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 00	 imul	 rax, rax, 0
  00142	8b 8c 24 a8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00149	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 98
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 03 c1	 add	 rax, rcx
  00160	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00165	48 03 c1	 add	 rax, rcx
  00168	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR srcGLine$[rsp], rax

; 547  :     uint8_t *srcBLine = (uint8_t *)src[(plane_from >> 16) & 0xff] + src_y_pitch_byte * y_range.start_src + crop_left;

  00170	b8 08 00 00 00	 mov	 eax, 8
  00175	48 6b c0 02	 imul	 rax, rax, 2
  00179	8b 8c 24 a8 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00180	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  00185	48 63 c9	 movsxd	 rcx, ecx
  00188	48 8b 94 24 98
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00190	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00194	48 03 c1	 add	 rax, rcx
  00197	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0019c	48 03 c1	 add	 rax, rcx
  0019f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcBLine$[rsp], rax

; 548  :     alignas(16) const char MASK_RGB_TO_RGB24[] = {
; 549  :          0, -1, -1,  1, -1, -1,  2, -1, -1,  3, -1, -1,  4, -1, -1,  5,

  001a7	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp], 0
  001af	c6 84 24 a1 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+1], -1
  001b7	c6 84 24 a2 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+2], -1
  001bf	c6 84 24 a3 00
	00 00 01	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+3], 1
  001c7	c6 84 24 a4 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+4], -1
  001cf	c6 84 24 a5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+5], -1
  001d7	c6 84 24 a6 00
	00 00 02	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+6], 2
  001df	c6 84 24 a7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+7], -1
  001e7	c6 84 24 a8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+8], -1
  001ef	c6 84 24 a9 00
	00 00 03	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+9], 3
  001f7	c6 84 24 aa 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+10], -1
  001ff	c6 84 24 ab 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+11], -1
  00207	c6 84 24 ac 00
	00 00 04	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+12], 4
  0020f	c6 84 24 ad 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+13], -1
  00217	c6 84 24 ae 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+14], -1
  0021f	c6 84 24 af 00
	00 00 05	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+15], 5

; 550  :         -1, -1,  6, -1, -1,  7, -1, -1,  8, -1, -1,  9, -1, -1, 10, -1,

  00227	c6 84 24 b0 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+16], -1
  0022f	c6 84 24 b1 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+17], -1
  00237	c6 84 24 b2 00
	00 00 06	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+18], 6
  0023f	c6 84 24 b3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+19], -1
  00247	c6 84 24 b4 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+20], -1
  0024f	c6 84 24 b5 00
	00 00 07	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+21], 7
  00257	c6 84 24 b6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+22], -1
  0025f	c6 84 24 b7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+23], -1
  00267	c6 84 24 b8 00
	00 00 08	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+24], 8
  0026f	c6 84 24 b9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+25], -1
  00277	c6 84 24 ba 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+26], -1
  0027f	c6 84 24 bb 00
	00 00 09	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+27], 9
  00287	c6 84 24 bc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+28], -1
  0028f	c6 84 24 bd 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+29], -1
  00297	c6 84 24 be 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+30], 10
  0029f	c6 84 24 bf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+31], -1

; 551  :         -1, 11, -1, -1, 12, -1, -1, 13, -1, -1, 14, -1, -1, 15, -1, -1

  002a7	c6 84 24 c0 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+32], -1
  002af	c6 84 24 c1 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+33], 11
  002b7	c6 84 24 c2 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+34], -1
  002bf	c6 84 24 c3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+35], -1
  002c7	c6 84 24 c4 00
	00 00 0c	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+36], 12
  002cf	c6 84 24 c5 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+37], -1
  002d7	c6 84 24 c6 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+38], -1
  002df	c6 84 24 c7 00
	00 00 0d	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+39], 13
  002e7	c6 84 24 c8 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+40], -1
  002ef	c6 84 24 c9 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+41], -1
  002f7	c6 84 24 ca 00
	00 00 0e	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+42], 14
  002ff	c6 84 24 cb 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+43], -1
  00307	c6 84 24 cc 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+44], -1
  0030f	c6 84 24 cd 00
	00 00 0f	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+45], 15
  00317	c6 84 24 ce 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+46], -1
  0031f	c6 84 24 cf 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB_TO_RGB24$[rsp+47], -1

; 552  :     };
; 553  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00327	b8 08 00 00 00	 mov	 eax, 8
  0032c	48 6b c0 00	 imul	 rax, rax, 0
  00330	8b 8c 24 b8 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00337	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0033c	48 63 c9	 movsxd	 rcx, ecx
  0033f	48 8b 94 24 90
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00347	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0034b	48 8b c1	 mov	 rax, rcx
  0034e	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 554  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcRLine += src_y_pitch_byte, srcGLine += src_y_pitch_byte, srcBLine += src_y_pitch_byte) {

  00356	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$6[rsp], 0
  00361	e9 82 00 00 00	 jmp	 $LN4@convert_rg
$LN2@convert_rg:
  00366	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$6[rsp]
  0036d	ff c0		 inc	 eax
  0036f	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$6[rsp], eax
  00376	48 63 84 24 b8
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0037e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00386	48 03 c8	 add	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  00394	48 63 84 24 a8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0039c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcRLine$[rsp]
  003a1	48 03 c8	 add	 rcx, rax
  003a4	48 8b c1	 mov	 rax, rcx
  003a7	48 89 44 24 78	 mov	 QWORD PTR srcRLine$[rsp], rax
  003ac	48 63 84 24 a8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  003b4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR srcGLine$[rsp]
  003bc	48 03 c8	 add	 rcx, rax
  003bf	48 8b c1	 mov	 rax, rcx
  003c2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR srcGLine$[rsp], rax
  003ca	48 63 84 24 a8
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  003d2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcBLine$[rsp]
  003da	48 03 c8	 add	 rcx, rax
  003dd	48 8b c1	 mov	 rax, rcx
  003e0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcBLine$[rsp], rax
$LN4@convert_rg:
  003e8	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  003ec	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$6[rsp], eax
  003f3	0f 8d 70 09 00
	00		 jge	 $LN3@convert_rg

; 555  :         uint8_t *ptr_srcR = srcRLine;

  003f9	48 8b 44 24 78	 mov	 rax, QWORD PTR srcRLine$[rsp]
  003fe	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_srcR$7[rsp], rax

; 556  :         uint8_t *ptr_srcG = srcGLine;

  00406	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR srcGLine$[rsp]
  0040e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_srcG$8[rsp], rax

; 557  :         uint8_t *ptr_srcB = srcBLine;

  00416	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR srcBLine$[rsp]
  0041e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_srcB$9[rsp], rax

; 558  :         uint8_t *ptr_dst = dstLine;

  00426	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  0042e	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax

; 559  :         __m128i xmask0 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[0]);

  00436	b8 01 00 00 00	 mov	 eax, 1
  0043b	48 6b c0 00	 imul	 rax, rax, 0
  0043f	48 8d 84 04 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  00447	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0044b	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00454	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  0045d	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xmask0$11[rsp], xmm0

; 560  :         __m128i xmask1 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[16]);

  00466	b8 01 00 00 00	 mov	 eax, 1
  0046b	48 6b c0 10	 imul	 rax, rax, 16
  0046f	48 8d 84 04 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  00477	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0047b	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00484	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  0048d	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR xmask1$13[rsp], xmm0

; 561  :         __m128i xmask2 = _mm_load_si128((__m128i *)&MASK_RGB_TO_RGB24[32]);

  00496	b8 01 00 00 00	 mov	 eax, 1
  0049b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0049f	48 8d 84 04 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_RGB_TO_RGB24$[rsp+rax]
  004a7	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004ab	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  004b4	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  004bd	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR xmask2$15[rsp], xmm0

; 562  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  004c6	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$17[rsp], 0
  004d1	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  004d5	8b 8c 24 a0 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004dc	2b c8		 sub	 ecx, eax
  004de	8b c1		 mov	 eax, ecx
  004e0	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  004e4	83 e8 10	 sub	 eax, 16
  004e7	89 84 24 74 01
	00 00		 mov	 DWORD PTR x_fin$18[rsp], eax

; 563  :         for (; x < x_fin; x += 16, ptr_dst += 48, ptr_srcR += 16, ptr_srcG += 16, ptr_srcB += 16) {

  004ee	eb 61		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  004f0	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR x$17[rsp]
  004f7	83 c0 10	 add	 eax, 16
  004fa	89 84 24 70 01
	00 00		 mov	 DWORD PTR x$17[rsp], eax
  00501	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00509	48 83 c0 30	 add	 rax, 48			; 00000030H
  0050d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax
  00515	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcR$7[rsp]
  0051d	48 83 c0 10	 add	 rax, 16
  00521	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_srcR$7[rsp], rax
  00529	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_srcG$8[rsp]
  00531	48 83 c0 10	 add	 rax, 16
  00535	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_srcG$8[rsp], rax
  0053d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcB$9[rsp]
  00545	48 83 c0 10	 add	 rax, 16
  00549	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_srcB$9[rsp], rax
$LN7@convert_rg:
  00551	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR x_fin$18[rsp]
  00558	39 84 24 70 01
	00 00		 cmp	 DWORD PTR x$17[rsp], eax
  0055f	0f 8d af 03 00
	00		 jge	 $LN6@convert_rg

; 564  :             __m128i xR = _mm_loadu_si128((__m128i *)ptr_srcR);

  00565	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcR$7[rsp]
  0056d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00571	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  0057a	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00583	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR xR$19[rsp], xmm0

; 565  :             __m128i xG = _mm_loadu_si128((__m128i *)ptr_srcG);

  0058c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_srcG$8[rsp]
  00594	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00598	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  005a1	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  005aa	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xG$21[rsp], xmm0

; 566  :             __m128i xB = _mm_loadu_si128((__m128i *)ptr_srcB);

  005b3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcB$9[rsp]
  005bb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005bf	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005c8	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  005d1	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xB$23[rsp], xmm0

; 567  :             __m128i x0 = _mm_shuffle_epi8(xR, xmask0);

  005da	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR xR$19[rsp]
  005e3	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$11[rsp]
  005ed	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  005f6	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T26[rsp]
  005ff	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$25[rsp], xmm0

; 568  :             __m128i x1 = _mm_shuffle_epi8(xR, xmask1);

  00608	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR xR$19[rsp]
  00611	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$13[rsp]
  0061b	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  00624	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  0062d	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x1$27[rsp], xmm0

; 569  :             __m128i x2 = _mm_shuffle_epi8(xR, xmask2);

  00636	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR xR$19[rsp]
  0063f	66 0f 38 00 84
	24 50 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$15[rsp]
  00649	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00652	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  0065b	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x2$29[rsp], xmm0

; 570  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask0, xmask2, 15)));

  00664	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$11[rsp]
  0066d	66 0f 3a 0f 84
	24 50 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask2$15[rsp], 15
  00678	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  00681	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xG$21[rsp]
  0068a	66 0f 38 00 84
	24 40 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T31[rsp]
  00694	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  0069d	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$25[rsp]
  006a6	66 0f eb 84 24
	50 02 00 00	 por	 xmm0, XMMWORD PTR $T32[rsp]
  006af	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  006b8	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  006c1	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$25[rsp], xmm0

; 571  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask1, xmask0, 15)));

  006ca	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$13[rsp]
  006d3	66 0f 3a 0f 84
	24 10 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask0$11[rsp], 15
  006de	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  006e7	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xG$21[rsp]
  006f0	66 0f 38 00 84
	24 70 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T34[rsp]
  006fa	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00703	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$27[rsp]
  0070c	66 0f eb 84 24
	80 02 00 00	 por	 xmm0, XMMWORD PTR $T35[rsp]
  00715	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  0071e	66 0f 6f 84 24
	90 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  00727	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x1$27[rsp], xmm0

; 572  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask2, xmask1, 15)));

  00730	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$15[rsp]
  00739	66 0f 3a 0f 84
	24 30 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask1$13[rsp], 15
  00744	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  0074d	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xG$21[rsp]
  00756	66 0f 38 00 84
	24 a0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T37[rsp]
  00760	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  00769	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$29[rsp]
  00772	66 0f eb 84 24
	b0 02 00 00	 por	 xmm0, XMMWORD PTR $T38[rsp]
  0077b	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00784	66 0f 6f 84 24
	c0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T39[rsp]
  0078d	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x2$29[rsp], xmm0

; 573  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask0, xmask2, 14)));

  00796	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$11[rsp]
  0079f	66 0f 3a 0f 84
	24 50 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask2$15[rsp], 14
  007aa	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  007b3	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xB$23[rsp]
  007bc	66 0f 38 00 84
	24 d0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T40[rsp]
  007c6	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  007cf	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$25[rsp]
  007d8	66 0f eb 84 24
	e0 02 00 00	 por	 xmm0, XMMWORD PTR $T41[rsp]
  007e1	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007ea	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T42[rsp]
  007f3	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$25[rsp], xmm0

; 574  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask1, xmask0, 14)));

  007fc	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$13[rsp]
  00805	66 0f 3a 0f 84
	24 10 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask0$11[rsp], 14
  00810	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  00819	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xB$23[rsp]
  00822	66 0f 38 00 84
	24 00 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T43[rsp]
  0082c	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  00835	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$27[rsp]
  0083e	66 0f eb 84 24
	10 03 00 00	 por	 xmm0, XMMWORD PTR $T44[rsp]
  00847	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00850	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T45[rsp]
  00859	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x1$27[rsp], xmm0

; 575  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask2, xmask1, 14)));

  00862	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$15[rsp]
  0086b	66 0f 3a 0f 84
	24 30 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask1$13[rsp], 14
  00876	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  0087f	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xB$23[rsp]
  00888	66 0f 38 00 84
	24 30 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T46[rsp]
  00892	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  0089b	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$29[rsp]
  008a4	66 0f eb 84 24
	40 03 00 00	 por	 xmm0, XMMWORD PTR $T47[rsp]
  008ad	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  008b6	66 0f 6f 84 24
	50 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T48[rsp]
  008bf	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR x2$29[rsp], xmm0

; 576  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  008c8	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  008d0	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$25[rsp]
  008d9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 577  :             _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  008dd	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  008e5	48 83 c0 10	 add	 rax, 16
  008e9	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x1$27[rsp]
  008f2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 578  :             _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  008f6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  008fe	48 83 c0 20	 add	 rax, 32			; 00000020H
  00902	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$29[rsp]
  0090b	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 579  :         }

  0090f	e9 dc fb ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 580  :         if (width & 15) {

  00914	8b 84 24 a0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0091b	83 e0 0f	 and	 eax, 15
  0091e	85 c0		 test	 eax, eax
  00920	0f 84 94 00 00
	00		 je	 $LN8@convert_rg

; 581  :             int x_offset = (16 - (width & 15));

  00926	8b 84 24 a0 05
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  0092d	83 e0 0f	 and	 eax, 15
  00930	b9 10 00 00 00	 mov	 ecx, 16
  00935	2b c8		 sub	 ecx, eax
  00937	8b c1		 mov	 eax, ecx
  00939	89 84 24 60 03
	00 00		 mov	 DWORD PTR x_offset$49[rsp], eax

; 582  :             ptr_dst -= x_offset * 3;

  00940	6b 84 24 60 03
	00 00 03	 imul	 eax, DWORD PTR x_offset$49[rsp], 3
  00948	48 98		 cdqe
  0094a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst$10[rsp]
  00952	48 2b c8	 sub	 rcx, rax
  00955	48 8b c1	 mov	 rax, rcx
  00958	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax

; 583  :             ptr_srcR -= x_offset;

  00960	48 63 84 24 60
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$49[rsp]
  00968	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR ptr_srcR$7[rsp]
  00970	48 2b c8	 sub	 rcx, rax
  00973	48 8b c1	 mov	 rax, rcx
  00976	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_srcR$7[rsp], rax

; 584  :             ptr_srcG -= x_offset;

  0097e	48 63 84 24 60
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$49[rsp]
  00986	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ptr_srcG$8[rsp]
  0098e	48 2b c8	 sub	 rcx, rax
  00991	48 8b c1	 mov	 rax, rcx
  00994	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_srcG$8[rsp], rax

; 585  :             ptr_srcB -= x_offset;

  0099c	48 63 84 24 60
	03 00 00	 movsxd	 rax, DWORD PTR x_offset$49[rsp]
  009a4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR ptr_srcB$9[rsp]
  009ac	48 2b c8	 sub	 rcx, rax
  009af	48 8b c1	 mov	 rax, rcx
  009b2	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_srcB$9[rsp], rax
$LN8@convert_rg:

; 586  :         }
; 587  :         __m128i xR = _mm_loadu_si128((__m128i *)ptr_srcR);

  009ba	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcR$7[rsp]
  009c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  009c6	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  009cf	66 0f 6f 84 24
	80 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T51[rsp]
  009d8	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR xR$50[rsp], xmm0

; 588  :         __m128i xG = _mm_loadu_si128((__m128i *)ptr_srcG);

  009e1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_srcG$8[rsp]
  009e9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  009ed	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  009f6	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T53[rsp]
  009ff	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR xG$52[rsp], xmm0

; 589  :         __m128i xB = _mm_loadu_si128((__m128i *)ptr_srcB);

  00a08	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_srcB$9[rsp]
  00a10	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a14	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00a1d	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  00a26	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR xB$54[rsp], xmm0

; 590  :         __m128i x0 = _mm_shuffle_epi8(xR, xmask0);

  00a2f	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR xR$50[rsp]
  00a38	66 0f 38 00 84
	24 10 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask0$11[rsp]
  00a42	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  00a4b	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T57[rsp]
  00a54	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR x0$56[rsp], xmm0

; 591  :         __m128i x1 = _mm_shuffle_epi8(xR, xmask1);

  00a5d	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR xR$50[rsp]
  00a66	66 0f 38 00 84
	24 30 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask1$13[rsp]
  00a70	66 0f 7f 84 24
	00 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00a79	66 0f 6f 84 24
	00 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T59[rsp]
  00a82	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x1$58[rsp], xmm0

; 592  :         __m128i x2 = _mm_shuffle_epi8(xR, xmask2);

  00a8b	66 0f 6f 84 24
	70 03 00 00	 movdqa	 xmm0, XMMWORD PTR xR$50[rsp]
  00a94	66 0f 38 00 84
	24 50 01 00 00	 pshufb	 xmm0, XMMWORD PTR xmask2$15[rsp]
  00a9e	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T61[rsp], xmm0
  00aa7	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T61[rsp]
  00ab0	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x2$60[rsp], xmm0

; 593  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask0, xmask2, 15)));

  00ab9	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$11[rsp]
  00ac2	66 0f 3a 0f 84
	24 50 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask2$15[rsp], 15
  00acd	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR $T62[rsp], xmm0
  00ad6	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xG$52[rsp]
  00adf	66 0f 38 00 84
	24 30 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T62[rsp]
  00ae9	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T63[rsp], xmm0
  00af2	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$56[rsp]
  00afb	66 0f eb 84 24
	40 04 00 00	 por	 xmm0, XMMWORD PTR $T63[rsp]
  00b04	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T64[rsp], xmm0
  00b0d	66 0f 6f 84 24
	50 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T64[rsp]
  00b16	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR x0$56[rsp], xmm0

; 594  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask1, xmask0, 15)));

  00b1f	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$13[rsp]
  00b28	66 0f 3a 0f 84
	24 10 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask0$11[rsp], 15
  00b33	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T65[rsp], xmm0
  00b3c	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xG$52[rsp]
  00b45	66 0f 38 00 84
	24 60 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T65[rsp]
  00b4f	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T66[rsp], xmm0
  00b58	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$58[rsp]
  00b61	66 0f eb 84 24
	70 04 00 00	 por	 xmm0, XMMWORD PTR $T66[rsp]
  00b6a	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T67[rsp], xmm0
  00b73	66 0f 6f 84 24
	80 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T67[rsp]
  00b7c	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x1$58[rsp], xmm0

; 595  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xG, _mm_alignr_epi8(xmask2, xmask1, 15)));

  00b85	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$15[rsp]
  00b8e	66 0f 3a 0f 84
	24 30 01 00 00
	0f		 palignr xmm0, XMMWORD PTR xmask1$13[rsp], 15
  00b99	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T68[rsp], xmm0
  00ba2	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR xG$52[rsp]
  00bab	66 0f 38 00 84
	24 90 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T68[rsp]
  00bb5	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T69[rsp], xmm0
  00bbe	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$60[rsp]
  00bc7	66 0f eb 84 24
	a0 04 00 00	 por	 xmm0, XMMWORD PTR $T69[rsp]
  00bd0	66 0f 7f 84 24
	b0 04 00 00	 movdqa	 XMMWORD PTR $T70[rsp], xmm0
  00bd9	66 0f 6f 84 24
	b0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T70[rsp]
  00be2	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x2$60[rsp], xmm0

; 596  :         x0 = _mm_or_si128(x0, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask0, xmask2, 14)));

  00beb	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask0$11[rsp]
  00bf4	66 0f 3a 0f 84
	24 50 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask2$15[rsp], 14
  00bff	66 0f 7f 84 24
	c0 04 00 00	 movdqa	 XMMWORD PTR $T71[rsp], xmm0
  00c08	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xB$54[rsp]
  00c11	66 0f 38 00 84
	24 c0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T71[rsp]
  00c1b	66 0f 7f 84 24
	d0 04 00 00	 movdqa	 XMMWORD PTR $T72[rsp], xmm0
  00c24	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$56[rsp]
  00c2d	66 0f eb 84 24
	d0 04 00 00	 por	 xmm0, XMMWORD PTR $T72[rsp]
  00c36	66 0f 7f 84 24
	e0 04 00 00	 movdqa	 XMMWORD PTR $T73[rsp], xmm0
  00c3f	66 0f 6f 84 24
	e0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T73[rsp]
  00c48	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR x0$56[rsp], xmm0

; 597  :         x1 = _mm_or_si128(x1, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask1, xmask0, 14)));

  00c51	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask1$13[rsp]
  00c5a	66 0f 3a 0f 84
	24 10 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask0$11[rsp], 14
  00c65	66 0f 7f 84 24
	f0 04 00 00	 movdqa	 XMMWORD PTR $T74[rsp], xmm0
  00c6e	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xB$54[rsp]
  00c77	66 0f 38 00 84
	24 f0 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T74[rsp]
  00c81	66 0f 7f 84 24
	00 05 00 00	 movdqa	 XMMWORD PTR $T75[rsp], xmm0
  00c8a	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$58[rsp]
  00c93	66 0f eb 84 24
	00 05 00 00	 por	 xmm0, XMMWORD PTR $T75[rsp]
  00c9c	66 0f 7f 84 24
	10 05 00 00	 movdqa	 XMMWORD PTR $T76[rsp], xmm0
  00ca5	66 0f 6f 84 24
	10 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T76[rsp]
  00cae	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR x1$58[rsp], xmm0

; 598  :         x2 = _mm_or_si128(x2, _mm_shuffle_epi8(xB, _mm_alignr_epi8(xmask2, xmask1, 14)));

  00cb7	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR xmask2$15[rsp]
  00cc0	66 0f 3a 0f 84
	24 30 01 00 00
	0e		 palignr xmm0, XMMWORD PTR xmask1$13[rsp], 14
  00ccb	66 0f 7f 84 24
	20 05 00 00	 movdqa	 XMMWORD PTR $T77[rsp], xmm0
  00cd4	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR xB$54[rsp]
  00cdd	66 0f 38 00 84
	24 20 05 00 00	 pshufb	 xmm0, XMMWORD PTR $T77[rsp]
  00ce7	66 0f 7f 84 24
	30 05 00 00	 movdqa	 XMMWORD PTR $T78[rsp], xmm0
  00cf0	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$60[rsp]
  00cf9	66 0f eb 84 24
	30 05 00 00	 por	 xmm0, XMMWORD PTR $T78[rsp]
  00d02	66 0f 7f 84 24
	40 05 00 00	 movdqa	 XMMWORD PTR $T79[rsp], xmm0
  00d0b	66 0f 6f 84 24
	40 05 00 00	 movdqa	 xmm0, XMMWORD PTR $T79[rsp]
  00d14	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR x2$60[rsp], xmm0

; 599  :         _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00d1d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d25	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$56[rsp]
  00d2e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 600  :         _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00d32	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d3a	48 83 c0 10	 add	 rax, 16
  00d3e	66 0f 6f 84 24
	f0 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$58[rsp]
  00d47	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 601  :         _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  00d4b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d53	48 83 c0 20	 add	 rax, 32			; 00000020H
  00d57	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$60[rsp]
  00d60	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 602  :     }

  00d64	e9 fd f5 ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 603  : }

  00d69	48 8b cc	 mov	 rcx, rsp
  00d6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00d73	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00d78	48 8b 8c 24 68
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d80	48 33 cc	 xor	 rcx, rsp
  00d83	e8 00 00 00 00	 call	 __security_check_cookie
  00d88	48 81 c4 78 05
	00 00		 add	 rsp, 1400		; 00000578H
  00d8f	5f		 pop	 rdi
  00d90	5e		 pop	 rsi
  00d91	c3		 ret	 0
??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb_to_rgb24_simd<4278321153>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_gbr_to_rgb24_ssse3

; 66   : void convert_gbr_to_rgb24_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 67   :     convert_rgb_to_rgb24_simd<RGB_PLANE(1, 0, 2, -1)>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb_to_rgb24_simd@$0PPACAAAB@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb_to_rgb24_simd<4278321153>

; 68   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_gbr_to_rgb24_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb32_ssse3

; 62   : void convert_rgb24r_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 63   :     convert_rgb24r_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb32_simd

; 64   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb32_ssse3

; 58   : void convert_rgb24_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 59   :     convert_rgb24_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb32_simd

; 60   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
;	COMDAT ??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T6 = 104
srcLine$ = 120
dstLine$ = 128
x_width$ = 136
y$7 = 140
MASK_BGR4_TO_RGB4$8 = 160
MASK_GBR4_TO_RGB4$9 = 208
mask$10 = 232
y$11 = 240
ptr_dst$12 = 248
ptr_src$13 = 256
x$14 = 264
src0$15 = 272
$T16 = 288
x0$17 = 304
$T18 = 320
$T19 = 336
x_offest$20 = 352
src0$21 = 368
$T22 = 384
x0$23 = 400
$T24 = 416
$T25 = 432
$T26 = 456
tv138 = 472
__$ArrayPad$ = 480
dst$ = 528
src$ = 536
width$ = 544
src_y_pitch_byte$ = 552
src_uv_pitch_byte$ = 560
dst_y_pitch_byte$ = 568
height$ = 576
dst_height$ = 584
thread_id$ = 592
thread_n$ = 600
crop$ = 608
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32_to_rgb32_simd<31>, COMDAT

; 829  : void convert_rgb32_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR [rsp+528]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 830  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 831  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 832  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 833  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 834  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 40 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 50
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 c8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 835  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 4;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  00130	c1 e1 02	 shl	 ecx, 2
  00133	48 63 c9	 movsxd	 rcx, ecx
  00136	48 03 c1	 add	 rax, rcx
  00139	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 836  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013e	b8 08 00 00 00	 mov	 eax, 8
  00143	48 6b c0 00	 imul	 rax, rax, 0
  00147	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014e	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 837  :     const int x_width = width - crop_right - crop_left;

  0016d	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00171	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00178	2b c8		 sub	 ecx, eax
  0017a	8b c1		 mov	 eax, ecx
  0017c	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00180	89 84 24 88 00
	00 00		 mov	 DWORD PTR x_width$[rsp], eax

; 838  :     if (csp_from == RGY_CSP_RGB24) {

  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	0f 84 86 00 00
	00		 je	 $LN13@convert_rg

; 839  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00191	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  0019c	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0019e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  001a5	ff c0		 inc	 eax
  001a7	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  001ae	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001be	48 03 c8	 add	 rcx, rax
  001c1	48 8b c1	 mov	 rax, rcx
  001c4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001cc	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001d4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001d9	48 03 c8	 add	 rcx, rax
  001dc	48 8b c1	 mov	 rax, rcx
  001df	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001e4	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001e8	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  001ef	7d 21		 jge	 SHORT $LN3@convert_rg

; 840  :         memcpy_sse(dstLine, srcLine, x_width * 4);

  001f1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  001f8	c1 e0 02	 shl	 eax, 2
  001fb	44 8b c0	 mov	 r8d, eax
  001fe	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  00203	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  0020b	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 841  :     }

  00210	eb 8c		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 842  :     } else {

  00212	e9 89 03 00 00	 jmp	 $LN14@convert_rg
$LN13@convert_rg:

; 843  : #if USE_SSSE3
; 844  :         static_assert(csp_from == RGY_CSP_BGR32 || csp_from == RGY_CSP_RGB32, "invalid csp");
; 845  :         alignas(16) const char MASK_BGR4_TO_RGB4[] = { 2, 1, 0, 3, 6, 5, 4, 7, 10, 9, 8, 11, 14, 13, 12, 15 };

  00217	c6 84 24 a0 00
	00 00 02	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp], 2
  0021f	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+1], 1
  00227	c6 84 24 a2 00
	00 00 00	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+2], 0
  0022f	c6 84 24 a3 00
	00 00 03	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+3], 3
  00237	c6 84 24 a4 00
	00 00 06	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+4], 6
  0023f	c6 84 24 a5 00
	00 00 05	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+5], 5
  00247	c6 84 24 a6 00
	00 00 04	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+6], 4
  0024f	c6 84 24 a7 00
	00 00 07	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+7], 7
  00257	c6 84 24 a8 00
	00 00 0a	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+8], 10
  0025f	c6 84 24 a9 00
	00 00 09	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+9], 9
  00267	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+10], 8
  0026f	c6 84 24 ab 00
	00 00 0b	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+11], 11
  00277	c6 84 24 ac 00
	00 00 0e	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+12], 14
  0027f	c6 84 24 ad 00
	00 00 0d	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+13], 13
  00287	c6 84 24 ae 00
	00 00 0c	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+14], 12
  0028f	c6 84 24 af 00
	00 00 0f	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+15], 15

; 846  :         alignas(16) const char MASK_GBR4_TO_RGB4[] = { 2, 0, 1, 3, 6, 4, 5, 7, 10, 8, 9, 11, 14, 12, 13, 15 };

  00297	c6 84 24 d0 00
	00 00 02	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp], 2
  0029f	c6 84 24 d1 00
	00 00 00	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+1], 0
  002a7	c6 84 24 d2 00
	00 00 01	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+2], 1
  002af	c6 84 24 d3 00
	00 00 03	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+3], 3
  002b7	c6 84 24 d4 00
	00 00 06	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+4], 6
  002bf	c6 84 24 d5 00
	00 00 04	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+5], 4
  002c7	c6 84 24 d6 00
	00 00 05	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+6], 5
  002cf	c6 84 24 d7 00
	00 00 07	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+7], 7
  002d7	c6 84 24 d8 00
	00 00 0a	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+8], 10
  002df	c6 84 24 d9 00
	00 00 08	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+9], 8
  002e7	c6 84 24 da 00
	00 00 09	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+10], 9
  002ef	c6 84 24 db 00
	00 00 0b	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+11], 11
  002f7	c6 84 24 dc 00
	00 00 0e	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+12], 14
  002ff	c6 84 24 dd 00
	00 00 0c	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+13], 12
  00307	c6 84 24 de 00
	00 00 0d	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+14], 13
  0030f	c6 84 24 df 00
	00 00 0f	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+15], 15

; 847  :         const char *mask = nullptr;

  00317	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mask$10[rsp], 0

; 848  :         switch (csp_from) {

  00323	c7 84 24 d8 01
	00 00 1f 00 00
	00		 mov	 DWORD PTR tv138[rsp], 31

; 849  :         //case RGY_CSP_GBR32: mask = MASK_GBR4_TO_RGB4; break;
; 850  :         case RGY_CSP_BGR32:
; 851  :         default:            mask = MASK_BGR4_TO_RGB4; break;

  0032e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_BGR4_TO_RGB4$8[rsp]
  00336	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR mask$10[rsp], rax

; 852  :         }
; 853  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  0033e	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$11[rsp], 0
  00349	eb 46		 jmp	 SHORT $LN9@convert_rg
$LN7@convert_rg:
  0034b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR y$11[rsp]
  00352	ff c0		 inc	 eax
  00354	89 84 24 f0 00
	00 00		 mov	 DWORD PTR y$11[rsp], eax
  0035b	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00363	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  0036b	48 03 c8	 add	 rcx, rax
  0036e	48 8b c1	 mov	 rax, rcx
  00371	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  00379	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00381	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00386	48 03 c8	 add	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN9@convert_rg:
  00391	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00395	39 84 24 f0 00
	00 00		 cmp	 DWORD PTR y$11[rsp], eax
  0039c	0f 8d fe 01 00
	00		 jge	 $LN8@convert_rg

; 854  :             uint8_t *ptr_dst = dstLine;

  003a2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  003aa	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax

; 855  :             uint8_t *ptr_src = srcLine;

  003b2	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  003b7	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax

; 856  :             for (int x = 0; x < x_width - 4; x += 4, ptr_dst += 16, ptr_src += 16) {

  003bf	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$14[rsp], 0
  003ca	eb 39		 jmp	 SHORT $LN12@convert_rg
$LN10@convert_rg:
  003cc	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR x$14[rsp]
  003d3	83 c0 04	 add	 eax, 4
  003d6	89 84 24 08 01
	00 00		 mov	 DWORD PTR x$14[rsp], eax
  003dd	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  003e5	48 83 c0 10	 add	 rax, 16
  003e9	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax
  003f1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  003f9	48 83 c0 10	 add	 rax, 16
  003fd	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax
$LN12@convert_rg:
  00405	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  0040c	83 e8 04	 sub	 eax, 4
  0040f	39 84 24 08 01
	00 00		 cmp	 DWORD PTR x$14[rsp], eax
  00416	0f 8d 84 00 00
	00		 jge	 $LN11@convert_rg

; 857  :                 __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0041c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  00424	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00428	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00431	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  0043a	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR src0$15[rsp], xmm0

; 858  :                 __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00443	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  0044b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0044f	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00458	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$15[rsp]
  00461	66 0f 38 00 84
	24 40 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T18[rsp]
  0046b	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00474	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0047d	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 859  :                 _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00486	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  0048e	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  00497	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 860  :             }

  0049b	e9 2c ff ff ff	 jmp	 $LN10@convert_rg
$LN11@convert_rg:

; 861  :             if (x_width % 4) {

  004a0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  004a7	99		 cdq
  004a8	83 e2 03	 and	 edx, 3
  004ab	03 c2		 add	 eax, edx
  004ad	83 e0 03	 and	 eax, 3
  004b0	2b c2		 sub	 eax, edx
  004b2	85 c0		 test	 eax, eax
  004b4	74 66		 je	 SHORT $LN16@convert_rg

; 862  :                 int x_offest = 4 - (x_width % 4);

  004b6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  004bd	99		 cdq
  004be	83 e2 03	 and	 edx, 3
  004c1	03 c2		 add	 eax, edx
  004c3	83 e0 03	 and	 eax, 3
  004c6	2b c2		 sub	 eax, edx
  004c8	b9 04 00 00 00	 mov	 ecx, 4
  004cd	2b c8		 sub	 ecx, eax
  004cf	8b c1		 mov	 eax, ecx
  004d1	89 84 24 60 01
	00 00		 mov	 DWORD PTR x_offest$20[rsp], eax

; 863  :                 ptr_dst -= x_offest * 4;

  004d8	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR x_offest$20[rsp]
  004df	c1 e0 02	 shl	 eax, 2
  004e2	48 98		 cdqe
  004e4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$12[rsp]
  004ec	48 2b c8	 sub	 rcx, rax
  004ef	48 8b c1	 mov	 rax, rcx
  004f2	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax

; 864  :                 ptr_src -= x_offest * 4;

  004fa	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR x_offest$20[rsp]
  00501	c1 e0 02	 shl	 eax, 2
  00504	48 98		 cdqe
  00506	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$13[rsp]
  0050e	48 2b c8	 sub	 rcx, rax
  00511	48 8b c1	 mov	 rax, rcx
  00514	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax
$LN16@convert_rg:

; 865  :             }
; 866  :             __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0051c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  00524	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00528	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00531	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0053a	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR src0$21[rsp], xmm0

; 867  :             __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00543	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  0054b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0054f	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00558	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$21[rsp]
  00561	66 0f 38 00 84
	24 a0 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T24[rsp]
  0056b	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00574	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  0057d	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 868  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00586	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  0058e	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  00597	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 869  :         }

  0059b	e9 ab fd ff ff	 jmp	 $LN7@convert_rg
$LN8@convert_rg:
$LN14@convert_rg:

; 870  : #else
; 871  :         static_assert(csp_from == RGY_CSP_RGB32, "invalid csp");
; 872  : #endif
; 873  :     }
; 874  : }

  005a0	48 8b cc	 mov	 rcx, rsp
  005a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005aa	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005af	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005b7	48 33 cc	 xor	 rcx, rsp
  005ba	e8 00 00 00 00	 call	 __security_check_cookie
  005bf	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  005c6	5f		 pop	 rdi
  005c7	5e		 pop	 rsi
  005c8	c3		 ret	 0
??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32_to_rgb32_simd<31>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_bgr32_to_rgb32_ssse3

; 54   : void convert_bgr32_to_rgb32_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 55   :     convert_rgb32_to_rgb32_simd<RGY_CSP_BGR32>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb32_to_rgb32_simd@$0BP@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_simd<31>

; 56   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_bgr32_to_rgb32_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
;	COMDAT ??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcLine$ = 120
dstLine$ = 128
x_width$ = 136
y$6 = 140
MASK_BGR3_TO_RGB3$7 = 160
mask$8 = 280
y$9 = 288
ptr_dst$10 = 296
ptr_src$11 = 304
x$12 = 312
src0$13 = 320
$T14 = 336
src1$15 = 352
$T16 = 368
src2$17 = 384
$T18 = 400
x0$19 = 416
$T20 = 432
$T21 = 448
x1$22 = 464
$T23 = 480
$T24 = 496
$T25 = 512
$T26 = 528
$T27 = 544
$T28 = 560
$T29 = 576
$T30 = 592
x2$31 = 608
$T32 = 624
$T33 = 640
$T34 = 656
$T35 = 672
$T36 = 688
$T37 = 704
$T38 = 720
$T39 = 736
x_offest$40 = 752
src0$41 = 768
$T42 = 784
src1$43 = 800
$T44 = 816
src2$45 = 832
$T46 = 848
x0$47 = 864
$T48 = 880
$T49 = 896
x1$50 = 912
$T51 = 928
$T52 = 944
$T53 = 960
$T54 = 976
$T55 = 992
$T56 = 1008
$T57 = 1024
$T58 = 1040
x2$59 = 1056
$T60 = 1072
$T61 = 1088
$T62 = 1104
$T63 = 1120
$T64 = 1136
$T65 = 1152
$T66 = 1168
$T67 = 1184
$T68 = 1208
tv138 = 1224
__$ArrayPad$ = 1232
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb24_simd<30>, COMDAT

; 741  : void convert_rgb24_to_rgb24_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec e8 04
	00 00		 sub	 rsp, 1256		; 000004e8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 01 00 00	 mov	 ecx, 314		; 0000013aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 742  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 743  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 744  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 745  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 746  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 b8
	04 00 00	 lea	 rcx, QWORD PTR $T68[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 747  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 3;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  00131	48 63 c9	 movsxd	 rcx, ecx
  00134	48 03 c1	 add	 rax, rcx
  00137	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 748  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014c	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00151	48 63 c9	 movsxd	 rcx, ecx
  00154	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00160	48 8b c1	 mov	 rax, rcx
  00163	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 749  :     const int x_width = width - crop_right - crop_left;

  0016b	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0016f	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00176	2b c8		 sub	 ecx, eax
  00178	8b c1		 mov	 eax, ecx
  0017a	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0017e	89 84 24 88 00
	00 00		 mov	 DWORD PTR x_width$[rsp], eax

; 750  :     if (csp_from == RGY_CSP_RGB24) {

  00185	33 c0		 xor	 eax, eax
  00187	85 c0		 test	 eax, eax
  00189	0f 84 84 00 00
	00		 je	 $LN13@convert_rg

; 751  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  0018f	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$6[rsp], 0
  0019a	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0019c	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$6[rsp]
  001a3	ff c0		 inc	 eax
  001a5	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$6[rsp], eax
  001ac	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001bc	48 03 c8	 add	 rcx, rax
  001bf	48 8b c1	 mov	 rax, rcx
  001c2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001ca	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001d7	48 03 c8	 add	 rcx, rax
  001da	48 8b c1	 mov	 rax, rcx
  001dd	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001e2	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001e6	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$6[rsp], eax
  001ed	7d 1f		 jge	 SHORT $LN3@convert_rg

; 752  :             memcpy_sse(dstLine, srcLine, x_width * 3);

  001ef	6b 84 24 88 00
	00 00 03	 imul	 eax, DWORD PTR x_width$[rsp], 3
  001f7	44 8b c0	 mov	 r8d, eax
  001fa	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  001ff	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00207	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 753  :         }

  0020c	eb 8e		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 754  :     } else {

  0020e	e9 35 0b 00 00	 jmp	 $LN14@convert_rg
$LN13@convert_rg:

; 755  : #if USE_SSSE3
; 756  :         static_assert(csp_from == RGY_CSP_BGR24 || csp_from == RGY_CSP_RGB24, "invalid csp");
; 757  :         alignas(16) const char MASK_BGR3_TO_RGB3[] = {
; 758  :              2,  1,  0,  5,  4,  3,  8,  7,  6, 11, 10,  9, 14, 13, 12, -1, //[0]->[0]

  00213	c6 84 24 a0 00
	00 00 02	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp], 2
  0021b	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+1], 1
  00223	c6 84 24 a2 00
	00 00 00	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+2], 0
  0022b	c6 84 24 a3 00
	00 00 05	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+3], 5
  00233	c6 84 24 a4 00
	00 00 04	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+4], 4
  0023b	c6 84 24 a5 00
	00 00 03	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+5], 3
  00243	c6 84 24 a6 00
	00 00 08	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+6], 8
  0024b	c6 84 24 a7 00
	00 00 07	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+7], 7
  00253	c6 84 24 a8 00
	00 00 06	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+8], 6
  0025b	c6 84 24 a9 00
	00 00 0b	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+9], 11
  00263	c6 84 24 aa 00
	00 00 0a	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+10], 10
  0026b	c6 84 24 ab 00
	00 00 09	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+11], 9
  00273	c6 84 24 ac 00
	00 00 0e	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+12], 14
  0027b	c6 84 24 ad 00
	00 00 0d	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+13], 13
  00283	c6 84 24 ae 00
	00 00 0c	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+14], 12
  0028b	c6 84 24 af 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+15], -1

; 759  :             -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //[0]->[1]

  00293	c6 84 24 b0 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+16], -1
  0029b	c6 84 24 b1 00
	00 00 0f	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+17], 15
  002a3	c6 84 24 b2 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+18], -1
  002ab	c6 84 24 b3 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+19], -1
  002b3	c6 84 24 b4 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+20], -1
  002bb	c6 84 24 b5 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+21], -1
  002c3	c6 84 24 b6 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+22], -1
  002cb	c6 84 24 b7 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+23], -1
  002d3	c6 84 24 b8 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+24], -1
  002db	c6 84 24 b9 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+25], -1
  002e3	c6 84 24 ba 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+26], -1
  002eb	c6 84 24 bb 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+27], -1
  002f3	c6 84 24 bc 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+28], -1
  002fb	c6 84 24 bd 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+29], -1
  00303	c6 84 24 be 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+30], -1
  0030b	c6 84 24 bf 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+31], -1

; 760  :             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, //[1]->[0]

  00313	c6 84 24 c0 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+32], -1
  0031b	c6 84 24 c1 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+33], -1
  00323	c6 84 24 c2 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+34], -1
  0032b	c6 84 24 c3 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+35], -1
  00333	c6 84 24 c4 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+36], -1
  0033b	c6 84 24 c5 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+37], -1
  00343	c6 84 24 c6 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+38], -1
  0034b	c6 84 24 c7 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+39], -1
  00353	c6 84 24 c8 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+40], -1
  0035b	c6 84 24 c9 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+41], -1
  00363	c6 84 24 ca 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+42], -1
  0036b	c6 84 24 cb 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+43], -1
  00373	c6 84 24 cc 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+44], -1
  0037b	c6 84 24 cd 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+45], -1
  00383	c6 84 24 ce 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+46], -1
  0038b	c6 84 24 cf 00
	00 00 01	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+47], 1

; 761  :              0, -1,  4,  3,  2,  7,  6,  5, 10,  9,  8, 13, 12, 11, -1, 15, //[1]->[1]

  00393	c6 84 24 d0 00
	00 00 00	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+48], 0
  0039b	c6 84 24 d1 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+49], -1
  003a3	c6 84 24 d2 00
	00 00 04	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+50], 4
  003ab	c6 84 24 d3 00
	00 00 03	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+51], 3
  003b3	c6 84 24 d4 00
	00 00 02	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+52], 2
  003bb	c6 84 24 d5 00
	00 00 07	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+53], 7
  003c3	c6 84 24 d6 00
	00 00 06	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+54], 6
  003cb	c6 84 24 d7 00
	00 00 05	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+55], 5
  003d3	c6 84 24 d8 00
	00 00 0a	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+56], 10
  003db	c6 84 24 d9 00
	00 00 09	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+57], 9
  003e3	c6 84 24 da 00
	00 00 08	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+58], 8
  003eb	c6 84 24 db 00
	00 00 0d	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+59], 13
  003f3	c6 84 24 dc 00
	00 00 0c	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+60], 12
  003fb	c6 84 24 dd 00
	00 00 0b	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+61], 11
  00403	c6 84 24 de 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+62], -1
  0040b	c6 84 24 df 00
	00 00 0f	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+63], 15

; 762  :             14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, //[1]->[2]

  00413	c6 84 24 e0 00
	00 00 0e	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+64], 14
  0041b	c6 84 24 e1 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+65], -1
  00423	c6 84 24 e2 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+66], -1
  0042b	c6 84 24 e3 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+67], -1
  00433	c6 84 24 e4 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+68], -1
  0043b	c6 84 24 e5 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+69], -1
  00443	c6 84 24 e6 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+70], -1
  0044b	c6 84 24 e7 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+71], -1
  00453	c6 84 24 e8 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+72], -1
  0045b	c6 84 24 e9 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+73], -1
  00463	c6 84 24 ea 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+74], -1
  0046b	c6 84 24 eb 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+75], -1
  00473	c6 84 24 ec 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+76], -1
  0047b	c6 84 24 ed 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+77], -1
  00483	c6 84 24 ee 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+78], -1
  0048b	c6 84 24 ef 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+79], -1

; 763  :             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, //[2]->[1]

  00493	c6 84 24 f0 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+80], -1
  0049b	c6 84 24 f1 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+81], -1
  004a3	c6 84 24 f2 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+82], -1
  004ab	c6 84 24 f3 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+83], -1
  004b3	c6 84 24 f4 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+84], -1
  004bb	c6 84 24 f5 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+85], -1
  004c3	c6 84 24 f6 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+86], -1
  004cb	c6 84 24 f7 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+87], -1
  004d3	c6 84 24 f8 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+88], -1
  004db	c6 84 24 f9 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+89], -1
  004e3	c6 84 24 fa 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+90], -1
  004eb	c6 84 24 fb 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+91], -1
  004f3	c6 84 24 fc 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+92], -1
  004fb	c6 84 24 fd 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+93], -1
  00503	c6 84 24 fe 00
	00 00 00	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+94], 0
  0050b	c6 84 24 ff 00
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+95], -1

; 764  :             -1,  3,  2,  1,  6,  5,  4,  9,  8,  7, 12, 11, 10, 15, 14, 13  //[2]->[2]

  00513	c6 84 24 00 01
	00 00 ff	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+96], -1
  0051b	c6 84 24 01 01
	00 00 03	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+97], 3
  00523	c6 84 24 02 01
	00 00 02	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+98], 2
  0052b	c6 84 24 03 01
	00 00 01	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+99], 1
  00533	c6 84 24 04 01
	00 00 06	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+100], 6
  0053b	c6 84 24 05 01
	00 00 05	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+101], 5
  00543	c6 84 24 06 01
	00 00 04	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+102], 4
  0054b	c6 84 24 07 01
	00 00 09	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+103], 9
  00553	c6 84 24 08 01
	00 00 08	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+104], 8
  0055b	c6 84 24 09 01
	00 00 07	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+105], 7
  00563	c6 84 24 0a 01
	00 00 0c	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+106], 12
  0056b	c6 84 24 0b 01
	00 00 0b	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+107], 11
  00573	c6 84 24 0c 01
	00 00 0a	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+108], 10
  0057b	c6 84 24 0d 01
	00 00 0f	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+109], 15
  00583	c6 84 24 0e 01
	00 00 0e	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+110], 14
  0058b	c6 84 24 0f 01
	00 00 0d	 mov	 BYTE PTR MASK_BGR3_TO_RGB3$7[rsp+111], 13

; 765  :         };
; 766  :         const char *mask;
; 767  :         switch (csp_from) {

  00593	c7 84 24 c8 04
	00 00 1e 00 00
	00		 mov	 DWORD PTR tv138[rsp], 30

; 768  :         case RGY_CSP_BGR24:
; 769  :         default: mask = MASK_BGR3_TO_RGB3; break;

  0059e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_BGR3_TO_RGB3$7[rsp]
  005a6	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR mask$8[rsp], rax

; 770  :         }
; 771  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  005ae	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  005b9	eb 46		 jmp	 SHORT $LN9@convert_rg
$LN7@convert_rg:
  005bb	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  005c2	ff c0		 inc	 eax
  005c4	89 84 24 20 01
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  005cb	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  005d3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  005db	48 03 c8	 add	 rcx, rax
  005de	48 8b c1	 mov	 rax, rcx
  005e1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  005e9	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  005f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  005f6	48 03 c8	 add	 rcx, rax
  005f9	48 8b c1	 mov	 rax, rcx
  005fc	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN9@convert_rg:
  00601	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00605	39 84 24 20 01
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0060c	0f 8d 36 07 00
	00		 jge	 $LN8@convert_rg

; 772  :             uint8_t *ptr_dst = dstLine;

  00612	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  0061a	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax

; 773  :             uint8_t *ptr_src = srcLine;

  00622	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  00627	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax

; 774  :             for (int x = 0; x < x_width - 16; x += 16, ptr_dst += 48, ptr_src += 48) {

  0062f	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$12[rsp], 0
  0063a	eb 39		 jmp	 SHORT $LN12@convert_rg
$LN10@convert_rg:
  0063c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR x$12[rsp]
  00643	83 c0 10	 add	 eax, 16
  00646	89 84 24 38 01
	00 00		 mov	 DWORD PTR x$12[rsp], eax
  0064d	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00655	48 83 c0 30	 add	 rax, 48			; 00000030H
  00659	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax
  00661	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00669	48 83 c0 30	 add	 rax, 48			; 00000030H
  0066d	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax
$LN12@convert_rg:
  00675	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  0067c	83 e8 10	 sub	 eax, 16
  0067f	39 84 24 38 01
	00 00		 cmp	 DWORD PTR x$12[rsp], eax
  00686	0f 8d 22 03 00
	00		 jge	 $LN11@convert_rg

; 775  :                 __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0068c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00694	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00698	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  006a1	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  006aa	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR src0$13[rsp], xmm0

; 776  :                 __m128i src1 = _mm_loadu_si128((const __m128i *)(ptr_src + 16));

  006b3	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  006bb	48 83 c0 10	 add	 rax, 16
  006bf	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  006c3	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  006cc	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  006d5	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR src1$15[rsp], xmm0

; 777  :                 __m128i src2 = _mm_loadu_si128((const __m128i *)(ptr_src + 32));

  006de	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  006e6	48 83 c0 20	 add	 rax, 32			; 00000020H
  006ea	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  006ee	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  006f7	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00700	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR src2$17[rsp], xmm0

; 778  :                 __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00709	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00711	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00715	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  0071e	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$13[rsp]
  00727	66 0f 38 00 84
	24 b0 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T20[rsp]
  00731	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0073a	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  00743	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x0$19[rsp], xmm0

; 779  :                 __m128i x1 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask + 16)));

  0074c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00754	48 83 c0 10	 add	 rax, 16
  00758	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0075c	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00765	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$13[rsp]
  0076e	66 0f 38 00 84
	24 e0 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T23[rsp]
  00778	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00781	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  0078a	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x1$22[rsp], xmm0

; 780  :                 x0 = _mm_or_si128(x0, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 32))));

  00793	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  0079b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0079f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  007a3	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  007ac	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR src1$15[rsp]
  007b5	66 0f 38 00 84
	24 00 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T25[rsp]
  007bf	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  007c8	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$19[rsp]
  007d1	66 0f eb 84 24
	10 02 00 00	 por	 xmm0, XMMWORD PTR $T26[rsp]
  007da	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  007e3	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  007ec	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x0$19[rsp], xmm0

; 781  :                 x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 48))));

  007f5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  007fd	48 83 c0 30	 add	 rax, 48			; 00000030H
  00801	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00805	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0080e	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR src1$15[rsp]
  00817	66 0f 38 00 84
	24 30 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T28[rsp]
  00821	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  0082a	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$22[rsp]
  00833	66 0f eb 84 24
	40 02 00 00	 por	 xmm0, XMMWORD PTR $T29[rsp]
  0083c	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00845	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  0084e	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x1$22[rsp], xmm0

; 782  :                 __m128i x2 = _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 64)));

  00857	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  0085f	48 83 c0 40	 add	 rax, 64			; 00000040H
  00863	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00867	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  00870	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR src1$15[rsp]
  00879	66 0f 38 00 84
	24 70 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T32[rsp]
  00883	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  0088c	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  00895	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR x2$31[rsp], xmm0

; 783  :                 x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 80))));

  0089e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  008a6	48 83 c0 50	 add	 rax, 80			; 00000050H
  008aa	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  008ae	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  008b7	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR src2$17[rsp]
  008c0	66 0f 38 00 84
	24 90 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T34[rsp]
  008ca	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  008d3	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$22[rsp]
  008dc	66 0f eb 84 24
	a0 02 00 00	 por	 xmm0, XMMWORD PTR $T35[rsp]
  008e5	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  008ee	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  008f7	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x1$22[rsp], xmm0

; 784  :                 x2 = _mm_or_si128(x2, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 96))));

  00900	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00908	48 83 c0 60	 add	 rax, 96			; 00000060H
  0090c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00910	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  00919	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR src2$17[rsp]
  00922	66 0f 38 00 84
	24 c0 02 00 00	 pshufb	 xmm0, XMMWORD PTR $T37[rsp]
  0092c	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  00935	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$31[rsp]
  0093e	66 0f eb 84 24
	d0 02 00 00	 por	 xmm0, XMMWORD PTR $T38[rsp]
  00947	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00950	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T39[rsp]
  00959	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR x2$31[rsp], xmm0

; 785  :                 _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00962	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  0096a	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$19[rsp]
  00973	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 786  :                 _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00977	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  0097f	48 83 c0 10	 add	 rax, 16
  00983	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$22[rsp]
  0098c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 787  :                 _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  00990	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00998	48 83 c0 20	 add	 rax, 32			; 00000020H
  0099c	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$31[rsp]
  009a5	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 788  :             }

  009a9	e9 8e fc ff ff	 jmp	 $LN10@convert_rg
$LN11@convert_rg:

; 789  :             if (x_width % 16) {

  009ae	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  009b5	99		 cdq
  009b6	83 e2 0f	 and	 edx, 15
  009b9	03 c2		 add	 eax, edx
  009bb	83 e0 0f	 and	 eax, 15
  009be	2b c2		 sub	 eax, edx
  009c0	85 c0		 test	 eax, eax
  009c2	74 62		 je	 SHORT $LN16@convert_rg

; 790  :                 int x_offest = 16 - (x_width % 16);

  009c4	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  009cb	99		 cdq
  009cc	83 e2 0f	 and	 edx, 15
  009cf	03 c2		 add	 eax, edx
  009d1	83 e0 0f	 and	 eax, 15
  009d4	2b c2		 sub	 eax, edx
  009d6	b9 10 00 00 00	 mov	 ecx, 16
  009db	2b c8		 sub	 ecx, eax
  009dd	8b c1		 mov	 eax, ecx
  009df	89 84 24 f0 02
	00 00		 mov	 DWORD PTR x_offest$40[rsp], eax

; 791  :                 ptr_dst -= x_offest * 3;

  009e6	6b 84 24 f0 02
	00 00 03	 imul	 eax, DWORD PTR x_offest$40[rsp], 3
  009ee	48 98		 cdqe
  009f0	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR ptr_dst$10[rsp]
  009f8	48 2b c8	 sub	 rcx, rax
  009fb	48 8b c1	 mov	 rax, rcx
  009fe	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR ptr_dst$10[rsp], rax

; 792  :                 ptr_src -= x_offest * 3;

  00a06	6b 84 24 f0 02
	00 00 03	 imul	 eax, DWORD PTR x_offest$40[rsp], 3
  00a0e	48 98		 cdqe
  00a10	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$11[rsp]
  00a18	48 2b c8	 sub	 rcx, rax
  00a1b	48 8b c1	 mov	 rax, rcx
  00a1e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ptr_src$11[rsp], rax
$LN16@convert_rg:

; 793  :             }
; 794  :             __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  00a26	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a2e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a32	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  00a3b	66 0f 6f 84 24
	10 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T42[rsp]
  00a44	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR src0$41[rsp], xmm0

; 795  :             __m128i src1 = _mm_loadu_si128((const __m128i *)(ptr_src + 16));

  00a4d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a55	48 83 c0 10	 add	 rax, 16
  00a59	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a5d	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  00a66	66 0f 6f 84 24
	30 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T44[rsp]
  00a6f	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR src1$43[rsp], xmm0

; 796  :             __m128i src2 = _mm_loadu_si128((const __m128i *)(ptr_src + 32));

  00a78	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ptr_src$11[rsp]
  00a80	48 83 c0 20	 add	 rax, 32			; 00000020H
  00a84	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00a88	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  00a91	66 0f 6f 84 24
	50 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  00a9a	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR src2$45[rsp], xmm0

; 797  :             __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00aa3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00aab	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00aaf	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  00ab8	66 0f 6f 84 24
	00 03 00 00	 movdqa	 xmm0, XMMWORD PTR src0$41[rsp]
  00ac1	66 0f 38 00 84
	24 70 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T48[rsp]
  00acb	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  00ad4	66 0f 6f 84 24
	80 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T49[rsp]
  00add	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR x0$47[rsp], xmm0

; 798  :             __m128i x1 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask + 16)));

  00ae6	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00aee	48 83 c0 10	 add	 rax, 16
  00af2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00af6	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00aff	66 0f 6f 84 24
	00 03 00 00	 movdqa	 xmm0, XMMWORD PTR src0$41[rsp]
  00b08	66 0f 38 00 84
	24 a0 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T51[rsp]
  00b12	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T52[rsp], xmm0
  00b1b	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T52[rsp]
  00b24	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR x1$50[rsp], xmm0

; 799  :             x0 = _mm_or_si128(x0, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 32))));

  00b2d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00b35	48 83 c0 20	 add	 rax, 32			; 00000020H
  00b39	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00b3d	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  00b46	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR src1$43[rsp]
  00b4f	66 0f 38 00 84
	24 c0 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T53[rsp]
  00b59	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T54[rsp], xmm0
  00b62	66 0f 6f 84 24
	60 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$47[rsp]
  00b6b	66 0f eb 84 24
	d0 03 00 00	 por	 xmm0, XMMWORD PTR $T54[rsp]
  00b74	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00b7d	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  00b86	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR x0$47[rsp], xmm0

; 800  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 48))));

  00b8f	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00b97	48 83 c0 30	 add	 rax, 48			; 00000030H
  00b9b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00b9f	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR $T56[rsp], xmm0
  00ba8	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR src1$43[rsp]
  00bb1	66 0f 38 00 84
	24 f0 03 00 00	 pshufb	 xmm0, XMMWORD PTR $T56[rsp]
  00bbb	66 0f 7f 84 24
	00 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  00bc4	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$50[rsp]
  00bcd	66 0f eb 84 24
	00 04 00 00	 por	 xmm0, XMMWORD PTR $T57[rsp]
  00bd6	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR $T58[rsp], xmm0
  00bdf	66 0f 6f 84 24
	10 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T58[rsp]
  00be8	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR x1$50[rsp], xmm0

; 801  :             __m128i x2 = _mm_shuffle_epi8(src1, _mm_load_si128((__m128i *)(mask + 64)));

  00bf1	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00bf9	48 83 c0 40	 add	 rax, 64			; 00000040H
  00bfd	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00c01	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR $T60[rsp], xmm0
  00c0a	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR src1$43[rsp]
  00c13	66 0f 38 00 84
	24 30 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T60[rsp]
  00c1d	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T61[rsp], xmm0
  00c26	66 0f 6f 84 24
	40 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T61[rsp]
  00c2f	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR x2$59[rsp], xmm0

; 802  :             x1 = _mm_or_si128(x1, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 80))));

  00c38	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00c40	48 83 c0 50	 add	 rax, 80			; 00000050H
  00c44	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00c48	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T62[rsp], xmm0
  00c51	66 0f 6f 84 24
	40 03 00 00	 movdqa	 xmm0, XMMWORD PTR src2$45[rsp]
  00c5a	66 0f 38 00 84
	24 50 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T62[rsp]
  00c64	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T63[rsp], xmm0
  00c6d	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$50[rsp]
  00c76	66 0f eb 84 24
	60 04 00 00	 por	 xmm0, XMMWORD PTR $T63[rsp]
  00c7f	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T64[rsp], xmm0
  00c88	66 0f 6f 84 24
	70 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T64[rsp]
  00c91	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR x1$50[rsp], xmm0

; 803  :             x2 = _mm_or_si128(x2, _mm_shuffle_epi8(src2, _mm_load_si128((__m128i *)(mask + 96))));

  00c9a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR mask$8[rsp]
  00ca2	48 83 c0 60	 add	 rax, 96			; 00000060H
  00ca6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00caa	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T65[rsp], xmm0
  00cb3	66 0f 6f 84 24
	40 03 00 00	 movdqa	 xmm0, XMMWORD PTR src2$45[rsp]
  00cbc	66 0f 38 00 84
	24 80 04 00 00	 pshufb	 xmm0, XMMWORD PTR $T65[rsp]
  00cc6	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T66[rsp], xmm0
  00ccf	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$59[rsp]
  00cd8	66 0f eb 84 24
	90 04 00 00	 por	 xmm0, XMMWORD PTR $T66[rsp]
  00ce1	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T67[rsp], xmm0
  00cea	66 0f 6f 84 24
	a0 04 00 00	 movdqa	 xmm0, XMMWORD PTR $T67[rsp]
  00cf3	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR x2$59[rsp], xmm0

; 804  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00cfc	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d04	66 0f 6f 84 24
	60 03 00 00	 movdqa	 xmm0, XMMWORD PTR x0$47[rsp]
  00d0d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 805  :             _mm_storeu_si128((__m128i *)(ptr_dst + 16), x1);

  00d11	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d19	48 83 c0 10	 add	 rax, 16
  00d1d	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR x1$50[rsp]
  00d26	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 806  :             _mm_storeu_si128((__m128i *)(ptr_dst + 32), x2);

  00d2a	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR ptr_dst$10[rsp]
  00d32	48 83 c0 20	 add	 rax, 32			; 00000020H
  00d36	66 0f 6f 84 24
	20 04 00 00	 movdqa	 xmm0, XMMWORD PTR x2$59[rsp]
  00d3f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 807  :         }

  00d43	e9 73 f8 ff ff	 jmp	 $LN7@convert_rg
$LN8@convert_rg:
$LN14@convert_rg:

; 808  : #else
; 809  :         static_assert(csp_from == RGY_CSP_RGB24, "invalid csp");
; 810  : #endif
; 811  :     }
; 812  : }

  00d48	48 8b cc	 mov	 rcx, rsp
  00d4b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00d52	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00d57	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d5f	48 33 cc	 xor	 rcx, rsp
  00d62	e8 00 00 00 00	 call	 __security_check_cookie
  00d67	48 81 c4 e8 04
	00 00		 add	 rsp, 1256		; 000004e8H
  00d6e	5f		 pop	 rdi
  00d6f	5e		 pop	 rsi
  00d70	c3		 ret	 0
??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb24_simd<30>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_bgr24_to_rgb24_ssse3

; 50   : void convert_bgr24_to_rgb24_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 51   :     convert_rgb24_to_rgb24_simd<RGY_CSP_BGR24>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb24_to_rgb24_simd@$0BO@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb24_simd<30>

; 52   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_bgr24_to_rgb24_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i_ssse3

; 46   : void convert_yuy2_to_nv12_i_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 47   :     return convert_yuy2_to_nv12_i_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i_simd

; 48   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
i$ = 72
dst_Y$ = 80
dst_C$ = 88
pixel$ = 96
ycp$ = 104
ycpw$ = 112
Y$ = 120
C$ = 128
xC_pw_one$ = 160
$T8 = 192
xC_YCC$ = 224
$T9 = 256
dst_y_pitch$ = 272
y_range$ = 296
$T10 = 328
x0$ = 352
x1$ = 384
x2$ = 432
x3$ = 464
$T11 = 480
$T12 = 496
$T13 = 512
$T14 = 528
$T15 = 544
$T16 = 560
$T17 = 576
$T18 = 592
$T19 = 608
$T20 = 624
$T21 = 640
$T22 = 656
$T23 = 672
$T24 = 688
$T25 = 704
$T26 = 720
$T27 = 736
$T28 = 752
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 840
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
$T40 = 960
$T41 = 976
$T42 = 992
$T43 = 1008
tv218 = 1024
tv265 = 1028
tv323 = 1032
__$ArrayPad$ = 1040
dst$ = 1088
src$ = 1096
width$ = 1104
src_y_pitch_byte$ = 1112
src_uv_pitch_byte$ = 1120
dst_y_pitch_byte$ = 1128
height$ = 1136
dst_height$ = 1144
thread_id$ = 1152
thread_n$ = 1160
crop$ = 1168
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_simd<0>

; 1633 : static __forceinline void convert_yc48_to_p010_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 28 04
	00 00		 sub	 rsp, 1064		; 00000428H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1088]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1634 :     int x, y, i;
; 1635 :     short *dst_Y = (short *)dst[0];

  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 44 24 50	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1636 :     short *dst_C = (short *)dst[1];

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00071	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00075	48 89 44 24 58	 mov	 QWORD PTR dst_C$[rsp], rax

; 1637 :     const void  *pixel = src[0];

  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0008b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0008f	48 89 44 24 60	 mov	 QWORD PTR pixel$[rsp], rax

; 1638 :     const short *ycp, *ycpw;
; 1639 :     short *Y = nullptr, *C = nullptr;

  00094	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR Y$[rsp], 0
  0009d	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1640 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000a9	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000b1	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  000ba	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  000c3	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1641 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000cc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000d4	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  000dd	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  000e6	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1642 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000ef	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000f6	d1 f8		 sar	 eax, 1
  000f8	89 84 24 10 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1643 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000ff	8b 84 24 88 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00106	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0010a	44 8b 8c 24 80
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00112	44 8b 84 24 70
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  0011a	33 d2		 xor	 edx, edx
  0011c	48 8d 8c 24 48
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00124	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00129	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  00131	48 8b f9	 mov	 rdi, rcx
  00134	48 8b f0	 mov	 rsi, rax
  00137	b9 0c 00 00 00	 mov	 ecx, 12
  0013c	f3 a4		 rep movsb
  0013e	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR y_range$[rsp]
  00146	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  0014e	48 8b f8	 mov	 rdi, rax
  00151	48 8b f1	 mov	 rsi, rcx
  00154	b9 0c 00 00 00	 mov	 ecx, 12
  00159	f3 a4		 rep movsb

; 1644 :     __m128i x0, x1, x2, x3;
; 1645 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0015b	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 04	 add	 eax, 4
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp+8]
  0017a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR y_range$[rsp]
  00181	03 c8		 add	 ecx, eax
  00183	8b c1		 mov	 eax, ecx
  00185	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00189	0f 8d d1 06 00
	00		 jge	 $LN3@convert_yc

; 1646 :         for (i = 0; i < 2; i++) {

  0018f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00197	eb 0a		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00199	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0019d	ff c0		 inc	 eax
  0019f	89 44 24 48	 mov	 DWORD PTR i$[rsp], eax
$LN7@convert_yc:
  001a3	83 7c 24 48 02	 cmp	 DWORD PTR i$[rsp], 2
  001a8	0f 8d ad 06 00
	00		 jge	 $LN6@convert_yc

; 1647 :             ycp = (short*)pixel + width * (y + i) * 3;

  001ae	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001b2	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001b6	03 c8		 add	 ecx, eax
  001b8	8b c1		 mov	 eax, ecx
  001ba	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c1	0f af c8	 imul	 ecx, eax
  001c4	8b c1		 mov	 eax, ecx
  001c6	6b c0 03	 imul	 eax, eax, 3
  001c9	48 98		 cdqe
  001cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixel$[rsp]
  001d0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001d4	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax

; 1648 :             ycpw= ycp + width*2*3;

  001d9	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  001e0	d1 e0		 shl	 eax, 1
  001e2	6b c0 03	 imul	 eax, eax, 3
  001e5	48 98		 cdqe
  001e7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ycp$[rsp]
  001ec	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f0	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax

; 1649 :             Y   = dst_Y + dst_y_pitch * (y + i);

  001f5	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001f9	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001fd	03 c8		 add	 ecx, eax
  001ff	8b c1		 mov	 eax, ecx
  00201	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00208	0f af c8	 imul	 ecx, eax
  0020b	8b c1		 mov	 eax, ecx
  0020d	48 98		 cdqe
  0020f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  00214	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00218	48 89 44 24 78	 mov	 QWORD PTR Y$[rsp], rax

; 1650 :             C   = dst_C + dst_y_pitch * (y + i*2) / 2;

  0021d	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  00221	8b 4c 24 48	 mov	 ecx, DWORD PTR i$[rsp]
  00225	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00228	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0022f	0f af c8	 imul	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	99		 cdq
  00235	2b c2		 sub	 eax, edx
  00237	d1 f8		 sar	 eax, 1
  00239	48 98		 cdqe
  0023b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00240	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00244	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1651 :             for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  0024c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  00254	eb 27		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  00256	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  0025a	83 c0 08	 add	 eax, 8
  0025d	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  00261	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00266	48 83 c0 30	 add	 rax, 48			; 00000030H
  0026a	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax
  0026f	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00274	48 83 c0 30	 add	 rax, 48			; 00000030H
  00278	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax
$LN10@convert_yc:
  0027d	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00284	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  00288	0f 8d c8 05 00
	00		 jge	 $LN9@convert_yc

; 1652 :                 x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  0028e	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  002a0	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  002a9	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1653 :                 x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  002b2	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002b7	48 83 c0 10	 add	 rax, 16
  002bb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002bf	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002c8	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002d1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1654 :                 x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002da	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002df	48 83 c0 20	 add	 rax, 32			; 00000020H
  002e3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002e7	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002f0	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002f9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1655 :                 _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  00302	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00307	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1656 :                 gather_y_uv_from_yc48(x1, x2, x3);

  0030a	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00313	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  0031c	4c 8d 84 24 60
	03 00 00	 lea	 r8, QWORD PTR $T34[rsp]
  00324	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0032c	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00334	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1657 :                 x0 = x2;

  00339	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00342	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1658 :                 _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0034b	33 c0		 xor	 eax, eax
  0034d	85 c0		 test	 eax, eax
  0034f	0f 84 87 00 00
	00		 je	 $LN12@convert_yc
  00355	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0035d	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00366	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0036f	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00378	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00380	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00385	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0038d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00393	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0039b	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  003a3	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003a8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  003b1	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  003b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  003bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003bf	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003c8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003cc	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
  003d7	e9 82 00 00 00	 jmp	 $LN13@convert_yc
$LN12@convert_yc:
  003dc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003e4	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003ed	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003f6	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  003ff	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00407	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040c	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00414	41 b8 04 00 00
	00		 mov	 r8d, 4
  0041a	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00422	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR $T36[rsp]
  0042a	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0042f	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  00438	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0043d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00442	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00446	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0044f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00453	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
$LN13@convert_yc:

; 1659 : 
; 1660 :                 x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  0045e	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00463	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00467	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00470	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00479	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1661 :                 x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  00482	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00487	48 83 c0 10	 add	 rax, 16
  0048b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0048f	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00498	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  004a1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1662 :                 x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  004aa	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  004af	48 83 c0 20	 add	 rax, 32			; 00000020H
  004b3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004b7	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004c0	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004c9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1663 :                 gather_y_uv_from_yc48(x1, x2, x3);

  004d2	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004db	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  004e4	4c 8d 84 24 90
	03 00 00	 lea	 r8, QWORD PTR $T37[rsp]
  004ec	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004f4	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004fc	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1664 :                 _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00501	33 c0		 xor	 eax, eax
  00503	85 c0		 test	 eax, eax
  00505	0f 84 97 00 00
	00		 je	 $LN14@convert_yc
  0050b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00513	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0051c	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00525	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  0052e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00536	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053b	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00543	41 b8 04 00 00
	00		 mov	 r8d, 4
  00549	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00551	48 8d 8c 24 a0
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  00559	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0055e	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00567	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0056c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00571	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00575	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0057c	d1 e1		 shl	 ecx, 1
  0057e	48 63 c9	 movsxd	 rcx, ecx
  00581	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00585	66 0f 6f 84 24
	90 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0058e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00592	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
  0059d	e9 92 00 00 00	 jmp	 $LN15@convert_yc
$LN14@convert_yc:
  005a2	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  005aa	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005b3	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005bc	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  005c5	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d2	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005da	41 b8 04 00 00
	00		 mov	 r8d, 4
  005e0	48 8d 94 24 a0
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005e8	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  005f0	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005f5	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005fe	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00603	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00608	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0060c	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00613	d1 e1		 shl	 ecx, 1
  00615	48 63 c9	 movsxd	 rcx, ecx
  00618	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0061c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00625	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00629	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN15@convert_yc:

; 1665 : 
; 1666 :                 _mm_store_switch_si128((__m128i *)(C + x), convert_uv_range_from_yc48_420i(x0, x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_420I(i), xC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, xC_YCC, xC_pw_one));

  00634	33 c0		 xor	 eax, eax
  00636	85 c0		 test	 eax, eax
  00638	0f 84 0c 01 00
	00		 je	 $LN16@convert_yc
  0063e	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00642	ff c0		 inc	 eax
  00644	83 e0 01	 and	 eax, 1
  00647	48 98		 cdqe
  00649	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00654	48 03 c8	 add	 rcx, rax
  00657	48 8b c1	 mov	 rax, rcx
  0065a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0065e	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00667	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  0066c	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00670	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00677	48 03 c8	 add	 rcx, rax
  0067a	48 8b c1	 mov	 rax, rcx
  0067d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00681	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0068a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00692	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  0069b	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  006a4	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  006ad	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006b6	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  006bf	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006c7	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  006cc	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  006d4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006d9	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  006e1	48 8d 84 24 e0
	02 00 00	 lea	 rax, QWORD PTR $T27[rsp]
  006e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ee	4c 8d 8c 24 d0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  006f6	4c 8d 84 24 c0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  006fe	48 8d 94 24 d0
	03 00 00	 lea	 rdx, QWORD PTR $T41[rsp]
  00706	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  0070e	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  00713	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0071c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00721	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00729	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0072d	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  00736	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0073a	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
  00745	e9 07 01 00 00	 jmp	 $LN17@convert_yc
$LN16@convert_yc:
  0074a	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0074e	ff c0		 inc	 eax
  00750	83 e0 01	 and	 eax, 1
  00753	48 98		 cdqe
  00755	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00759	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00760	48 03 c8	 add	 rcx, rax
  00763	48 8b c1	 mov	 rax, rcx
  00766	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0076a	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  00773	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00778	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0077c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00783	48 03 c8	 add	 rcx, rax
  00786	48 8b c1	 mov	 rax, rcx
  00789	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0078d	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00796	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0079e	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  007a7	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  007b0	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  007b9	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  007c2	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007cb	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  007d3	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  007d8	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  007e0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007e5	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  007ed	48 8d 84 24 20
	03 00 00	 lea	 rax, QWORD PTR $T31[rsp]
  007f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007fa	4c 8d 8c 24 10
	03 00 00	 lea	 r9, QWORD PTR $T30[rsp]
  00802	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  0080a	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR $T43[rsp]
  00812	48 8d 8c 24 e0
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  0081a	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  0081f	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  00828	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0082d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00835	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00839	66 0f 6f 84 24
	30 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T32[rsp]
  00842	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00846	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
$LN17@convert_yc:

; 1667 :             }

  00851	e9 00 fa ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1668 :         }

  00856	e9 3e f9 ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1669 :     }

  0085b	e9 08 f9 ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1670 : }

  00860	48 8b cc	 mov	 rcx, rsp
  00863	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0086a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0086f	48 8b 8c 24 10
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00877	48 33 cc	 xor	 rcx, rsp
  0087a	e8 00 00 00 00	 call	 __security_check_cookie
  0087f	48 81 c4 28 04
	00 00		 add	 rsp, 1064		; 00000428H
  00886	5f		 pop	 rdi
  00887	5e		 pop	 rsi
  00888	c3		 ret	 0
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_ssse3

; 42   : void convert_yc48_to_p010_i_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 43   :     convert_yc48_to_p010_i_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_simd<0>

; 44   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
y_range$ = 88
$T8 = 120
dst_Y$ = 136
dst_C$ = 144
pixel$ = 152
ycp$ = 160
ycpw$ = 168
Y$ = 176
C$ = 184
xC_pw_one$ = 208
$T9 = 240
xC_YCC$ = 272
$T10 = 304
dst_y_pitch$ = 320
x0$ = 336
x1$ = 368
x2$ = 416
x3$ = 448
$T11 = 464
$T12 = 480
$T13 = 496
$T14 = 512
$T15 = 528
$T16 = 544
$T17 = 560
$T18 = 576
$T19 = 592
$T20 = 608
$T21 = 624
$T22 = 640
$T23 = 656
$T24 = 672
$T25 = 688
$T26 = 704
$T27 = 720
$T28 = 744
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 832
$T34 = 848
$T35 = 864
$T36 = 880
tv211 = 896
tv256 = 900
tv280 = 904
__$ArrayPad$ = 912
dst$ = 960
src$ = 968
width$ = 976
src_y_pitch_byte$ = 984
src_uv_pitch_byte$ = 992
dst_y_pitch_byte$ = 1000
height$ = 1008
dst_height$ = 1016
thread_id$ = 1024
thread_n$ = 1032
crop$ = 1040
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_simd<0>

; 1591 : static __forceinline void convert_yc48_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 03
	00 00		 sub	 rsp, 936		; 000003a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 ea 00 00 00	 mov	 ecx, 234		; 000000eaH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+960]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1592 :     int x, y;
; 1593 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 08 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 00
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 f0
	03 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1594 :     short *dst_Y = (short *)dst[0];

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000aa	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000ae	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1595 :     short *dst_C = (short *)dst[1];

  000b6	b8 08 00 00 00	 mov	 eax, 8
  000bb	48 6b c0 01	 imul	 rax, rax, 1
  000bf	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000c7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000cb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_C$[rsp], rax

; 1596 :     const void  *pixel = src[0];

  000d3	b8 08 00 00 00	 mov	 eax, 8
  000d8	48 6b c0 00	 imul	 rax, rax, 0
  000dc	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  000e4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1597 :     const short *ycp, *ycpw;
; 1598 :     short *Y = NULL, *C = NULL;

  000f0	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR Y$[rsp], 0
  000fc	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1599 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  00108	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00110	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00119	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00122	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1600 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0012b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00133	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0013c	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00145	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1601 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  0014e	8b 84 24 e8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  00155	d1 f8		 sar	 eax, 1
  00157	89 84 24 40 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1602 :     __m128i x0, x1, x2, x3;
; 1603 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  0015e	8b 44 24 58	 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 02	 add	 eax, 2
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00177	8b 4c 24 58	 mov	 ecx, DWORD PTR y_range$[rsp]
  0017b	03 c8		 add	 ecx, eax
  0017d	8b c1		 mov	 eax, ecx
  0017f	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00183	0f 8d a5 05 00
	00		 jge	 $LN3@convert_yc

; 1604 :         ycp = (short*)pixel + width * y * 3;

  00189	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00190	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  00195	6b c0 03	 imul	 eax, eax, 3
  00198	48 98		 cdqe
  0019a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax

; 1605 :         ycpw= ycp + width*3;

  001ae	6b 84 24 d0 03
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  001b6	48 98		 cdqe
  001b8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ycp$[rsp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax

; 1606 :         Y   = dst_Y + dst_y_pitch * y;

  001cc	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001d3	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001d8	48 98		 cdqe
  001da	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  001e2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR Y$[rsp], rax

; 1607 :         C   = dst_C + dst_y_pitch * y / 2;

  001ee	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001f5	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001fa	99		 cdq
  001fb	2b c2		 sub	 eax, edx
  001fd	d1 f8		 sar	 eax, 1
  001ff	48 98		 cdqe
  00201	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00209	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0020d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1608 :         for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  00215	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  0021d	eb 33		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0021f	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  00223	83 c0 08	 add	 eax, 8
  00226	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  0022a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00232	48 83 c0 30	 add	 rax, 48			; 00000030H
  00236	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax
  0023e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00246	48 83 c0 30	 add	 rax, 48			; 00000030H
  0024a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax
$LN7@convert_yc:
  00252	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00259	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  0025d	0f 8d c6 04 00
	00		 jge	 $LN6@convert_yc

; 1609 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  00263	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  0026b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0026f	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00278	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00281	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1610 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0028a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00292	48 83 c0 10	 add	 rax, 16
  00296	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0029a	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002a3	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002ac	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1611 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002b5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  002bd	48 83 c0 20	 add	 rax, 32			; 00000020H
  002c1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002c5	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002ce	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002d7	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1612 :             _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  002e0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  002e8	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1613 :             gather_y_uv_from_yc48(x1, x2, x3);

  002eb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  002f4	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  002fd	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  00305	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0030d	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00315	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1614 :             x0 = x2;

  0031a	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00323	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1615 : 
; 1616 :             _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0032c	33 c0		 xor	 eax, eax
  0032e	85 c0		 test	 eax, eax
  00330	0f 84 8a 00 00
	00		 je	 $LN9@convert_yc
  00336	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0033e	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00347	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00350	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00359	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00361	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00366	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0036e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00374	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0037c	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  00384	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00389	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00392	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00397	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  0039f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003a3	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003ac	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003b0	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
  003bb	e9 85 00 00 00	 jmp	 $LN10@convert_yc
$LN9@convert_yc:
  003c0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003c8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003d1	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003da	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  003e3	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f0	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  003fe	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00406	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  0040e	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00413	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0041c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00421	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00429	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0042d	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00436	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0043a	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
$LN10@convert_yc:

; 1617 : 
; 1618 :             x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  00445	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0044d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00451	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  0045a	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00463	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1619 :             x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  0046c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00474	48 83 c0 10	 add	 rax, 16
  00478	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0047c	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00485	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0048e	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1620 :             x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  00497	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0049f	48 83 c0 20	 add	 rax, 32			; 00000020H
  004a3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004a7	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004b0	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004b9	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1621 :             gather_y_uv_from_yc48(x1, x2, x3);

  004c2	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004cb	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  004d4	4c 8d 84 24 30
	03 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  004dc	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004e4	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004ec	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1622 : 
; 1623 :             _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  004f1	33 c0		 xor	 eax, eax
  004f3	85 c0		 test	 eax, eax
  004f5	0f 84 96 00 00
	00		 je	 $LN11@convert_yc
  004fb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00503	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0050c	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00515	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  0051e	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00526	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052b	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00533	41 b8 04 00 00
	00		 mov	 r8d, 4
  00539	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00541	48 8d 8c 24 40
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00549	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0054e	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00557	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0055c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00564	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00568	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00570	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00574	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0057d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00581	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  0058c	e9 91 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00591	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00599	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005a2	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005ab	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  005b4	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005c9	41 b8 04 00 00
	00		 mov	 r8d, 4
  005cf	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005d7	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  005df	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005e4	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005ed	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  005f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  005fa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  005fe	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00606	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0060a	66 0f 6f 84 24
	a0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00613	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00617	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN12@convert_yc:

; 1624 : 
; 1625 :             x0 = convert_uv_range_from_yc48_yuv420p(x0, x2, _mm_set1_epi16(UV_OFFSET_x2), xC_UV_L_MA_16_420P, UV_L_RSH_16_420P, xC_YCC, xC_pw_one);

  00622	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  0062a	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00633	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@10001000100010001000100010001000
  0063b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00644	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  0064d	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00656	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  0065f	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00668	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00670	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00675	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  0067d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00682	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0068a	4c 8d 8c 24 c0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  00692	4c 8d 84 24 b0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  0069a	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR $T36[rsp]
  006a2	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  006aa	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ; convert_uv_range_from_yc48_yuv420p
  006af	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  006b8	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  006c1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1626 : 
; 1627 :             _mm_store_switch_si128((__m128i *)(C + x), x0);

  006ca	33 c0		 xor	 eax, eax
  006cc	85 c0		 test	 eax, eax
  006ce	74 2b		 je	 SHORT $LN13@convert_yc
  006d0	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  006d5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  006dd	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  006e1	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006ea	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  006ee	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
  006f9	eb 29		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  006fb	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00700	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00708	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0070c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00715	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00719	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
$LN14@convert_yc:

; 1628 :         }

  00724	e9 f6 fa ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1629 :     }

  00729	e9 3a fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1630 : }

  0072e	48 8b cc	 mov	 rcx, rsp
  00731	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00738	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0073d	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00745	48 33 cc	 xor	 rcx, rsp
  00748	e8 00 00 00 00	 call	 __security_check_cookie
  0074d	48 81 c4 a8 03
	00 00		 add	 rsp, 936		; 000003a8H
  00754	5f		 pop	 rdi
  00755	5e		 pop	 rsi
  00756	c3		 ret	 0
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_ssse3.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_ssse3

; 38   : void convert_yc48_to_p010_ssse3(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 39   :     convert_yc48_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_simd<0>

; 40   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_ssse3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x5$ = 32
x6$ = 48
x7$ = 64
xMask$ = 80
$T1 = 96
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
$T11 = 256
$T12 = 272
$T13 = 288
$T14 = 304
$T15 = 320
$T16 = 336
$T17 = 352
$T18 = 368
$T19 = 384
$T20 = 400
$T21 = 416
$T22 = 432
$T23 = 448
$T24 = 464
$T25 = 480
$T26 = 496
$T27 = 512
$T28 = 528
$T29 = 544
$T30 = 560
$T31 = 576
$T32 = 592
$T33 = 608
$T34 = 624
$T35 = 640
$T36 = 656
$T37 = 672
$T38 = 688
$T39 = 704
$T40 = 720
$T41 = 736
$T42 = 752
$T43 = 768
$T44 = 784
$T45 = 800
$T46 = 816
$T47 = 832
$T48 = 848
$T49 = 864
$T50 = 880
$T51 = 896
$T52 = 912
x0$ = 944
x1$ = 952
x2$ = 960
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z PROC	; gather_y_u_v_from_yc48

; 1464 : static __forceinline void gather_y_u_v_from_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec a0 03
	00 00		 sub	 rsp, 928		; 000003a0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 e8 00 00 00	 mov	 ecx, 232		; 000000e8H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+944]

; 1465 : #if USE_SSE41
; 1466 :     __m128i x3, x4, x5;
; 1467 :     const int MASK_INT = 0x40 + 0x08 + 0x01;
; 1468 :     x3 = _mm_blend_epi16(x2, x0, MASK_INT);
; 1469 :     x4 = _mm_blend_epi16(x1, x2, MASK_INT);
; 1470 :     x5 = _mm_blend_epi16(x0, x1, MASK_INT);
; 1471 : 
; 1472 :     x3 = _mm_blend_epi16(x3, x1, MASK_INT<<1);
; 1473 :     x4 = _mm_blend_epi16(x4, x0, MASK_INT<<1);
; 1474 :     x5 = _mm_blend_epi16(x5, x2, MASK_INT<<1);
; 1475 : 
; 1476 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1477 :     x1 = _mm_shuffle_epi8(x4, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 6));
; 1478 :     x2 = _mm_shuffle_epi8(x5, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 12));
; 1479 : #else
; 1480 :     //code from afs v7.5a+10
; 1481 :     __m128i x5, x6, x7, xMask;
; 1482 :     //select y
; 1483 :     alignas(16) static const uint16_t maskY_select[8] = { 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000 };
; 1484 :     xMask = _mm_load_si128((__m128i*)maskY_select);

  0002e	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?maskY_select@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB
  00036	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003c	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00042	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 1485 : 
; 1486 :     x5 = select_by_mask(x2, x0, xMask);

  00048	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  0004e	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  00057	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0005f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00063	f3 0f 7f 84 24
	60 02 00 00	 movdqu	 XMMWORD PTR $T33[rsp], xmm0
  0006c	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00074	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00078	f3 0f 7f 84 24
	50 02 00 00	 movdqu	 XMMWORD PTR $T32[rsp], xmm0
  00081	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR $T34[rsp]
  00089	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR $T33[rsp]
  00091	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00099	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0009e	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  000a4	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  000aa	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1487 :     xMask = _mm_slli_si128(xMask, 2);

  000b0	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  000b6	66 0f 73 f8 02	 pslldq	 xmm0, 2
  000bb	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000c4	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000cd	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 1488 :     x5 = select_by_mask(x5, x1, xMask); //52741630

  000d3	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  000d9	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  000e2	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000ea	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000ee	f3 0f 7f 84 24
	90 02 00 00	 movdqu	 XMMWORD PTR $T36[rsp], xmm0
  000f7	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  000fd	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00106	4c 8d 84 24 a0
	02 00 00	 lea	 r8, QWORD PTR $T37[rsp]
  0010e	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T36[rsp]
  00116	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  0011e	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00123	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  0012c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00135	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1489 : 
; 1490 :     x6 = _mm_unpacklo_epi16(x5, x5);    //11663300

  0013b	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00141	66 0f 61 44 24
	20		 punpcklwd xmm0, XMMWORD PTR x5$[rsp]
  00147	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00150	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00159	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1491 :     x7 = _mm_unpackhi_epi16(x5, x5);    //55227744

  0015f	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00165	66 0f 69 44 24
	20		 punpckhwd xmm0, XMMWORD PTR x5$[rsp]
  0016b	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00174	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  0017d	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1492 : 
; 1493 :     alignas(16) static const uint16_t maskY_shuffle[8] = { 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000 };
; 1494 :     xMask = _mm_load_si128((__m128i*)maskY_shuffle);

  00183	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?maskY_shuffle@?1??gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z@4QBGB
  0018b	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00194	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0019d	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 1495 :     x5 = select_by_mask(x7, x6, xMask);                 //51627340

  001a3	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  001a9	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  001b2	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  001b8	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  001c1	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  001c7	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  001d0	4c 8d 84 24 d0
	02 00 00	 lea	 r8, QWORD PTR $T40[rsp]
  001d8	48 8d 94 24 c0
	02 00 00	 lea	 rdx, QWORD PTR $T39[rsp]
  001e0	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  001e8	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  001ed	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  001f6	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001ff	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1496 :     x5 = _mm_shuffle_epi32(x5, _MM_SHUFFLE(1, 2, 3, 0));   //73625140

  00205	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  0020b	66 0f 70 c0 6c	 pshufd	 xmm0, xmm0, 108		; 0000006cH
  00210	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00219	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00222	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1497 : 
; 1498 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //75316420

  00228	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  0022e	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00233	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0023c	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00242	66 0f 61 84 24
	f0 00 00 00	 punpcklwd xmm0, XMMWORD PTR $T10[rsp]
  0024b	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00254	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  0025d	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1499 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //76543210

  00263	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00269	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0026e	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00277	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  0027d	66 0f 61 84 24
	10 01 00 00	 punpcklwd xmm0, XMMWORD PTR $T12[rsp]
  00286	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  0028f	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00298	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1500 : 
; 1501 :                                                         //select uv
; 1502 :     xMask = _mm_srli_si128(_mm_cmpeq_epi8(xMask, xMask), 8); //0x00000000, 0x00000000, 0xffffffff, 0xffffffff

  0029e	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  002a4	66 0f 74 44 24
	50		 pcmpeqb xmm0, XMMWORD PTR xMask$[rsp]
  002aa	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002b3	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002bc	66 0f 73 d8 08	 psrldq	 xmm0, 8
  002c1	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002ca	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002d3	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 1503 :     x6 = select_by_mask(_mm_srli_si128(x1, 2), _mm_srli_si128(x2, 2), xMask); //x  x v4 u4 v6 u6 x  x

  002d9	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  002e1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002e5	66 0f 73 d8 02	 psrldq	 xmm0, 2
  002ea	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  002f3	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  002fb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002ff	66 0f 73 d8 02	 psrldq	 xmm0, 2
  00304	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  0030d	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  00313	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  0031c	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00325	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0032e	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00337	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  00340	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T43[rsp]
  00348	48 8d 94 24 f0
	02 00 00	 lea	 rdx, QWORD PTR $T42[rsp]
  00350	48 8d 8c 24 e0
	02 00 00	 lea	 rcx, QWORD PTR $T41[rsp]
  00358	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0035d	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00366	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  0036f	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1504 :     x7 = select_by_mask(x0, x1, xMask);               //x  x  v1 u1 v3 u3 x  x

  00375	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  0037b	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  00384	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0038c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00390	f3 0f 7f 84 24
	20 03 00 00	 movdqu	 XMMWORD PTR $T45[rsp], xmm0
  00399	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  003a1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003a5	f3 0f 7f 84 24
	10 03 00 00	 movdqu	 XMMWORD PTR $T44[rsp], xmm0
  003ae	4c 8d 84 24 30
	03 00 00	 lea	 r8, QWORD PTR $T46[rsp]
  003b6	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  003be	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  003c6	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  003cb	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003d4	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003dd	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1505 :     xMask = _mm_slli_si128(xMask, 4);                 //0x00000000, 0xffffffff, 0xffffffff, 0x00000000

  003e3	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  003e9	66 0f 73 f8 04	 pslldq	 xmm0, 4
  003ee	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  003f7	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00400	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 1506 :     x0 = _mm_alignr_epi8_simd(x1, x0, 2);             //v2 u2  x  x  x  x v0 u0

  00406	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0040e	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  00416	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0041a	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [rcx], 2
  00420	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00429	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00431	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  0043a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1507 :     x6 = select_by_mask(x0, x6, xMask);               //v2 u2 v4 u4 v6 u6 v0 u0

  0043e	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  00444	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  0044d	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00453	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  0045c	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00464	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00468	f3 0f 7f 84 24
	40 03 00 00	 movdqu	 XMMWORD PTR $T47[rsp], xmm0
  00471	4c 8d 84 24 60
	03 00 00	 lea	 r8, QWORD PTR $T49[rsp]
  00479	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR $T48[rsp]
  00481	48 8d 8c 24 40
	03 00 00	 lea	 rcx, QWORD PTR $T47[rsp]
  00489	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  0048e	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00497	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  004a0	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1508 :     x7 = select_by_mask(x2, x7, xMask);               //v7 u7 v1 u1 v3 u3 v5 u5

  004a6	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR xMask$[rsp]
  004ac	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T52[rsp], xmm0
  004b5	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  004bb	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  004c4	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  004cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004d0	f3 0f 7f 84 24
	70 03 00 00	 movdqu	 XMMWORD PTR $T50[rsp], xmm0
  004d9	4c 8d 84 24 90
	03 00 00	 lea	 r8, QWORD PTR $T52[rsp]
  004e1	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR $T51[rsp]
  004e9	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T50[rsp]
  004f1	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  004f6	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  004ff	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  00508	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1509 :     x0 = _mm_shuffle_epi32(x6, _MM_SHUFFLE(1, 2, 3, 0)); //v6 u6 v4 u4 v2 u2 v0 u0

  0050e	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00514	66 0f 70 c0 6c	 pshufd	 xmm0, xmm0, 108		; 0000006cH
  00519	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00522	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0052a	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00533	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1510 :     x1 = _mm_shuffle_epi32(x7, _MM_SHUFFLE(3, 0, 1, 2)); //v7 u7 v5 u5 v3 u3 v1 u1

  00537	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0053d	66 0f 70 c0 c6	 pshufd	 xmm0, xmm0, 198		; 000000c6H
  00542	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  0054b	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00553	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  0055c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1511 : 
; 1512 :     x6 = _mm_unpacklo_epi16(x0, x1); //v3 v2 u3 u2 v1 v0 u1 u0

  00560	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00568	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00570	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00574	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00578	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00581	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T26[rsp]
  0058a	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1513 :     x7 = _mm_unpackhi_epi16(x0, x1); //v7 v6 u7 u6 v5 v4 u5 u4

  00590	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00598	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  005a0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005a4	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  005a8	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  005b1	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  005ba	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1514 : 
; 1515 :     x0 = _mm_unpacklo_epi32(x6, x7); //v5 v4 v1 v0 u5 u4 u1 u0

  005c0	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  005c6	66 0f 62 44 24
	40		 punpckldq xmm0, XMMWORD PTR x7$[rsp]
  005cc	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  005d5	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  005dd	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  005e6	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1516 :     x1 = _mm_unpackhi_epi32(x6, x7); //v7 v6 v3 v2 u7 u6 u3 u2

  005ea	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  005f0	66 0f 6a 44 24
	40		 punpckhdq xmm0, XMMWORD PTR x7$[rsp]
  005f6	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  005ff	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00607	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T29[rsp]
  00610	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1517 : 
; 1518 :     x6 = _mm_unpacklo_epi32(x0, x1); //u7 u6 u5 u4 u3 u2 u1 u0

  00614	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0061c	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00624	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00628	66 0f 62 01	 punpckldq xmm0, XMMWORD PTR [rcx]
  0062c	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00635	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  0063e	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1519 :     x7 = _mm_unpackhi_epi32(x0, x1); //v7 v6 v5 v4 v3 v2 v1 v0

  00644	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0064c	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00654	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00658	66 0f 6a 01	 punpckhdq xmm0, XMMWORD PTR [rcx]
  0065c	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  00665	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  0066e	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1520 : 
; 1521 :     x0 = x5;

  00674	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0067c	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00682	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1522 :     x1 = x6;

  00686	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0068e	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00694	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1523 :     x2 = x7;

  00698	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  006a0	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  006a6	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1524 : #endif //USE_SSE41
; 1525 : }

  006aa	48 81 c4 a0 03
	00 00		 add	 rsp, 928		; 000003a0H
  006b1	5f		 pop	 rdi
  006b2	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x2$ = 48
x3$ = 64
x6$ = 80
x7$ = 96
$T1 = 112
$T2 = 128
$T3 = 144
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
x0$ = 432
x1$ = 440
xC_UV_OFFSET_x1$ = 448
xC_UV_MA_16_0$ = 456
xC_UV_MA_16_1$ = 464
UV_RSH_16$ = 472
xC_YCC$ = 480
xC_pw_one$ = 488
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i

; 1411 : static __forceinline __m128i convert_uv_range_from_yc48_420i(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16_0, const __m128i& xC_UV_MA_16_1, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+432]

; 1412 :     __m128i x2, x3, x6, x7;
; 1413 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00033	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1414 :     x1 = _mm_add_epi16(x1, xC_UV_OFFSET_x1);

  00063	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0006b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00084	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0008c	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00095	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1415 : 
; 1416 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00099	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000a1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000a9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000ad	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  000b1	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ba	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000c3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1417 :     x6 = _mm_unpacklo_epi16(x0, xC_pw_one);

  000c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000d9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000dd	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  000e1	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000ea	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000f3	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1418 :     x3 = _mm_unpackhi_epi16(x1, xC_pw_one);

  000f9	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00101	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00109	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0010d	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  00111	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  0011a	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00123	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1419 :     x2 = _mm_unpacklo_epi16(x1, xC_pw_one);

  00129	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00131	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00139	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0013d	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00141	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0014a	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00153	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1420 : 
; 1421 :     x6 = _mm_madd_epi16(x6, xC_UV_MA_16_0);

  00159	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  00161	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00167	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  0016b	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00174	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1422 :     x7 = _mm_madd_epi16(x7, xC_UV_MA_16_0);

  00183	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  0018b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00191	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  00195	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019e	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a7	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1423 :     x2 = _mm_madd_epi16(x2, xC_UV_MA_16_1);

  001ad	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001b5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  001bb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001bf	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001c8	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001d1	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1424 :     x3 = _mm_madd_epi16(x3, xC_UV_MA_16_1);

  001d7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001df	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  001e5	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001e9	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  001f2	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  001fb	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1425 :     x0 = _mm_add_epi32(x6, x2);

  00201	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00207	66 0f fe 44 24
	30		 paddd	 xmm0, XMMWORD PTR x2$[rsp]
  0020d	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00216	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0021e	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00227	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1426 :     x7 = _mm_add_epi32(x7, x3);

  0022b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00231	66 0f fe 44 24
	40		 paddd	 xmm0, XMMWORD PTR x3$[rsp]
  00237	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00240	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00249	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1427 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  0024f	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00258	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00260	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  00264	66 0f e2 c8	 psrad	 xmm1, xmm0
  00268	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0026c	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00275	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0027d	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00286	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1428 :     x7 = _mm_srai_epi32(x7, UV_RSH_16);

  0028a	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00293	66 0f 6f 4c 24
	60		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  00299	66 0f e2 c8	 psrad	 xmm1, xmm0
  0029d	66 0f 6f c1	 movdqa	 xmm0, xmm1
  002a1	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002aa	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002b3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1429 :     x0 = _mm_add_epi32(x0, xC_YCC);

  002b9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002c1	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  002c9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002cd	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  002d1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002da	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002e2	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002eb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1430 :     x7 = _mm_add_epi32(x7, xC_YCC);

  002ef	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  002f7	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  002fd	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00301	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  0030a	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00313	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1431 : 
; 1432 :     x0 = _mm_packus_epi32_simd(x0, x7);

  00319	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0031f	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00328	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00330	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00334	f3 0f 7f 84 24
	80 01 00 00	 movdqu	 XMMWORD PTR $T18[rsp], xmm0
  0033d	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  00345	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR $T18[rsp]
  0034d	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  00352	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0035b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00363	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0036c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1433 : 
; 1434 :     return x0;

  00370	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00378	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1435 : }

  0037c	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  00383	5f		 pop	 rdi
  00384	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
x0$ = 144
x1$ = 152
xC_UV_OFFSET_x2$ = 160
xC_UV_MA_16$ = 168
UV_RSH_16$ = 176
xC_YCC$ = 184
xC_pw_one$ = 192
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z PROC ; convert_uv_range_from_yc48_yuv420p

; 1405 : static __forceinline __m128i convert_uv_range_from_yc48_yuv420p(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x2, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 1406 :     x0 = _mm_add_epi16(x0, x1);

  00033	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1407 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x2);

  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0006b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x2$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00081	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00089	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0008f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1408 : 
; 1409 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00093	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	f3 0f 7f 44 24
	70		 movdqu	 XMMWORD PTR $T4[rsp], xmm0
  000a5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  000ba	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  000c2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  000ca	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp]
  000cf	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000d4	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000da	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]

; 1410 : }

  000e0	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
x0$ = 128
xC_UV_OFFSET_x1$ = 136
xC_UV_MA_16$ = 144
UV_RSH_16$ = 152
xC_YCC$ = 160
xC_pw_one$ = 168
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z PROC ; convert_uv_range_from_yc48

; 1400 : static __forceinline __m128i convert_uv_range_from_yc48(__m128i x0, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16, int UV_RSH_16, __m128i xC_YCC, const __m128i& xC_pw_one) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1c 00 00 00	 mov	 ecx, 28
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1401 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00030	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00038	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00040	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00044	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  00048	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00056	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1402 : 
; 1403 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00068	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006c	f3 0f 7f 44 24
	60		 movdqu	 XMMWORD PTR $T3[rsp], xmm0
  00072	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  00087	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  0008f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  00097	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T3[rsp]
  0009c	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000a1	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  000a7	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]

; 1404 : }

  000ad	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x1$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_UV_MA_16$ = 264
UV_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_uv_range_after_adding_offset

; 1383 : static __forceinline __m128i convert_uv_range_after_adding_offset(__m128i x0, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1384 :     __m128i x1;
; 1385 :     x1 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1386 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1387 : 
; 1388 :     x0 = _mm_madd_epi16(x0, xC_UV_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1389 :     x1 = _mm_madd_epi16(x1, xC_UV_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1390 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1391 :     x1 = _mm_srai_epi32(x1, UV_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x1$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1392 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1393 :     x1 = _mm_add_epi32(x1, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1394 : 
; 1395 :     x0 = _mm_packus_epi32_simd(x0, x1);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1396 : 
; 1397 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1398 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x7$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_Y_MA_16$ = 264
Y_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_y_range_from_yc48

; 1366 : static __forceinline __m128i convert_y_range_from_yc48(__m128i x0, const __m128i& xC_Y_MA_16, int Y_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1367 :     __m128i x7;
; 1368 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1369 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1370 : 
; 1371 :     x0 = _mm_madd_epi16(x0, xC_Y_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_Y_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1372 :     x7 = _mm_madd_epi16(x7, xC_Y_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_Y_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1373 :     x0 = _mm_srai_epi32(x0, Y_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1374 :     x7 = _mm_srai_epi32(x7, Y_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1375 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1376 :     x7 = _mm_add_epi32(x7, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1377 : 
; 1378 :     x0 = _mm_packus_epi32_simd(x0, x7);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1379 : 
; 1380 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1381 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
$T11 = 208
$T12 = 224
$T13 = 240
$T14 = 256
$T15 = 272
$T16 = 288
$T17 = 304
$T18 = 320
$T19 = 336
$T20 = 352
$T21 = 368
$T22 = 384
$T23 = 400
$T24 = 416
x0$ = 448
x1$ = 456
x2$ = 464
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z PROC	; gather_y_uv_from_yc48

; 1331 : static __forceinline void gather_y_uv_from_yc48(__m128i& x0, __m128i& x1, __m128i x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]

; 1332 : #if USE_SSE41
; 1333 :     __m128i x3;
; 1334 :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;
; 1335 :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;
; 1336 :     x3 = _mm_blend_epi16(x0, x1, MASK_INT_Y);
; 1337 :     x3 = _mm_blend_epi16(x3, x2, MASK_INT_Y>>2);
; 1338 : 
; 1339 :     x1 = _mm_blend_epi16(x0, x1, MASK_INT_UV);
; 1340 :     x1 = _mm_blend_epi16(x1, x2, MASK_INT_UV>>2);
; 1341 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);
; 1342 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));//UV1行目
; 1343 : 
; 1344 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1345 : #else
; 1346 :     __m128i x3;
; 1347 :     x3 = select_by_mask(x0, x1, xC_MASK_YCP2Y(0));

  0002e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA
  0003e	48 03 c8	 add	 rcx, rax
  00041	48 8b c1	 mov	 rax, rcx
  00044	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00048	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004e	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00054	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  0005d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00065	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00069	f3 0f 7f 84 24
	00 01 00 00	 movdqu	 XMMWORD PTR $T14[rsp], xmm0
  00072	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0007a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0007e	f3 0f 7f 84 24
	f0 00 00 00	 movdqu	 XMMWORD PTR $T13[rsp], xmm0
  00087	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0008f	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  00097	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T13[rsp]
  0009f	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  000a4	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  000aa	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  000b0	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1348 :     x3 = select_by_mask(x3, x2, xC_MASK_YCP2Y(1));

  000b6	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000bb	48 6b c0 01	 imul	 rax, rax, 1
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_MASK_YCP2Y@@3QAY0BA@$$CBFA
  000c6	48 03 c8	 add	 rcx, rax
  000c9	48 8b c1	 mov	 rax, rcx
  000cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d0	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000d6	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000dc	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  000e5	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  000ed	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000f1	f3 0f 7f 84 24
	30 01 00 00	 movdqu	 XMMWORD PTR $T17[rsp], xmm0
  000fa	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00100	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00109	4c 8d 84 24 40
	01 00 00	 lea	 r8, QWORD PTR $T18[rsp]
  00111	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  00119	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00121	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00126	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  0012c	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00132	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1349 : 
; 1350 :     x1 = select_by_mask(x0, x1, xC_MASK_YCP2UV(0));

  00138	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0013d	48 6b c0 00	 imul	 rax, rax, 0
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA
  00148	48 03 c8	 add	 rcx, rax
  0014b	48 8b c1	 mov	 rax, rcx
  0014e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00152	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00158	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  0015e	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00167	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0016f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00173	f3 0f 7f 84 24
	60 01 00 00	 movdqu	 XMMWORD PTR $T20[rsp], xmm0
  0017c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00184	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00188	f3 0f 7f 84 24
	50 01 00 00	 movdqu	 XMMWORD PTR $T19[rsp], xmm0
  00191	4c 8d 84 24 70
	01 00 00	 lea	 r8, QWORD PTR $T21[rsp]
  00199	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T20[rsp]
  001a1	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T19[rsp]
  001a9	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  001ae	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  001b7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  001bf	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  001c8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1351 :     x1 = select_by_mask(x1, x2, xC_MASK_YCP2UV(1));

  001cc	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001d1	48 6b c0 01	 imul	 rax, rax, 1
  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_MASK_YCP2UV@@3QAY0BA@$$CBFA
  001dc	48 03 c8	 add	 rcx, rax
  001df	48 8b c1	 mov	 rax, rcx
  001e2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001e6	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  001ef	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  001f8	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00201	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00209	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0020d	f3 0f 7f 84 24
	90 01 00 00	 movdqu	 XMMWORD PTR $T23[rsp], xmm0
  00216	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0021e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00222	f3 0f 7f 84 24
	80 01 00 00	 movdqu	 XMMWORD PTR $T22[rsp], xmm0
  0022b	4c 8d 84 24 a0
	01 00 00	 lea	 r8, QWORD PTR $T24[rsp]
  00233	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0023b	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00243	e8 00 00 00 00	 call	 ?select_by_mask@@YA?AT__m128i@@T1@00@Z ; select_by_mask
  00248	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00251	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00259	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00262	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1352 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);

  00266	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0026e	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00276	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0027a	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [rcx], 2
  00280	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00289	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00291	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  0029a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1353 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));

  0029e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 70 c0 6c	 pshufd	 xmm0, xmm0, 108		; 0000006cH
  002af	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  002b8	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  002c0	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  002c9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1354 : #if USE_SSSE3
; 1355 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  002cd	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  002d5	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  002de	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  002e4	66 0f 38 00 84
	24 d0 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T11[rsp]
  002ee	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002f7	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002ff	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00308	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1356 : #else
; 1357 :     x0 = _mm_shuffle_epi32(  x3, _MM_SHUFFLE(3,1,2,0));
; 1358 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1359 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(1,2,3,0));
; 1360 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1361 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,0,1,2));
; 1362 : #endif //USE_SSSE3
; 1363 : #endif //USE_SSE41
; 1364 : }

  0030c	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  00313	5f		 pop	 rdi
  00314	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcLine$ = 120
dstLine$ = 128
MASK_RGB3_TO_RGB4$ = 160
xMask$ = 192
$T6 = 208
y$7 = 224
ptr_src$8 = 232
ptr_dst$9 = 240
x$10 = 248
x_fin$11 = 252
x0$12 = 256
$T13 = 272
x1$14 = 288
$T15 = 304
x2$16 = 320
$T17 = 336
x3$18 = 352
$T19 = 368
$T20 = 384
$T21 = 400
$T22 = 416
$T23 = 432
$T24 = 448
$T25 = 464
$T26 = 488
__$ArrayPad$ = 504
dst$ = 544
src$ = 552
width$ = 560
src_y_pitch_byte$ = 568
src_uv_pitch_byte$ = 576
dst_y_pitch_byte$ = 584
height$ = 592
dst_height$ = 600
thread_id$ = 608
thread_n$ = 616
crop$ = 624
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb32_simd

; 429  : static void __forceinline convert_rgb24r_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR [rsp+544]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 430  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 431  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 432  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 433  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 434  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 60
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 435  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1)) + crop_left * 3;;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 4c 24 48	 mov	 ecx, DWORD PTR y_range$[rsp]
  00112	8b 54 24 50	 mov	 edx, DWORD PTR y_range$[rsp+8]
  00116	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  0011a	8b 94 24 38 02
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  00121	0f af d1	 imul	 edx, ecx
  00124	8b ca		 mov	 ecx, edx
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00131	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00135	48 03 c1	 add	 rax, rcx
  00138	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  0013d	48 63 c9	 movsxd	 rcx, ecx
  00140	48 03 c1	 add	 rax, rcx
  00143	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 436  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  00148	b8 08 00 00 00	 mov	 eax, 8
  0014d	48 6b c0 00	 imul	 rax, rax, 0
  00151	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00158	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0015d	48 63 c9	 movsxd	 rcx, ecx
  00160	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00168	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016c	48 8b c1	 mov	 rax, rcx
  0016f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 437  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  00177	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp], 0
  0017f	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+1], 1
  00187	c6 84 24 a2 00
	00 00 02	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+2], 2
  0018f	c6 84 24 a3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+3], -1
  00197	c6 84 24 a4 00
	00 00 03	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+4], 3
  0019f	c6 84 24 a5 00
	00 00 04	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+5], 4
  001a7	c6 84 24 a6 00
	00 00 05	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+6], 5
  001af	c6 84 24 a7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+7], -1
  001b7	c6 84 24 a8 00
	00 00 06	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+8], 6
  001bf	c6 84 24 a9 00
	00 00 07	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+9], 7
  001c7	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+10], 8
  001cf	c6 84 24 ab 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+11], -1
  001d7	c6 84 24 ac 00
	00 00 09	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+12], 9
  001df	c6 84 24 ad 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+13], 10
  001e7	c6 84 24 ae 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+14], 11
  001ef	c6 84 24 af 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+15], -1

; 438  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  001f7	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR MASK_RGB3_TO_RGB4$[rsp]
  00200	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00209	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00212	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 439  :     for (int y = 0; y  < y_range.len; y++, srcLine -= src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0021b	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  00226	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00228	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  0022f	ff c0		 inc	 eax
  00231	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  00238	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00240	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00245	48 2b c8	 sub	 rcx, rax
  00248	48 8b c1	 mov	 rax, rcx
  0024b	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
  00250	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00258	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00260	48 03 c8	 add	 rcx, rax
  00263	48 8b c1	 mov	 rax, rcx
  00266	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN4@convert_rg:
  0026e	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00272	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  00279	0f 8d 49 03 00
	00		 jge	 $LN3@convert_rg

; 440  :         uint8_t *ptr_src = srcLine;

  0027f	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  00284	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax

; 441  :         uint8_t *ptr_dst = dstLine;

  0028c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00294	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax

; 442  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  0029c	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  002a7	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  002ab	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002b2	2b c8		 sub	 ecx, eax
  002b4	8b c1		 mov	 eax, ecx
  002b6	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  002ba	83 e8 10	 sub	 eax, 16
  002bd	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 443  :         for (; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  002c4	eb 39		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002c6	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  002cd	83 c0 10	 add	 eax, 16
  002d0	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  002d7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  002df	48 83 c0 40	 add	 rax, 64			; 00000040H
  002e3	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  002eb	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  002f3	48 83 c0 30	 add	 rax, 48			; 00000030H
  002f7	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN7@convert_rg:
  002ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  00306	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0030d	0f 8d 21 02 00
	00		 jge	 $LN6@convert_rg

; 444  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  00313	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0031b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031f	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00328	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00331	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 445  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  0033a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00342	48 83 c0 10	 add	 rax, 16
  00346	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0034a	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00353	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  0035c	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 446  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  00365	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0036d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00371	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00375	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0037e	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00387	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 447  :             __m128i x3 = _mm_srli_si128(x2, 4);

  00390	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  00399	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0039e	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003a7	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003b0	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 448  :             x3 = _mm_shuffle_epi8(x3, xMask);

  003b9	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  003c2	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  003cc	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  003d5	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  003de	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 449  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  003e7	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  003f0	66 0f 3a 0f 84
	24 20 01 00 00
	08		 palignr xmm0, XMMWORD PTR x1$14[rsp], 8
  003fb	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00404	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  0040d	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 450  :             x2 = _mm_shuffle_epi8(x2, xMask);

  00416	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  0041f	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  00429	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00432	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0043b	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 451  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  00444	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0044d	66 0f 3a 0f 84
	24 00 01 00 00
	0c		 palignr xmm0, XMMWORD PTR x0$12[rsp], 12
  00458	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00461	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  0046a	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 452  :             x1 = _mm_shuffle_epi8(x1, xMask);

  00473	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0047c	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  00486	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  0048f	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00498	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 453  :             x0 = _mm_shuffle_epi8(x0, xMask);

  004a1	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  004aa	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  004b4	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004bd	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  004c6	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 454  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  004cf	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004d7	48 83 c0 30	 add	 rax, 48			; 00000030H
  004db	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  004e4	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 455  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  004e8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004f0	48 83 c0 20	 add	 rax, 32			; 00000020H
  004f4	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  004fd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 456  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  00501	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00509	48 83 c0 10	 add	 rax, 16
  0050d	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00516	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 457  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  0051a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00522	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0052b	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 458  :         }

  0052f	e9 92 fd ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 459  :         x_fin = width - crop_left - crop_right;

  00534	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  00538	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0053f	2b c8		 sub	 ecx, eax
  00541	8b c1		 mov	 eax, ecx
  00543	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  00547	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 460  :         for (; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  0054e	eb 38		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  00550	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00557	ff c0		 inc	 eax
  00559	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  00560	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00568	48 83 c0 04	 add	 rax, 4
  0056c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  00574	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0057c	48 83 c0 03	 add	 rax, 3
  00580	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN10@convert_rg:
  00588	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  0058f	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00596	7d 2b		 jge	 SHORT $LN9@convert_rg

; 461  :             *(int *)ptr_dst = *(int *)ptr_src;

  00598	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  005a0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR ptr_src$8[rsp]
  005a8	8b 09		 mov	 ecx, DWORD PTR [rcx]
  005aa	89 08		 mov	 DWORD PTR [rax], ecx

; 462  :             ptr_dst[3] = 0;

  005ac	b8 01 00 00 00	 mov	 eax, 1
  005b1	48 6b c0 03	 imul	 rax, rax, 3
  005b5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$9[rsp]
  005bd	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 463  :         }

  005c1	eb 8d		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 464  :     }

  005c3	e9 60 fc ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 465  : }

  005c8	48 8b cc	 mov	 rcx, rsp
  005cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005d2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005d7	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005df	48 33 cc	 xor	 rcx, rsp
  005e2	e8 00 00 00 00	 call	 __security_check_cookie
  005e7	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  005ee	5f		 pop	 rdi
  005ef	5e		 pop	 rsi
  005f0	c3		 ret	 0
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcLine$ = 120
dstLine$ = 128
MASK_RGB3_TO_RGB4$ = 160
xMask$ = 192
$T6 = 208
y$7 = 224
ptr_src$8 = 232
ptr_dst$9 = 240
x$10 = 248
x_fin$11 = 252
x0$12 = 256
$T13 = 272
x1$14 = 288
$T15 = 304
x2$16 = 320
$T17 = 336
x3$18 = 352
$T19 = 368
$T20 = 384
$T21 = 400
$T22 = 416
$T23 = 432
$T24 = 448
$T25 = 464
$T26 = 488
__$ArrayPad$ = 504
dst$ = 544
src$ = 552
width$ = 560
src_y_pitch_byte$ = 568
src_uv_pitch_byte$ = 576
dst_y_pitch_byte$ = 584
height$ = 592
dst_height$ = 600
thread_id$ = 608
thread_n$ = 616
crop$ = 624
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb32_simd

; 391  : static void __forceinline convert_rgb24_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR [rsp+544]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 392  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 393  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 394  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 395  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 396  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 60
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 397  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * y_range.start_src) + crop_left * 3;;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  00131	48 63 c9	 movsxd	 rcx, ecx
  00134	48 03 c1	 add	 rax, rcx
  00137	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 398  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014c	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00151	48 63 c9	 movsxd	 rcx, ecx
  00154	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00160	48 8b c1	 mov	 rax, rcx
  00163	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 399  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  0016b	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp], 0
  00173	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+1], 1
  0017b	c6 84 24 a2 00
	00 00 02	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+2], 2
  00183	c6 84 24 a3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+3], -1
  0018b	c6 84 24 a4 00
	00 00 03	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+4], 3
  00193	c6 84 24 a5 00
	00 00 04	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+5], 4
  0019b	c6 84 24 a6 00
	00 00 05	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+6], 5
  001a3	c6 84 24 a7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+7], -1
  001ab	c6 84 24 a8 00
	00 00 06	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+8], 6
  001b3	c6 84 24 a9 00
	00 00 07	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+9], 7
  001bb	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+10], 8
  001c3	c6 84 24 ab 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+11], -1
  001cb	c6 84 24 ac 00
	00 00 09	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+12], 9
  001d3	c6 84 24 ad 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+13], 10
  001db	c6 84 24 ae 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+14], 11
  001e3	c6 84 24 af 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+15], -1

; 400  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  001eb	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR MASK_RGB3_TO_RGB4$[rsp]
  001f4	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  001fd	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00206	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 401  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0020f	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  0021a	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0021c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  00223	ff c0		 inc	 eax
  00225	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  0022c	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00234	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00239	48 03 c8	 add	 rcx, rax
  0023c	48 8b c1	 mov	 rax, rcx
  0023f	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
  00244	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0024c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00254	48 03 c8	 add	 rcx, rax
  00257	48 8b c1	 mov	 rax, rcx
  0025a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN4@convert_rg:
  00262	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00266	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  0026d	0f 8d 49 03 00
	00		 jge	 $LN3@convert_rg

; 402  :         uint8_t *ptr_src = srcLine;

  00273	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  00278	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax

; 403  :         uint8_t *ptr_dst = dstLine;

  00280	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00288	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax

; 404  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00290	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0029b	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  0029f	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002a6	2b c8		 sub	 ecx, eax
  002a8	8b c1		 mov	 eax, ecx
  002aa	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  002ae	83 e8 10	 sub	 eax, 16
  002b1	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 405  :         for ( ; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  002b8	eb 39		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002ba	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  002c1	83 c0 10	 add	 eax, 16
  002c4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  002cb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  002d3	48 83 c0 40	 add	 rax, 64			; 00000040H
  002d7	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  002df	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  002e7	48 83 c0 30	 add	 rax, 48			; 00000030H
  002eb	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN7@convert_rg:
  002f3	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  002fa	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00301	0f 8d 21 02 00
	00		 jge	 $LN6@convert_rg

; 406  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  00307	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0030f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00313	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  0031c	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00325	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 407  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  0032e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00336	48 83 c0 10	 add	 rax, 16
  0033a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0033e	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00347	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  00350	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 408  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  00359	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00361	48 83 c0 20	 add	 rax, 32			; 00000020H
  00365	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00369	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  00372	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0037b	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 409  :             __m128i x3 = _mm_srli_si128(x2, 4);

  00384	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  0038d	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00392	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  0039b	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003a4	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 410  :             x3 = _mm_shuffle_epi8(x3, xMask);

  003ad	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  003b6	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  003c0	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  003c9	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  003d2	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 411  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  003db	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  003e4	66 0f 3a 0f 84
	24 20 01 00 00
	08		 palignr xmm0, XMMWORD PTR x1$14[rsp], 8
  003ef	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  003f8	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  00401	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 412  :             x2 = _mm_shuffle_epi8(x2, xMask);

  0040a	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  00413	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  0041d	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00426	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0042f	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 413  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  00438	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00441	66 0f 3a 0f 84
	24 00 01 00 00
	0c		 palignr xmm0, XMMWORD PTR x0$12[rsp], 12
  0044c	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00455	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  0045e	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 414  :             x1 = _mm_shuffle_epi8(x1, xMask);

  00467	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00470	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  0047a	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00483	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  0048c	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 415  :             x0 = _mm_shuffle_epi8(x0, xMask);

  00495	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0049e	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  004a8	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004b1	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  004ba	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 416  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  004c3	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004cb	48 83 c0 30	 add	 rax, 48			; 00000030H
  004cf	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  004d8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 417  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  004dc	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004e4	48 83 c0 20	 add	 rax, 32			; 00000020H
  004e8	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  004f1	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 418  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  004f5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004fd	48 83 c0 10	 add	 rax, 16
  00501	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0050a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 419  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  0050e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00516	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0051f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 420  :         }

  00523	e9 92 fd ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 421  :         x_fin = width - crop_left - crop_right;

  00528	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  0052c	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00533	2b c8		 sub	 ecx, eax
  00535	8b c1		 mov	 eax, ecx
  00537	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  0053b	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 422  :         for ( ; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  00542	eb 38		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  00544	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  0054b	ff c0		 inc	 eax
  0054d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  00554	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  00568	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00570	48 83 c0 03	 add	 rax, 3
  00574	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN10@convert_rg:
  0057c	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  00583	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0058a	7d 2b		 jge	 SHORT $LN9@convert_rg

; 423  :             *(int *)ptr_dst = *(int *)ptr_src;

  0058c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00594	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR ptr_src$8[rsp]
  0059c	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0059e	89 08		 mov	 DWORD PTR [rax], ecx

; 424  :             ptr_dst[3] = 0;

  005a0	b8 01 00 00 00	 mov	 eax, 1
  005a5	48 6b c0 03	 imul	 rax, rax, 3
  005a9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$9[rsp]
  005b1	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 425  :         }

  005b5	eb 8d		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 426  :     }

  005b7	e9 60 fc ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 427  : }

  005bc	48 8b cc	 mov	 rcx, rsp
  005bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005c6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005cb	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005d3	48 33 cc	 xor	 rcx, rsp
  005d6	e8 00 00 00 00	 call	 __security_check_cookie
  005db	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  005e2	5f		 pop	 rdi
  005e3	5e		 pop	 rsi
  005e4	c3		 ret	 0
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T6 = 104
srcLine$ = 120
dstYLine$ = 128
dstCLine$ = 136
y$7 = 144
i$8 = 148
p$9 = 152
pw$10 = 160
x0$11 = 192
x1$12 = 240
x3$13 = 272
x_fin$14 = 288
x$15 = 292
$T16 = 304
$T17 = 320
$T18 = 336
$T19 = 352
$T20 = 368
$T21 = 392
$T22 = 416
$T23 = 432
__$ArrayPad$ = 448
dst$ = 496
src$ = 504
width$ = 512
src_y_pitch_byte$ = 520
src_uv_pitch_byte$ = 528
dst_y_pitch_byte$ = 536
height$ = 544
dst_height$ = 552
thread_id$ = 560
thread_n$ = 568
crop$ = 576
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i_simd

; 233  : static void __forceinline convert_yuy2_to_nv12_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+496]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 234  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 235  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 236  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 237  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 238  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 30
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 239  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00131	48 03 c1	 add	 rax, rcx
  00134	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 240  :     uint8_t *dstYLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 00	 imul	 rax, rax, 0
  00142	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00149	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00159	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 241  :     uint8_t *dstCLine = (uint8_t *)dst[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 01	 imul	 rax, rax, 1
  00171	8b 4c 24 4c	 mov	 ecx, DWORD PTR y_range$[rsp+4]
  00175	d1 f9		 sar	 ecx, 1
  00177	8b 94 24 18 02
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017e	0f af d1	 imul	 edx, ecx
  00181	8b ca		 mov	 ecx, edx
  00183	48 63 c9	 movsxd	 rcx, ecx
  00186	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 242  :     for (int y = 0; y < y_range.len; y += 4) {

  0019d	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  001a8	eb 11		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001aa	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  001b1	83 c0 04	 add	 eax, 4
  001b4	89 84 24 90 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
$LN4@convert_yu:
  001bb	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001bf	39 84 24 90 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  001c6	0f 8d 1f 03 00
	00		 jge	 $LN3@convert_yu

; 243  :         for (int i = 0; i < 2; i++) {

  001cc	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$8[rsp], 0
  001d7	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001d9	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR i$8[rsp]
  001e0	ff c0		 inc	 eax
  001e2	89 84 24 94 00
	00 00		 mov	 DWORD PTR i$8[rsp], eax
$LN7@convert_yu:
  001e9	83 bc 24 94 00
	00 00 02	 cmp	 DWORD PTR i$8[rsp], 2
  001f1	0f 8d b3 02 00
	00		 jge	 $LN6@convert_yu

; 244  :             uint8_t *p = srcLine;

  001f7	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  001fc	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax

; 245  :             uint8_t *pw = p + (src_y_pitch_byte<<1);

  00204	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  0020b	d1 e0		 shl	 eax, 1
  0020d	48 98		 cdqe
  0020f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR p$9[rsp]
  00217	48 03 c8	 add	 rcx, rax
  0021a	48 8b c1	 mov	 rax, rcx
  0021d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$10[rsp], rax

; 246  :             __m128i x0, x1, x3;
; 247  :             const int x_fin = width - crop_right - crop_left;

  00225	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00229	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00230	2b c8		 sub	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00238	89 84 24 20 01
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 248  :             for (int x = 0; x < x_fin; x += 16, p += 32, pw += 32) {

  0023f	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0024a	eb 39		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0024c	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00253	83 c0 10	 add	 eax, 16
  00256	89 84 24 24 01
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0025d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  00265	48 83 c0 20	 add	 rax, 32			; 00000020H
  00269	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax
  00271	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  00279	48 83 c0 20	 add	 rax, 32			; 00000020H
  0027d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$10[rsp], rax
$LN10@convert_yu:
  00285	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0028c	39 84 24 24 01
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00293	0f 8d b8 01 00
	00		 jge	 $LN9@convert_yu

; 249  :                 //-----------    1+i行目   ---------------
; 250  :                 x0 = _mm_loadu_si128((const __m128i *)(p+ 0));

  00299	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  002a1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a5	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  002ae	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  002b7	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 251  :                 x1 = _mm_loadu_si128((const __m128i *)(p+16));

  002c0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  002c8	48 83 c0 10	 add	 rax, 16
  002cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002d0	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  002d9	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  002e2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 252  : 
; 253  :                 separate_low_up(x0, x1);

  002eb	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  002f3	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  002fb	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 254  :                 x3 = x1;

  00300	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  00309	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR x3$13[rsp], xmm0

; 255  : 
; 256  :                 _mm_store_si128((__m128i *)(dstYLine + x), x0);

  00312	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR x$15[rsp]
  0031a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  00322	48 03 c8	 add	 rcx, rax
  00325	48 8b c1	 mov	 rax, rcx
  00328	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00331	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 257  :                 //-----------1+i行目終了---------------
; 258  : 
; 259  :                 //-----------3+i行目---------------
; 260  :                 x0 = _mm_loadu_si128((const __m128i *)(pw+ 0));

  00335	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  0033d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00341	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  0034a	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00353	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 261  :                 x1 = _mm_loadu_si128((const __m128i *)(pw+16));

  0035c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  00364	48 83 c0 10	 add	 rax, 16
  00368	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0036c	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00375	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0037e	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 262  : 
; 263  :                 separate_low_up(x0, x1);

  00387	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  0038f	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  00397	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 264  : 
; 265  :                 _mm_store_si128((__m128i *)(dstYLine + (dst_y_pitch_byte<<1) + x), x0);

  0039c	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  003a3	d1 e0		 shl	 eax, 1
  003a5	48 98		 cdqe
  003a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  003af	48 03 c8	 add	 rcx, rax
  003b2	48 8b c1	 mov	 rax, rcx
  003b5	48 63 8c 24 24
	01 00 00	 movsxd	 rcx, DWORD PTR x$15[rsp]
  003bd	48 03 c1	 add	 rax, rcx
  003c0	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  003c9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 266  :                 //-----------3+i行目終了---------------
; 267  :                 x0 = yuv422_to_420_i_interpolate(x3, x1, i);

  003cd	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  003d6	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  003df	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$13[rsp]
  003e8	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003f1	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR i$8[rsp]
  003f9	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  00401	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00409	e8 00 00 00 00	 call	 ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ; yuv422_to_420_i_interpolate
  0040e	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00417	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00420	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 268  : 
; 269  :                 _mm_store_si128((__m128i *)(dstCLine + x), x0);

  00429	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR x$15[rsp]
  00431	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  00439	48 03 c8	 add	 rcx, rax
  0043c	48 8b c1	 mov	 rax, rcx
  0043f	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00448	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 270  :             }

  0044c	e9 fb fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 271  :             srcLine  += src_y_pitch_byte;

  00451	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00459	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  0045e	48 03 c8	 add	 rcx, rax
  00461	48 8b c1	 mov	 rax, rcx
  00464	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 272  :             dstYLine += dst_y_pitch_byte;

  00469	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00471	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  00479	48 03 c8	 add	 rcx, rax
  0047c	48 8b c1	 mov	 rax, rcx
  0047f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 273  :             dstCLine += dst_y_pitch_byte;

  00487	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0048f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  00497	48 03 c8	 add	 rcx, rax
  0049a	48 8b c1	 mov	 rax, rcx
  0049d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 274  :         }

  004a5	e9 2f fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 275  :         srcLine  += src_y_pitch_byte << 1;

  004aa	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  004b1	d1 e0		 shl	 eax, 1
  004b3	48 98		 cdqe
  004b5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  004ba	48 03 c8	 add	 rcx, rax
  004bd	48 8b c1	 mov	 rax, rcx
  004c0	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 276  :         dstYLine += dst_y_pitch_byte << 1;

  004c5	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  004cc	d1 e0		 shl	 eax, 1
  004ce	48 98		 cdqe
  004d0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  004d8	48 03 c8	 add	 rcx, rax
  004db	48 8b c1	 mov	 rax, rcx
  004de	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 277  :     }

  004e6	e9 bf fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 278  : }

  004eb	48 8b cc	 mov	 rcx, rsp
  004ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004f5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004fa	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00502	48 33 cc	 xor	 rcx, rsp
  00505	e8 00 00 00 00	 call	 __security_check_cookie
  0050a	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  00511	5f		 pop	 rdi
  00512	5e		 pop	 rsi
  00513	c3		 ret	 0
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x0$ = 16
x1$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
$T11 = 208
$T12 = 224
$T13 = 240
y_up$ = 272
y_down$ = 280
i$ = 288
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z PROC ; yuv422_to_420_i_interpolate

; 205  : static __forceinline __m128i yuv422_to_420_i_interpolate(__m128i y_up, __m128i y_down, int i) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]

; 206  :     __m128i x0, x1;
; 207  : #if USE_SSSE3
; 208  :     x0 = _mm_unpacklo_epi8(y_down, y_up);

  0002e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00036	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  0003e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00042	66 0f 60 01	 punpcklbw xmm0, XMMWORD PTR [rcx]
  00046	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004c	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00052	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 209  :     x1 = _mm_unpackhi_epi8(y_down, y_up);

  00058	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00060	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  00068	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006c	66 0f 68 01	 punpckhbw xmm0, XMMWORD PTR [rcx]
  00070	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00076	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0007c	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 210  :     x0 = _mm_maddubs_epi16(x0, xC_INTERLACE_WEIGHT(i));

  00082	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0008a	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000a5	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  000ab	66 0f 38 04 44
	24 50		 pmaddubsw xmm0, XMMWORD PTR $T3[rsp]
  000b2	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000b8	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000be	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 211  :     x1 = _mm_maddubs_epi16(x1, xC_INTERLACE_WEIGHT(i));

  000c4	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  000cc	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  000d7	48 03 c8	 add	 rcx, rax
  000da	48 8b c1	 mov	 rax, rcx
  000dd	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000e1	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000e7	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  000ed	66 0f 38 04 44
	24 70		 pmaddubsw xmm0, XMMWORD PTR $T5[rsp]
  000f4	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000fd	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00106	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 212  : #else
; 213  :     __m128i x2, x3, xC[2];
; 214  :     xC[0] = y_up;
; 215  :     xC[1] = y_down;
; 216  :     x0 = _mm_unpacklo_epi8(xC[i], _mm_setzero_si128());
; 217  :     x1 = _mm_unpackhi_epi8(xC[i], _mm_setzero_si128());
; 218  :     x0 = _mm_mullo_epi16(x0, _mm_set1_epi16(3));
; 219  :     x1 = _mm_mullo_epi16(x1, _mm_set1_epi16(3));
; 220  :     x2 = _mm_unpacklo_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 221  :     x3 = _mm_unpackhi_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 222  :     x0 = _mm_add_epi16(x0, x2);
; 223  :     x1 = _mm_add_epi16(x1, x3);
; 224  : #endif
; 225  :     x0 = _mm_add_epi16(x0, _mm_set1_epi16(2));

  0010c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  00114	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0011d	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00123	66 0f fd 84 24
	90 00 00 00	 paddw	 xmm0, XMMWORD PTR $T7[rsp]
  0012c	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00135	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  0013e	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 226  :     x1 = _mm_add_epi16(x1, _mm_set1_epi16(2));

  00144	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  0014c	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00155	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0015b	66 0f fd 84 24
	b0 00 00 00	 paddw	 xmm0, XMMWORD PTR $T9[rsp]
  00164	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0016d	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00176	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 227  :     x0 = _mm_srai_epi16(x0, 2);

  0017c	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00182	66 0f 71 e0 02	 psraw	 xmm0, 2
  00187	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00190	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00199	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 228  :     x1 = _mm_srai_epi16(x1, 2);

  0019f	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001a5	66 0f 71 e0 02	 psraw	 xmm0, 2
  001aa	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001b3	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001bc	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 229  :     x0 = _mm_packus_epi16(x0, x1);

  001c2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  001c8	66 0f 67 44 24
	20		 packuswb xmm0, XMMWORD PTR x1$[rsp]
  001ce	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  001d7	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  001e0	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 230  :     return x0;

  001e6	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]

; 231  : }

  001ec	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  001f3	5f		 pop	 rdi
  001f4	c3		 ret	 0
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ENDP ; yuv422_to_420_i_interpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x4$ = 0
x5$ = 16
xMaskLowByte$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
x0_return_lower$ = 224
x1_return_upper$ = 232
?separate_low_up@@YAXAEAT__m128i@@0@Z PROC		; separate_low_up

; 146  : static __forceinline void separate_low_up(__m128i& x0_return_lower, __m128i& x1_return_upper) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]

; 147  :     __m128i x4, x5;
; 148  :     const __m128i xMaskLowByte = _mm_srli_epi16(_mm_cmpeq_epi8(_mm_setzero_si128(), _mm_setzero_si128()), 8);

  00029	66 0f ef c0	 pxor	 xmm0, xmm0
  0002d	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00033	66 0f ef c0	 pxor	 xmm0, xmm0
  00037	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003d	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00043	66 0f 74 44 24
	40		 pcmpeqb xmm0, XMMWORD PTR $T2[rsp]
  00049	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  0004f	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00055	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0005a	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  00060	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00066	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR xMaskLowByte$[rsp], xmm0

; 149  :     x4 = _mm_srli_epi16(x0_return_lower, 8);

  0006c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  00074	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00078	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0007d	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00083	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00089	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 150  :     x5 = _mm_srli_epi16(x1_return_upper, 8);

  0008e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00096	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0009f	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000a8	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000b1	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 151  : 
; 152  :     x0_return_lower = _mm_and_si128(x0_return_lower, xMaskLowByte);

  000b7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000bf	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000c3	66 0f db 44 24
	20		 pand	 xmm0, XMMWORD PTR xMaskLowByte$[rsp]
  000c9	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000d2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000da	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000e3	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 153  :     x1_return_upper = _mm_and_si128(x1_return_upper, xMaskLowByte);

  000e7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  000ef	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000f3	66 0f db 44 24
	20		 pand	 xmm0, XMMWORD PTR xMaskLowByte$[rsp]
  000f9	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00102	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  0010a	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00113	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 154  : 
; 155  :     x0_return_lower = _mm_packus_epi16(x0_return_lower, x1_return_upper);

  00117	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  0011f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR x1_return_upper$[rsp]
  00127	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0012b	66 0f 67 01	 packuswb xmm0, XMMWORD PTR [rcx]
  0012f	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00138	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  00140	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00149	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 156  :     x1_return_upper = _mm_packus_epi16(x4, x5);

  0014d	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00152	66 0f 67 44 24
	10		 packuswb xmm0, XMMWORD PTR x5$[rsp]
  00158	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00161	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00169	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00172	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 157  : }

  00176	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0017d	5f		 pop	 rdi
  0017e	c3		 ret	 0
?separate_low_up@@YAXAEAT__m128i@@0@Z ENDP		; separate_low_up
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 16
$T2 = 32
$T3 = 48
$T4 = 64
$T5 = 80
$T6 = 96
$T7 = 112
a$ = 144
b$ = 152
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z PROC	; _mm_packus_epi32_simd

; 98   : static __forceinline __m128i _mm_packus_epi32_simd(__m128i a, __m128i b) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 99   : #if USE_SSE41
; 100  :     return _mm_packus_epi32(a, b);
; 101  : #else
; 102  :     alignas(64) static const uint32_t VAL[2][4] = {
; 103  :         { 0x00008000, 0x00008000, 0x00008000, 0x00008000 },
; 104  :         { 0x80008000, 0x80008000, 0x80008000, 0x80008000 }
; 105  :     };
; 106  : #define LOAD_32BIT_0x8000 _mm_load_si128((__m128i *)VAL[0])
; 107  : #define LOAD_16BIT_0x8000 _mm_load_si128((__m128i *)VAL[1])
; 108  :     a = _mm_sub_epi32(a, LOAD_32BIT_0x8000);

  00029	b8 10 00 00 00	 mov	 eax, 16
  0002e	48 6b c0 00	 imul	 rax, rax, 0
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00043	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00049	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00051	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00055	66 0f fa 44 24
	10		 psubd	 xmm0, XMMWORD PTR $T1[rsp]
  0005b	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00061	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00069	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0006f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 109  :     b = _mm_sub_epi32(b, LOAD_32BIT_0x8000);

  00073	b8 10 00 00 00	 mov	 eax, 16
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  00083	48 03 c8	 add	 rcx, rax
  00086	48 8b c1	 mov	 rax, rcx
  00089	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0008d	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00093	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	66 0f fa 44 24
	30		 psubd	 xmm0, XMMWORD PTR $T3[rsp]
  000a5	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000ab	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  000b3	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 110  :     a = _mm_packs_epi32(a, b);

  000bd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  000c5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  000cd	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d1	66 0f 6b 01	 packssdw xmm0, XMMWORD PTR [rcx]
  000d5	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000db	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  000e3	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  000e9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 111  :     return _mm_add_epi16(a, LOAD_16BIT_0x8000);

  000ed	b8 10 00 00 00	 mov	 eax, 16
  000f2	48 6b c0 01	 imul	 rax, rax, 1
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?VAL@?1??_mm_packus_epi32_simd@@YA?AT__m128i@@T2@0@Z@4QAY03$$CBIA
  000fd	48 03 c8	 add	 rcx, rax
  00100	48 8b c1	 mov	 rax, rcx
  00103	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00107	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0010d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00115	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00119	66 0f fd 44 24
	60		 paddw	 xmm0, XMMWORD PTR $T6[rsp]
  0011f	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00125	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T7[rsp]

; 112  : #undef LOAD_32BIT_0x8000
; 113  : #undef LOAD_16BIT_0x8000
; 114  : #endif
; 115  : }

  0012b	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00132	5f		 pop	 rdi
  00133	c3		 ret	 0
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ENDP	; _mm_packus_epi32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 16
$T2 = 32
$T3 = 48
a$ = 80
b$ = 88
mask$ = 96
?select_by_mask@@YA?AT__m128i@@T1@00@Z PROC		; select_by_mask

; 90   : static __forceinline __m128i select_by_mask(__m128i a, __m128i b, __m128i mask) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 91   : #if USE_SSE41
; 92   :     return _mm_blendv_epi8(a, b, mask);
; 93   : #else
; 94   :     return _mm_or_si128( _mm_andnot_si128(mask,a), _mm_and_si128(b,mask) );

  00028	48 8b 44 24 58	 mov	 rax, QWORD PTR b$[rsp]
  0002d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mask$[rsp]
  00032	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00036	66 0f db 01	 pand	 xmm0, XMMWORD PTR [rcx]
  0003a	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR mask$[rsp]
  00045	48 8b 4c 24 50	 mov	 rcx, QWORD PTR a$[rsp]
  0004a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0004e	66 0f df 01	 pandn	 xmm0, XMMWORD PTR [rcx]
  00052	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00058	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005e	66 0f eb 44 24
	20		 por	 xmm0, XMMWORD PTR $T2[rsp]
  00064	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  0006a	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]

; 95   : #endif
; 96   : }

  00070	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
?select_by_mask@@YA?AT__m128i@@T1@00@Z ENDP		; select_by_mask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
i$1 = 0
dst_fin$ = 8
dst_aligned_fin$ = 16
x0$ = 32
x1$ = 48
x2$ = 64
x3$ = 80
start_align_diff$ = 96
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
dst_tmp$ = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
dst$ = 288
src$ = 296
size$ = 304
?memcpy_sse@@YAXPEAEPEBEH@Z PROC			; memcpy_sse

; 44   : static void __forceinline memcpy_sse(uint8_t *dst, const uint8_t *src, int size) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]

; 45   :     if (size < 64) {

  0002e	83 bc 24 30 01
	00 00 40	 cmp	 DWORD PTR size$[rsp], 64 ; 00000040H
  00036	7d 44		 jge	 SHORT $LN8@memcpy_sse

; 46   :         for (int i = 0; i < size; i++)

  00038	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$1[rsp], 0
  0003f	eb 08		 jmp	 SHORT $LN4@memcpy_sse
$LN2@memcpy_sse:
  00041	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00044	ff c0		 inc	 eax
  00046	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@memcpy_sse:
  00049	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR size$[rsp]
  00050	39 04 24	 cmp	 DWORD PTR i$1[rsp], eax
  00053	7d 22		 jge	 SHORT $LN3@memcpy_sse

; 47   :             dst[i] = src[i];

  00055	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00059	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$1[rsp]
  0005d	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00065	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR src$[rsp]
  0006d	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00072	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00075	eb ca		 jmp	 SHORT $LN2@memcpy_sse
$LN3@memcpy_sse:

; 48   :         return;

  00077	e9 e3 02 00 00	 jmp	 $LN1@memcpy_sse
$LN8@memcpy_sse:

; 49   :     }
; 50   :     uint8_t *dst_fin = dst + size;

  0007c	48 63 84 24 30
	01 00 00	 movsxd	 rax, DWORD PTR size$[rsp]
  00084	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 89 44 24 08	 mov	 QWORD PTR dst_fin$[rsp], rax

; 51   :     uint8_t *dst_aligned_fin = (uint8_t *)(((size_t)(dst_fin + 15) & ~15) - 64);

  00097	48 8b 44 24 08	 mov	 rax, QWORD PTR dst_fin$[rsp]
  0009c	48 83 c0 0f	 add	 rax, 15
  000a0	48 83 e0 f0	 and	 rax, -16
  000a4	48 83 e8 40	 sub	 rax, 64			; 00000040H
  000a8	48 89 44 24 10	 mov	 QWORD PTR dst_aligned_fin$[rsp], rax

; 52   :     __m128 x0, x1, x2, x3;
; 53   :     const int start_align_diff = (int)((size_t)dst & 15);

  000ad	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000b5	48 83 e0 0f	 and	 rax, 15
  000b9	89 44 24 60	 mov	 DWORD PTR start_align_diff$[rsp], eax

; 54   :     if (start_align_diff) {

  000bd	83 7c 24 60 00	 cmp	 DWORD PTR start_align_diff$[rsp], 0
  000c2	74 6c		 je	 SHORT $LN9@memcpy_sse

; 55   :         x0 = _mm_loadu_ps((float*)src);

  000c4	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  000cc	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000cf	0f 29 44 24 70	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  000d4	0f 28 44 24 70	 movaps	 xmm0, XMMWORD PTR $T2[rsp]
  000d9	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 56   :         _mm_storeu_ps((float*)dst, x0);

  000de	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000e6	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  000eb	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 57   :         dst += 16 - start_align_diff;

  000ee	b8 10 00 00 00	 mov	 eax, 16
  000f3	2b 44 24 60	 sub	 eax, DWORD PTR start_align_diff$[rsp]
  000f7	48 98		 cdqe
  000f9	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00101	48 03 c8	 add	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR dst$[rsp], rax

; 58   :         src += 16 - start_align_diff;

  0010f	b8 10 00 00 00	 mov	 eax, 16
  00114	2b 44 24 60	 sub	 eax, DWORD PTR start_align_diff$[rsp]
  00118	48 98		 cdqe
  0011a	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00122	48 03 c8	 add	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN9@memcpy_sse:

; 59   :     }
; 60   :     for ( ; dst < dst_aligned_fin; dst += 64, src += 64) {

  00130	eb 28		 jmp	 SHORT $LN7@memcpy_sse
$LN5@memcpy_sse:
  00132	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0013a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0013e	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR dst$[rsp], rax
  00146	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0014e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00152	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN7@memcpy_sse:
  0015a	48 8b 44 24 10	 mov	 rax, QWORD PTR dst_aligned_fin$[rsp]
  0015f	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR dst$[rsp], rax
  00167	0f 83 dd 00 00
	00		 jae	 $LN6@memcpy_sse

; 61   :         x0 = _mm_loadu_ps((float*)(src +  0));

  0016d	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00175	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00178	0f 29 84 24 80
	00 00 00	 movaps	 XMMWORD PTR $T3[rsp], xmm0
  00180	0f 28 84 24 80
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T3[rsp]
  00188	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 62   :         x1 = _mm_loadu_ps((float*)(src + 16));

  0018d	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00195	48 83 c0 10	 add	 rax, 16
  00199	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0019c	0f 29 84 24 90
	00 00 00	 movaps	 XMMWORD PTR $T4[rsp], xmm0
  001a4	0f 28 84 24 90
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T4[rsp]
  001ac	0f 29 44 24 30	 movaps	 XMMWORD PTR x1$[rsp], xmm0

; 63   :         x2 = _mm_loadu_ps((float*)(src + 32));

  001b1	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001b9	48 83 c0 20	 add	 rax, 32			; 00000020H
  001bd	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001c0	0f 29 84 24 a0
	00 00 00	 movaps	 XMMWORD PTR $T5[rsp], xmm0
  001c8	0f 28 84 24 a0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T5[rsp]
  001d0	0f 29 44 24 40	 movaps	 XMMWORD PTR x2$[rsp], xmm0

; 64   :         x3 = _mm_loadu_ps((float*)(src + 48));

  001d5	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001dd	48 83 c0 30	 add	 rax, 48			; 00000030H
  001e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001e4	0f 29 84 24 b0
	00 00 00	 movaps	 XMMWORD PTR $T6[rsp], xmm0
  001ec	0f 28 84 24 b0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T6[rsp]
  001f4	0f 29 44 24 50	 movaps	 XMMWORD PTR x3$[rsp], xmm0

; 65   :         _mm_store_ps((float*)(dst +  0), x0);

  001f9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00201	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  00206	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 66   :         _mm_store_ps((float*)(dst + 16), x1);

  00209	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00211	48 83 c0 10	 add	 rax, 16
  00215	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR x1$[rsp]
  0021a	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 67   :         _mm_store_ps((float*)(dst + 32), x2);

  0021d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00225	48 83 c0 20	 add	 rax, 32			; 00000020H
  00229	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR x2$[rsp]
  0022e	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 68   :         _mm_store_ps((float*)(dst + 48), x3);

  00231	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00239	48 83 c0 30	 add	 rax, 48			; 00000030H
  0023d	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR x3$[rsp]
  00242	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 69   :     }

  00245	e9 e8 fe ff ff	 jmp	 $LN5@memcpy_sse
$LN6@memcpy_sse:

; 70   :     uint8_t *dst_tmp = dst_fin - 64;

  0024a	48 8b 44 24 08	 mov	 rax, QWORD PTR dst_fin$[rsp]
  0024f	48 83 e8 40	 sub	 rax, 64			; 00000040H
  00253	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR dst_tmp$[rsp], rax

; 71   :     src -= (dst - dst_tmp);

  0025b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  00263	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0026b	48 2b c8	 sub	 rcx, rax
  0026e	48 8b c1	 mov	 rax, rcx
  00271	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00279	48 2b c8	 sub	 rcx, rax
  0027c	48 8b c1	 mov	 rax, rcx
  0027f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax

; 72   :     x0 = _mm_loadu_ps((float*)(src +  0));

  00287	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0028f	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00292	0f 29 84 24 d0
	00 00 00	 movaps	 XMMWORD PTR $T7[rsp], xmm0
  0029a	0f 28 84 24 d0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T7[rsp]
  002a2	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 73   :     x1 = _mm_loadu_ps((float*)(src + 16));

  002a7	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002af	48 83 c0 10	 add	 rax, 16
  002b3	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002b6	0f 29 84 24 e0
	00 00 00	 movaps	 XMMWORD PTR $T8[rsp], xmm0
  002be	0f 28 84 24 e0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T8[rsp]
  002c6	0f 29 44 24 30	 movaps	 XMMWORD PTR x1$[rsp], xmm0

; 74   :     x2 = _mm_loadu_ps((float*)(src + 32));

  002cb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002d3	48 83 c0 20	 add	 rax, 32			; 00000020H
  002d7	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002da	0f 29 84 24 f0
	00 00 00	 movaps	 XMMWORD PTR $T9[rsp], xmm0
  002e2	0f 28 84 24 f0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T9[rsp]
  002ea	0f 29 44 24 40	 movaps	 XMMWORD PTR x2$[rsp], xmm0

; 75   :     x3 = _mm_loadu_ps((float*)(src + 48));

  002ef	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002f7	48 83 c0 30	 add	 rax, 48			; 00000030H
  002fb	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002fe	0f 29 84 24 00
	01 00 00	 movaps	 XMMWORD PTR $T10[rsp], xmm0
  00306	0f 28 84 24 00
	01 00 00	 movaps	 xmm0, XMMWORD PTR $T10[rsp]
  0030e	0f 29 44 24 50	 movaps	 XMMWORD PTR x3$[rsp], xmm0

; 76   :     _mm_storeu_ps((float*)(dst_tmp +  0), x0);

  00313	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0031b	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  00320	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 77   :     _mm_storeu_ps((float*)(dst_tmp + 16), x1);

  00323	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0032b	48 83 c0 10	 add	 rax, 16
  0032f	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR x1$[rsp]
  00334	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 78   :     _mm_storeu_ps((float*)(dst_tmp + 32), x2);

  00337	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0033f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00343	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR x2$[rsp]
  00348	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 79   :     _mm_storeu_ps((float*)(dst_tmp + 48), x3);

  0034b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  00353	48 83 c0 30	 add	 rax, 48			; 00000030H
  00357	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR x3$[rsp]
  0035c	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
$LN1@memcpy_sse:

; 80   : }

  0035f	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00366	5f		 pop	 rdi
  00367	c3		 ret	 0
?memcpy_sse@@YAXPEAEPEBEH@Z ENDP			; memcpy_sse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
h$ = 32
y_range$ = 56
y0$ = 84
y1$ = 88
__$ArrayPad$ = 104
$T4 = 144
y_start$ = 152
y_end$ = 160
thread_id$ = 168
thread_n$ = 176
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1e 00 00 00	 mov	 ecx, 30
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c4	 xor	 rax, rsp
  0003a	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 376  :     const int h = y_end - y_start;

  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_start$[rsp]
  00046	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y_end$[rsp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00055	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00059	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR thread_id$[rsp]
  00061	99		 cdq
  00062	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  00069	83 c0 03	 add	 eax, 3
  0006c	83 e0 fc	 and	 eax, -4
  0006f	89 44 24 54	 mov	 DWORD PTR y0$[rsp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  00073	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	8b 4c 24 20	 mov	 ecx, DWORD PTR h$[rsp]
  00080	0f af c8	 imul	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  0008d	83 c0 03	 add	 eax, 3
  00090	83 e0 fc	 and	 eax, -4
  00093	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax

; 380  :     if (y1 > h) {

  00097	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0009b	39 44 24 58	 cmp	 DWORD PTR y1$[rsp], eax
  0009f	7e 08		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  000a1	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  000a5	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  000a9	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000ad	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y_start$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR y_range$[rsp], eax

; 384  :     y_range.start_dst = y0;

  000bc	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c0	89 44 24 3c	 mov	 DWORD PTR y_range$[rsp+4], eax

; 385  :     y_range.len = y1 - y0;

  000c4	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c8	8b 4c 24 58	 mov	 ecx, DWORD PTR y1$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR y_range$[rsp+8], eax

; 386  :     return y_range;

  000d4	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  000d9	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 0c 00 00 00	 mov	 ecx, 12
  000e9	f3 a4		 rep movsb
  000eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 387  : }

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8b cc	 mov	 rcx, rsp
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b c7	 mov	 rax, rdi
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010d	48 33 cc	 xor	 rcx, rsp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00119	5f		 pop	 rdi
  0011a	5e		 pop	 rsi
  0011b	c3		 ret	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
