; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG116741 DB	'h264', 00H
	ORG $+3
$SG116742 DB	'hevc', 00H
	ORG $+3
$SG116743 DB	'mpeg2', 00H
	ORG $+2
$SG116744 DB	'vc-1', 00H
	ORG $+3
$SG116745 DB	'vp8', 00H
$SG116746 DB	'raw', 00H
$SG116748 DB	'CBR', 00H
$SG116749 DB	'VBR', 00H
$SG116750 DB	'CQP', 00H
$SG116751 DB	'AVBR', 00H
	ORG $+3
$SG116752 DB	'LA', 00H
	ORG $+1
$SG116753 DB	'LA-EXT', 00H
	ORG $+1
$SG116754 DB	'LA-HRD', 00H
	ORG $+1
$SG116755 DB	'LA-ICQ', 00H
	ORG $+1
$SG116756 DB	'ICQ', 00H
$SG116757 DB	'QVBR', 00H
	ORG $+3
$SG116758 DB	'VCM', 00H
$SG116760 DB	'auto', 00H
	ORG $+3
?list_avc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116760	; list_avc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116761
	DD	042H
	ORG $+4
	DQ	FLAT:$SG116762
	DD	04dH
	ORG $+4
	DQ	FLAT:$SG116763
	DD	064H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116761 DB	'Baseline', 00H
	ORG $+3
$SG116762 DB	'Main', 00H
	ORG $+3
$SG116763 DB	'High', 00H
	ORG $+7
?list_hevc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116765	; list_hevc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116766
	DD	01H
	ORG $+4
	DQ	FLAT:$SG116767
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116765 DB	'auto', 00H
	ORG $+3
$SG116766 DB	'main', 00H
	ORG $+3
$SG116767 DB	'main10', 00H
	ORG $+1
$SG116769 DB	'main', 00H
	ORG $+3
$SG116770 DB	'high', 00H
	ORG $+3
$SG116772 DB	'auto', 00H
	ORG $+3
?list_mpeg2_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116772	; list_mpeg2_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116773
	DD	050H
	ORG $+4
	DQ	FLAT:$SG116774
	DD	040H
	ORG $+4
	DQ	FLAT:$SG116775
	DD	010H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116773 DB	'Simple', 00H
	ORG $+1
$SG116774 DB	'Main', 00H
	ORG $+3
$SG116775 DB	'High', 00H
	ORG $+3
$SG116777 DB	'auto', 00H
	ORG $+3
?list_vc1_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116777	; list_vc1_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116778
	DD	01H
	ORG $+4
	DQ	FLAT:$SG116779
	DD	05H
	ORG $+4
	DQ	FLAT:$SG116780
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116778 DB	'Simple', 00H
	ORG $+1
$SG116779 DB	'Main', 00H
	ORG $+3
$SG116780 DB	'Advanced', 00H
	ORG $+7
?list_vp8_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116782	; list_vp8_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116783
	DD	01H
	ORG $+4
	DQ	FLAT:$SG116784
	DD	02H
	ORG $+4
	DQ	FLAT:$SG116785
	DD	03H
	ORG $+4
	DQ	FLAT:$SG116786
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116782 DB	'auto', 00H
	ORG $+3
$SG116783 DB	'0', 00H
	ORG $+2
$SG116784 DB	'1', 00H
	ORG $+2
$SG116785 DB	'2', 00H
	ORG $+2
$SG116786 DB	'3', 00H
	ORG $+2
$SG116788 DB	'auto', 00H
	ORG $+3
?list_vp9_profile@@3QBUCX_DESC@@B DQ FLAT:$SG116788	; list_vp9_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116789
	DD	01H
	ORG $+4
	DQ	FLAT:$SG116790
	DD	02H
	ORG $+4
	DQ	FLAT:$SG116791
	DD	03H
	ORG $+4
	DQ	FLAT:$SG116792
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116789 DB	'0', 00H
	ORG $+2
$SG116790 DB	'1', 00H
	ORG $+2
$SG116791 DB	'2', 00H
	ORG $+2
$SG116792 DB	'3', 00H
	ORG $+2
$SG116794 DB	'8', 00H
	ORG $+2
$SG116795 DB	'10', 00H
	ORG $+1
$SG116797 DB	'progressive', 00H
$SG116803 DB	'it', 00H
	ORG $+1
$SG116798 DB	'interlaced(tff)', 00H
$SG116799 DB	'interlaced(bff)', 00H
$SG116801 DB	'none', 00H
	ORG $+3
$SG116802 DB	'normal', 00H
	ORG $+1
$SG116804 DB	'bob', 00H
$SG116806 DB	'32', 00H
	ORG $+1
$SG116807 DB	'2332', 00H
	ORG $+3
$SG116808 DB	'repeat', 00H
	ORG $+1
$SG116809 DB	'41', 00H
	ORG $+1
$SG116811 DB	'auto', 00H
	ORG $+7
?list_avc_level@@3QBUCX_DESC@@B DQ FLAT:$SG116811	; list_avc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116812
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG116813
	DD	09H
	ORG $+4
	DQ	FLAT:$SG116814
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG116815
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG116816
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG116817
	DD	014H
	ORG $+4
	DQ	FLAT:$SG116818
	DD	015H
	ORG $+4
	DQ	FLAT:$SG116819
	DD	016H
	ORG $+4
	DQ	FLAT:$SG116820
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG116821
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG116822
	DD	020H
	ORG $+4
	DQ	FLAT:$SG116823
	DD	028H
	ORG $+4
	DQ	FLAT:$SG116824
	DD	029H
	ORG $+4
	DQ	FLAT:$SG116825
	DD	02aH
	ORG $+4
	DQ	FLAT:$SG116826
	DD	032H
	ORG $+4
	DQ	FLAT:$SG116827
	DD	033H
	ORG $+4
	DQ	FLAT:$SG116828
	DD	034H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116812 DB	'1', 00H
	ORG $+2
$SG116813 DB	'1b', 00H
	ORG $+1
$SG116814 DB	'1.1', 00H
$SG116815 DB	'1.2', 00H
$SG116816 DB	'1.3', 00H
$SG116817 DB	'2', 00H
	ORG $+2
$SG116818 DB	'2.1', 00H
$SG116819 DB	'2.2', 00H
$SG116820 DB	'3', 00H
	ORG $+2
$SG116821 DB	'3.1', 00H
$SG116822 DB	'3.2', 00H
$SG116823 DB	'4', 00H
	ORG $+2
$SG116824 DB	'4.1', 00H
$SG116825 DB	'4.2', 00H
$SG116826 DB	'5', 00H
	ORG $+2
$SG116827 DB	'5.1', 00H
$SG116828 DB	'5.2', 00H
$SG116830 DB	'auto', 00H
	ORG $+7
?list_hevc_level@@3QBUCX_DESC@@B DQ FLAT:$SG116830	; list_hevc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116831
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG116832
	DD	014H
	ORG $+4
	DQ	FLAT:$SG116833
	DD	015H
	ORG $+4
	DQ	FLAT:$SG116834
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG116835
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG116836
	DD	028H
	ORG $+4
	DQ	FLAT:$SG116837
	DD	029H
	ORG $+4
	DQ	FLAT:$SG116838
	DD	032H
	ORG $+4
	DQ	FLAT:$SG116839
	DD	033H
	ORG $+4
	DQ	FLAT:$SG116840
	DD	034H
	ORG $+4
	DQ	FLAT:$SG116841
	DD	03cH
	ORG $+4
	DQ	FLAT:$SG116842
	DD	03dH
	ORG $+4
	DQ	FLAT:$SG116843
	DD	03eH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116831 DB	'1', 00H
	ORG $+2
$SG116832 DB	'2', 00H
	ORG $+2
$SG116833 DB	'2.1', 00H
$SG116834 DB	'3', 00H
	ORG $+2
$SG116835 DB	'3.1', 00H
$SG116836 DB	'4', 00H
	ORG $+2
$SG116837 DB	'4.1', 00H
$SG116838 DB	'5', 00H
	ORG $+2
$SG116839 DB	'5.1', 00H
$SG116840 DB	'5.2', 00H
$SG116841 DB	'6', 00H
	ORG $+2
$SG116842 DB	'6.1', 00H
$SG116843 DB	'6.2', 00H
$SG116845 DB	'auto', 00H
	ORG $+7
?list_mpeg2_level@@3QBUCX_DESC@@B DQ FLAT:$SG116845	; list_mpeg2_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116846
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG116847
	DD	08H
	ORG $+4
	DQ	FLAT:$SG116848
	DD	04H
	ORG $+4
	DQ	FLAT:$SG116849
	DD	06H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116846 DB	'low', 00H
$SG116847 DB	'main', 00H
	ORG $+3
$SG116848 DB	'high', 00H
	ORG $+3
$SG116852 DB	'low', 00H
$SG116849 DB	'high1440', 00H
	ORG $+3
$SG116851 DB	'auto', 00H
	ORG $+7
?list_vc1_level@@3QBUCX_DESC@@B DQ FLAT:$SG116851	; list_vc1_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG116852
	DD	01H
	ORG $+4
	DQ	FLAT:$SG116853
	DD	03H
	ORG $+4
	DQ	FLAT:$SG116854
	DD	05H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116853 DB	'median', 00H
	ORG $+1
$SG116854 DB	'high', 00H
	ORG $+3
$SG116856 DB	'auto', 00H
	ORG $+3
$SG116857 DB	'0', 00H
	ORG $+2
$SG116858 DB	'1', 00H
	ORG $+2
$SG116859 DB	'2', 00H
	ORG $+2
$SG116860 DB	'3', 00H
	ORG $+2
$SG116861 DB	'4', 00H
	ORG $+2
$SG116868 DB	'off', 00H
?list_vp8_level@@3QBUCX_DESC@@B DQ FLAT:$SG116863	; list_vp8_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116863 DB	'auto', 00H
	ORG $+3
?list_vp9_level@@3QBUCX_DESC@@B DQ FLAT:$SG116865	; list_vp9_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG116865 DB	'auto', 00H
	ORG $+3
$SG116867 DB	'Auto', 00H
	ORG $+3
$SG116869 DB	'for I frames', 00H
	ORG $+3
$SG116870 DB	'for I,P frames', 00H
	ORG $+1
$SG116871 DB	'for All frames', 00H
	ORG $+1
$SG116873 DB	'auto', 00H
	ORG $+3
$SG116874 DB	'off', 00H
$SG116875 DB	'i', 00H
	ORG $+2
$SG116876 DB	'ip', 00H
	ORG $+1
$SG116877 DB	'all', 00H
$SG116878 DB	'ipb', 00H
$SG116879 DB	'ib', 00H
	ORG $+1
$SG116880 DB	'p', 00H
	ORG $+2
$SG116881 DB	'pb', 00H
	ORG $+1
$SG116882 DB	'b', 00H
	ORG $+2
$SG116884 DB	'auto', 00H
	ORG $+3
$SG116885 DB	'slow', 00H
	ORG $+3
$SG116886 DB	'medium', 00H
	ORG $+1
$SG116887 DB	'fast', 00H
	ORG $+3
$SG116890 DB	'0', 00H
	ORG $+2
$SG116889 DB	'default', 00H
$SG116891 DB	'1', 00H
	ORG $+2
$SG116892 DB	'2', 00H
	ORG $+2
$SG116893 DB	'3', 00H
	ORG $+2
$SG116894 DB	'4', 00H
	ORG $+2
$SG116896 DB	'low', 00H
$SG116897 DB	'normal', 00H
	ORG $+1
$SG116898 DB	'high', 00H
	ORG $+3
$SG116910 DB	'none', 00H
	ORG $+3
$SG116911 DB	'copy', 00H
	ORG $+3
$SG116912 DB	'aac', 00H
$SG116913 DB	'libmp3lame', 00H
	ORG $+1
$SG116918 DB	'ac3', 00H
$SG116914 DB	'libtwolame', 00H
	ORG $+1
$SG116949 DB	'tff', 00H
$SG116915 DB	'libvorbis', 00H
	ORG $+2
$SG116950 DB	'bff', 00H
$SG116916 DB	'pcm_s16le', 00H
	ORG $+2
$SG116961 DB	'higher', 00H
	ORG $+1
$SG116975 DB	'8x8', 00H
$SG116917 DB	'libopus', 00H
$SG116948 DB	'none', 00H
	ORG $+3
$SG116952 DB	' 1 - best quality', 00H
	ORG $+2
$SG116965 DB	'faster', 00H
	ORG $+1
$SG116976 DB	'4x4', 00H
$SG116953 DB	' 2 - higher', 00H
$SG116979 DB	'16', 00H
	ORG $+1
$SG116954 DB	' 3 - high quality', 00H
	ORG $+2
$SG116980 DB	'32', 00H
	ORG $+1
$SG116955 DB	' 4 - balanced', 00H
	ORG $+2
$SG116956 DB	' 5 - fast', 00H
	ORG $+2
$SG116981 DB	'64', 00H
	ORG $+1
$SG116957 DB	' 6 - faster', 00H
$SG116989 DB	'all', 00H
$SG116958 DB	' 7 - fastest', 00H
	ORG $+3
$SG116960 DB	'best', 00H
	ORG $+3
$SG116962 DB	'high', 00H
	ORG $+3
$SG116963 DB	'balanced', 00H
	ORG $+3
$SG116964 DB	'fast', 00H
	ORG $+3
$SG116971 DB	'Q-pel', 00H
	ORG $+2
$SG116988 DB	'chroma', 00H
	ORG $+1
$SG116993 DB	'box', 00H
$SG116966 DB	'fastest', 00H
$SG116968 DB	'Auto', 00H
	ORG $+3
$SG116969 DB	'full-pel', 00H
	ORG $+3
$SG116974 DB	'16x16', 00H
	ORG $+2
$SG116995 DB	'off', 00H
$SG116970 DB	'half-pel', 00H
	ORG $+3
$SG116973 DB	'Auto', 00H
	ORG $+3
$SG116978 DB	'auto', 00H
	ORG $+3
$SG116985 DB	'auto', 00H
	ORG $+3
$SG116986 DB	'none', 00H
	ORG $+3
$SG116987 DB	'luma', 00H
	ORG $+3
$SG116991 DB	'none', 00H
	ORG $+3
$SG116996 DB	'x2', 00H
	ORG $+1
$SG116992 DB	'upscale', 00H
$SG116997 DB	'x2.5', 00H
	ORG $+3
$SG116999 DB	'simple', 00H
	ORG $+1
$SG117000 DB	'complex', 00H
$SG117002 DB	'0', 00H
	ORG $+2
$SG117003 DB	'90', 00H
	ORG $+1
$SG117004 DB	'180', 00H
$SG117005 DB	'270', 00H
$SG117007 DB	'n', 00H
	ORG $+2
$SG117008 DB	'h', 00H
	ORG $+2
$SG117009 DB	'v', 00H
	ORG $+2
$SG117011 DB	'auto', 00H
	ORG $+3
$SG117012 DB	'simple', 00H
	ORG $+1
$SG117013 DB	'fine', 00H
	ORG $+3
$SG117015 DB	'auto', 00H
	ORG $+3
$SG117016 DB	'none', 00H
	ORG $+3
$SG117017 DB	'sse2', 00H
	ORG $+3
$SG117018 DB	'sse3', 00H
	ORG $+3
$SG117019 DB	'ssse3', 00H
	ORG $+2
$SG117020 DB	'sse41', 00H
	ORG $+2
$SG117021 DB	'avx', 00H
$SG117022 DB	'avx2', 00H
	ORG $+3
$SG117414 DB	'%s', 00H
	ORG $+1
$SG126494 DB	'%s', 00H
	ORG $+1
$SG117628 DB	'QSVAllocatorSys::FrameLock Failed to Lock frmame mid 0x%'
	DB	'x: %s', 0aH, 00H
	ORG $+1
$SG117630 DB	'QSVAllocatorSys::FrameLock Invalid mem handle', 0aH, 00H
	ORG $+1
$SG117643 DB	'QSVAllocatorSys::FrameLock success mid 0x%x', 0aH, 00H
	ORG $+3
$SG117652 DB	'QSVAllocatorSys::FrameUnlock failed to unlock frame mid '
	DB	'0x%x: %s', 0aH, 00H
	ORG $+2
$SG110633 DB	'yuv422', 00H
	ORG $+1
$SG110661 DB	'rgb', 00H
$SG117654 DB	'QSVAllocatorSys::FrameUnlock success mid 0x%x', 0aH, 00H
	ORG $+1
$SG117948 DB	'QSVAllocatorSys::AllocImpl allocating %d frames...', 0aH
	DB	00H
$SG110630 DB	'nv12', 00H
	ORG $+7
$SG117950 DB	'QSVAllocatorSys::AllocImpl failed to allocate frame #%d,'
	DB	' size %d: %s', 0aH, 00H
	ORG $+2
$SG117958 DB	'QSVAllocatorSys::AllocImpl Success.', 0aH, 00H
	ORG $+3
$SG117953 DB	'QSVAllocatorSys::AllocImpl failed to unlock frame mid 0x'
	DB	'%x: %s', 0aH, 00H
$SG117956 DB	'QSVAllocatorSys::AllocImpl failed to unlock frame mid 0x'
	DB	'%x: %s', 0aH, 00H
$SG117976 DB	'QSVAllocatorSys::ReleaseResponse Success.', 0aH, 00H
	ORG $+1
$SG110663 DB	'gbr', 00H
$SG126493 DB	'invalid argument', 00H
	ORG $+7
$SG126498 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG126495 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG110629 DB	'Invalid', 00H
$SG126496 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG126497 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG126543 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG110631 DB	'yv12', 00H
	ORG $+3
$SG110632 DB	'yuy2', 00H
	ORG $+3
$SG110634 DB	'nv16', 00H
	ORG $+3
$SG110635 DB	'yuv444', 00H
	ORG $+1
$SG110636 DB	'yv12(9bit)', 00H
	ORG $+1
$SG110666 DB	'y8', 00H
	ORG $+1
$SG110637 DB	'yv12(10bit)', 00H
$SG111611 DB	'VP8', 00H
$SG110638 DB	'yv12(12bit)', 00H
$SG111613 DB	'VP9', 00H
$SG110639 DB	'yv12(14bit)', 00H
$SG112224 DB	'fcc', 00H
$SG110640 DB	'yv12(16bit)', 00H
$SG110641 DB	'p010', 00H
	ORG $+3
$SG110655 DB	'rgb24r', 00H
	ORG $+1
$SG112225 DB	'GBR', 00H
$SG110642 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG110643 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG110644 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG110645 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG110646 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG110647 DB	'p210', 00H
	ORG $+3
$SG110648 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG110649 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG110650 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG110651 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG110652 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG110653 DB	'yuva444', 00H
$SG110654 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG110656 DB	'rgb32r', 00H
	ORG $+1
$SG110657 DB	'rgb24', 00H
	ORG $+2
$SG110658 DB	'rgb32', 00H
	ORG $+2
$SG110659 DB	'bgr24', 00H
	ORG $+2
$SG110660 DB	'bgr32', 00H
	ORG $+2
$SG110662 DB	'rgba', 00H
	ORG $+3
$SG110664 DB	'gbra', 00H
	ORG $+3
$SG110665 DB	'yc48', 00H
	ORG $+3
$SG110667 DB	'yc16', 00H
	ORG $+3
$SG111599 DB	'H.264/AVC', 00H
	ORG $+2
$SG112376 DB	'bt470m', 00H
	ORG $+1
$SG112538 DB	'pal', 00H
$SG111601 DB	'H.265/HEVC', 00H
	ORG $+1
$SG111603 DB	'MPEG2', 00H
	ORG $+2
$SG111605 DB	'MPEG1', 00H
	ORG $+2
$SG111607 DB	'VC-1', 00H
	ORG $+3
$SG111609 DB	'MPEG4', 00H
	ORG $+2
$SG112379 DB	'linear', 00H
	ORG $+1
$SG112540 DB	'mac', 00H
$SG111615 DB	'unknown', 00H
$SG111722 DB	'unknown', 00H
?list_colormatrix@@3QBUCX_DESC@@B DQ FLAT:$SG112217	; list_colormatrix
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112218
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112219
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112220
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112221
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112222
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112223
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112224
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112225
	DD	00H
	ORG $+4
	DQ	FLAT:$SG112226
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112227
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112228
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112229
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG112230
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG112231
	DD	0fH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112217 DB	'undef', 00H
	ORG $+2
$SG112218 DB	'auto', 00H
	ORG $+3
$SG112219 DB	'bt709', 00H
	ORG $+2
$SG112220 DB	'smpte170m', 00H
	ORG $+2
$SG112380 DB	'log100', 00H
	ORG $+1
$SG112542 DB	'0', 00H
	ORG $+2
$SG112221 DB	'bt470bg', 00H
$SG112222 DB	'smpte240m', 00H
	ORG $+2
$SG112223 DB	'YCgCo', 00H
	ORG $+2
$SG112381 DB	'log316', 00H
	ORG $+1
$SG112543 DB	'1', 00H
	ORG $+2
$SG112226 DB	'bt2020nc', 00H
	ORG $+3
$SG112230 DB	'ictco', 00H
	ORG $+2
$SG112525 DB	'bt470m', 00H
	ORG $+1
$SG112544 DB	'2', 00H
	ORG $+2
$SG112227 DB	'bt2020c', 00H
$SG112228 DB	'derived-ncl', 00H
$SG112545 DB	'3', 00H
	ORG $+2
$SG112229 DB	'derived-cl', 00H
	ORG $+1
$SG112546 DB	'4', 00H
	ORG $+2
$SG112231 DB	'2100-lms', 00H
	ORG $+7
?list_transfer@@3QBUCX_DESC@@B DQ FLAT:$SG112372	; list_transfer
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112373
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112374
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112375
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112376
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112377
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112378
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112379
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112380
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112381
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112382
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG112383
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112384
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG112385
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG112386
	DD	0fH
	ORG $+4
	DQ	FLAT:$SG112387
	DD	010H
	ORG $+4
	DQ	FLAT:$SG112388
	DD	011H
	ORG $+4
	DQ	FLAT:$SG112389
	DD	012H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112372 DB	'undef', 00H
	ORG $+2
$SG112373 DB	'auto', 00H
	ORG $+3
$SG112374 DB	'bt709', 00H
	ORG $+2
$SG112375 DB	'smpte170m', 00H
	ORG $+2
$SG112529 DB	'bt2020', 00H
	ORG $+1
$SG112547 DB	'5', 00H
	ORG $+2
$SG112377 DB	'bt470bg', 00H
$SG112378 DB	'smpte240m', 00H
	ORG $+2
$SG112551 DB	'tv', 00H
	ORG $+1
$SG112382 DB	'iec61966-2-4', 00H
	ORG $+3
$SG112383 DB	'bt1361e', 00H
$SG112384 DB	'iec61966-2-1', 00H
	ORG $+3
$SG112385 DB	'bt2020-10', 00H
	ORG $+2
$SG112552 DB	'pc', 00H
	ORG $+1
$SG112386 DB	'bt2020-12', 00H
	ORG $+2
$SG113641 DB	'cfr', 00H
$SG112387 DB	'smpte2084', 00H
	ORG $+2
$SG113642 DB	'vfr', 00H
$SG112388 DB	'smpte428', 00H
	ORG $+3
$SG112521 DB	'undef', 00H
	ORG $+2
$SG113645 DB	'swr', 00H
$SG112389 DB	'arib-srd-b67', 00H
	ORG $+3
$SG112522 DB	'auto', 00H
	ORG $+3
?list_colorprim@@3QBUCX_DESC@@B DQ FLAT:$SG112521	; list_colorprim
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112522
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112523
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112524
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112525
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112526
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112527
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112528
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112529
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112530
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112531
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG112532
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112533
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112523 DB	'bt709', 00H
	ORG $+2
$SG112524 DB	'smpte170m', 00H
	ORG $+6
$SG112526 DB	'bt470bg', 00H
$SG112527 DB	'smpte240m', 00H
	ORG $+2
$SG112528 DB	'film', 00H
	ORG $+3
$SG112530 DB	'st428', 00H
	ORG $+6
$SG112531 DB	'st431-2', 00H
$SG112532 DB	'st432-1', 00H
$SG112533 DB	'ebu3213-e', 00H
	ORG $+6
?list_videoformat@@3QBUCX_DESC@@B DQ FLAT:$SG112535	; list_videoformat
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112536
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112537
	DD	00H
	ORG $+4
	DQ	FLAT:$SG112538
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112539
	DD	03H
	ORG $+4
	DQ	FLAT:$SG112540
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112535 DB	'undef', 00H
	ORG $+2
$SG112536 DB	'ntsc', 00H
	ORG $+3
$SG112537 DB	'component', 00H
	ORG $+2
$SG112539 DB	'secam', 00H
	ORG $+6
$SG112549 DB	'limited', 00H
$SG112550 DB	'full', 00H
	ORG $+3
?list_empty@@3QBUCX_DESC@@B DQ 0000000000000000H	; list_empty
	DD	00H
	ORG $+4
$SG113634 DB	'trace', 00H
	ORG $+2
$SG113635 DB	'debug', 00H
	ORG $+2
$SG113636 DB	'more', 00H
	ORG $+3
$SG113637 DB	'info', 00H
	ORG $+3
$SG113638 DB	'warn', 00H
	ORG $+3
$SG113639 DB	'error', 00H
	ORG $+2
$SG113643 DB	'forcecfr', 00H
	ORG $+3
$SG113646 DB	'soxr', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?_Incref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Incref
PUBLIC	?_Decref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decref
PUBLIC	?_Decwref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decwref
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get
PUBLIC	??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
PUBLIC	?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ	; std::_Ptr_base<RGYLog>::_Decref
PUBLIC	?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<RGYLog>::_Swap
PUBLIC	??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
PUBLIC	??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
PUBLIC	??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<RGYLog>::operator=
PUBLIC	?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<RGYLog>::swap
PUBLIC	??0QSVBufferAllocatorSys@@QEAA@XZ		; QSVBufferAllocatorSys::QSVBufferAllocatorSys
PUBLIC	??1QSVBufferAllocatorSys@@UEAA@XZ		; QSVBufferAllocatorSys::~QSVBufferAllocatorSys
PUBLIC	?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z ; QSVBufferAllocatorSys::BufAlloc
PUBLIC	?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z ; QSVBufferAllocatorSys::BufLock
PUBLIC	?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z ; QSVBufferAllocatorSys::BufUnlock
PUBLIC	?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z ; QSVBufferAllocatorSys::BufFree
PUBLIC	??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z		; QSVBufferAllocatorSys::`scalar deleting destructor'
PUBLIC	??0QSVAllocatorSys@@QEAA@XZ			; QSVAllocatorSys::QSVAllocatorSys
PUBLIC	??1QSVAllocatorSys@@UEAA@XZ			; QSVAllocatorSys::~QSVAllocatorSys
PUBLIC	?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z ; QSVAllocatorSys::Init
PUBLIC	?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ	; QSVAllocatorSys::Close
PUBLIC	?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z ; QSVAllocatorSys::FrameLock
PUBLIC	?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z ; QSVAllocatorSys::FrameUnlock
PUBLIC	?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z ; QSVAllocatorSys::GetFrameHDL
PUBLIC	?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z ; QSVAllocatorSys::CheckRequestType
PUBLIC	?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocatorSys::ReleaseResponse
PUBLIC	?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocatorSys::AllocImpl
PUBLIC	??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z ; std::default_delete<QSVBufferAllocatorSys>::operator()
PUBLIC	??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
PUBLIC	??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
PUBLIC	??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
PUBLIC	?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::reset
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Get_first
PUBLIC	??_GQSVAllocatorSys@@UEAAPEAXI@Z		; QSVAllocatorSys::`scalar deleting destructor'
PUBLIC	??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> ><std::default_delete<QSVBufferAllocatorSys>,0>
PUBLIC	??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
PUBLIC	??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
PUBLIC	?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
PUBLIC	?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Get_first
PUBLIC	??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::unique_ptr<void * [0],std::default_delete<void * [0]> ><void * *,std::default_delete<void * [0]>,0,void>
PUBLIC	??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z ; std::exchange<void * *,void * *>
PUBLIC	??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z ; std::default_delete<void * [0]>::operator()<void *,0>
PUBLIC	??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z ; std::exchange<QSVBufferAllocatorSys *,QSVBufferAllocatorSys * &>
PUBLIC	??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z ; std::_Ptr_base<RGYLog>::_Copy_construct_from<RGYLog>
PUBLIC	??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ; std::swap<RGYLog *,void>
PUBLIC	??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1><>
PUBLIC	??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Compressed_pair<std::default_delete<void * [0]>,void * *,1><void * * &>
PUBLIC	??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
PUBLIC	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
PUBLIC	??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z ; std::forward<void * * &>
PUBLIC	??_7QSVBufferAllocatorSys@@6B@			; QSVBufferAllocatorSys::`vftable'
PUBLIC	??_7QSVAllocatorSys@@6B@			; QSVAllocatorSys::`vftable'
PUBLIC	??_R4QSVBufferAllocatorSys@@6B@			; QSVBufferAllocatorSys::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVQSVBufferAllocatorSys@@@8		; QSVBufferAllocatorSys `RTTI Type Descriptor'
PUBLIC	??_R3QSVBufferAllocatorSys@@8			; QSVBufferAllocatorSys::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVBufferAllocatorSys@@8			; QSVBufferAllocatorSys::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@QSVBufferAllocatorSys@@8		; QSVBufferAllocatorSys::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@QSVBufferAllocator@@8		; QSVBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVQSVBufferAllocator@@@8			; QSVBufferAllocator `RTTI Type Descriptor'
PUBLIC	??_R3QSVBufferAllocator@@8			; QSVBufferAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVBufferAllocator@@8			; QSVBufferAllocator::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@mfxBufferAllocator@@8		; mfxBufferAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUmfxBufferAllocator@@@8			; mfxBufferAllocator `RTTI Type Descriptor'
PUBLIC	??_R3mfxBufferAllocator@@8			; mfxBufferAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mfxBufferAllocator@@8			; mfxBufferAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mfxBufferAllocator@@8		; mfxBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4QSVAllocatorSys@@6B@			; QSVAllocatorSys::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVQSVAllocatorSys@@@8			; QSVAllocatorSys `RTTI Type Descriptor'
PUBLIC	??_R3QSVAllocatorSys@@8				; QSVAllocatorSys::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVAllocatorSys@@8				; QSVAllocatorSys::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@QSVAllocatorSys@@8		; QSVAllocatorSys::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@QSVAllocator@@8			; QSVAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVQSVAllocator@@@8			; QSVAllocator `RTTI Type Descriptor'
PUBLIC	??_R3QSVAllocator@@8				; QSVAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVAllocator@@8				; QSVAllocator::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@mfxFrameAllocator@@8		; mfxFrameAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUmfxFrameAllocator@@@8			; mfxFrameAllocator `RTTI Type Descriptor'
PUBLIC	??_R3mfxFrameAllocator@@8			; mfxFrameAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mfxFrameAllocator@@8			; mfxFrameAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mfxFrameAllocator@@8		; mfxFrameAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__imp__aligned_free:PROC
EXTRN	__imp__aligned_malloc:PROC
EXTRN	??0QSVBufferAllocator@@QEAA@XZ:PROC		; QSVBufferAllocator::QSVBufferAllocator
EXTRN	??1QSVBufferAllocator@@UEAA@XZ:PROC		; QSVBufferAllocator::~QSVBufferAllocator
EXTRN	??0QSVAllocator@@QEAA@XZ:PROC			; QSVAllocator::QSVAllocator
EXTRN	??1QSVAllocator@@UEAA@XZ:PROC			; QSVAllocator::~QSVAllocator
EXTRN	?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ:PROC	; QSVAllocator::Close
EXTRN	?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z:PROC ; QSVAllocator::FrameAlloc
EXTRN	?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z:PROC ; QSVAllocator::FrameFree
EXTRN	?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z:PROC ; QSVAllocator::CheckRequestType
EXTRN	??_EQSVBufferAllocatorSys@@UEAAPEAXI@Z:PROC	; QSVBufferAllocatorSys::`vector deleting destructor'
EXTRN	??_EQSVAllocatorSys@@UEAAPEAXI@Z:PROC		; QSVAllocatorSys::`vector deleting destructor'
EXTRN	?get_err_mes@@YAPEBDH@Z:PROC			; get_err_mes
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Incref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspMatrixList@@YAXXZ DD imagerel ??__ECspMatrixList@@YAXXZ
	DD	imagerel ??__ECspMatrixList@@YAXXZ+452
	DD	imagerel $unwind$??__ECspMatrixList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+311
	DD	imagerel $unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspTransferList@@YAXXZ DD imagerel ??__ECspTransferList@@YAXXZ
	DD	imagerel ??__ECspTransferList@@YAXXZ+476
	DD	imagerel $unwind$??__ECspTransferList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+263
	DD	imagerel $unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspColorprimList@@YAXXZ DD imagerel ??__ECspColorprimList@@YAXXZ
	DD	imagerel ??__ECspColorprimList@@YAXXZ+398
	DD	imagerel $unwind$??__ECspColorprimList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0QSVBufferAllocatorSys@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??0QSVBufferAllocatorSys@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1QSVBufferAllocatorSys@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??1QSVBufferAllocatorSys@@UEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+205
	DD	imagerel $unwind$?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z
$pdata$?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z DD imagerel $LN6
	DD	imagerel $LN6+114
	DD	imagerel $unwind$?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z
$pdata$?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z
$pdata$?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0QSVAllocatorSys@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$??0QSVAllocatorSys@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
$pdata$?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA+42
	DD	imagerel $unwind$?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1QSVAllocatorSys@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$??1QSVAllocatorSys@@UEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
$pdata$?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA DD imagerel ?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA+42
	DD	imagerel $unwind$?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z DD imagerel $LN7
	DD	imagerel $LN7+173
	DD	imagerel $unwind$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA DD imagerel ?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
	DD	imagerel ?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
$pdata$?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA DD imagerel ?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
	DD	imagerel ?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA+40
	DD	imagerel $unwind$?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ
$pdata$?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z DD imagerel $LN23
	DD	imagerel $LN23+1930
	DD	imagerel $unwind$?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z
$pdata$?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z DD imagerel $LN6
	DD	imagerel $LN6+369
	DD	imagerel $unwind$?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z
$pdata$?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z
$pdata$?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z DD imagerel $LN6
	DD	imagerel $LN6+111
	DD	imagerel $unwind$?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z
$pdata$?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DD imagerel $LN11
	DD	imagerel $LN11+382
	DD	imagerel $unwind$?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
$pdata$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD imagerel $LN26
	DD	imagerel $LN26+1961
	DD	imagerel $unwind$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GQSVAllocatorSys@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_GQSVAllocatorSys@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z
pdata	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mfxFrameAllocator@@8 DD imagerel ??_R0?AUmfxFrameAllocator@@@8 ; mfxFrameAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R2mfxFrameAllocator@@8 DD imagerel ??_R1A@?0A@EA@mfxFrameAllocator@@8 ; mfxFrameAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R3mfxFrameAllocator@@8 DD 00H			; mfxFrameAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUmfxFrameAllocator@@@8
data$r	SEGMENT
??_R0?AUmfxFrameAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; mfxFrameAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUmfxFrameAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R17?0A@EA@mfxFrameAllocator@@8 DD imagerel ??_R0?AUmfxFrameAllocator@@@8 ; mfxFrameAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVAllocator@@8
rdata$r	SEGMENT
??_R2QSVAllocator@@8 DD imagerel ??_R1A@?0A@EA@QSVAllocator@@8 ; QSVAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@mfxFrameAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVAllocator@@8
rdata$r	SEGMENT
??_R3QSVAllocator@@8 DD 00H				; QSVAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2QSVAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVAllocator@@@8
data$r	SEGMENT
??_R0?AVQSVAllocator@@@8 DQ FLAT:??_7type_info@@6B@	; QSVAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVAllocator@@8 DD imagerel ??_R0?AVQSVAllocator@@@8 ; QSVAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVAllocatorSys@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVAllocatorSys@@8 DD imagerel ??_R0?AVQSVAllocatorSys@@@8 ; QSVAllocatorSys::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVAllocatorSys@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVAllocatorSys@@8
rdata$r	SEGMENT
??_R2QSVAllocatorSys@@8 DD imagerel ??_R1A@?0A@EA@QSVAllocatorSys@@8 ; QSVAllocatorSys::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@QSVAllocator@@8
	DD	imagerel ??_R17?0A@EA@mfxFrameAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVAllocatorSys@@8
rdata$r	SEGMENT
??_R3QSVAllocatorSys@@8 DD 00H				; QSVAllocatorSys::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2QSVAllocatorSys@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVAllocatorSys@@@8
data$r	SEGMENT
??_R0?AVQSVAllocatorSys@@@8 DQ FLAT:??_7type_info@@6B@	; QSVAllocatorSys `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVAllocatorSys@@', 00H
data$r	ENDS
;	COMDAT ??_R4QSVAllocatorSys@@6B@
rdata$r	SEGMENT
??_R4QSVAllocatorSys@@6B@ DD 01H			; QSVAllocatorSys::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVQSVAllocatorSys@@@8
	DD	imagerel ??_R3QSVAllocatorSys@@8
	DD	imagerel ??_R4QSVAllocatorSys@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mfxBufferAllocator@@8 DD imagerel ??_R0?AUmfxBufferAllocator@@@8 ; mfxBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R2mfxBufferAllocator@@8 DD imagerel ??_R1A@?0A@EA@mfxBufferAllocator@@8 ; mfxBufferAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R3mfxBufferAllocator@@8 DD 00H			; mfxBufferAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUmfxBufferAllocator@@@8
data$r	SEGMENT
??_R0?AUmfxBufferAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; mfxBufferAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUmfxBufferAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R17?0A@EA@mfxBufferAllocator@@8 DD imagerel ??_R0?AUmfxBufferAllocator@@@8 ; mfxBufferAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R2QSVBufferAllocator@@8 DD imagerel ??_R1A@?0A@EA@QSVBufferAllocator@@8 ; QSVBufferAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@mfxBufferAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R3QSVBufferAllocator@@8 DD 00H			; QSVBufferAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2QSVBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVBufferAllocator@@@8
data$r	SEGMENT
??_R0?AVQSVBufferAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; QSVBufferAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVBufferAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVBufferAllocator@@8 DD imagerel ??_R0?AVQSVBufferAllocator@@@8 ; QSVBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVBufferAllocatorSys@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVBufferAllocatorSys@@8 DD imagerel ??_R0?AVQSVBufferAllocatorSys@@@8 ; QSVBufferAllocatorSys::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVBufferAllocatorSys@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVBufferAllocatorSys@@8
rdata$r	SEGMENT
??_R2QSVBufferAllocatorSys@@8 DD imagerel ??_R1A@?0A@EA@QSVBufferAllocatorSys@@8 ; QSVBufferAllocatorSys::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@QSVBufferAllocator@@8
	DD	imagerel ??_R17?0A@EA@mfxBufferAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVBufferAllocatorSys@@8
rdata$r	SEGMENT
??_R3QSVBufferAllocatorSys@@8 DD 00H			; QSVBufferAllocatorSys::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2QSVBufferAllocatorSys@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVBufferAllocatorSys@@@8
data$r	SEGMENT
??_R0?AVQSVBufferAllocatorSys@@@8 DQ FLAT:??_7type_info@@6B@ ; QSVBufferAllocatorSys `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVBufferAllocatorSys@@', 00H
data$r	ENDS
;	COMDAT ??_R4QSVBufferAllocatorSys@@6B@
rdata$r	SEGMENT
??_R4QSVBufferAllocatorSys@@6B@ DD 01H			; QSVBufferAllocatorSys::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVQSVBufferAllocatorSys@@@8
	DD	imagerel ??_R3QSVBufferAllocatorSys@@8
	DD	imagerel ??_R4QSVBufferAllocatorSys@@6B@
rdata$r	ENDS
;	COMDAT ??_7QSVAllocatorSys@@6B@
CONST	SEGMENT
??_7QSVAllocatorSys@@6B@ DQ FLAT:??_R4QSVAllocatorSys@@6B@ ; QSVAllocatorSys::`vftable'
	DQ	FLAT:??_EQSVAllocatorSys@@UEAAPEAXI@Z
	DQ	FLAT:?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z
	DQ	FLAT:?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ
	DQ	FLAT:?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
	DQ	FLAT:?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z
	DQ	FLAT:?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z
	DQ	FLAT:?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
	DQ	FLAT:?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z
	DQ	FLAT:?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
	DQ	FLAT:?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
CONST	ENDS
;	COMDAT ??_7QSVBufferAllocatorSys@@6B@
CONST	SEGMENT
??_7QSVBufferAllocatorSys@@6B@ DQ FLAT:??_R4QSVBufferAllocatorSys@@6B@ ; QSVBufferAllocatorSys::`vftable'
	DQ	FLAT:??_EQSVBufferAllocatorSys@@UEAAPEAXI@Z
	DQ	FLAT:?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z
	DQ	FLAT:?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z
	DQ	FLAT:?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z
	DQ	FLAT:?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z DD 022701H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0 DB 05fH ; std::swap<std::_Ref_count_base *,void>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc DD 028H ; std::swap<std::_Ref_count_base *,void>
	DD	08H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0
	ORG $+48
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData DD 01H ; std::swap<std::_Ref_count_base *,void>
	DD	00H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcName$0 DB 05fH ; std::swap<RGYLog *,void>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcVarDesc DD 028H ; std::swap<RGYLog *,void>
	DD	08H
	DQ	FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcName$0
	ORG $+48
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcFrameData DD 01H ; std::swap<RGYLog *,void>
	DD	00H
	DQ	FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z DB 040H
	DD	imagerel $ip2state$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ DB 040H
	DD	imagerel $ip2state$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ DD 021e19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DB 040H
	DD	imagerel $ip2state$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DD 021e19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GQSVAllocatorSys@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z DB 040H
	DD	imagerel $ip2state$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ DD 021e01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcName$0 DB 066H ; QSVAllocatorSys::FrameLock
	DB	073H
	DB	00H
	ORG $+1
?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcVarDesc DD 038H ; QSVAllocatorSys::FrameLock
	DD	08H
	DQ	FLAT:?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcName$0
	ORG $+48
?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcFrameData DD 01H ; QSVAllocatorSys::FrameLock
	DD	00H
	DQ	FLAT:?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcVarDesc
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0 DB 06dH ; QSVAllocatorSys::AllocImpl
	DB	069H
	DB	064H
	DB	073H
	DB	00H
	ORG $+3
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$1 DB 066H ; QSVAllocatorSys::AllocImpl
	DB	073H
	DB	00H
	ORG $+5
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc DD 068H ; QSVAllocatorSys::AllocImpl
	DD	08H
	DQ	FLAT:?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0
	ORG $+96
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData DD 02H ; QSVAllocatorSys::AllocImpl
	DD	00H
	DQ	FLAT:?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
xdata	SEGMENT
$unwind$??0QSVBufferAllocatorSys@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0QSVBufferAllocatorSys@@QEAA@XZ
$cppxdata$??0QSVBufferAllocatorSys@@QEAA@XZ DB 08H
	DD	imagerel $stateUnwindMap$??0QSVBufferAllocatorSys@@QEAA@XZ
	DD	imagerel $ip2state$??0QSVBufferAllocatorSys@@QEAA@XZ
$stateUnwindMap$??0QSVBufferAllocatorSys@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA
$ip2state$??0QSVBufferAllocatorSys@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'R'
	DB	02H
	DB	01eH
	DB	00H
$cppxdata$??1QSVBufferAllocatorSys@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1QSVBufferAllocatorSys@@UEAA@XZ
	DD	imagerel $ip2state$??1QSVBufferAllocatorSys@@UEAA@XZ
$cppxdata$??0QSVAllocatorSys@@QEAA@XZ DB 08H
	DD	imagerel $stateUnwindMap$??0QSVAllocatorSys@@QEAA@XZ
	DD	imagerel $ip2state$??0QSVAllocatorSys@@QEAA@XZ
$unwind$?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1QSVBufferAllocatorSys@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1QSVBufferAllocatorSys@@UEAA@XZ
$stateUnwindMap$??1QSVBufferAllocatorSys@@UEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA
$ip2state$??1QSVBufferAllocatorSys@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
$stateUnwindMap$??0QSVAllocatorSys@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA
$unwind$?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z DD 022d01H
	DD	070157219H
$unwind$?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z DD 022801H
	DD	070101214H
$unwind$?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z DD 022301H
	DD	0700b120fH
$unwind$?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z DD 022301H
	DD	0700b520fH
$unwind$??0QSVAllocatorSys@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0QSVAllocatorSys@@QEAA@XZ
$ip2state$??0QSVAllocatorSys@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'R'
	DB	02H
	DB	'F'
	DB	00H
$cppxdata$??1QSVAllocatorSys@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1QSVAllocatorSys@@UEAA@XZ
	DD	imagerel $ip2state$??1QSVAllocatorSys@@UEAA@XZ
$unwind$?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1QSVAllocatorSys@@UEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1QSVAllocatorSys@@UEAA@XZ
$stateUnwindMap$??1QSVAllocatorSys@@UEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA
$ip2state$??1QSVAllocatorSys@@UEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	'Z'
	DB	04H
	DB	016H
	DB	02H
	DB	'('
	DB	00H
$unwind$?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z DD 022811H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z
$cppxdata$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z DB 08H
	DD	imagerel $stateUnwindMap$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z
	DD	imagerel $ip2state$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z
$stateUnwindMap$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA
$ip2state$?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z DB 0aH
	DB	00H
	DB	00H
	DB	'P'
	DB	02H
	DB	'J'
	DB	04H
	DB	'X'
	DB	02H
	DB	'@'
	DB	00H
$cppxdata$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 08H
	DD	imagerel $stateUnwindMap$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
	DD	imagerel $ip2state$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
$unwind$?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ DD 021e01H
	DD	07006520aH
$unwind$?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z DD 032e01H
	DD	0140117H
	DD	07010H
$unwind$?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z DD 022801H
	DD	07010b214H
$unwind$?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z DD 011001H
	DD	07010H
$unwind$?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z DD 022301H
	DD	0700b520fH
$unwind$?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DD 022301H
	DD	0700bb20fH
$unwind$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD 042f11H
	DD	02b0118H
	DD	060107011H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
$stateUnwindMap$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$ip2state$?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 016H
	DB	00H
	DB	00H
	DB	'%', 0aH
	DB	02H
	DB	'4'
	DB	00H
	DB	','
	DB	02H
	DB	095H, 06H
	DB	00H
	DB	','
	DB	02H
	DB	085H, 04H
	DB	00H
	DB	','
	DB	02H
	DB	0dH, 05H
	DB	00H
	DB	','
	DB	02H
	DB	0eaH
	DB	00H
	ORG $+3
$unwind$?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	084H
	DB	02H
	DB	' '
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z
	DD	imagerel $ip2state$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z DD 022311H
	DD	0700b720fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspColorprimList@@YAXXZ DD 042b19H
	DD	023010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD 033d19H
	DD	07016821aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspTransferList@@YAXXZ DD 042b19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspMatrixList@@YAXXZ DD 042b19H
	DD	029010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z PROC ; std::forward<void * * &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z ENDP ; std::forward<void * * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z PROC ; std::move<std::_Ref_count_base * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ENDP ; std::move<std::_Ref_count_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z PROC ; std::move<RGYLog * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ENDP ; std::move<RGYLog * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
<_Val2_0>$ = 64
??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z PROC ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Compressed_pair<std::default_delete<void * [0]>,void * *,1><void * * &>, COMDAT

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Val2_0>$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$forward@AEAPEAPEAX@std@@YAAEAPEAPEAXAEAPEAPEAX@Z ; std::forward<void * * &>
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z ENDP ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Compressed_pair<std::default_delete<void * [0]>,void * *,1><void * * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1><>, COMDAT

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00016	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
_TEXT	SEGMENT
_Tmp$ = 40
_Left$ = 80
_Right$ = 88
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z PROC ; std::swap<std::_Ref_count_base *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 59   :     _Ty _Tmp = _STD move(_Left);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 28	 mov	 QWORD PTR _Tmp$[rsp], rax

; 60   :     _Left    = _STD move(_Right);

  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax

; 61   :     _Right   = _STD move(_Tmp);

  0004a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 62   : }

  0005f	48 8b cc	 mov	 rcx, rsp
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData
  00069	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ENDP ; std::swap<std::_Ref_count_base *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z
_TEXT	SEGMENT
_Tmp$ = 40
_Left$ = 80
_Right$ = 88
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z PROC	; std::swap<RGYLog *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 59   :     _Ty _Tmp = _STD move(_Left);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 28	 mov	 QWORD PTR _Tmp$[rsp], rax

; 60   :     _Left    = _STD move(_Right);

  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax

; 61   :     _Right   = _STD move(_Tmp);

  0004a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 62   : }

  0005f	48 8b cc	 mov	 rcx, rsp
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcFrameData
  00069	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ENDP	; std::swap<RGYLog *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z PROC ; std::_Ptr_base<RGYLog>::_Copy_construct_from<RGYLog>, COMDAT

; 835  :     void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 836  :         // implement shared_ptr's (converting) copy ctor
; 837  :         if (_Other._Rep) {

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Other$[rsp]
  00028	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002d	74 0e		 je	 SHORT $LN2@Copy_const

; 838  :             _Other._Rep->_Incref();

  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR _Other$[rsp]
  00034	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00038	e8 00 00 00 00	 call	 ?_Incref@_Ref_count_base@std@@QEAAXXZ ; std::_Ref_count_base::_Incref
$LN2@Copy_const:

; 839  :         }
; 840  : 
; 841  :         _Ptr = _Other._Ptr;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00047	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 842  :         _Rep = _Other._Rep;

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00052	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00057	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 843  :     }

  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z ENDP ; std::_Ptr_base<RGYLog>::_Copy_construct_from<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z PROC ; std::exchange<QSVBufferAllocatorSys *,QSVBufferAllocatorSys * &>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 04 24	 mov	 QWORD PTR _Old_val$[rsp], rax

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_val$[rsp]
  00039	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 529  :     return _Old_val;

  0003f	48 8b 04 24	 mov	 rax, QWORD PTR _Old_val$[rsp]

; 530  : }

  00043	48 83 c4 10	 add	 rsp, 16
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z ENDP ; std::exchange<QSVBufferAllocatorSys *,QSVBufferAllocatorSys * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z PROC ; std::default_delete<void * [0]>::operator()<void *,0>, COMDAT

; 1779 :     void operator()(_Uty* _Ptr) const noexcept { // delete a pointer

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1780 :         static_assert(0 < sizeof(_Uty), "can't delete an incomplete type");
; 1781 :         delete[] _Ptr;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0002d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00032	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]

; 1782 :     }

  00037	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z ENDP ; std::default_delete<void * [0]>::operator()<void *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z PROC ; std::exchange<void * *,void * *>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 04 24	 mov	 QWORD PTR _Old_val$[rsp], rax

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_val$[rsp]
  00039	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 529  :     return _Old_val;

  0003f	48 8b 04 24	 mov	 rax, QWORD PTR _Old_val$[rsp]

; 530  : }

  00043	48 83 c4 10	 add	 rsp, 16
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z ENDP ; std::exchange<void * *,void * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z PROC ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::unique_ptr<void * [0],std::default_delete<void * [0]> ><void * *,std::default_delete<void * [0]>,0,void>, COMDAT

; 1943 :     explicit unique_ptr(_Uty _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Ptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	4c 8d 44 24 48	 lea	 r8, QWORD PTR _Ptr$[rsp]
  0002d	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??$?0AEAPEAPEAX@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAPEAX@Z ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Compressed_pair<std::default_delete<void * [0]>,void * *,1><void * * &>
  0003a	90		 npad	 1
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z ENDP ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::unique_ptr<void * [0],std::default_delete<void * [0]> ><void * *,std::default_delete<void * [0]>,0,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ PROC ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ PROC ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::release, COMDAT

; 2031 :     pointer release() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 2032 :         return _STD exchange(_Mypair._Myval2, pointer());

  0001e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR $T1[rsp], 0
  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??$exchange@PEAPEAXPEAPEAX@std@@YAPEAPEAXAEAPEAPEAX$$QEAPEAPEAX@Z ; std::exchange<void * *,void * *>
  00039	90		 npad	 1

; 2033 :     }

  0003a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ ENDP ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ
_TEXT	SEGMENT
this$ = 16
?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ PROC ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get, COMDAT

; 2023 :     _NODISCARD pointer get() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 2024 :         return _Mypair._Myval2;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 2025 :     }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ENDP ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ PROC ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >, COMDAT

; 2005 :     ~unique_ptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 2006 :         if (_Mypair._Myval2) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 1d		 je	 SHORT $LN2@unique_ptr

; 2007 :             _Mypair._Get_first()(_Mypair._Myval2);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@$$BY0A@PEAX@std@@PEAPEAX$00@std@@QEAAAEAU?$default_delete@$$BY0A@PEAX@2@XZ ; std::_Compressed_pair<std::default_delete<void * [0]>,void * *,1>::_Get_first
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ??$?RPEAX$0A@@?$default_delete@$$BY0A@PEAX@std@@QEBAXPEAPEAX@Z ; std::default_delete<void * [0]>::operator()<void *,0>
$LN2@unique_ptr:

; 2008 :         }
; 2009 :     }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ENDP ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ
_TEXT	SEGMENT
this$ = 48
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ PROC ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>, COMDAT

; 1204 :     _NODISCARD _Ty2* operator->() const noexcept { // return pointer to resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1205 :         return get();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get

; 1206 :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ENDP ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ PROC ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> ><std::default_delete<QSVBufferAllocatorSys>,0>, COMDAT

; 1809 :     constexpr unique_ptr() noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1><>
  00030	90		 npad	 1
  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ENDP ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> ><std::default_delete<QSVBufferAllocatorSys>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GQSVAllocatorSys@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GQSVAllocatorSys@@UEAAPEAXI@Z PROC			; QSVAllocatorSys::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1QSVAllocatorSys@@UEAA@XZ ; QSVAllocatorSys::~QSVAllocatorSys
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_GQSVAllocatorSys@@UEAAPEAXI@Z ENDP			; QSVAllocatorSys::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z
_TEXT	SEGMENT
_Old$ = 32
this$ = 64
_Ptr$ = 72
?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z PROC ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::reset, COMDAT

; 1907 :     void reset(pointer _Ptr = pointer()) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1908 :         pointer _Old = _STD exchange(_Mypair._Myval2, _Ptr);

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8d 54 24 48	 lea	 rdx, QWORD PTR _Ptr$[rsp]
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$exchange@PEAVQSVBufferAllocatorSys@@AEAPEAV1@@std@@YAPEAVQSVBufferAllocatorSys@@AEAPEAV1@0@Z ; std::exchange<QSVBufferAllocatorSys *,QSVBufferAllocatorSys * &>
  00035	90		 npad	 1
  00036	48 89 44 24 20	 mov	 QWORD PTR _Old$[rsp], rax

; 1909 :         if (_Old) {

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Old$[rsp], 0
  00041	74 1c		 je	 SHORT $LN2@reset

; 1910 :             _Mypair._Get_first()(_Old);

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Get_first
  00050	90		 npad	 1
  00051	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Old$[rsp]
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 ??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z ; std::default_delete<QSVBufferAllocatorSys>::operator()
  0005e	90		 npad	 1
$LN2@reset:

; 1911 :         }
; 1912 :     }

  0005f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00063	5f		 pop	 rdi
  00064	c3		 ret	 0
?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z ENDP ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 0
this$ = 32
??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ PROC ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool, COMDAT

; 1899 :     explicit operator bool() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 1900 :         return static_cast<bool>(_Mypair._Myval2);

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 06		 je	 SHORT $LN3@operator
  00029	c6 04 24 01	 mov	 BYTE PTR tv67[rsp], 1
  0002d	eb 04		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002f	c6 04 24 00	 mov	 BYTE PTR tv67[rsp], 0
$LN4@operator:
  00033	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 1901 :     }

  00037	48 83 c4 10	 add	 rsp, 16
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ENDP ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ
_TEXT	SEGMENT
this$ = 16
??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ PROC ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->, COMDAT

; 1891 :     _NODISCARD pointer operator->() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1892 :         return _Mypair._Myval2;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1893 :     }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ENDP ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ PROC ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >, COMDAT

; 1873 :     ~unique_ptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1874 :         if (_Mypair._Myval2) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 1d		 je	 SHORT $LN2@unique_ptr

; 1875 :             _Mypair._Get_first()(_Mypair._Myval2);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@VQSVBufferAllocatorSys@@@std@@PEAVQSVBufferAllocatorSys@@$00@std@@QEAAAEAU?$default_delete@VQSVBufferAllocatorSys@@@2@XZ ; std::_Compressed_pair<std::default_delete<QSVBufferAllocatorSys>,QSVBufferAllocatorSys *,1>::_Get_first
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z ; std::default_delete<QSVBufferAllocatorSys>::operator()
$LN2@unique_ptr:

; 1876 :         }
; 1877 :     }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ENDP ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z
_TEXT	SEGMENT
$T1 = 32
tv74 = 40
this$ = 64
_Ptr$ = 72
??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z PROC ; std::default_delete<QSVBufferAllocatorSys>::operator(), COMDAT

; 1765 :     void operator()(_Ty* _Ptr) const noexcept { // delete a pointer

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1766 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 1767 :         delete _Ptr;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00033	74 1b		 je	 SHORT $LN3@operator
  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	ba 01 00 00 00	 mov	 edx, 1
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00047	ff 10		 call	 QWORD PTR [rax]
  00049	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  0004e	eb 09		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00050	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
$LN4@operator:

; 1768 :     }

  00059	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
??R?$default_delete@VQSVBufferAllocatorSys@@@std@@QEBAXPEAVQSVBufferAllocatorSys@@@Z ENDP ; std::default_delete<QSVBufferAllocatorSys>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
WidthAlign$ = 48
HeightAlign$ = 52
nbytes$ = 56
mids$ = 72
numAllocated$ = 84
sts$5 = 88
fs$6 = 104
$T7 = 120
$T8 = 128
$T9 = 132
$T10 = 136
$T11 = 140
$T12 = 144
tv81 = 148
tv153 = 152
tv174 = 160
tv362 = 168
tv199 = 176
tv204 = 184
tv213 = 192
tv225 = 200
tv361 = 208
tv248 = 216
tv249 = 224
tv259 = 232
tv271 = 240
tv274 = 248
tv279 = 256
tv360 = 264
tv299 = 272
tv300 = 280
tv310 = 288
tv322 = 296
tv325 = 304
tv330 = 312
tv359 = 320
tv348 = 328
this$ = 368
request$ = 376
response$ = 384
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocatorSys::AllocImpl

; 251  : mfxStatus QSVAllocatorSys::AllocImpl(mfxFrameAllocRequest *request, mfxFrameAllocResponse *response) {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]

; 252  :     if (!m_pBufferAllocator) {

  0002f	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 ??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	75 0a		 jne	 SHORT $LN7@AllocImpl

; 253  :         return MFX_ERR_NOT_INITIALIZED;

  0004c	b8 f8 ff ff ff	 mov	 eax, -8
  00051	e9 34 07 00 00	 jmp	 $LN1@AllocImpl
$LN7@AllocImpl:

; 254  :     }
; 255  : 
; 256  :     mfxU32 WidthAlign = ALIGN32(request->Info.Width);

  00056	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0005e	0f b7 40 34	 movzx	 eax, WORD PTR [rax+52]
  00062	83 c0 1f	 add	 eax, 31
  00065	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  00068	89 44 24 30	 mov	 DWORD PTR WidthAlign$[rsp], eax

; 257  :     mfxU32 HeightAlign = ALIGN32(request->Info.Height);

  0006c	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00074	0f b7 40 36	 movzx	 eax, WORD PTR [rax+54]
  00078	83 c0 1f	 add	 eax, 31
  0007b	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  0007e	89 44 24 34	 mov	 DWORD PTR HeightAlign$[rsp], eax

; 258  :     mfxU32 nbytes = 0;

  00082	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR nbytes$[rsp], 0

; 259  : 
; 260  :     switch (request->Info.FourCC) {

  0008a	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00092	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00095	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv81[rsp], eax
  0009c	81 bc 24 94 00
	00 00 52 47 42
	33		 cmp	 DWORD PTR tv81[rsp], 859981650 ; 33424752H
  000a7	0f 87 8a 00 00
	00		 ja	 $LN23@AllocImpl
  000ad	81 bc 24 94 00
	00 00 52 47 42
	33		 cmp	 DWORD PTR tv81[rsp], 859981650 ; 33424752H
  000b8	0f 84 f9 00 00
	00		 je	 $LN10@AllocImpl
  000be	81 bc 24 94 00
	00 00 4e 56 31
	32		 cmp	 DWORD PTR tv81[rsp], 842094158 ; 3231564eH
  000c9	77 49		 ja	 SHORT $LN24@AllocImpl
  000cb	81 bc 24 94 00
	00 00 4e 56 31
	32		 cmp	 DWORD PTR tv81[rsp], 842094158 ; 3231564eH
  000d6	0f 84 a9 00 00
	00		 je	 $LN8@AllocImpl
  000dc	81 bc 24 94 00
	00 00 50 30 31
	30		 cmp	 DWORD PTR tv81[rsp], 808530000 ; 30313050H
  000e7	0f 84 10 01 00
	00		 je	 $LN14@AllocImpl
  000ed	81 bc 24 94 00
	00 00 50 32 31
	30		 cmp	 DWORD PTR tv81[rsp], 808530512 ; 30313250H
  000f8	0f 84 23 01 00
	00		 je	 $LN16@AllocImpl
  000fe	81 bc 24 94 00
	00 00 52 47 31
	30		 cmp	 DWORD PTR tv81[rsp], 808535890 ; 30314752H
  00109	0f 84 00 01 00
	00		 je	 $LN15@AllocImpl
  0010f	e9 1f 01 00 00	 jmp	 $LN17@AllocImpl
$LN24@AllocImpl:
  00114	81 bc 24 94 00
	00 00 59 56 31
	32		 cmp	 DWORD PTR tv81[rsp], 842094169 ; 32315659H
  0011f	74 64		 je	 SHORT $LN8@AllocImpl
  00121	81 bc 24 94 00
	00 00 59 55 59
	32		 cmp	 DWORD PTR tv81[rsp], 844715353 ; 32595559H
  0012c	0f 84 a9 00 00
	00		 je	 $LN12@AllocImpl
  00132	e9 fc 00 00 00	 jmp	 $LN17@AllocImpl
$LN23@AllocImpl:
  00137	81 bc 24 94 00
	00 00 52 47 42
	34		 cmp	 DWORD PTR tv81[rsp], 876758866 ; 34424752H
  00142	0f 84 81 00 00
	00		 je	 $LN11@AllocImpl
  00148	81 bc 24 94 00
	00 00 4e 56 31
	36		 cmp	 DWORD PTR tv81[rsp], 909203022 ; 3631564eH
  00153	74 4e		 je	 SHORT $LN9@AllocImpl
  00155	81 bc 24 94 00
	00 00 52 31 36
	55		 cmp	 DWORD PTR tv81[rsp], 1429614930 ; 55363152H
  00160	0f 84 86 00 00
	00		 je	 $LN13@AllocImpl
  00166	81 bc 24 94 00
	00 00 41 59 55
	56		 cmp	 DWORD PTR tv81[rsp], 1448433985 ; 56555941H
  00171	74 56		 je	 SHORT $LN11@AllocImpl
  00173	81 bc 24 94 00
	00 00 55 59 56
	59		 cmp	 DWORD PTR tv81[rsp], 1498831189 ; 59565955H
  0017e	74 5b		 je	 SHORT $LN12@AllocImpl
  00180	e9 ae 00 00 00	 jmp	 $LN17@AllocImpl
$LN8@AllocImpl:

; 261  :     case MFX_FOURCC_YV12:
; 262  :     case MFX_FOURCC_NV12:
; 263  :         nbytes = WidthAlign * HeightAlign * 3/2;

  00185	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00189	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  0018e	6b c0 03	 imul	 eax, eax, 3
  00191	33 d2		 xor	 edx, edx
  00193	b9 02 00 00 00	 mov	 ecx, 2
  00198	f7 f1		 div	 ecx
  0019a	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 264  :         break;

  0019e	e9 9a 00 00 00	 jmp	 $LN2@AllocImpl
$LN9@AllocImpl:

; 265  :     case MFX_FOURCC_NV16:
; 266  :         nbytes = WidthAlign * HeightAlign * 2;

  001a3	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  001a7	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  001ac	d1 e0		 shl	 eax, 1
  001ae	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 267  :         break;

  001b2	e9 86 00 00 00	 jmp	 $LN2@AllocImpl
$LN10@AllocImpl:

; 268  :     case MFX_FOURCC_RGB3:
; 269  :         nbytes = WidthAlign * HeightAlign * 3;

  001b7	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  001bb	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  001c0	6b c0 03	 imul	 eax, eax, 3
  001c3	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 270  :         break;

  001c7	eb 74		 jmp	 SHORT $LN2@AllocImpl
$LN11@AllocImpl:

; 271  :     case MFX_FOURCC_RGB4:
; 272  :     case MFX_FOURCC_AYUV:
; 273  : #ifdef FUTURE_API
; 274  :     case MFX_FOURCC_Y410:
; 275  : #endif
; 276  :         nbytes = WidthAlign * HeightAlign * 4;

  001c9	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  001cd	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  001d2	c1 e0 02	 shl	 eax, 2
  001d5	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 277  :         break;

  001d9	eb 62		 jmp	 SHORT $LN2@AllocImpl
$LN12@AllocImpl:

; 278  :     case MFX_FOURCC_UYVY:
; 279  :     case MFX_FOURCC_YUY2:
; 280  :         nbytes = WidthAlign * HeightAlign * 2;

  001db	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  001df	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  001e4	d1 e0		 shl	 eax, 1
  001e6	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 281  :         break;

  001ea	eb 51		 jmp	 SHORT $LN2@AllocImpl
$LN13@AllocImpl:

; 282  :     case MFX_FOURCC_R16:
; 283  :         nbytes = WidthAlign * HeightAlign * 2;

  001ec	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  001f0	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  001f5	d1 e0		 shl	 eax, 1
  001f7	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 284  :         break;

  001fb	eb 40		 jmp	 SHORT $LN2@AllocImpl
$LN14@AllocImpl:

; 285  :     case MFX_FOURCC_P010:
; 286  :         nbytes = WidthAlign * HeightAlign * 3;

  001fd	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00201	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  00206	6b c0 03	 imul	 eax, eax, 3
  00209	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 287  :         break;

  0020d	eb 2e		 jmp	 SHORT $LN2@AllocImpl
$LN15@AllocImpl:

; 288  :     case MFX_FOURCC_A2RGB10:
; 289  :         nbytes = WidthAlign * HeightAlign * 4;

  0020f	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00213	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  00218	c1 e0 02	 shl	 eax, 2
  0021b	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 290  :         break;

  0021f	eb 1c		 jmp	 SHORT $LN2@AllocImpl
$LN16@AllocImpl:

; 291  :     case MFX_FOURCC_P210:
; 292  : #ifdef FUTURE_API
; 293  :     case MFX_FOURCC_Y210:
; 294  :     case MFX_FOURCC_Y216:
; 295  : #endif
; 296  :         nbytes = WidthAlign * HeightAlign * 4;

  00221	8b 44 24 30	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00225	0f af 44 24 34	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  0022a	c1 e0 02	 shl	 eax, 2
  0022d	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax

; 297  :         break;

  00231	eb 0a		 jmp	 SHORT $LN2@AllocImpl
$LN17@AllocImpl:

; 298  :     default:
; 299  :         return MFX_ERR_UNSUPPORTED;

  00233	b8 fd ff ff ff	 mov	 eax, -3
  00238	e9 4d 05 00 00	 jmp	 $LN1@AllocImpl
$LN2@AllocImpl:

; 300  :     }
; 301  : 
; 302  :     unique_ptr<mfxMemId[]> mids(new mfxMemId[request->NumFrameSuggested]);

  0023d	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00245	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  00249	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  00251	b8 08 00 00 00	 mov	 eax, 8
  00256	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv153[rsp]
  0025e	48 f7 e1	 mul	 rcx
  00261	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00268	48 0f 40 c1	 cmovo	 rax, rcx
  0026c	48 8b c8	 mov	 rcx, rax
  0026f	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  00274	48 89 44 24 78	 mov	 QWORD PTR $T7[rsp], rax
  00279	48 8b 54 24 78	 mov	 rdx, QWORD PTR $T7[rsp]
  0027e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  00283	e8 00 00 00 00	 call	 ??$?0PEAPEAXU?$default_delete@$$BY0A@PEAX@std@@$0A@X@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@PEAPEAX@Z ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::unique_ptr<void * [0],std::default_delete<void * [0]> ><void * *,std::default_delete<void * [0]>,0,void>
  00288	90		 npad	 1

; 303  :     if (!mids.get()) {

  00289	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0028e	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  00293	48 85 c0	 test	 rax, rax
  00296	75 21		 jne	 SHORT $LN18@AllocImpl

; 304  :         return MFX_ERR_MEMORY_ALLOC;

  00298	c7 84 24 80 00
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T8[rsp], -4
  002a3	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  002a8	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  002ad	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR $T8[rsp]
  002b4	e9 d1 04 00 00	 jmp	 $LN1@AllocImpl
$LN18@AllocImpl:

; 305  :     }
; 306  : 
; 307  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocatorSys::AllocImpl allocating %d frames...\n"), request->NumFrameSuggested);

  002b9	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002c1	48 83 c0 78	 add	 rax, 120		; 00000078H
  002c5	48 8b c8	 mov	 rcx, rax
  002c8	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  002cd	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  002d5	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  002dd	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  002e1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv174[rsp]
  002e9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002ec	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv362[rsp], rcx
  002f4	44 8b c8	 mov	 r9d, eax
  002f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117948
  002fe	ba fe ff ff ff	 mov	 edx, -2
  00303	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv174[rsp]
  0030b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv362[rsp]
  00313	ff 50 20	 call	 QWORD PTR [rax+32]

; 308  :     mfxU32 numAllocated = 0;

  00316	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR numAllocated$[rsp], 0

; 309  :     for (numAllocated = 0; numAllocated < request->NumFrameSuggested; numAllocated++) {

  0031e	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR numAllocated$[rsp], 0
  00326	eb 0a		 jmp	 SHORT $LN6@AllocImpl
$LN4@AllocImpl:
  00328	8b 44 24 54	 mov	 eax, DWORD PTR numAllocated$[rsp]
  0032c	ff c0		 inc	 eax
  0032e	89 44 24 54	 mov	 DWORD PTR numAllocated$[rsp], eax
$LN6@AllocImpl:
  00332	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0033a	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  0033e	39 44 24 54	 cmp	 DWORD PTR numAllocated$[rsp], eax
  00342	0f 83 c1 03 00
	00		 jae	 $LN5@AllocImpl

; 310  :         mfxStatus sts = m_pBufferAllocator->Alloc(m_pBufferAllocator->pthis,

  00348	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0034d	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  00352	8b 4c 24 54	 mov	 ecx, DWORD PTR numAllocated$[rsp]
  00356	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  0035a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
  00362	8b 4c 24 38	 mov	 ecx, DWORD PTR nbytes$[rsp]
  00366	48 83 c1 60	 add	 rcx, 96			; 00000060H
  0036a	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv204[rsp], rcx
  00372	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0037a	48 81 c2 88 00
	00 00		 add	 rdx, 136		; 00000088H
  00381	48 8b ca	 mov	 rcx, rdx
  00384	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00389	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv213[rsp], rax
  00391	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00399	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  003a0	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  003a5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv199[rsp]
  003ad	4c 8b c9	 mov	 r9, rcx
  003b0	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR request$[rsp]
  003b8	44 0f b7 41 54	 movzx	 r8d, WORD PTR [rcx+84]
  003bd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv204[rsp]
  003c5	8b d1		 mov	 edx, ecx
  003c7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv213[rsp]
  003cf	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  003d3	ff 50 20	 call	 QWORD PTR [rax+32]
  003d6	89 44 24 58	 mov	 DWORD PTR sts$5[rsp], eax

; 311  :             nbytes + ALIGN32(sizeof(sFrame)), request->Type, &(mids.get()[numAllocated]));
; 312  :         if (sts != MFX_ERR_NONE) {

  003da	83 7c 24 58 00	 cmp	 DWORD PTR sts$5[rsp], 0
  003df	0f 84 8f 00 00
	00		 je	 $LN19@AllocImpl

; 313  :             m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::AllocImpl failed to allocate frame #%d, size %d: %s\n"), numAllocated, nbytes + ALIGN32(sizeof(sFrame)), get_err_mes(sts));

  003e5	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003ed	48 83 c0 78	 add	 rax, 120		; 00000078H
  003f1	48 8b c8	 mov	 rcx, rax
  003f4	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  003f9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv225[rsp], rax
  00401	8b 4c 24 58	 mov	 ecx, DWORD PTR sts$5[rsp]
  00405	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  0040a	8b 4c 24 38	 mov	 ecx, DWORD PTR nbytes$[rsp]
  0040e	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00412	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv225[rsp]
  0041a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0041d	48 89 94 24 d0
	00 00 00	 mov	 QWORD PTR tv361[rsp], rdx
  00425	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0042a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0042f	44 8b 4c 24 54	 mov	 r9d, DWORD PTR numAllocated$[rsp]
  00434	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117950
  0043b	ba 02 00 00 00	 mov	 edx, 2
  00440	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv225[rsp]
  00448	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv361[rsp]
  00450	ff 50 20	 call	 QWORD PTR [rax+32]

; 314  :             return MFX_ERR_MEMORY_ALLOC;

  00453	c7 84 24 84 00
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T9[rsp], -4
  0045e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  00463	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  00468	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR $T9[rsp]
  0046f	e9 16 03 00 00	 jmp	 $LN1@AllocImpl
$LN19@AllocImpl:

; 315  :         }
; 316  : 
; 317  :         sFrame *fs;
; 318  :         sts = m_pBufferAllocator->Lock(m_pBufferAllocator->pthis, mids.get()[numAllocated], (mfxU8 **)&fs);

  00474	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  00479	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  0047e	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv248[rsp], rax
  00486	8b 4c 24 54	 mov	 ecx, DWORD PTR numAllocated$[rsp]
  0048a	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv249[rsp], rcx
  00492	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0049a	48 81 c2 88 00
	00 00		 add	 rdx, 136		; 00000088H
  004a1	48 8b ca	 mov	 rcx, rdx
  004a4	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  004a9	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv259[rsp], rax
  004b1	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004b9	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  004c0	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  004c5	4c 8d 44 24 68	 lea	 r8, QWORD PTR fs$6[rsp]
  004ca	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv249[rsp]
  004d2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv248[rsp]
  004da	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  004de	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv259[rsp]
  004e6	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  004ea	ff 50 28	 call	 QWORD PTR [rax+40]
  004ed	89 44 24 58	 mov	 DWORD PTR sts$5[rsp], eax

; 319  :         if (sts != MFX_ERR_NONE) {

  004f1	83 7c 24 58 00	 cmp	 DWORD PTR sts$5[rsp], 0
  004f6	0f 84 af 00 00
	00		 je	 $LN20@AllocImpl

; 320  :             m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::AllocImpl failed to unlock frame mid 0x%x: %s\n"), mids.get()[numAllocated], get_err_mes(sts));

  004fc	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00504	48 83 c0 78	 add	 rax, 120		; 00000078H
  00508	48 8b c8	 mov	 rcx, rax
  0050b	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00510	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv271[rsp], rax
  00518	8b 4c 24 58	 mov	 ecx, DWORD PTR sts$5[rsp]
  0051c	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  00521	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv274[rsp], rax
  00529	8b 4c 24 54	 mov	 ecx, DWORD PTR numAllocated$[rsp]
  0052d	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv279[rsp], rcx
  00535	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0053a	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  0053f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv271[rsp]
  00547	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0054a	48 89 8c 24 08
	01 00 00	 mov	 QWORD PTR tv360[rsp], rcx
  00552	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv274[rsp]
  0055a	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0055f	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv279[rsp]
  00567	4c 8b 0c d0	 mov	 r9, QWORD PTR [rax+rdx*8]
  0056b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117953
  00572	ba 02 00 00 00	 mov	 edx, 2
  00577	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv271[rsp]
  0057f	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv360[rsp]
  00587	ff 50 20	 call	 QWORD PTR [rax+32]

; 321  :             return MFX_ERR_MEMORY_ALLOC;

  0058a	c7 84 24 88 00
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T10[rsp], -4
  00595	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0059a	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  0059f	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR $T10[rsp]
  005a6	e9 df 01 00 00	 jmp	 $LN1@AllocImpl
$LN20@AllocImpl:

; 322  :         }
; 323  : 
; 324  :         fs->id = ID_FRAME;

  005ab	48 8b 44 24 68	 mov	 rax, QWORD PTR fs$6[rsp]
  005b0	c7 00 46 52 4d
	45		 mov	 DWORD PTR [rax], 1162695238 ; 454d5246H

; 325  :         fs->info = request->Info;

  005b6	48 8b 44 24 68	 mov	 rax, QWORD PTR fs$6[rsp]
  005bb	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR request$[rsp]
  005c3	48 8d 78 04	 lea	 rdi, QWORD PTR [rax+4]
  005c7	48 8d 71 10	 lea	 rsi, QWORD PTR [rcx+16]
  005cb	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  005d0	f3 a4		 rep movsb

; 326  :         sts = m_pBufferAllocator->Unlock(m_pBufferAllocator->pthis, mids.get()[numAllocated]);

  005d2	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  005d7	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  005dc	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv299[rsp], rax
  005e4	8b 4c 24 54	 mov	 ecx, DWORD PTR numAllocated$[rsp]
  005e8	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv300[rsp], rcx
  005f0	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  005f8	48 81 c2 88 00
	00 00		 add	 rdx, 136		; 00000088H
  005ff	48 8b ca	 mov	 rcx, rdx
  00602	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00607	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv310[rsp], rax
  0060f	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00617	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  0061e	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00623	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv300[rsp]
  0062b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv299[rsp]
  00633	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  00637	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv310[rsp]
  0063f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00643	ff 50 30	 call	 QWORD PTR [rax+48]
  00646	89 44 24 58	 mov	 DWORD PTR sts$5[rsp], eax

; 327  :         if (sts != MFX_ERR_NONE) {

  0064a	83 7c 24 58 00	 cmp	 DWORD PTR sts$5[rsp], 0
  0064f	0f 84 af 00 00
	00		 je	 $LN21@AllocImpl

; 328  :             m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::AllocImpl failed to unlock frame mid 0x%x: %s\n"), mids.get()[numAllocated], get_err_mes(sts));

  00655	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0065d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00661	48 8b c8	 mov	 rcx, rax
  00664	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00669	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv322[rsp], rax
  00671	8b 4c 24 58	 mov	 ecx, DWORD PTR sts$5[rsp]
  00675	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  0067a	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv325[rsp], rax
  00682	8b 4c 24 54	 mov	 ecx, DWORD PTR numAllocated$[rsp]
  00686	48 89 8c 24 38
	01 00 00	 mov	 QWORD PTR tv330[rsp], rcx
  0068e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  00693	e8 00 00 00 00	 call	 ?get@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEBAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::get
  00698	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv322[rsp]
  006a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  006a3	48 89 8c 24 40
	01 00 00	 mov	 QWORD PTR tv359[rsp], rcx
  006ab	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR tv325[rsp]
  006b3	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  006b8	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv330[rsp]
  006c0	4c 8b 0c d0	 mov	 r9, QWORD PTR [rax+rdx*8]
  006c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117956
  006cb	ba 02 00 00 00	 mov	 edx, 2
  006d0	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv322[rsp]
  006d8	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv359[rsp]
  006e0	ff 50 20	 call	 QWORD PTR [rax+32]

; 329  :             return MFX_ERR_MEMORY_ALLOC;

  006e3	c7 84 24 8c 00
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T11[rsp], -4
  006ee	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  006f3	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  006f8	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR $T11[rsp]
  006ff	e9 86 00 00 00	 jmp	 $LN1@AllocImpl
$LN21@AllocImpl:

; 330  :         }
; 331  :     }

  00704	e9 1f fc ff ff	 jmp	 $LN4@AllocImpl
$LN5@AllocImpl:

; 332  : 
; 333  :     response->NumFrameActual = (mfxU16)numAllocated;

  00709	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR response$[rsp]
  00711	0f b7 4c 24 54	 movzx	 ecx, WORD PTR numAllocated$[rsp]
  00716	66 89 48 18	 mov	 WORD PTR [rax+24], cx

; 334  :     response->mids = mids.release();

  0071a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0071f	e8 00 00 00 00	 call	 ?release@?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAAPEAPEAXXZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::release
  00724	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR response$[rsp]
  0072c	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 335  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocatorSys::AllocImpl Success.\n"));

  00730	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00738	48 83 c0 78	 add	 rax, 120		; 00000078H
  0073c	48 8b c8	 mov	 rcx, rax
  0073f	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00744	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv348[rsp], rax
  0074c	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv348[rsp]
  00754	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00757	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117958
  0075e	ba fe ff ff ff	 mov	 edx, -2
  00763	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv348[rsp]
  0076b	ff 50 20	 call	 QWORD PTR [rax+32]

; 336  :     return MFX_ERR_NONE;

  0076e	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T12[rsp], 0
  00779	48 8d 4c 24 48	 lea	 rcx, QWORD PTR mids$[rsp]
  0077e	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  00783	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR $T12[rsp]
$LN1@AllocImpl:

; 337  : }

  0078a	48 8b f8	 mov	 rdi, rax
  0078d	48 8b cc	 mov	 rcx, rsp
  00790	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData
  00797	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0079c	48 8b c7	 mov	 rax, rdi
  0079f	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  007a6	5f		 pop	 rdi
  007a7	5e		 pop	 rsi
  007a8	c3		 ret	 0
?AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocatorSys::AllocImpl
_TEXT	ENDS
text$x	SEGMENT
WidthAlign$ = 48
HeightAlign$ = 52
nbytes$ = 56
mids$ = 72
numAllocated$ = 84
sts$5 = 88
fs$6 = 104
$T7 = 120
$T8 = 128
$T9 = 132
$T10 = 136
$T11 = 140
$T12 = 144
tv81 = 148
tv153 = 152
tv174 = 160
tv362 = 168
tv199 = 176
tv204 = 184
tv213 = 192
tv225 = 200
tv361 = 208
tv248 = 216
tv249 = 224
tv259 = 232
tv271 = 240
tv274 = 248
tv279 = 256
tv360 = 264
tv299 = 272
tv300 = 280
tv310 = 288
tv322 = 296
tv325 = 304
tv330 = 312
tv359 = 320
tv348 = 328
this$ = 368
request$ = 376
response$ = 384
?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocatorSys::AllocImpl'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR mids$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocatorSys::AllocImpl'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
WidthAlign$ = 48
HeightAlign$ = 52
nbytes$ = 56
mids$ = 72
numAllocated$ = 84
sts$5 = 88
fs$6 = 104
$T7 = 120
$T8 = 128
$T9 = 132
$T10 = 136
$T11 = 140
$T12 = 144
tv81 = 148
tv153 = 152
tv174 = 160
tv362 = 168
tv199 = 176
tv204 = 184
tv213 = 192
tv225 = 200
tv361 = 208
tv248 = 216
tv249 = 224
tv259 = 232
tv271 = 240
tv274 = 248
tv279 = 256
tv360 = 264
tv299 = 272
tv300 = 280
tv310 = 288
tv322 = 296
tv325 = 304
tv330 = 312
tv359 = 320
tv348 = 328
this$ = 368
request$ = 376
response$ = 384
?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocatorSys::AllocImpl'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR mids$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$unique_ptr@$$BY0A@PEAXU?$default_delete@$$BY0A@PEAX@std@@@std@@QEAA@XZ ; std::unique_ptr<void * [0],std::default_delete<void * [0]> >::~unique_ptr<void * [0],std::default_delete<void * [0]> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??AllocImpl@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocatorSys::AllocImpl'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
nFrameCount$1 = 32
i$2 = 36
sts$3 = 40
$T4 = 48
tv91 = 56
tv154 = 64
tv133 = 72
tv148 = 80
this$ = 112
response$ = 120
?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocatorSys::ReleaseResponse

; 339  : mfxStatus QSVAllocatorSys::ReleaseResponse(mfxFrameAllocResponse *response) {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 18 00 00 00	 mov	 ecx, 24
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 340  :     if (!response) {

  00023	48 83 7c 24 78
	00		 cmp	 QWORD PTR response$[rsp], 0
  00029	75 0a		 jne	 SHORT $LN5@ReleaseRes

; 341  :         return MFX_ERR_NULL_PTR;

  0002b	b8 fe ff ff ff	 mov	 eax, -2
  00030	e9 43 01 00 00	 jmp	 $LN1@ReleaseRes
$LN5@ReleaseRes:

; 342  :     }
; 343  : 
; 344  :     if (!m_pBufferAllocator) {

  00035	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0003a	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	75 0a		 jne	 SHORT $LN6@ReleaseRes

; 345  :         return MFX_ERR_NOT_INITIALIZED;

  0004f	b8 f8 ff ff ff	 mov	 eax, -8
  00054	e9 1f 01 00 00	 jmp	 $LN1@ReleaseRes
$LN6@ReleaseRes:

; 346  :     }
; 347  : 
; 348  :     if (response->mids) {

  00059	48 8b 44 24 78	 mov	 rax, QWORD PTR response$[rsp]
  0005e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00063	0f 84 ce 00 00
	00		 je	 $LN7@ReleaseRes

; 349  :         int nFrameCount = response->NumFrameActual;

  00069	48 8b 44 24 78	 mov	 rax, QWORD PTR response$[rsp]
  0006e	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00072	89 44 24 20	 mov	 DWORD PTR nFrameCount$1[rsp], eax

; 350  :         for (int i = 0; i < nFrameCount; i++) {

  00076	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$2[rsp], 0
  0007e	eb 0a		 jmp	 SHORT $LN4@ReleaseRes
$LN2@ReleaseRes:
  00080	8b 44 24 24	 mov	 eax, DWORD PTR i$2[rsp]
  00084	ff c0		 inc	 eax
  00086	89 44 24 24	 mov	 DWORD PTR i$2[rsp], eax
$LN4@ReleaseRes:
  0008a	8b 44 24 20	 mov	 eax, DWORD PTR nFrameCount$1[rsp]
  0008e	39 44 24 24	 cmp	 DWORD PTR i$2[rsp], eax
  00092	0f 8d 87 00 00
	00		 jge	 $LN3@ReleaseRes

; 351  :             if (response->mids[i]) {

  00098	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$2[rsp]
  0009d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR response$[rsp]
  000a2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a6	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  000ab	74 6d		 je	 SHORT $LN8@ReleaseRes

; 352  :                 mfxStatus sts = m_pBufferAllocator->Free(m_pBufferAllocator->pthis, response->mids[i]);

  000ad	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$2[rsp]
  000b2	48 89 44 24 38	 mov	 QWORD PTR tv91[rsp], rax
  000b7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR response$[rsp]
  000bc	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c0	48 89 4c 24 40	 mov	 QWORD PTR tv154[rsp], rcx
  000c5	48 8b 54 24 70	 mov	 rdx, QWORD PTR this$[rsp]
  000ca	48 81 c2 88 00
	00 00		 add	 rdx, 136		; 00000088H
  000d1	48 8b ca	 mov	 rcx, rdx
  000d4	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  000d9	48 89 44 24 48	 mov	 QWORD PTR tv133[rsp], rax
  000de	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000e3	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  000ea	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  000ef	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv154[rsp]
  000f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv91[rsp]
  000f9	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  000fd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv133[rsp]
  00102	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00106	ff 50 38	 call	 QWORD PTR [rax+56]
  00109	89 44 24 28	 mov	 DWORD PTR sts$3[rsp], eax

; 353  :                 if (MFX_ERR_NONE != sts) return sts;

  0010d	83 7c 24 28 00	 cmp	 DWORD PTR sts$3[rsp], 0
  00112	74 06		 je	 SHORT $LN9@ReleaseRes
  00114	8b 44 24 28	 mov	 eax, DWORD PTR sts$3[rsp]
  00118	eb 5e		 jmp	 SHORT $LN1@ReleaseRes
$LN9@ReleaseRes:
$LN8@ReleaseRes:

; 354  :             }
; 355  :         }

  0011a	e9 61 ff ff ff	 jmp	 $LN2@ReleaseRes
$LN3@ReleaseRes:

; 356  :         delete [] response->mids;

  0011f	48 8b 44 24 78	 mov	 rax, QWORD PTR response$[rsp]
  00124	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00128	48 89 44 24 30	 mov	 QWORD PTR $T4[rsp], rax
  0012d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T4[rsp]
  00132	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN7@ReleaseRes:

; 357  :     }
; 358  :     response->mids = 0;

  00137	48 8b 44 24 78	 mov	 rax, QWORD PTR response$[rsp]
  0013c	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 359  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocatorSys::ReleaseResponse Success.\n"));

  00144	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00149	48 83 c0 78	 add	 rax, 120		; 00000078H
  0014d	48 8b c8	 mov	 rcx, rax
  00150	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00155	48 89 44 24 50	 mov	 QWORD PTR tv148[rsp], rax
  0015a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv148[rsp]
  0015f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00162	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117976
  00169	ba fe ff ff ff	 mov	 edx, -2
  0016e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv148[rsp]
  00173	ff 50 20	 call	 QWORD PTR [rax+32]

; 360  :     return MFX_ERR_NONE;

  00176	33 c0		 xor	 eax, eax
$LN1@ReleaseRes:

; 361  : }

  00178	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0017c	5f		 pop	 rdi
  0017d	c3		 ret	 0
?ReleaseResponse@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocatorSys::ReleaseResponse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
sts$ = 32
tv76 = 36
this$ = 64
request$ = 72
?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z PROC ; QSVAllocatorSys::CheckRequestType

; 242  : mfxStatus QSVAllocatorSys::CheckRequestType(mfxFrameAllocRequest *request) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 243  :     mfxStatus sts = QSVAllocator::CheckRequestType(request);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR request$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z ; QSVAllocator::CheckRequestType
  00032	89 44 24 20	 mov	 DWORD PTR sts$[rsp], eax

; 244  :     if (MFX_ERR_NONE != sts) {

  00036	83 7c 24 20 00	 cmp	 DWORD PTR sts$[rsp], 0
  0003b	74 06		 je	 SHORT $LN2@CheckReque

; 245  :         return sts;

  0003d	8b 44 24 20	 mov	 eax, DWORD PTR sts$[rsp]
  00041	eb 26		 jmp	 SHORT $LN1@CheckReque
$LN2@CheckReque:

; 246  :     }
; 247  : 
; 248  :     return ((request->Type & MFX_MEMTYPE_SYSTEM_MEMORY) != 0) ? MFX_ERR_NONE : MFX_ERR_UNSUPPORTED;

  00043	48 8b 44 24 48	 mov	 rax, QWORD PTR request$[rsp]
  00048	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  0004c	83 e0 40	 and	 eax, 64			; 00000040H
  0004f	85 c0		 test	 eax, eax
  00051	74 0a		 je	 SHORT $LN4@CheckReque
  00053	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
  0005b	eb 08		 jmp	 SHORT $LN5@CheckReque
$LN4@CheckReque:
  0005d	c7 44 24 24 fd
	ff ff ff	 mov	 DWORD PTR tv76[rsp], -3
$LN5@CheckReque:
  00065	8b 44 24 24	 mov	 eax, DWORD PTR tv76[rsp]
$LN1@CheckReque:

; 249  : }

  00069	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
?CheckRequestType@QSVAllocatorSys@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z ENDP ; QSVAllocatorSys::CheckRequestType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
this$ = 16
mid$ = 24
handle$ = 32
?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z PROC ; QSVAllocatorSys::GetFrameHDL

; 238  : mfxStatus QSVAllocatorSys::GetFrameHDL(mfxMemId mid, mfxHDL *handle) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi

; 239  :     return MFX_ERR_UNSUPPORTED;

  00010	b8 fd ff ff ff	 mov	 eax, -3

; 240  : }

  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
?GetFrameHDL@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAX@Z ENDP ; QSVAllocatorSys::GetFrameHDL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
sts$ = 48
tv85 = 56
tv129 = 64
tv158 = 72
tv151 = 80
this$ = 112
mid$ = 120
ptr$ = 128
?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z PROC ; QSVAllocatorSys::FrameUnlock

; 217  : mfxStatus QSVAllocatorSys::FrameUnlock(mfxMemId mid, mfxFrameData *ptr) {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 18 00 00 00	 mov	 ecx, 24
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 218  :     if (!m_pBufferAllocator) {

  00028	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	75 0a		 jne	 SHORT $LN2@FrameUnloc

; 219  :         return MFX_ERR_NOT_INITIALIZED;

  00042	b8 f8 ff ff ff	 mov	 eax, -8
  00047	e9 1f 01 00 00	 jmp	 $LN1@FrameUnloc
$LN2@FrameUnloc:

; 220  :     }
; 221  : 
; 222  :     mfxStatus sts = m_pBufferAllocator->Unlock(m_pBufferAllocator->pthis, mid);

  0004c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  0005f	48 89 44 24 38	 mov	 QWORD PTR tv85[rsp], rax
  00064	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00069	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00070	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00075	48 8b 54 24 78	 mov	 rdx, QWORD PTR mid$[rsp]
  0007a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv85[rsp]
  0007f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00083	ff 50 30	 call	 QWORD PTR [rax+48]
  00086	89 44 24 30	 mov	 DWORD PTR sts$[rsp], eax

; 223  :     if (MFX_ERR_NONE != sts) {

  0008a	83 7c 24 30 00	 cmp	 DWORD PTR sts$[rsp], 0
  0008f	74 58		 je	 SHORT $LN3@FrameUnloc

; 224  :         m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::FrameUnlock failed to unlock frame mid 0x%x: %s\n"), mid, get_err_mes(sts));

  00091	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00096	48 83 c0 78	 add	 rax, 120		; 00000078H
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  000a2	48 89 44 24 40	 mov	 QWORD PTR tv129[rsp], rax
  000a7	8b 4c 24 30	 mov	 ecx, DWORD PTR sts$[rsp]
  000ab	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv129[rsp]
  000b5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b8	48 89 4c 24 48	 mov	 QWORD PTR tv158[rsp], rcx
  000bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c2	4c 8b 4c 24 78	 mov	 r9, QWORD PTR mid$[rsp]
  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117652
  000ce	ba 02 00 00 00	 mov	 edx, 2
  000d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv129[rsp]
  000d8	48 8b 44 24 48	 mov	 rax, QWORD PTR tv158[rsp]
  000dd	ff 50 20	 call	 QWORD PTR [rax+32]

; 225  :         return sts;

  000e0	8b 44 24 30	 mov	 eax, DWORD PTR sts$[rsp]
  000e4	e9 82 00 00 00	 jmp	 $LN1@FrameUnloc
$LN3@FrameUnloc:

; 226  :     }
; 227  : 
; 228  :     if (NULL != ptr) {

  000e9	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR ptr$[rsp], 0
  000f2	74 3e		 je	 SHORT $LN4@FrameUnloc

; 229  :         ptr->Pitch = 0;

  000f4	33 c0		 xor	 eax, eax
  000f6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  000fe	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 230  :         ptr->Y     = nullptr;

  00102	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0010a	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 231  :         ptr->U     = nullptr;

  00112	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0011a	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 232  :         ptr->V     = nullptr;

  00122	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0012a	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
$LN4@FrameUnloc:

; 233  :     }
; 234  :     m_pQSVLog->write(RGY_LOG_TRACE, _T("QSVAllocatorSys::FrameUnlock success mid 0x%x\n"), mid);

  00132	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00137	48 83 c0 78	 add	 rax, 120		; 00000078H
  0013b	48 8b c8	 mov	 rcx, rax
  0013e	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00143	48 89 44 24 50	 mov	 QWORD PTR tv151[rsp], rax
  00148	48 8b 44 24 50	 mov	 rax, QWORD PTR tv151[rsp]
  0014d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00150	4c 8b 4c 24 78	 mov	 r9, QWORD PTR mid$[rsp]
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117654
  0015c	ba fd ff ff ff	 mov	 edx, -3
  00161	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv151[rsp]
  00166	ff 50 20	 call	 QWORD PTR [rax+32]

; 235  :     return MFX_ERR_NONE;

  00169	33 c0		 xor	 eax, eax
$LN1@FrameUnloc:

; 236  : }

  0016b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0016f	5f		 pop	 rdi
  00170	c3		 ret	 0
?FrameUnlock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z ENDP ; QSVAllocatorSys::FrameUnlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
fs$ = 56
sts$ = 68
WidthAlign$ = 72
HeightAlign$ = 76
tv87 = 80
tv131 = 88
tv368 = 96
tv158 = 104
tv168 = 112
tv367 = 120
tv189 = 128
tv192 = 136
tv338 = 144
this$ = 176
mid$ = 184
ptr$ = 192
?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z PROC ; QSVAllocatorSys::FrameLock

; 112  : mfxStatus QSVAllocatorSys::FrameLock(mfxMemId mid, mfxFrameData *ptr) {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 113  :     if (!m_pBufferAllocator) {

  0002e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??B?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBA_NXZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator bool
  00044	0f b6 c0	 movzx	 eax, al
  00047	85 c0		 test	 eax, eax
  00049	75 0a		 jne	 SHORT $LN4@FrameLock

; 114  :         return MFX_ERR_NOT_INITIALIZED;

  0004b	b8 f8 ff ff ff	 mov	 eax, -8
  00050	e9 17 07 00 00	 jmp	 $LN1@FrameLock
$LN4@FrameLock:

; 115  :     }
; 116  :     if (!ptr) {

  00055	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR ptr$[rsp], 0
  0005e	75 0a		 jne	 SHORT $LN5@FrameLock

; 117  :         return MFX_ERR_NULL_PTR;

  00060	b8 fe ff ff ff	 mov	 eax, -2
  00065	e9 02 07 00 00	 jmp	 $LN1@FrameLock
$LN5@FrameLock:

; 118  :     }
; 119  : 
; 120  :     sFrame *fs = 0;

  0006a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR fs$[rsp], 0

; 121  :     mfxStatus sts = m_pBufferAllocator->Lock(m_pBufferAllocator->pthis, mid, (mfxU8 **)&fs);

  00073	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0007b	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00089	48 89 44 24 50	 mov	 QWORD PTR tv87[rsp], rax
  0008e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00096	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  0009d	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  000a2	4c 8d 44 24 38	 lea	 r8, QWORD PTR fs$[rsp]
  000a7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR mid$[rsp]
  000af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv87[rsp]
  000b4	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000b8	ff 50 28	 call	 QWORD PTR [rax+40]
  000bb	89 44 24 44	 mov	 DWORD PTR sts$[rsp], eax

; 122  :     if (MFX_ERR_NONE != sts) {

  000bf	83 7c 24 44 00	 cmp	 DWORD PTR sts$[rsp], 0
  000c4	74 5e		 je	 SHORT $LN6@FrameLock

; 123  :         m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::FrameLock Failed to Lock frmame mid 0x%x: %s\n"), mid, get_err_mes(sts));

  000c6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000ce	48 83 c0 78	 add	 rax, 120		; 00000078H
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  000da	48 89 44 24 58	 mov	 QWORD PTR tv131[rsp], rax
  000df	8b 4c 24 44	 mov	 ecx, DWORD PTR sts$[rsp]
  000e3	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  000e8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv131[rsp]
  000ed	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f0	48 89 4c 24 60	 mov	 QWORD PTR tv368[rsp], rcx
  000f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fa	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR mid$[rsp]
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117628
  00109	ba 02 00 00 00	 mov	 edx, 2
  0010e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv131[rsp]
  00113	48 8b 44 24 60	 mov	 rax, QWORD PTR tv368[rsp]
  00118	ff 50 20	 call	 QWORD PTR [rax+32]

; 124  :         return sts;

  0011b	8b 44 24 44	 mov	 eax, DWORD PTR sts$[rsp]
  0011f	e9 48 06 00 00	 jmp	 $LN1@FrameLock
$LN6@FrameLock:

; 125  :     }
; 126  :     if (ID_FRAME != fs->id) {

  00124	48 8b 44 24 38	 mov	 rax, QWORD PTR fs$[rsp]
  00129	81 38 46 52 4d
	45		 cmp	 DWORD PTR [rax], 1162695238 ; 454d5246H
  0012f	0f 84 a2 00 00
	00		 je	 $LN7@FrameLock

; 127  :         m_pBufferAllocator->Unlock(m_pBufferAllocator->pthis, mid);

  00135	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0013d	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00143	48 8b c8	 mov	 rcx, rax
  00146	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  0014b	48 89 44 24 68	 mov	 QWORD PTR tv158[rsp], rax
  00150	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00158	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  0015f	e8 00 00 00 00	 call	 ??C?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEBAPEAVQSVBufferAllocatorSys@@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::operator->
  00164	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR mid$[rsp]
  0016c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv158[rsp]
  00171	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00175	ff 50 30	 call	 QWORD PTR [rax+48]

; 128  :         m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocatorSys::FrameLock Invalid mem handle\n"), mid, get_err_mes(sts));

  00178	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00180	48 83 c0 78	 add	 rax, 120		; 00000078H
  00184	48 8b c8	 mov	 rcx, rax
  00187	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  0018c	48 89 44 24 70	 mov	 QWORD PTR tv168[rsp], rax
  00191	8b 4c 24 44	 mov	 ecx, DWORD PTR sts$[rsp]
  00195	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  0019a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv168[rsp]
  0019f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a2	48 89 4c 24 78	 mov	 QWORD PTR tv367[rsp], rcx
  001a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ac	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR mid$[rsp]
  001b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117630
  001bb	ba 02 00 00 00	 mov	 edx, 2
  001c0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv168[rsp]
  001c5	48 8b 44 24 78	 mov	 rax, QWORD PTR tv367[rsp]
  001ca	ff 50 20	 call	 QWORD PTR [rax+32]

; 129  :         return MFX_ERR_INVALID_HANDLE;

  001cd	b8 fa ff ff ff	 mov	 eax, -6
  001d2	e9 95 05 00 00	 jmp	 $LN1@FrameLock
$LN7@FrameLock:

; 130  :     }
; 131  : 
; 132  :     uint32_t WidthAlign  = ALIGN32(fs->info.Width);

  001d7	48 8b 44 24 38	 mov	 rax, QWORD PTR fs$[rsp]
  001dc	0f b7 40 28	 movzx	 eax, WORD PTR [rax+40]
  001e0	83 c0 1f	 add	 eax, 31
  001e3	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  001e6	89 44 24 48	 mov	 DWORD PTR WidthAlign$[rsp], eax

; 133  :     uint32_t HeightAlign = ALIGN32(fs->info.Height);

  001ea	48 8b 44 24 38	 mov	 rax, QWORD PTR fs$[rsp]
  001ef	0f b7 40 2a	 movzx	 eax, WORD PTR [rax+42]
  001f3	83 c0 1f	 add	 eax, 31
  001f6	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  001f9	89 44 24 4c	 mov	 DWORD PTR HeightAlign$[rsp], eax

; 134  :     ptr->B = ptr->Y = (uint8_t *)fs + ALIGN32(sizeof(sFrame));

  001fd	48 8b 44 24 38	 mov	 rax, QWORD PTR fs$[rsp]
  00202	48 83 c0 60	 add	 rax, 96			; 00000060H
  00206	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv189[rsp], rax
  0020e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00216	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  0021e	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  00222	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0022a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00232	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 135  : 
; 136  :     switch (fs->info.FourCC) {

  00236	48 8b 44 24 38	 mov	 rax, QWORD PTR fs$[rsp]
  0023b	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0023e	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  00245	81 bc 24 88 00
	00 00 52 47 42
	33		 cmp	 DWORD PTR tv192[rsp], 859981650 ; 33424752H
  00250	0f 87 8e 00 00
	00		 ja	 $LN21@FrameLock
  00256	81 bc 24 88 00
	00 00 52 47 42
	33		 cmp	 DWORD PTR tv192[rsp], 859981650 ; 33424752H
  00261	0f 84 97 02 00
	00		 je	 $LN13@FrameLock
  00267	81 bc 24 88 00
	00 00 4e 56 31
	32		 cmp	 DWORD PTR tv192[rsp], 842094158 ; 3231564eH
  00272	77 49		 ja	 SHORT $LN22@FrameLock
  00274	81 bc 24 88 00
	00 00 4e 56 31
	32		 cmp	 DWORD PTR tv192[rsp], 842094158 ; 3231564eH
  0027f	0f 84 b9 00 00
	00		 je	 $LN8@FrameLock
  00285	81 bc 24 88 00
	00 00 50 30 31
	30		 cmp	 DWORD PTR tv192[rsp], 808530000 ; 30313050H
  00290	0f 84 54 03 00
	00		 je	 $LN16@FrameLock
  00296	81 bc 24 88 00
	00 00 50 32 31
	30		 cmp	 DWORD PTR tv192[rsp], 808530512 ; 30313250H
  002a1	0f 84 9c 03 00
	00		 je	 $LN17@FrameLock
  002a7	81 bc 24 88 00
	00 00 52 47 31
	30		 cmp	 DWORD PTR tv192[rsp], 808535890 ; 30314752H
  002b2	0f 84 96 02 00
	00		 je	 $LN14@FrameLock
  002b8	e9 60 04 00 00	 jmp	 $LN19@FrameLock
$LN22@FrameLock:
  002bd	81 bc 24 88 00
	00 00 59 56 31
	32		 cmp	 DWORD PTR tv192[rsp], 842094169 ; 32315659H
  002c8	0f 84 18 01 00
	00		 je	 $LN10@FrameLock
  002ce	81 bc 24 88 00
	00 00 59 55 59
	32		 cmp	 DWORD PTR tv192[rsp], 844715353 ; 32595559H
  002d9	0f 84 d0 01 00
	00		 je	 $LN12@FrameLock
  002df	e9 39 04 00 00	 jmp	 $LN19@FrameLock
$LN21@FrameLock:
  002e4	81 bc 24 88 00
	00 00 52 47 42
	34		 cmp	 DWORD PTR tv192[rsp], 876758866 ; 34424752H
  002ef	0f 84 59 02 00
	00		 je	 $LN14@FrameLock
  002f5	81 bc 24 88 00
	00 00 4e 56 31
	36		 cmp	 DWORD PTR tv192[rsp], 909203022 ; 3631564eH
  00300	0f 84 8c 00 00
	00		 je	 $LN9@FrameLock
  00306	81 bc 24 88 00
	00 00 52 31 36
	55		 cmp	 DWORD PTR tv192[rsp], 1429614930 ; 55363152H
  00311	0f 84 a3 02 00
	00		 je	 $LN15@FrameLock
  00317	81 bc 24 88 00
	00 00 41 59 55
	56		 cmp	 DWORD PTR tv192[rsp], 1448433985 ; 56555941H
  00322	0f 84 74 03 00
	00		 je	 $LN18@FrameLock
  00328	81 bc 24 88 00
	00 00 55 59 56
	59		 cmp	 DWORD PTR tv192[rsp], 1498831189 ; 59565955H
  00333	0f 84 0f 01 00
	00		 je	 $LN11@FrameLock
  00339	e9 df 03 00 00	 jmp	 $LN19@FrameLock
$LN8@FrameLock:

; 137  :     case MFX_FOURCC_NV12:
; 138  :         ptr->U = ptr->Y + WidthAlign * HeightAlign;

  0033e	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00342	0f af 44 24 4c	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  00347	8b c0		 mov	 eax, eax
  00349	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00351	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  00355	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  0035d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 139  :         ptr->V = ptr->U + 1;

  00361	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00369	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0036d	48 ff c0	 inc	 rax
  00370	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00378	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 140  :         ptr->Pitch = (mfxU16)WidthAlign;

  0037c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00384	0f b7 4c 24 48	 movzx	 ecx, WORD PTR WidthAlign$[rsp]
  00389	66 89 48 2e	 mov	 WORD PTR [rax+46], cx

; 141  :         break;

  0038d	e9 92 03 00 00	 jmp	 $LN2@FrameLock
$LN9@FrameLock:

; 142  :     case MFX_FOURCC_NV16:
; 143  :         ptr->U = ptr->Y + WidthAlign * HeightAlign;

  00392	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00396	0f af 44 24 4c	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  0039b	8b c0		 mov	 eax, eax
  0039d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  003a5	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  003a9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  003b1	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 144  :         ptr->V = ptr->U + 1;

  003b5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  003bd	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  003c1	48 ff c0	 inc	 rax
  003c4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  003cc	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 145  :         ptr->Pitch = (mfxU16)WidthAlign;

  003d0	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  003d8	0f b7 4c 24 48	 movzx	 ecx, WORD PTR WidthAlign$[rsp]
  003dd	66 89 48 2e	 mov	 WORD PTR [rax+46], cx

; 146  :         break;

  003e1	e9 3e 03 00 00	 jmp	 $LN2@FrameLock
$LN10@FrameLock:

; 147  :     case MFX_FOURCC_YV12:
; 148  :         ptr->V = ptr->Y + WidthAlign * HeightAlign;

  003e6	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  003ea	0f af 44 24 4c	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  003ef	8b c0		 mov	 eax, eax
  003f1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  003f9	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  003fd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00405	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 149  :         ptr->U = ptr->V + (WidthAlign >> 1) * (HeightAlign >> 1);

  00409	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  0040d	d1 e8		 shr	 eax, 1
  0040f	8b 4c 24 4c	 mov	 ecx, DWORD PTR HeightAlign$[rsp]
  00413	d1 e9		 shr	 ecx, 1
  00415	0f af c1	 imul	 eax, ecx
  00418	8b c0		 mov	 eax, eax
  0041a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00422	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00426	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  0042e	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 150  :         ptr->Pitch = (mfxU16)WidthAlign;

  00432	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0043a	0f b7 4c 24 48	 movzx	 ecx, WORD PTR WidthAlign$[rsp]
  0043f	66 89 48 2e	 mov	 WORD PTR [rax+46], cx

; 151  :         break;

  00443	e9 dc 02 00 00	 jmp	 $LN2@FrameLock
$LN11@FrameLock:

; 152  :     case MFX_FOURCC_UYVY:
; 153  :         ptr->U = ptr->Y;

  00448	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00450	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00458	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0045c	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 154  :         ptr->Y = ptr->U + 1;

  00460	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00468	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0046c	48 ff c0	 inc	 rax
  0046f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00477	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 155  :         ptr->V = ptr->U + 2;

  0047b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00483	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00487	48 83 c0 02	 add	 rax, 2
  0048b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00493	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 156  :         ptr->Pitch = 2 * (mfxU16)WidthAlign;

  00497	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  0049c	d1 e0		 shl	 eax, 1
  0049e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  004a6	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 157  :         break;

  004aa	e9 75 02 00 00	 jmp	 $LN2@FrameLock
$LN12@FrameLock:

; 158  :     case MFX_FOURCC_YUY2:
; 159  :         ptr->U = ptr->Y + 1;

  004af	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  004b7	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004bb	48 ff c0	 inc	 rax
  004be	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  004c6	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 160  :         ptr->V = ptr->Y + 3;

  004ca	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  004d2	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004d6	48 83 c0 03	 add	 rax, 3
  004da	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  004e2	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 161  :         ptr->Pitch = 2 * (mfxU16)WidthAlign;

  004e6	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  004eb	d1 e0		 shl	 eax, 1
  004ed	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  004f5	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 162  :         break;

  004f9	e9 26 02 00 00	 jmp	 $LN2@FrameLock
$LN13@FrameLock:

; 163  :     case MFX_FOURCC_RGB3:
; 164  :         ptr->G = ptr->B + 1;

  004fe	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00506	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0050a	48 ff c0	 inc	 rax
  0050d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00515	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 165  :         ptr->R = ptr->B + 2;

  00519	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00521	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00525	48 83 c0 02	 add	 rax, 2
  00529	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00531	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 166  :         ptr->Pitch = 3 * (mfxU16)WidthAlign;

  00535	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  0053a	6b c0 03	 imul	 eax, eax, 3
  0053d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00545	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 167  :         break;

  00549	e9 d6 01 00 00	 jmp	 $LN2@FrameLock
$LN14@FrameLock:

; 168  :     case MFX_FOURCC_RGB4:
; 169  :     case MFX_FOURCC_A2RGB10:
; 170  :         ptr->G = ptr->B + 1;

  0054e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00556	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0055a	48 ff c0	 inc	 rax
  0055d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00565	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 171  :         ptr->R = ptr->B + 2;

  00569	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00571	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00575	48 83 c0 02	 add	 rax, 2
  00579	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00581	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 172  :         ptr->A = ptr->B + 3;

  00585	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0058d	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00591	48 83 c0 03	 add	 rax, 3
  00595	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  0059d	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 173  :         ptr->Pitch = 4 * (mfxU16)WidthAlign;

  005a1	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  005a6	c1 e0 02	 shl	 eax, 2
  005a9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  005b1	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 174  :         break;

  005b5	e9 6a 01 00 00	 jmp	 $LN2@FrameLock
$LN15@FrameLock:

; 175  :      case MFX_FOURCC_R16:
; 176  :         ptr->Y16 = (mfxU16 *)ptr->B;

  005ba	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  005c2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  005ca	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  005ce	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 177  :         ptr->Pitch = 2 * (mfxU16)WidthAlign;

  005d2	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  005d7	d1 e0		 shl	 eax, 1
  005d9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  005e1	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 178  :         break;

  005e5	e9 3a 01 00 00	 jmp	 $LN2@FrameLock
$LN16@FrameLock:

; 179  :     case MFX_FOURCC_P010:
; 180  :         ptr->U = ptr->Y + WidthAlign * HeightAlign * 2;

  005ea	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  005ee	0f af 44 24 4c	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  005f3	d1 e0		 shl	 eax, 1
  005f5	8b c0		 mov	 eax, eax
  005f7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  005ff	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  00603	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  0060b	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 181  :         ptr->V = ptr->U + 2;

  0060f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00617	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0061b	48 83 c0 02	 add	 rax, 2
  0061f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00627	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 182  :         ptr->Pitch = (mfxU16)WidthAlign * 2;

  0062b	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  00630	d1 e0		 shl	 eax, 1
  00632	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  0063a	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 183  :         break;

  0063e	e9 e1 00 00 00	 jmp	 $LN2@FrameLock
$LN17@FrameLock:

; 184  :     case MFX_FOURCC_P210:
; 185  :         ptr->U = ptr->Y + WidthAlign * HeightAlign * 2;

  00643	8b 44 24 48	 mov	 eax, DWORD PTR WidthAlign$[rsp]
  00647	0f af 44 24 4c	 imul	 eax, DWORD PTR HeightAlign$[rsp]
  0064c	d1 e0		 shl	 eax, 1
  0064e	8b c0		 mov	 eax, eax
  00650	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00658	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  0065c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00664	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 186  :         ptr->V = ptr->U + 2;

  00668	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  00670	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00674	48 83 c0 02	 add	 rax, 2
  00678	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00680	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 187  :         ptr->Pitch = (mfxU16)WidthAlign * 2;

  00684	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  00689	d1 e0		 shl	 eax, 1
  0068b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00693	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 188  :         break;

  00697	e9 88 00 00 00	 jmp	 $LN2@FrameLock
$LN18@FrameLock:

; 189  :     case MFX_FOURCC_AYUV:
; 190  :         ptr->Y = ptr->B;

  0069c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  006a4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  006ac	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  006b0	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 191  :         ptr->U = ptr->Y + 1;

  006b4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  006bc	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  006c0	48 ff c0	 inc	 rax
  006c3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  006cb	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 192  :         ptr->V = ptr->Y + 2;

  006cf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  006d7	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  006db	48 83 c0 02	 add	 rax, 2
  006df	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  006e7	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 193  :         ptr->A = ptr->Y + 3;

  006eb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  006f3	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  006f7	48 83 c0 03	 add	 rax, 3
  006fb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00703	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 194  :         ptr->Pitch = 4 * (mfxU16)WidthAlign;

  00707	0f b7 44 24 48	 movzx	 eax, WORD PTR WidthAlign$[rsp]
  0070c	c1 e0 02	 shl	 eax, 2
  0070f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00717	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 195  :         break;

  0071b	eb 07		 jmp	 SHORT $LN2@FrameLock
$LN19@FrameLock:

; 196  : #ifdef FUTURE_API
; 197  :     case MFX_FOURCC_Y210:
; 198  :     case MFX_FOURCC_Y216:
; 199  :         ptr->Y16 = (mfxU16 *)ptr->B;
; 200  :         ptr->U16 = ptr->Y16 + 1;
; 201  :         ptr->V16 = ptr->Y16 + 3;
; 202  :         //4 words per macropixel -> 2 words per pixel -> 4 bytes per pixel
; 203  :         ptr->Pitch = 4 * (mfxU16)WidthAlign;
; 204  :         break;
; 205  :     case MFX_FOURCC_Y410:
; 206  :         ptr->U = ptr->V = ptr->A = ptr->Y;
; 207  :         ptr->Pitch = 4 * (mfxU16)WidthAlign;
; 208  :         break;
; 209  : #endif
; 210  :     default:
; 211  :         return MFX_ERR_UNSUPPORTED;

  0071d	b8 fd ff ff ff	 mov	 eax, -3
  00722	eb 48		 jmp	 SHORT $LN1@FrameLock
$LN2@FrameLock:

; 212  :     }
; 213  :     m_pQSVLog->write(RGY_LOG_TRACE, _T("QSVAllocatorSys::FrameLock success mid 0x%x\n"), mid);

  00724	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0072c	48 83 c0 78	 add	 rax, 120		; 00000078H
  00730	48 8b c8	 mov	 rcx, rax
  00733	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00738	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv338[rsp], rax
  00740	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  00748	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0074b	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR mid$[rsp]
  00753	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG117643
  0075a	ba fd ff ff ff	 mov	 edx, -3
  0075f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv338[rsp]
  00767	ff 50 20	 call	 QWORD PTR [rax+32]

; 214  :     return MFX_ERR_NONE;

  0076a	33 c0		 xor	 eax, eax
$LN1@FrameLock:

; 215  : }

  0076c	48 8b f8	 mov	 rdi, rax
  0076f	48 8b cc	 mov	 rcx, rsp
  00772	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z$rtcFrameData
  00779	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0077e	48 8b c7	 mov	 rax, rdi
  00781	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00788	5f		 pop	 rdi
  00789	c3		 ret	 0
?FrameLock@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAUmfxFrameData@@@Z ENDP ; QSVAllocatorSys::FrameLock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
sts$ = 32
this$ = 64
?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ PROC	; QSVAllocatorSys::Close

; 106  : mfxStatus QSVAllocatorSys::Close() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 107  :     mfxStatus sts = QSVAllocator::Close();

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ ; QSVAllocator::Close
  00028	89 44 24 20	 mov	 DWORD PTR sts$[rsp], eax

; 108  :     m_pBufferAllocator.reset();

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00037	33 d2		 xor	 edx, edx
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::reset

; 109  :     return sts;

  00041	8b 44 24 20	 mov	 eax, DWORD PTR sts$[rsp]

; 110  : }

  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ ENDP	; QSVAllocatorSys::Close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv85 = 56
this$ = 80
pParams$ = 88
pQSVLog$ = 96
?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z PROC ; QSVAllocatorSys::Init

; 100  : mfxStatus QSVAllocatorSys::Init(mfxAllocatorParams *pParams, shared_ptr<RGYLog> pQSVLog) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 101  :     m_pQSVLog = pQSVLog;

  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 83 c0 78	 add	 rax, 120		; 00000078H
  00031	48 8b 54 24 60	 mov	 rdx, QWORD PTR pQSVLog$[rsp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<RGYLog>::operator=

; 102  :     m_pBufferAllocator.reset(new QSVBufferAllocatorSys());

  0003e	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00043	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00048	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0004d	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00053	74 11		 je	 SHORT $LN3@Init
  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0005a	e8 00 00 00 00	 call	 ??0QSVBufferAllocatorSys@@QEAA@XZ ; QSVBufferAllocatorSys::QSVBufferAllocatorSys
  0005f	48 89 44 24 38	 mov	 QWORD PTR tv85[rsp], rax
  00064	eb 09		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00066	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
$LN4@Init:
  0006f	48 8b 44 24 38	 mov	 rax, QWORD PTR tv85[rsp]
  00074	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00079	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00084	48 8b 54 24 20	 mov	 rdx, QWORD PTR $T1[rsp]
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 ?reset@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAAXPEAVQSVBufferAllocatorSys@@@Z ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::reset

; 103  :     return MFX_ERR_NONE;

  00091	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T3[rsp], 0
  00099	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pQSVLog$[rsp]
  0009e	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  000a3	8b 44 24 30	 mov	 eax, DWORD PTR $T3[rsp]

; 104  : }

  000a7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ab	5f		 pop	 rdi
  000ac	c3		 ret	 0
?Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z ENDP ; QSVAllocatorSys::Init
_TEXT	ENDS
text$x	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv85 = 56
this$ = 80
pParams$ = 88
pQSVLog$ = 96
?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA PROC ; `QSVAllocatorSys::Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 60	 mov	 rcx, QWORD PTR pQSVLog$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA ENDP ; `QSVAllocatorSys::Init'::`1'::dtor$0
$T1 = 32
$T2 = 40
$T3 = 48
tv85 = 56
this$ = 80
pParams$ = 88
pQSVLog$ = 96
?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA PROC ; `QSVAllocatorSys::Init'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0003b	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  0003f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA ENDP ; `QSVAllocatorSys::Init'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv85 = 56
this$ = 80
pParams$ = 88
pQSVLog$ = 96
?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA PROC ; `QSVAllocatorSys::Init'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 60	 mov	 rcx, QWORD PTR pQSVLog$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA ENDP ; `QSVAllocatorSys::Init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv85 = 56
this$ = 80
pParams$ = 88
pQSVLog$ = 96
?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA PROC ; `QSVAllocatorSys::Init'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0003b	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  0003f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?dtor$1@?0??Init@QSVAllocatorSys@@UEAA?AW4mfxStatus@@PEAVmfxAllocatorParams@@V?$shared_ptr@VRGYLog@@@std@@@Z@4HA ENDP ; `QSVAllocatorSys::Init'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
this$ = 48
??1QSVAllocatorSys@@UEAA@XZ PROC			; QSVAllocatorSys::~QSVAllocatorSys

; 96   : QSVAllocatorSys::~QSVAllocatorSys() {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVAllocatorSys@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 97   :     Close();

  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?Close@QSVAllocatorSys@@UEAA?AW4mfxStatus@@XZ ; QSVAllocatorSys::Close
  00037	90		 npad	 1

; 98   : }

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
  0004b	90		 npad	 1
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00051	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  00056	90		 npad	 1
  00057	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
??1QSVAllocatorSys@@UEAA@XZ ENDP			; QSVAllocatorSys::~QSVAllocatorSys
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA PROC		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA ENDP		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$0
this$ = 48
?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA PROC		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00041	e8 00 00 00 00	 call	 ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA ENDP		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA PROC		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1QSVAllocatorSys@@UEAA@XZ@4HA ENDP		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA PROC		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00041	e8 00 00 00 00	 call	 ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?dtor$1@?0???1QSVAllocatorSys@@UEAA@XZ@4HA ENDP		; `QSVAllocatorSys::~QSVAllocatorSys'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
this$ = 48
??0QSVAllocatorSys@@QEAA@XZ PROC			; QSVAllocatorSys::QSVAllocatorSys

; 93   : : m_pBufferAllocator() {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0QSVAllocator@@QEAA@XZ ; QSVAllocator::QSVAllocator
  00028	90		 npad	 1
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVAllocatorSys@@6B@
  00035	48 89 08	 mov	 QWORD PTR [rax], rcx
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??$?0U?$default_delete@VQSVBufferAllocatorSys@@@std@@$0A@@?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> ><std::default_delete<QSVBufferAllocatorSys>,0>
  0004b	90		 npad	 1

; 94   : }

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
??0QSVAllocatorSys@@QEAA@XZ ENDP			; QSVAllocatorSys::QSVAllocatorSys
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA PROC		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA ENDP		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$0
this$ = 48
?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA PROC		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00041	e8 00 00 00 00	 call	 ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA ENDP		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA PROC		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0QSVAllocatorSys@@QEAA@XZ@4HA ENDP		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA PROC		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00041	e8 00 00 00 00	 call	 ??1?$unique_ptr@VQSVBufferAllocatorSys@@U?$default_delete@VQSVBufferAllocatorSys@@@std@@@std@@QEAA@XZ ; std::unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >::~unique_ptr<QSVBufferAllocatorSys,std::default_delete<QSVBufferAllocatorSys> >
  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
?dtor$1@?0???0QSVAllocatorSys@@QEAA@XZ@4HA ENDP		; `QSVAllocatorSys::QSVAllocatorSys'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z PROC		; QSVBufferAllocatorSys::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1QSVBufferAllocatorSys@@UEAA@XZ ; QSVBufferAllocatorSys::~QSVBufferAllocatorSys
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_GQSVBufferAllocatorSys@@UEAAPEAXI@Z ENDP		; QSVBufferAllocatorSys::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
bs$ = 32
this$ = 64
mid$ = 72
?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z PROC ; QSVBufferAllocatorSys::BufFree

; 83   : mfxStatus QSVBufferAllocatorSys::BufFree(mfxMemId mid) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 84   :     sBuffer *bs = (sBuffer *)mid;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR mid$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR bs$[rsp], rax

; 85   :     if (!bs || ID_BUFFER != bs->id) {

  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR bs$[rsp], 0
  00033	74 0d		 je	 SHORT $LN3@BufFree
  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR bs$[rsp]
  0003a	81 38 42 55 46
	46		 cmp	 DWORD PTR [rax], 1179014466 ; 46465542H
  00040	74 07		 je	 SHORT $LN2@BufFree
$LN3@BufFree:

; 86   :         return MFX_ERR_INVALID_HANDLE;

  00042	b8 fa ff ff ff	 mov	 eax, -6
  00047	eb 0d		 jmp	 SHORT $LN1@BufFree
$LN2@BufFree:

; 87   :     }
; 88   :     _aligned_free(bs);

  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR bs$[rsp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_free

; 89   :     return MFX_ERR_NONE;

  00054	33 c0		 xor	 eax, eax
$LN1@BufFree:

; 90   : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
?BufFree@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z ENDP ; QSVBufferAllocatorSys::BufFree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
bs$ = 0
this$ = 32
mid$ = 40
?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z PROC ; QSVBufferAllocatorSys::BufUnlock

; 75   : mfxStatus QSVBufferAllocatorSys::BufUnlock(mfxMemId mid) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 76   :     sBuffer *bs = (sBuffer *)mid;

  00023	48 8b 44 24 28	 mov	 rax, QWORD PTR mid$[rsp]
  00028	48 89 04 24	 mov	 QWORD PTR bs$[rsp], rax

; 77   :     if (!bs || ID_BUFFER != bs->id) {

  0002c	48 83 3c 24 00	 cmp	 QWORD PTR bs$[rsp], 0
  00031	74 0c		 je	 SHORT $LN3@BufUnlock
  00033	48 8b 04 24	 mov	 rax, QWORD PTR bs$[rsp]
  00037	81 38 42 55 46
	46		 cmp	 DWORD PTR [rax], 1179014466 ; 46465542H
  0003d	74 07		 je	 SHORT $LN2@BufUnlock
$LN3@BufUnlock:

; 78   :         return MFX_ERR_INVALID_HANDLE;

  0003f	b8 fa ff ff ff	 mov	 eax, -6
  00044	eb 02		 jmp	 SHORT $LN1@BufUnlock
$LN2@BufUnlock:

; 79   :     }
; 80   :     return MFX_ERR_NONE;

  00046	33 c0		 xor	 eax, eax
$LN1@BufUnlock:

; 81   : }

  00048	48 83 c4 10	 add	 rsp, 16
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?BufUnlock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAX@Z ENDP ; QSVBufferAllocatorSys::BufUnlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
bs$ = 0
this$ = 32
mid$ = 40
ptr$ = 48
?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z PROC ; QSVBufferAllocatorSys::BufLock

; 61   : mfxStatus QSVBufferAllocatorSys::BufLock(mfxMemId mid, mfxU8 **ptr) {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 10	 sub	 rsp, 16
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 04 00 00 00	 mov	 ecx, 4
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 62   :     if (!ptr)

  00028	48 83 7c 24 30
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN2@BufLock

; 63   :         return MFX_ERR_NULL_PTR;

  00030	b8 fe ff ff ff	 mov	 eax, -2
  00035	eb 35		 jmp	 SHORT $LN1@BufLock
$LN2@BufLock:

; 64   : 
; 65   :     sBuffer *bs = (sBuffer *)mid;

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR mid$[rsp]
  0003c	48 89 04 24	 mov	 QWORD PTR bs$[rsp], rax

; 66   : 
; 67   :     if (!bs || ID_BUFFER != bs->id) {

  00040	48 83 3c 24 00	 cmp	 QWORD PTR bs$[rsp], 0
  00045	74 0c		 je	 SHORT $LN4@BufLock
  00047	48 8b 04 24	 mov	 rax, QWORD PTR bs$[rsp]
  0004b	81 38 42 55 46
	46		 cmp	 DWORD PTR [rax], 1179014466 ; 46465542H
  00051	74 07		 je	 SHORT $LN3@BufLock
$LN4@BufLock:

; 68   :         return MFX_ERR_INVALID_HANDLE;

  00053	b8 fa ff ff ff	 mov	 eax, -6
  00058	eb 12		 jmp	 SHORT $LN1@BufLock
$LN3@BufLock:

; 69   :     }
; 70   : 
; 71   :     *ptr = ((mfxU8 *)bs) + ALIGN32(sizeof(sBuffer));

  0005a	48 8b 04 24	 mov	 rax, QWORD PTR bs$[rsp]
  0005e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ptr$[rsp]
  00067	48 89 01	 mov	 QWORD PTR [rcx], rax

; 72   :     return MFX_ERR_NONE;

  0006a	33 c0		 xor	 eax, eax
$LN1@BufLock:

; 73   : }

  0006c	48 83 c4 10	 add	 rsp, 16
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
?BufLock@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@PEAXPEAPEAE@Z ENDP ; QSVBufferAllocatorSys::BufLock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
header_size$ = 32
buffer_ptr$ = 40
bs$ = 48
this$ = 80
nbytes$ = 88
type$ = 96
mid$ = 104
?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z PROC ; QSVBufferAllocatorSys::BufAlloc

; 40   : mfxStatus QSVBufferAllocatorSys::BufAlloc(mfxU32 nbytes, mfxU16 type, mfxMemId *mid) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 41   :     if (!mid)

  0002d	48 83 7c 24 68
	00		 cmp	 QWORD PTR mid$[rsp], 0
  00033	75 0a		 jne	 SHORT $LN2@BufAlloc

; 42   :         return MFX_ERR_NULL_PTR;

  00035	b8 fe ff ff ff	 mov	 eax, -2
  0003a	e9 88 00 00 00	 jmp	 $LN1@BufAlloc
$LN2@BufAlloc:

; 43   : 
; 44   :     if (0 == (type & MFX_MEMTYPE_SYSTEM_MEMORY))

  0003f	0f b7 44 24 60	 movzx	 eax, WORD PTR type$[rsp]
  00044	83 e0 40	 and	 eax, 64			; 00000040H
  00047	85 c0		 test	 eax, eax
  00049	75 07		 jne	 SHORT $LN3@BufAlloc

; 45   :         return MFX_ERR_UNSUPPORTED;

  0004b	b8 fd ff ff ff	 mov	 eax, -3
  00050	eb 75		 jmp	 SHORT $LN1@BufAlloc
$LN3@BufAlloc:

; 46   : 
; 47   :     mfxU32 header_size = ALIGN32(sizeof(sBuffer));

  00052	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR header_size$[rsp], 32 ; 00000020H

; 48   :     void *buffer_ptr = _aligned_malloc(header_size + nbytes, 32);

  0005a	8b 44 24 58	 mov	 eax, DWORD PTR nbytes$[rsp]
  0005e	8b 4c 24 20	 mov	 ecx, DWORD PTR header_size$[rsp]
  00062	03 c8		 add	 ecx, eax
  00064	8b c1		 mov	 eax, ecx
  00066	8b c0		 mov	 eax, eax
  00068	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0006d	8b c8		 mov	 ecx, eax
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  00075	48 89 44 24 28	 mov	 QWORD PTR buffer_ptr$[rsp], rax

; 49   :     if (!buffer_ptr) {

  0007a	48 83 7c 24 28
	00		 cmp	 QWORD PTR buffer_ptr$[rsp], 0
  00080	75 07		 jne	 SHORT $LN4@BufAlloc

; 50   :         return MFX_ERR_MEMORY_ALLOC;

  00082	b8 fc ff ff ff	 mov	 eax, -4
  00087	eb 3e		 jmp	 SHORT $LN1@BufAlloc
$LN4@BufAlloc:

; 51   :     }
; 52   : 
; 53   :     sBuffer *bs = (sBuffer *)buffer_ptr;

  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR buffer_ptr$[rsp]
  0008e	48 89 44 24 30	 mov	 QWORD PTR bs$[rsp], rax

; 54   :     bs->id = ID_BUFFER;

  00093	48 8b 44 24 30	 mov	 rax, QWORD PTR bs$[rsp]
  00098	c7 00 42 55 46
	46		 mov	 DWORD PTR [rax], 1179014466 ; 46465542H

; 55   :     bs->type = type;

  0009e	48 8b 44 24 30	 mov	 rax, QWORD PTR bs$[rsp]
  000a3	0f b7 4c 24 60	 movzx	 ecx, WORD PTR type$[rsp]
  000a8	66 89 48 08	 mov	 WORD PTR [rax+8], cx

; 56   :     bs->nbytes = nbytes;

  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR bs$[rsp]
  000b1	8b 4c 24 58	 mov	 ecx, DWORD PTR nbytes$[rsp]
  000b5	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 57   :     *mid = (mfxHDL)bs;

  000b8	48 8b 44 24 68	 mov	 rax, QWORD PTR mid$[rsp]
  000bd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bs$[rsp]
  000c2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 58   :     return MFX_ERR_NONE;

  000c5	33 c0		 xor	 eax, eax
$LN1@BufAlloc:

; 59   : }

  000c7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000cb	5f		 pop	 rdi
  000cc	c3		 ret	 0
?BufAlloc@QSVBufferAllocatorSys@@UEAA?AW4mfxStatus@@IGPEAPEAX@Z ENDP ; QSVBufferAllocatorSys::BufAlloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
this$ = 48
??1QSVBufferAllocatorSys@@UEAA@XZ PROC			; QSVBufferAllocatorSys::~QSVBufferAllocatorSys

; 38   : QSVBufferAllocatorSys::~QSVBufferAllocatorSys() { }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVBufferAllocatorSys@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  00037	90		 npad	 1
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??1QSVBufferAllocatorSys@@UEAA@XZ ENDP			; QSVBufferAllocatorSys::~QSVBufferAllocatorSys
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA PROC	; `QSVBufferAllocatorSys::~QSVBufferAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA ENDP	; `QSVBufferAllocatorSys::~QSVBufferAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA PROC	; `QSVBufferAllocatorSys::~QSVBufferAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1QSVBufferAllocatorSys@@UEAA@XZ@4HA ENDP	; `QSVBufferAllocatorSys::~QSVBufferAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
_TEXT	SEGMENT
this$ = 48
??0QSVBufferAllocatorSys@@QEAA@XZ PROC			; QSVBufferAllocatorSys::QSVBufferAllocatorSys

; 36   : QSVBufferAllocatorSys::QSVBufferAllocatorSys() { }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0QSVBufferAllocator@@QEAA@XZ ; QSVBufferAllocator::QSVBufferAllocator
  00028	90		 npad	 1
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVBufferAllocatorSys@@6B@
  00035	48 89 08	 mov	 QWORD PTR [rax], rcx
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??0QSVBufferAllocatorSys@@QEAA@XZ ENDP			; QSVBufferAllocatorSys::QSVBufferAllocatorSys
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA PROC	; `QSVBufferAllocatorSys::QSVBufferAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA ENDP	; `QSVBufferAllocatorSys::QSVBufferAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA PROC	; `QSVBufferAllocatorSys::QSVBufferAllocatorSys'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0QSVBufferAllocatorSys@@QEAA@XZ@4HA ENDP	; `QSVBufferAllocatorSys::QSVBufferAllocatorSys'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z PROC	; std::shared_ptr<RGYLog>::swap, COMDAT

; 1173 :     void swap(shared_ptr& _Other) noexcept { // swap pointers

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1174 :         this->_Swap(_Other);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Other$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<RGYLog>::_Swap

; 1175 :     }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ENDP	; std::shared_ptr<RGYLog>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 48
tv72 = 56
this$ = 80
_Right$ = 88
??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::shared_ptr<RGYLog>::operator=, COMDAT

; 1136 :     shared_ptr& operator=(const shared_ptr& _Right) noexcept { // assign shared ownership of resource owned by _Right

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1137 :         shared_ptr(_Right).swap(*this);

  00023	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Right$[rsp]
  00028	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z ; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
  00032	90		 npad	 1
  00033	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR tv73[rsp]
  0003d	48 89 44 24 38	 mov	 QWORD PTR tv72[rsp], rax
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR this$[rsp]
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv72[rsp]
  0004c	e8 00 00 00 00	 call	 ?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<RGYLog>::swap
  00051	90		 npad	 1
  00052	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00057	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0005c	90		 npad	 1

; 1138 :         return *this;

  0005d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 1139 :     }

  00062	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
??4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::shared_ptr<RGYLog>::operator=
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv73 = 48
tv72 = 56
this$ = 80
_Right$ = 88
?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA PROC ; `std::shared_ptr<RGYLog>::operator='::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 20	 lea	 rcx, QWORD PTR $T1[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA ENDP ; `std::shared_ptr<RGYLog>::operator='::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv73 = 48
tv72 = 56
this$ = 80
_Right$ = 88
?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA PROC ; `std::shared_ptr<RGYLog>::operator='::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 20	 lea	 rcx, QWORD PTR $T1[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???4?$shared_ptr@VRGYLog@@@std@@QEAAAEAV01@AEBV01@@Z@4HA ENDP ; `std::shared_ptr<RGYLog>::operator='::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ PROC		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>, COMDAT

; 1132 :     ~shared_ptr() noexcept { // release resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1133 :         this->_Decref();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ ; std::_Ptr_base<RGYLog>::_Decref

; 1134 :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ENDP		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z PROC	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>, COMDAT

; 1078 :     shared_ptr(const shared_ptr& _Other) noexcept { // construct shared_ptr object that owns same resource as _Other

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>

; 1079 :         this->_Copy_construct_from(_Other);

  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Other$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??$_Copy_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEBV?$shared_ptr@VRGYLog@@@1@@Z ; std::_Ptr_base<RGYLog>::_Copy_construct_from<RGYLog>

; 1080 :     }

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
??0?$shared_ptr@VRGYLog@@@std@@QEAA@AEBV01@@Z ENDP	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z PROC	; std::_Ptr_base<RGYLog>::_Swap, COMDAT

; 887  :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 888  :         _STD swap(_Ptr, _Right._Ptr);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	e8 00 00 00 00	 call	 ??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ; std::swap<RGYLog *,void>

; 889  :         _STD swap(_Rep, _Right._Rep);

  00035	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 83 c0 08	 add	 rax, 8
  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00043	48 83 c1 08	 add	 rcx, 8
  00047	48 8b d0	 mov	 rdx, rax
  0004a	e8 00 00 00 00	 call	 ??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>

; 890  :     }

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ENDP	; std::_Ptr_base<RGYLog>::_Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ PROC	; std::_Ptr_base<RGYLog>::_Decref, COMDAT

; 881  :     void _Decref() noexcept { // decrement reference count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 882  :         if (_Rep) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 0e		 je	 SHORT $LN2@Decref

; 883  :             _Rep->_Decref();

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00033	e8 00 00 00 00	 call	 ?_Decref@_Ref_count_base@std@@QEAAXXZ ; std::_Ref_count_base::_Decref
$LN2@Decref:

; 884  :         }
; 885  :     }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ ENDP	; std::_Ptr_base<RGYLog>::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
;	COMDAT ??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ PROC		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory

; 910  :     element_type* _Ptr{nullptr};

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 911  :     _Ref_count_base* _Rep{nullptr};

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	5f		 pop	 rdi
  00025	c3		 ret	 0
??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ ENDP		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ
_TEXT	SEGMENT
this$ = 16
?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ PROC	; std::_Ptr_base<RGYLog>::get, COMDAT

; 816  :     _NODISCARD element_type* get() const noexcept { // return pointer to resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 817  :         return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 818  :     }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ENDP	; std::_Ptr_base<RGYLog>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = 112
$T2 = 168
$T3 = 172
$T4 = 176
$T5 = 180
$T6 = 184
$T7 = 188
$T8 = 192
$T9 = 196
$T10 = 200
$T11 = 204
$T12 = 208
$T13 = 212
$T14 = 216
__$ArrayPad$ = 264
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  0002b	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T2[rsp], 13
  00036	c7 84 24 ac 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T3[rsp], 12
  00041	c7 84 24 b0 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T4[rsp], 11
  0004c	c7 84 24 b4 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T5[rsp], 10
  00057	c7 84 24 b8 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T6[rsp], 9
  00062	c7 84 24 bc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T7[rsp], 8
  0006d	c7 84 24 c0 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T8[rsp], 7
  00078	c7 84 24 c4 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T9[rsp], 6
  00083	c7 84 24 c8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T10[rsp], 5
  0008e	c7 84 24 cc 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T11[rsp], 4
  00099	c7 84 24 d0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T12[rsp], 2
  000a4	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T13[rsp], 1
  000af	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000b7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000bc	48 8d 84 24 ac
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000c4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000c9	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000d1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000d6	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000de	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000e3	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  000eb	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000f0	48 8d 84 24 bc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  000f8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000fd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00105	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010a	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00117	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  0011f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00124	4c 8d 8c 24 cc
	00 00 00	 lea	 r9, QWORD PTR $T11[rsp]
  0012c	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T12[rsp]
  00134	48 8d 94 24 d4
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  0013c	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  00144	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  00149	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  0014e	48 8b f9	 mov	 rdi, rcx
  00151	48 8b f0	 mov	 rsi, rax
  00154	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00159	f3 a4		 rep movsb
  0015b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  00162	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  00167	48 8b f8	 mov	 rdi, rax
  0016a	48 8b f1	 mov	 rsi, rcx
  0016d	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00172	f3 a4		 rep movsb
  00174	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017c	48 33 cc	 xor	 rcx, rsp
  0017f	e8 00 00 00 00	 call	 __security_check_cookie
  00184	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0018b	5f		 pop	 rdi
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 56
$T2 = 96
<args_0>$ = 104
<args_1>$ = 112
<args_2>$ = 120
<args_3>$ = 128
<args_4>$ = 136
<args_5>$ = 144
<args_6>$ = 152
<args_7>$ = 160
<args_8>$ = 168
<args_9>$ = 176
<args_10>$ = 184
<args_11>$ = 192
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 12 00 00 00	 mov	 ecx, 18
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 44 24 70	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_2>$[rsp]
  00057	8b 00		 mov	 eax, DWORD PTR [rax]
  00059	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  00065	8b 00		 mov	 eax, DWORD PTR [rax]
  00067	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  0006b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00073	8b 00		 mov	 eax, DWORD PTR [rax]
  00075	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  00087	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  0008f	8b 00		 mov	 eax, DWORD PTR [rax]
  00091	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  00095	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  0009d	8b 00		 mov	 eax, DWORD PTR [rax]
  0009f	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000ab	8b 00		 mov	 eax, DWORD PTR [rax]
  000ad	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000b9	8b 00		 mov	 eax, DWORD PTR [rax]
  000bb	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000c7	8b 00		 mov	 eax, DWORD PTR [rax]
  000c9	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000cd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000d5	8b 00		 mov	 eax, DWORD PTR [rax]
  000d7	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000db	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  000df	48 8b 7c 24 60	 mov	 rdi, QWORD PTR $T2[rsp]
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000ec	f3 a4		 rep movsb
  000ee	48 8b 44 24 60	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  000f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f8	48 33 cc	 xor	 rcx, rsp
  000fb	e8 00 00 00 00	 call	 __security_check_cookie
  00100	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00104	5f		 pop	 rdi
  00105	5e		 pop	 rsi
  00106	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 200
$T3 = 204
$T4 = 208
$T5 = 212
$T6 = 216
$T7 = 220
$T8 = 224
$T9 = 228
$T10 = 232
$T11 = 236
$T12 = 240
$T13 = 244
$T14 = 248
$T15 = 252
$T16 = 256
$T17 = 264
__$ArrayPad$ = 328
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  0002b	c7 84 24 c8 00
	00 00 12 00 00
	00		 mov	 DWORD PTR $T2[rsp], 18
  00036	c7 84 24 cc 00
	00 00 10 00 00
	00		 mov	 DWORD PTR $T3[rsp], 16
  00041	c7 84 24 d0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T4[rsp], 15
  0004c	c7 84 24 d4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T5[rsp], 14
  00057	c7 84 24 d8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T6[rsp], 13
  00062	c7 84 24 dc 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T7[rsp], 11
  0006d	c7 84 24 e0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T8[rsp], 10
  00078	c7 84 24 e4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T9[rsp], 9
  00083	c7 84 24 e8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T10[rsp], 8
  0008e	c7 84 24 ec 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T11[rsp], 7
  00099	c7 84 24 f0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T12[rsp], 6
  000a4	c7 84 24 f4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T13[rsp], 5
  000af	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T14[rsp], 4
  000ba	c7 84 24 fc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T15[rsp], 2
  000c5	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T16[rsp], 1
  000d0	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000d8	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  000dd	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000e5	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000ea	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000f2	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000f7	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000ff	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00104	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  0010c	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00111	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  00119	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0011e	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00126	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0012b	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00133	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00138	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00140	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00145	48 8d 84 24 ec
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  0014d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00152	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0015a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015f	48 8d 84 24 f4
	00 00 00	 lea	 rax, QWORD PTR $T13[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016c	4c 8d 8c 24 f8
	00 00 00	 lea	 r9, QWORD PTR $T14[rsp]
  00174	4c 8d 84 24 fc
	00 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0017c	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00184	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  0018c	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  00191	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00199	48 8b f9	 mov	 rdi, rcx
  0019c	48 8b f0	 mov	 rsi, rax
  0019f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001a4	f3 a4		 rep movsb
  001a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  001ad	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  001b5	48 8b f8	 mov	 rdi, rax
  001b8	48 8b f1	 mov	 rsi, rcx
  001bb	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001c0	f3 a4		 rep movsb
  001c2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ca	48 33 cc	 xor	 rcx, rsp
  001cd	e8 00 00 00 00	 call	 __security_check_cookie
  001d2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  001d9	5f		 pop	 rdi
  001da	5e		 pop	 rsi
  001db	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 72
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
<args_14>$ = 232
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR <args_14>$[rsp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	89 44 24 38	 mov	 DWORD PTR $T1[rsp+56], eax
  0010b	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  0010f	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00114	48 8b f0	 mov	 rsi, rax
  00117	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0011c	f3 a4		 rep movsb
  0011e	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00123	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00128	48 33 cc	 xor	 rcx, rsp
  0012b	e8 00 00 00 00	 call	 __security_check_cookie
  00130	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 192
$T3 = 196
$T4 = 200
$T5 = 204
$T6 = 208
$T7 = 212
$T8 = 216
$T9 = 220
$T10 = 224
$T11 = 228
$T12 = 232
$T13 = 236
$T14 = 240
$T15 = 244
$T16 = 248
__$ArrayPad$ = 304
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  0002b	c7 84 24 c0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T2[rsp], 15
  00036	c7 84 24 c4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T3[rsp], 14
  00041	c7 84 24 c8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T4[rsp], 13
  0004c	c7 84 24 cc 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T5[rsp], 12
  00057	c7 84 24 d0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T6[rsp], 10
  00062	c7 84 24 d4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T7[rsp], 9
  0006d	c7 84 24 d8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T8[rsp], 8
  00078	c7 84 24 dc 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T9[rsp], 7
  00083	c7 84 24 e0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T10[rsp], 6
  0008e	c7 84 24 e4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T11[rsp], 5
  00099	c7 84 24 e8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T12[rsp], 4
  000a4	c7 84 24 ec 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T13[rsp], 2
  000af	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T14[rsp], 1
  000ba	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T15[rsp], 0
  000c5	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000cd	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000d2	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000da	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000df	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000e7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000ec	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000f4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f9	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00101	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00106	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  0010e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00113	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0011b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00120	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00128	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0012d	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0013a	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00142	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00147	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0014f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00154	4c 8d 8c 24 ec
	00 00 00	 lea	 r9, QWORD PTR $T13[rsp]
  0015c	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T14[rsp]
  00164	48 8d 94 24 f4
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0016c	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00174	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  00179	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00181	48 8b f9	 mov	 rdi, rcx
  00184	48 8b f0	 mov	 rsi, rax
  00187	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0018c	f3 a4		 rep movsb
  0018e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  00195	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  0019d	48 8b f8	 mov	 rdi, rax
  001a0	48 8b f1	 mov	 rsi, rcx
  001a3	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  001a8	f3 a4		 rep movsb
  001aa	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b2	48 33 cc	 xor	 rcx, rsp
  001b5	e8 00 00 00 00	 call	 __security_check_cookie
  001ba	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  001c1	5f		 pop	 rdi
  001c2	5e		 pop	 rsi
  001c3	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 64
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  00101	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00106	48 8b f0	 mov	 rsi, rax
  00109	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0010e	f3 a4		 rep movsb
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00115	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decwref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decwref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decwref, COMDAT

; 657  :     void _Decwref() noexcept { // decrement weak reference count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 658  :         if (_MT_DECR(_Weaks) == 0) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 0c	 add	 rax, 12
  00027	b9 ff ff ff ff	 mov	 ecx, -1
  0002c	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00030	ff c9		 dec	 ecx
  00032	8b c1		 mov	 eax, ecx
  00034	85 c0		 test	 eax, eax
  00036	75 10		 jne	 SHORT $LN2@Decwref

; 659  :             _Delete_this();

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00045	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Decwref:

; 660  :         }
; 661  :     }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?_Decwref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decref, COMDAT

; 650  :     void _Decref() noexcept { // decrement use count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 651  :         if (_MT_DECR(_Uses) == 0) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	b9 ff ff ff ff	 mov	 ecx, -1
  0002c	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00030	ff c9		 dec	 ecx
  00032	8b c1		 mov	 eax, ecx
  00034	85 c0		 test	 eax, eax
  00036	75 19		 jne	 SHORT $LN2@Decref

; 652  :             _Destroy();

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00045	ff 10		 call	 QWORD PTR [rax]

; 653  :             _Decwref();

  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?_Decwref@_Ref_count_base@std@@QEAAXXZ ; std::_Ref_count_base::_Decwref
$LN2@Decref:

; 654  :         }
; 655  :     }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
?_Decref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Incref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Incref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Incref, COMDAT

; 642  :     void _Incref() noexcept { // increment use count

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 643  :         _MT_INCR(_Uses);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 83 c0 08	 add	 rax, 8
  0000f	f0 ff 00	 lock inc DWORD PTR [rax]

; 644  :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?_Incref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator_sys.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
