; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12
EXTRN	?convert_yuy2_to_nv12_i_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_i_sse2
EXTRN	?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_i_ssse3
EXTRN	?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_i_avx
EXTRN	?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_i_avx2
EXTRN	?convert_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_nv12_sse2
EXTRN	?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_nv12_avx
EXTRN	?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_nv12_avx2
EXTRN	?convert_uv_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_uv_yv12_to_nv12_sse2
EXTRN	?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_uv_yv12_to_nv12_avx
EXTRN	?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_uv_yv12_to_nv12_avx2
EXTRN	?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb_ssse3
EXTRN	?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_bgr24_to_rgb_ssse3
EXTRN	?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb_ssse3
EXTRN	?convert_rgb32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32_to_rgb_sse2
EXTRN	?convert_bgr32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_bgr32_to_rgb_sse2
EXTRN	?convert_rgb32r_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32r_to_rgb_sse2
EXTRN	?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_gbr_to_rgb24_ssse3
EXTRN	?convert_gbr_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_gbr_to_rgb32_sse2
EXTRN	?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_bgr24_to_rgb24_ssse3
EXTRN	?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_bgr32_to_rgb32_ssse3
EXTRN	?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb32_ssse3
EXTRN	?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb32_ssse3
EXTRN	?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb32_avx
EXTRN	?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb32_avx
EXTRN	?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb32_avx2
EXTRN	?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb32_avx2
EXTRN	?convert_rgb32_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32_to_rgb32_sse2
EXTRN	?convert_rgb32r_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32r_to_rgb32_sse2
EXTRN	?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32_to_rgb32_avx
EXTRN	?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32r_to_rgb32_avx
EXTRN	?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32_to_rgb32_avx2
EXTRN	?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb32r_to_rgb32_avx2
EXTRN	?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb24_avx2
EXTRN	?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb24_avx2
EXTRN	?convert_rgb24_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24_to_rgb24_sse2
EXTRN	?convert_rgb24r_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_rgb24r_to_rgb24_sse2
EXTRN	?copy_rgb_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_rgb_to_rgb_sse2
EXTRN	?copy_gbr_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_gbr_to_rgb_sse2
EXTRN	?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_p010_avx2
EXTRN	?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_p010_avx
EXTRN	?convert_yv12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_to_p010_sse2
EXTRN	?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_16_to_nv12_avx2
EXTRN	?convert_yv12_16_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_16_to_nv12_sse2
EXTRN	?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_14_to_nv12_avx2
EXTRN	?convert_yv12_14_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_14_to_nv12_sse2
EXTRN	?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_12_to_nv12_avx2
EXTRN	?convert_yv12_12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_12_to_nv12_sse2
EXTRN	?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_10_to_nv12_avx2
EXTRN	?convert_yv12_10_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_10_to_nv12_sse2
EXTRN	?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_09_to_nv12_avx2
EXTRN	?convert_yv12_09_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_09_to_nv12_sse2
EXTRN	?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_16_to_p010_avx2
EXTRN	?convert_yv12_16_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_16_to_p010_sse2
EXTRN	?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_14_to_p010_avx2
EXTRN	?convert_yv12_14_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_14_to_p010_sse2
EXTRN	?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_12_to_p010_avx2
EXTRN	?convert_yv12_12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_12_to_p010_sse2
EXTRN	?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_10_to_p010_avx2
EXTRN	?convert_yv12_10_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_10_to_p010_sse2
EXTRN	?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_09_to_p010_avx2
EXTRN	?convert_yv12_09_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yv12_09_to_p010_sse2
EXTRN	?convert_yuv422_to_nv16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_to_nv16_sse2
EXTRN	?convert_yuv422_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_to_p210_sse2
EXTRN	?convert_yuv422_09_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_09_to_p210_sse2
EXTRN	?convert_yuv422_10_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_10_to_p210_sse2
EXTRN	?convert_yuv422_12_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_12_to_p210_sse2
EXTRN	?convert_yuv422_14_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_14_to_p210_sse2
EXTRN	?convert_yuv422_16_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv422_16_to_p210_sse2
EXTRN	?copy_yuv444_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_yuv444_to_yuv444_sse2
EXTRN	?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_yuv444_to_yuv444_avx2
EXTRN	?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_16_to_yuv444_16_avx2
EXTRN	?convert_yuv444_16_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_16_to_yuv444_16_sse2
EXTRN	?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_14_to_yuv444_16_avx2
EXTRN	?convert_yuv444_14_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_14_to_yuv444_16_sse2
EXTRN	?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_12_to_yuv444_16_avx2
EXTRN	?convert_yuv444_12_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_12_to_yuv444_16_sse2
EXTRN	?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_10_to_yuv444_16_avx2
EXTRN	?convert_yuv444_10_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_10_to_yuv444_16_sse2
EXTRN	?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_09_to_yuv444_16_avx2
EXTRN	?convert_yuv444_09_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_09_to_yuv444_16_sse2
EXTRN	?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_to_yuv444_16_avx2
EXTRN	?convert_yuv444_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_to_yuv444_16_sse2
EXTRN	?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_16_to_yuv444_avx2
EXTRN	?convert_yuv444_16_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_16_to_yuv444_sse2
EXTRN	?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_14_to_yuv444_avx2
EXTRN	?convert_yuv444_14_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_14_to_yuv444_sse2
EXTRN	?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_12_to_yuv444_avx2
EXTRN	?convert_yuv444_12_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_12_to_yuv444_sse2
EXTRN	?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_10_to_yuv444_avx2
EXTRN	?convert_yuv444_10_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_10_to_yuv444_sse2
EXTRN	?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_09_to_yuv444_avx2
EXTRN	?convert_yuv444_09_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuv444_09_to_yuv444_sse2
EXTRN	?copy_nv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_nv12_to_nv12_sse2
EXTRN	?copy_p010_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_p010_to_p010_sse2
EXTRN	?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_nv12_to_nv12_avx2
EXTRN	?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; copy_p010_to_p010_avx2
EXTRN	?convert_yuy2_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_sse2
EXTRN	?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_avx
EXTRN	?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z:PROC ; convert_yuy2_to_nv12_avx2
CONST	SEGMENT
$SG25432 DB	'Invalid', 00H
$SG25433 DB	'nv12', 00H
	ORG $+3
$SG25434 DB	'yv12', 00H
	ORG $+3
$SG25435 DB	'yuy2', 00H
	ORG $+3
$SG25436 DB	'yuv422', 00H
	ORG $+1
$SG25437 DB	'nv16', 00H
	ORG $+3
$SG25438 DB	'yuv444', 00H
	ORG $+1
$SG25439 DB	'yv12(9bit)', 00H
	ORG $+1
$SG25464 DB	'rgb', 00H
$SG25440 DB	'yv12(10bit)', 00H
$SG25466 DB	'gbr', 00H
$SG25441 DB	'yv12(12bit)', 00H
$SG25469 DB	'y8', 00H
	ORG $+1
$SG25442 DB	'yv12(14bit)', 00H
$SG77706 DB	'%s', 00H
	ORG $+1
$SG25443 DB	'yv12(16bit)', 00H
$SG25444 DB	'p010', 00H
	ORG $+3
$SG25458 DB	'rgb24r', 00H
	ORG $+1
$SG69789 DB	'AVX', 00H
$SG25445 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG25446 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG25447 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG25448 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG25449 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG25450 DB	'p210', 00H
	ORG $+3
$SG25451 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG25452 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG25453 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG25454 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG25455 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG25456 DB	'yuva444', 00H
$SG25457 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG25459 DB	'rgb32r', 00H
	ORG $+1
$SG25460 DB	'rgb24', 00H
	ORG $+2
$SG25461 DB	'rgb32', 00H
	ORG $+2
$SG25462 DB	'bgr24', 00H
	ORG $+2
$SG25463 DB	'bgr32', 00H
	ORG $+2
$SG25465 DB	'rgba', 00H
	ORG $+3
$SG25467 DB	'gbra', 00H
	ORG $+3
$SG25468 DB	'yc48', 00H
	ORG $+3
$SG25470 DB	'yc16', 00H
	ORG $+3
?funcList@@3QBUConvertCSP@@B DD 01H			; funcList
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_nv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_nv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0cH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	0cH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_p010_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_p010_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	03H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	03H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	03H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_nv12_i_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	03H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_nv12_i_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	03H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	03H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	02H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	02H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	02H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	02H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	02H
	DD	01H
	DB	01H
	ORG $+7
	DQ	FLAT:?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	02H
	DD	01H
	DB	01H
	ORG $+7
	DQ	FLAT:?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	02H
	DD	01H
	DB	01H
	ORG $+7
	DQ	FLAT:?convert_uv_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_uv_yv12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01eH
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_bgr24_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01fH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_bgr32_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01cH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01eH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_bgr24_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01aH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01dH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01fH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_bgr32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_bgr32_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01bH
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32r_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32r_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	022H
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	023H
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_gbr_to_rgb24_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	022H
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_gbr_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_gbr_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	023H
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_gbr_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_gbr_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	020H
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_rgb_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_rgb_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	022H
	DD	020H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_gbr_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_gbr_to_rgb_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01cH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01aH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01cH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	01aH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	01cH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01aH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb32_ssse3@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	05H
	ORG $+4
	DD	01dH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01bH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01dH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	01bH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	01dH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01bH
	DD	01dH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb32r_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb32r_to_rgb32_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01cH
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01aH
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	01cH
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	01aH
	DD	01cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_rgb24r_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_rgb24r_to_rgb24_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	02H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	02H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	040H
	ORG $+4
	DD	02H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	02H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	02H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	0bH
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	0bH
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0aH
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	0aH
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	09H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	09H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	08H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	08H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	07H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	07H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_to_nv12_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0bH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	0bH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0aH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	0aH
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	09H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	09H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	08H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	08H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	07H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	07H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_to_p010_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0bH
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	0aH
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	09H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	08H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	07H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	0bH
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	0aH
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	09H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	08H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	07H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	04H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	04H
	DD	05H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_to_nv16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_to_nv16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	04H
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	011H
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_16_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_16_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	010H
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_14_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_14_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0fH
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_12_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_12_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0eH
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_10_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_10_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	0dH
	DD	012H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv422_09_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv422_09_to_p210_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	06H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	06H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	06H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	06H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?copy_yuv444_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?copy_yuv444_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	017H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	016H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	015H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	014H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	013H
	DD	01H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	017H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	016H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	015H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	014H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	013H
	DD	0cH
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	00H
	ORG $+4
	DD	017H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	017H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	016H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	016H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	015H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	015H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	014H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	014H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	013H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	013H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	06H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	06H
	DD	017H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_to_yuv444_16_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	017H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	017H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_16_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_16_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	016H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	016H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_14_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_14_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	015H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	015H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_12_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_12_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	014H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	014H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_10_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_10_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
	DD	013H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	0c0H
	ORG $+4
	DD	013H
	DD	06H
	DB	00H
	ORG $+7
	DQ	FLAT:?convert_yuv444_09_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DQ	FLAT:?convert_yuv444_09_to_yuv444_sse2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	01H
	ORG $+4
$SG77705 DB	'invalid argument', 00H
	ORG $+7
$SG77710 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG77707 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG69788 DB	'AVX2', 00H
	ORG $+3
$SG77708 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG77709 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG69790 DB	'SSE4.2', 00H
	ORG $+1
$SG69791 DB	'SSE4.1', 00H
	ORG $+1
$SG69792 DB	'SSSE3', 00H
	ORG $+2
$SG69793 DB	'SSE2', 00H
	ORG $+3
$SG69795 DB	'-', 00H
CONST	ENDS
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z ; get_convert_csp_func
PUBLIC	?get_simd_str@@YAPEBDI@Z			; get_simd_str
PUBLIC	?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i
PUBLIC	??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ	; std::allocator<std::pair<unsigned int,char const *> >::allocator<std::pair<unsigned int,char const *> >
PUBLIC	?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z ; std::allocator<std::pair<unsigned int,char const *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z ; std::allocator<std::pair<unsigned int,char const *> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::max_size
PUBLIC	??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_end
PUBLIC	?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::max_size
PUBLIC	?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Destroy
PUBLIC	?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first
PUBLIC	??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z ; std::initializer_list<std::pair<unsigned int,char const *> >::initializer_list<std::pair<unsigned int,char const *> >
PUBLIC	?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ; std::initializer_list<std::pair<unsigned int,char const *> >::begin
PUBLIC	?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ; std::initializer_list<std::pair<unsigned int,char const *> >::end
PUBLIC	??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[5],0>
PUBLIC	??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[4],0>
PUBLIC	??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[7],0>
PUBLIC	??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[6],0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned int,char const *> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1><std::allocator<std::pair<unsigned int,char const *> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$max@H@std@@YAAEBHAEBH0@Z			; std::max<int>
PUBLIC	??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ; std::forward<enum <unnamed-enum-NONE> >
PUBLIC	??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z ; std::forward<char const (&)[5]>
PUBLIC	??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z ; std::forward<char const (&)[4]>
PUBLIC	??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z ; std::forward<char const (&)[7]>
PUBLIC	??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z ; std::forward<char const (&)[6]>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z ; std::forward<std::allocator<std::pair<unsigned int,char const *> > const &>
PUBLIC	??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z ; std::distance<std::pair<unsigned int,char const *> const *>
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >
PUBLIC	??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Ucopy<std::pair<unsigned int,char const *> const *>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Min_value<unsigned __int64>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z ; std::_Get_unwrapped<std::pair<unsigned int,char const *> const >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Release
PUBLIC	??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Emplace_back<std::pair<unsigned int,char const *> const &>
PUBLIC	??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z ; std::_Unfancy<std::pair<unsigned int,char const *> >
PUBLIC	??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z ; std::forward<std::pair<unsigned int,char const *> const &>
PUBLIC	??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::construct<std::pair<unsigned int,char const *>,std::pair<unsigned int,char const *> const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	atexit:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_abort:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	memcpy:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?get_availableSIMD@@YAIXZ:PROC			; get_availableSIMD
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?simd_str_list@?1??get_simd_str@@YAPEBDI@Z@4V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@A
_BSS	SEGMENT
?simd_str_list@?1??get_simd_str@@YAPEBDI@Z@4V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@A DB 020H DUP (?) ; `get_simd_str'::`2'::simd_str_list
_BSS	ENDS
;	COMDAT ?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA DD 01H DUP (?)	; TSS0<`template-parameter-2',et_simd_str,int, ?? &>
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+424
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+175
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z DD imagerel $LN10
	DD	imagerel $LN10+290
	DD	imagerel $unwind$?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z
$pdata$?get_simd_str@@YAPEBDI@Z DD imagerel $LN9
	DD	imagerel $LN9+673
	DD	imagerel $unwind$?get_simd_str@@YAPEBDI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA DD imagerel ?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA
	DD	imagerel ?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
	DD	imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z+284
	DD	imagerel $unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
$pdata$?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1143
	DD	imagerel $unwind$?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1545
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1721
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2044
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1737
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2060
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1746
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2067
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1746
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2067
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1746
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2067
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1746
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2067
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1746
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2067
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1758
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2083
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1758
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2058
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1760
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2083
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1760
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2083
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1760
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2083
	DD	imagerel $unwind$??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1175
	DD	imagerel $unwind$?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1307
	DD	imagerel $unwind$?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3523
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3039
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3547
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3059
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3550
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3064
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3550
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3064
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3550
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3064
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3550
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3064
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3550
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3064
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3574
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3084
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3499
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3076
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3574
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3076
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3574
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3084
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3574
	DD	imagerel $unwind$??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+3084
	DD	imagerel $unwind$??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+161
	DD	imagerel $unwind$?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1370
	DD	imagerel $unwind$??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+258
	DD	imagerel $unwind$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+237
	DD	imagerel $unwind$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ DD imagerel ??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ
	DD	imagerel ??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ+39
	DD	imagerel $unwind$??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+194
	DD	imagerel $unwind$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA DD imagerel ?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@H@std@@YAAEBHAEBH0@Z DD imagerel $LN13
	DD	imagerel $LN13+210
	DD	imagerel $unwind$??$max@H@std@@YAAEBHAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+279
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z DD 032901H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	0ccH
	DB	02H
	DB	'~'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DD 022d11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 021e01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z DD 022d01H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 040H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$max@H@std@@YAAEBHAEBH0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$max@H@std@@YAAEBHAEBH0@Z DB 040H
	DD	imagerel $ip2state$??$max@H@std@@YAAEBHAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@H@std@@YAAEBHAEBH0@Z DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$max@H@std@@YAAEBHAEBH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 040H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	0d4H
	DB	02H
	DB	'r'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z
	DD	imagerel $ip2state$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z DD 022d11H
	DD	070159219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcName$0 DB 05fH ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+9
??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcVarDesc DD 038H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>
	DD	08H
	DQ	FLAT:??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcName$0
	ORG $+48
??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcFrameData DD 01H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>
	DD	00H
	DQ	FLAT:??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD 022701H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ DB 040H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ DD 021e19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ DB 040H
	DD	imagerel $ip2state$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ DD 021e19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	')', 02H
	DB	02H
	DB	090H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
	DD	imagerel $ip2state$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z DD 022e11H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcName$0 DB 024H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DB	053H
	DB	032H
	DB	00H
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcName$1 DB 05fH ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+5
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcVarDesc DD 058H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DD	010H
	DQ	FLAT:??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcName$0
	ORG $+96
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcFrameData DD 02H ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
	DD	00H
	DQ	FLAT:??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
	ORG $+6
?get_simd_str@@YAPEBDI@Z$rtcName$0 DB 073H		; get_simd_str
	DB	069H
	DB	06dH
	DB	064H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
?get_simd_str@@YAPEBDI@Z$rtcFrameData DD 01H		; get_simd_str
	DD	00H
	DQ	FLAT:?get_simd_str@@YAPEBDI@Z$rtcVarDesc
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0 DB 079H ; thread_y_range
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?get_simd_str@@YAPEBDI@Z$rtcVarDesc DD 0b8H		; get_simd_str
	DD	010H
	DQ	FLAT:?get_simd_str@@YAPEBDI@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc DD 038H ; thread_y_range
	DD	0cH
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData DD 01H ; thread_y_range
	DD	00H
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc
?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_i
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuy2_to_nv12
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuy2_to_nv12
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuy2_to_nv12_i
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuy2_to_nv12_i
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv422_to_yuv444
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_yuv444
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_yuv422_to_yuv444
	DD	0cH
	DQ	FLAT:?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv422_to_yuv444
	DD	00H
	DQ	FLAT:?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_yuy2_to_yuv444
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuy2_to_yuv444
	DD	00H
	DQ	FLAT:?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_p010_c<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_p010_c<0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_p010_c<0>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
	ORG $+8
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a8H ; convert_yv12_to_p010_c<0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
CONST	ENDS
xdata	SEGMENT
$unwind$?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z DD 022a01H
	DD	070137217H
$unwind$?get_simd_str@@YAPEBDI@Z DD 043519H
	DD	027010dH
	DD	060057006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?get_simd_str@@YAPEBDI@Z
	DD	012aH
$cppxdata$?get_simd_str@@YAPEBDI@Z DB 08H
	DD	imagerel $stateUnwindMap$?get_simd_str@@YAPEBDI@Z
	DD	imagerel $ip2state$?get_simd_str@@YAPEBDI@Z
$stateUnwindMap$?get_simd_str@@YAPEBDI@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA
$ip2state$?get_simd_str@@YAPEBDI@Z DB 06H
	DB	00H
	DB	00H
	DB	0eeH
	DB	02H
	DB	'-', 05H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD 033f19H
	DD	07015e219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	01f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0e8H
$unwind$?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	021011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	021011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	023011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	02b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	't'
	DB	02H
	DB	0a6H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 048H
	DD	imagerel $stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	imagerel $ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 021e19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all
	DD	04H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all
	DD	00H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 021501H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1bad_array_new_length@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1bad_array_new_length@std@@UEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1bad_array_new_length@std@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1bad_array_new_length@std@@UEAA@XZ
	DD	imagerel $ip2state$??1bad_array_new_length@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1bad_array_new_length@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_array_new_length@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'`'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_array_new_length@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_array_new_length@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??0bad_array_new_length@std@@QEAA@XZ
	DD	imagerel $ip2state$??0bad_array_new_length@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_array_new_length@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1bad_alloc@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1bad_alloc@std@@UEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1bad_alloc@std@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1bad_alloc@std@@UEAA@XZ
	DD	imagerel $ip2state$??1bad_alloc@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1bad_alloc@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_alloc@std@@AEAA@QEBD@Z DB 06H
	DB	00H
	DB	00H
	DB	'r'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_alloc@std@@AEAA@QEBD@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_alloc@std@@AEAA@QEBD@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_alloc@std@@AEAA@QEBD@Z
	DD	imagerel $ip2state$??0bad_alloc@std@@AEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_alloc@std@@AEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 021e01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DB 040H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0exception@std@@QEAA@AEBV01@@Z DB 040H
	DD	imagerel $ip2state$??0exception@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0exception@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::construct<std::pair<unsigned int,char const *>,std::pair<unsigned int,char const *> const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 0e 00 00 00	 mov	 ecx, 14
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00029	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0002e	b9 10 00 00 00	 mov	 ecx, 16
  00033	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00042	e8 00 00 00 00	 call	 ??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z ; std::forward<std::pair<unsigned int,char const *> const &>
  00047	48 8b 7c 24 20	 mov	 rdi, QWORD PTR $T1[rsp]
  0004c	48 8b f0	 mov	 rsi, rax
  0004f	b9 10 00 00 00	 mov	 ecx, 16
  00054	f3 a4		 rep movsb

; 759  :     }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	5f		 pop	 rdi
  0005b	5e		 pop	 rsi
  0005c	c3		 ret	 0
??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::construct<std::pair<unsigned int,char const *>,std::pair<unsigned int,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z PROC ; std::forward<std::pair<unsigned int,char const *> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z ENDP ; std::forward<std::pair<unsigned int,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z PROC ; std::_Unfancy<std::pair<unsigned int,char const *> >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 294  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 295  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z ENDP ; std::_Unfancy<std::pair<unsigned int,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Emplace_back<std::pair<unsigned int,char const *> const &>, COMDAT

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Vals_0>$[rsp]
  00028	e8 00 00 00 00	 call	 ??$forward@AEBU?$pair@IPEBD@std@@@std@@YAAEBU?$pair@IPEBD@0@AEBU10@@Z ; std::forward<std::pair<unsigned int,char const *> const &>
  0002d	48 89 44 24 20	 mov	 QWORD PTR tv64[rsp], rax
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00037	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0003b	e8 00 00 00 00	 call	 ??$_Unfancy@U?$pair@IPEBD@std@@@std@@YAPEAU?$pair@IPEBD@0@PEAU10@@Z ; std::_Unfancy<std::pair<unsigned int,char const *> >
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv64[rsp]
  00045	4c 8b c1	 mov	 r8, rcx
  00048	48 8b d0	 mov	 rdx, rax
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00054	e8 00 00 00 00	 call	 ??$construct@U?$pair@IPEBD@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@IPEBD@std@@@1@QEAU?$pair@IPEBD@1@AEBU31@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::construct<std::pair<unsigned int,char const *>,std::pair<unsigned int,char const *> const &>

; 1582 :         ++_Last;

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00062	48 83 c0 10	 add	 rax, 16
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1583 :     }

  0006f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Emplace_back<std::pair<unsigned int,char const *> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Release, COMDAT

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1586 :         _First = _Last;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00010	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1587 :         return _Last;

  00017	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 1588 :     }

  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 1575 :     ~_Uninitialized_backout_al() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned int,char const *> > >

; 1577 :     }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0001a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00027	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0002b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00035	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00039	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z PROC ; std::_Get_unwrapped<std::pair<unsigned int,char const *> const >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 276  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 277  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z ENDP ; std::_Get_unwrapped<std::pair<unsigned int,char const *> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$4 = 56
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 1600 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 1601 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1602 :     // note: only called internally from elsewhere in the STL
; 1603 :     using _Ptrval = typename _Alloc::value_type*;
; 1604 : 
; 1605 :     auto _UFirst      = _Get_unwrapped(_First);

  0002d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _First$[rsp]
  00032	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z ; std::_Get_unwrapped<std::pair<unsigned int,char const *> const >
  00037	48 89 44 24 20	 mov	 QWORD PTR _UFirst$[rsp], rax

; 1606 :     const auto _ULast = _Get_unwrapped(_Last);

  0003c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Last$[rsp]
  00041	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBU?$pair@IPEBD@std@@@std@@YAPEBU?$pair@IPEBD@0@QEBU10@@Z ; std::_Get_unwrapped<std::pair<unsigned int,char const *> const >
  00046	48 89 44 24 28	 mov	 QWORD PTR _ULast$[rsp], rax

; 1607 : 
; 1608 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1609 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1610 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1611 :         _Dest += _ULast - _UFirst;
; 1612 :         (void) _Al;
; 1613 :     } else {
; 1614 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  0004b	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR _Al$[rsp]
  00053	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Dest$[rsp]
  0005b	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Backout$4[rsp]
  00060	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@PEAU?$pair@IPEBD@1@AEAV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
  00065	90		 npad	 1

; 1615 :         for (; _UFirst != _ULast; ++_UFirst) {

  00066	eb 0e		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR _UFirst$[rsp]
  0006d	48 83 c0 10	 add	 rax, 16
  00071	48 89 44 24 20	 mov	 QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR _ULast$[rsp]
  0007b	48 39 44 24 20	 cmp	 QWORD PTR _UFirst$[rsp], rax
  00080	74 11		 je	 SHORT $LN3@Uninitiali

; 1616 :             _Backout._Emplace_back(*_UFirst);

  00082	48 8b 54 24 20	 mov	 rdx, QWORD PTR _UFirst$[rsp]
  00087	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Backout$4[rsp]
  0008c	e8 00 00 00 00	 call	 ??$_Emplace_back@AEBU?$pair@IPEBD@std@@@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAXAEBU?$pair@IPEBD@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Emplace_back<std::pair<unsigned int,char const *> const &>

; 1617 :         }

  00091	eb d5		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1618 : 
; 1619 :         _Dest = _Backout._Release();

  00093	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Backout$4[rsp]
  00098	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::_Release
  0009d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _Dest$[rsp], rax

; 1620 :     }

  000a5	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Backout$4[rsp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >

; 1621 : 
; 1622 :     return _Dest;

  000af	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Dest$[rsp]

; 1623 : }

  000b7	48 8b f8	 mov	 rdi, rax
  000ba	48 8b cc	 mov	 rcx, rsp
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z$rtcFrameData
  000c4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c9	48 8b c7	 mov	 rax, rdi
  000cc	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$4 = 56
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA PROC ; `std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Backout$4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$4 = 56
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA PROC ; `std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Backout$4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >::~_Uninitialized_backout_al<std::allocator<std::pair<unsigned int,char const *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
__formal$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00028	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 754  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Min_value<unsigned __int64>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 26   :     return _Right < _Left ? _Right : _Left;

  00023	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Left$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	73 0c		 jae	 SHORT $LN3@Min_value
  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
  0003f	eb 0a		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00046	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
$LN4@Min_value:
  0004b	48 8b 44 24 08	 mov	 rax, QWORD PTR tv65[rsp]
  00050	48 89 04 24	 mov	 QWORD PTR $T1[rsp], rax
  00054	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]

; 27   : }

  00058	48 83 c4 10	 add	 rsp, 16
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Min_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00023	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00027	48 89 44 24 30	 mov	 QWORD PTR _Block_size$[rsp], rax

; 86   :     if (_Block_size <= _Bytes) {

  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00031	48 39 44 24 30	 cmp	 QWORD PTR _Block_size$[rsp], rax
  00036	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  00038	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Block_size$[rsp]
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00047	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004c	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Ptr_container$[rsp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 6b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG77705
  0005d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG77706
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	45 33 c9	 xor	 r9d, r9d
  00071	41 b8 5b 00 00
	00		 mov	 r8d, 91			; 0000005bH
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG77707
  0007e	b9 02 00 00 00	 mov	 ecx, 2
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 03		 jne	 SHORT $LN12@Allocate_m
  0008e	cc		 int	 3
  0008f	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00091	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009a	41 b9 5b 00 00
	00		 mov	 r9d, 91			; 0000005bH
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG77708
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG77709
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG77710
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 95		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 85		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c7	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr_container$[rsp]
  000cc	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000d0	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d4	48 89 44 24 40	 mov	 QWORD PTR _Ptr$[rsp], rax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 ff	 imul	 rax, rax, -1
  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000e7	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr_container$[rsp]
  000ec	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000f0	b8 08 00 00 00	 mov	 eax, 8
  000f5	48 6b c0 fe	 imul	 rax, rax, -2
  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000fe	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00108	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 99   : }

  00111	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Ucopy<std::pair<unsigned int,char const *> const *>, COMDAT

; 1543 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 08 00 00 00	 mov	 ecx, 8
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1544 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00037	4c 8b c8	 mov	 r9, rax
  0003a	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Dest$[rsp]
  0003f	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  00044	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  00049	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PEBU?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@YAPEAU?$pair@IPEBD@0@QEBU10@0PEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ; std::_Uninitialized_copy<std::pair<unsigned int,char const *> const *,std::allocator<std::pair<unsigned int,char const *> > >

; 1545 :     }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Ucopy<std::pair<unsigned int,char const *> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >, COMDAT

; 3526 :     ~_Tidy_guard() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 3527 :         if (_Target) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 0d		 je	 SHORT $LN2@Tidy_guard

; 3528 :             _Target->_Tidy();

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00031	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Tidy
$LN2@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5f		 pop	 rdi
  0003b	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z PROC ; std::distance<std::pair<unsigned int,char const *> const *>, COMDAT

; 781  : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) { // return distance between iterators

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 782  :     if constexpr (_Is_random_iter_v<_InIt>) {
; 783  :         return _Last - _First; // assume the iterator will do debug checking

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR _First$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Last$[rsp]
  00015	48 2b c8	 sub	 rcx, rax
  00018	48 8b c1	 mov	 rax, rcx
  0001b	48 c1 f8 04	 sar	 rax, 4

; 784  :     } else {
; 785  :         _Adl_verify_range(_First, _Last);
; 786  :         auto _UFirst             = _Get_unwrapped(_First);
; 787  :         const auto _ULast        = _Get_unwrapped(_Last);
; 788  :         _Iter_diff_t<_InIt> _Off = 0;
; 789  :         for (; _UFirst != _ULast; ++_UFirst) {
; 790  :             ++_Off;
; 791  :         }
; 792  : 
; 793  :         return _Off;
; 794  :     }
; 795  : }

  0001f	5f		 pop	 rdi
  00020	c3		 ret	 0
??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z ENDP ; std::distance<std::pair<unsigned int,char const *> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z PROC ; std::forward<std::allocator<std::pair<unsigned int,char const *> > const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z ENDP ; std::forward<std::allocator<std::pair<unsigned int,char const *> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00033	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00038	90		 npad	 1

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z PROC ; std::forward<char const (&)[6]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z ENDP ; std::forward<char const (&)[6]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z PROC ; std::forward<char const (&)[7]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z ENDP ; std::forward<char const (&)[7]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z PROC ; std::forward<char const (&)[4]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z ENDP ; std::forward<char const (&)[4]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z PROC ; std::forward<char const (&)[5]>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z ENDP ; std::forward<char const (&)[5]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z PROC ; std::forward<enum <unnamed-enum-NONE> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ENDP ; std::forward<enum <unnamed-enum-NONE> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@H@std@@YAAEBHAEBH0@Z
_TEXT	SEGMENT
_Left$ = 64
_Right$ = 72
??$max@H@std@@YAAEBHAEBH0@Z PROC			; std::max<int>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
  00028	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002d	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002f	39 08		 cmp	 DWORD PTR [rax], ecx
  00031	0f 8d 90 00 00
	00		 jge	 $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00041	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00043	39 08		 cmp	 DWORD PTR [rax], ecx
  00045	7c 02		 jl	 SHORT $LN7@max
  00047	eb 6d		 jmp	 SHORT $LN10@max
$LN7@max:
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00050	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	45 33 c9	 xor	 r9d, r9d
  00064	41 b8 69 11 00
	00		 mov	 r8d, 4457		; 00001169H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00071	b9 02 00 00 00	 mov	 ecx, 2
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007c	90		 npad	 1
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 03		 jne	 SHORT $LN12@max
  00082	cc		 int	 3
  00083	33 c0		 xor	 eax, eax
$LN12@max:
  00085	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008e	41 b9 69 11 00
	00		 mov	 r9d, 4457		; 00001169H
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000af	90		 npad	 1
  000b0	33 c0		 xor	 eax, eax
  000b2	85 c0		 test	 eax, eax
  000b4	75 93		 jne	 SHORT $LN7@max
$LN10@max:
  000b6	33 c0		 xor	 eax, eax
  000b8	85 c0		 test	 eax, eax
  000ba	0f 85 77 ff ff
	ff		 jne	 $LN4@max

; 4458 :         return _Right;

  000c0	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  000c5	eb 05		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
$LN1@max:

; 4462 : }

  000cc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
??$max@H@std@@YAAEBHAEBH0@Z ENDP			; std::max<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00023	48 81 7c 24 38
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  0002c	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002e	48 8d 54 24 38	 lea	 rdx, QWORD PTR _Bytes$[rsp]
  00033	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Ptr$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
  0003d	90		 npad	 1
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Bytes$[rsp]
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00048	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0004d	90		 npad	 1

; 192  : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	48 81 7c 24 30
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00027	72 0c		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00033	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  00035	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Bytes$[rsp], 0
  0003b	74 0c		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00047	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  00049	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0002d	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 30   :             if (_Count > _Max_possible) {

  00032	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0003c	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  00041	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00043	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  00048	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 36   : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 10 00 00 00	 mov	 ecx, 16
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
  00049	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00051	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 294  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 295  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
_Count$ = 32
_Guard$4 = 56
_My_data$5 = 72
this$ = 96
_First$ = 104
_Last$ = 112
__formal$ = 120
??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>, COMDAT

; 435  :     void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

$LN5:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 436  :         // initialize with forward range [_First, _Last)
; 437  :         const auto _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0002d	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Last$[rsp]
  00032	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _First$[rsp]
  00037	e8 00 00 00 00	 call	 ??$distance@PEBU?$pair@IPEBD@std@@@std@@YA_JPEBU?$pair@IPEBD@0@0@Z ; std::distance<std::pair<unsigned int,char const *> const *>
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00044	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax

; 438  :         if (_Count != 0) {

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  0004f	74 5c		 je	 SHORT $LN2@Range_cons

; 439  :             _Buy_nonzero(_Count);

  00051	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Count$[rsp]
  00056	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0005b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_nonzero

; 440  :             _Tidy_guard<vector> _Guard{this};

  00060	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00065	48 89 44 24 38	 mov	 QWORD PTR _Guard$4[rsp], rax

; 441  :             auto& _My_data   = _Mypair._Myval2;

  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0006f	48 89 44 24 48	 mov	 QWORD PTR _My_data$5[rsp], rax

; 442  :             _My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);

  00074	48 8b 44 24 48	 mov	 rax, QWORD PTR _My_data$5[rsp]
  00079	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  0007d	4c 8b 44 24 70	 mov	 r8, QWORD PTR _Last$[rsp]
  00082	48 8b 54 24 68	 mov	 rdx, QWORD PTR _First$[rsp]
  00087	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0008c	e8 00 00 00 00	 call	 ??$_Ucopy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAPEAU?$pair@IPEBD@1@PEBU21@0PEAU21@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Ucopy<std::pair<unsigned int,char const *> const *>
  00091	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _My_data$5[rsp]
  00096	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 443  :             _Guard._Target   = nullptr;

  0009a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _Guard$4[rsp], 0

; 444  :         }

  000a3	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Guard$4[rsp]
  000a8	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >
$LN2@Range_cons:

; 445  :     }

  000ad	48 8b cc	 mov	 rcx, rsp
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z$rtcFrameData
  000b7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000bc	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Count$ = 32
_Guard$4 = 56
_My_data$5 = 72
this$ = 96
_First$ = 104
_Last$ = 112
__formal$ = 120
?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA PROC ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Guard$4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA ENDP ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Count$ = 32
_Guard$4 = 56
_My_data$5 = 72
this$ = 96
_First$ = 104
_Last$ = 112
__formal$ = 120
?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA PROC ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Guard$4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >::~_Tidy_guard<std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z@4HA ENDP ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1382 :     ~_Container_proxy_ptr12() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1383 :         if (_Ptr) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 16		 je	 SHORT $LN2@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1385 :         }
; 1386 :     }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00032	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00040	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00052	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  0005a	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
  0005f	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00064	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1372 :         _Mycont._Myproxy = _Ptr;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR _Mycont$[rsp]
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00080	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00083	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1373 :     }

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1><std::allocator<std::pair<unsigned int,char const *> > const &>, COMDAT

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val1$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$forward@AEBV?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAAEBV?$allocator@U?$pair@IPEBD@std@@@0@AEBV10@@Z ; std::forward<std::allocator<std::pair<unsigned int,char const *> > const &>
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1><std::allocator<std::pair<unsigned int,char const *> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 1114 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 04 24	 mov	 QWORD PTR _Old_val$[rsp], rax

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_val$[rsp]
  00039	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 529  :     return _Old_val;

  0003f	48 8b 04 24	 mov	 rax, QWORD PTR _Old_val$[rsp]

; 530  : }

  00043	48 83 c4 10	 add	 rsp, 16
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned int,char const *> >, COMDAT

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned int,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 872  :     }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ
text$yd	SEGMENT
??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ PROC ; `get_simd_str'::`2'::`dynamic atexit destructor for 'simd_str_list'', COMDAT
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 08 00 00 00	 mov	 ecx, 8
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?simd_str_list@?1??get_simd_str@@YAPEBDI@Z@4V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@A
  0001c	e8 00 00 00 00	 call	 ??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ ENDP ; `get_simd_str'::`2'::`dynamic atexit destructor for 'simd_str_list''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z PROC ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[6],0>, COMDAT

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val1$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ; std::forward<enum <unnamed-enum-NONE> >
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	8b 00		 mov	 eax, DWORD PTR [rax]
  00039	89 01		 mov	 DWORD PTR [rcx], eax
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val2$[rsp]
  00040	e8 00 00 00 00	 call	 ??$forward@AEAY05$$CBD@std@@YAAEAY05$$CBDAEAY05$$CBD@Z ; std::forward<char const (&)[6]>
  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z ENDP ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[6],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z PROC ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[7],0>, COMDAT

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val1$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ; std::forward<enum <unnamed-enum-NONE> >
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	8b 00		 mov	 eax, DWORD PTR [rax]
  00039	89 01		 mov	 DWORD PTR [rcx], eax
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val2$[rsp]
  00040	e8 00 00 00 00	 call	 ??$forward@AEAY06$$CBD@std@@YAAEAY06$$CBDAEAY06$$CBD@Z ; std::forward<char const (&)[7]>
  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z ENDP ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[7],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z PROC ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[4],0>, COMDAT

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val1$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ; std::forward<enum <unnamed-enum-NONE> >
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	8b 00		 mov	 eax, DWORD PTR [rax]
  00039	89 01		 mov	 DWORD PTR [rcx], eax
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val2$[rsp]
  00040	e8 00 00 00 00	 call	 ??$forward@AEAY03$$CBD@std@@YAAEAY03$$CBDAEAY03$$CBD@Z ; std::forward<char const (&)[4]>
  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z ENDP ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[4],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z PROC ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[5],0>, COMDAT

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val1$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$forward@W4<unnamed-enum-NONE>@@@std@@YA$$QEAW4<unnamed-enum-NONE>@@AEAW41@@Z ; std::forward<enum <unnamed-enum-NONE> >
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	8b 00		 mov	 eax, DWORD PTR [rax]
  00039	89 01		 mov	 DWORD PTR [rcx], eax
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val2$[rsp]
  00040	e8 00 00 00 00	 call	 ??$forward@AEAY04$$CBD@std@@YAAEAY04$$CBDAEAY04$$CBD@Z ; std::forward<char const (&)[5]>
  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z ENDP ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[5],0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ
_TEXT	SEGMENT
this$ = 16
?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ PROC ; std::initializer_list<std::pair<unsigned int,char const *> >::end, COMDAT

; 38   :     _NODISCARD constexpr const _Elem* end() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 39   :         return _Last;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 40   :     }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ENDP ; std::initializer_list<std::pair<unsigned int,char const *> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ
_TEXT	SEGMENT
this$ = 16
?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ PROC ; std::initializer_list<std::pair<unsigned int,char const *> >::begin, COMDAT

; 34   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 35   :         return _First;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 36   :     }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ENDP ; std::initializer_list<std::pair<unsigned int,char const *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\initializer_list
;	COMDAT ??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z
_TEXT	SEGMENT
this$ = 16
_First_arg$ = 24
_Last_arg$ = 32
??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z PROC ; std::initializer_list<std::pair<unsigned int,char const *> >::initializer_list<std::pair<unsigned int,char const *> >, COMDAT

; 32   :         : _First(_First_arg), _Last(_Last_arg) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _First_arg$[rsp]
  0001a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Last_arg$[rsp]
  00027	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0002b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z ENDP ; std::initializer_list<std::pair<unsigned int,char const *> >::initializer_list<std::pair<unsigned int,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first, COMDAT

; 1424 :     const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1425 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1426 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >, COMDAT

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 315  :     }

  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00054	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal, COMDAT

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1693 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first

; 1694 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal, COMDAT

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1689 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Get_first

; 1690 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 08 00 00 00	 mov	 ecx, 8
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 1661 :         _Xlength_error("vector<T> too long");

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  0001c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
tv82 = 64
this$ = 96
?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Tidy, COMDAT

; 1642 :     void _Tidy() noexcept { // free all storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 89 44 24 20	 mov	 QWORD PTR _My_data$[rsp], rax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  0002d	48 83 c0 08	 add	 rax, 8
  00031	48 89 44 24 28	 mov	 QWORD PTR _Myfirst$[rsp], rax

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  0003b	48 83 c0 10	 add	 rax, 16
  0003f	48 89 44 24 30	 mov	 QWORD PTR _Mylast$[rsp], rax

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00049	48 83 c0 18	 add	 rax, 24
  0004d	48 89 44 24 38	 mov	 QWORD PTR _Myend$[rsp], rax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  00052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  00057	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  0005c	90		 npad	 1

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  0005d	48 8b 44 24 28	 mov	 rax, QWORD PTR _Myfirst$[rsp]
  00062	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00066	74 7f		 je	 SHORT $LN2@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR _Mylast$[rsp]
  0006d	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR _Myfirst$[rsp]
  00075	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00078	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0007d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Destroy
  00082	90		 npad	 1

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00083	48 8b 44 24 38	 mov	 rax, QWORD PTR _Myend$[rsp]
  00088	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Myfirst$[rsp]
  0008d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00090	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00093	48 2b c1	 sub	 rax, rcx
  00096	48 c1 f8 04	 sar	 rax, 4
  0009a	48 89 44 24 40	 mov	 QWORD PTR tv82[rsp], rax
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a4	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  000a9	90		 npad	 1
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv82[rsp]
  000af	4c 8b c1	 mov	 r8, rcx
  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Myfirst$[rsp]
  000b7	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z ; std::allocator<std::pair<unsigned int,char const *> >::deallocate
  000c2	90		 npad	 1

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000c3	48 8b 44 24 28	 mov	 rax, QWORD PTR _Myfirst$[rsp]
  000c8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1655 :             _Mylast  = pointer();

  000cf	48 8b 44 24 30	 mov	 rax, QWORD PTR _Mylast$[rsp]
  000d4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1656 :             _Myend   = pointer();

  000db	48 8b 44 24 38	 mov	 rax, QWORD PTR _Myend$[rsp]
  000e0	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN2@Tidy:

; 1657 :         }
; 1658 :     }

  000e7	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000eb	5f		 pop	 rdi
  000ec	c3		 ret	 0
?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_nonzero, COMDAT

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::max_size
  0002d	48 39 44 24 38	 cmp	 QWORD PTR _Newcapacity$[rsp], rax
  00032	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  00034	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@CAXXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00039	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Newcapacity$[rsp]
  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00043	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?_Buy_nonzero@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_raw, COMDAT

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 89 44 24 20	 mov	 QWORD PTR _My_data$[rsp], rax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 89 44 24 28	 mov	 QWORD PTR _Myfirst$[rsp], rax

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00040	48 83 c0 10	 add	 rax, 16
  00044	48 89 44 24 30	 mov	 QWORD PTR _Mylast$[rsp], rax

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  0004e	48 83 c0 18	 add	 rax, 24
  00052	48 89 44 24 38	 mov	 QWORD PTR _Myend$[rsp], rax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00057	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00061	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Newcapacity$[rsp]
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z ; std::allocator<std::pair<unsigned int,char const *> >::allocate
  0006e	48 89 44 24 40	 mov	 QWORD PTR _Newvec$[rsp], rax

; 1600 :         _Myfirst           = _Newvec;

  00073	48 8b 44 24 28	 mov	 rax, QWORD PTR _Myfirst$[rsp]
  00078	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Newvec$[rsp]
  0007d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1601 :         _Mylast            = _Newvec;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR _Mylast$[rsp]
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Newvec$[rsp]
  0008a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  0008d	48 6b 44 24 68
	10		 imul	 rax, QWORD PTR _Newcapacity$[rsp], 16
  00093	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Newvec$[rsp]
  00098	48 03 c8	 add	 rcx, rax
  0009b	48 8b c1	 mov	 rax, rcx
  0009e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Myend$[rsp]
  000a3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1603 :     }

  000a6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
?_Buy_raw@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAX_K@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Destroy, COMDAT

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00032	4c 8b c0	 mov	 r8, rax
  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0003a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0003f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@YAXPEAU?$pair@IPEBD@0@QEAU10@AEAV?$allocator@U?$pair@IPEBD@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned int,char const *> > >

; 1569 :     }

  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
?_Destroy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEAU?$pair@IPEBD@2@0@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::max_size, COMDAT

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1442 :         return _Min_value(

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::max_size
  00030	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00035	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  0003a	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0003f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00044	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00049	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
?max_size@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEBA_KXZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_end, COMDAT

; 1423 :     pointer _Unchecked_end() noexcept { // return pointer for end of mutable sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1424 :         return _Mypair._Myval2._Mylast;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 1425 :     }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_begin, COMDAT

; 1415 :     pointer _Unchecked_begin() noexcept { // return pointer for beginning of mutable sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1416 :         return _Mypair._Myval2._Myfirst;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 1417 :     }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 623  :     ~vector() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 624  :         _Tidy();

  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXXZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Tidy
  00028	90		 npad	 1

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00033	90		 npad	 1
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S1$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned int,char const *> >
  00041	90		 npad	 1
  00042	48 8d 44 24 34	 lea	 rax, QWORD PTR $S1$[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0004c	48 c7 44 24 44
	00 00 00 00	 mov	 QWORD PTR $T4[rsp], 0
  00055	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005a	48 8d 54 24 44	 lea	 rdx, QWORD PTR $T4[rsp]
  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00067	90		 npad	 1
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Alproxy$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00075	90		 npad	 1

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00076	48 8b cc	 mov	 rcx, rsp
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ$rtcFrameData
  00080	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00085	90		 npad	 1
  00086	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
??1?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@XZ ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::~vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 118
tv90 = 120
this$ = 144
_Ilist$ = 152
_Al$ = 160
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z PROC ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >, COMDAT

; 458  :     vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 459  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from initializer_list, optional allocator

  0002e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00036	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR _Al$[rsp]
  0003e	0f b6 54 24 74	 movzx	 edx, BYTE PTR $T5[rsp]
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??$?0AEBV?$allocator@U?$pair@IPEBD@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@IPEBD@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@IPEBD@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1>::_Compressed_pair<std::allocator<std::pair<unsigned int,char const *> >,std::_Vector_val<std::_Simple_types<std::pair<unsigned int,char const *> > >,1><std::allocator<std::pair<unsigned int,char const *> > const &>

; 460  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Getal@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@IPEBD@std@@@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Getal
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S2$[rsp]
  00060	e8 00 00 00 00	 call	 ??$?0U?$pair@IPEBD@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::pair<unsigned int,char const *> >
  00065	48 8d 44 24 34	 lea	 rax, QWORD PTR $S2$[rsp]
  0006a	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 461  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0006f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00077	4c 8b c0	 mov	 r8, rax
  0007a	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  0007f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00084	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00089	90		 npad	 1

; 462  :         _Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0008a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Ilist$[rsp]
  00092	e8 00 00 00 00	 call	 ?end@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ; std::initializer_list<std::pair<unsigned int,char const *> >::end
  00097	48 89 44 24 78	 mov	 QWORD PTR tv90[rsp], rax
  0009c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Ilist$[rsp]
  000a4	e8 00 00 00 00	 call	 ?begin@?$initializer_list@U?$pair@IPEBD@std@@@std@@QEBAPEBU?$pair@IPEBD@2@XZ ; std::initializer_list<std::pair<unsigned int,char const *> >::begin
  000a9	44 0f b6 4c 24
	76		 movzx	 r9d, BYTE PTR $T6[rsp]
  000af	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv90[rsp]
  000b4	4c 8b c1	 mov	 r8, rcx
  000b7	48 8b d0	 mov	 rdx, rax
  000ba	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c2	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PEBU?$pair@IPEBD@std@@@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@AEAAXPEBU?$pair@IPEBD@1@0Uforward_iterator_tag@1@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Range_construct_or_tidy<std::pair<unsigned int,char const *> const *>

; 463  :         _Proxy._Release();

  000c7	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000d1	90		 npad	 1

; 464  :     }

  000d2	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000d7	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000dc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e4	48 8b f8	 mov	 rdi, rax
  000e7	48 8b cc	 mov	 rcx, rsp
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z$rtcFrameData
  000f1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f6	48 8b c7	 mov	 rax, rdi
  000f9	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00100	5f		 pop	 rdi
  00101	c3		 ret	 0
??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ENDP ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S2$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 118
tv90 = 120
this$ = 144
_Ilist$ = 152
_Al$ = 160
?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA PROC ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA ENDP ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S2$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 118
tv90 = 120
this$ = 144
_Ilist$ = 152
_Al$ = 160
?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA PROC ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z@4HA ENDP ; `std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00006	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH

; 768  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@IPEBD@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@IPEBD@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::pair<unsigned int,char const *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z PROC ; std::allocator<std::pair<unsigned int,char const *> >::allocate, COMDAT

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 872  :     }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
?allocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAPEAU?$pair@IPEBD@2@_K@Z ENDP ; std::allocator<std::pair<unsigned int,char const *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z PROC ; std::allocator<std::pair<unsigned int,char const *> >::deallocate, COMDAT

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00028	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 868  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$allocator@U?$pair@IPEBD@std@@@std@@QEAAXQEAU?$pair@IPEBD@2@_K@Z ENDP ; std::allocator<std::pair<unsigned int,char const *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ PROC	; std::allocator<std::pair<unsigned int,char const *> >::allocator<std::pair<unsigned int,char const *> >, COMDAT

; 859  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ ENDP	; std::allocator<std::pair<unsigned int,char const *> >::allocator<std::pair<unsigned int,char const *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$5 = 72
$T6 = 104
srcYLine$7 = 120
dstLine$8 = 128
y_width$9 = 136
y$10 = 140
dst_ptr$11 = 144
x$12 = 152
uv_range$ = 168
$T13 = 200
srcULine$ = 216
srcVLine$ = 224
dstLine$ = 232
uv_fin$ = 240
y$14 = 244
x_fin$15 = 248
src_u_ptr$16 = 256
src_v_ptr$17 = 264
dst_ptr$18 = 272
x$19 = 280
$T20 = 296
$T21 = 312
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010_c<0>

; 874  : static void convert_yv12_to_p010_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 875  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 876  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 877  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 878  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 879  :     //Y成分のコピー
; 880  :     if (!uv_only) {

  000a6	33 c0		 xor	 eax, eax
  000a8	83 f8 01	 cmp	 eax, 1
  000ab	0f 84 ad 01 00
	00		 je	 $LN14@convert_yv

; 881  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000b5	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000bc	2b c8		 sub	 ecx, eax
  000be	8b c1		 mov	 eax, ecx
  000c0	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cb	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d3	44 8b c0	 mov	 r8d, eax
  000d6	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000da	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR $T20[rsp]
  000e2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e7	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 0c 00 00 00	 mov	 ecx, 12
  000f7	f3 a4		 rep movsb
  000f9	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$5[rsp]
  000fe	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 882  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 00	 imul	 rax, rax, 0
  00119	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00120	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$5[rsp]
  00125	48 63 c9	 movsxd	 rcx, ecx
  00128	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00130	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00134	48 03 c1	 add	 rax, rcx
  00137	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0013c	48 03 c1	 add	 rax, rcx
  0013f	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 883  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00144	b8 08 00 00 00	 mov	 eax, 8
  00149	48 6b c0 00	 imul	 rax, rax, 0
  0014d	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00154	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00159	48 63 c9	 movsxd	 rcx, ecx
  0015c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00164	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00168	48 8b c1	 mov	 rax, rcx
  0016b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 884  :         const int y_width = width - crop_right - crop_left;

  00173	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00177	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00186	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 885  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00198	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001a1	ff c0		 inc	 eax
  001a3	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001aa	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001b7	48 03 c8	 add	 rcx, rax
  001ba	48 8b c1	 mov	 rax, rcx
  001bd	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001c2	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ca	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001d2	48 03 c8	 add	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN4@convert_yv:
  001e0	8b 44 24 50	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  001e4	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  001eb	7d 71		 jge	 SHORT $LN3@convert_yv

; 886  :             uint16_t *dst_ptr = (uint16_t *)dstLine;

  001ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$8[rsp]
  001f5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_ptr$11[rsp], rax

; 887  :             for (int x = 0; x < y_width; x++) {

  001fd	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$12[rsp], 0
  00208	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR x$12[rsp]
  00211	ff c0		 inc	 eax
  00213	89 84 24 98 00
	00 00		 mov	 DWORD PTR x$12[rsp], eax
$LN7@convert_yv:
  0021a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR y_width$9[rsp]
  00221	39 84 24 98 00
	00 00		 cmp	 DWORD PTR x$12[rsp], eax
  00228	7d 2f		 jge	 SHORT $LN6@convert_yv

; 888  :                 dst_ptr[x] = (uint16_t)((((uint32_t)srcYLine[x]) << 8) + (2 << 6));

  0022a	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR x$12[rsp]
  00232	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  00237	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0023b	c1 e0 08	 shl	 eax, 8
  0023e	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00243	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR x$12[rsp]
  0024b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dst_ptr$11[rsp]
  00253	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 889  :             }

  00257	eb b1		 jmp	 SHORT $LN5@convert_yv
$LN6@convert_yv:

; 890  :         }

  00259	e9 3c ff ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 891  :     }
; 892  :     //UV成分のコピー
; 893  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0025e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00262	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00269	2b c8		 sub	 ecx, eax
  0026b	8b c1		 mov	 eax, ecx
  0026d	d1 f8		 sar	 eax, 1
  0026f	8b 4c 24 34	 mov	 ecx, DWORD PTR crop_up$[rsp]
  00273	d1 f9		 sar	 ecx, 1
  00275	8b 94 24 b8 01
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  0027c	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00280	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00288	44 8b c0	 mov	 r8d, eax
  0028b	8b d1		 mov	 edx, ecx
  0028d	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  00295	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0029a	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR $T13[rsp]
  002a2	48 8b f9	 mov	 rdi, rcx
  002a5	48 8b f0	 mov	 rsi, rax
  002a8	b9 0c 00 00 00	 mov	 ecx, 12
  002ad	f3 a4		 rep movsb
  002af	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR uv_range$[rsp]
  002b7	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR $T13[rsp]
  002bf	48 8b f8	 mov	 rdi, rax
  002c2	48 8b f1	 mov	 rsi, rcx
  002c5	b9 0c 00 00 00	 mov	 ecx, 12
  002ca	f3 a4		 rep movsb

; 894  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  002cc	b8 08 00 00 00	 mov	 eax, 8
  002d1	48 6b c0 01	 imul	 rax, rax, 1
  002d5	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  002dc	0f af 8c 24 a8
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  002e4	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  002e8	d1 fa		 sar	 edx, 1
  002ea	03 ca		 add	 ecx, edx
  002ec	48 63 c9	 movsxd	 rcx, ecx
  002ef	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002f7	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 895  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00306	b8 08 00 00 00	 mov	 eax, 8
  0030b	48 6b c0 02	 imul	 rax, rax, 2
  0030f	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00316	0f af 8c 24 a8
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  0031e	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  00322	d1 fa		 sar	 edx, 1
  00324	03 ca		 add	 ecx, edx
  00326	48 63 c9	 movsxd	 rcx, ecx
  00329	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00331	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00335	48 8b c1	 mov	 rax, rcx
  00338	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 896  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  00340	b8 08 00 00 00	 mov	 eax, 8
  00345	48 6b c0 01	 imul	 rax, rax, 1
  00349	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00350	0f af 8c 24 ac
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp+4]
  00358	48 63 c9	 movsxd	 rcx, ecx
  0035b	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00363	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00367	48 8b c1	 mov	 rax, rcx
  0036a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 897  :     const int uv_fin = (height - crop_bottom) >> 1;

  00372	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00376	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0037d	2b c8		 sub	 ecx, eax
  0037f	8b c1		 mov	 eax, ecx
  00381	d1 f8		 sar	 eax, 1
  00383	89 84 24 f0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 898  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  0038a	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00395	eb 6a		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00397	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0039e	ff c0		 inc	 eax
  003a0	89 84 24 f4 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  003a7	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003af	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  003b7	48 03 c8	 add	 rcx, rax
  003ba	48 8b c1	 mov	 rax, rcx
  003bd	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  003c5	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003cd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  003d5	48 03 c8	 add	 rcx, rax
  003d8	48 8b c1	 mov	 rax, rcx
  003db	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  003e3	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  003eb	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  003f3	48 03 c8	 add	 rcx, rax
  003f6	48 8b c1	 mov	 rax, rcx
  003f9	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yv:
  00401	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR uv_range$[rsp+8]
  00408	39 84 24 f4 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0040f	0f 8d 1c 01 00
	00		 jge	 $LN9@convert_yv

; 899  :         const int x_fin = width - crop_right;

  00415	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00419	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00420	2b c8		 sub	 ecx, eax
  00422	8b c1		 mov	 eax, ecx
  00424	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x_fin$15[rsp], eax

; 900  :         uint8_t *src_u_ptr = srcULine;

  0042b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  00433	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR src_u_ptr$16[rsp], rax

; 901  :         uint8_t *src_v_ptr = srcVLine;

  0043b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  00443	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR src_v_ptr$17[rsp], rax

; 902  :         uint16_t *dst_ptr = (uint16_t *)dstLine;

  0044b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00453	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR dst_ptr$18[rsp], rax

; 903  :         for (int x = crop_left; x < x_fin; x += 2, src_u_ptr++, src_v_ptr++, dst_ptr += 2) {

  0045b	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  0045f	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$19[rsp], eax
  00466	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00468	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$19[rsp]
  0046f	83 c0 02	 add	 eax, 2
  00472	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$19[rsp], eax
  00479	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR src_u_ptr$16[rsp]
  00481	48 ff c0	 inc	 rax
  00484	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR src_u_ptr$16[rsp], rax
  0048c	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR src_v_ptr$17[rsp]
  00494	48 ff c0	 inc	 rax
  00497	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR src_v_ptr$17[rsp], rax
  0049f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$18[rsp]
  004a7	48 83 c0 04	 add	 rax, 4
  004ab	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR dst_ptr$18[rsp], rax
$LN13@convert_yv:
  004b3	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x_fin$15[rsp]
  004ba	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$19[rsp], eax
  004c1	7d 69		 jge	 SHORT $LN12@convert_yv

; 904  :             dst_ptr[0] = (uint16_t)((((uint32_t)src_u_ptr[0]) << 8) + (2<<6));

  004c3	b8 01 00 00 00	 mov	 eax, 1
  004c8	48 6b c0 00	 imul	 rax, rax, 0
  004cc	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR src_u_ptr$16[rsp]
  004d4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004d8	c1 e0 08	 shl	 eax, 8
  004db	05 80 00 00 00	 add	 eax, 128		; 00000080H
  004e0	b9 02 00 00 00	 mov	 ecx, 2
  004e5	48 6b c9 00	 imul	 rcx, rcx, 0
  004e9	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dst_ptr$18[rsp]
  004f1	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax

; 905  :             dst_ptr[1] = (uint16_t)((((uint32_t)src_v_ptr[0]) << 8) + (2<<6));

  004f5	b8 01 00 00 00	 mov	 eax, 1
  004fa	48 6b c0 00	 imul	 rax, rax, 0
  004fe	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR src_v_ptr$17[rsp]
  00506	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0050a	c1 e0 08	 shl	 eax, 8
  0050d	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00512	b9 02 00 00 00	 mov	 ecx, 2
  00517	48 6b c9 01	 imul	 rcx, rcx, 1
  0051b	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dst_ptr$18[rsp]
  00523	66 89 04 0a	 mov	 WORD PTR [rdx+rcx], ax

; 906  :         }

  00527	e9 3c ff ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 907  :     }

  0052c	e9 66 fe ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 908  : }

  00531	48 8b cc	 mov	 rcx, rsp
  00534	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0053b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00540	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00548	48 33 cc	 xor	 rcx, rsp
  0054b	e8 00 00 00 00	 call	 __security_check_cookie
  00550	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00557	5f		 pop	 rdi
  00558	5e		 pop	 rsi
  00559	c3		 ret	 0
??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010_c<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010

; 910  : static void convert_yv12_to_p010(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 911  :     convert_yv12_to_p010_c<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_p010_c@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_p010_c<0>

; 912  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_to_p010@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv159 = 368
tv172 = 372
tv251 = 376
tv253 = 380
tv256 = 384
tv259 = 388
tv265 = 392
tv264 = 396
tv332 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0028a	c7 84 24 64 01
	00 00 07 00 00
	00		 mov	 DWORD PTR $T46[rsp], 7
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002b8	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002fd	c7 84 24 6c 01
	00 00 f9 ff ff
	ff		 mov	 DWORD PTR $T48[rsp], -7
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0032b	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  0038e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00392	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00399	2b c8		 sub	 ecx, eax
  0039b	8b c1		 mov	 eax, ecx
  0039d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003e2	0f 8d fb 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00454	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0045d	83 c0 04	 add	 eax, 4
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00467	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046e	d1 e0		 shl	 eax, 1
  00470	48 98		 cdqe
  00472	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0047a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00486	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0048a	c1 e0 02	 shl	 eax, 2
  0048d	48 98		 cdqe
  0048f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00497	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0049b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  004a3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004ae	0f 8d 2a 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004b4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004bc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004cc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004d4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d8	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004df	2b c8		 sub	 ecx, eax
  004e1	8b c1		 mov	 eax, ecx
  004e3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ee	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004f6	7c 0d		 jl	 SHORT $LN31@convert_yv
  004f8	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv251[rsp], -2
  00503	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  00505	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN32@convert_yv:
  00510	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  00517	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  0051e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00526	7c 0d		 jl	 SHORT $LN33@convert_yv
  00528	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
  00533	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00535	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN34@convert_yv:
  00540	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  00547	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0054e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00555	83 e8 02	 sub	 eax, 2
  00558	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0055f	7d 0d		 jge	 SHORT $LN35@convert_yv
  00561	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0056e	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv256[rsp], -1
$LN36@convert_yv:
  00579	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00580	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00587	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0058e	83 e8 04	 sub	 eax, 4
  00591	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00598	7d 0d		 jge	 SHORT $LN37@convert_yv
  0059a	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv259[rsp], 2
  005a5	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  005a7	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv259[rsp], 0
$LN38@convert_yv:
  005b2	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv259[rsp]
  005b9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005c0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c7	83 e8 06	 sub	 eax, 6
  005ca	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d1	7d 0d		 jge	 SHORT $LN41@convert_yv
  005d3	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv265[rsp], 3
  005de	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005e0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005e7	83 e8 02	 sub	 eax, 2
  005ea	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005f1	7d 0d		 jge	 SHORT $LN39@convert_yv
  005f3	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  005fe	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  00600	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv264[rsp], -1
$LN40@convert_yv:
  0060b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  00612	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv265[rsp], eax
$LN42@convert_yv:
  00619	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00620	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00627	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00644	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0064b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00652	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0065a	48 98		 cdqe
  0065c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00664	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00668	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0066f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00685	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  0068c	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006a9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006b0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006d4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006db	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006e3	48 98		 cdqe
  006e5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006ed	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006f1	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006f8	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  00700	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  00707	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0070b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00712	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0071a	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00722	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00726	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  0072d	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00735	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  0073d	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00741	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00748	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00750	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00757	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0075b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00762	33 c0		 xor	 eax, eax
  00764	83 f8 01	 cmp	 eax, 1
  00767	74 46		 je	 SHORT $LN24@convert_yv
  00769	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00770	c1 e0 04	 shl	 eax, 4
  00773	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0077a	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00781	c1 e0 04	 shl	 eax, 4
  00784	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0078b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00792	c1 e0 04	 shl	 eax, 4
  00795	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0079c	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007a3	c1 e0 04	 shl	 eax, 4
  007a6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007ad	eb 4a		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007af	33 c0		 xor	 eax, eax
  007b1	85 c0		 test	 eax, eax
  007b3	74 44		 je	 SHORT $LN26@convert_yv
  007b5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007bc	c1 f8 fc	 sar	 eax, -4
  007bf	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007c6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007cd	c1 f8 fc	 sar	 eax, -4
  007d0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007d7	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007de	c1 f8 fc	 sar	 eax, -4
  007e1	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007e8	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007ef	c1 f8 fc	 sar	 eax, -4
  007f2	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f9	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  00804	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00806	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0080d	83 c0 02	 add	 eax, 2
  00810	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  00817	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  0081f	48 83 c0 04	 add	 rax, 4
  00823	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0082b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00833	48 83 c0 02	 add	 rax, 2
  00837	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0083f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00846	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  0084d	0f 8d 86 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00853	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0085a	83 c0 02	 add	 eax, 2
  0085d	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00864	7d 0d		 jge	 SHORT $LN43@convert_yv
  00866	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  00871	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00873	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN44@convert_yv:
  0087e	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  00885	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  0088c	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00893	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0089b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008a2	48 98		 cdqe
  008a4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ac	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008b0	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008b7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008be	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008c6	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008ea	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  00906	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  0090d	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00915	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0091c	48 98		 cdqe
  0091e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00926	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0092a	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00931	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00938	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00940	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00947	48 98		 cdqe
  00949	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00951	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00955	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  0095c	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00963	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0096b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00972	48 98		 cdqe
  00974	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0097c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00980	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00987	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0098f	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00996	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0099a	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  009a1	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  009a9	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009b1	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b5	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009bc	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009c4	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009cc	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009d0	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009d7	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009df	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009e6	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009ea	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009f1	33 c0		 xor	 eax, eax
  009f3	83 f8 01	 cmp	 eax, 1
  009f6	74 46		 je	 SHORT $LN27@convert_yv
  009f8	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009ff	c1 e0 04	 shl	 eax, 4
  00a02	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a09	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a10	c1 e0 04	 shl	 eax, 4
  00a13	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a1a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a21	c1 e0 04	 shl	 eax, 4
  00a24	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a2b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a32	c1 e0 04	 shl	 eax, 4
  00a35	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a3c	eb 4a		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a3e	33 c0		 xor	 eax, eax
  00a40	85 c0		 test	 eax, eax
  00a42	74 44		 je	 SHORT $LN29@convert_yv
  00a44	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a4b	c1 f8 fc	 sar	 eax, -4
  00a4e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a55	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a5c	c1 f8 fc	 sar	 eax, -4
  00a5f	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a66	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a6d	c1 f8 fc	 sar	 eax, -4
  00a70	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a77	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a7e	c1 f8 fc	 sar	 eax, -4
  00a81	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a88	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a8d	48 98		 cdqe
  00a8f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a97	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a9f	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00aa3	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00aaa	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00ab1	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00ab5	d1 f8		 sar	 eax, 1
  00ab7	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00abc	ff c1		 inc	 ecx
  00abe	48 63 c9	 movsxd	 rcx, ecx
  00ac1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ac9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00acd	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ad1	48 98		 cdqe
  00ad3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00adb	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00ae3	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ae7	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00aee	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00af5	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00af9	d1 f8		 sar	 eax, 1
  00afb	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00aff	ff c1		 inc	 ecx
  00b01	48 63 c9	 movsxd	 rcx, ecx
  00b04	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b0c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b10	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b14	03 c0		 add	 eax, eax
  00b16	48 98		 cdqe
  00b18	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b20	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b28	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b2c	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b33	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b3a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b3e	d1 f8		 sar	 eax, 1
  00b40	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b44	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b48	48 63 c9	 movsxd	 rcx, ecx
  00b4b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b53	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b57	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b5c	48 98		 cdqe
  00b5e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b66	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b6e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b72	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b79	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b80	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b84	d1 f8		 sar	 eax, 1
  00b86	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b8b	ff c1		 inc	 ecx
  00b8d	48 63 c9	 movsxd	 rcx, ecx
  00b90	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b98	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b9c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00ba3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00baa	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00bb1	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00bb8	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bbf	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bc6	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bcd	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bd4	e9 2d fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bd9	e9 78 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bde	e9 e7 f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00be3	48 8b cc	 mov	 rcx, rsp
  00be6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bed	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bf2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bfa	48 33 cc	 xor	 rcx, rsp
  00bfd	e8 00 00 00 00	 call	 __security_check_cookie
  00c02	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00c09	5f		 pop	 rdi
  00c0a	5e		 pop	 rsi
  00c0b	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_i_to_yuv444_16bit

; 869  : static void convert_yv12_09_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 870  :     convert_yv12_i_to_yuv444_c<uint16_t, 9, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned short,16,0>

; 871  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv192 = 408
tv205 = 412
tv256 = 416
tv351 = 420
tv476 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 68 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  001a3	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001b5	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001c8	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001cf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001da	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001dc	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001ec	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001f9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  00205	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0020a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00212	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00216	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  0021e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00222	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00229	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0022f	33 c0		 xor	 eax, eax
  00231	85 c0		 test	 eax, eax
  00233	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00235	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  0023d	48 d1 e0	 shl	 rax, 1
  00240	4c 8b c0	 mov	 r8, rax
  00243	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0024b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00253	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00258	e9 42 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0025d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00268	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0026a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00271	ff c0		 inc	 eax
  00273	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0027a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00281	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00288	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  0028e	33 c0		 xor	 eax, eax
  00290	83 f8 01	 cmp	 eax, 1
  00293	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00295	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  002a0	c7 84 24 8c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR $T56[rsp], 7
  002ab	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002bf	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  002c6	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002ce	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002d6	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002db	8b 00		 mov	 eax, DWORD PTR [rax]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  002e7	d3 e0		 shl	 eax, cl
  002e9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002f1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002f9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002fd	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  00302	33 c0		 xor	 eax, eax
  00304	85 c0		 test	 eax, eax
  00306	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  00308	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00313	c7 84 24 94 01
	00 00 f9 ff ff
	ff		 mov	 DWORD PTR $T58[rsp], -7
  0031e	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00326	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0032e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00332	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00339	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00341	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00349	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0034e	8b 00		 mov	 eax, DWORD PTR [rax]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  0035a	d3 f8		 sar	 eax, cl
  0035c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00364	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0036c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00370	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00372	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0037a	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00382	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0038a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00392	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00396	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0039a	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  0039f	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003e2	0f 8d e5 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00454	eb 49		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0045d	83 c0 02	 add	 eax, 2
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00467	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  0046f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00477	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00483	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00487	d1 e0		 shl	 eax, 1
  00489	48 98		 cdqe
  0048b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00493	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00497	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0049f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a3	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  004aa	0f 8d 18 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004b8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004c8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004d0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d4	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004db	2b c8		 sub	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004ea	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004f2	0f 85 e9 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  00503	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00505	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0050c	83 c0 02	 add	 eax, 2
  0050f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  00516	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0051e	48 83 c0 04	 add	 rax, 4
  00522	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0052a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00532	48 83 c0 02	 add	 rax, 2
  00536	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  0053e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00545	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  0054c	0f 8d 8a 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00552	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00559	83 c0 02	 add	 eax, 2
  0055c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00563	7d 0d		 jge	 SHORT $LN44@convert_yv
  00565	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00570	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00572	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN45@convert_yv:
  0057d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00584	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0058b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00593	48 98		 cdqe
  00595	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0059d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a1	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  005a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b0	48 98		 cdqe
  005b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005be	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005c5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cc	48 98		 cdqe
  005ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005da	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e9	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005f0	48 98		 cdqe
  005f2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005fa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fe	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00605	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0060d	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00614	48 98		 cdqe
  00616	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0061e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00622	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00629	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00630	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00637	03 c8		 add	 ecx, eax
  00639	8b c1		 mov	 eax, ecx
  0063b	48 98		 cdqe
  0063d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00645	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00649	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00650	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00658	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0065f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00663	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0066a	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00672	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00679	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00684	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068c	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00693	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00697	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0069e	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  006a6	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006ad	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b1	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006b8	33 c0		 xor	 eax, eax
  006ba	83 f8 01	 cmp	 eax, 1
  006bd	74 46		 je	 SHORT $LN32@convert_yv
  006bf	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006c6	c1 e0 05	 shl	 eax, 5
  006c9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006d0	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006d7	c1 e0 05	 shl	 eax, 5
  006da	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006e1	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006e8	c1 e0 05	 shl	 eax, 5
  006eb	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006f9	c1 e0 05	 shl	 eax, 5
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  00703	eb 4a		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  00705	33 c0		 xor	 eax, eax
  00707	85 c0		 test	 eax, eax
  00709	74 44		 je	 SHORT $LN34@convert_yv
  0070b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00712	c1 f8 fb	 sar	 eax, -5
  00715	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  0071c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00723	c1 f8 fb	 sar	 eax, -5
  00726	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  0072d	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00734	c1 f8 fb	 sar	 eax, -5
  00737	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00745	c1 f8 fb	 sar	 eax, -5
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  0074f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00754	48 98		 cdqe
  00756	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  0075e	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  00766	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0076a	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00771	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  00778	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0077c	d1 f8		 sar	 eax, 1
  0077e	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00783	ff c1		 inc	 ecx
  00785	48 63 c9	 movsxd	 rcx, ecx
  00788	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00790	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00794	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00798	48 98		 cdqe
  0079a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  007a2	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  007aa	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  007ae	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007b5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007bc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007c0	d1 f8		 sar	 eax, 1
  007c2	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007c6	ff c1		 inc	 ecx
  007c8	48 63 c9	 movsxd	 rcx, ecx
  007cb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007d3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007d7	e9 29 fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007dc	e9 e2 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007e1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007e8	83 e8 02	 sub	 eax, 2
  007eb	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007f2	0f 8c e7 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  00803	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  00805	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0080c	83 c0 02	 add	 eax, 2
  0080f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00816	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0081e	48 83 c0 04	 add	 rax, 4
  00822	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0082a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00832	48 83 c0 02	 add	 rax, 2
  00836	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0083e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00845	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0084c	0f 8d 88 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00852	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00859	83 c0 02	 add	 eax, 2
  0085c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00863	7d 0d		 jge	 SHORT $LN46@convert_yv
  00865	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv351[rsp], 1
  00870	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00872	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv351[rsp], 0
$LN47@convert_yv:
  0087d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv351[rsp]
  00884	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0088b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00893	48 98		 cdqe
  00895	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0089d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a1	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  008a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b0	48 98		 cdqe
  008b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008be	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008c5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008ea	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00906	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0090e	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00915	48 98		 cdqe
  00917	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0091f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00923	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0092a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00932	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00939	48 98		 cdqe
  0093b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00943	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00947	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0094e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00956	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0095d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00961	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00968	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00970	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00977	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0097b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00982	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00991	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00995	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0099c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  009a4	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  009ab	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  009af	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009b6	33 c0		 xor	 eax, eax
  009b8	83 f8 01	 cmp	 eax, 1
  009bb	74 46		 je	 SHORT $LN37@convert_yv
  009bd	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009c4	c1 e0 05	 shl	 eax, 5
  009c7	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009ce	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009d5	c1 e0 05	 shl	 eax, 5
  009d8	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009df	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009e6	c1 e0 05	 shl	 eax, 5
  009e9	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009f0	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009f7	c1 e0 05	 shl	 eax, 5
  009fa	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  00a01	eb 4a		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  00a03	33 c0		 xor	 eax, eax
  00a05	85 c0		 test	 eax, eax
  00a07	74 44		 je	 SHORT $LN39@convert_yv
  00a09	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a10	c1 f8 fb	 sar	 eax, -5
  00a13	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a1a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a21	c1 f8 fb	 sar	 eax, -5
  00a24	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a2b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a32	c1 f8 fb	 sar	 eax, -5
  00a35	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a3c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a43	c1 f8 fb	 sar	 eax, -5
  00a46	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a4d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a52	48 98		 cdqe
  00a54	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a5c	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a64	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a68	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a6f	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a76	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a7a	d1 f8		 sar	 eax, 1
  00a7c	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	ff c1		 inc	 ecx
  00a83	48 63 c9	 movsxd	 rcx, ecx
  00a86	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a8e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a92	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a96	48 98		 cdqe
  00a98	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00aa0	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00aa8	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00aac	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00ab3	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aba	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00abe	d1 f8		 sar	 eax, 1
  00ac0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ac4	ff c1		 inc	 ecx
  00ac6	48 63 c9	 movsxd	 rcx, ecx
  00ac9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00ad1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00ad5	e9 2b fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ada	e9 e4 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00adf	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00aea	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00aec	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00af3	83 c0 02	 add	 eax, 2
  00af6	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00afd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00b05	48 83 c0 04	 add	 rax, 4
  00b09	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00b11	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b19	48 83 c0 02	 add	 rax, 2
  00b1d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b25	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b2c	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b33	0f 8d 8a 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b39	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b40	83 c0 02	 add	 eax, 2
  00b43	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b4a	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b4c	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv476[rsp], 1
  00b57	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b59	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv476[rsp], 0
$LN49@convert_yv:
  00b64	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv476[rsp]
  00b6b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b72	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b7a	48 98		 cdqe
  00b7c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b84	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b88	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b8f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b97	48 98		 cdqe
  00b99	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00ba5	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00bac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00bb3	48 98		 cdqe
  00bb5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bbd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bc1	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bc8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bd0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bd7	48 98		 cdqe
  00bd9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00be1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00be5	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bf4	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bfb	48 98		 cdqe
  00bfd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c05	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c09	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00c10	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c17	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c1e	03 c8		 add	 ecx, eax
  00c20	8b c1		 mov	 eax, ecx
  00c22	48 98		 cdqe
  00c24	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c2c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c30	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c37	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c3f	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c46	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c51	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c59	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c60	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c64	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c6b	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c73	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c7a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c7e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c85	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c8d	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c94	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c98	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c9f	33 c0		 xor	 eax, eax
  00ca1	83 f8 01	 cmp	 eax, 1
  00ca4	74 46		 je	 SHORT $LN40@convert_yv
  00ca6	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cad	c1 e0 05	 shl	 eax, 5
  00cb0	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cb7	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cbe	c1 e0 05	 shl	 eax, 5
  00cc1	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cc8	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00ccf	c1 e0 05	 shl	 eax, 5
  00cd2	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cd9	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ce0	c1 e0 05	 shl	 eax, 5
  00ce3	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cea	eb 4a		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cec	33 c0		 xor	 eax, eax
  00cee	85 c0		 test	 eax, eax
  00cf0	74 44		 je	 SHORT $LN42@convert_yv
  00cf2	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cf9	c1 f8 fb	 sar	 eax, -5
  00cfc	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00d03	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d0a	c1 f8 fb	 sar	 eax, -5
  00d0d	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d14	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d1b	c1 f8 fb	 sar	 eax, -5
  00d1e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d25	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d2c	c1 f8 fb	 sar	 eax, -5
  00d2f	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d36	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d3b	48 98		 cdqe
  00d3d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d45	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d4d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d51	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d58	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d5f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d63	d1 f8		 sar	 eax, 1
  00d65	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d6a	ff c1		 inc	 ecx
  00d6c	48 63 c9	 movsxd	 rcx, ecx
  00d6f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d77	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d7b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d7f	48 98		 cdqe
  00d81	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d89	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d91	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d95	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d9c	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00da3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00da7	d1 f8		 sar	 eax, 1
  00da9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00dad	ff c1		 inc	 ecx
  00daf	48 63 c9	 movsxd	 rcx, ecx
  00db2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00dba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00dbe	e9 29 fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dc3	e9 8e f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00dc8	e9 fd f5 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00dcd	48 8b cc	 mov	 rcx, rsp
  00dd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00ddc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00de4	48 33 cc	 xor	 rcx, rsp
  00de7	e8 00 00 00 00	 call	 __security_check_cookie
  00dec	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00df3	5f		 pop	 rdi
  00df4	5e		 pop	 rsi
  00df5	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_p_to_yuv444_16bit

; 865  : static void convert_yv12_09_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 866  :     convert_yv12_p_to_yuv444_c<uint16_t, 9, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned short,16,0>

; 867  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv159 = 368
tv172 = 372
tv251 = 376
tv253 = 380
tv256 = 384
tv259 = 388
tv265 = 392
tv264 = 396
tv332 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0028a	c7 84 24 64 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T46[rsp], 6
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002b8	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002fd	c7 84 24 6c 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T48[rsp], -6
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0032b	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  0038e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00392	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00399	2b c8		 sub	 ecx, eax
  0039b	8b c1		 mov	 eax, ecx
  0039d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003e2	0f 8d fb 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00454	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0045d	83 c0 04	 add	 eax, 4
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00467	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046e	d1 e0		 shl	 eax, 1
  00470	48 98		 cdqe
  00472	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0047a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00486	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0048a	c1 e0 02	 shl	 eax, 2
  0048d	48 98		 cdqe
  0048f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00497	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0049b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  004a3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004ae	0f 8d 2a 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004b4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004bc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004cc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004d4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d8	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004df	2b c8		 sub	 ecx, eax
  004e1	8b c1		 mov	 eax, ecx
  004e3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ee	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004f6	7c 0d		 jl	 SHORT $LN31@convert_yv
  004f8	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv251[rsp], -2
  00503	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  00505	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN32@convert_yv:
  00510	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  00517	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  0051e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00526	7c 0d		 jl	 SHORT $LN33@convert_yv
  00528	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
  00533	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00535	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN34@convert_yv:
  00540	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  00547	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0054e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00555	83 e8 02	 sub	 eax, 2
  00558	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0055f	7d 0d		 jge	 SHORT $LN35@convert_yv
  00561	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0056e	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv256[rsp], -1
$LN36@convert_yv:
  00579	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00580	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00587	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0058e	83 e8 04	 sub	 eax, 4
  00591	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00598	7d 0d		 jge	 SHORT $LN37@convert_yv
  0059a	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv259[rsp], 2
  005a5	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  005a7	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv259[rsp], 0
$LN38@convert_yv:
  005b2	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv259[rsp]
  005b9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005c0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c7	83 e8 06	 sub	 eax, 6
  005ca	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d1	7d 0d		 jge	 SHORT $LN41@convert_yv
  005d3	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv265[rsp], 3
  005de	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005e0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005e7	83 e8 02	 sub	 eax, 2
  005ea	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005f1	7d 0d		 jge	 SHORT $LN39@convert_yv
  005f3	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  005fe	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  00600	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv264[rsp], -1
$LN40@convert_yv:
  0060b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  00612	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv265[rsp], eax
$LN42@convert_yv:
  00619	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00620	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00627	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00644	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0064b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00652	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0065a	48 98		 cdqe
  0065c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00664	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00668	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0066f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00685	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  0068c	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006a9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006b0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006d4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006db	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006e3	48 98		 cdqe
  006e5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006ed	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006f1	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006f8	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  00700	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  00707	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0070b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00712	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0071a	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00722	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00726	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  0072d	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00735	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  0073d	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00741	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00748	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00750	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00757	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0075b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00762	33 c0		 xor	 eax, eax
  00764	83 f8 01	 cmp	 eax, 1
  00767	74 46		 je	 SHORT $LN24@convert_yv
  00769	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00770	c1 e0 03	 shl	 eax, 3
  00773	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0077a	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00781	c1 e0 03	 shl	 eax, 3
  00784	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0078b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00792	c1 e0 03	 shl	 eax, 3
  00795	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0079c	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007a3	c1 e0 03	 shl	 eax, 3
  007a6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007ad	eb 4a		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007af	33 c0		 xor	 eax, eax
  007b1	85 c0		 test	 eax, eax
  007b3	74 44		 je	 SHORT $LN26@convert_yv
  007b5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007bc	c1 f8 fd	 sar	 eax, -3
  007bf	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007c6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007cd	c1 f8 fd	 sar	 eax, -3
  007d0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007d7	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007de	c1 f8 fd	 sar	 eax, -3
  007e1	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007e8	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007ef	c1 f8 fd	 sar	 eax, -3
  007f2	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f9	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  00804	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00806	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0080d	83 c0 02	 add	 eax, 2
  00810	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  00817	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  0081f	48 83 c0 04	 add	 rax, 4
  00823	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0082b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00833	48 83 c0 02	 add	 rax, 2
  00837	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0083f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00846	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  0084d	0f 8d 86 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00853	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0085a	83 c0 02	 add	 eax, 2
  0085d	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00864	7d 0d		 jge	 SHORT $LN43@convert_yv
  00866	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  00871	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00873	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN44@convert_yv:
  0087e	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  00885	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  0088c	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00893	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0089b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008a2	48 98		 cdqe
  008a4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ac	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008b0	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008b7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008be	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008c6	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008ea	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  00906	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  0090d	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00915	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0091c	48 98		 cdqe
  0091e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00926	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0092a	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00931	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00938	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00940	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00947	48 98		 cdqe
  00949	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00951	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00955	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  0095c	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00963	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0096b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00972	48 98		 cdqe
  00974	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0097c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00980	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00987	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0098f	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00996	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0099a	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  009a1	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  009a9	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009b1	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b5	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009bc	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009c4	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009cc	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009d0	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009d7	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009df	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009e6	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009ea	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009f1	33 c0		 xor	 eax, eax
  009f3	83 f8 01	 cmp	 eax, 1
  009f6	74 46		 je	 SHORT $LN27@convert_yv
  009f8	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009ff	c1 e0 03	 shl	 eax, 3
  00a02	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a09	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a10	c1 e0 03	 shl	 eax, 3
  00a13	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a1a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a21	c1 e0 03	 shl	 eax, 3
  00a24	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a2b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a32	c1 e0 03	 shl	 eax, 3
  00a35	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a3c	eb 4a		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a3e	33 c0		 xor	 eax, eax
  00a40	85 c0		 test	 eax, eax
  00a42	74 44		 je	 SHORT $LN29@convert_yv
  00a44	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a4b	c1 f8 fd	 sar	 eax, -3
  00a4e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a55	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a5c	c1 f8 fd	 sar	 eax, -3
  00a5f	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a66	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a6d	c1 f8 fd	 sar	 eax, -3
  00a70	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a77	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a7e	c1 f8 fd	 sar	 eax, -3
  00a81	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a88	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a8d	48 98		 cdqe
  00a8f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a97	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a9f	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00aa3	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00aaa	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00ab1	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00ab5	d1 f8		 sar	 eax, 1
  00ab7	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00abc	ff c1		 inc	 ecx
  00abe	48 63 c9	 movsxd	 rcx, ecx
  00ac1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ac9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00acd	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ad1	48 98		 cdqe
  00ad3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00adb	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00ae3	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ae7	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00aee	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00af5	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00af9	d1 f8		 sar	 eax, 1
  00afb	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00aff	ff c1		 inc	 ecx
  00b01	48 63 c9	 movsxd	 rcx, ecx
  00b04	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b0c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b10	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b14	03 c0		 add	 eax, eax
  00b16	48 98		 cdqe
  00b18	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b20	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b28	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b2c	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b33	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b3a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b3e	d1 f8		 sar	 eax, 1
  00b40	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b44	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b48	48 63 c9	 movsxd	 rcx, ecx
  00b4b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b53	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b57	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b5c	48 98		 cdqe
  00b5e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b66	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b6e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b72	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b79	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b80	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b84	d1 f8		 sar	 eax, 1
  00b86	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b8b	ff c1		 inc	 ecx
  00b8d	48 63 c9	 movsxd	 rcx, ecx
  00b90	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b98	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b9c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00ba3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00baa	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00bb1	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00bb8	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bbf	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bc6	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bcd	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bd4	e9 2d fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bd9	e9 78 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bde	e9 e7 f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00be3	48 8b cc	 mov	 rcx, rsp
  00be6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bed	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bf2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bfa	48 33 cc	 xor	 rcx, rsp
  00bfd	e8 00 00 00 00	 call	 __security_check_cookie
  00c02	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00c09	5f		 pop	 rdi
  00c0a	5e		 pop	 rsi
  00c0b	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_i_to_yuv444_16bit

; 861  : static void convert_yv12_10_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 862  :     convert_yv12_i_to_yuv444_c<uint16_t, 10, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned short,16,0>

; 863  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv192 = 408
tv205 = 412
tv256 = 416
tv351 = 420
tv476 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 68 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  001a3	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001b5	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001c8	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001cf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001da	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001dc	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001ec	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001f9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  00205	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0020a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00212	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00216	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  0021e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00222	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00229	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0022f	33 c0		 xor	 eax, eax
  00231	85 c0		 test	 eax, eax
  00233	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00235	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  0023d	48 d1 e0	 shl	 rax, 1
  00240	4c 8b c0	 mov	 r8, rax
  00243	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0024b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00253	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00258	e9 42 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0025d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00268	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0026a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00271	ff c0		 inc	 eax
  00273	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0027a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00281	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00288	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  0028e	33 c0		 xor	 eax, eax
  00290	83 f8 01	 cmp	 eax, 1
  00293	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00295	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  002a0	c7 84 24 8c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T56[rsp], 6
  002ab	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002bf	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  002c6	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002ce	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002d6	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002db	8b 00		 mov	 eax, DWORD PTR [rax]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  002e7	d3 e0		 shl	 eax, cl
  002e9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002f1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002f9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002fd	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  00302	33 c0		 xor	 eax, eax
  00304	85 c0		 test	 eax, eax
  00306	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  00308	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00313	c7 84 24 94 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T58[rsp], -6
  0031e	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00326	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0032e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00332	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00339	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00341	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00349	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0034e	8b 00		 mov	 eax, DWORD PTR [rax]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  0035a	d3 f8		 sar	 eax, cl
  0035c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00364	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0036c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00370	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00372	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0037a	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00382	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0038a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00392	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00396	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0039a	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  0039f	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003e2	0f 8d e5 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00454	eb 49		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0045d	83 c0 02	 add	 eax, 2
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00467	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  0046f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00477	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00483	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00487	d1 e0		 shl	 eax, 1
  00489	48 98		 cdqe
  0048b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00493	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00497	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0049f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a3	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  004aa	0f 8d 18 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004b8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004c8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004d0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d4	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004db	2b c8		 sub	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004ea	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004f2	0f 85 e9 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  00503	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00505	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0050c	83 c0 02	 add	 eax, 2
  0050f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  00516	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0051e	48 83 c0 04	 add	 rax, 4
  00522	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0052a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00532	48 83 c0 02	 add	 rax, 2
  00536	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  0053e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00545	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  0054c	0f 8d 8a 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00552	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00559	83 c0 02	 add	 eax, 2
  0055c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00563	7d 0d		 jge	 SHORT $LN44@convert_yv
  00565	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00570	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00572	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN45@convert_yv:
  0057d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00584	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0058b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00593	48 98		 cdqe
  00595	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0059d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a1	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  005a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b0	48 98		 cdqe
  005b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005be	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005c5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cc	48 98		 cdqe
  005ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005da	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e9	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005f0	48 98		 cdqe
  005f2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005fa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fe	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00605	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0060d	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00614	48 98		 cdqe
  00616	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0061e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00622	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00629	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00630	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00637	03 c8		 add	 ecx, eax
  00639	8b c1		 mov	 eax, ecx
  0063b	48 98		 cdqe
  0063d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00645	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00649	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00650	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00658	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0065f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00663	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0066a	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00672	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00679	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00684	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068c	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00693	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00697	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0069e	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  006a6	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006ad	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b1	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006b8	33 c0		 xor	 eax, eax
  006ba	83 f8 01	 cmp	 eax, 1
  006bd	74 46		 je	 SHORT $LN32@convert_yv
  006bf	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006c6	c1 e0 04	 shl	 eax, 4
  006c9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006d0	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006d7	c1 e0 04	 shl	 eax, 4
  006da	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006e1	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006e8	c1 e0 04	 shl	 eax, 4
  006eb	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006f9	c1 e0 04	 shl	 eax, 4
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  00703	eb 4a		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  00705	33 c0		 xor	 eax, eax
  00707	85 c0		 test	 eax, eax
  00709	74 44		 je	 SHORT $LN34@convert_yv
  0070b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00712	c1 f8 fc	 sar	 eax, -4
  00715	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  0071c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00723	c1 f8 fc	 sar	 eax, -4
  00726	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  0072d	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00734	c1 f8 fc	 sar	 eax, -4
  00737	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00745	c1 f8 fc	 sar	 eax, -4
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  0074f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00754	48 98		 cdqe
  00756	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  0075e	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  00766	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0076a	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00771	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  00778	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0077c	d1 f8		 sar	 eax, 1
  0077e	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00783	ff c1		 inc	 ecx
  00785	48 63 c9	 movsxd	 rcx, ecx
  00788	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00790	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00794	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00798	48 98		 cdqe
  0079a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  007a2	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  007aa	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  007ae	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007b5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007bc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007c0	d1 f8		 sar	 eax, 1
  007c2	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007c6	ff c1		 inc	 ecx
  007c8	48 63 c9	 movsxd	 rcx, ecx
  007cb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007d3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007d7	e9 29 fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007dc	e9 e2 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007e1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007e8	83 e8 02	 sub	 eax, 2
  007eb	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007f2	0f 8c e7 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  00803	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  00805	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0080c	83 c0 02	 add	 eax, 2
  0080f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00816	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0081e	48 83 c0 04	 add	 rax, 4
  00822	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0082a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00832	48 83 c0 02	 add	 rax, 2
  00836	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0083e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00845	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0084c	0f 8d 88 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00852	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00859	83 c0 02	 add	 eax, 2
  0085c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00863	7d 0d		 jge	 SHORT $LN46@convert_yv
  00865	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv351[rsp], 1
  00870	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00872	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv351[rsp], 0
$LN47@convert_yv:
  0087d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv351[rsp]
  00884	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0088b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00893	48 98		 cdqe
  00895	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0089d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a1	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  008a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b0	48 98		 cdqe
  008b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008be	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008c5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008ea	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00906	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0090e	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00915	48 98		 cdqe
  00917	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0091f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00923	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0092a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00932	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00939	48 98		 cdqe
  0093b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00943	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00947	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0094e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00956	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0095d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00961	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00968	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00970	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00977	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0097b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00982	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00991	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00995	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0099c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  009a4	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  009ab	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  009af	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009b6	33 c0		 xor	 eax, eax
  009b8	83 f8 01	 cmp	 eax, 1
  009bb	74 46		 je	 SHORT $LN37@convert_yv
  009bd	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009c4	c1 e0 04	 shl	 eax, 4
  009c7	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009ce	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009d5	c1 e0 04	 shl	 eax, 4
  009d8	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009df	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009e6	c1 e0 04	 shl	 eax, 4
  009e9	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009f0	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009f7	c1 e0 04	 shl	 eax, 4
  009fa	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  00a01	eb 4a		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  00a03	33 c0		 xor	 eax, eax
  00a05	85 c0		 test	 eax, eax
  00a07	74 44		 je	 SHORT $LN39@convert_yv
  00a09	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a10	c1 f8 fc	 sar	 eax, -4
  00a13	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a1a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a21	c1 f8 fc	 sar	 eax, -4
  00a24	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a2b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a32	c1 f8 fc	 sar	 eax, -4
  00a35	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a3c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a43	c1 f8 fc	 sar	 eax, -4
  00a46	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a4d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a52	48 98		 cdqe
  00a54	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a5c	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a64	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a68	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a6f	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a76	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a7a	d1 f8		 sar	 eax, 1
  00a7c	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	ff c1		 inc	 ecx
  00a83	48 63 c9	 movsxd	 rcx, ecx
  00a86	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a8e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a92	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a96	48 98		 cdqe
  00a98	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00aa0	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00aa8	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00aac	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00ab3	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aba	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00abe	d1 f8		 sar	 eax, 1
  00ac0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ac4	ff c1		 inc	 ecx
  00ac6	48 63 c9	 movsxd	 rcx, ecx
  00ac9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00ad1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00ad5	e9 2b fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ada	e9 e4 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00adf	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00aea	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00aec	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00af3	83 c0 02	 add	 eax, 2
  00af6	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00afd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00b05	48 83 c0 04	 add	 rax, 4
  00b09	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00b11	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b19	48 83 c0 02	 add	 rax, 2
  00b1d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b25	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b2c	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b33	0f 8d 8a 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b39	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b40	83 c0 02	 add	 eax, 2
  00b43	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b4a	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b4c	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv476[rsp], 1
  00b57	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b59	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv476[rsp], 0
$LN49@convert_yv:
  00b64	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv476[rsp]
  00b6b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b72	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b7a	48 98		 cdqe
  00b7c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b84	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b88	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b8f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b97	48 98		 cdqe
  00b99	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00ba5	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00bac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00bb3	48 98		 cdqe
  00bb5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bbd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bc1	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bc8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bd0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bd7	48 98		 cdqe
  00bd9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00be1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00be5	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bf4	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bfb	48 98		 cdqe
  00bfd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c05	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c09	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00c10	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c17	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c1e	03 c8		 add	 ecx, eax
  00c20	8b c1		 mov	 eax, ecx
  00c22	48 98		 cdqe
  00c24	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c2c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c30	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c37	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c3f	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c46	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c51	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c59	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c60	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c64	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c6b	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c73	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c7a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c7e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c85	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c8d	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c94	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c98	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c9f	33 c0		 xor	 eax, eax
  00ca1	83 f8 01	 cmp	 eax, 1
  00ca4	74 46		 je	 SHORT $LN40@convert_yv
  00ca6	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cad	c1 e0 04	 shl	 eax, 4
  00cb0	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cb7	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cbe	c1 e0 04	 shl	 eax, 4
  00cc1	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cc8	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00ccf	c1 e0 04	 shl	 eax, 4
  00cd2	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cd9	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ce0	c1 e0 04	 shl	 eax, 4
  00ce3	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cea	eb 4a		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cec	33 c0		 xor	 eax, eax
  00cee	85 c0		 test	 eax, eax
  00cf0	74 44		 je	 SHORT $LN42@convert_yv
  00cf2	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cf9	c1 f8 fc	 sar	 eax, -4
  00cfc	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00d03	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d0a	c1 f8 fc	 sar	 eax, -4
  00d0d	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d14	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d1b	c1 f8 fc	 sar	 eax, -4
  00d1e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d25	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d2c	c1 f8 fc	 sar	 eax, -4
  00d2f	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d36	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d3b	48 98		 cdqe
  00d3d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d45	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d4d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d51	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d58	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d5f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d63	d1 f8		 sar	 eax, 1
  00d65	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d6a	ff c1		 inc	 ecx
  00d6c	48 63 c9	 movsxd	 rcx, ecx
  00d6f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d77	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d7b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d7f	48 98		 cdqe
  00d81	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d89	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d91	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d95	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d9c	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00da3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00da7	d1 f8		 sar	 eax, 1
  00da9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00dad	ff c1		 inc	 ecx
  00daf	48 63 c9	 movsxd	 rcx, ecx
  00db2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00dba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00dbe	e9 29 fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dc3	e9 8e f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00dc8	e9 fd f5 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00dcd	48 8b cc	 mov	 rcx, rsp
  00dd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00ddc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00de4	48 33 cc	 xor	 rcx, rsp
  00de7	e8 00 00 00 00	 call	 __security_check_cookie
  00dec	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00df3	5f		 pop	 rdi
  00df4	5e		 pop	 rsi
  00df5	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_p_to_yuv444_16bit

; 857  : static void convert_yv12_10_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 858  :     convert_yv12_p_to_yuv444_c<uint16_t, 10, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned short,16,0>

; 859  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv159 = 368
tv172 = 372
tv251 = 376
tv253 = 380
tv256 = 384
tv259 = 388
tv265 = 392
tv264 = 396
tv332 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0028a	c7 84 24 64 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T46[rsp], 4
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002b8	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002fd	c7 84 24 6c 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T48[rsp], -4
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0032b	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  0038e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00392	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00399	2b c8		 sub	 ecx, eax
  0039b	8b c1		 mov	 eax, ecx
  0039d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003e2	0f 8d f3 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00454	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0045d	83 c0 04	 add	 eax, 4
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00467	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046e	d1 e0		 shl	 eax, 1
  00470	48 98		 cdqe
  00472	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0047a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00486	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0048a	c1 e0 02	 shl	 eax, 2
  0048d	48 98		 cdqe
  0048f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00497	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0049b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  004a3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004ae	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004b4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004bc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004cc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004d4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d8	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004df	2b c8		 sub	 ecx, eax
  004e1	8b c1		 mov	 eax, ecx
  004e3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ee	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004f6	7c 0d		 jl	 SHORT $LN31@convert_yv
  004f8	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv251[rsp], -2
  00503	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  00505	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN32@convert_yv:
  00510	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  00517	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  0051e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00526	7c 0d		 jl	 SHORT $LN33@convert_yv
  00528	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
  00533	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00535	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN34@convert_yv:
  00540	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  00547	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0054e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00555	83 e8 02	 sub	 eax, 2
  00558	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0055f	7d 0d		 jge	 SHORT $LN35@convert_yv
  00561	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0056e	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv256[rsp], -1
$LN36@convert_yv:
  00579	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00580	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00587	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0058e	83 e8 04	 sub	 eax, 4
  00591	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00598	7d 0d		 jge	 SHORT $LN37@convert_yv
  0059a	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv259[rsp], 2
  005a5	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  005a7	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv259[rsp], 0
$LN38@convert_yv:
  005b2	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv259[rsp]
  005b9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005c0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c7	83 e8 06	 sub	 eax, 6
  005ca	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d1	7d 0d		 jge	 SHORT $LN41@convert_yv
  005d3	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv265[rsp], 3
  005de	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005e0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005e7	83 e8 02	 sub	 eax, 2
  005ea	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005f1	7d 0d		 jge	 SHORT $LN39@convert_yv
  005f3	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  005fe	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  00600	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv264[rsp], -1
$LN40@convert_yv:
  0060b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  00612	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv265[rsp], eax
$LN42@convert_yv:
  00619	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00620	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00627	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00644	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0064b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00652	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0065a	48 98		 cdqe
  0065c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00664	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00668	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0066f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00685	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  0068c	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006a9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006b0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006d4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006db	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006e3	48 98		 cdqe
  006e5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006ed	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006f1	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006f8	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  00700	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  00707	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0070b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00712	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0071a	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00722	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00726	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  0072d	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00735	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  0073d	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00741	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00748	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00750	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00757	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0075b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00762	33 c0		 xor	 eax, eax
  00764	83 f8 01	 cmp	 eax, 1
  00767	74 42		 je	 SHORT $LN24@convert_yv
  00769	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00770	03 c0		 add	 eax, eax
  00772	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  00779	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00780	03 c0		 add	 eax, eax
  00782	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  00789	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00790	03 c0		 add	 eax, eax
  00792	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  00799	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007a0	03 c0		 add	 eax, eax
  007a2	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a9	eb 4a		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007ab	33 c0		 xor	 eax, eax
  007ad	85 c0		 test	 eax, eax
  007af	74 44		 je	 SHORT $LN26@convert_yv
  007b1	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b8	c1 f8 ff	 sar	 eax, -1
  007bb	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007c2	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c9	c1 f8 ff	 sar	 eax, -1
  007cc	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007d3	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007da	c1 f8 ff	 sar	 eax, -1
  007dd	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007e4	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007eb	c1 f8 ff	 sar	 eax, -1
  007ee	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f5	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  00800	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00802	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00809	83 c0 02	 add	 eax, 2
  0080c	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  00813	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  0081b	48 83 c0 04	 add	 rax, 4
  0081f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  00827	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  0082f	48 83 c0 02	 add	 rax, 2
  00833	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0083b	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00842	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00849	0f 8d 82 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  0084f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00856	83 c0 02	 add	 eax, 2
  00859	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00860	7d 0d		 jge	 SHORT $LN43@convert_yv
  00862	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  0086d	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  0086f	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN44@convert_yv:
  0087a	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  00881	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00888	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0088f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00897	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0089e	48 98		 cdqe
  008a0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a8	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ac	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008b3	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008ba	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008c2	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c9	48 98		 cdqe
  008cb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008d7	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008de	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008e6	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008ed	48 98		 cdqe
  008ef	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008f7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008fb	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  00902	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00909	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00911	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00918	48 98		 cdqe
  0091a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00922	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00926	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  0092d	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00934	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0093c	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00943	48 98		 cdqe
  00945	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0094d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00951	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00958	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  0095f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00967	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0096e	48 98		 cdqe
  00970	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00978	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0097c	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00983	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0098b	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00992	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00996	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  0099d	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  009a5	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009ad	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b1	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b8	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009c0	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c8	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009cc	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009d3	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009db	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009e2	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009e6	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009ed	33 c0		 xor	 eax, eax
  009ef	83 f8 01	 cmp	 eax, 1
  009f2	74 42		 je	 SHORT $LN27@convert_yv
  009f4	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009fb	03 c0		 add	 eax, eax
  009fd	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a04	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a0b	03 c0		 add	 eax, eax
  00a0d	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a14	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a1b	03 c0		 add	 eax, eax
  00a1d	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a24	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a2b	03 c0		 add	 eax, eax
  00a2d	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a34	eb 4a		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a36	33 c0		 xor	 eax, eax
  00a38	85 c0		 test	 eax, eax
  00a3a	74 44		 je	 SHORT $LN29@convert_yv
  00a3c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a43	c1 f8 ff	 sar	 eax, -1
  00a46	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a4d	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a54	c1 f8 ff	 sar	 eax, -1
  00a57	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5e	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a65	c1 f8 ff	 sar	 eax, -1
  00a68	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6f	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a76	c1 f8 ff	 sar	 eax, -1
  00a79	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a80	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a85	48 98		 cdqe
  00a87	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8f	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a97	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a9b	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00aa2	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa9	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aad	d1 f8		 sar	 eax, 1
  00aaf	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00ab4	ff c1		 inc	 ecx
  00ab6	48 63 c9	 movsxd	 rcx, ecx
  00ab9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ac1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00ac5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac9	48 98		 cdqe
  00acb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00ad3	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00adb	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00adf	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00ae6	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00aed	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00af1	d1 f8		 sar	 eax, 1
  00af3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af7	ff c1		 inc	 ecx
  00af9	48 63 c9	 movsxd	 rcx, ecx
  00afc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b04	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b08	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b0c	03 c0		 add	 eax, eax
  00b0e	48 98		 cdqe
  00b10	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b18	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b20	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b24	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b2b	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b32	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b36	d1 f8		 sar	 eax, 1
  00b38	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b3c	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b40	48 63 c9	 movsxd	 rcx, ecx
  00b43	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b4b	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b4f	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b54	48 98		 cdqe
  00b56	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b5e	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b66	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b6a	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b71	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b78	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b7c	d1 f8		 sar	 eax, 1
  00b7e	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b83	ff c1		 inc	 ecx
  00b85	48 63 c9	 movsxd	 rcx, ecx
  00b88	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b90	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b94	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b9b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00ba2	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00ba9	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00bb0	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bb7	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bbe	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bc5	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bcc	e9 31 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bd1	e9 80 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bd6	e9 ef f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bdb	48 8b cc	 mov	 rcx, rsp
  00bde	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00be5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bea	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bf2	48 33 cc	 xor	 rcx, rsp
  00bf5	e8 00 00 00 00	 call	 __security_check_cookie
  00bfa	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00c01	5f		 pop	 rdi
  00c02	5e		 pop	 rsi
  00c03	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_i_to_yuv444_16bit

; 853  : static void convert_yv12_12_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 854  :     convert_yv12_i_to_yuv444_c<uint16_t, 12, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned short,16,0>

; 855  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv192 = 408
tv205 = 412
tv256 = 416
tv351 = 420
tv476 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 68 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  001a3	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001b5	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001c8	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001cf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001da	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001dc	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001ec	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001f9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  00205	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0020a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00212	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00216	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  0021e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00222	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00229	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0022f	33 c0		 xor	 eax, eax
  00231	85 c0		 test	 eax, eax
  00233	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00235	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  0023d	48 d1 e0	 shl	 rax, 1
  00240	4c 8b c0	 mov	 r8, rax
  00243	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0024b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00253	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00258	e9 42 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0025d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00268	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0026a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00271	ff c0		 inc	 eax
  00273	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0027a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00281	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00288	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  0028e	33 c0		 xor	 eax, eax
  00290	83 f8 01	 cmp	 eax, 1
  00293	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00295	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  002a0	c7 84 24 8c 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T56[rsp], 4
  002ab	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002bf	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  002c6	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002ce	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002d6	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002db	8b 00		 mov	 eax, DWORD PTR [rax]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  002e7	d3 e0		 shl	 eax, cl
  002e9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002f1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002f9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002fd	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  00302	33 c0		 xor	 eax, eax
  00304	85 c0		 test	 eax, eax
  00306	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  00308	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00313	c7 84 24 94 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T58[rsp], -4
  0031e	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00326	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0032e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00332	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00339	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00341	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00349	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0034e	8b 00		 mov	 eax, DWORD PTR [rax]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  0035a	d3 f8		 sar	 eax, cl
  0035c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00364	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0036c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00370	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00372	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0037a	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00382	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0038a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00392	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00396	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0039a	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  0039f	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003e2	0f 8d e5 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00454	eb 49		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0045d	83 c0 02	 add	 eax, 2
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00467	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  0046f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00477	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00483	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00487	d1 e0		 shl	 eax, 1
  00489	48 98		 cdqe
  0048b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00493	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00497	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0049f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a3	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  004aa	0f 8d 18 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004b8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004c8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004d0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d4	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004db	2b c8		 sub	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004ea	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004f2	0f 85 e9 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  00503	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00505	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0050c	83 c0 02	 add	 eax, 2
  0050f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  00516	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0051e	48 83 c0 04	 add	 rax, 4
  00522	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0052a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00532	48 83 c0 02	 add	 rax, 2
  00536	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  0053e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00545	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  0054c	0f 8d 8a 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00552	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00559	83 c0 02	 add	 eax, 2
  0055c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00563	7d 0d		 jge	 SHORT $LN44@convert_yv
  00565	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00570	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00572	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN45@convert_yv:
  0057d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00584	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0058b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00593	48 98		 cdqe
  00595	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0059d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a1	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  005a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b0	48 98		 cdqe
  005b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005be	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005c5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cc	48 98		 cdqe
  005ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005da	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e9	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005f0	48 98		 cdqe
  005f2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005fa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fe	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00605	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0060d	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00614	48 98		 cdqe
  00616	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0061e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00622	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00629	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00630	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00637	03 c8		 add	 ecx, eax
  00639	8b c1		 mov	 eax, ecx
  0063b	48 98		 cdqe
  0063d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00645	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00649	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00650	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00658	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0065f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00663	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0066a	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00672	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00679	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00684	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068c	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00693	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00697	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0069e	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  006a6	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006ad	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b1	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006b8	33 c0		 xor	 eax, eax
  006ba	83 f8 01	 cmp	 eax, 1
  006bd	74 46		 je	 SHORT $LN32@convert_yv
  006bf	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006c6	c1 e0 02	 shl	 eax, 2
  006c9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006d0	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006d7	c1 e0 02	 shl	 eax, 2
  006da	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006e1	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006e8	c1 e0 02	 shl	 eax, 2
  006eb	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006f9	c1 e0 02	 shl	 eax, 2
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  00703	eb 4a		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  00705	33 c0		 xor	 eax, eax
  00707	85 c0		 test	 eax, eax
  00709	74 44		 je	 SHORT $LN34@convert_yv
  0070b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00712	c1 f8 fe	 sar	 eax, -2
  00715	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  0071c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00723	c1 f8 fe	 sar	 eax, -2
  00726	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  0072d	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00734	c1 f8 fe	 sar	 eax, -2
  00737	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00745	c1 f8 fe	 sar	 eax, -2
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  0074f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00754	48 98		 cdqe
  00756	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  0075e	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  00766	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0076a	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00771	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  00778	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0077c	d1 f8		 sar	 eax, 1
  0077e	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00783	ff c1		 inc	 ecx
  00785	48 63 c9	 movsxd	 rcx, ecx
  00788	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00790	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00794	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00798	48 98		 cdqe
  0079a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  007a2	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  007aa	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  007ae	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007b5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007bc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007c0	d1 f8		 sar	 eax, 1
  007c2	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007c6	ff c1		 inc	 ecx
  007c8	48 63 c9	 movsxd	 rcx, ecx
  007cb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007d3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007d7	e9 29 fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007dc	e9 e2 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007e1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007e8	83 e8 02	 sub	 eax, 2
  007eb	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007f2	0f 8c e7 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  00803	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  00805	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0080c	83 c0 02	 add	 eax, 2
  0080f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00816	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0081e	48 83 c0 04	 add	 rax, 4
  00822	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0082a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00832	48 83 c0 02	 add	 rax, 2
  00836	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0083e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00845	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0084c	0f 8d 88 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00852	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00859	83 c0 02	 add	 eax, 2
  0085c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00863	7d 0d		 jge	 SHORT $LN46@convert_yv
  00865	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv351[rsp], 1
  00870	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00872	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv351[rsp], 0
$LN47@convert_yv:
  0087d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv351[rsp]
  00884	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0088b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00893	48 98		 cdqe
  00895	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0089d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a1	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  008a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b0	48 98		 cdqe
  008b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008be	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008c5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008ea	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00906	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0090e	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00915	48 98		 cdqe
  00917	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0091f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00923	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0092a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00932	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00939	48 98		 cdqe
  0093b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00943	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00947	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0094e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00956	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0095d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00961	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00968	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00970	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00977	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0097b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00982	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00991	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00995	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0099c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  009a4	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  009ab	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  009af	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009b6	33 c0		 xor	 eax, eax
  009b8	83 f8 01	 cmp	 eax, 1
  009bb	74 46		 je	 SHORT $LN37@convert_yv
  009bd	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009c4	c1 e0 02	 shl	 eax, 2
  009c7	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009ce	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009d5	c1 e0 02	 shl	 eax, 2
  009d8	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009df	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009e6	c1 e0 02	 shl	 eax, 2
  009e9	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009f0	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009f7	c1 e0 02	 shl	 eax, 2
  009fa	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  00a01	eb 4a		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  00a03	33 c0		 xor	 eax, eax
  00a05	85 c0		 test	 eax, eax
  00a07	74 44		 je	 SHORT $LN39@convert_yv
  00a09	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a10	c1 f8 fe	 sar	 eax, -2
  00a13	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a1a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a21	c1 f8 fe	 sar	 eax, -2
  00a24	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a2b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a32	c1 f8 fe	 sar	 eax, -2
  00a35	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a3c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a43	c1 f8 fe	 sar	 eax, -2
  00a46	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a4d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a52	48 98		 cdqe
  00a54	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a5c	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a64	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a68	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a6f	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a76	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a7a	d1 f8		 sar	 eax, 1
  00a7c	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	ff c1		 inc	 ecx
  00a83	48 63 c9	 movsxd	 rcx, ecx
  00a86	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a8e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a92	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a96	48 98		 cdqe
  00a98	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00aa0	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00aa8	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00aac	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00ab3	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aba	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00abe	d1 f8		 sar	 eax, 1
  00ac0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ac4	ff c1		 inc	 ecx
  00ac6	48 63 c9	 movsxd	 rcx, ecx
  00ac9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00ad1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00ad5	e9 2b fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ada	e9 e4 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00adf	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00aea	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00aec	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00af3	83 c0 02	 add	 eax, 2
  00af6	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00afd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00b05	48 83 c0 04	 add	 rax, 4
  00b09	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00b11	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b19	48 83 c0 02	 add	 rax, 2
  00b1d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b25	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b2c	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b33	0f 8d 8a 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b39	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b40	83 c0 02	 add	 eax, 2
  00b43	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b4a	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b4c	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv476[rsp], 1
  00b57	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b59	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv476[rsp], 0
$LN49@convert_yv:
  00b64	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv476[rsp]
  00b6b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b72	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b7a	48 98		 cdqe
  00b7c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b84	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b88	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b8f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b97	48 98		 cdqe
  00b99	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00ba5	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00bac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00bb3	48 98		 cdqe
  00bb5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bbd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bc1	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bc8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bd0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bd7	48 98		 cdqe
  00bd9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00be1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00be5	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bf4	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bfb	48 98		 cdqe
  00bfd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c05	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c09	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00c10	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c17	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c1e	03 c8		 add	 ecx, eax
  00c20	8b c1		 mov	 eax, ecx
  00c22	48 98		 cdqe
  00c24	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c2c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c30	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c37	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c3f	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c46	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c51	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c59	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c60	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c64	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c6b	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c73	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c7a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c7e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c85	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c8d	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c94	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c98	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c9f	33 c0		 xor	 eax, eax
  00ca1	83 f8 01	 cmp	 eax, 1
  00ca4	74 46		 je	 SHORT $LN40@convert_yv
  00ca6	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cad	c1 e0 02	 shl	 eax, 2
  00cb0	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cb7	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cbe	c1 e0 02	 shl	 eax, 2
  00cc1	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cc8	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00ccf	c1 e0 02	 shl	 eax, 2
  00cd2	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cd9	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ce0	c1 e0 02	 shl	 eax, 2
  00ce3	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cea	eb 4a		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cec	33 c0		 xor	 eax, eax
  00cee	85 c0		 test	 eax, eax
  00cf0	74 44		 je	 SHORT $LN42@convert_yv
  00cf2	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cf9	c1 f8 fe	 sar	 eax, -2
  00cfc	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00d03	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d0a	c1 f8 fe	 sar	 eax, -2
  00d0d	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d14	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d1b	c1 f8 fe	 sar	 eax, -2
  00d1e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d25	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d2c	c1 f8 fe	 sar	 eax, -2
  00d2f	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d36	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d3b	48 98		 cdqe
  00d3d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d45	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d4d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d51	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d58	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d5f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d63	d1 f8		 sar	 eax, 1
  00d65	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d6a	ff c1		 inc	 ecx
  00d6c	48 63 c9	 movsxd	 rcx, ecx
  00d6f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d77	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d7b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d7f	48 98		 cdqe
  00d81	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d89	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d91	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d95	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d9c	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00da3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00da7	d1 f8		 sar	 eax, 1
  00da9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00dad	ff c1		 inc	 ecx
  00daf	48 63 c9	 movsxd	 rcx, ecx
  00db2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00dba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00dbe	e9 29 fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dc3	e9 8e f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00dc8	e9 fd f5 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00dcd	48 8b cc	 mov	 rcx, rsp
  00dd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00ddc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00de4	48 33 cc	 xor	 rcx, rsp
  00de7	e8 00 00 00 00	 call	 __security_check_cookie
  00dec	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00df3	5f		 pop	 rdi
  00df4	5e		 pop	 rsi
  00df5	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_p_to_yuv444_16bit

; 849  : static void convert_yv12_12_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 850  :     convert_yv12_p_to_yuv444_c<uint16_t, 12, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned short,16,0>

; 851  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv159 = 368
tv172 = 372
tv251 = 376
tv253 = 380
tv256 = 384
tv259 = 388
tv265 = 392
tv264 = 396
tv332 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0028a	c7 84 24 64 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T46[rsp], 2
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002b8	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002fd	c7 84 24 6c 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T48[rsp], -2
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0032b	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  0038e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00392	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00399	2b c8		 sub	 ecx, eax
  0039b	8b c1		 mov	 eax, ecx
  0039d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003e2	0f 8d f3 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00454	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0045d	83 c0 04	 add	 eax, 4
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00467	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046e	d1 e0		 shl	 eax, 1
  00470	48 98		 cdqe
  00472	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0047a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00486	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0048a	c1 e0 02	 shl	 eax, 2
  0048d	48 98		 cdqe
  0048f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00497	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0049b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  004a3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004ae	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004b4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004bc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004cc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004d4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d8	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004df	2b c8		 sub	 ecx, eax
  004e1	8b c1		 mov	 eax, ecx
  004e3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ee	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004f6	7c 0d		 jl	 SHORT $LN31@convert_yv
  004f8	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv251[rsp], -2
  00503	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  00505	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN32@convert_yv:
  00510	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  00517	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  0051e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00526	7c 0d		 jl	 SHORT $LN33@convert_yv
  00528	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
  00533	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00535	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN34@convert_yv:
  00540	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  00547	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0054e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00555	83 e8 02	 sub	 eax, 2
  00558	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0055f	7d 0d		 jge	 SHORT $LN35@convert_yv
  00561	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0056e	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv256[rsp], -1
$LN36@convert_yv:
  00579	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00580	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00587	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0058e	83 e8 04	 sub	 eax, 4
  00591	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00598	7d 0d		 jge	 SHORT $LN37@convert_yv
  0059a	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv259[rsp], 2
  005a5	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  005a7	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv259[rsp], 0
$LN38@convert_yv:
  005b2	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv259[rsp]
  005b9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005c0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c7	83 e8 06	 sub	 eax, 6
  005ca	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d1	7d 0d		 jge	 SHORT $LN41@convert_yv
  005d3	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv265[rsp], 3
  005de	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005e0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005e7	83 e8 02	 sub	 eax, 2
  005ea	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005f1	7d 0d		 jge	 SHORT $LN39@convert_yv
  005f3	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  005fe	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  00600	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv264[rsp], -1
$LN40@convert_yv:
  0060b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  00612	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv265[rsp], eax
$LN42@convert_yv:
  00619	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00620	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00627	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00644	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0064b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00652	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0065a	48 98		 cdqe
  0065c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00664	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00668	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0066f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00685	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  0068c	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006a9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006b0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006d4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006db	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006e3	48 98		 cdqe
  006e5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006ed	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006f1	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006f8	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  00700	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  00707	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0070b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00712	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0071a	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00722	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00726	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  0072d	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00735	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  0073d	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00741	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00748	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00750	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00757	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0075b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00762	33 c0		 xor	 eax, eax
  00764	85 c0		 test	 eax, eax
  00766	74 46		 je	 SHORT $LN24@convert_yv
  00768	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  0076f	c1 e0 ff	 shl	 eax, -1
  00772	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  00779	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00780	c1 e0 ff	 shl	 eax, -1
  00783	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0078a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00791	c1 e0 ff	 shl	 eax, -1
  00794	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0079b	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007a2	c1 e0 ff	 shl	 eax, -1
  007a5	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007ac	eb 47		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007ae	33 c0		 xor	 eax, eax
  007b0	83 f8 01	 cmp	 eax, 1
  007b3	74 40		 je	 SHORT $LN26@convert_yv
  007b5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007bc	d1 f8		 sar	 eax, 1
  007be	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007c5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007cc	d1 f8		 sar	 eax, 1
  007ce	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007d5	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007dc	d1 f8		 sar	 eax, 1
  007de	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007e5	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007ec	d1 f8		 sar	 eax, 1
  007ee	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f5	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  00800	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00802	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00809	83 c0 02	 add	 eax, 2
  0080c	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  00813	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  0081b	48 83 c0 04	 add	 rax, 4
  0081f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  00827	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  0082f	48 83 c0 02	 add	 rax, 2
  00833	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0083b	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00842	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00849	0f 8d 82 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  0084f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00856	83 c0 02	 add	 eax, 2
  00859	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00860	7d 0d		 jge	 SHORT $LN43@convert_yv
  00862	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  0086d	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  0086f	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN44@convert_yv:
  0087a	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  00881	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00888	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0088f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00897	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0089e	48 98		 cdqe
  008a0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a8	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ac	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008b3	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008ba	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008c2	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c9	48 98		 cdqe
  008cb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008d7	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008de	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008e6	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008ed	48 98		 cdqe
  008ef	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008f7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008fb	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  00902	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00909	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00911	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00918	48 98		 cdqe
  0091a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00922	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00926	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  0092d	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00934	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0093c	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00943	48 98		 cdqe
  00945	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0094d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00951	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00958	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  0095f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00967	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0096e	48 98		 cdqe
  00970	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00978	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0097c	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00983	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0098b	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00992	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00996	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  0099d	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  009a5	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009ad	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b1	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b8	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009c0	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c8	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009cc	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009d3	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009db	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009e2	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009e6	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009ed	33 c0		 xor	 eax, eax
  009ef	85 c0		 test	 eax, eax
  009f1	74 46		 je	 SHORT $LN27@convert_yv
  009f3	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009fa	c1 e0 ff	 shl	 eax, -1
  009fd	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a04	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a0b	c1 e0 ff	 shl	 eax, -1
  00a0e	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a15	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a1c	c1 e0 ff	 shl	 eax, -1
  00a1f	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a26	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a2d	c1 e0 ff	 shl	 eax, -1
  00a30	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a37	eb 47		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a39	33 c0		 xor	 eax, eax
  00a3b	83 f8 01	 cmp	 eax, 1
  00a3e	74 40		 je	 SHORT $LN29@convert_yv
  00a40	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a47	d1 f8		 sar	 eax, 1
  00a49	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a50	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a57	d1 f8		 sar	 eax, 1
  00a59	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a60	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a67	d1 f8		 sar	 eax, 1
  00a69	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a70	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a77	d1 f8		 sar	 eax, 1
  00a79	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a80	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a85	48 98		 cdqe
  00a87	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8f	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a97	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a9b	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00aa2	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa9	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aad	d1 f8		 sar	 eax, 1
  00aaf	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00ab4	ff c1		 inc	 ecx
  00ab6	48 63 c9	 movsxd	 rcx, ecx
  00ab9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ac1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00ac5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac9	48 98		 cdqe
  00acb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00ad3	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00adb	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00adf	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00ae6	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00aed	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00af1	d1 f8		 sar	 eax, 1
  00af3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af7	ff c1		 inc	 ecx
  00af9	48 63 c9	 movsxd	 rcx, ecx
  00afc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b04	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b08	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b0c	03 c0		 add	 eax, eax
  00b0e	48 98		 cdqe
  00b10	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b18	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b20	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b24	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b2b	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b32	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b36	d1 f8		 sar	 eax, 1
  00b38	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b3c	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b40	48 63 c9	 movsxd	 rcx, ecx
  00b43	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b4b	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b4f	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b54	48 98		 cdqe
  00b56	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b5e	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b66	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b6a	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b71	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b78	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b7c	d1 f8		 sar	 eax, 1
  00b7e	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b83	ff c1		 inc	 ecx
  00b85	48 63 c9	 movsxd	 rcx, ecx
  00b88	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b90	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b94	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b9b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00ba2	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00ba9	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00bb0	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bb7	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bbe	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bc5	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bcc	e9 31 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bd1	e9 80 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bd6	e9 ef f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bdb	48 8b cc	 mov	 rcx, rsp
  00bde	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00be5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bea	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bf2	48 33 cc	 xor	 rcx, rsp
  00bf5	e8 00 00 00 00	 call	 __security_check_cookie
  00bfa	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00c01	5f		 pop	 rdi
  00c02	5e		 pop	 rsi
  00c03	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_i_to_yuv444_16bit

; 845  : static void convert_yv12_14_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 846  :     convert_yv12_i_to_yuv444_c<uint16_t, 14, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned short,16,0>

; 847  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv192 = 408
tv205 = 412
tv256 = 416
tv343 = 420
tv460 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 68 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  001a3	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001b5	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001c8	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001cf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001da	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001dc	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001ec	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001f9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  00205	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0020a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00212	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00216	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  0021e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00222	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00229	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0022f	33 c0		 xor	 eax, eax
  00231	85 c0		 test	 eax, eax
  00233	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00235	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  0023d	48 d1 e0	 shl	 rax, 1
  00240	4c 8b c0	 mov	 r8, rax
  00243	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0024b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00253	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00258	e9 42 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0025d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00268	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0026a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00271	ff c0		 inc	 eax
  00273	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0027a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00281	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00288	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  0028e	33 c0		 xor	 eax, eax
  00290	83 f8 01	 cmp	 eax, 1
  00293	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00295	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  002a0	c7 84 24 8c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T56[rsp], 2
  002ab	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002bf	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  002c6	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002ce	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002d6	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002db	8b 00		 mov	 eax, DWORD PTR [rax]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  002e7	d3 e0		 shl	 eax, cl
  002e9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002f1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002f9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002fd	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  00302	33 c0		 xor	 eax, eax
  00304	85 c0		 test	 eax, eax
  00306	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  00308	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00313	c7 84 24 94 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T58[rsp], -2
  0031e	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00326	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0032e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00332	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00339	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00341	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00349	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0034e	8b 00		 mov	 eax, DWORD PTR [rax]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  0035a	d3 f8		 sar	 eax, cl
  0035c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00364	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0036c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00370	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00372	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0037a	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00382	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0038a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00392	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00396	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0039a	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  0039f	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003e2	0f 8d 9a 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00454	eb 49		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0045d	83 c0 02	 add	 eax, 2
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00467	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  0046f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00477	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00483	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00487	d1 e0		 shl	 eax, 1
  00489	48 98		 cdqe
  0048b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00493	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00497	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0049f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a3	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  004aa	0f 8d cd 08 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004b8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004c8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004d0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d4	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004db	2b c8		 sub	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004ea	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004f2	0f 85 d0 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  00503	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00505	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0050c	83 c0 02	 add	 eax, 2
  0050f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  00516	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0051e	48 83 c0 04	 add	 rax, 4
  00522	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0052a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00532	48 83 c0 02	 add	 rax, 2
  00536	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  0053e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00545	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  0054c	0f 8d 71 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00552	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00559	83 c0 02	 add	 eax, 2
  0055c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00563	7d 0d		 jge	 SHORT $LN44@convert_yv
  00565	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00570	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00572	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN45@convert_yv:
  0057d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00584	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0058b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00593	48 98		 cdqe
  00595	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0059d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a1	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  005a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b0	48 98		 cdqe
  005b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005be	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005c5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cc	48 98		 cdqe
  005ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005da	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e9	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005f0	48 98		 cdqe
  005f2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005fa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fe	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00605	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0060d	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00614	48 98		 cdqe
  00616	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0061e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00622	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00629	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00630	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00637	03 c8		 add	 ecx, eax
  00639	8b c1		 mov	 eax, ecx
  0063b	48 98		 cdqe
  0063d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00645	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00649	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00650	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00658	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0065f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00663	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0066a	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00672	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00679	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00684	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068c	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00693	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00697	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0069e	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  006a6	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006ad	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b1	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006b8	33 c0		 xor	 eax, eax
  006ba	85 c0		 test	 eax, eax
  006bc	74 3a		 je	 SHORT $LN32@convert_yv
  006be	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006c5	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006cc	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006d3	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006da	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006e1	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e8	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 3e		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	85 c0		 test	 eax, eax
  006fc	74 38		 je	 SHORT $LN34@convert_yv
  006fe	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00705	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  0070c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00713	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  0071a	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00721	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00728	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  0072f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00736	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0073b	48 98		 cdqe
  0073d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00745	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  0074d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00751	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00758	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0075f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00763	d1 f8		 sar	 eax, 1
  00765	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  0076a	ff c1		 inc	 ecx
  0076c	48 63 c9	 movsxd	 rcx, ecx
  0076f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00777	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  0077b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0077f	48 98		 cdqe
  00781	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00789	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  00791	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00795	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  0079c	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007a3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007a7	d1 f8		 sar	 eax, 1
  007a9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007ad	ff c1		 inc	 ecx
  007af	48 63 c9	 movsxd	 rcx, ecx
  007b2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007ba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007be	e9 42 fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007c3	e9 b0 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007c8	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007cf	83 e8 02	 sub	 eax, 2
  007d2	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007d9	0f 8c ce 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007df	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007ea	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007ec	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007f3	83 c0 02	 add	 eax, 2
  007f6	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  007fd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00805	48 83 c0 04	 add	 rax, 4
  00809	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00811	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00819	48 83 c0 02	 add	 rax, 2
  0081d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  00825	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  0082c	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  00833	0f 8d 6f 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00839	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00840	83 c0 02	 add	 eax, 2
  00843	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  0084a	7d 0d		 jge	 SHORT $LN46@convert_yv
  0084c	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv343[rsp], 1
  00857	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00859	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv343[rsp], 0
$LN47@convert_yv:
  00864	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv343[rsp]
  0086b	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00872	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  0087a	48 98		 cdqe
  0087c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00884	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00888	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0088f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00897	48 98		 cdqe
  00899	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a5	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008ac	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b4	48 98		 cdqe
  008b6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008c2	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008c9	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008d1	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008d8	48 98		 cdqe
  008da	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008e2	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008e6	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008ed	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008f5	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008fc	48 98		 cdqe
  008fe	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00906	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0090a	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  00911	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00919	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00920	48 98		 cdqe
  00922	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0092a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0092e	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00935	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  0093d	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  00944	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00948	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0094f	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00957	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  0095e	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00962	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00969	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00971	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00978	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0097c	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00983	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098b	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  00992	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00996	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  0099d	33 c0		 xor	 eax, eax
  0099f	85 c0		 test	 eax, eax
  009a1	74 3a		 je	 SHORT $LN37@convert_yv
  009a3	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009aa	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009b1	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009b8	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009bf	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009c6	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009cd	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009d4	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009db	eb 3e		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009dd	33 c0		 xor	 eax, eax
  009df	85 c0		 test	 eax, eax
  009e1	74 38		 je	 SHORT $LN39@convert_yv
  009e3	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009ea	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009f1	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009f8	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ff	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a06	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a0d	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a14	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a1b	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a20	48 98		 cdqe
  00a22	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a2a	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a32	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a36	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a3d	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a44	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a48	d1 f8		 sar	 eax, 1
  00a4a	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a4f	ff c1		 inc	 ecx
  00a51	48 63 c9	 movsxd	 rcx, ecx
  00a54	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a5c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a60	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a64	48 98		 cdqe
  00a66	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a6e	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00a76	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a7a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a81	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00a88	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a8c	d1 f8		 sar	 eax, 1
  00a8e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00a92	ff c1		 inc	 ecx
  00a94	48 63 c9	 movsxd	 rcx, ecx
  00a97	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a9f	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00aa3	e9 44 fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00aa8	e9 cb 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00aad	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ab8	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00aba	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00ac1	83 c0 02	 add	 eax, 2
  00ac4	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00acb	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00ad3	48 83 c0 04	 add	 rax, 4
  00ad7	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00adf	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00ae7	48 83 c0 02	 add	 rax, 2
  00aeb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00af3	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00afa	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b01	0f 8d 71 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b07	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b0e	83 c0 02	 add	 eax, 2
  00b11	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b18	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b1a	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv460[rsp], 1
  00b25	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b27	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv460[rsp], 0
$LN49@convert_yv:
  00b32	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv460[rsp]
  00b39	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b40	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b48	48 98		 cdqe
  00b4a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b52	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b56	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b5d	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b65	48 98		 cdqe
  00b67	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b6f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b73	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b7a	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b81	48 98		 cdqe
  00b83	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b8f	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00b96	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b9e	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00ba5	48 98		 cdqe
  00ba7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00baf	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bb3	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bba	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bc2	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc9	48 98		 cdqe
  00bcb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bd3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd7	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bde	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00be5	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00bec	03 c8		 add	 ecx, eax
  00bee	8b c1		 mov	 eax, ecx
  00bf0	48 98		 cdqe
  00bf2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bfa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bfe	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c05	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c0d	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c14	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c18	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c1f	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c27	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c2e	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c32	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c39	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c41	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c48	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4c	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c53	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5b	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c62	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c66	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c6d	33 c0		 xor	 eax, eax
  00c6f	85 c0		 test	 eax, eax
  00c71	74 3a		 je	 SHORT $LN40@convert_yv
  00c73	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c7a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00c81	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00c88	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00c8f	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00c96	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00c9d	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ca4	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cab	eb 3e		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cad	33 c0		 xor	 eax, eax
  00caf	85 c0		 test	 eax, eax
  00cb1	74 38		 je	 SHORT $LN42@convert_yv
  00cb3	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cba	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cc1	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cc8	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00ccf	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cd6	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cdd	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ce4	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00ceb	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00cf0	48 98		 cdqe
  00cf2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00cfa	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d02	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d06	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d0d	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d14	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d18	d1 f8		 sar	 eax, 1
  00d1a	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d1f	ff c1		 inc	 ecx
  00d21	48 63 c9	 movsxd	 rcx, ecx
  00d24	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d2c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d30	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d34	48 98		 cdqe
  00d36	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d3e	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d46	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d4a	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d51	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d58	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d5c	d1 f8		 sar	 eax, 1
  00d5e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d62	ff c1		 inc	 ecx
  00d64	48 63 c9	 movsxd	 rcx, ecx
  00d67	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d6f	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00d73	e9 42 fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00d78	e9 d9 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00d7d	e9 48 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00d82	48 8b cc	 mov	 rcx, rsp
  00d85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00d8c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00d91	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d99	48 33 cc	 xor	 rcx, rsp
  00d9c	e8 00 00 00 00	 call	 __security_check_cookie
  00da1	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00da8	5f		 pop	 rdi
  00da9	5e		 pop	 rsi
  00daa	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_p_to_yuv444_16bit

; 841  : static void convert_yv12_14_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 842  :     convert_yv12_p_to_yuv444_c<uint16_t, 14, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned short,16,0>

; 843  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv159 = 368
tv172 = 372
tv251 = 376
tv253 = 380
tv256 = 384
tv259 = 388
tv265 = 392
tv264 = 396
tv332 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00219	33 c0		 xor	 eax, eax
  0021b	83 f8 01	 cmp	 eax, 1
  0021e	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00220	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00228	48 d1 e0	 shl	 rax, 1
  0022b	4c 8b c0	 mov	 r8, rax
  0022e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00236	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023e	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00243	e9 41 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00248	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00253	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00255	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025c	ff c0		 inc	 eax
  0025e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00265	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026c	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00273	0f 8d 10 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00279	33 c0		 xor	 eax, eax
  0027b	85 c0		 test	 eax, eax
  0027d	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0028a	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T46[rsp], 0
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002b8	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002fd	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T48[rsp], 0
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0032b	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00384	e9 cc fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  0038e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00392	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00399	2b c8		 sub	 ecx, eax
  0039b	8b c1		 mov	 eax, ecx
  0039d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003e2	0f 8d fb 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00454	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0045d	83 c0 04	 add	 eax, 4
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00467	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046e	d1 e0		 shl	 eax, 1
  00470	48 98		 cdqe
  00472	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0047a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00486	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0048a	c1 e0 02	 shl	 eax, 2
  0048d	48 98		 cdqe
  0048f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00497	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0049b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  004a3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004ae	0f 8d 2a 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004b4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004bc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004cc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004d4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d8	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004df	2b c8		 sub	 ecx, eax
  004e1	8b c1		 mov	 eax, ecx
  004e3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ee	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004f6	7c 0d		 jl	 SHORT $LN31@convert_yv
  004f8	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv251[rsp], -2
  00503	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  00505	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
$LN32@convert_yv:
  00510	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv251[rsp]
  00517	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  0051e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00526	7c 0d		 jl	 SHORT $LN33@convert_yv
  00528	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
  00533	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00535	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN34@convert_yv:
  00540	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  00547	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0054e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00555	83 e8 02	 sub	 eax, 2
  00558	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0055f	7d 0d		 jge	 SHORT $LN35@convert_yv
  00561	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  0056c	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0056e	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv256[rsp], -1
$LN36@convert_yv:
  00579	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00580	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00587	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0058e	83 e8 04	 sub	 eax, 4
  00591	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00598	7d 0d		 jge	 SHORT $LN37@convert_yv
  0059a	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv259[rsp], 2
  005a5	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  005a7	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv259[rsp], 0
$LN38@convert_yv:
  005b2	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv259[rsp]
  005b9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005c0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c7	83 e8 06	 sub	 eax, 6
  005ca	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d1	7d 0d		 jge	 SHORT $LN41@convert_yv
  005d3	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv265[rsp], 3
  005de	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005e0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005e7	83 e8 02	 sub	 eax, 2
  005ea	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005f1	7d 0d		 jge	 SHORT $LN39@convert_yv
  005f3	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  005fe	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  00600	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv264[rsp], -1
$LN40@convert_yv:
  0060b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  00612	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv265[rsp], eax
$LN42@convert_yv:
  00619	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv265[rsp]
  00620	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00627	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00644	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0064b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00652	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0065a	48 98		 cdqe
  0065c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00664	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00668	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0066f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00685	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  0068c	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006a9	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006b0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006d4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006db	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006e3	48 98		 cdqe
  006e5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006ed	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006f1	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006f8	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  00700	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  00707	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0070b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00712	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0071a	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00722	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00726	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  0072d	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00735	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  0073d	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00741	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00748	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00750	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00757	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0075b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00762	33 c0		 xor	 eax, eax
  00764	85 c0		 test	 eax, eax
  00766	74 46		 je	 SHORT $LN24@convert_yv
  00768	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  0076f	c1 e0 fd	 shl	 eax, -3
  00772	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  00779	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00780	c1 e0 fd	 shl	 eax, -3
  00783	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0078a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00791	c1 e0 fd	 shl	 eax, -3
  00794	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0079b	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007a2	c1 e0 fd	 shl	 eax, -3
  007a5	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007ac	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007ae	33 c0		 xor	 eax, eax
  007b0	83 f8 01	 cmp	 eax, 1
  007b3	74 44		 je	 SHORT $LN26@convert_yv
  007b5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007bc	c1 f8 03	 sar	 eax, 3
  007bf	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007c6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007cd	c1 f8 03	 sar	 eax, 3
  007d0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007d7	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007de	c1 f8 03	 sar	 eax, 3
  007e1	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007e8	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007ef	c1 f8 03	 sar	 eax, 3
  007f2	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f9	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  00804	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00806	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0080d	83 c0 02	 add	 eax, 2
  00810	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  00817	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  0081f	48 83 c0 04	 add	 rax, 4
  00823	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0082b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00833	48 83 c0 02	 add	 rax, 2
  00837	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0083f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00846	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  0084d	0f 8d 86 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00853	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0085a	83 c0 02	 add	 eax, 2
  0085d	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00864	7d 0d		 jge	 SHORT $LN43@convert_yv
  00866	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  00871	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00873	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN44@convert_yv:
  0087e	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  00885	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  0088c	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00893	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0089b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008a2	48 98		 cdqe
  008a4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ac	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008b0	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008b7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008be	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008c6	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008ea	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  00906	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  0090d	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00915	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0091c	48 98		 cdqe
  0091e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00926	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0092a	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00931	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00938	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00940	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00947	48 98		 cdqe
  00949	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00951	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00955	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  0095c	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00963	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0096b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00972	48 98		 cdqe
  00974	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0097c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00980	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00987	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0098f	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00996	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0099a	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  009a1	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  009a9	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009b1	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b5	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009bc	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009c4	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009cc	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009d0	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009d7	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009df	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009e6	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009ea	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009f1	33 c0		 xor	 eax, eax
  009f3	85 c0		 test	 eax, eax
  009f5	74 46		 je	 SHORT $LN27@convert_yv
  009f7	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009fe	c1 e0 fd	 shl	 eax, -3
  00a01	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a08	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a0f	c1 e0 fd	 shl	 eax, -3
  00a12	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a19	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a20	c1 e0 fd	 shl	 eax, -3
  00a23	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a2a	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a31	c1 e0 fd	 shl	 eax, -3
  00a34	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a3b	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a3d	33 c0		 xor	 eax, eax
  00a3f	83 f8 01	 cmp	 eax, 1
  00a42	74 44		 je	 SHORT $LN29@convert_yv
  00a44	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a4b	c1 f8 03	 sar	 eax, 3
  00a4e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a55	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a5c	c1 f8 03	 sar	 eax, 3
  00a5f	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a66	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a6d	c1 f8 03	 sar	 eax, 3
  00a70	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a77	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a7e	c1 f8 03	 sar	 eax, 3
  00a81	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a88	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a8d	48 98		 cdqe
  00a8f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a97	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a9f	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00aa3	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00aaa	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00ab1	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00ab5	d1 f8		 sar	 eax, 1
  00ab7	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00abc	ff c1		 inc	 ecx
  00abe	48 63 c9	 movsxd	 rcx, ecx
  00ac1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ac9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00acd	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ad1	48 98		 cdqe
  00ad3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00adb	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00ae3	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ae7	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00aee	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00af5	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00af9	d1 f8		 sar	 eax, 1
  00afb	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00aff	ff c1		 inc	 ecx
  00b01	48 63 c9	 movsxd	 rcx, ecx
  00b04	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b0c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b10	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b14	03 c0		 add	 eax, eax
  00b16	48 98		 cdqe
  00b18	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b20	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b28	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b2c	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b33	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b3a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b3e	d1 f8		 sar	 eax, 1
  00b40	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b44	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b48	48 63 c9	 movsxd	 rcx, ecx
  00b4b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b53	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b57	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b5c	48 98		 cdqe
  00b5e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b66	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b6e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b72	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b79	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b80	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b84	d1 f8		 sar	 eax, 1
  00b86	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b8b	ff c1		 inc	 ecx
  00b8d	48 63 c9	 movsxd	 rcx, ecx
  00b90	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b98	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b9c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00ba3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00baa	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00bb1	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00bb8	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bbf	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bc6	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bcd	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bd4	e9 2d fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bd9	e9 78 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bde	e9 e7 f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00be3	48 8b cc	 mov	 rcx, rsp
  00be6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bed	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bf2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bfa	48 33 cc	 xor	 rcx, rsp
  00bfd	e8 00 00 00 00	 call	 __security_check_cookie
  00c02	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00c09	5f		 pop	 rdi
  00c0a	5e		 pop	 rsi
  00c0b	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_i_to_yuv444_16bit

; 837  : static void convert_yv12_16_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 838  :     convert_yv12_i_to_yuv444_c<uint16_t, 16, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned short,16,0>

; 839  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv192 = 408
tv205 = 412
tv256 = 416
tv351 = 420
tv476 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 68 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  001a3	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001b5	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001c8	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001cf	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001da	eb 42		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001dc	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001ec	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001f9	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  00205	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0020a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00212	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00216	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  0021e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00222	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00229	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0022f	33 c0		 xor	 eax, eax
  00231	83 f8 01	 cmp	 eax, 1
  00234	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00236	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  0023e	48 d1 e0	 shl	 rax, 1
  00241	4c 8b c0	 mov	 r8, rax
  00244	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0024c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00254	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00259	e9 41 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0025e	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00269	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0026b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00272	ff c0		 inc	 eax
  00274	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0027b	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00282	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00289	0f 8d 10 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  0028f	33 c0		 xor	 eax, eax
  00291	85 c0		 test	 eax, eax
  00293	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00295	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  002a0	c7 84 24 8c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T56[rsp], 0
  002ab	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002bf	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  002c6	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002ce	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002d6	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002db	8b 00		 mov	 eax, DWORD PTR [rax]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  002e7	d3 e0		 shl	 eax, cl
  002e9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002f1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002f9	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002fd	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  00302	33 c0		 xor	 eax, eax
  00304	85 c0		 test	 eax, eax
  00306	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  00308	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00313	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T58[rsp], 0
  0031e	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00326	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0032e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00332	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00339	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00341	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00349	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0034e	8b 00		 mov	 eax, DWORD PTR [rax]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  0035a	d3 f8		 sar	 eax, cl
  0035c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00364	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0036c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00370	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00372	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0037a	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00382	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0038a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00392	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00396	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0039a	e9 cc fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  0039f	e9 38 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  003a4	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	b9 02 00 00 00	 mov	 ecx, 2
  003b3	48 f7 f1	 div	 rcx
  003b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003bd	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003c8	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ca	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003d1	ff c0		 inc	 eax
  003d3	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003da	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003e2	0f 8d e5 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003e8	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003f0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003f7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003fc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  00400	d1 f9		 sar	 ecx, 1
  00402	48 63 c9	 movsxd	 rcx, ecx
  00405	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0040d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00411	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  0041d	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00425	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00429	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0042e	48 63 c9	 movsxd	 rcx, ecx
  00431	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00439	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00449	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00454	eb 49		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00456	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0045d	83 c0 02	 add	 eax, 2
  00460	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00467	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  0046f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00477	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00483	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00487	d1 e0		 shl	 eax, 1
  00489	48 98		 cdqe
  0048b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00493	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00497	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0049f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a3	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  004aa	0f 8d 18 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004b0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004b8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004c8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004d0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d4	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004db	2b c8		 sub	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004ea	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004f2	0f 85 e9 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  00503	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  00505	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0050c	83 c0 02	 add	 eax, 2
  0050f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  00516	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0051e	48 83 c0 04	 add	 rax, 4
  00522	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0052a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00532	48 83 c0 02	 add	 rax, 2
  00536	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  0053e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00545	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  0054c	0f 8d 8a 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00552	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00559	83 c0 02	 add	 eax, 2
  0055c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00563	7d 0d		 jge	 SHORT $LN44@convert_yv
  00565	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv256[rsp], 1
  00570	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00572	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN45@convert_yv:
  0057d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv256[rsp]
  00584	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0058b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00593	48 98		 cdqe
  00595	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0059d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a1	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  005a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b0	48 98		 cdqe
  005b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005be	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005c5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cc	48 98		 cdqe
  005ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005da	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e9	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005f0	48 98		 cdqe
  005f2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005fa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fe	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00605	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0060d	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00614	48 98		 cdqe
  00616	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0061e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00622	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00629	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00630	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00637	03 c8		 add	 ecx, eax
  00639	8b c1		 mov	 eax, ecx
  0063b	48 98		 cdqe
  0063d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00645	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00649	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00650	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00658	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0065f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00663	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0066a	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00672	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00679	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00684	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068c	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00693	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00697	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0069e	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  006a6	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006ad	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b1	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006b8	33 c0		 xor	 eax, eax
  006ba	85 c0		 test	 eax, eax
  006bc	74 46		 je	 SHORT $LN32@convert_yv
  006be	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006c5	c1 e0 fe	 shl	 eax, -2
  006c8	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006cf	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006d6	c1 e0 fe	 shl	 eax, -2
  006d9	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006e0	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006e7	c1 e0 fe	 shl	 eax, -2
  006ea	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006f1	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006f8	c1 e0 fe	 shl	 eax, -2
  006fb	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  00702	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  00704	33 c0		 xor	 eax, eax
  00706	83 f8 01	 cmp	 eax, 1
  00709	74 44		 je	 SHORT $LN34@convert_yv
  0070b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00712	c1 f8 02	 sar	 eax, 2
  00715	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  0071c	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00723	c1 f8 02	 sar	 eax, 2
  00726	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  0072d	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00734	c1 f8 02	 sar	 eax, 2
  00737	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00745	c1 f8 02	 sar	 eax, 2
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  0074f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00754	48 98		 cdqe
  00756	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  0075e	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  00766	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0076a	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00771	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  00778	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0077c	d1 f8		 sar	 eax, 1
  0077e	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00783	ff c1		 inc	 ecx
  00785	48 63 c9	 movsxd	 rcx, ecx
  00788	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00790	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00794	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00798	48 98		 cdqe
  0079a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  007a2	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  007aa	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  007ae	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007b5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007bc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007c0	d1 f8		 sar	 eax, 1
  007c2	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007c6	ff c1		 inc	 ecx
  007c8	48 63 c9	 movsxd	 rcx, ecx
  007cb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007d3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007d7	e9 29 fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007dc	e9 e2 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007e1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007e8	83 e8 02	 sub	 eax, 2
  007eb	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007f2	0f 8c e7 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007f8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  00803	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  00805	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0080c	83 c0 02	 add	 eax, 2
  0080f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00816	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0081e	48 83 c0 04	 add	 rax, 4
  00822	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0082a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00832	48 83 c0 02	 add	 rax, 2
  00836	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0083e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00845	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0084c	0f 8d 88 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00852	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00859	83 c0 02	 add	 eax, 2
  0085c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00863	7d 0d		 jge	 SHORT $LN46@convert_yv
  00865	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv351[rsp], 1
  00870	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00872	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv351[rsp], 0
$LN47@convert_yv:
  0087d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv351[rsp]
  00884	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0088b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00893	48 98		 cdqe
  00895	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0089d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a1	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  008a8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b0	48 98		 cdqe
  008b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008be	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008c5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008cd	48 98		 cdqe
  008cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008db	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008e2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008ea	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008fb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ff	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00906	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0090e	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00915	48 98		 cdqe
  00917	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0091f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00923	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0092a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00932	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00939	48 98		 cdqe
  0093b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00943	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00947	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0094e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00956	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0095d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00961	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00968	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00970	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00977	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0097b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00982	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00991	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00995	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0099c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  009a4	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  009ab	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  009af	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009b6	33 c0		 xor	 eax, eax
  009b8	85 c0		 test	 eax, eax
  009ba	74 46		 je	 SHORT $LN37@convert_yv
  009bc	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009c3	c1 e0 fe	 shl	 eax, -2
  009c6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009cd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009d4	c1 e0 fe	 shl	 eax, -2
  009d7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009de	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009e5	c1 e0 fe	 shl	 eax, -2
  009e8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009ef	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009f6	c1 e0 fe	 shl	 eax, -2
  009f9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  00a00	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  00a02	33 c0		 xor	 eax, eax
  00a04	83 f8 01	 cmp	 eax, 1
  00a07	74 44		 je	 SHORT $LN39@convert_yv
  00a09	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a10	c1 f8 02	 sar	 eax, 2
  00a13	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a1a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a21	c1 f8 02	 sar	 eax, 2
  00a24	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a2b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a32	c1 f8 02	 sar	 eax, 2
  00a35	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a3c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a43	c1 f8 02	 sar	 eax, 2
  00a46	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a4d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a52	48 98		 cdqe
  00a54	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a5c	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a64	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a68	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a6f	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a76	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a7a	d1 f8		 sar	 eax, 1
  00a7c	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	ff c1		 inc	 ecx
  00a83	48 63 c9	 movsxd	 rcx, ecx
  00a86	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a8e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a92	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a96	48 98		 cdqe
  00a98	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00aa0	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00aa8	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00aac	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00ab3	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aba	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00abe	d1 f8		 sar	 eax, 1
  00ac0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ac4	ff c1		 inc	 ecx
  00ac6	48 63 c9	 movsxd	 rcx, ecx
  00ac9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00ad1	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00ad5	e9 2b fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ada	e9 e4 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00adf	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00aea	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00aec	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00af3	83 c0 02	 add	 eax, 2
  00af6	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00afd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00b05	48 83 c0 04	 add	 rax, 4
  00b09	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00b11	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b19	48 83 c0 02	 add	 rax, 2
  00b1d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b25	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b2c	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b33	0f 8d 8a 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b39	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b40	83 c0 02	 add	 eax, 2
  00b43	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b4a	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b4c	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv476[rsp], 1
  00b57	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b59	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv476[rsp], 0
$LN49@convert_yv:
  00b64	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv476[rsp]
  00b6b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b72	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b7a	48 98		 cdqe
  00b7c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b84	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b88	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b8f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b97	48 98		 cdqe
  00b99	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00ba5	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00bac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00bb3	48 98		 cdqe
  00bb5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bbd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bc1	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bc8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bd0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bd7	48 98		 cdqe
  00bd9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00be1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00be5	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bf4	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bfb	48 98		 cdqe
  00bfd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c05	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c09	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00c10	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c17	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c1e	03 c8		 add	 ecx, eax
  00c20	8b c1		 mov	 eax, ecx
  00c22	48 98		 cdqe
  00c24	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c2c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c30	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c37	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c3f	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c46	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c51	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c59	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c60	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c64	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c6b	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c73	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c7a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c7e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c85	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c8d	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c94	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c98	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c9f	33 c0		 xor	 eax, eax
  00ca1	85 c0		 test	 eax, eax
  00ca3	74 46		 je	 SHORT $LN40@convert_yv
  00ca5	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cac	c1 e0 fe	 shl	 eax, -2
  00caf	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cb6	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cbd	c1 e0 fe	 shl	 eax, -2
  00cc0	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cc7	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cce	c1 e0 fe	 shl	 eax, -2
  00cd1	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cd8	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00cdf	c1 e0 fe	 shl	 eax, -2
  00ce2	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00ce9	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00ceb	33 c0		 xor	 eax, eax
  00ced	83 f8 01	 cmp	 eax, 1
  00cf0	74 44		 je	 SHORT $LN42@convert_yv
  00cf2	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cf9	c1 f8 02	 sar	 eax, 2
  00cfc	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00d03	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d0a	c1 f8 02	 sar	 eax, 2
  00d0d	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d14	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d1b	c1 f8 02	 sar	 eax, 2
  00d1e	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d25	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d2c	c1 f8 02	 sar	 eax, 2
  00d2f	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d36	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d3b	48 98		 cdqe
  00d3d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d45	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d4d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d51	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d58	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d5f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d63	d1 f8		 sar	 eax, 1
  00d65	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d6a	ff c1		 inc	 ecx
  00d6c	48 63 c9	 movsxd	 rcx, ecx
  00d6f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d77	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d7b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d7f	48 98		 cdqe
  00d81	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d89	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d91	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d95	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d9c	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00da3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00da7	d1 f8		 sar	 eax, 1
  00da9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00dad	ff c1		 inc	 ecx
  00daf	48 63 c9	 movsxd	 rcx, ecx
  00db2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00dba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00dbe	e9 29 fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dc3	e9 8e f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00dc8	e9 fd f5 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00dcd	48 8b cc	 mov	 rcx, rsp
  00dd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dd7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00ddc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00de4	48 33 cc	 xor	 rcx, rsp
  00de7	e8 00 00 00 00	 call	 __security_check_cookie
  00dec	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00df3	5f		 pop	 rdi
  00df4	5e		 pop	 rsi
  00df5	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_p_to_yuv444_16bit

; 833  : static void convert_yv12_16_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 834  :     convert_yv12_p_to_yuv444_c<uint16_t, 16, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned short,16,0>

; 835  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv154 = 368
tv199 = 372
tv244 = 376
tv246 = 380
tv249 = 384
tv252 = 388
tv258 = 392
tv257 = 396
tv325 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027f	c7 84 24 64 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR $T46[rsp], -1
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002ad	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002f2	c7 84 24 6c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T48[rsp], 1
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00320	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00381	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00385	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003d5	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00446	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00459	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00460	d1 e0		 shl	 eax, 1
  00462	48 98		 cdqe
  00464	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0046c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00470	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00478	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0047c	c1 e0 02	 shl	 eax, 2
  0047f	48 98		 cdqe
  00481	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  00497	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0049b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004a2	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004b0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004c0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004c8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004cc	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004d3	2b c8		 sub	 ecx, eax
  004d5	8b c1		 mov	 eax, ecx
  004d7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004db	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004e2	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004ea	7c 0d		 jl	 SHORT $LN31@convert_yv
  004ec	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv244[rsp], -2
  004f7	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004f9	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN32@convert_yv:
  00504	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv244[rsp]
  0050b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00512	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0051a	7c 0d		 jl	 SHORT $LN33@convert_yv
  0051c	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv246[rsp], -1
  00527	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00529	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN34@convert_yv:
  00534	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0053b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00542	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00549	83 e8 02	 sub	 eax, 2
  0054c	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00553	7d 0d		 jge	 SHORT $LN35@convert_yv
  00555	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00560	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00562	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv249[rsp], -1
$LN36@convert_yv:
  0056d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00574	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0057b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00582	83 e8 04	 sub	 eax, 4
  00585	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0058c	7d 0d		 jge	 SHORT $LN37@convert_yv
  0058e	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv252[rsp], 2
  00599	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0059b	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
$LN38@convert_yv:
  005a6	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv252[rsp]
  005ad	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005b4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005bb	83 e8 06	 sub	 eax, 6
  005be	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005c5	7d 0d		 jge	 SHORT $LN41@convert_yv
  005c7	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv258[rsp], 3
  005d2	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005d4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005db	83 e8 02	 sub	 eax, 2
  005de	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005e5	7d 0d		 jge	 SHORT $LN39@convert_yv
  005e7	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv257[rsp], 1
  005f2	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005f4	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv257[rsp], -1
$LN40@convert_yv:
  005ff	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv257[rsp]
  00606	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN42@convert_yv:
  0060d	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00614	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0061b	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00622	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0062a	48 98		 cdqe
  0062c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00634	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00638	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0063f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00646	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0064e	48 98		 cdqe
  00650	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00658	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065c	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00663	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0066b	48 98		 cdqe
  0066d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00675	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00679	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00680	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00687	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00699	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0069d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006a4	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006ab	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006b3	48 98		 cdqe
  006b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006bd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006c8	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006cf	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006d7	48 98		 cdqe
  006d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006e1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006e5	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006ec	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006f4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006fb	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006ff	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00706	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0070e	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00716	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00721	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00729	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00731	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00735	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  0073c	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00744	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0074b	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0074f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00756	33 c0		 xor	 eax, eax
  00758	85 c0		 test	 eax, eax
  0075a	74 46		 je	 SHORT $LN24@convert_yv
  0075c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00763	c1 e0 fc	 shl	 eax, -4
  00766	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0076d	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00774	c1 e0 fc	 shl	 eax, -4
  00777	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0077e	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00785	c1 e0 fc	 shl	 eax, -4
  00788	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0078f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00796	c1 e0 fc	 shl	 eax, -4
  00799	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a0	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007a2	33 c0		 xor	 eax, eax
  007a4	83 f8 01	 cmp	 eax, 1
  007a7	74 44		 je	 SHORT $LN26@convert_yv
  007a9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b0	c1 f8 04	 sar	 eax, 4
  007b3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ba	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c1	c1 f8 04	 sar	 eax, 4
  007c4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007cb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007d2	c1 f8 04	 sar	 eax, 4
  007d5	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007dc	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007e3	c1 f8 04	 sar	 eax, 4
  007e6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007ed	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007f8	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007fa	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00801	83 c0 02	 add	 eax, 2
  00804	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  0080b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00813	48 83 c0 02	 add	 rax, 2
  00817	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00827	48 83 c0 02	 add	 rax, 2
  0082b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00833	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0083a	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00841	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00847	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0084e	83 c0 02	 add	 eax, 2
  00851	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00858	7d 0d		 jge	 SHORT $LN43@convert_yv
  0085a	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00865	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00867	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN44@convert_yv:
  00872	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00879	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00880	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00887	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0088f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a4	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008ab	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008b2	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ba	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c1	48 98		 cdqe
  008c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008cb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cf	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008d6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008de	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008e5	48 98		 cdqe
  008e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ef	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008f3	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008fa	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00901	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00909	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00910	48 98		 cdqe
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0091e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00925	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0092c	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00934	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0093b	48 98		 cdqe
  0093d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00945	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00949	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00950	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00957	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0095f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00966	48 98		 cdqe
  00968	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00970	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00974	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0097b	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00983	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0098a	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0098e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00995	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  0099d	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009a5	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009a9	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b0	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009b8	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c0	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c4	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009cb	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009d3	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009da	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009de	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009e5	33 c0		 xor	 eax, eax
  009e7	85 c0		 test	 eax, eax
  009e9	74 46		 je	 SHORT $LN27@convert_yv
  009eb	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009f2	c1 e0 fc	 shl	 eax, -4
  009f5	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009fc	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a03	c1 e0 fc	 shl	 eax, -4
  00a06	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a0d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a14	c1 e0 fc	 shl	 eax, -4
  00a17	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a1e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a25	c1 e0 fc	 shl	 eax, -4
  00a28	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a2f	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a31	33 c0		 xor	 eax, eax
  00a33	83 f8 01	 cmp	 eax, 1
  00a36	74 44		 je	 SHORT $LN29@convert_yv
  00a38	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a3f	c1 f8 04	 sar	 eax, 4
  00a42	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a49	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a50	c1 f8 04	 sar	 eax, 4
  00a53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a61	c1 f8 04	 sar	 eax, 4
  00a64	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a72	c1 f8 04	 sar	 eax, 4
  00a75	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a7c	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	48 98		 cdqe
  00a83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8b	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a93	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a96	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a9d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa8	d1 f8		 sar	 eax, 1
  00aaa	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aaf	ff c1		 inc	 ecx
  00ab1	48 63 c9	 movsxd	 rcx, ecx
  00ab4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00abc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00abf	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac3	48 98		 cdqe
  00ac5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00acd	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00ad5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ad8	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00adf	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00ae6	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aea	d1 f8		 sar	 eax, 1
  00aec	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af0	ff c1		 inc	 ecx
  00af2	48 63 c9	 movsxd	 rcx, ecx
  00af5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00afd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b00	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b04	03 c0		 add	 eax, eax
  00b06	48 98		 cdqe
  00b08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b10	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00b18	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b1b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b22	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b29	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b2d	d1 f8		 sar	 eax, 1
  00b2f	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b33	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b37	48 63 c9	 movsxd	 rcx, ecx
  00b3a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b42	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b45	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b4a	48 98		 cdqe
  00b4c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b54	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b5c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b5f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b66	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b6d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b71	d1 f8		 sar	 eax, 1
  00b73	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b78	ff c1		 inc	 ecx
  00b7a	48 63 c9	 movsxd	 rcx, ecx
  00b7d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b85	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b88	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b96	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b9d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00ba4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bab	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bb2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb9	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bc0	e9 35 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc5	e9 7e f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bca	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bcf	48 8b cc	 mov	 rcx, rsp
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bde	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be6	48 33 cc	 xor	 rcx, rsp
  00be9	e8 00 00 00 00	 call	 __security_check_cookie
  00bee	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf5	5f		 pop	 rdi
  00bf6	5e		 pop	 rsi
  00bf7	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_i_to_yuv444

; 829  : static void convert_yv12_09_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 830  :     convert_yv12_i_to_yuv444_c<uint16_t, 9, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,9,unsigned char,8,0>

; 831  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv155 = 408
tv200 = 412
tv249 = 416
tv344 = 420
tv469 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 66 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00193	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00197	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a9	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ad	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001ce	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d7	ff c0		 inc	 eax
  001d9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ed	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001f9	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00206	48 03 c8	 add	 rcx, rax
  00209	48 8b c1	 mov	 rax, rcx
  0020c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00214	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00218	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021f	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00225	33 c0		 xor	 eax, eax
  00227	85 c0		 test	 eax, eax
  00229	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00233	48 d1 e0	 shl	 rax, 1
  00236	4c 8b c0	 mov	 r8, rax
  00239	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00241	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00249	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024e	e9 3f 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00253	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025e	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00260	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00267	ff c0		 inc	 eax
  00269	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00270	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00277	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027e	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0028a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00295	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR $T56[rsp], -1
  002a0	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002b0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002b4	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  002bb	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c3	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002cb	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002d0	8b 00		 mov	 eax, DWORD PTR [rax]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv155[rsp]
  002dc	d3 e0		 shl	 eax, cl
  002de	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002f1	e9 97 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fd	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00308	c7 84 24 94 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T58[rsp], 1
  00313	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0031b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00323	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00327	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  0032e	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00336	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033e	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00343	8b 00		 mov	 eax, DWORD PTR [rax]
  00345	0f b6 c8	 movzx	 ecx, al
  00348	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  0034f	d3 f8		 sar	 eax, cl
  00351	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00359	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00361	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00364	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00366	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00376	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0037e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00386	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  0038a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038d	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00392	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003d5	0f 8d da 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00446	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0044f	83 c0 02	 add	 eax, 2
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00459	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00461	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00469	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00475	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00479	d1 e0		 shl	 eax, 1
  0047b	48 98		 cdqe
  0047d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00493	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00497	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0049e	0f 8d 0c 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004ac	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004bc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c8	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004d7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004de	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004e6	0f 85 e5 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004ec	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004f7	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004f9	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00500	83 c0 02	 add	 eax, 2
  00503	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  0050a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00512	48 83 c0 02	 add	 rax, 2
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0051e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00526	48 83 c0 02	 add	 rax, 2
  0052a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00532	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00539	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00540	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00546	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0054d	83 c0 02	 add	 eax, 2
  00550	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00557	7d 0d		 jge	 SHORT $LN44@convert_yv
  00559	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00564	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00566	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@convert_yv:
  00571	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00578	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0057f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00587	48 98		 cdqe
  00589	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00591	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00595	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0059c	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a4	48 98		 cdqe
  005a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ae	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005b9	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005d5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005dd	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005e4	48 98		 cdqe
  005e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ee	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005f9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00601	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00608	48 98		 cdqe
  0060a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00612	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00616	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  0061d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00624	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0062b	03 c8		 add	 ecx, eax
  0062d	8b c1		 mov	 eax, ecx
  0062f	48 98		 cdqe
  00631	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00644	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064c	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00653	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00657	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0065e	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00666	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  0066d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00671	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00678	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00680	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00687	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00692	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0069a	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006a1	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	74 46		 je	 SHORT $LN32@convert_yv
  006b2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006b9	c1 e0 fd	 shl	 eax, -3
  006bc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006c3	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006ca	c1 e0 fd	 shl	 eax, -3
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006d4	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006db	c1 e0 fd	 shl	 eax, -3
  006de	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ec	c1 e0 fd	 shl	 eax, -3
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	74 44		 je	 SHORT $LN34@convert_yv
  006ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00706	c1 f8 03	 sar	 eax, 3
  00709	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00710	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00717	c1 f8 03	 sar	 eax, 3
  0071a	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00721	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00728	c1 f8 03	 sar	 eax, 3
  0072b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00739	c1 f8 03	 sar	 eax, 3
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00743	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00748	48 98		 cdqe
  0074a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00752	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  0075a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0075d	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00764	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0076b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0076f	d1 f8		 sar	 eax, 1
  00771	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00776	ff c1		 inc	 ecx
  00778	48 63 c9	 movsxd	 rcx, ecx
  0077b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00783	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00786	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0078a	48 98		 cdqe
  0078c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00794	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  0079c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  0079f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007a6	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007ad	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007b1	d1 f8		 sar	 eax, 1
  007b3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007b7	ff c1		 inc	 ecx
  007b9	48 63 c9	 movsxd	 rcx, ecx
  007bc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007c7	e9 2d fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007cc	e9 da 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007d1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007d8	83 e8 02	 sub	 eax, 2
  007db	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007e2	0f 8c e3 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007f3	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007f5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007fc	83 c0 02	 add	 eax, 2
  007ff	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00806	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0080e	48 83 c0 02	 add	 rax, 2
  00812	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0081a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00822	48 83 c0 02	 add	 rax, 2
  00826	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0082e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00835	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0083c	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00842	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00849	83 c0 02	 add	 eax, 2
  0084c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00853	7d 0d		 jge	 SHORT $LN46@convert_yv
  00855	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv344[rsp], 1
  00860	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00862	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv344[rsp], 0
$LN47@convert_yv:
  0086d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv344[rsp]
  00874	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0087b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00883	48 98		 cdqe
  00885	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0088d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00891	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00898	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a0	48 98		 cdqe
  008a2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008aa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ae	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008b5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008bd	48 98		 cdqe
  008bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008d2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008da	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008e1	48 98		 cdqe
  008e3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008eb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ef	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008f6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008fe	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00905	48 98		 cdqe
  00907	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0090f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00913	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0091a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00922	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00929	48 98		 cdqe
  0092b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00933	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00937	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0094d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00951	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00958	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00960	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00967	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0096b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00981	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00985	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0098c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00994	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  0099b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0099f	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	74 46		 je	 SHORT $LN37@convert_yv
  009ac	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009b3	c1 e0 fd	 shl	 eax, -3
  009b6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009bd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009c4	c1 e0 fd	 shl	 eax, -3
  009c7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ce	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009d5	c1 e0 fd	 shl	 eax, -3
  009d8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009e6	c1 e0 fd	 shl	 eax, -3
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009f0	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009f2	33 c0		 xor	 eax, eax
  009f4	83 f8 01	 cmp	 eax, 1
  009f7	74 44		 je	 SHORT $LN39@convert_yv
  009f9	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a00	c1 f8 03	 sar	 eax, 3
  00a03	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a0a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a11	c1 f8 03	 sar	 eax, 3
  00a14	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a1b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a22	c1 f8 03	 sar	 eax, 3
  00a25	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a2c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a33	c1 f8 03	 sar	 eax, 3
  00a36	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a3d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a42	48 98		 cdqe
  00a44	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a4c	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a54	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a57	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a5e	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a65	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a69	d1 f8		 sar	 eax, 1
  00a6b	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a70	ff c1		 inc	 ecx
  00a72	48 63 c9	 movsxd	 rcx, ecx
  00a75	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a7d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a80	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a84	48 98		 cdqe
  00a86	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a8e	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a96	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a99	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00aa0	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aab	d1 f8		 sar	 eax, 1
  00aad	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ab1	ff c1		 inc	 ecx
  00ab3	48 63 c9	 movsxd	 rcx, ecx
  00ab6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00abe	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00ac1	e9 2f fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac6	e9 e0 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00acb	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad6	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad8	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00adf	83 c0 02	 add	 eax, 2
  00ae2	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00af1	48 83 c0 02	 add	 rax, 2
  00af5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00afd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b05	48 83 c0 02	 add	 rax, 2
  00b09	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b11	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b18	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b1f	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b25	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b2c	83 c0 02	 add	 eax, 2
  00b2f	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b36	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b38	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00b43	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b45	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN49@convert_yv:
  00b50	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00b57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b5e	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b66	48 98		 cdqe
  00b68	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b70	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b74	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b7b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b83	48 98		 cdqe
  00b85	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b91	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b98	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b9f	48 98		 cdqe
  00ba1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bad	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bb4	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bbc	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc3	48 98		 cdqe
  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bcd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd1	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00be0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be7	48 98		 cdqe
  00be9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bf1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bf5	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bfc	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c03	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c0a	03 c8		 add	 ecx, eax
  00c0c	8b c1		 mov	 eax, ecx
  00c0e	48 98		 cdqe
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c18	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c1c	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c23	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2b	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c32	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c36	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c3d	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c45	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c4c	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c50	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c57	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5f	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c66	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c6a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c71	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c79	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c80	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c84	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c8b	33 c0		 xor	 eax, eax
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN40@convert_yv
  00c91	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c98	c1 e0 fd	 shl	 eax, -3
  00c9b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ca2	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca9	c1 e0 fd	 shl	 eax, -3
  00cac	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cb3	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cba	c1 e0 fd	 shl	 eax, -3
  00cbd	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cc4	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ccb	c1 e0 fd	 shl	 eax, -3
  00cce	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cd5	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd7	33 c0		 xor	 eax, eax
  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	74 44		 je	 SHORT $LN42@convert_yv
  00cde	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00ce5	c1 f8 03	 sar	 eax, 3
  00ce8	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cef	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cf6	c1 f8 03	 sar	 eax, 3
  00cf9	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d00	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d07	c1 f8 03	 sar	 eax, 3
  00d0a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d11	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d18	c1 f8 03	 sar	 eax, 3
  00d1b	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d22	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d27	48 98		 cdqe
  00d29	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d31	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d39	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d3c	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d43	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d4a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d4e	d1 f8		 sar	 eax, 1
  00d50	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d55	ff c1		 inc	 ecx
  00d57	48 63 c9	 movsxd	 rcx, ecx
  00d5a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d62	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d65	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d69	48 98		 cdqe
  00d6b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d73	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d7b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d85	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d8c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d90	d1 f8		 sar	 eax, 1
  00d92	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d96	ff c1		 inc	 ecx
  00d98	48 63 c9	 movsxd	 rcx, ecx
  00d9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00da3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00da6	e9 2d fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dab	e9 98 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00db0	e9 08 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db5	48 8b cc	 mov	 rcx, rsp
  00db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00ddb	5f		 pop	 rdi
  00ddc	5e		 pop	 rsi
  00ddd	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_p_to_yuv444

; 825  : static void convert_yv12_09_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 826  :     convert_yv12_p_to_yuv444_c<uint16_t, 9, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,9,unsigned char,8,0>

; 827  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv154 = 368
tv199 = 372
tv244 = 376
tv246 = 380
tv249 = 384
tv252 = 388
tv258 = 392
tv257 = 396
tv325 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027f	c7 84 24 64 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T46[rsp], -2
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002ad	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002f2	c7 84 24 6c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T48[rsp], 2
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00320	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00381	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00385	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003d5	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00446	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00459	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00460	d1 e0		 shl	 eax, 1
  00462	48 98		 cdqe
  00464	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0046c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00470	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00478	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0047c	c1 e0 02	 shl	 eax, 2
  0047f	48 98		 cdqe
  00481	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  00497	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0049b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004a2	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004b0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004c0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004c8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004cc	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004d3	2b c8		 sub	 ecx, eax
  004d5	8b c1		 mov	 eax, ecx
  004d7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004db	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004e2	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004ea	7c 0d		 jl	 SHORT $LN31@convert_yv
  004ec	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv244[rsp], -2
  004f7	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004f9	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN32@convert_yv:
  00504	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv244[rsp]
  0050b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00512	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0051a	7c 0d		 jl	 SHORT $LN33@convert_yv
  0051c	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv246[rsp], -1
  00527	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00529	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN34@convert_yv:
  00534	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0053b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00542	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00549	83 e8 02	 sub	 eax, 2
  0054c	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00553	7d 0d		 jge	 SHORT $LN35@convert_yv
  00555	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00560	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00562	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv249[rsp], -1
$LN36@convert_yv:
  0056d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00574	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0057b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00582	83 e8 04	 sub	 eax, 4
  00585	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0058c	7d 0d		 jge	 SHORT $LN37@convert_yv
  0058e	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv252[rsp], 2
  00599	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0059b	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
$LN38@convert_yv:
  005a6	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv252[rsp]
  005ad	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005b4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005bb	83 e8 06	 sub	 eax, 6
  005be	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005c5	7d 0d		 jge	 SHORT $LN41@convert_yv
  005c7	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv258[rsp], 3
  005d2	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005d4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005db	83 e8 02	 sub	 eax, 2
  005de	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005e5	7d 0d		 jge	 SHORT $LN39@convert_yv
  005e7	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv257[rsp], 1
  005f2	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005f4	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv257[rsp], -1
$LN40@convert_yv:
  005ff	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv257[rsp]
  00606	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN42@convert_yv:
  0060d	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00614	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0061b	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00622	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0062a	48 98		 cdqe
  0062c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00634	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00638	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0063f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00646	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0064e	48 98		 cdqe
  00650	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00658	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065c	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00663	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0066b	48 98		 cdqe
  0066d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00675	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00679	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00680	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00687	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00699	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0069d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006a4	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006ab	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006b3	48 98		 cdqe
  006b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006bd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006c8	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006cf	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006d7	48 98		 cdqe
  006d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006e1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006e5	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006ec	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006f4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006fb	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006ff	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00706	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0070e	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00716	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00721	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00729	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00731	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00735	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  0073c	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00744	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0074b	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0074f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00756	33 c0		 xor	 eax, eax
  00758	85 c0		 test	 eax, eax
  0075a	74 46		 je	 SHORT $LN24@convert_yv
  0075c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00763	c1 e0 fb	 shl	 eax, -5
  00766	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0076d	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00774	c1 e0 fb	 shl	 eax, -5
  00777	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0077e	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00785	c1 e0 fb	 shl	 eax, -5
  00788	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0078f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00796	c1 e0 fb	 shl	 eax, -5
  00799	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a0	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007a2	33 c0		 xor	 eax, eax
  007a4	83 f8 01	 cmp	 eax, 1
  007a7	74 44		 je	 SHORT $LN26@convert_yv
  007a9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b0	c1 f8 05	 sar	 eax, 5
  007b3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ba	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c1	c1 f8 05	 sar	 eax, 5
  007c4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007cb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007d2	c1 f8 05	 sar	 eax, 5
  007d5	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007dc	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007e3	c1 f8 05	 sar	 eax, 5
  007e6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007ed	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007f8	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007fa	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00801	83 c0 02	 add	 eax, 2
  00804	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  0080b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00813	48 83 c0 02	 add	 rax, 2
  00817	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00827	48 83 c0 02	 add	 rax, 2
  0082b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00833	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0083a	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00841	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00847	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0084e	83 c0 02	 add	 eax, 2
  00851	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00858	7d 0d		 jge	 SHORT $LN43@convert_yv
  0085a	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00865	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00867	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN44@convert_yv:
  00872	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00879	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00880	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00887	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0088f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a4	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008ab	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008b2	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ba	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c1	48 98		 cdqe
  008c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008cb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cf	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008d6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008de	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008e5	48 98		 cdqe
  008e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ef	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008f3	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008fa	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00901	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00909	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00910	48 98		 cdqe
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0091e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00925	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0092c	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00934	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0093b	48 98		 cdqe
  0093d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00945	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00949	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00950	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00957	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0095f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00966	48 98		 cdqe
  00968	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00970	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00974	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0097b	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00983	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0098a	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0098e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00995	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  0099d	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009a5	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009a9	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b0	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009b8	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c0	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c4	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009cb	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009d3	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009da	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009de	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009e5	33 c0		 xor	 eax, eax
  009e7	85 c0		 test	 eax, eax
  009e9	74 46		 je	 SHORT $LN27@convert_yv
  009eb	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009f2	c1 e0 fb	 shl	 eax, -5
  009f5	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009fc	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a03	c1 e0 fb	 shl	 eax, -5
  00a06	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a0d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a14	c1 e0 fb	 shl	 eax, -5
  00a17	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a1e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a25	c1 e0 fb	 shl	 eax, -5
  00a28	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a2f	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a31	33 c0		 xor	 eax, eax
  00a33	83 f8 01	 cmp	 eax, 1
  00a36	74 44		 je	 SHORT $LN29@convert_yv
  00a38	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a3f	c1 f8 05	 sar	 eax, 5
  00a42	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a49	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a50	c1 f8 05	 sar	 eax, 5
  00a53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a61	c1 f8 05	 sar	 eax, 5
  00a64	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a72	c1 f8 05	 sar	 eax, 5
  00a75	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a7c	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	48 98		 cdqe
  00a83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8b	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a93	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a96	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a9d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa8	d1 f8		 sar	 eax, 1
  00aaa	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aaf	ff c1		 inc	 ecx
  00ab1	48 63 c9	 movsxd	 rcx, ecx
  00ab4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00abc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00abf	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac3	48 98		 cdqe
  00ac5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00acd	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00ad5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ad8	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00adf	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00ae6	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aea	d1 f8		 sar	 eax, 1
  00aec	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af0	ff c1		 inc	 ecx
  00af2	48 63 c9	 movsxd	 rcx, ecx
  00af5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00afd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b00	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b04	03 c0		 add	 eax, eax
  00b06	48 98		 cdqe
  00b08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b10	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00b18	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b1b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b22	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b29	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b2d	d1 f8		 sar	 eax, 1
  00b2f	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b33	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b37	48 63 c9	 movsxd	 rcx, ecx
  00b3a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b42	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b45	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b4a	48 98		 cdqe
  00b4c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b54	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b5c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b5f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b66	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b6d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b71	d1 f8		 sar	 eax, 1
  00b73	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b78	ff c1		 inc	 ecx
  00b7a	48 63 c9	 movsxd	 rcx, ecx
  00b7d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b85	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b88	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b96	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b9d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00ba4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bab	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bb2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb9	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bc0	e9 35 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc5	e9 7e f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bca	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bcf	48 8b cc	 mov	 rcx, rsp
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bde	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be6	48 33 cc	 xor	 rcx, rsp
  00be9	e8 00 00 00 00	 call	 __security_check_cookie
  00bee	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf5	5f		 pop	 rdi
  00bf6	5e		 pop	 rsi
  00bf7	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_i_to_yuv444

; 821  : static void convert_yv12_10_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 822  :     convert_yv12_i_to_yuv444_c<uint16_t, 10, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,10,unsigned char,8,0>

; 823  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv155 = 408
tv200 = 412
tv249 = 416
tv344 = 420
tv469 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 66 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00193	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00197	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a9	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ad	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001ce	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d7	ff c0		 inc	 eax
  001d9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ed	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001f9	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00206	48 03 c8	 add	 rcx, rax
  00209	48 8b c1	 mov	 rax, rcx
  0020c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00214	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00218	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021f	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00225	33 c0		 xor	 eax, eax
  00227	85 c0		 test	 eax, eax
  00229	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00233	48 d1 e0	 shl	 rax, 1
  00236	4c 8b c0	 mov	 r8, rax
  00239	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00241	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00249	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024e	e9 3f 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00253	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025e	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00260	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00267	ff c0		 inc	 eax
  00269	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00270	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00277	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027e	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0028a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00295	c7 84 24 8c 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T56[rsp], -2
  002a0	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002b0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002b4	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  002bb	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c3	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002cb	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002d0	8b 00		 mov	 eax, DWORD PTR [rax]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv155[rsp]
  002dc	d3 e0		 shl	 eax, cl
  002de	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002f1	e9 97 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fd	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00308	c7 84 24 94 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T58[rsp], 2
  00313	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0031b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00323	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00327	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  0032e	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00336	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033e	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00343	8b 00		 mov	 eax, DWORD PTR [rax]
  00345	0f b6 c8	 movzx	 ecx, al
  00348	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  0034f	d3 f8		 sar	 eax, cl
  00351	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00359	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00361	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00364	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00366	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00376	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0037e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00386	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  0038a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038d	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00392	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003d5	0f 8d da 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00446	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0044f	83 c0 02	 add	 eax, 2
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00459	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00461	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00469	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00475	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00479	d1 e0		 shl	 eax, 1
  0047b	48 98		 cdqe
  0047d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00493	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00497	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0049e	0f 8d 0c 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004ac	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004bc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c8	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004d7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004de	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004e6	0f 85 e5 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004ec	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004f7	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004f9	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00500	83 c0 02	 add	 eax, 2
  00503	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  0050a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00512	48 83 c0 02	 add	 rax, 2
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0051e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00526	48 83 c0 02	 add	 rax, 2
  0052a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00532	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00539	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00540	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00546	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0054d	83 c0 02	 add	 eax, 2
  00550	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00557	7d 0d		 jge	 SHORT $LN44@convert_yv
  00559	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00564	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00566	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@convert_yv:
  00571	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00578	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0057f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00587	48 98		 cdqe
  00589	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00591	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00595	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0059c	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a4	48 98		 cdqe
  005a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ae	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005b9	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005d5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005dd	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005e4	48 98		 cdqe
  005e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ee	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005f9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00601	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00608	48 98		 cdqe
  0060a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00612	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00616	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  0061d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00624	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0062b	03 c8		 add	 ecx, eax
  0062d	8b c1		 mov	 eax, ecx
  0062f	48 98		 cdqe
  00631	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00644	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064c	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00653	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00657	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0065e	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00666	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  0066d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00671	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00678	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00680	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00687	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00692	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0069a	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006a1	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	74 46		 je	 SHORT $LN32@convert_yv
  006b2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006b9	c1 e0 fc	 shl	 eax, -4
  006bc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006c3	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006ca	c1 e0 fc	 shl	 eax, -4
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006d4	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006db	c1 e0 fc	 shl	 eax, -4
  006de	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ec	c1 e0 fc	 shl	 eax, -4
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	74 44		 je	 SHORT $LN34@convert_yv
  006ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00706	c1 f8 04	 sar	 eax, 4
  00709	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00710	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00717	c1 f8 04	 sar	 eax, 4
  0071a	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00721	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00728	c1 f8 04	 sar	 eax, 4
  0072b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00739	c1 f8 04	 sar	 eax, 4
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00743	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00748	48 98		 cdqe
  0074a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00752	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  0075a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0075d	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00764	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0076b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0076f	d1 f8		 sar	 eax, 1
  00771	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00776	ff c1		 inc	 ecx
  00778	48 63 c9	 movsxd	 rcx, ecx
  0077b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00783	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00786	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0078a	48 98		 cdqe
  0078c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00794	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  0079c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  0079f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007a6	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007ad	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007b1	d1 f8		 sar	 eax, 1
  007b3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007b7	ff c1		 inc	 ecx
  007b9	48 63 c9	 movsxd	 rcx, ecx
  007bc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007c7	e9 2d fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007cc	e9 da 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007d1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007d8	83 e8 02	 sub	 eax, 2
  007db	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007e2	0f 8c e3 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007f3	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007f5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007fc	83 c0 02	 add	 eax, 2
  007ff	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00806	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0080e	48 83 c0 02	 add	 rax, 2
  00812	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0081a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00822	48 83 c0 02	 add	 rax, 2
  00826	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0082e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00835	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0083c	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00842	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00849	83 c0 02	 add	 eax, 2
  0084c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00853	7d 0d		 jge	 SHORT $LN46@convert_yv
  00855	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv344[rsp], 1
  00860	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00862	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv344[rsp], 0
$LN47@convert_yv:
  0086d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv344[rsp]
  00874	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0087b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00883	48 98		 cdqe
  00885	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0088d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00891	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00898	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a0	48 98		 cdqe
  008a2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008aa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ae	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008b5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008bd	48 98		 cdqe
  008bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008d2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008da	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008e1	48 98		 cdqe
  008e3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008eb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ef	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008f6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008fe	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00905	48 98		 cdqe
  00907	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0090f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00913	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0091a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00922	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00929	48 98		 cdqe
  0092b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00933	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00937	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0094d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00951	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00958	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00960	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00967	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0096b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00981	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00985	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0098c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00994	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  0099b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0099f	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	74 46		 je	 SHORT $LN37@convert_yv
  009ac	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009b3	c1 e0 fc	 shl	 eax, -4
  009b6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009bd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009c4	c1 e0 fc	 shl	 eax, -4
  009c7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ce	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009d5	c1 e0 fc	 shl	 eax, -4
  009d8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009e6	c1 e0 fc	 shl	 eax, -4
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009f0	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009f2	33 c0		 xor	 eax, eax
  009f4	83 f8 01	 cmp	 eax, 1
  009f7	74 44		 je	 SHORT $LN39@convert_yv
  009f9	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a00	c1 f8 04	 sar	 eax, 4
  00a03	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a0a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a11	c1 f8 04	 sar	 eax, 4
  00a14	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a1b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a22	c1 f8 04	 sar	 eax, 4
  00a25	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a2c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a33	c1 f8 04	 sar	 eax, 4
  00a36	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a3d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a42	48 98		 cdqe
  00a44	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a4c	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a54	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a57	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a5e	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a65	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a69	d1 f8		 sar	 eax, 1
  00a6b	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a70	ff c1		 inc	 ecx
  00a72	48 63 c9	 movsxd	 rcx, ecx
  00a75	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a7d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a80	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a84	48 98		 cdqe
  00a86	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a8e	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a96	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a99	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00aa0	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aab	d1 f8		 sar	 eax, 1
  00aad	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ab1	ff c1		 inc	 ecx
  00ab3	48 63 c9	 movsxd	 rcx, ecx
  00ab6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00abe	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00ac1	e9 2f fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac6	e9 e0 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00acb	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad6	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad8	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00adf	83 c0 02	 add	 eax, 2
  00ae2	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00af1	48 83 c0 02	 add	 rax, 2
  00af5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00afd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b05	48 83 c0 02	 add	 rax, 2
  00b09	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b11	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b18	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b1f	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b25	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b2c	83 c0 02	 add	 eax, 2
  00b2f	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b36	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b38	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00b43	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b45	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN49@convert_yv:
  00b50	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00b57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b5e	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b66	48 98		 cdqe
  00b68	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b70	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b74	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b7b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b83	48 98		 cdqe
  00b85	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b91	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b98	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b9f	48 98		 cdqe
  00ba1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bad	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bb4	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bbc	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc3	48 98		 cdqe
  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bcd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd1	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00be0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be7	48 98		 cdqe
  00be9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bf1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bf5	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bfc	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c03	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c0a	03 c8		 add	 ecx, eax
  00c0c	8b c1		 mov	 eax, ecx
  00c0e	48 98		 cdqe
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c18	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c1c	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c23	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2b	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c32	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c36	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c3d	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c45	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c4c	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c50	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c57	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5f	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c66	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c6a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c71	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c79	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c80	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c84	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c8b	33 c0		 xor	 eax, eax
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN40@convert_yv
  00c91	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c98	c1 e0 fc	 shl	 eax, -4
  00c9b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ca2	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca9	c1 e0 fc	 shl	 eax, -4
  00cac	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cb3	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cba	c1 e0 fc	 shl	 eax, -4
  00cbd	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cc4	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ccb	c1 e0 fc	 shl	 eax, -4
  00cce	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cd5	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd7	33 c0		 xor	 eax, eax
  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	74 44		 je	 SHORT $LN42@convert_yv
  00cde	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00ce5	c1 f8 04	 sar	 eax, 4
  00ce8	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cef	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cf6	c1 f8 04	 sar	 eax, 4
  00cf9	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d00	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d07	c1 f8 04	 sar	 eax, 4
  00d0a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d11	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d18	c1 f8 04	 sar	 eax, 4
  00d1b	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d22	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d27	48 98		 cdqe
  00d29	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d31	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d39	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d3c	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d43	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d4a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d4e	d1 f8		 sar	 eax, 1
  00d50	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d55	ff c1		 inc	 ecx
  00d57	48 63 c9	 movsxd	 rcx, ecx
  00d5a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d62	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d65	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d69	48 98		 cdqe
  00d6b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d73	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d7b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d85	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d8c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d90	d1 f8		 sar	 eax, 1
  00d92	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d96	ff c1		 inc	 ecx
  00d98	48 63 c9	 movsxd	 rcx, ecx
  00d9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00da3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00da6	e9 2d fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dab	e9 98 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00db0	e9 08 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db5	48 8b cc	 mov	 rcx, rsp
  00db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00ddb	5f		 pop	 rdi
  00ddc	5e		 pop	 rsi
  00ddd	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_p_to_yuv444

; 817  : static void convert_yv12_10_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 818  :     convert_yv12_p_to_yuv444_c<uint16_t, 10, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,10,unsigned char,8,0>

; 819  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv154 = 368
tv199 = 372
tv244 = 376
tv246 = 380
tv249 = 384
tv252 = 388
tv258 = 392
tv257 = 396
tv325 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027f	c7 84 24 64 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T46[rsp], -4
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002ad	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002f2	c7 84 24 6c 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T48[rsp], 4
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00320	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00381	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00385	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003d5	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00446	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00459	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00460	d1 e0		 shl	 eax, 1
  00462	48 98		 cdqe
  00464	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0046c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00470	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00478	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0047c	c1 e0 02	 shl	 eax, 2
  0047f	48 98		 cdqe
  00481	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  00497	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0049b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004a2	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004b0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004c0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004c8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004cc	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004d3	2b c8		 sub	 ecx, eax
  004d5	8b c1		 mov	 eax, ecx
  004d7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004db	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004e2	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004ea	7c 0d		 jl	 SHORT $LN31@convert_yv
  004ec	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv244[rsp], -2
  004f7	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004f9	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN32@convert_yv:
  00504	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv244[rsp]
  0050b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00512	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0051a	7c 0d		 jl	 SHORT $LN33@convert_yv
  0051c	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv246[rsp], -1
  00527	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00529	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN34@convert_yv:
  00534	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0053b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00542	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00549	83 e8 02	 sub	 eax, 2
  0054c	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00553	7d 0d		 jge	 SHORT $LN35@convert_yv
  00555	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00560	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00562	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv249[rsp], -1
$LN36@convert_yv:
  0056d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00574	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0057b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00582	83 e8 04	 sub	 eax, 4
  00585	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0058c	7d 0d		 jge	 SHORT $LN37@convert_yv
  0058e	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv252[rsp], 2
  00599	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0059b	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
$LN38@convert_yv:
  005a6	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv252[rsp]
  005ad	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005b4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005bb	83 e8 06	 sub	 eax, 6
  005be	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005c5	7d 0d		 jge	 SHORT $LN41@convert_yv
  005c7	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv258[rsp], 3
  005d2	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005d4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005db	83 e8 02	 sub	 eax, 2
  005de	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005e5	7d 0d		 jge	 SHORT $LN39@convert_yv
  005e7	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv257[rsp], 1
  005f2	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005f4	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv257[rsp], -1
$LN40@convert_yv:
  005ff	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv257[rsp]
  00606	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN42@convert_yv:
  0060d	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00614	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0061b	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00622	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0062a	48 98		 cdqe
  0062c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00634	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00638	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0063f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00646	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0064e	48 98		 cdqe
  00650	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00658	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065c	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00663	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0066b	48 98		 cdqe
  0066d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00675	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00679	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00680	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00687	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00699	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0069d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006a4	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006ab	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006b3	48 98		 cdqe
  006b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006bd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006c8	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006cf	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006d7	48 98		 cdqe
  006d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006e1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006e5	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006ec	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006f4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006fb	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006ff	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00706	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0070e	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00716	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00721	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00729	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00731	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00735	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  0073c	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00744	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0074b	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0074f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00756	33 c0		 xor	 eax, eax
  00758	85 c0		 test	 eax, eax
  0075a	74 46		 je	 SHORT $LN24@convert_yv
  0075c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00763	c1 e0 f9	 shl	 eax, -7
  00766	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0076d	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00774	c1 e0 f9	 shl	 eax, -7
  00777	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0077e	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00785	c1 e0 f9	 shl	 eax, -7
  00788	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0078f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00796	c1 e0 f9	 shl	 eax, -7
  00799	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a0	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007a2	33 c0		 xor	 eax, eax
  007a4	83 f8 01	 cmp	 eax, 1
  007a7	74 44		 je	 SHORT $LN26@convert_yv
  007a9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b0	c1 f8 07	 sar	 eax, 7
  007b3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ba	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c1	c1 f8 07	 sar	 eax, 7
  007c4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007cb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007d2	c1 f8 07	 sar	 eax, 7
  007d5	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007dc	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007e3	c1 f8 07	 sar	 eax, 7
  007e6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007ed	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007f8	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007fa	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00801	83 c0 02	 add	 eax, 2
  00804	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  0080b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00813	48 83 c0 02	 add	 rax, 2
  00817	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00827	48 83 c0 02	 add	 rax, 2
  0082b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00833	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0083a	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00841	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00847	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0084e	83 c0 02	 add	 eax, 2
  00851	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00858	7d 0d		 jge	 SHORT $LN43@convert_yv
  0085a	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00865	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00867	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN44@convert_yv:
  00872	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00879	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00880	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00887	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0088f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a4	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008ab	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008b2	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ba	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c1	48 98		 cdqe
  008c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008cb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cf	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008d6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008de	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008e5	48 98		 cdqe
  008e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ef	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008f3	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008fa	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00901	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00909	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00910	48 98		 cdqe
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0091e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00925	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0092c	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00934	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0093b	48 98		 cdqe
  0093d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00945	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00949	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00950	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00957	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0095f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00966	48 98		 cdqe
  00968	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00970	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00974	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0097b	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00983	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0098a	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0098e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00995	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  0099d	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009a5	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009a9	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b0	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009b8	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c0	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c4	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009cb	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009d3	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009da	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009de	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009e5	33 c0		 xor	 eax, eax
  009e7	85 c0		 test	 eax, eax
  009e9	74 46		 je	 SHORT $LN27@convert_yv
  009eb	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009f2	c1 e0 f9	 shl	 eax, -7
  009f5	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009fc	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a03	c1 e0 f9	 shl	 eax, -7
  00a06	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a0d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a14	c1 e0 f9	 shl	 eax, -7
  00a17	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a1e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a25	c1 e0 f9	 shl	 eax, -7
  00a28	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a2f	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a31	33 c0		 xor	 eax, eax
  00a33	83 f8 01	 cmp	 eax, 1
  00a36	74 44		 je	 SHORT $LN29@convert_yv
  00a38	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a3f	c1 f8 07	 sar	 eax, 7
  00a42	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a49	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a50	c1 f8 07	 sar	 eax, 7
  00a53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a61	c1 f8 07	 sar	 eax, 7
  00a64	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a72	c1 f8 07	 sar	 eax, 7
  00a75	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a7c	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	48 98		 cdqe
  00a83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8b	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a93	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a96	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a9d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa8	d1 f8		 sar	 eax, 1
  00aaa	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aaf	ff c1		 inc	 ecx
  00ab1	48 63 c9	 movsxd	 rcx, ecx
  00ab4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00abc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00abf	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac3	48 98		 cdqe
  00ac5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00acd	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00ad5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ad8	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00adf	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00ae6	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aea	d1 f8		 sar	 eax, 1
  00aec	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af0	ff c1		 inc	 ecx
  00af2	48 63 c9	 movsxd	 rcx, ecx
  00af5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00afd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b00	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b04	03 c0		 add	 eax, eax
  00b06	48 98		 cdqe
  00b08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b10	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00b18	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b1b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b22	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b29	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b2d	d1 f8		 sar	 eax, 1
  00b2f	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b33	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b37	48 63 c9	 movsxd	 rcx, ecx
  00b3a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b42	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b45	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b4a	48 98		 cdqe
  00b4c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b54	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b5c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b5f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b66	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b6d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b71	d1 f8		 sar	 eax, 1
  00b73	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b78	ff c1		 inc	 ecx
  00b7a	48 63 c9	 movsxd	 rcx, ecx
  00b7d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b85	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b88	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b96	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b9d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00ba4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bab	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bb2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb9	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bc0	e9 35 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc5	e9 7e f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bca	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bcf	48 8b cc	 mov	 rcx, rsp
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bde	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be6	48 33 cc	 xor	 rcx, rsp
  00be9	e8 00 00 00 00	 call	 __security_check_cookie
  00bee	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf5	5f		 pop	 rdi
  00bf6	5e		 pop	 rsi
  00bf7	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_i_to_yuv444

; 813  : static void convert_yv12_12_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 814  :     convert_yv12_i_to_yuv444_c<uint16_t, 12, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,12,unsigned char,8,0>

; 815  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv155 = 408
tv200 = 412
tv249 = 416
tv344 = 420
tv469 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 66 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00193	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00197	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a9	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ad	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001ce	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d7	ff c0		 inc	 eax
  001d9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ed	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001f9	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00206	48 03 c8	 add	 rcx, rax
  00209	48 8b c1	 mov	 rax, rcx
  0020c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00214	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00218	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021f	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00225	33 c0		 xor	 eax, eax
  00227	85 c0		 test	 eax, eax
  00229	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00233	48 d1 e0	 shl	 rax, 1
  00236	4c 8b c0	 mov	 r8, rax
  00239	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00241	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00249	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024e	e9 3f 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00253	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025e	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00260	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00267	ff c0		 inc	 eax
  00269	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00270	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00277	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027e	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0028a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00295	c7 84 24 8c 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T56[rsp], -4
  002a0	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002b0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002b4	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  002bb	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c3	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002cb	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002d0	8b 00		 mov	 eax, DWORD PTR [rax]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv155[rsp]
  002dc	d3 e0		 shl	 eax, cl
  002de	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002f1	e9 97 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fd	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00308	c7 84 24 94 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T58[rsp], 4
  00313	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0031b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00323	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00327	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  0032e	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00336	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033e	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00343	8b 00		 mov	 eax, DWORD PTR [rax]
  00345	0f b6 c8	 movzx	 ecx, al
  00348	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  0034f	d3 f8		 sar	 eax, cl
  00351	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00359	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00361	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00364	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00366	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00376	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0037e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00386	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  0038a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038d	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00392	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003d5	0f 8d da 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00446	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0044f	83 c0 02	 add	 eax, 2
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00459	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00461	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00469	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00475	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00479	d1 e0		 shl	 eax, 1
  0047b	48 98		 cdqe
  0047d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00493	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00497	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0049e	0f 8d 0c 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004ac	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004bc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c8	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004d7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004de	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004e6	0f 85 e5 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004ec	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004f7	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004f9	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00500	83 c0 02	 add	 eax, 2
  00503	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  0050a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00512	48 83 c0 02	 add	 rax, 2
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0051e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00526	48 83 c0 02	 add	 rax, 2
  0052a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00532	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00539	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00540	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00546	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0054d	83 c0 02	 add	 eax, 2
  00550	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00557	7d 0d		 jge	 SHORT $LN44@convert_yv
  00559	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00564	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00566	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@convert_yv:
  00571	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00578	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0057f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00587	48 98		 cdqe
  00589	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00591	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00595	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0059c	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a4	48 98		 cdqe
  005a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ae	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005b9	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005d5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005dd	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005e4	48 98		 cdqe
  005e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ee	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005f9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00601	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00608	48 98		 cdqe
  0060a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00612	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00616	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  0061d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00624	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0062b	03 c8		 add	 ecx, eax
  0062d	8b c1		 mov	 eax, ecx
  0062f	48 98		 cdqe
  00631	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00644	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064c	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00653	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00657	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0065e	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00666	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  0066d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00671	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00678	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00680	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00687	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00692	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0069a	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006a1	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	74 46		 je	 SHORT $LN32@convert_yv
  006b2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006b9	c1 e0 fa	 shl	 eax, -6
  006bc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006c3	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006ca	c1 e0 fa	 shl	 eax, -6
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006d4	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006db	c1 e0 fa	 shl	 eax, -6
  006de	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ec	c1 e0 fa	 shl	 eax, -6
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	74 44		 je	 SHORT $LN34@convert_yv
  006ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00706	c1 f8 06	 sar	 eax, 6
  00709	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00710	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00717	c1 f8 06	 sar	 eax, 6
  0071a	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00721	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00728	c1 f8 06	 sar	 eax, 6
  0072b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00739	c1 f8 06	 sar	 eax, 6
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00743	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00748	48 98		 cdqe
  0074a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00752	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  0075a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0075d	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00764	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0076b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0076f	d1 f8		 sar	 eax, 1
  00771	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00776	ff c1		 inc	 ecx
  00778	48 63 c9	 movsxd	 rcx, ecx
  0077b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00783	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00786	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0078a	48 98		 cdqe
  0078c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00794	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  0079c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  0079f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007a6	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007ad	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007b1	d1 f8		 sar	 eax, 1
  007b3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007b7	ff c1		 inc	 ecx
  007b9	48 63 c9	 movsxd	 rcx, ecx
  007bc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007c7	e9 2d fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007cc	e9 da 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007d1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007d8	83 e8 02	 sub	 eax, 2
  007db	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007e2	0f 8c e3 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007f3	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007f5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007fc	83 c0 02	 add	 eax, 2
  007ff	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00806	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0080e	48 83 c0 02	 add	 rax, 2
  00812	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0081a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00822	48 83 c0 02	 add	 rax, 2
  00826	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0082e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00835	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0083c	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00842	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00849	83 c0 02	 add	 eax, 2
  0084c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00853	7d 0d		 jge	 SHORT $LN46@convert_yv
  00855	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv344[rsp], 1
  00860	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00862	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv344[rsp], 0
$LN47@convert_yv:
  0086d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv344[rsp]
  00874	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0087b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00883	48 98		 cdqe
  00885	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0088d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00891	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00898	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a0	48 98		 cdqe
  008a2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008aa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ae	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008b5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008bd	48 98		 cdqe
  008bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008d2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008da	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008e1	48 98		 cdqe
  008e3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008eb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ef	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008f6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008fe	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00905	48 98		 cdqe
  00907	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0090f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00913	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0091a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00922	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00929	48 98		 cdqe
  0092b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00933	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00937	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0094d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00951	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00958	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00960	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00967	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0096b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00981	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00985	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0098c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00994	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  0099b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0099f	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	74 46		 je	 SHORT $LN37@convert_yv
  009ac	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009b3	c1 e0 fa	 shl	 eax, -6
  009b6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009bd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009c4	c1 e0 fa	 shl	 eax, -6
  009c7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ce	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009d5	c1 e0 fa	 shl	 eax, -6
  009d8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009e6	c1 e0 fa	 shl	 eax, -6
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009f0	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009f2	33 c0		 xor	 eax, eax
  009f4	83 f8 01	 cmp	 eax, 1
  009f7	74 44		 je	 SHORT $LN39@convert_yv
  009f9	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a00	c1 f8 06	 sar	 eax, 6
  00a03	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a0a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a11	c1 f8 06	 sar	 eax, 6
  00a14	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a1b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a22	c1 f8 06	 sar	 eax, 6
  00a25	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a2c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a33	c1 f8 06	 sar	 eax, 6
  00a36	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a3d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a42	48 98		 cdqe
  00a44	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a4c	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a54	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a57	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a5e	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a65	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a69	d1 f8		 sar	 eax, 1
  00a6b	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a70	ff c1		 inc	 ecx
  00a72	48 63 c9	 movsxd	 rcx, ecx
  00a75	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a7d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a80	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a84	48 98		 cdqe
  00a86	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a8e	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a96	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a99	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00aa0	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aab	d1 f8		 sar	 eax, 1
  00aad	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ab1	ff c1		 inc	 ecx
  00ab3	48 63 c9	 movsxd	 rcx, ecx
  00ab6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00abe	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00ac1	e9 2f fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac6	e9 e0 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00acb	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad6	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad8	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00adf	83 c0 02	 add	 eax, 2
  00ae2	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00af1	48 83 c0 02	 add	 rax, 2
  00af5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00afd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b05	48 83 c0 02	 add	 rax, 2
  00b09	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b11	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b18	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b1f	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b25	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b2c	83 c0 02	 add	 eax, 2
  00b2f	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b36	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b38	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00b43	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b45	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN49@convert_yv:
  00b50	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00b57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b5e	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b66	48 98		 cdqe
  00b68	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b70	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b74	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b7b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b83	48 98		 cdqe
  00b85	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b91	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b98	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b9f	48 98		 cdqe
  00ba1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bad	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bb4	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bbc	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc3	48 98		 cdqe
  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bcd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd1	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00be0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be7	48 98		 cdqe
  00be9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bf1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bf5	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bfc	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c03	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c0a	03 c8		 add	 ecx, eax
  00c0c	8b c1		 mov	 eax, ecx
  00c0e	48 98		 cdqe
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c18	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c1c	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c23	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2b	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c32	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c36	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c3d	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c45	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c4c	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c50	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c57	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5f	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c66	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c6a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c71	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c79	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c80	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c84	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c8b	33 c0		 xor	 eax, eax
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN40@convert_yv
  00c91	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c98	c1 e0 fa	 shl	 eax, -6
  00c9b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ca2	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca9	c1 e0 fa	 shl	 eax, -6
  00cac	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cb3	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cba	c1 e0 fa	 shl	 eax, -6
  00cbd	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cc4	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ccb	c1 e0 fa	 shl	 eax, -6
  00cce	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cd5	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd7	33 c0		 xor	 eax, eax
  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	74 44		 je	 SHORT $LN42@convert_yv
  00cde	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00ce5	c1 f8 06	 sar	 eax, 6
  00ce8	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cef	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cf6	c1 f8 06	 sar	 eax, 6
  00cf9	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d00	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d07	c1 f8 06	 sar	 eax, 6
  00d0a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d11	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d18	c1 f8 06	 sar	 eax, 6
  00d1b	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d22	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d27	48 98		 cdqe
  00d29	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d31	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d39	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d3c	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d43	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d4a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d4e	d1 f8		 sar	 eax, 1
  00d50	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d55	ff c1		 inc	 ecx
  00d57	48 63 c9	 movsxd	 rcx, ecx
  00d5a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d62	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d65	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d69	48 98		 cdqe
  00d6b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d73	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d7b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d85	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d8c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d90	d1 f8		 sar	 eax, 1
  00d92	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d96	ff c1		 inc	 ecx
  00d98	48 63 c9	 movsxd	 rcx, ecx
  00d9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00da3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00da6	e9 2d fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dab	e9 98 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00db0	e9 08 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db5	48 8b cc	 mov	 rcx, rsp
  00db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00ddb	5f		 pop	 rdi
  00ddc	5e		 pop	 rsi
  00ddd	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_p_to_yuv444

; 809  : static void convert_yv12_12_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 810  :     convert_yv12_p_to_yuv444_c<uint16_t, 12, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,12,unsigned char,8,0>

; 811  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv154 = 368
tv199 = 372
tv244 = 376
tv246 = 380
tv249 = 384
tv252 = 388
tv258 = 392
tv257 = 396
tv325 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027f	c7 84 24 64 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T46[rsp], -6
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002ad	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002f2	c7 84 24 6c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T48[rsp], 6
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00320	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00381	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00385	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003d5	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00446	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00459	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00460	d1 e0		 shl	 eax, 1
  00462	48 98		 cdqe
  00464	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0046c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00470	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00478	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0047c	c1 e0 02	 shl	 eax, 2
  0047f	48 98		 cdqe
  00481	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  00497	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0049b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004a2	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004b0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004c0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004c8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004cc	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004d3	2b c8		 sub	 ecx, eax
  004d5	8b c1		 mov	 eax, ecx
  004d7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004db	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004e2	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004ea	7c 0d		 jl	 SHORT $LN31@convert_yv
  004ec	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv244[rsp], -2
  004f7	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004f9	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN32@convert_yv:
  00504	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv244[rsp]
  0050b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00512	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0051a	7c 0d		 jl	 SHORT $LN33@convert_yv
  0051c	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv246[rsp], -1
  00527	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00529	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN34@convert_yv:
  00534	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0053b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00542	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00549	83 e8 02	 sub	 eax, 2
  0054c	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00553	7d 0d		 jge	 SHORT $LN35@convert_yv
  00555	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00560	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00562	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv249[rsp], -1
$LN36@convert_yv:
  0056d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00574	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0057b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00582	83 e8 04	 sub	 eax, 4
  00585	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0058c	7d 0d		 jge	 SHORT $LN37@convert_yv
  0058e	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv252[rsp], 2
  00599	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0059b	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
$LN38@convert_yv:
  005a6	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv252[rsp]
  005ad	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005b4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005bb	83 e8 06	 sub	 eax, 6
  005be	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005c5	7d 0d		 jge	 SHORT $LN41@convert_yv
  005c7	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv258[rsp], 3
  005d2	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005d4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005db	83 e8 02	 sub	 eax, 2
  005de	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005e5	7d 0d		 jge	 SHORT $LN39@convert_yv
  005e7	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv257[rsp], 1
  005f2	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005f4	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv257[rsp], -1
$LN40@convert_yv:
  005ff	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv257[rsp]
  00606	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN42@convert_yv:
  0060d	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00614	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0061b	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00622	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0062a	48 98		 cdqe
  0062c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00634	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00638	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0063f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00646	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0064e	48 98		 cdqe
  00650	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00658	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065c	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00663	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0066b	48 98		 cdqe
  0066d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00675	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00679	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00680	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00687	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00699	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0069d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006a4	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006ab	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006b3	48 98		 cdqe
  006b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006bd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006c8	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006cf	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006d7	48 98		 cdqe
  006d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006e1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006e5	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006ec	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006f4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006fb	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006ff	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00706	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0070e	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00716	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00721	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00729	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00731	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00735	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  0073c	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00744	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0074b	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0074f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00756	33 c0		 xor	 eax, eax
  00758	85 c0		 test	 eax, eax
  0075a	74 46		 je	 SHORT $LN24@convert_yv
  0075c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00763	c1 e0 f7	 shl	 eax, -9
  00766	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0076d	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00774	c1 e0 f7	 shl	 eax, -9
  00777	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0077e	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00785	c1 e0 f7	 shl	 eax, -9
  00788	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0078f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00796	c1 e0 f7	 shl	 eax, -9
  00799	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a0	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007a2	33 c0		 xor	 eax, eax
  007a4	83 f8 01	 cmp	 eax, 1
  007a7	74 44		 je	 SHORT $LN26@convert_yv
  007a9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b0	c1 f8 09	 sar	 eax, 9
  007b3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ba	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c1	c1 f8 09	 sar	 eax, 9
  007c4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007cb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007d2	c1 f8 09	 sar	 eax, 9
  007d5	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007dc	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007e3	c1 f8 09	 sar	 eax, 9
  007e6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007ed	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007f8	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007fa	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00801	83 c0 02	 add	 eax, 2
  00804	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  0080b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00813	48 83 c0 02	 add	 rax, 2
  00817	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00827	48 83 c0 02	 add	 rax, 2
  0082b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00833	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0083a	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00841	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00847	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0084e	83 c0 02	 add	 eax, 2
  00851	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00858	7d 0d		 jge	 SHORT $LN43@convert_yv
  0085a	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00865	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00867	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN44@convert_yv:
  00872	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00879	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00880	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00887	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0088f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a4	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008ab	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008b2	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ba	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c1	48 98		 cdqe
  008c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008cb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cf	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008d6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008de	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008e5	48 98		 cdqe
  008e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ef	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008f3	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008fa	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00901	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00909	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00910	48 98		 cdqe
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0091e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00925	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0092c	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00934	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0093b	48 98		 cdqe
  0093d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00945	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00949	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00950	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00957	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0095f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00966	48 98		 cdqe
  00968	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00970	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00974	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0097b	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00983	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0098a	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0098e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00995	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  0099d	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009a5	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009a9	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b0	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009b8	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c0	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c4	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009cb	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009d3	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009da	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009de	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009e5	33 c0		 xor	 eax, eax
  009e7	85 c0		 test	 eax, eax
  009e9	74 46		 je	 SHORT $LN27@convert_yv
  009eb	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009f2	c1 e0 f7	 shl	 eax, -9
  009f5	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009fc	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a03	c1 e0 f7	 shl	 eax, -9
  00a06	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a0d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a14	c1 e0 f7	 shl	 eax, -9
  00a17	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a1e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a25	c1 e0 f7	 shl	 eax, -9
  00a28	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a2f	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a31	33 c0		 xor	 eax, eax
  00a33	83 f8 01	 cmp	 eax, 1
  00a36	74 44		 je	 SHORT $LN29@convert_yv
  00a38	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a3f	c1 f8 09	 sar	 eax, 9
  00a42	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a49	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a50	c1 f8 09	 sar	 eax, 9
  00a53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a61	c1 f8 09	 sar	 eax, 9
  00a64	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a72	c1 f8 09	 sar	 eax, 9
  00a75	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a7c	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	48 98		 cdqe
  00a83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8b	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a93	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a96	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a9d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa8	d1 f8		 sar	 eax, 1
  00aaa	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aaf	ff c1		 inc	 ecx
  00ab1	48 63 c9	 movsxd	 rcx, ecx
  00ab4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00abc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00abf	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac3	48 98		 cdqe
  00ac5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00acd	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00ad5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ad8	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00adf	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00ae6	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aea	d1 f8		 sar	 eax, 1
  00aec	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af0	ff c1		 inc	 ecx
  00af2	48 63 c9	 movsxd	 rcx, ecx
  00af5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00afd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b00	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b04	03 c0		 add	 eax, eax
  00b06	48 98		 cdqe
  00b08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b10	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00b18	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b1b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b22	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b29	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b2d	d1 f8		 sar	 eax, 1
  00b2f	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b33	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b37	48 63 c9	 movsxd	 rcx, ecx
  00b3a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b42	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b45	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b4a	48 98		 cdqe
  00b4c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b54	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b5c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b5f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b66	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b6d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b71	d1 f8		 sar	 eax, 1
  00b73	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b78	ff c1		 inc	 ecx
  00b7a	48 63 c9	 movsxd	 rcx, ecx
  00b7d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b85	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b88	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b96	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b9d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00ba4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bab	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bb2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb9	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bc0	e9 35 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc5	e9 7e f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bca	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bcf	48 8b cc	 mov	 rcx, rsp
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bde	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be6	48 33 cc	 xor	 rcx, rsp
  00be9	e8 00 00 00 00	 call	 __security_check_cookie
  00bee	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf5	5f		 pop	 rdi
  00bf6	5e		 pop	 rsi
  00bf7	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_i_to_yuv444

; 805  : static void convert_yv12_14_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 806  :     convert_yv12_i_to_yuv444_c<uint16_t, 14, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,14,unsigned char,8,0>

; 807  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv155 = 408
tv200 = 412
tv249 = 416
tv344 = 420
tv469 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 66 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00193	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00197	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a9	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ad	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001ce	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d7	ff c0		 inc	 eax
  001d9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ed	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001f9	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00206	48 03 c8	 add	 rcx, rax
  00209	48 8b c1	 mov	 rax, rcx
  0020c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00214	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00218	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021f	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00225	33 c0		 xor	 eax, eax
  00227	85 c0		 test	 eax, eax
  00229	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00233	48 d1 e0	 shl	 rax, 1
  00236	4c 8b c0	 mov	 r8, rax
  00239	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00241	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00249	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024e	e9 3f 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00253	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025e	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00260	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00267	ff c0		 inc	 eax
  00269	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00270	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00277	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027e	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0028a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00295	c7 84 24 8c 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T56[rsp], -6
  002a0	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002b0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002b4	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  002bb	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c3	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002cb	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002d0	8b 00		 mov	 eax, DWORD PTR [rax]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv155[rsp]
  002dc	d3 e0		 shl	 eax, cl
  002de	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002f1	e9 97 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fd	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00308	c7 84 24 94 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T58[rsp], 6
  00313	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0031b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00323	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00327	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  0032e	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00336	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033e	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00343	8b 00		 mov	 eax, DWORD PTR [rax]
  00345	0f b6 c8	 movzx	 ecx, al
  00348	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  0034f	d3 f8		 sar	 eax, cl
  00351	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00359	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00361	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00364	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00366	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00376	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0037e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00386	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  0038a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038d	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00392	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003d5	0f 8d da 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00446	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0044f	83 c0 02	 add	 eax, 2
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00459	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00461	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00469	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00475	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00479	d1 e0		 shl	 eax, 1
  0047b	48 98		 cdqe
  0047d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00493	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00497	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0049e	0f 8d 0c 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004ac	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004bc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c8	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004d7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004de	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004e6	0f 85 e5 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004ec	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004f7	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004f9	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00500	83 c0 02	 add	 eax, 2
  00503	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  0050a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00512	48 83 c0 02	 add	 rax, 2
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0051e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00526	48 83 c0 02	 add	 rax, 2
  0052a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00532	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00539	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00540	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00546	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0054d	83 c0 02	 add	 eax, 2
  00550	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00557	7d 0d		 jge	 SHORT $LN44@convert_yv
  00559	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00564	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00566	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@convert_yv:
  00571	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00578	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0057f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00587	48 98		 cdqe
  00589	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00591	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00595	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0059c	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a4	48 98		 cdqe
  005a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ae	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005b9	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005d5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005dd	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005e4	48 98		 cdqe
  005e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ee	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005f9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00601	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00608	48 98		 cdqe
  0060a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00612	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00616	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  0061d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00624	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0062b	03 c8		 add	 ecx, eax
  0062d	8b c1		 mov	 eax, ecx
  0062f	48 98		 cdqe
  00631	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00644	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064c	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00653	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00657	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0065e	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00666	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  0066d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00671	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00678	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00680	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00687	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00692	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0069a	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006a1	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	74 46		 je	 SHORT $LN32@convert_yv
  006b2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006b9	c1 e0 f8	 shl	 eax, -8
  006bc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006c3	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006ca	c1 e0 f8	 shl	 eax, -8
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006d4	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006db	c1 e0 f8	 shl	 eax, -8
  006de	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ec	c1 e0 f8	 shl	 eax, -8
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	74 44		 je	 SHORT $LN34@convert_yv
  006ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00706	c1 f8 08	 sar	 eax, 8
  00709	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00710	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00717	c1 f8 08	 sar	 eax, 8
  0071a	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00721	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00728	c1 f8 08	 sar	 eax, 8
  0072b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00739	c1 f8 08	 sar	 eax, 8
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00743	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00748	48 98		 cdqe
  0074a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00752	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  0075a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0075d	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00764	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0076b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0076f	d1 f8		 sar	 eax, 1
  00771	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00776	ff c1		 inc	 ecx
  00778	48 63 c9	 movsxd	 rcx, ecx
  0077b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00783	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00786	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0078a	48 98		 cdqe
  0078c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00794	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  0079c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  0079f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007a6	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007ad	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007b1	d1 f8		 sar	 eax, 1
  007b3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007b7	ff c1		 inc	 ecx
  007b9	48 63 c9	 movsxd	 rcx, ecx
  007bc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007c7	e9 2d fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007cc	e9 da 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007d1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007d8	83 e8 02	 sub	 eax, 2
  007db	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007e2	0f 8c e3 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007f3	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007f5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007fc	83 c0 02	 add	 eax, 2
  007ff	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00806	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0080e	48 83 c0 02	 add	 rax, 2
  00812	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0081a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00822	48 83 c0 02	 add	 rax, 2
  00826	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0082e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00835	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0083c	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00842	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00849	83 c0 02	 add	 eax, 2
  0084c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00853	7d 0d		 jge	 SHORT $LN46@convert_yv
  00855	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv344[rsp], 1
  00860	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00862	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv344[rsp], 0
$LN47@convert_yv:
  0086d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv344[rsp]
  00874	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0087b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00883	48 98		 cdqe
  00885	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0088d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00891	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00898	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a0	48 98		 cdqe
  008a2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008aa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ae	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008b5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008bd	48 98		 cdqe
  008bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008d2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008da	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008e1	48 98		 cdqe
  008e3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008eb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ef	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008f6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008fe	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00905	48 98		 cdqe
  00907	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0090f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00913	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0091a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00922	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00929	48 98		 cdqe
  0092b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00933	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00937	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0094d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00951	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00958	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00960	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00967	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0096b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00981	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00985	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0098c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00994	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  0099b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0099f	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	74 46		 je	 SHORT $LN37@convert_yv
  009ac	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009b3	c1 e0 f8	 shl	 eax, -8
  009b6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009bd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009c4	c1 e0 f8	 shl	 eax, -8
  009c7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ce	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009d5	c1 e0 f8	 shl	 eax, -8
  009d8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009e6	c1 e0 f8	 shl	 eax, -8
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009f0	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009f2	33 c0		 xor	 eax, eax
  009f4	83 f8 01	 cmp	 eax, 1
  009f7	74 44		 je	 SHORT $LN39@convert_yv
  009f9	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a00	c1 f8 08	 sar	 eax, 8
  00a03	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a0a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a11	c1 f8 08	 sar	 eax, 8
  00a14	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a1b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a22	c1 f8 08	 sar	 eax, 8
  00a25	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a2c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a33	c1 f8 08	 sar	 eax, 8
  00a36	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a3d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a42	48 98		 cdqe
  00a44	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a4c	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a54	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a57	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a5e	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a65	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a69	d1 f8		 sar	 eax, 1
  00a6b	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a70	ff c1		 inc	 ecx
  00a72	48 63 c9	 movsxd	 rcx, ecx
  00a75	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a7d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a80	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a84	48 98		 cdqe
  00a86	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a8e	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a96	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a99	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00aa0	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aab	d1 f8		 sar	 eax, 1
  00aad	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ab1	ff c1		 inc	 ecx
  00ab3	48 63 c9	 movsxd	 rcx, ecx
  00ab6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00abe	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00ac1	e9 2f fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac6	e9 e0 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00acb	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad6	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad8	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00adf	83 c0 02	 add	 eax, 2
  00ae2	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00af1	48 83 c0 02	 add	 rax, 2
  00af5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00afd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b05	48 83 c0 02	 add	 rax, 2
  00b09	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b11	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b18	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b1f	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b25	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b2c	83 c0 02	 add	 eax, 2
  00b2f	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b36	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b38	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00b43	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b45	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN49@convert_yv:
  00b50	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00b57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b5e	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b66	48 98		 cdqe
  00b68	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b70	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b74	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b7b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b83	48 98		 cdqe
  00b85	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b91	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b98	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b9f	48 98		 cdqe
  00ba1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bad	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bb4	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bbc	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc3	48 98		 cdqe
  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bcd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd1	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00be0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be7	48 98		 cdqe
  00be9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bf1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bf5	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bfc	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c03	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c0a	03 c8		 add	 ecx, eax
  00c0c	8b c1		 mov	 eax, ecx
  00c0e	48 98		 cdqe
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c18	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c1c	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c23	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2b	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c32	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c36	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c3d	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c45	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c4c	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c50	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c57	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5f	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c66	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c6a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c71	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c79	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c80	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c84	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c8b	33 c0		 xor	 eax, eax
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN40@convert_yv
  00c91	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c98	c1 e0 f8	 shl	 eax, -8
  00c9b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ca2	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca9	c1 e0 f8	 shl	 eax, -8
  00cac	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cb3	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cba	c1 e0 f8	 shl	 eax, -8
  00cbd	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cc4	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ccb	c1 e0 f8	 shl	 eax, -8
  00cce	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cd5	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd7	33 c0		 xor	 eax, eax
  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	74 44		 je	 SHORT $LN42@convert_yv
  00cde	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00ce5	c1 f8 08	 sar	 eax, 8
  00ce8	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cef	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cf6	c1 f8 08	 sar	 eax, 8
  00cf9	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d00	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d07	c1 f8 08	 sar	 eax, 8
  00d0a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d11	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d18	c1 f8 08	 sar	 eax, 8
  00d1b	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d22	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d27	48 98		 cdqe
  00d29	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d31	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d39	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d3c	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d43	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d4a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d4e	d1 f8		 sar	 eax, 1
  00d50	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d55	ff c1		 inc	 ecx
  00d57	48 63 c9	 movsxd	 rcx, ecx
  00d5a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d62	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d65	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d69	48 98		 cdqe
  00d6b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d73	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d7b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d85	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d8c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d90	d1 f8		 sar	 eax, 1
  00d92	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d96	ff c1		 inc	 ecx
  00d98	48 63 c9	 movsxd	 rcx, ecx
  00d9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00da3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00da6	e9 2d fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dab	e9 98 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00db0	e9 08 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db5	48 8b cc	 mov	 rcx, rsp
  00db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00ddb	5f		 pop	 rdi
  00ddc	5e		 pop	 rsi
  00ddd	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_p_to_yuv444

; 801  : static void convert_yv12_14_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 802  :     convert_yv12_p_to_yuv444_c<uint16_t, 14, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,14,unsigned char,8,0>

; 803  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv154 = 368
tv199 = 372
tv244 = 376
tv246 = 380
tv249 = 384
tv252 = 388
tv258 = 392
tv257 = 396
tv325 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027f	c7 84 24 64 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T46[rsp], -8
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002ad	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002f2	c7 84 24 6c 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T48[rsp], 8
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00320	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00381	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00385	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 e0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003d5	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  00446	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  0044f	83 c0 04	 add	 eax, 4
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  00459	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00460	d1 e0		 shl	 eax, 1
  00462	48 98		 cdqe
  00464	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  0046c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00470	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00478	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0047c	c1 e0 02	 shl	 eax, 2
  0047f	48 98		 cdqe
  00481	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  00497	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0049b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  004a2	0f 8d 22 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  004a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004b0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004b8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004c0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004c8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004cc	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004d3	2b c8		 sub	 ecx, eax
  004d5	8b c1		 mov	 eax, ecx
  004d7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004db	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004e2	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004ea	7c 0d		 jl	 SHORT $LN31@convert_yv
  004ec	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv244[rsp], -2
  004f7	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004f9	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN32@convert_yv:
  00504	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv244[rsp]
  0050b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00512	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0051a	7c 0d		 jl	 SHORT $LN33@convert_yv
  0051c	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv246[rsp], -1
  00527	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00529	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN34@convert_yv:
  00534	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  0053b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00542	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00549	83 e8 02	 sub	 eax, 2
  0054c	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00553	7d 0d		 jge	 SHORT $LN35@convert_yv
  00555	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00560	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00562	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv249[rsp], -1
$LN36@convert_yv:
  0056d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00574	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0057b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00582	83 e8 04	 sub	 eax, 4
  00585	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0058c	7d 0d		 jge	 SHORT $LN37@convert_yv
  0058e	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv252[rsp], 2
  00599	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0059b	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv252[rsp], 0
$LN38@convert_yv:
  005a6	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv252[rsp]
  005ad	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005b4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005bb	83 e8 06	 sub	 eax, 6
  005be	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005c5	7d 0d		 jge	 SHORT $LN41@convert_yv
  005c7	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv258[rsp], 3
  005d2	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005d4	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005db	83 e8 02	 sub	 eax, 2
  005de	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005e5	7d 0d		 jge	 SHORT $LN39@convert_yv
  005e7	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv257[rsp], 1
  005f2	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005f4	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv257[rsp], -1
$LN40@convert_yv:
  005ff	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv257[rsp]
  00606	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv258[rsp], eax
$LN42@convert_yv:
  0060d	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv258[rsp]
  00614	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0061b	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00622	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0062a	48 98		 cdqe
  0062c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00634	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00638	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  0063f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00646	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0064e	48 98		 cdqe
  00650	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00658	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065c	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00663	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0066b	48 98		 cdqe
  0066d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00675	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00679	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00680	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00687	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00699	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0069d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  006a4	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  006ab	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006b3	48 98		 cdqe
  006b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006bd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006c8	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006cf	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006d7	48 98		 cdqe
  006d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006e1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  006e5	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006ec	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006f4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006fb	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006ff	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  00706	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  0070e	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  00716	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00721	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00729	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00731	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00735	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  0073c	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00744	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0074b	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0074f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  00756	33 c0		 xor	 eax, eax
  00758	85 c0		 test	 eax, eax
  0075a	74 46		 je	 SHORT $LN24@convert_yv
  0075c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00763	c1 e0 f5	 shl	 eax, -11
  00766	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  0076d	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00774	c1 e0 f5	 shl	 eax, -11
  00777	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  0077e	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00785	c1 e0 f5	 shl	 eax, -11
  00788	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  0078f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00796	c1 e0 f5	 shl	 eax, -11
  00799	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  007a0	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  007a2	33 c0		 xor	 eax, eax
  007a4	83 f8 01	 cmp	 eax, 1
  007a7	74 44		 je	 SHORT $LN26@convert_yv
  007a9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007b0	c1 f8 0b	 sar	 eax, 11
  007b3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ba	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007c1	c1 f8 0b	 sar	 eax, 11
  007c4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007cb	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007d2	c1 f8 0b	 sar	 eax, 11
  007d5	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007dc	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007e3	c1 f8 0b	 sar	 eax, 11
  007e6	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007ed	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007f8	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007fa	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00801	83 c0 02	 add	 eax, 2
  00804	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  0080b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00813	48 83 c0 02	 add	 rax, 2
  00817	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  00827	48 83 c0 02	 add	 rax, 2
  0082b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00833	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0083a	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00841	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  00847	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  0084e	83 c0 02	 add	 eax, 2
  00851	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  00858	7d 0d		 jge	 SHORT $LN43@convert_yv
  0085a	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00865	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  00867	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN44@convert_yv:
  00872	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00879	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00880	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00887	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0088f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008a0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008a4	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  008ab	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008b2	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ba	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008c1	48 98		 cdqe
  008c3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008cb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cf	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008d6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008de	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008e5	48 98		 cdqe
  008e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008ef	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008f3	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008fa	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  00901	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00909	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00910	48 98		 cdqe
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0091e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00925	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0092c	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00934	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0093b	48 98		 cdqe
  0093d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00945	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00949	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00950	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  00957	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0095f	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00966	48 98		 cdqe
  00968	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00970	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00974	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0097b	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00983	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0098a	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0098e	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00995	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  0099d	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  009a5	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009a9	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009b0	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009b8	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009c0	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c4	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009cb	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009d3	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009da	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009de	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009e5	33 c0		 xor	 eax, eax
  009e7	85 c0		 test	 eax, eax
  009e9	74 46		 je	 SHORT $LN27@convert_yv
  009eb	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009f2	c1 e0 f5	 shl	 eax, -11
  009f5	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009fc	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a03	c1 e0 f5	 shl	 eax, -11
  00a06	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a0d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a14	c1 e0 f5	 shl	 eax, -11
  00a17	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a1e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a25	c1 e0 f5	 shl	 eax, -11
  00a28	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a2f	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a31	33 c0		 xor	 eax, eax
  00a33	83 f8 01	 cmp	 eax, 1
  00a36	74 44		 je	 SHORT $LN29@convert_yv
  00a38	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a3f	c1 f8 0b	 sar	 eax, 11
  00a42	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a49	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a50	c1 f8 0b	 sar	 eax, 11
  00a53	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a5a	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a61	c1 f8 0b	 sar	 eax, 11
  00a64	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a6b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a72	c1 f8 0b	 sar	 eax, 11
  00a75	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a7c	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a81	48 98		 cdqe
  00a83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a8b	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a93	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a96	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a9d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00aa4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa8	d1 f8		 sar	 eax, 1
  00aaa	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aaf	ff c1		 inc	 ecx
  00ab1	48 63 c9	 movsxd	 rcx, ecx
  00ab4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00abc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00abf	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ac3	48 98		 cdqe
  00ac5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00acd	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00ad5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ad8	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00adf	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00ae6	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aea	d1 f8		 sar	 eax, 1
  00aec	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00af0	ff c1		 inc	 ecx
  00af2	48 63 c9	 movsxd	 rcx, ecx
  00af5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00afd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00b00	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00b04	03 c0		 add	 eax, eax
  00b06	48 98		 cdqe
  00b08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b10	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00b18	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b1b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b22	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b29	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b2d	d1 f8		 sar	 eax, 1
  00b2f	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b33	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b37	48 63 c9	 movsxd	 rcx, ecx
  00b3a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b42	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b45	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b4a	48 98		 cdqe
  00b4c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b54	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b5c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b5f	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b66	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b6d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b71	d1 f8		 sar	 eax, 1
  00b73	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b78	ff c1		 inc	 ecx
  00b7a	48 63 c9	 movsxd	 rcx, ecx
  00b7d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b85	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b88	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b96	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b9d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00ba4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00bab	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bb2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb9	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bc0	e9 35 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc5	e9 7e f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bca	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bcf	48 8b cc	 mov	 rcx, rsp
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bde	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be6	48 33 cc	 xor	 rcx, rsp
  00be9	e8 00 00 00 00	 call	 __security_check_cookie
  00bee	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf5	5f		 pop	 rdi
  00bf6	5e		 pop	 rsi
  00bf7	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_i_to_yuv444

; 797  : static void convert_yv12_16_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 798  :     convert_yv12_i_to_yuv444_c<uint16_t, 16, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned short,16,unsigned char,8,0>

; 799  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv155 = 408
tv200 = 412
tv249 = 416
tv344 = 420
tv469 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 66 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00193	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00197	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a9	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ad	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b4	2b c8		 sub	 ecx, eax
  001b6	8b c1		 mov	 eax, ecx
  001b8	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c3	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001ce	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001d0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d7	ff c0		 inc	 eax
  001d9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ed	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001f9	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00206	48 03 c8	 add	 rcx, rax
  00209	48 8b c1	 mov	 rax, rcx
  0020c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00214	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00218	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021f	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00225	33 c0		 xor	 eax, eax
  00227	85 c0		 test	 eax, eax
  00229	74 28		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00233	48 d1 e0	 shl	 rax, 1
  00236	4c 8b c0	 mov	 r8, rax
  00239	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00241	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00249	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024e	e9 3f 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00253	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025e	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00260	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00267	ff c0		 inc	 eax
  00269	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00270	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00277	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027e	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0028a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00295	c7 84 24 8c 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T56[rsp], -8
  002a0	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002b0	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002b4	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  002bb	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c3	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002cb	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002d0	8b 00		 mov	 eax, DWORD PTR [rax]
  002d2	0f b6 c8	 movzx	 ecx, al
  002d5	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv155[rsp]
  002dc	d3 e0		 shl	 eax, cl
  002de	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002f1	e9 97 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fd	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00308	c7 84 24 94 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T58[rsp], 8
  00313	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0031b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00323	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00327	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  0032e	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00336	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033e	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00343	8b 00		 mov	 eax, DWORD PTR [rax]
  00345	0f b6 c8	 movzx	 ecx, al
  00348	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  0034f	d3 f8		 sar	 eax, cl
  00351	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00359	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00361	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00364	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00366	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00376	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0037e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00386	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  0038a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038d	e9 ce fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00392	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00397	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039f	33 d2		 xor	 edx, edx
  003a1	b9 02 00 00 00	 mov	 ecx, 2
  003a6	48 f7 f1	 div	 rcx
  003a9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003b0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003bb	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003bd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003c4	ff c0		 inc	 eax
  003c6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003cd	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003d5	0f 8d da 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003db	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003e3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003ea	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003ef	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f3	d1 f9		 sar	 ecx, 1
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00400	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00404	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00408	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00410	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00421	48 63 c9	 movsxd	 rcx, ecx
  00424	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042c	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00430	48 8b c1	 mov	 rax, rcx
  00433	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0043b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  00446	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  00448	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  0044f	83 c0 02	 add	 eax, 2
  00452	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  00459	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00461	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  00469	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  00475	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00479	d1 e0		 shl	 eax, 1
  0047b	48 98		 cdqe
  0047d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00493	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00497	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  0049e	0f 8d 0c 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  004a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004ac	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004bc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c8	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004d7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004de	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004e6	0f 85 e5 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004ec	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004f7	eb 39		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004f9	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00500	83 c0 02	 add	 eax, 2
  00503	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  0050a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00512	48 83 c0 02	 add	 rax, 2
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0051e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00526	48 83 c0 02	 add	 rax, 2
  0052a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00532	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00539	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00540	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00546	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  0054d	83 c0 02	 add	 eax, 2
  00550	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00557	7d 0d		 jge	 SHORT $LN44@convert_yv
  00559	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00564	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00566	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@convert_yv:
  00571	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00578	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  0057f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00587	48 98		 cdqe
  00589	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00591	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00595	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0059c	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a4	48 98		 cdqe
  005a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ae	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005b9	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005d5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005dd	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005e4	48 98		 cdqe
  005e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005ee	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005f9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00601	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  00608	48 98		 cdqe
  0060a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00612	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00616	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  0061d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00624	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0062b	03 c8		 add	 ecx, eax
  0062d	8b c1		 mov	 eax, ecx
  0062f	48 98		 cdqe
  00631	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00639	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0063d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00644	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064c	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00653	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00657	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0065e	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00666	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  0066d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00671	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00678	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00680	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  00687	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00692	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0069a	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  006a1	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  006ac	33 c0		 xor	 eax, eax
  006ae	85 c0		 test	 eax, eax
  006b0	74 46		 je	 SHORT $LN32@convert_yv
  006b2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006b9	c1 e0 f6	 shl	 eax, -10
  006bc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006c3	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006ca	c1 e0 f6	 shl	 eax, -10
  006cd	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006d4	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006db	c1 e0 f6	 shl	 eax, -10
  006de	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006ec	c1 e0 f6	 shl	 eax, -10
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006f6	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006f8	33 c0		 xor	 eax, eax
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	74 44		 je	 SHORT $LN34@convert_yv
  006ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00706	c1 f8 0a	 sar	 eax, 10
  00709	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00710	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  00717	c1 f8 0a	 sar	 eax, 10
  0071a	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00721	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  00728	c1 f8 0a	 sar	 eax, 10
  0072b	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00739	c1 f8 0a	 sar	 eax, 10
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00743	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00748	48 98		 cdqe
  0074a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00752	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  0075a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  0075d	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00764	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0076b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0076f	d1 f8		 sar	 eax, 1
  00771	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00776	ff c1		 inc	 ecx
  00778	48 63 c9	 movsxd	 rcx, ecx
  0077b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00783	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00786	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0078a	48 98		 cdqe
  0078c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00794	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  0079c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  0079f	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  007a6	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007ad	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007b1	d1 f8		 sar	 eax, 1
  007b3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007b7	ff c1		 inc	 ecx
  007b9	48 63 c9	 movsxd	 rcx, ecx
  007bc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007c4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007c7	e9 2d fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007cc	e9 da 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007d1	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007d8	83 e8 02	 sub	 eax, 2
  007db	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007e2	0f 8c e3 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e8	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007f3	eb 39		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007f5	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007fc	83 c0 02	 add	 eax, 2
  007ff	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  00806	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  0080e	48 83 c0 02	 add	 rax, 2
  00812	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  0081a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00822	48 83 c0 02	 add	 rax, 2
  00826	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  0082e	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00835	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  0083c	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00842	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  00849	83 c0 02	 add	 eax, 2
  0084c	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00853	7d 0d		 jge	 SHORT $LN46@convert_yv
  00855	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv344[rsp], 1
  00860	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00862	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv344[rsp], 0
$LN47@convert_yv:
  0086d	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv344[rsp]
  00874	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  0087b	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00883	48 98		 cdqe
  00885	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0088d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00891	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00898	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a0	48 98		 cdqe
  008a2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008aa	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ae	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008b5	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008bd	48 98		 cdqe
  008bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008cb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008d2	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008da	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008e1	48 98		 cdqe
  008e3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008eb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008ef	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008f6	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008fe	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00905	48 98		 cdqe
  00907	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0090f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00913	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  0091a	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00922	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  00929	48 98		 cdqe
  0092b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00933	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00937	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  0094d	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00951	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00958	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00960	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  00967	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0096b	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00981	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00985	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  0098c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00994	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  0099b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0099f	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	74 46		 je	 SHORT $LN37@convert_yv
  009ac	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009b3	c1 e0 f6	 shl	 eax, -10
  009b6	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009bd	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009c4	c1 e0 f6	 shl	 eax, -10
  009c7	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009ce	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009d5	c1 e0 f6	 shl	 eax, -10
  009d8	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009e6	c1 e0 f6	 shl	 eax, -10
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009f0	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009f2	33 c0		 xor	 eax, eax
  009f4	83 f8 01	 cmp	 eax, 1
  009f7	74 44		 je	 SHORT $LN39@convert_yv
  009f9	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a00	c1 f8 0a	 sar	 eax, 10
  00a03	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a0a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a11	c1 f8 0a	 sar	 eax, 10
  00a14	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a1b	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a22	c1 f8 0a	 sar	 eax, 10
  00a25	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a2c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a33	c1 f8 0a	 sar	 eax, 10
  00a36	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a3d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a42	48 98		 cdqe
  00a44	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a4c	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a54	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a57	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a5e	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a65	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a69	d1 f8		 sar	 eax, 1
  00a6b	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a70	ff c1		 inc	 ecx
  00a72	48 63 c9	 movsxd	 rcx, ecx
  00a75	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a7d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a80	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a84	48 98		 cdqe
  00a86	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a8e	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a96	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a99	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00aa0	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa7	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aab	d1 f8		 sar	 eax, 1
  00aad	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ab1	ff c1		 inc	 ecx
  00ab3	48 63 c9	 movsxd	 rcx, ecx
  00ab6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00abe	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00ac1	e9 2f fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac6	e9 e0 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00acb	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad6	eb 39		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad8	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00adf	83 c0 02	 add	 eax, 2
  00ae2	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00af1	48 83 c0 02	 add	 rax, 2
  00af5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00afd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00b05	48 83 c0 02	 add	 rax, 2
  00b09	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b11	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b18	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b1f	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b25	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b2c	83 c0 02	 add	 eax, 2
  00b2f	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b36	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b38	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00b43	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b45	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN49@convert_yv:
  00b50	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00b57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b5e	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b66	48 98		 cdqe
  00b68	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b70	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b74	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b7b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b83	48 98		 cdqe
  00b85	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00b91	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b98	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b9f	48 98		 cdqe
  00ba1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bad	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bb4	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bbc	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bc3	48 98		 cdqe
  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bcd	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bd1	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00be0	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be7	48 98		 cdqe
  00be9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bf1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00bf5	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bfc	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00c03	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c0a	03 c8		 add	 ecx, eax
  00c0c	8b c1		 mov	 eax, ecx
  00c0e	48 98		 cdqe
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c18	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00c1c	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c23	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2b	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c32	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c36	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c3d	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c45	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c4c	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c50	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c57	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5f	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c66	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c6a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c71	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c79	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c80	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c84	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c8b	33 c0		 xor	 eax, eax
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN40@convert_yv
  00c91	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c98	c1 e0 f6	 shl	 eax, -10
  00c9b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ca2	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca9	c1 e0 f6	 shl	 eax, -10
  00cac	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cb3	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cba	c1 e0 f6	 shl	 eax, -10
  00cbd	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cc4	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00ccb	c1 e0 f6	 shl	 eax, -10
  00cce	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cd5	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd7	33 c0		 xor	 eax, eax
  00cd9	83 f8 01	 cmp	 eax, 1
  00cdc	74 44		 je	 SHORT $LN42@convert_yv
  00cde	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00ce5	c1 f8 0a	 sar	 eax, 10
  00ce8	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cef	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cf6	c1 f8 0a	 sar	 eax, 10
  00cf9	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00d00	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d07	c1 f8 0a	 sar	 eax, 10
  00d0a	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d11	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d18	c1 f8 0a	 sar	 eax, 10
  00d1b	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d22	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d27	48 98		 cdqe
  00d29	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d31	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d39	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d3c	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d43	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d4a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d4e	d1 f8		 sar	 eax, 1
  00d50	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d55	ff c1		 inc	 ecx
  00d57	48 63 c9	 movsxd	 rcx, ecx
  00d5a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d62	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d65	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d69	48 98		 cdqe
  00d6b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d73	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d7b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d85	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d8c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d90	d1 f8		 sar	 eax, 1
  00d92	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d96	ff c1		 inc	 ecx
  00d98	48 63 c9	 movsxd	 rcx, ecx
  00d9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00da3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00da6	e9 2d fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00dab	e9 98 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00db0	e9 08 f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db5	48 8b cc	 mov	 rcx, rsp
  00db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00ddb	5f		 pop	 rdi
  00ddc	5e		 pop	 rsi
  00ddd	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_p_to_yuv444

; 793  : static void convert_yv12_16_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 794  :     convert_yv12_p_to_yuv444_c<uint16_t, 16, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned short,16,unsigned char,8,0>

; 795  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv152 = 368
tv197 = 372
tv240 = 376
tv242 = 380
tv245 = 384
tv248 = 388
tv254 = 392
tv253 = 396
tv321 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 d8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b9	33 d2		 xor	 edx, edx
  000bb	b9 02 00 00 00	 mov	 ecx, 2
  000c0	48 f7 f1	 div	 rcx
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 4f 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 03 c1	 add	 rax, rcx
  00155	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015a	48 03 c1	 add	 rax, rcx
  0015d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00172	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00177	48 63 c9	 movsxd	 rcx, ecx
  0017a	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00182	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00186	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0018a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00192	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00196	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a5	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ac	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b7	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001b9	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c0	ff c0		 inc	 eax
  001c2	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001c9	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 8b c1	 mov	 rax, rcx
  001dc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e4	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001fd	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00201	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00208	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  0020e	33 c0		 xor	 eax, eax
  00210	85 c0		 test	 eax, eax
  00212	74 25		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00214	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021c	4c 8b c0	 mov	 r8, rax
  0021f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00227	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0022f	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  00234	e9 42 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00239	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00244	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00246	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0024d	ff c0		 inc	 eax
  0024f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  00256	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0025d	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00264	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  0026a	33 c0		 xor	 eax, eax
  0026c	83 f8 01	 cmp	 eax, 1
  0026f	74 6d		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00271	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  0027c	c7 84 24 64 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T46[rsp], 8
  00287	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0028f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00297	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0029b	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv152[rsp], eax
  002a2	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002aa	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002b2	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002b7	8b 00		 mov	 eax, DWORD PTR [rax]
  002b9	0f b6 c8	 movzx	 ecx, al
  002bc	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv152[rsp]
  002c3	d3 e0		 shl	 eax, cl
  002c5	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002cd	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d5	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002d9	e9 98 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002de	33 c0		 xor	 eax, eax
  002e0	85 c0		 test	 eax, eax
  002e2	74 6a		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e4	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002ef	c7 84 24 6c 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T48[rsp], -8
  002fa	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00302	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0030e	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv197[rsp], eax
  00315	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  0031d	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  00325	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032a	8b 00		 mov	 eax, DWORD PTR [rax]
  0032c	0f b6 c8	 movzx	 ecx, al
  0032f	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv197[rsp]
  00336	d3 f8		 sar	 eax, cl
  00338	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00340	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00348	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 707  :                     } else {

  0034c	eb 28		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  0034e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00356	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0035e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00362	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00372	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00376	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0037b	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00380	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00384	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0038b	2b c8		 sub	 ecx, eax
  0038d	8b c1		 mov	 eax, ecx
  0038f	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00396	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  003a4	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003af	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b1	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003b8	ff c0		 inc	 eax
  003ba	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003c1	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003c9	0f 8d fb 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003cf	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003d7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	d1 f9		 sar	 ecx, 1
  003e9	48 63 c9	 movsxd	 rcx, ecx
  003ec	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f4	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  003f8	48 8b c1	 mov	 rax, rcx
  003fb	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00403	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00414	48 63 c9	 movsxd	 rcx, ecx
  00417	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0041f	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00423	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00427	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  0042f	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  0043a	eb 4f		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0043c	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  00443	83 c0 04	 add	 eax, 4
  00446	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  0044d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00454	d1 e0		 shl	 eax, 1
  00456	48 98		 cdqe
  00458	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  00460	48 03 c8	 add	 rcx, rax
  00463	48 8b c1	 mov	 rax, rcx
  00466	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  0046e	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00472	c1 e0 02	 shl	 eax, 2
  00475	48 98		 cdqe
  00477	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  0047f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00483	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  0048b	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0048f	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00496	0f 8d 29 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  0049c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  004a4	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004ac	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004b4	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004bc	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004c0	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004c7	2b c8		 sub	 ecx, eax
  004c9	8b c1		 mov	 eax, ecx
  004cb	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004cf	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004d6	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004de	7c 0d		 jl	 SHORT $LN31@convert_yv
  004e0	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv240[rsp], -2
  004eb	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004ed	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv240[rsp], 0
$LN32@convert_yv:
  004f8	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv240[rsp]
  004ff	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  00506	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  0050e	7c 0d		 jl	 SHORT $LN33@convert_yv
  00510	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv242[rsp], -1
  0051b	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  0051d	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv242[rsp], 1
$LN34@convert_yv:
  00528	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv242[rsp]
  0052f	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  00536	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0053d	83 e8 02	 sub	 eax, 2
  00540	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00547	7d 0d		 jge	 SHORT $LN35@convert_yv
  00549	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv245[rsp], 1
  00554	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  00556	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv245[rsp], -1
$LN36@convert_yv:
  00561	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv245[rsp]
  00568	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  0056f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00576	83 e8 04	 sub	 eax, 4
  00579	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00580	7d 0d		 jge	 SHORT $LN37@convert_yv
  00582	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv248[rsp], 2
  0058d	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  0058f	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv248[rsp], 0
$LN38@convert_yv:
  0059a	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv248[rsp]
  005a1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  005a8	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005af	83 e8 06	 sub	 eax, 6
  005b2	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005b9	7d 0d		 jge	 SHORT $LN41@convert_yv
  005bb	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv254[rsp], 3
  005c6	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005c8	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005cf	83 e8 02	 sub	 eax, 2
  005d2	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005d9	7d 0d		 jge	 SHORT $LN39@convert_yv
  005db	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
  005e6	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005e8	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv253[rsp], -1
$LN40@convert_yv:
  005f3	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv253[rsp]
  005fa	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv254[rsp], eax
$LN42@convert_yv:
  00601	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv254[rsp]
  00608	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  0060f	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  00616	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0061e	48 98		 cdqe
  00620	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00628	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0062c	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  00633	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  0063a	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00642	48 98		 cdqe
  00644	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0064c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00650	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  00657	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0065f	48 98		 cdqe
  00661	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00669	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0066d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00674	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  0067b	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00683	48 98		 cdqe
  00685	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0068d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00691	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  00698	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0069f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006a7	48 98		 cdqe
  006a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006b1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006b5	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006bc	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006c3	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006cb	48 98		 cdqe
  006cd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006d5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006d9	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006e0	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006e8	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006ef	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006f3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  006fa	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  00702	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  0070a	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0070e	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00715	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  0071d	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00725	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00729	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00730	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  00738	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  0073f	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00743	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  0074a	33 c0		 xor	 eax, eax
  0074c	83 f8 01	 cmp	 eax, 1
  0074f	74 46		 je	 SHORT $LN24@convert_yv
  00751	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00758	c1 e0 05	 shl	 eax, 5
  0075b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  00762	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00769	c1 e0 05	 shl	 eax, 5
  0076c	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  00773	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  0077a	c1 e0 05	 shl	 eax, 5
  0077d	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  00784	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  0078b	c1 e0 05	 shl	 eax, 5
  0078e	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  00795	eb 4a		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  00797	33 c0		 xor	 eax, eax
  00799	85 c0		 test	 eax, eax
  0079b	74 44		 je	 SHORT $LN26@convert_yv
  0079d	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  007a4	c1 f8 fb	 sar	 eax, -5
  007a7	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007ae	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007b5	c1 f8 fb	 sar	 eax, -5
  007b8	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007bf	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007c6	c1 f8 fb	 sar	 eax, -5
  007c9	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007d0	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007d7	c1 f8 fb	 sar	 eax, -5
  007da	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007e1	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007ec	eb 38		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007ee	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  007f5	83 c0 02	 add	 eax, 2
  007f8	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  007ff	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  00807	48 83 c0 04	 add	 rax, 4
  0080b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  00813	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  0081b	48 ff c0	 inc	 rax
  0081e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  00826	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  0082d	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00834	0f 8d 86 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  0083a	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00841	83 c0 02	 add	 eax, 2
  00844	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  0084b	7d 0d		 jge	 SHORT $LN43@convert_yv
  0084d	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv321[rsp], 1
  00858	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  0085a	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv321[rsp], 0
$LN44@convert_yv:
  00865	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv321[rsp]
  0086c	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00873	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0087a	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00882	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00889	48 98		 cdqe
  0088b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00893	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00897	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  0089e	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  008a5	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008ad	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008b4	48 98		 cdqe
  008b6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008be	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008c2	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008c9	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008d1	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008d8	48 98		 cdqe
  008da	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008e6	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008ed	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  008f4	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008fc	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00903	48 98		 cdqe
  00905	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0090d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00911	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  00918	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  0091f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00927	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0092e	48 98		 cdqe
  00930	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00938	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0093c	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00943	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  0094a	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00952	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00959	48 98		 cdqe
  0095b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00963	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00967	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  0096e	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  00976	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  0097d	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00981	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  00988	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  00990	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  00998	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0099c	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  009a3	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  009ab	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009b3	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009b7	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009be	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009c6	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009cd	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009d1	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009d8	33 c0		 xor	 eax, eax
  009da	83 f8 01	 cmp	 eax, 1
  009dd	74 46		 je	 SHORT $LN27@convert_yv
  009df	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009e6	c1 e0 05	 shl	 eax, 5
  009e9	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009f0	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  009f7	c1 e0 05	 shl	 eax, 5
  009fa	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a01	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a08	c1 e0 05	 shl	 eax, 5
  00a0b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a12	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a19	c1 e0 05	 shl	 eax, 5
  00a1c	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a23	eb 4a		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a25	33 c0		 xor	 eax, eax
  00a27	85 c0		 test	 eax, eax
  00a29	74 44		 je	 SHORT $LN29@convert_yv
  00a2b	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a32	c1 f8 fb	 sar	 eax, -5
  00a35	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a3c	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a43	c1 f8 fb	 sar	 eax, -5
  00a46	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a4d	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a54	c1 f8 fb	 sar	 eax, -5
  00a57	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a5e	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a65	c1 f8 fb	 sar	 eax, -5
  00a68	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a6f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a74	48 98		 cdqe
  00a76	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a7e	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cy0x0$28[rsp]
  00a86	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a8a	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a91	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00a98	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a9c	d1 f8		 sar	 eax, 1
  00a9e	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00aa3	ff c1		 inc	 ecx
  00aa5	48 63 c9	 movsxd	 rcx, ecx
  00aa8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ab0	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00ab4	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00ab8	48 98		 cdqe
  00aba	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00ac2	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$29[rsp]
  00aca	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00ace	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00ad5	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00adc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00ae0	d1 f8		 sar	 eax, 1
  00ae2	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ae6	ff c1		 inc	 ecx
  00ae8	48 63 c9	 movsxd	 rcx, ecx
  00aeb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00af3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00af7	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00afb	03 c0		 add	 eax, eax
  00afd	48 98		 cdqe
  00aff	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b07	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cy2x0$30[rsp]
  00b0f	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b13	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b1a	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b21	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b25	d1 f8		 sar	 eax, 1
  00b27	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b2b	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b2f	48 63 c9	 movsxd	 rcx, ecx
  00b32	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b3a	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b3e	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b43	48 98		 cdqe
  00b45	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b4d	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cy3x0$31[rsp]
  00b55	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b59	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b60	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b67	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b6b	d1 f8		 sar	 eax, 1
  00b6d	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b72	ff c1		 inc	 ecx
  00b74	48 63 c9	 movsxd	 rcx, ecx
  00b77	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b7f	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b83	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b8a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b91	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b98	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00b9f	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00ba6	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00bad	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00bb4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00bbb	e9 2e fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bc0	e9 77 f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bc5	e9 e7 f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bca	48 8b cc	 mov	 rcx, rsp
  00bcd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bd4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bd9	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00be1	48 33 cc	 xor	 rcx, rsp
  00be4	e8 00 00 00 00	 call	 __security_check_cookie
  00be9	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bf0	5f		 pop	 rdi
  00bf1	5e		 pop	 rsi
  00bf2	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_16bit

; 789  : static void convert_yv12_i_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 790  :     convert_yv12_i_to_yuv444_c<uint8_t, 8, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned short,16,0>

; 791  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_i_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv153 = 408
tv198 = 412
tv245 = 416
tv340 = 420
tv465 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 f8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b9	33 d2		 xor	 edx, edx
  000bb	b9 02 00 00 00	 mov	 ecx, 2
  000c0	48 f7 f1	 div	 rcx
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 65 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 03 c1	 add	 rax, rcx
  00155	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015a	48 03 c1	 add	 rax, rcx
  0015d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00172	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00177	48 63 c9	 movsxd	 rcx, ecx
  0017a	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00182	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00186	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0018a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00192	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00196	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  001a8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ac	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001b3	2b c8		 sub	 ecx, eax
  001b5	8b c1		 mov	 eax, ecx
  001b7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001bb	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001c2	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001cd	eb 44		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001cf	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001d6	ff c0		 inc	 eax
  001d8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001df	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001e4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ec	48 03 c8	 add	 rcx, rax
  001ef	48 8b c1	 mov	 rax, rcx
  001f2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001fa	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001ff	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00207	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0020b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00213	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00217	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  0021e	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00224	33 c0		 xor	 eax, eax
  00226	85 c0		 test	 eax, eax
  00228	74 25		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0022a	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00232	4c 8b c0	 mov	 r8, rax
  00235	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0023d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00245	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  0024a	e9 42 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  0024f	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0025a	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0025c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00263	ff c0		 inc	 eax
  00265	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  0026c	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  00273	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0027a	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00280	33 c0		 xor	 eax, eax
  00282	83 f8 01	 cmp	 eax, 1
  00285	74 6d		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00287	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00292	c7 84 24 8c 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T56[rsp], 8
  0029d	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  002a5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002ad	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002b1	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv153[rsp], eax
  002b8	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002c0	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002c8	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002cd	8b 00		 mov	 eax, DWORD PTR [rax]
  002cf	0f b6 c8	 movzx	 ecx, al
  002d2	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv153[rsp]
  002d9	d3 e0		 shl	 eax, cl
  002db	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002e3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002eb	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002ef	e9 98 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002f4	33 c0		 xor	 eax, eax
  002f6	85 c0		 test	 eax, eax
  002f8	74 6a		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002fa	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  00305	c7 84 24 94 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T58[rsp], -8
  00310	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00318	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00320	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00324	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv198[rsp], eax
  0032b	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00333	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  0033b	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00340	8b 00		 mov	 eax, DWORD PTR [rax]
  00342	0f b6 c8	 movzx	 ecx, al
  00345	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv198[rsp]
  0034c	d3 f8		 sar	 eax, cl
  0034e	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00356	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0035e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 598  :                     } else {

  00362	eb 28		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00364	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0036c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00374	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00378	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00380	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00388	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0038c	e9 cb fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00391	e9 39 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00396	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0039d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  003a4	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003af	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b1	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003b8	ff c0		 inc	 eax
  003ba	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003c1	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003c9	0f 8d e3 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003cf	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003d7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	d1 f9		 sar	 ecx, 1
  003e9	48 63 c9	 movsxd	 rcx, ecx
  003ec	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f4	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  003f8	48 8b c1	 mov	 rax, rcx
  003fb	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  00403	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00414	48 63 c9	 movsxd	 rcx, ecx
  00417	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0041f	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00423	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00427	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  0042f	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  0043a	eb 4b		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0043c	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  00443	83 c0 02	 add	 eax, 2
  00446	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  0044d	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00455	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  0045d	48 03 c8	 add	 rcx, rax
  00460	48 8b c1	 mov	 rax, rcx
  00463	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  0046b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0046f	d1 e0		 shl	 eax, 1
  00471	48 98		 cdqe
  00473	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  0047b	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0047f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  00487	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0048b	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  00492	0f 8d 15 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  00498	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  004a0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  004a8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004b0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004b8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004bc	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004c3	2b c8		 sub	 ecx, eax
  004c5	8b c1		 mov	 eax, ecx
  004c7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004cb	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004d2	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004da	0f 85 e8 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004e0	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004eb	eb 38		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004ed	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  004f4	83 c0 02	 add	 eax, 2
  004f7	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  004fe	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00506	48 83 c0 04	 add	 rax, 4
  0050a	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00512	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  0051a	48 ff c0	 inc	 rax
  0051d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00525	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  0052c	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00533	0f 8d 8a 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  00539	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00540	83 c0 02	 add	 eax, 2
  00543	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  0054a	7d 0d		 jge	 SHORT $LN44@convert_yv
  0054c	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv245[rsp], 1
  00557	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  00559	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv245[rsp], 0
$LN45@convert_yv:
  00564	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv245[rsp]
  0056b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  00572	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0057a	48 98		 cdqe
  0057c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00584	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00588	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0058f	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005a1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005ac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b3	48 98		 cdqe
  005b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005c1	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005c8	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005d0	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005d7	48 98		 cdqe
  005d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005e1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005e5	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005ec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005f4	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005fb	48 98		 cdqe
  005fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00605	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00609	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00610	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00617	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  0061e	03 c8		 add	 ecx, eax
  00620	8b c1		 mov	 eax, ecx
  00622	48 98		 cdqe
  00624	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  0062c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00630	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00637	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0063f	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  00646	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0064a	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00651	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00659	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00660	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00664	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  0066b	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00673	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  0067a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0067e	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00685	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  0068d	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  00694	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00698	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  0069f	33 c0		 xor	 eax, eax
  006a1	83 f8 01	 cmp	 eax, 1
  006a4	74 46		 je	 SHORT $LN32@convert_yv
  006a6	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006ad	c1 e0 06	 shl	 eax, 6
  006b0	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006b7	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006be	c1 e0 06	 shl	 eax, 6
  006c1	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006c8	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006cf	c1 e0 06	 shl	 eax, 6
  006d2	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006d9	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006e0	c1 e0 06	 shl	 eax, 6
  006e3	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006ea	eb 4a		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006ec	33 c0		 xor	 eax, eax
  006ee	85 c0		 test	 eax, eax
  006f0	74 44		 je	 SHORT $LN34@convert_yv
  006f2	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006f9	c1 f8 fa	 sar	 eax, -6
  006fc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  00703	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  0070a	c1 f8 fa	 sar	 eax, -6
  0070d	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00714	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  0071b	c1 f8 fa	 sar	 eax, -6
  0071e	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00725	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  0072c	c1 f8 fa	 sar	 eax, -6
  0072f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00736	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0073b	48 98		 cdqe
  0073d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00745	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cy1x0$26[rsp]
  0074d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00751	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  00758	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  0075f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00763	d1 f8		 sar	 eax, 1
  00765	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  0076a	ff c1		 inc	 ecx
  0076c	48 63 c9	 movsxd	 rcx, ecx
  0076f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00777	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  0077b	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  0077f	48 98		 cdqe
  00781	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00789	0f b7 94 24 00
	01 00 00	 movzx	 edx, WORD PTR cy3x0$27[rsp]
  00791	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00795	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  0079c	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  007a3	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  007a7	d1 f8		 sar	 eax, 1
  007a9	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  007ad	ff c1		 inc	 ecx
  007af	48 63 c9	 movsxd	 rcx, ecx
  007b2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007ba	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 634  :                 }

  007be	e9 2a fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007c3	e9 e0 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007c8	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007cf	83 e8 02	 sub	 eax, 2
  007d2	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007d9	0f 8c e6 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007df	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007ea	eb 38		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007ec	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007f3	83 c0 02	 add	 eax, 2
  007f6	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  007fd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00805	48 83 c0 04	 add	 rax, 4
  00809	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00811	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00819	48 ff c0	 inc	 rax
  0081c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  00824	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  0082b	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  00832	0f 8d 88 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00838	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0083f	83 c0 02	 add	 eax, 2
  00842	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00849	7d 0d		 jge	 SHORT $LN46@convert_yv
  0084b	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv340[rsp], 1
  00856	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00858	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv340[rsp], 0
$LN47@convert_yv:
  00863	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv340[rsp]
  0086a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00871	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00879	48 98		 cdqe
  0087b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00883	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00887	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0088e	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00896	48 98		 cdqe
  00898	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008a0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008a4	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  008ab	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008b3	48 98		 cdqe
  008b5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008c1	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008c8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008d0	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008d7	48 98		 cdqe
  008d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008e1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008e5	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008ec	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008f4	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008fb	48 98		 cdqe
  008fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00905	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00909	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  00910	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00918	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  0091f	48 98		 cdqe
  00921	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00929	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0092d	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00934	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  0093c	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  00943	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00947	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0094e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00956	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  0095d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00961	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00968	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00970	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00977	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0097b	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00982	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0098a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  00991	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00995	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  0099c	33 c0		 xor	 eax, eax
  0099e	83 f8 01	 cmp	 eax, 1
  009a1	74 46		 je	 SHORT $LN37@convert_yv
  009a3	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009aa	c1 e0 06	 shl	 eax, 6
  009ad	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009b4	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009bb	c1 e0 06	 shl	 eax, 6
  009be	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009c5	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009cc	c1 e0 06	 shl	 eax, 6
  009cf	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009d6	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009dd	c1 e0 06	 shl	 eax, 6
  009e0	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009e7	eb 4a		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009e9	33 c0		 xor	 eax, eax
  009eb	85 c0		 test	 eax, eax
  009ed	74 44		 je	 SHORT $LN39@convert_yv
  009ef	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009f6	c1 f8 fa	 sar	 eax, -6
  009f9	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  00a00	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a07	c1 f8 fa	 sar	 eax, -6
  00a0a	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a11	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a18	c1 f8 fa	 sar	 eax, -6
  00a1b	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a22	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a29	c1 f8 fa	 sar	 eax, -6
  00a2c	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a33	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a38	48 98		 cdqe
  00a3a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a42	0f b7 94 24 2c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$38[rsp]
  00a4a	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a4e	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a55	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a5c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a60	d1 f8		 sar	 eax, 1
  00a62	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a67	ff c1		 inc	 ecx
  00a69	48 63 c9	 movsxd	 rcx, ecx
  00a6c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a74	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a78	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a7c	48 98		 cdqe
  00a7e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a86	0f b7 94 24 30
	01 00 00	 movzx	 edx, WORD PTR cy3x0$39[rsp]
  00a8e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a92	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a99	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00aa0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00aa4	d1 f8		 sar	 eax, 1
  00aa6	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00aaa	ff c1		 inc	 ecx
  00aac	48 63 c9	 movsxd	 rcx, ecx
  00aaf	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00ab7	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 655  :                 }

  00abb	e9 2c fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00ac0	e9 e3 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00ac5	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00ad0	eb 38		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00ad2	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00ad9	83 c0 02	 add	 eax, 2
  00adc	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00ae3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00aeb	48 83 c0 04	 add	 rax, 4
  00aef	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00af7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00aff	48 ff c0	 inc	 rax
  00b02	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00b0a	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00b11	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b18	0f 8d 8a 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b1e	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b25	83 c0 02	 add	 eax, 2
  00b28	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b2f	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b31	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv465[rsp], 1
  00b3c	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b3e	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv465[rsp], 0
$LN49@convert_yv:
  00b49	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv465[rsp]
  00b50	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b57	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b5f	48 98		 cdqe
  00b61	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b69	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b6d	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b74	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b7c	48 98		 cdqe
  00b7e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b86	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b8a	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b91	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b98	48 98		 cdqe
  00b9a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00ba2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00ba6	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00bad	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00bb5	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bbc	48 98		 cdqe
  00bbe	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bc6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00bca	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bd1	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bd9	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00be0	48 98		 cdqe
  00be2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00bee	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00bf5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00bfc	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00c03	03 c8		 add	 ecx, eax
  00c05	8b c1		 mov	 eax, ecx
  00c07	48 98		 cdqe
  00c09	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00c11	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00c15	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c1c	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c24	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c2b	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c2f	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c36	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c3e	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c45	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c49	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c50	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c58	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c5f	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c63	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c6a	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c72	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c79	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c7d	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c84	33 c0		 xor	 eax, eax
  00c86	83 f8 01	 cmp	 eax, 1
  00c89	74 46		 je	 SHORT $LN40@convert_yv
  00c8b	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c92	c1 e0 06	 shl	 eax, 6
  00c95	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00c9c	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00ca3	c1 e0 06	 shl	 eax, 6
  00ca6	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cad	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cb4	c1 e0 06	 shl	 eax, 6
  00cb7	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cbe	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00cc5	c1 e0 06	 shl	 eax, 6
  00cc8	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00ccf	eb 4a		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cd1	33 c0		 xor	 eax, eax
  00cd3	85 c0		 test	 eax, eax
  00cd5	74 44		 je	 SHORT $LN42@convert_yv
  00cd7	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cde	c1 f8 fa	 sar	 eax, -6
  00ce1	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00ce8	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cef	c1 f8 fa	 sar	 eax, -6
  00cf2	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00cf9	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00d00	c1 f8 fa	 sar	 eax, -6
  00d03	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00d0a	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00d11	c1 f8 fa	 sar	 eax, -6
  00d14	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d1b	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d20	48 98		 cdqe
  00d22	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d2a	0f b7 94 24 5c
	01 00 00	 movzx	 edx, WORD PTR cy1x0$50[rsp]
  00d32	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d36	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d3d	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d44	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d48	d1 f8		 sar	 eax, 1
  00d4a	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d4f	ff c1		 inc	 ecx
  00d51	48 63 c9	 movsxd	 rcx, ecx
  00d54	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d5c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d60	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d64	48 98		 cdqe
  00d66	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d6e	0f b7 94 24 60
	01 00 00	 movzx	 edx, WORD PTR cy3x0$51[rsp]
  00d76	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d7a	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d81	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d88	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d8c	d1 f8		 sar	 eax, 1
  00d8e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d92	ff c1		 inc	 ecx
  00d94	48 63 c9	 movsxd	 rcx, ecx
  00d97	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d9f	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 676  :                 }

  00da3	e9 2a fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00da8	e9 8f f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00dad	e9 ff f5 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00db2	48 8b cc	 mov	 rcx, rsp
  00db5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00dbc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00dc1	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00dc9	48 33 cc	 xor	 rcx, rsp
  00dcc	e8 00 00 00 00	 call	 __security_check_cookie
  00dd1	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00dd8	5f		 pop	 rdi
  00dd9	5e		 pop	 rsi
  00dda	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_16bit

; 785  : static void convert_yv12_p_to_yuv444_16bit(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 786  :     convert_yv12_p_to_yuv444_c<uint8_t, 8, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned short,16,0>

; 787  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_p_to_yuv444_16bit@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_16bit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
uv_fin$ = 164
src_uv_pitch$ = 168
ic$10 = 172
srcCLine$11 = 176
dstLine$12 = 184
y$13 = 192
dstC$14 = 200
srcP$15 = 208
x_fin$16 = 216
y_m2$17 = 220
y_m1$18 = 224
y_p1$19 = 228
y_p2$20 = 232
y_p3$21 = 236
sy0x0$22 = 240
sy1x0$23 = 244
sy2x0$24 = 248
sy3x0$25 = 252
sy4x0$26 = 256
sy5x0$27 = 260
cy0x0$28 = 264
cy1x0$29 = 268
cy2x0$30 = 272
cy3x0$31 = 276
x$32 = 280
cxplus$33 = 284
sy0x1$34 = 288
sy1x1$35 = 292
sy2x1$36 = 296
sy3x1$37 = 300
sy4x1$38 = 304
sy5x1$39 = 308
cy0x1$40 = 312
cy1x1$41 = 316
cy2x1$42 = 320
cy3x1$43 = 324
$T44 = 336
$T45 = 352
$T46 = 356
$T47 = 360
$T48 = 364
tv147 = 368
tv192 = 372
tv232 = 376
tv234 = 380
tv237 = 384
tv240 = 388
tv246 = 392
tv245 = 396
tv313 = 400
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>

; 683  : static void __forceinline convert_yv12_i_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 684  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 685  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 686  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 687  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 688  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 689  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 690  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 d8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 691  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b8	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 692  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000bc	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000c0	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c7	2b c8		 sub	 ecx, eax
  000c9	8b c1		 mov	 eax, ecx
  000cb	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d6	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000de	44 8b c0	 mov	 r8d, eax
  000e1	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000e5	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  000ed	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f2	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  000f7	48 8b f9	 mov	 rdi, rcx
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb
  00104	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00109	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 693  :     //Y成分のコピー
; 694  :     if (!uv_only) {

  0011b	33 c0		 xor	 eax, eax
  0011d	83 f8 01	 cmp	 eax, 1
  00120	0f 84 4d 02 00
	00		 je	 $LN17@convert_yv

; 695  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00126	b8 08 00 00 00	 mov	 eax, 8
  0012b	48 6b c0 00	 imul	 rax, rax, 0
  0012f	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00133	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00138	48 63 c9	 movsxd	 rcx, ecx
  0013b	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00143	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00147	48 03 c1	 add	 rax, rcx
  0014a	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0014f	48 03 c1	 add	 rax, rcx
  00152	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 696  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  0015a	b8 08 00 00 00	 mov	 eax, 8
  0015f	48 6b c0 00	 imul	 rax, rax, 0
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00167	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 697  :         const int y_width = width - crop_right - crop_left;

  00186	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0018a	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00191	2b c8		 sub	 ecx, eax
  00193	8b c1		 mov	 eax, ecx
  00195	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00199	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 698  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001a0	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001ab	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001ad	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001b4	ff c0		 inc	 eax
  001b6	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001bd	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ca	48 03 c8	 add	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001d8	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001dd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  001f3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001f7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001fe	0f 8d 6f 01 00
	00		 jge	 $LN3@convert_yv

; 699  :             if (in_bit_depth == out_bit_depth) {

  00204	33 c0		 xor	 eax, eax
  00206	83 f8 01	 cmp	 eax, 1
  00209	74 25		 je	 SHORT $LN18@convert_yv

; 700  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0020b	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00213	4c 8b c0	 mov	 r8, rax
  00216	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0021e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00226	e8 00 00 00 00	 call	 memcpy

; 701  :             } else {

  0022b	e9 3e 01 00 00	 jmp	 $LN19@convert_yv
$LN18@convert_yv:

; 702  :                 for (int x = 0; x < y_width; x++) {

  00230	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  0023b	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0023d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00244	ff c0		 inc	 eax
  00246	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yv:
  0024d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00254	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  0025b	0f 8d 0d 01 00
	00		 jge	 $LN6@convert_yv

; 703  :                     if (out_bit_depth > in_bit_depth) {

  00261	33 c0		 xor	 eax, eax
  00263	85 c0		 test	 eax, eax
  00265	74 6c		 je	 SHORT $LN20@convert_yv

; 704  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00267	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T45[rsp], 0
  00272	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T46[rsp], 0
  0027d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00285	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0028d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00291	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv147[rsp], eax
  00298	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  002a0	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  002a8	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ad	8b 00		 mov	 eax, DWORD PTR [rax]
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv147[rsp]
  002b9	d3 e0		 shl	 eax, cl
  002bb	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002c3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002cb	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002ce	e9 96 00 00 00	 jmp	 $LN21@convert_yv
$LN20@convert_yv:

; 705  :                     } else if (out_bit_depth < in_bit_depth) {

  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	74 69		 je	 SHORT $LN22@convert_yv

; 706  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002d9	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T47[rsp], 0
  002e4	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T48[rsp], 0
  002ef	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  002f7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002ff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00303	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  0030a	48 8d 94 24 68
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  00312	48 8d 8c 24 6c
	01 00 00	 lea	 rcx, QWORD PTR $T48[rsp]
  0031a	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0031f	8b 00		 mov	 eax, DWORD PTR [rax]
  00321	0f b6 c8	 movzx	 ecx, al
  00324	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  0032b	d3 f8		 sar	 eax, cl
  0032d	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00335	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0033d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 707  :                     } else {

  00340	eb 27		 jmp	 SHORT $LN23@convert_yv
$LN22@convert_yv:

; 708  :                         dstLine[x] = (Tout)srcYLine[x];

  00342	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0034a	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00352	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0035a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00362	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00366	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN23@convert_yv:
$LN21@convert_yv:

; 709  :                     }
; 710  :                 }

  00369	e9 cf fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN19@convert_yv:

; 711  :             }
; 712  :         }

  0036e	e9 3a fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN17@convert_yv:

; 713  :     }
; 714  :     //UV成分のコピー
; 715  :     const int uv_fin = height - crop_bottom;

  00373	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00377	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0037e	2b c8		 sub	 ecx, eax
  00380	8b c1		 mov	 eax, ecx
  00382	89 84 24 a4 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 716  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00389	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00390	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 717  :     for (int ic = 1; ic < 3; ic++) {

  00397	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$10[rsp], 1
  003a2	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003a4	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$10[rsp]
  003ab	ff c0		 inc	 eax
  003ad	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$10[rsp], eax
$LN10@convert_yv:
  003b4	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$10[rsp], 3
  003bc	0f 8d f4 07 00
	00		 jge	 $LN9@convert_yv

; 718  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003c2	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003ca	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003d1	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003d6	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003da	d1 f9		 sar	 ecx, 1
  003dc	48 63 c9	 movsxd	 rcx, ecx
  003df	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003e7	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  003eb	48 8b c1	 mov	 rax, rcx
  003ee	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax

; 719  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  003f6	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$10[rsp]
  003fe	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00402	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00407	48 63 c9	 movsxd	 rcx, ecx
  0040a	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00412	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00416	48 8b c1	 mov	 rax, rcx
  00419	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax

; 720  :         for (int y = 0; y < y_range.len; y += 4, srcCLine += src_uv_pitch * 2, dstLine += dst_y_pitch * 4) {

  00421	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$13[rsp], 0
  0042c	eb 51		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0042e	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$13[rsp]
  00435	83 c0 04	 add	 eax, 4
  00438	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$13[rsp], eax
  0043f	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00446	d1 e0		 shl	 eax, 1
  00448	48 98		 cdqe
  0044a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$11[rsp]
  00452	48 03 c8	 add	 rcx, rax
  00455	48 8b c1	 mov	 rax, rcx
  00458	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$11[rsp], rax
  00460	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00464	c1 e0 02	 shl	 eax, 2
  00467	48 98		 cdqe
  00469	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$12[rsp]
  00471	48 03 c8	 add	 rcx, rax
  00474	48 8b c1	 mov	 rax, rcx
  00477	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$12[rsp], rax
$LN13@convert_yv:
  0047f	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00483	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0048a	0f 8d 21 07 00
	00		 jge	 $LN12@convert_yv

; 721  :             Tout *dstC = dstLine;

  00490	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$12[rsp]
  00498	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax

; 722  :             Tin *srcP = srcCLine;

  004a0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$11[rsp]
  004a8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax

; 723  :             const int x_fin = width - crop_right - crop_left;

  004b0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004b4	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004bb	2b c8		 sub	 ecx, eax
  004bd	8b c1		 mov	 eax, ecx
  004bf	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004c3	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$16[rsp], eax

; 724  : 
; 725  :             int y_m2 = (y >= 4) ? -2 : 0;

  004ca	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR y$13[rsp], 4
  004d2	7c 0d		 jl	 SHORT $LN31@convert_yv
  004d4	c7 84 24 78 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR tv232[rsp], -2
  004df	eb 0b		 jmp	 SHORT $LN32@convert_yv
$LN31@convert_yv:
  004e1	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv232[rsp], 0
$LN32@convert_yv:
  004ec	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv232[rsp]
  004f3	89 84 24 dc 00
	00 00		 mov	 DWORD PTR y_m2$17[rsp], eax

; 726  :             int y_m1 = (y >= 2) ? -1 : 1;

  004fa	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR y$13[rsp], 2
  00502	7c 0d		 jl	 SHORT $LN33@convert_yv
  00504	c7 84 24 7c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv234[rsp], -1
  0050f	eb 0b		 jmp	 SHORT $LN34@convert_yv
$LN33@convert_yv:
  00511	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv234[rsp], 1
$LN34@convert_yv:
  0051c	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv234[rsp]
  00523	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y_m1$18[rsp], eax

; 727  :             int y_p1 = (y < uv_fin - 2) ? 1 : -1;

  0052a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  00531	83 e8 02	 sub	 eax, 2
  00534	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  0053b	7d 0d		 jge	 SHORT $LN35@convert_yv
  0053d	c7 84 24 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv237[rsp], 1
  00548	eb 0b		 jmp	 SHORT $LN36@convert_yv
$LN35@convert_yv:
  0054a	c7 84 24 80 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv237[rsp], -1
$LN36@convert_yv:
  00555	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv237[rsp]
  0055c	89 84 24 e4 00
	00 00		 mov	 DWORD PTR y_p1$19[rsp], eax

; 728  :             int y_p2 = (y < uv_fin - 4) ? 2 :  0;

  00563	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  0056a	83 e8 04	 sub	 eax, 4
  0056d	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  00574	7d 0d		 jge	 SHORT $LN37@convert_yv
  00576	c7 84 24 84 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv240[rsp], 2
  00581	eb 0b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  00583	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv240[rsp], 0
$LN38@convert_yv:
  0058e	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv240[rsp]
  00595	89 84 24 e8 00
	00 00		 mov	 DWORD PTR y_p2$20[rsp], eax

; 729  :             int y_p3 = (y < uv_fin - 6) ? 3 : ((y < uv_fin - 2) ? 1 : -1);

  0059c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005a3	83 e8 06	 sub	 eax, 6
  005a6	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005ad	7d 0d		 jge	 SHORT $LN41@convert_yv
  005af	c7 84 24 88 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv246[rsp], 3
  005ba	eb 39		 jmp	 SHORT $LN42@convert_yv
$LN41@convert_yv:
  005bc	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR uv_fin$[rsp]
  005c3	83 e8 02	 sub	 eax, 2
  005c6	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$13[rsp], eax
  005cd	7d 0d		 jge	 SHORT $LN39@convert_yv
  005cf	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv245[rsp], 1
  005da	eb 0b		 jmp	 SHORT $LN40@convert_yv
$LN39@convert_yv:
  005dc	c7 84 24 8c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv245[rsp], -1
$LN40@convert_yv:
  005e7	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv245[rsp]
  005ee	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv246[rsp], eax
$LN42@convert_yv:
  005f5	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  005fc	89 84 24 ec 00
	00 00		 mov	 DWORD PTR y_p3$21[rsp], eax

; 730  : 
; 731  :             int sy0x0 = srcP[y_m2*src_uv_pitch + 0];

  00603	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0060a	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00612	48 98		 cdqe
  00614	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0061c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00620	89 84 24 f0 00
	00 00		 mov	 DWORD PTR sy0x0$22[rsp], eax

; 732  :             int sy1x0 = srcP[y_m1*src_uv_pitch + 0];

  00627	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  0062e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00636	48 98		 cdqe
  00638	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00640	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00644	89 84 24 f4 00
	00 00		 mov	 DWORD PTR sy1x0$23[rsp], eax

; 733  :             int sy2x0 = srcP[   0*src_uv_pitch + 0];

  0064b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00653	48 98		 cdqe
  00655	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0065d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00661	89 84 24 f8 00
	00 00		 mov	 DWORD PTR sy2x0$24[rsp], eax

; 734  :             int sy3x0 = srcP[y_p1*src_uv_pitch + 0];

  00668	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  0066f	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00677	48 98		 cdqe
  00679	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00681	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00685	89 84 24 fc 00
	00 00		 mov	 DWORD PTR sy3x0$25[rsp], eax

; 735  :             int sy4x0 = srcP[y_p2*src_uv_pitch + 0];

  0068c	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00693	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0069b	48 98		 cdqe
  0069d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006a5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006a9	89 84 24 00 01
	00 00		 mov	 DWORD PTR sy4x0$26[rsp], eax

; 736  :             int sy5x0 = srcP[y_p3*src_uv_pitch + 0];

  006b0	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  006b7	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  006bf	48 98		 cdqe
  006c1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  006c9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006cd	89 84 24 04 01
	00 00		 mov	 DWORD PTR sy5x0$27[rsp], eax

; 737  : 
; 738  :             int cy0x0 = (sy0x0 * 1 + sy2x0 * 7 + 4);

  006d4	6b 84 24 f8 00
	00 00 07	 imul	 eax, DWORD PTR sy2x0$24[rsp], 7
  006dc	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR sy0x0$22[rsp]
  006e3	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  006e7	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 739  :             int cy1x0 = (sy1x0 * 3 + sy3x0 * 5 + 4);

  006ee	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR sy1x0$23[rsp], 3
  006f6	6b 8c 24 fc 00
	00 00 05	 imul	 ecx, DWORD PTR sy3x0$25[rsp], 5
  006fe	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00702	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 740  :             int cy2x0 = (sy2x0 * 5 + sy4x0 * 3 + 4);

  00709	6b 84 24 f8 00
	00 00 05	 imul	 eax, DWORD PTR sy2x0$24[rsp], 5
  00711	6b 8c 24 00 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x0$26[rsp], 3
  00719	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  0071d	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 741  :             int cy3x0 = (sy3x0 * 7 + sy5x0 * 1 + 4);

  00724	6b 84 24 fc 00
	00 00 07	 imul	 eax, DWORD PTR sy3x0$25[rsp], 7
  0072c	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR sy5x0$27[rsp]
  00733	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00737	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 742  :             CHANGE_BIT_DEPTH_4(cy0x0, cy1x0, cy2x0, cy3x0, 3);

  0073e	33 c0		 xor	 eax, eax
  00740	85 c0		 test	 eax, eax
  00742	74 46		 je	 SHORT $LN24@convert_yv
  00744	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  0074b	c1 e0 fd	 shl	 eax, -3
  0074e	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  00755	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  0075c	c1 e0 fd	 shl	 eax, -3
  0075f	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  00766	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  0076d	c1 e0 fd	 shl	 eax, -3
  00770	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  00777	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  0077e	c1 e0 fd	 shl	 eax, -3
  00781	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
  00788	eb 4b		 jmp	 SHORT $LN25@convert_yv
$LN24@convert_yv:
  0078a	33 c0		 xor	 eax, eax
  0078c	83 f8 01	 cmp	 eax, 1
  0078f	74 44		 je	 SHORT $LN26@convert_yv
  00791	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00798	c1 f8 03	 sar	 eax, 3
  0079b	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax
  007a2	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  007a9	c1 f8 03	 sar	 eax, 3
  007ac	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax
  007b3	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  007ba	c1 f8 03	 sar	 eax, 3
  007bd	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax
  007c4	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  007cb	c1 f8 03	 sar	 eax, 3
  007ce	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax
$LN26@convert_yv:
$LN25@convert_yv:

; 743  : 
; 744  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007d5	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$32[rsp], 0
  007e0	eb 38		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  007e2	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  007e9	83 c0 02	 add	 eax, 2
  007ec	89 84 24 18 01
	00 00		 mov	 DWORD PTR x$32[rsp], eax
  007f3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$14[rsp]
  007fb	48 83 c0 02	 add	 rax, 2
  007ff	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$14[rsp], rax
  00807	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$15[rsp]
  0080f	48 ff c0	 inc	 rax
  00812	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$15[rsp], rax
$LN16@convert_yv:
  0081a	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$16[rsp]
  00821	39 84 24 18 01
	00 00		 cmp	 DWORD PTR x$32[rsp], eax
  00828	0f 8d 7e 03 00
	00		 jge	 $LN15@convert_yv

; 745  :                 int cxplus = (x + 2 < x_fin);

  0082e	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR x$32[rsp]
  00835	83 c0 02	 add	 eax, 2
  00838	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$16[rsp]
  0083f	7d 0d		 jge	 SHORT $LN43@convert_yv
  00841	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv313[rsp], 1
  0084c	eb 0b		 jmp	 SHORT $LN44@convert_yv
$LN43@convert_yv:
  0084e	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv313[rsp], 0
$LN44@convert_yv:
  00859	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv313[rsp]
  00860	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cxplus$33[rsp], eax

; 746  :                 int sy0x1 = srcP[y_m2*src_uv_pitch + cxplus];

  00867	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR y_m2$17[rsp]
  0086e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00876	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0087d	48 98		 cdqe
  0087f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00887	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0088b	89 84 24 20 01
	00 00		 mov	 DWORD PTR sy0x1$34[rsp], eax

; 747  :                 int sy1x1 = srcP[y_m1*src_uv_pitch + cxplus];

  00892	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y_m1$18[rsp]
  00899	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008a1	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008a8	48 98		 cdqe
  008aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008b2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008b6	89 84 24 24 01
	00 00		 mov	 DWORD PTR sy1x1$35[rsp], eax

; 748  :                 int sy2x1 = srcP[   0*src_uv_pitch + cxplus];

  008bd	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008c5	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008cc	48 98		 cdqe
  008ce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  008d6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008da	89 84 24 28 01
	00 00		 mov	 DWORD PTR sy2x1$36[rsp], eax

; 749  :                 int sy3x1 = srcP[y_p1*src_uv_pitch + cxplus];

  008e1	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR y_p1$19[rsp]
  008e8	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  008f0	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  008f7	48 98		 cdqe
  008f9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00901	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00905	89 84 24 2c 01
	00 00		 mov	 DWORD PTR sy3x1$37[rsp], eax

; 750  :                 int sy4x1 = srcP[y_p2*src_uv_pitch + cxplus];

  0090c	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR y_p2$20[rsp]
  00913	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  0091b	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  00922	48 98		 cdqe
  00924	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  0092c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00930	89 84 24 30 01
	00 00		 mov	 DWORD PTR sy4x1$38[rsp], eax

; 751  :                 int sy5x1 = srcP[y_p3*src_uv_pitch + cxplus];

  00937	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR y_p3$21[rsp]
  0093e	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp]
  00946	03 84 24 1c 01
	00 00		 add	 eax, DWORD PTR cxplus$33[rsp]
  0094d	48 98		 cdqe
  0094f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$15[rsp]
  00957	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0095b	89 84 24 34 01
	00 00		 mov	 DWORD PTR sy5x1$39[rsp], eax

; 752  : 
; 753  :                 int cy0x1 = (sy0x1 * 1 + sy2x1 * 7 + 4);

  00962	6b 84 24 28 01
	00 00 07	 imul	 eax, DWORD PTR sy2x1$36[rsp], 7
  0096a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR sy0x1$34[rsp]
  00971	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00975	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax

; 754  :                 int cy1x1 = (sy1x1 * 3 + sy3x1 * 5 + 4);

  0097c	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR sy1x1$35[rsp], 3
  00984	6b 8c 24 2c 01
	00 00 05	 imul	 ecx, DWORD PTR sy3x1$37[rsp], 5
  0098c	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  00990	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax

; 755  :                 int cy2x1 = (sy2x1 * 5 + sy4x1 * 3 + 4);

  00997	6b 84 24 28 01
	00 00 05	 imul	 eax, DWORD PTR sy2x1$36[rsp], 5
  0099f	6b 8c 24 30 01
	00 00 03	 imul	 ecx, DWORD PTR sy4x1$38[rsp], 3
  009a7	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009ab	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax

; 756  :                 int cy3x1 = (sy3x1 * 7 + sy5x1 * 1 + 4);

  009b2	6b 84 24 2c 01
	00 00 07	 imul	 eax, DWORD PTR sy3x1$37[rsp], 7
  009ba	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR sy5x1$39[rsp]
  009c1	8d 44 08 04	 lea	 eax, DWORD PTR [rax+rcx+4]
  009c5	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax

; 757  :                 CHANGE_BIT_DEPTH_4(cy0x1, cy1x1, cy2x1, cy3x1, 3);

  009cc	33 c0		 xor	 eax, eax
  009ce	85 c0		 test	 eax, eax
  009d0	74 46		 je	 SHORT $LN27@convert_yv
  009d2	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  009d9	c1 e0 fd	 shl	 eax, -3
  009dc	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  009e3	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  009ea	c1 e0 fd	 shl	 eax, -3
  009ed	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  009f4	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  009fb	c1 e0 fd	 shl	 eax, -3
  009fe	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a05	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a0c	c1 e0 fd	 shl	 eax, -3
  00a0f	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
  00a16	eb 4b		 jmp	 SHORT $LN28@convert_yv
$LN27@convert_yv:
  00a18	33 c0		 xor	 eax, eax
  00a1a	83 f8 01	 cmp	 eax, 1
  00a1d	74 44		 je	 SHORT $LN29@convert_yv
  00a1f	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00a26	c1 f8 03	 sar	 eax, 3
  00a29	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy0x1$40[rsp], eax
  00a30	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00a37	c1 f8 03	 sar	 eax, 3
  00a3a	89 84 24 3c 01
	00 00		 mov	 DWORD PTR cy1x1$41[rsp], eax
  00a41	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00a48	c1 f8 03	 sar	 eax, 3
  00a4b	89 84 24 40 01
	00 00		 mov	 DWORD PTR cy2x1$42[rsp], eax
  00a52	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00a59	c1 f8 03	 sar	 eax, 3
  00a5c	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy3x1$43[rsp], eax
$LN29@convert_yv:
$LN28@convert_yv:

; 758  : 
; 759  :                 dstC[0*dst_y_pitch   + 0] = (Tout)cy0x0;

  00a63	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a68	48 98		 cdqe
  00a6a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00a72	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cy0x0$28[rsp]
  00a7a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 760  :                 dstC[0*dst_y_pitch   + 1] = (Tout)((cy0x0 + cy0x1 + 1) >> 1);

  00a7d	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy0x0$28[rsp]
  00a84	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$40[rsp]
  00a8b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a8f	d1 f8		 sar	 eax, 1
  00a91	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a96	ff c1		 inc	 ecx
  00a98	48 63 c9	 movsxd	 rcx, ecx
  00a9b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00aa3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 761  :                 dstC[1*dst_y_pitch   + 0] = (Tout)cy1x0;

  00aa6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00aaa	48 98		 cdqe
  00aac	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00ab4	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$29[rsp]
  00abc	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 762  :                 dstC[1*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00abf	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$29[rsp]
  00ac6	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$41[rsp]
  00acd	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00ad1	d1 f8		 sar	 eax, 1
  00ad3	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00ad7	ff c1		 inc	 ecx
  00ad9	48 63 c9	 movsxd	 rcx, ecx
  00adc	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00ae4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 763  :                 dstC[2*dst_y_pitch   + 0] = (Tout)cy2x0;

  00ae7	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00aeb	03 c0		 add	 eax, eax
  00aed	48 98		 cdqe
  00aef	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00af7	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cy2x0$30[rsp]
  00aff	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 764  :                 dstC[2*dst_y_pitch   + 1] = (Tout)((cy2x0 + cy2x1 + 1) >> 1);

  00b02	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cy2x0$30[rsp]
  00b09	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cy2x1$42[rsp]
  00b10	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b14	d1 f8		 sar	 eax, 1
  00b16	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00b1a	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00b1e	48 63 c9	 movsxd	 rcx, ecx
  00b21	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b29	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 765  :                 dstC[3*dst_y_pitch   + 0] = (Tout)cy3x0;

  00b2c	6b 44 24 44 03	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 3
  00b31	48 98		 cdqe
  00b33	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$14[rsp]
  00b3b	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$31[rsp]
  00b43	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 766  :                 dstC[3*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00b46	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cy3x0$31[rsp]
  00b4d	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$43[rsp]
  00b54	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00b58	d1 f8		 sar	 eax, 1
  00b5a	6b 4c 24 44 03	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 3
  00b5f	ff c1		 inc	 ecx
  00b61	48 63 c9	 movsxd	 rcx, ecx
  00b64	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$14[rsp]
  00b6c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 767  : 
; 768  :                 cy0x0 = cy0x1;

  00b6f	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy0x1$40[rsp]
  00b76	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy0x0$28[rsp], eax

; 769  :                 cy1x0 = cy1x1;

  00b7d	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR cy1x1$41[rsp]
  00b84	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cy1x0$29[rsp], eax

; 770  :                 cy2x0 = cy2x1;

  00b8b	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR cy2x1$42[rsp]
  00b92	89 84 24 10 01
	00 00		 mov	 DWORD PTR cy2x0$30[rsp], eax

; 771  :                 cy3x0 = cy3x1;

  00b99	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR cy3x1$43[rsp]
  00ba0	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy3x0$31[rsp], eax

; 772  :             }

  00ba7	e9 36 fc ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 773  :         }

  00bac	e9 7d f8 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 774  :     }

  00bb1	e9 ee f7 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 775  : }

  00bb6	48 8b cc	 mov	 rcx, rsp
  00bb9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00bc0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00bc5	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bcd	48 33 cc	 xor	 rcx, rsp
  00bd0	e8 00 00 00 00	 call	 __security_check_cookie
  00bd5	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00bdc	5f		 pop	 rdi
  00bdd	5e		 pop	 rsi
  00bde	c3		 ret	 0
??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_i_to_yuv444

; 781  : static void convert_yv12_i_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 782  :     convert_yv12_i_to_yuv444_c<uint8_t, 8, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_i_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_i_to_yuv444_c<unsigned char,8,unsigned char,8,0>

; 783  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_i_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_i_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_fin$7 = 152
y_width$8 = 156
y$9 = 160
x$10 = 164
src_uv_pitch$ = 168
ic$11 = 172
srcCLine$12 = 176
dstLine$13 = 184
y$14 = 192
dstC$15 = 200
srcP$16 = 208
x_fin$17 = 216
x$18 = 220
cxplus$19 = 224
cy0x0$20 = 228
cy2x0$21 = 232
cy4x0$22 = 236
cy0x1$23 = 240
cy2x1$24 = 244
cy4x1$25 = 248
cy1x0$26 = 252
cy3x0$27 = 256
cy1x1$28 = 260
cy3x1$29 = 264
x$30 = 268
cxplus$31 = 272
cy0x0$32 = 276
cy2x0$33 = 280
cy4x0$34 = 284
cy0x1$35 = 288
cy2x1$36 = 292
cy4x1$37 = 296
cy1x0$38 = 300
cy3x0$39 = 304
cy1x1$40 = 308
cy3x1$41 = 312
x$42 = 316
cxplus$43 = 320
cy0x0$44 = 324
cy2x0$45 = 328
cy4x0$46 = 332
cy0x1$47 = 336
cy2x1$48 = 340
cy4x1$49 = 344
cy1x0$50 = 348
cy3x0$51 = 352
cy1x1$52 = 356
cy3x1$53 = 360
$T54 = 376
$T55 = 392
$T56 = 396
$T57 = 400
$T58 = 404
tv148 = 408
tv193 = 412
tv237 = 416
tv332 = 420
tv457 = 424
__$ArrayPad$ = 432
dst$ = 480
src$ = 488
width$ = 496
src_y_pitch_byte$ = 504
src_uv_pitch_byte$ = 512
dst_y_pitch_byte$ = 520
height$ = 528
dst_height$ = 536
thread_id$ = 544
thread_n$ = 552
crop$ = 560
??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>

; 573  : static void __forceinline convert_yv12_p_to_yuv444_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 574  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 575  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 576  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 577  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 578  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 579  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 580  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 f8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 581  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b8	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 582  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000bc	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000c0	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c7	2b c8		 sub	 ecx, eax
  000c9	8b c1		 mov	 eax, ecx
  000cb	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d6	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000de	44 8b c0	 mov	 r8d, eax
  000e1	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000e5	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T54[rsp]
  000ed	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f2	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  000f7	48 8b f9	 mov	 rdi, rcx
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb
  00104	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00109	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 583  :     //Y成分のコピー
; 584  :     if (!uv_only) {

  0011b	33 c0		 xor	 eax, eax
  0011d	83 f8 01	 cmp	 eax, 1
  00120	0f 84 63 02 00
	00		 je	 $LN23@convert_yv

; 585  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00126	b8 08 00 00 00	 mov	 eax, 8
  0012b	48 6b c0 00	 imul	 rax, rax, 0
  0012f	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00133	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00138	48 63 c9	 movsxd	 rcx, ecx
  0013b	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00143	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00147	48 03 c1	 add	 rax, rcx
  0014a	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0014f	48 03 c1	 add	 rax, rcx
  00152	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 586  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  0015a	b8 08 00 00 00	 mov	 eax, 8
  0015f	48 6b c0 00	 imul	 rax, rax, 0
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00167	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 587  :         const int y_fin = height - crop_bottom;

  00186	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  0018a	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00191	2b c8		 sub	 ecx, eax
  00193	8b c1		 mov	 eax, ecx
  00195	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_fin$7[rsp], eax

; 588  :         const int y_width = width - crop_right - crop_left;

  0019c	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a0	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001a7	2b c8		 sub	 ecx, eax
  001a9	8b c1		 mov	 eax, ecx
  001ab	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001af	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 589  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b6	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001c1	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  001c3	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001ca	ff c0		 inc	 eax
  001cc	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001d3	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001d8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e0	48 03 c8	 add	 rcx, rax
  001e3	48 8b c1	 mov	 rax, rcx
  001e6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ee	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fb	48 03 c8	 add	 rcx, rax
  001fe	48 8b c1	 mov	 rax, rcx
  00201	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yv:
  00209	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020d	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00214	0f 8d 6f 01 00
	00		 jge	 $LN3@convert_yv

; 590  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0021a	33 c0		 xor	 eax, eax
  0021c	83 f8 01	 cmp	 eax, 1
  0021f	74 25		 je	 SHORT $LN24@convert_yv

; 591  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00221	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR y_width$8[rsp]
  00229	4c 8b c0	 mov	 r8, rax
  0022c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00234	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023c	e8 00 00 00 00	 call	 memcpy

; 592  :             } else {

  00241	e9 3e 01 00 00	 jmp	 $LN25@convert_yv
$LN24@convert_yv:

; 593  :                 for (int x = 0; x < y_width; x++) {

  00246	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00251	eb 10		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00253	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  0025a	ff c0		 inc	 eax
  0025c	89 84 24 a4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
$LN7@convert_yv:
  00263	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y_width$8[rsp]
  0026a	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00271	0f 8d 0d 01 00
	00		 jge	 $LN6@convert_yv

; 594  :                     if (out_bit_depth > in_bit_depth) {

  00277	33 c0		 xor	 eax, eax
  00279	85 c0		 test	 eax, eax
  0027b	74 6c		 je	 SHORT $LN26@convert_yv

; 595  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027d	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T55[rsp], 0
  00288	c7 84 24 8c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T56[rsp], 0
  00293	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0029b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002a7	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv148[rsp], eax
  002ae	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR $T55[rsp]
  002b6	48 8d 8c 24 8c
	01 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  002be	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c3	8b 00		 mov	 eax, DWORD PTR [rax]
  002c5	0f b6 c8	 movzx	 ecx, al
  002c8	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv148[rsp]
  002cf	d3 e0		 shl	 eax, cl
  002d1	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  002d9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e1	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002e4	e9 96 00 00 00	 jmp	 $LN27@convert_yv
$LN26@convert_yv:

; 596  :                     } else if (out_bit_depth < in_bit_depth) {

  002e9	33 c0		 xor	 eax, eax
  002eb	85 c0		 test	 eax, eax
  002ed	74 69		 je	 SHORT $LN28@convert_yv

; 597  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002ef	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T57[rsp], 0
  002fa	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T58[rsp], 0
  00305	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  0030d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00315	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00319	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv193[rsp], eax
  00320	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T57[rsp]
  00328	48 8d 8c 24 94
	01 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  00330	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00335	8b 00		 mov	 eax, DWORD PTR [rax]
  00337	0f b6 c8	 movzx	 ecx, al
  0033a	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv193[rsp]
  00341	d3 f8		 sar	 eax, cl
  00343	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  0034b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00353	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 598  :                     } else {

  00356	eb 27		 jmp	 SHORT $LN29@convert_yv
$LN28@convert_yv:

; 599  :                         dstLine[x] = (Tout)srcYLine[x];

  00358	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR x$10[rsp]
  00360	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR x$10[rsp]
  00368	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00370	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00378	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0037c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN29@convert_yv:
$LN27@convert_yv:

; 600  :                     }
; 601  :                 }

  0037f	e9 cf fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN25@convert_yv:

; 602  :             }
; 603  :         }

  00384	e9 3a fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN23@convert_yv:

; 604  :     }
; 605  :     //UV成分のコピー
; 606  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00389	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00390	89 84 24 a8 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 607  :     for (int ic = 1; ic < 3; ic++) {

  00397	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$11[rsp], 1
  003a2	eb 10		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003a4	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ic$11[rsp]
  003ab	ff c0		 inc	 eax
  003ad	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ic$11[rsp], eax
$LN10@convert_yv:
  003b4	83 bc 24 ac 00
	00 00 03	 cmp	 DWORD PTR ic$11[rsp], 3
  003bc	0f 8d d8 09 00
	00		 jge	 $LN9@convert_yv

; 608  :         Tin *srcCLine = (Tin *)src[ic] + (((src_uv_pitch * y_range.start_src) + crop_left) >> 1);

  003c2	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003ca	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003d1	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003d6	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003da	d1 f9		 sar	 ecx, 1
  003dc	48 63 c9	 movsxd	 rcx, ecx
  003df	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003e7	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  003eb	48 8b c1	 mov	 rax, rcx
  003ee	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax

; 609  :         Tout *dstLine = (Tout *)dst[ic] + dst_y_pitch * y_range.start_dst;

  003f6	48 63 84 24 ac
	00 00 00	 movsxd	 rax, DWORD PTR ic$11[rsp]
  003fe	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00402	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00407	48 63 c9	 movsxd	 rcx, ecx
  0040a	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00412	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00416	48 8b c1	 mov	 rax, rcx
  00419	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax

; 610  :         for (int y = 0; y < y_range.len; y += 2, srcCLine += src_uv_pitch, dstLine += dst_y_pitch * 2) {

  00421	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$14[rsp], 0
  0042c	eb 4d		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0042e	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$14[rsp]
  00435	83 c0 02	 add	 eax, 2
  00438	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$14[rsp], eax
  0043f	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch$[rsp]
  00447	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$12[rsp]
  0044f	48 03 c8	 add	 rcx, rax
  00452	48 8b c1	 mov	 rax, rcx
  00455	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcCLine$12[rsp], rax
  0045d	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00461	d1 e0		 shl	 eax, 1
  00463	48 98		 cdqe
  00465	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$13[rsp]
  0046d	48 03 c8	 add	 rcx, rax
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$13[rsp], rax
$LN13@convert_yv:
  0047b	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0047f	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  00486	0f 8d 09 09 00
	00		 jge	 $LN12@convert_yv

; 611  :             Tout *dstC = dstLine;

  0048c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$13[rsp]
  00494	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax

; 612  :             Tin *srcP = srcCLine;

  0049c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcCLine$12[rsp]
  004a4	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax

; 613  :             const int x_fin = width - crop_right - crop_left;

  004ac	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004b0	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004b7	2b c8		 sub	 ecx, eax
  004b9	8b c1		 mov	 eax, ecx
  004bb	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004bf	89 84 24 d8 00
	00 00		 mov	 DWORD PTR x_fin$17[rsp], eax

; 614  :             if (y == 0) {

  004c6	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR y$14[rsp], 0
  004ce	0f 85 e4 02 00
	00		 jne	 $LN30@convert_yv

; 615  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  004d4	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$18[rsp], 0
  004df	eb 38		 jmp	 SHORT $LN16@convert_yv
$LN14@convert_yv:
  004e1	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  004e8	83 c0 02	 add	 eax, 2
  004eb	89 84 24 dc 00
	00 00		 mov	 DWORD PTR x$18[rsp], eax
  004f2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  004fa	48 83 c0 02	 add	 rax, 2
  004fe	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00506	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  0050e	48 ff c0	 inc	 rax
  00511	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN16@convert_yv:
  00519	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00520	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR x$18[rsp], eax
  00527	0f 8d 86 02 00
	00		 jge	 $LN15@convert_yv

; 616  :                     int cxplus = (x + 2 < x_fin);

  0052d	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR x$18[rsp]
  00534	83 c0 02	 add	 eax, 2
  00537	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  0053e	7d 0d		 jge	 SHORT $LN44@convert_yv
  00540	c7 84 24 a0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv237[rsp], 1
  0054b	eb 0b		 jmp	 SHORT $LN45@convert_yv
$LN44@convert_yv:
  0054d	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv237[rsp], 0
$LN45@convert_yv:
  00558	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv237[rsp]
  0055f	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cxplus$19[rsp], eax

; 617  :                     int cy0x0 = srcP[ 0*src_uv_pitch + 0];

  00566	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0056e	48 98		 cdqe
  00570	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00578	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0057c	89 84 24 e4 00
	00 00		 mov	 DWORD PTR cy0x0$20[rsp], eax

; 618  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00583	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0058b	48 98		 cdqe
  0058d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00595	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00599	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy2x0$21[rsp], eax

; 619  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  005a0	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005a7	48 98		 cdqe
  005a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005b1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005b5	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy4x0$22[rsp], eax

; 620  :                     int cy0x1 = srcP[ 0*src_uv_pitch + cxplus];

  005bc	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c4	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005cb	48 98		 cdqe
  005cd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005d5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005d9	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy0x1$23[rsp], eax

; 621  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  005e0	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005e8	03 84 24 e0 00
	00 00		 add	 eax, DWORD PTR cxplus$19[rsp]
  005ef	48 98		 cdqe
  005f1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  005f9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005fd	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy2x1$24[rsp], eax

; 622  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00604	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0060b	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR cxplus$19[rsp]
  00612	03 c8		 add	 ecx, eax
  00614	8b c1		 mov	 eax, ecx
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00620	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy4x1$25[rsp], eax

; 623  : 
; 624  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  0062b	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  00633	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR cy0x0$20[rsp]
  0063a	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0063e	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax

; 625  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00645	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy2x0$21[rsp], 3
  0064d	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR cy4x0$22[rsp]
  00654	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00658	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax

; 626  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  0065f	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00667	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy0x1$23[rsp]
  0066e	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00672	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax

; 627  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00679	6b 84 24 f4 00
	00 00 03	 imul	 eax, DWORD PTR cy2x1$24[rsp], 3
  00681	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy4x1$25[rsp]
  00688	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax

; 628  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	74 46		 je	 SHORT $LN32@convert_yv
  00699	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006a0	c1 e0 fe	 shl	 eax, -2
  006a3	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006aa	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006b1	c1 e0 fe	 shl	 eax, -2
  006b4	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  006bb	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  006c2	c1 e0 fe	 shl	 eax, -2
  006c5	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  006cc	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  006d3	c1 e0 fe	 shl	 eax, -2
  006d6	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
  006dd	eb 4b		 jmp	 SHORT $LN33@convert_yv
$LN32@convert_yv:
  006df	33 c0		 xor	 eax, eax
  006e1	83 f8 01	 cmp	 eax, 1
  006e4	74 44		 je	 SHORT $LN34@convert_yv
  006e6	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  006ed	c1 f8 02	 sar	 eax, 2
  006f0	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy1x0$26[rsp], eax
  006f7	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  006fe	c1 f8 02	 sar	 eax, 2
  00701	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3x0$27[rsp], eax
  00708	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR cy1x1$28[rsp]
  0070f	c1 f8 02	 sar	 eax, 2
  00712	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy1x1$28[rsp], eax
  00719	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cy3x1$29[rsp]
  00720	c1 f8 02	 sar	 eax, 2
  00723	89 84 24 08 01
	00 00		 mov	 DWORD PTR cy3x1$29[rsp], eax
$LN34@convert_yv:
$LN33@convert_yv:

; 629  : 
; 630  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  0072a	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0072f	48 98		 cdqe
  00731	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00739	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$26[rsp]
  00741	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 631  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00744	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$26[rsp]
  0074b	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$28[rsp]
  00752	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00756	d1 f8		 sar	 eax, 1
  00758	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  0075d	ff c1		 inc	 ecx
  0075f	48 63 c9	 movsxd	 rcx, ecx
  00762	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  0076a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 632  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  0076d	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00771	48 98		 cdqe
  00773	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  0077b	0f b6 94 24 00
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$27[rsp]
  00783	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 633  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00786	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR cy3x0$27[rsp]
  0078d	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$29[rsp]
  00794	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00798	d1 f8		 sar	 eax, 1
  0079a	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0079e	ff c1		 inc	 ecx
  007a0	48 63 c9	 movsxd	 rcx, ecx
  007a3	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  007ab	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 634  :                 }

  007ae	e9 2e fd ff ff	 jmp	 $LN14@convert_yv
$LN15@convert_yv:

; 635  :             } else if (y >= height-2) {

  007b3	e9 d8 05 00 00	 jmp	 $LN31@convert_yv
$LN30@convert_yv:
  007b8	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  007bf	83 e8 02	 sub	 eax, 2
  007c2	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$14[rsp], eax
  007c9	0f 8c e2 02 00
	00		 jl	 $LN35@convert_yv

; 636  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  007cf	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$30[rsp], 0
  007da	eb 38		 jmp	 SHORT $LN19@convert_yv
$LN17@convert_yv:
  007dc	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  007e3	83 c0 02	 add	 eax, 2
  007e6	89 84 24 0c 01
	00 00		 mov	 DWORD PTR x$30[rsp], eax
  007ed	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  007f5	48 83 c0 02	 add	 rax, 2
  007f9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00801	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00809	48 ff c0	 inc	 rax
  0080c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN19@convert_yv:
  00814	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  0081b	39 84 24 0c 01
	00 00		 cmp	 DWORD PTR x$30[rsp], eax
  00822	0f 8d 84 02 00
	00		 jge	 $LN18@convert_yv

; 637  :                     int cxplus = (x + 2 < x_fin);

  00828	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR x$30[rsp]
  0082f	83 c0 02	 add	 eax, 2
  00832	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00839	7d 0d		 jge	 SHORT $LN46@convert_yv
  0083b	c7 84 24 a4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv332[rsp], 1
  00846	eb 0b		 jmp	 SHORT $LN47@convert_yv
$LN46@convert_yv:
  00848	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv332[rsp], 0
$LN47@convert_yv:
  00853	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  0085a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cxplus$31[rsp], eax

; 638  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00861	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00869	48 98		 cdqe
  0086b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00873	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00877	89 84 24 14 01
	00 00		 mov	 DWORD PTR cy0x0$32[rsp], eax

; 639  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  0087e	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00886	48 98		 cdqe
  00888	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00890	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00894	89 84 24 18 01
	00 00		 mov	 DWORD PTR cy2x0$33[rsp], eax

; 640  :                     int cy4x0 = srcP[ 0*src_uv_pitch + 0];

  0089b	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008a3	48 98		 cdqe
  008a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008ad	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008b1	89 84 24 1c 01
	00 00		 mov	 DWORD PTR cy4x0$34[rsp], eax

; 641  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  008b8	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  008c0	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008c7	48 98		 cdqe
  008c9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008d1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008d5	89 84 24 20 01
	00 00		 mov	 DWORD PTR cy0x1$35[rsp], eax

; 642  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  008dc	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  008e4	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  008eb	48 98		 cdqe
  008ed	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  008f5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008f9	89 84 24 24 01
	00 00		 mov	 DWORD PTR cy2x1$36[rsp], eax

; 643  :                     int cy4x1 = srcP[ 0*src_uv_pitch + cxplus];

  00900	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00908	03 84 24 10 01
	00 00		 add	 eax, DWORD PTR cxplus$31[rsp]
  0090f	48 98		 cdqe
  00911	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00919	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0091d	89 84 24 28 01
	00 00		 mov	 DWORD PTR cy4x1$37[rsp], eax

; 644  : 
; 645  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00924	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  0092c	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$32[rsp]
  00933	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00937	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax

; 646  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  0093e	6b 84 24 18 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$33[rsp], 3
  00946	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$34[rsp]
  0094d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00951	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax

; 647  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00958	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  00960	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$35[rsp]
  00967	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0096b	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax

; 648  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00972	6b 84 24 24 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$36[rsp], 3
  0097a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$37[rsp]
  00981	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00985	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax

; 649  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  0098c	33 c0		 xor	 eax, eax
  0098e	85 c0		 test	 eax, eax
  00990	74 46		 je	 SHORT $LN37@convert_yv
  00992	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00999	c1 e0 fe	 shl	 eax, -2
  0099c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009a3	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009aa	c1 e0 fe	 shl	 eax, -2
  009ad	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  009b4	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  009bb	c1 e0 fe	 shl	 eax, -2
  009be	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  009c5	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  009cc	c1 e0 fe	 shl	 eax, -2
  009cf	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
  009d6	eb 4b		 jmp	 SHORT $LN38@convert_yv
$LN37@convert_yv:
  009d8	33 c0		 xor	 eax, eax
  009da	83 f8 01	 cmp	 eax, 1
  009dd	74 44		 je	 SHORT $LN39@convert_yv
  009df	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  009e6	c1 f8 02	 sar	 eax, 2
  009e9	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cy1x0$38[rsp], eax
  009f0	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  009f7	c1 f8 02	 sar	 eax, 2
  009fa	89 84 24 30 01
	00 00		 mov	 DWORD PTR cy3x0$39[rsp], eax
  00a01	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR cy1x1$40[rsp]
  00a08	c1 f8 02	 sar	 eax, 2
  00a0b	89 84 24 34 01
	00 00		 mov	 DWORD PTR cy1x1$40[rsp], eax
  00a12	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cy3x1$41[rsp]
  00a19	c1 f8 02	 sar	 eax, 2
  00a1c	89 84 24 38 01
	00 00		 mov	 DWORD PTR cy3x1$41[rsp], eax
$LN39@convert_yv:
$LN38@convert_yv:

; 650  : 
; 651  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00a23	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00a28	48 98		 cdqe
  00a2a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a32	0f b6 94 24 2c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$38[rsp]
  00a3a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 652  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00a3d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$38[rsp]
  00a44	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$40[rsp]
  00a4b	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a4f	d1 f8		 sar	 eax, 1
  00a51	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00a56	ff c1		 inc	 ecx
  00a58	48 63 c9	 movsxd	 rcx, ecx
  00a5b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00a63	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 653  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00a66	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00a6a	48 98		 cdqe
  00a6c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00a74	0f b6 94 24 30
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$39[rsp]
  00a7c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 654  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00a7f	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR cy3x0$39[rsp]
  00a86	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$41[rsp]
  00a8d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00a91	d1 f8		 sar	 eax, 1
  00a93	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00a97	ff c1		 inc	 ecx
  00a99	48 63 c9	 movsxd	 rcx, ecx
  00a9c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00aa4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 655  :                 }

  00aa7	e9 30 fd ff ff	 jmp	 $LN17@convert_yv
$LN18@convert_yv:

; 656  :             } else {

  00aac	e9 df 02 00 00	 jmp	 $LN36@convert_yv
$LN35@convert_yv:

; 657  :                 for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00ab1	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$42[rsp], 0
  00abc	eb 38		 jmp	 SHORT $LN22@convert_yv
$LN20@convert_yv:
  00abe	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00ac5	83 c0 02	 add	 eax, 2
  00ac8	89 84 24 3c 01
	00 00		 mov	 DWORD PTR x$42[rsp], eax
  00acf	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$15[rsp]
  00ad7	48 83 c0 02	 add	 rax, 2
  00adb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$15[rsp], rax
  00ae3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcP$16[rsp]
  00aeb	48 ff c0	 inc	 rax
  00aee	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcP$16[rsp], rax
$LN22@convert_yv:
  00af6	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR x_fin$17[rsp]
  00afd	39 84 24 3c 01
	00 00		 cmp	 DWORD PTR x$42[rsp], eax
  00b04	0f 8d 86 02 00
	00		 jge	 $LN21@convert_yv

; 658  :                     int cxplus = (x + 2 < x_fin);

  00b0a	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR x$42[rsp]
  00b11	83 c0 02	 add	 eax, 2
  00b14	3b 84 24 d8 00
	00 00		 cmp	 eax, DWORD PTR x_fin$17[rsp]
  00b1b	7d 0d		 jge	 SHORT $LN48@convert_yv
  00b1d	c7 84 24 a8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv457[rsp], 1
  00b28	eb 0b		 jmp	 SHORT $LN49@convert_yv
$LN48@convert_yv:
  00b2a	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv457[rsp], 0
$LN49@convert_yv:
  00b35	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv457[rsp]
  00b3c	89 84 24 40 01
	00 00		 mov	 DWORD PTR cxplus$43[rsp], eax

; 659  :                     int cy0x0 = srcP[-1*src_uv_pitch + 0];

  00b43	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00b4b	48 98		 cdqe
  00b4d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b55	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b59	89 84 24 44 01
	00 00		 mov	 DWORD PTR cy0x0$44[rsp], eax

; 660  :                     int cy2x0 = srcP[ 0*src_uv_pitch + 0];

  00b60	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00b68	48 98		 cdqe
  00b6a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b72	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b76	89 84 24 48 01
	00 00		 mov	 DWORD PTR cy2x0$45[rsp], eax

; 661  :                     int cy4x0 = srcP[ 1*src_uv_pitch + 0];

  00b7d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00b84	48 98		 cdqe
  00b86	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00b8e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b92	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cy4x0$46[rsp], eax

; 662  :                     int cy0x1 = srcP[-1*src_uv_pitch + cxplus];

  00b99	6b 84 24 a8 00
	00 00 ff	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], -1
  00ba1	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00ba8	48 98		 cdqe
  00baa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bb2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00bb6	89 84 24 50 01
	00 00		 mov	 DWORD PTR cy0x1$47[rsp], eax

; 663  :                     int cy2x1 = srcP[ 0*src_uv_pitch + cxplus];

  00bbd	6b 84 24 a8 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00bc5	03 84 24 40 01
	00 00		 add	 eax, DWORD PTR cxplus$43[rsp]
  00bcc	48 98		 cdqe
  00bce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bd6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00bda	89 84 24 54 01
	00 00		 mov	 DWORD PTR cy2x1$48[rsp], eax

; 664  :                     int cy4x1 = srcP[ 1*src_uv_pitch + cxplus];

  00be1	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00be8	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR cxplus$43[rsp]
  00bef	03 c8		 add	 ecx, eax
  00bf1	8b c1		 mov	 eax, ecx
  00bf3	48 98		 cdqe
  00bf5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcP$16[rsp]
  00bfd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00c01	89 84 24 58 01
	00 00		 mov	 DWORD PTR cy4x1$49[rsp], eax

; 665  : 
; 666  :                     int cy1x0 = (cy0x0 * 1 + cy2x0 * 3 + 2);

  00c08	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c10	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR cy0x0$44[rsp]
  00c17	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c1b	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax

; 667  :                     int cy3x0 = (cy2x0 * 3 + cy4x0 * 1 + 2);

  00c22	6b 84 24 48 01
	00 00 03	 imul	 eax, DWORD PTR cy2x0$45[rsp], 3
  00c2a	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR cy4x0$46[rsp]
  00c31	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c35	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax

; 668  :                     int cy1x1 = (cy0x1 * 1 + cy2x1 * 3 + 2);

  00c3c	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c44	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR cy0x1$47[rsp]
  00c4b	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00c4f	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax

; 669  :                     int cy3x1 = (cy2x1 * 3 + cy4x1 * 1 + 2);

  00c56	6b 84 24 54 01
	00 00 03	 imul	 eax, DWORD PTR cy2x1$48[rsp], 3
  00c5e	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR cy4x1$49[rsp]
  00c65	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00c69	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax

; 670  :                     CHANGE_BIT_DEPTH_4(cy1x0, cy3x0, cy1x1, cy3x1, 2);

  00c70	33 c0		 xor	 eax, eax
  00c72	85 c0		 test	 eax, eax
  00c74	74 46		 je	 SHORT $LN40@convert_yv
  00c76	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00c7d	c1 e0 fe	 shl	 eax, -2
  00c80	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00c87	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00c8e	c1 e0 fe	 shl	 eax, -2
  00c91	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00c98	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00c9f	c1 e0 fe	 shl	 eax, -2
  00ca2	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00ca9	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00cb0	c1 e0 fe	 shl	 eax, -2
  00cb3	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
  00cba	eb 4b		 jmp	 SHORT $LN41@convert_yv
$LN40@convert_yv:
  00cbc	33 c0		 xor	 eax, eax
  00cbe	83 f8 01	 cmp	 eax, 1
  00cc1	74 44		 je	 SHORT $LN42@convert_yv
  00cc3	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00cca	c1 f8 02	 sar	 eax, 2
  00ccd	89 84 24 5c 01
	00 00		 mov	 DWORD PTR cy1x0$50[rsp], eax
  00cd4	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00cdb	c1 f8 02	 sar	 eax, 2
  00cde	89 84 24 60 01
	00 00		 mov	 DWORD PTR cy3x0$51[rsp], eax
  00ce5	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR cy1x1$52[rsp]
  00cec	c1 f8 02	 sar	 eax, 2
  00cef	89 84 24 64 01
	00 00		 mov	 DWORD PTR cy1x1$52[rsp], eax
  00cf6	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR cy3x1$53[rsp]
  00cfd	c1 f8 02	 sar	 eax, 2
  00d00	89 84 24 68 01
	00 00		 mov	 DWORD PTR cy3x1$53[rsp], eax
$LN42@convert_yv:
$LN41@convert_yv:

; 671  : 
; 672  :                     dstC[0*dst_y_pitch   + 0] = (Tout)cy1x0;

  00d07	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00d0c	48 98		 cdqe
  00d0e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d16	0f b6 94 24 5c
	01 00 00	 movzx	 edx, BYTE PTR cy1x0$50[rsp]
  00d1e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 673  :                     dstC[0*dst_y_pitch   + 1] = (Tout)((cy1x0 + cy1x1 + 1) >> 1);

  00d21	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR cy1x0$50[rsp]
  00d28	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR cy1x1$52[rsp]
  00d2f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d33	d1 f8		 sar	 eax, 1
  00d35	6b 4c 24 44 00	 imul	 ecx, DWORD PTR dst_y_pitch$[rsp], 0
  00d3a	ff c1		 inc	 ecx
  00d3c	48 63 c9	 movsxd	 rcx, ecx
  00d3f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d47	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 674  :                     dstC[1*dst_y_pitch   + 0] = (Tout)cy3x0;

  00d4a	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00d4e	48 98		 cdqe
  00d50	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$15[rsp]
  00d58	0f b6 94 24 60
	01 00 00	 movzx	 edx, BYTE PTR cy3x0$51[rsp]
  00d60	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 675  :                     dstC[1*dst_y_pitch   + 1] = (Tout)((cy3x0 + cy3x1 + 1) >> 1);

  00d63	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR cy3x0$51[rsp]
  00d6a	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR cy3x1$53[rsp]
  00d71	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00d75	d1 f8		 sar	 eax, 1
  00d77	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00d7b	ff c1		 inc	 ecx
  00d7d	48 63 c9	 movsxd	 rcx, ecx
  00d80	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR dstC$15[rsp]
  00d88	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 676  :                 }

  00d8b	e9 2e fd ff ff	 jmp	 $LN20@convert_yv
$LN21@convert_yv:
$LN36@convert_yv:
$LN31@convert_yv:

; 677  :             }
; 678  :         }

  00d90	e9 99 f6 ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 679  :     }

  00d95	e9 0a f6 ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 680  : }

  00d9a	48 8b cc	 mov	 rcx, rsp
  00d9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00da4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00da9	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00db1	48 33 cc	 xor	 rcx, rsp
  00db4	e8 00 00 00 00	 call	 __security_check_cookie
  00db9	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00dc0	5f		 pop	 rdi
  00dc1	5e		 pop	 rsi
  00dc2	c3		 ret	 0
??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_p_to_yuv444

; 777  : static void convert_yv12_p_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 778  :     convert_yv12_p_to_yuv444_c<uint8_t, 8, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_p_to_yuv444_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_p_to_yuv444_c<unsigned char,8,unsigned char,8,0>

; 779  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_p_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_p_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstYLine$ = 128
dstULine$ = 136
dstVLine$ = 144
y_width$ = 152
y$5 = 156
srcP$6 = 160
dstY$7 = 168
dstU$8 = 176
dstV$9 = 184
x_fin$10 = 192
x$11 = 196
cxplus$12 = 200
ux0$13 = 204
vx0$14 = 208
ux2$15 = 212
vx2$16 = 216
$T17 = 232
tv157 = 248
__$ArrayPad$ = 256
dst$ = 304
src$ = 312
width$ = 320
src_y_pitch_byte$ = 328
src_uv_pitch_byte$ = 336
dst_y_pitch_byte$ = 344
height$ = 352
dst_height$ = 360
thread_id$ = 368
thread_n$ = 376
crop$ = 384
?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_yuv444

; 538  : static void convert_yuy2_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR [rsp+304]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 539  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 540  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 541  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 542  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 543  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 70
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 544  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 2;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  00130	d1 e1		 shl	 ecx, 1
  00132	48 63 c9	 movsxd	 rcx, ecx
  00135	48 03 c1	 add	 rax, rcx
  00138	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 545  :     uint8_t *dstYLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 00	 imul	 rax, rax, 0
  00146	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014d	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00152	48 63 c9	 movsxd	 rcx, ecx
  00155	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00161	48 8b c1	 mov	 rax, rcx
  00164	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 546  :     uint8_t *dstULine = (uint8_t *)dst[1] + dst_y_pitch_byte * y_range.start_dst;

  0016c	b8 08 00 00 00	 mov	 eax, 8
  00171	48 6b c0 01	 imul	 rax, rax, 1
  00175	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017c	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00181	48 63 c9	 movsxd	 rcx, ecx
  00184	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00190	48 8b c1	 mov	 rax, rcx
  00193	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstULine$[rsp], rax

; 547  :     uint8_t *dstVLine = (uint8_t *)dst[2] + dst_y_pitch_byte * y_range.start_dst;

  0019b	b8 08 00 00 00	 mov	 eax, 8
  001a0	48 6b c0 02	 imul	 rax, rax, 2
  001a4	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  001ab	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  001b0	48 63 c9	 movsxd	 rcx, ecx
  001b3	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  001bb	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  001bf	48 8b c1	 mov	 rax, rcx
  001c2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstVLine$[rsp], rax

; 548  :     const int y_width = width - crop_right - crop_left;

  001ca	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001ce	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001d5	2b c8		 sub	 ecx, eax
  001d7	8b c1		 mov	 eax, ecx
  001d9	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001dd	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 549  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dstYLine += dst_y_pitch_byte, dstULine += dst_y_pitch_byte, dstVLine += dst_y_pitch_byte) {

  001e4	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  001ef	e9 82 00 00 00	 jmp	 $LN4@convert_yu
$LN2@convert_yu:
  001f4	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  001fb	ff c0		 inc	 eax
  001fd	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  00204	48 63 84 24 48
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0020c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00211	48 03 c8	 add	 rcx, rax
  00214	48 8b c1	 mov	 rax, rcx
  00217	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
  0021c	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00224	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  0022c	48 03 c8	 add	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax
  0023a	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00242	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstULine$[rsp]
  0024a	48 03 c8	 add	 rcx, rax
  0024d	48 8b c1	 mov	 rax, rcx
  00250	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstULine$[rsp], rax
  00258	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00260	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstVLine$[rsp]
  00268	48 03 c8	 add	 rcx, rax
  0026b	48 8b c1	 mov	 rax, rcx
  0026e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstVLine$[rsp], rax
$LN4@convert_yu:
  00276	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0027a	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  00281	0f 8d 6b 02 00
	00		 jge	 $LN3@convert_yu

; 550  :         uint8_t *srcP = srcLine;

  00287	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  0028c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR srcP$6[rsp], rax

; 551  :         uint8_t *dstY = dstYLine;

  00294	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstYLine$[rsp]
  0029c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dstY$7[rsp], rax

; 552  :         uint8_t *dstU = dstULine;

  002a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dstULine$[rsp]
  002ac	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstU$8[rsp], rax

; 553  :         uint8_t *dstV = dstVLine;

  002b4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dstVLine$[rsp]
  002bc	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstV$9[rsp], rax

; 554  :         const int x_fin = width - crop_right - crop_left;

  002c4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  002c8	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002cf	2b c8		 sub	 ecx, eax
  002d1	8b c1		 mov	 eax, ecx
  002d3	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  002d7	89 84 24 c0 00
	00 00		 mov	 DWORD PTR x_fin$10[rsp], eax

; 555  :         for (int x = 0; x < x_fin; x += 2, srcP += 4, dstY += 2, dstU += 2, dstV += 2) {

  002de	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$11[rsp], 0
  002e9	eb 61		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  002eb	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR x$11[rsp]
  002f2	83 c0 02	 add	 eax, 2
  002f5	89 84 24 c4 00
	00 00		 mov	 DWORD PTR x$11[rsp], eax
  002fc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR srcP$6[rsp]
  00304	48 83 c0 04	 add	 rax, 4
  00308	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR srcP$6[rsp], rax
  00310	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dstY$7[rsp]
  00318	48 83 c0 02	 add	 rax, 2
  0031c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dstY$7[rsp], rax
  00324	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dstU$8[rsp]
  0032c	48 83 c0 02	 add	 rax, 2
  00330	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstU$8[rsp], rax
  00338	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstV$9[rsp]
  00340	48 83 c0 02	 add	 rax, 2
  00344	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstV$9[rsp], rax
$LN7@convert_yu:
  0034c	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR x_fin$10[rsp]
  00353	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR x$11[rsp], eax
  0035a	0f 8d 8d 01 00
	00		 jge	 $LN6@convert_yu

; 556  :             int cxplus = (x + 2 < x_fin) ? 4 : 0;

  00360	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR x$11[rsp]
  00367	83 c0 02	 add	 eax, 2
  0036a	3b 84 24 c0 00
	00 00		 cmp	 eax, DWORD PTR x_fin$10[rsp]
  00371	7d 0d		 jge	 SHORT $LN9@convert_yu
  00373	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR tv157[rsp], 4
  0037e	eb 0b		 jmp	 SHORT $LN10@convert_yu
$LN9@convert_yu:
  00380	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv157[rsp], 0
$LN10@convert_yu:
  0038b	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR tv157[rsp]
  00392	89 84 24 c8 00
	00 00		 mov	 DWORD PTR cxplus$12[rsp], eax

; 557  :             dstY[0] = srcP[0];

  00399	b8 01 00 00 00	 mov	 eax, 1
  0039e	48 6b c0 00	 imul	 rax, rax, 0
  003a2	b9 01 00 00 00	 mov	 ecx, 1
  003a7	48 6b c9 00	 imul	 rcx, rcx, 0
  003ab	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$7[rsp]
  003b3	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR srcP$6[rsp]
  003bb	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  003bf	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 558  :             dstY[1] = srcP[2];

  003c2	b8 01 00 00 00	 mov	 eax, 1
  003c7	48 6b c0 02	 imul	 rax, rax, 2
  003cb	b9 01 00 00 00	 mov	 ecx, 1
  003d0	48 6b c9 01	 imul	 rcx, rcx, 1
  003d4	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$7[rsp]
  003dc	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR srcP$6[rsp]
  003e4	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  003e8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 559  : 
; 560  :             int ux0 = srcP[1];

  003eb	b8 01 00 00 00	 mov	 eax, 1
  003f0	48 6b c0 01	 imul	 rax, rax, 1
  003f4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR srcP$6[rsp]
  003fc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00400	89 84 24 cc 00
	00 00		 mov	 DWORD PTR ux0$13[rsp], eax

; 561  :             int vx0 = srcP[3];

  00407	b8 01 00 00 00	 mov	 eax, 1
  0040c	48 6b c0 03	 imul	 rax, rax, 3
  00410	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR srcP$6[rsp]
  00418	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0041c	89 84 24 d0 00
	00 00		 mov	 DWORD PTR vx0$14[rsp], eax

; 562  :             int ux2 = srcP[1+cxplus];

  00423	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR cxplus$12[rsp]
  0042a	ff c0		 inc	 eax
  0042c	48 98		 cdqe
  0042e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR srcP$6[rsp]
  00436	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0043a	89 84 24 d4 00
	00 00		 mov	 DWORD PTR ux2$15[rsp], eax

; 563  :             int vx2 = srcP[3+cxplus];

  00441	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR cxplus$12[rsp]
  00448	83 c0 03	 add	 eax, 3
  0044b	48 98		 cdqe
  0044d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR srcP$6[rsp]
  00455	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00459	89 84 24 d8 00
	00 00		 mov	 DWORD PTR vx2$16[rsp], eax

; 564  :             dstU[0] = (uint8_t)ux0;

  00460	b8 01 00 00 00	 mov	 eax, 1
  00465	48 6b c0 00	 imul	 rax, rax, 0
  00469	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dstU$8[rsp]
  00471	0f b6 94 24 cc
	00 00 00	 movzx	 edx, BYTE PTR ux0$13[rsp]
  00479	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 565  :             dstU[1] = (uint8_t)((ux0 + ux2 + 1) >> 1);

  0047c	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR ux0$13[rsp]
  00483	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR ux2$15[rsp]
  0048a	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0048e	d1 f8		 sar	 eax, 1
  00490	b9 01 00 00 00	 mov	 ecx, 1
  00495	48 6b c9 01	 imul	 rcx, rcx, 1
  00499	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstU$8[rsp]
  004a1	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 566  :             dstV[0] = (uint8_t)vx0;

  004a4	b8 01 00 00 00	 mov	 eax, 1
  004a9	48 6b c0 00	 imul	 rax, rax, 0
  004ad	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstV$9[rsp]
  004b5	0f b6 94 24 d0
	00 00 00	 movzx	 edx, BYTE PTR vx0$14[rsp]
  004bd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 567  :             dstV[1] = (uint8_t)((vx2 + vx2 + 1) >> 1);

  004c0	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR vx2$16[rsp]
  004c7	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR vx2$16[rsp]
  004ce	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  004d2	d1 f8		 sar	 eax, 1
  004d4	b9 01 00 00 00	 mov	 ecx, 1
  004d9	48 6b c9 01	 imul	 rcx, rcx, 1
  004dd	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR dstV$9[rsp]
  004e5	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 568  :         }

  004e8	e9 fe fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 569  :     }

  004ed	e9 02 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 570  : }

  004f2	48 8b cc	 mov	 rcx, rsp
  004f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004fc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00501	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00509	48 33 cc	 xor	 rcx, rsp
  0050c	e8 00 00 00 00	 call	 __security_check_cookie
  00511	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00518	5f		 pop	 rdi
  00519	5e		 pop	 rsi
  0051a	c3		 ret	 0
?convert_yuy2_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcYLine$5 = 120
dstLine$6 = 128
y_width$7 = 136
y$8 = 140
ic$9 = 144
srcCLine$10 = 152
dstLine$11 = 160
y$12 = 168
dstC$13 = 176
srcP$14 = 184
x_fin$15 = 192
x$16 = 196
cxplus$17 = 200
cy1x0$18 = 204
cy1x1$19 = 208
$T20 = 224
tv200 = 240
__$ArrayPad$ = 248
dst$ = 288
src$ = 296
width$ = 304
src_y_pitch_byte$ = 312
src_uv_pitch_byte$ = 320
dst_y_pitch_byte$ = 328
height$ = 336
dst_height$ = 344
thread_id$ = 352
thread_n$ = 360
crop$ = 368
?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv422_to_yuv444

; 504  : static void convert_yuv422_to_yuv444(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 505  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 506  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 507  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 508  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 509  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 60
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T20[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 510  :     //Y成分のコピー
; 511  :     if (true) {

  00105	33 c0		 xor	 eax, eax
  00107	83 f8 01	 cmp	 eax, 1
  0010a	0f 84 fc 00 00
	00		 je	 $LN14@convert_yu

; 512  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 00	 imul	 rax, rax, 0
  00119	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00120	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  00125	48 63 c9	 movsxd	 rcx, ecx
  00128	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00130	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00134	48 03 c1	 add	 rax, rcx
  00137	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0013c	48 03 c1	 add	 rax, rcx
  0013f	48 89 44 24 78	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 513  :         uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00144	b8 08 00 00 00	 mov	 eax, 8
  00149	48 6b c0 00	 imul	 rax, rax, 0
  0014d	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00154	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00159	48 63 c9	 movsxd	 rcx, ecx
  0015c	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00164	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00168	48 8b c1	 mov	 rax, rcx
  0016b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 514  :         const int y_width = width - crop_right - crop_left;

  00173	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00177	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00186	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 515  :         for (int y = crop_up; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018d	8b 44 24 34	 mov	 eax, DWORD PTR crop_up$[rsp]
  00191	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  00198	eb 46		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  0019a	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001a1	ff c0		 inc	 eax
  001a3	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001aa	48 63 84 24 38
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001b7	48 03 c8	 add	 rcx, rax
  001ba	48 8b c1	 mov	 rax, rcx
  001bd	48 89 44 24 78	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001c2	48 63 84 24 48
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ca	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001d2	48 03 c8	 add	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001e0	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001e4	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001eb	7d 1f		 jge	 SHORT $LN3@convert_yu

; 516  :             memcpy(dstLine, srcYLine, y_width);

  001ed	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  001f5	4c 8b c0	 mov	 r8, rax
  001f8	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  001fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00205	e8 00 00 00 00	 call	 memcpy

; 517  :         }

  0020a	eb 8e		 jmp	 SHORT $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 518  :     }
; 519  :     //UV成分のコピー
; 520  :     for (int ic = 1; ic < 3; ic++) {

  0020c	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ic$9[rsp], 1
  00217	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00219	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR ic$9[rsp]
  00220	ff c0		 inc	 eax
  00222	89 84 24 90 00
	00 00		 mov	 DWORD PTR ic$9[rsp], eax
$LN7@convert_yu:
  00229	83 bc 24 90 00
	00 00 03	 cmp	 DWORD PTR ic$9[rsp], 3
  00231	0f 8d 37 02 00
	00		 jge	 $LN6@convert_yu

; 521  :         uint8_t *srcCLine = (uint8_t *)src[ic] + src_uv_pitch_byte * y_range.start_src + (crop_left >> 1);

  00237	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR ic$9[rsp]
  0023f	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00246	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0024b	48 63 c9	 movsxd	 rcx, ecx
  0024e	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00256	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0025a	48 03 c1	 add	 rax, rcx
  0025d	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  00261	d1 f9		 sar	 ecx, 1
  00263	48 63 c9	 movsxd	 rcx, ecx
  00266	48 03 c1	 add	 rax, rcx
  00269	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR srcCLine$10[rsp], rax

; 522  :         uint8_t *dstLine = (uint8_t *)dst[ic] + dst_y_pitch_byte * y_range.start_dst;

  00271	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR ic$9[rsp]
  00279	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00280	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00285	48 63 c9	 movsxd	 rcx, ecx
  00288	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00290	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00294	48 8b c1	 mov	 rax, rcx
  00297	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR dstLine$11[rsp], rax

; 523  :         for (int y = 0; y < y_range.len; y++, srcCLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  0029f	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  002aa	eb 4c		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  002ac	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  002b3	ff c0		 inc	 eax
  002b5	89 84 24 a8 00
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  002bc	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  002c4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR srcCLine$10[rsp]
  002cc	48 03 c8	 add	 rcx, rax
  002cf	48 8b c1	 mov	 rax, rcx
  002d2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR srcCLine$10[rsp], rax
  002da	48 63 84 24 48
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  002e2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dstLine$11[rsp]
  002ea	48 03 c8	 add	 rcx, rax
  002ed	48 8b c1	 mov	 rax, rcx
  002f0	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR dstLine$11[rsp], rax
$LN10@convert_yu:
  002f8	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  002fc	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00303	0f 8d 60 01 00
	00		 jge	 $LN9@convert_yu

; 524  :             uint8_t *dstC = dstLine;

  00309	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dstLine$11[rsp]
  00311	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstC$13[rsp], rax

; 525  :             uint8_t *srcP = srcCLine;

  00319	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR srcCLine$10[rsp]
  00321	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR srcP$14[rsp], rax

; 526  :             const int x_fin = width - crop_right - crop_left;

  00329	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0032d	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00334	2b c8		 sub	 ecx, eax
  00336	8b c1		 mov	 eax, ecx
  00338	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0033c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR x_fin$15[rsp], eax

; 527  :             for (int x = 0; x < x_fin; x += 2, dstC += 2, srcP++) {

  00343	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$16[rsp], 0
  0034e	eb 38		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  00350	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR x$16[rsp]
  00357	83 c0 02	 add	 eax, 2
  0035a	89 84 24 c4 00
	00 00		 mov	 DWORD PTR x$16[rsp], eax
  00361	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dstC$13[rsp]
  00369	48 83 c0 02	 add	 rax, 2
  0036d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstC$13[rsp], rax
  00375	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR srcP$14[rsp]
  0037d	48 ff c0	 inc	 rax
  00380	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR srcP$14[rsp], rax
$LN13@convert_yu:
  00388	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR x_fin$15[rsp]
  0038f	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR x$16[rsp], eax
  00396	0f 8d c8 00 00
	00		 jge	 $LN12@convert_yu

; 528  :                 int cxplus = (x + 2 < x_fin);

  0039c	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR x$16[rsp]
  003a3	83 c0 02	 add	 eax, 2
  003a6	3b 84 24 c0 00
	00 00		 cmp	 eax, DWORD PTR x_fin$15[rsp]
  003ad	7d 0d		 jge	 SHORT $LN16@convert_yu
  003af	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv200[rsp], 1
  003ba	eb 0b		 jmp	 SHORT $LN17@convert_yu
$LN16@convert_yu:
  003bc	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv200[rsp], 0
$LN17@convert_yu:
  003c7	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR tv200[rsp]
  003ce	89 84 24 c8 00
	00 00		 mov	 DWORD PTR cxplus$17[rsp], eax

; 529  :                 int cy1x0 = srcP[0*src_uv_pitch_byte + 0];

  003d5	6b 84 24 40 01
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch_byte$[rsp], 0
  003dd	48 98		 cdqe
  003df	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR srcP$14[rsp]
  003e7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003eb	89 84 24 cc 00
	00 00		 mov	 DWORD PTR cy1x0$18[rsp], eax

; 530  :                 int cy1x1 = srcP[0*src_uv_pitch_byte + cxplus];

  003f2	6b 84 24 40 01
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch_byte$[rsp], 0
  003fa	03 84 24 c8 00
	00 00		 add	 eax, DWORD PTR cxplus$17[rsp]
  00401	48 98		 cdqe
  00403	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR srcP$14[rsp]
  0040b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0040f	89 84 24 d0 00
	00 00		 mov	 DWORD PTR cy1x1$19[rsp], eax

; 531  :                 dstC[0*dst_y_pitch_byte   + 0] = (uint8_t)cy1x0;

  00416	6b 84 24 48 01
	00 00 00	 imul	 eax, DWORD PTR dst_y_pitch_byte$[rsp], 0
  0041e	48 98		 cdqe
  00420	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dstC$13[rsp]
  00428	0f b6 94 24 cc
	00 00 00	 movzx	 edx, BYTE PTR cy1x0$18[rsp]
  00430	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 532  :                 dstC[0*dst_y_pitch_byte   + 1] = (uint8_t)((cy1x0 + cy1x1 + 1) >> 1);

  00433	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR cy1x0$18[rsp]
  0043a	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR cy1x1$19[rsp]
  00441	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00445	d1 f8		 sar	 eax, 1
  00447	6b 8c 24 48 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  0044f	ff c1		 inc	 ecx
  00451	48 63 c9	 movsxd	 rcx, ecx
  00454	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstC$13[rsp]
  0045c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 533  :             }

  0045f	e9 ec fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 534  :         }

  00464	e9 43 fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 535  :     }

  00469	e9 ab fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 536  : }

  0046e	48 8b cc	 mov	 rcx, rsp
  00471	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00478	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0047d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00485	48 33 cc	 xor	 rcx, rsp
  00488	e8 00 00 00 00	 call	 __security_check_cookie
  0048d	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00494	5f		 pop	 rdi
  00495	5e		 pop	 rsi
  00496	c3		 ret	 0
?convert_yuv422_to_yuv444@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv422_to_yuv444
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv159 = 320
tv172 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0028a	c7 84 24 34 01
	00 00 07 00 00
	00		 mov	 DWORD PTR $T30[rsp], 7
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002b8	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002fd	c7 84 24 3c 01
	00 00 f9 ff ff
	ff		 mov	 DWORD PTR $T32[rsp], -7
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0032b	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  0043e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00442	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00449	2b c8		 sub	 ecx, eax
  0044b	8b c1		 mov	 eax, ecx
  0044d	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00451	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  00458	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00463	eb 6d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00465	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00476	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0047d	c1 e0 02	 shl	 eax, 2
  00480	48 98		 cdqe
  00482	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0048a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0048e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00496	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0049d	c1 e0 02	 shl	 eax, 2
  004a0	48 98		 cdqe
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  004aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004b6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ba	d1 e0		 shl	 eax, 1
  004bc	48 98		 cdqe
  004be	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ca	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004d2	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d6	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004dd	0f 8d 17 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004eb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004fb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  00503	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  0050b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00513	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00517	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0051e	2b c8		 sub	 ecx, eax
  00520	8b c1		 mov	 eax, ecx
  00522	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0052d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00538	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0053a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00541	83 c0 02	 add	 eax, 2
  00544	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0054b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00553	48 83 c0 04	 add	 rax, 4
  00557	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0055f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00567	48 83 c0 04	 add	 rax, 4
  0056b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00573	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0057b	48 83 c0 04	 add	 rax, 4
  0057f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00587	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0058e	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00595	0f 8d 5a 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0059b	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a3	48 98		 cdqe
  005a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005ad	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005b8	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005d5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005dc	48 98		 cdqe
  005de	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005e6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ea	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005f1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f8	48 98		 cdqe
  005fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00602	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00606	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  0060d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00614	d1 e0		 shl	 eax, 1
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00620	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0062b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00632	d1 e0		 shl	 eax, 1
  00634	48 98		 cdqe
  00636	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00649	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00651	48 98		 cdqe
  00653	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0065b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065f	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00666	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0066e	48 98		 cdqe
  00670	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00678	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0067c	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00683	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0068b	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00692	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00696	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0069d	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  006a5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006ac	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006b0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006b7	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006bf	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006c6	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006ca	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006d1	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006d9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006e0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006e4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006eb	33 c0		 xor	 eax, eax
  006ed	83 f8 01	 cmp	 eax, 1
  006f0	74 46		 je	 SHORT $LN21@convert_yu
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006f9	c1 e0 05	 shl	 eax, 5
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00703	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0070a	c1 e0 05	 shl	 eax, 5
  0070d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00714	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0071b	c1 e0 05	 shl	 eax, 5
  0071e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00725	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0072c	c1 e0 05	 shl	 eax, 5
  0072f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00736	eb 4a		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00738	33 c0		 xor	 eax, eax
  0073a	85 c0		 test	 eax, eax
  0073c	74 44		 je	 SHORT $LN23@convert_yu
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00745	c1 f8 fb	 sar	 eax, -5
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0074f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00756	c1 f8 fb	 sar	 eax, -5
  00759	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00760	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00767	c1 f8 fb	 sar	 eax, -5
  0076a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00771	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00778	c1 f8 fb	 sar	 eax, -5
  0077b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00782	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00787	48 98		 cdqe
  00789	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00791	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00799	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  0079d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  007a2	ff c0		 inc	 eax
  007a4	48 98		 cdqe
  007a6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ae	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  007b6	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ba	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007be	48 98		 cdqe
  007c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007c8	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007d0	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007d4	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007d8	ff c0		 inc	 eax
  007da	48 98		 cdqe
  007dc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007e4	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007ec	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007f0	e9 45 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007f5	e9 6b fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007fa	48 8b cc	 mov	 rcx, rsp
  007fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00804	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00809	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00811	48 33 cc	 xor	 rcx, rsp
  00814	e8 00 00 00 00	 call	 __security_check_cookie
  00819	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00820	5f		 pop	 rdi
  00821	5e		 pop	 rsi
  00822	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_p010_i

; 500  : static void convert_yuv444_09_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 501  :     convert_yuv444_to_nv12_i_c<uint16_t, 9, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned short,16,0>

; 502  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv159 = 296
tv172 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0028a	c7 84 24 1c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR $T24[rsp], 7
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002b8	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002fd	c7 84 24 24 01
	00 00 f9 ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -7
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0032b	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  0043e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00449	eb 68		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044b	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00452	83 c0 02	 add	 eax, 2
  00455	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00463	d1 e0		 shl	 eax, 1
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00482	d1 e0		 shl	 eax, 1
  00484	48 98		 cdqe
  00486	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0048e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00492	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049a	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0049f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ab	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004b3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004be	0f 8d f3 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004c4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004cc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004d4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ec	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004f4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ff	2b c8		 sub	 ecx, eax
  00501	8b c1		 mov	 eax, ecx
  00503	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00507	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00519	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0051b	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00522	83 c0 02	 add	 eax, 2
  00525	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0052c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00534	48 83 c0 04	 add	 rax, 4
  00538	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00548	48 83 c0 04	 add	 rax, 4
  0054c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00554	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00568	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056f	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00576	0f 8d 36 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0057c	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00584	48 98		 cdqe
  00586	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00592	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00599	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a1	48 98		 cdqe
  005a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005af	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005bd	48 98		 cdqe
  005bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005cb	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005d2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d9	48 98		 cdqe
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005e3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005e7	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005ee	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005f5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005fc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00600	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  00607	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  0060e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00615	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00619	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00620	33 c0		 xor	 eax, eax
  00622	83 f8 01	 cmp	 eax, 1
  00625	74 24		 je	 SHORT $LN21@convert_yu
  00627	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0062e	c1 e0 06	 shl	 eax, 6
  00631	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00638	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0063f	c1 e0 06	 shl	 eax, 6
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00649	eb 28		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0064b	33 c0		 xor	 eax, eax
  0064d	85 c0		 test	 eax, eax
  0064f	74 22		 je	 SHORT $LN23@convert_yu
  00651	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00658	c1 f8 fa	 sar	 eax, -6
  0065b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00662	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00669	c1 f8 fa	 sar	 eax, -6
  0066c	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00673	b8 02 00 00 00	 mov	 eax, 2
  00678	48 6b c0 00	 imul	 rax, rax, 0
  0067c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00684	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  0068c	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  00690	b8 02 00 00 00	 mov	 eax, 2
  00695	48 6b c0 01	 imul	 rax, rax, 1
  00699	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  006a1	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  006a9	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  006ad	e9 69 fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006b2	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006b7	48 8b cc	 mov	 rcx, rsp
  006ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006c6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006ce	48 33 cc	 xor	 rcx, rsp
  006d1	e8 00 00 00 00	 call	 __security_check_cookie
  006d6	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006dd	5f		 pop	 rdi
  006de	5e		 pop	 rsi
  006df	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_p010_p

; 496  : static void convert_yuv444_09_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 497  :     convert_yuv444_to_nv12_p_c<uint16_t, 9, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$08G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned short,16,0>

; 498  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv159 = 320
tv172 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0028a	c7 84 24 34 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T30[rsp], 6
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002b8	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002fd	c7 84 24 3c 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T32[rsp], -6
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0032b	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  0043e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00442	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00449	2b c8		 sub	 ecx, eax
  0044b	8b c1		 mov	 eax, ecx
  0044d	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00451	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  00458	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00463	eb 6d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00465	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00476	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0047d	c1 e0 02	 shl	 eax, 2
  00480	48 98		 cdqe
  00482	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0048a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0048e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00496	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0049d	c1 e0 02	 shl	 eax, 2
  004a0	48 98		 cdqe
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  004aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004b6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ba	d1 e0		 shl	 eax, 1
  004bc	48 98		 cdqe
  004be	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ca	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004d2	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d6	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004dd	0f 8d 17 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004eb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004fb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  00503	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  0050b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00513	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00517	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0051e	2b c8		 sub	 ecx, eax
  00520	8b c1		 mov	 eax, ecx
  00522	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0052d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00538	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0053a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00541	83 c0 02	 add	 eax, 2
  00544	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0054b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00553	48 83 c0 04	 add	 rax, 4
  00557	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0055f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00567	48 83 c0 04	 add	 rax, 4
  0056b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00573	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0057b	48 83 c0 04	 add	 rax, 4
  0057f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00587	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0058e	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00595	0f 8d 5a 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0059b	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a3	48 98		 cdqe
  005a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005ad	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005b8	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005d5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005dc	48 98		 cdqe
  005de	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005e6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ea	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005f1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f8	48 98		 cdqe
  005fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00602	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00606	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  0060d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00614	d1 e0		 shl	 eax, 1
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00620	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0062b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00632	d1 e0		 shl	 eax, 1
  00634	48 98		 cdqe
  00636	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00649	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00651	48 98		 cdqe
  00653	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0065b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065f	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00666	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0066e	48 98		 cdqe
  00670	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00678	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0067c	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00683	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0068b	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00692	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00696	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0069d	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  006a5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006ac	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006b0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006b7	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006bf	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006c6	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006ca	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006d1	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006d9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006e0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006e4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006eb	33 c0		 xor	 eax, eax
  006ed	83 f8 01	 cmp	 eax, 1
  006f0	74 46		 je	 SHORT $LN21@convert_yu
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006f9	c1 e0 04	 shl	 eax, 4
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00703	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0070a	c1 e0 04	 shl	 eax, 4
  0070d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00714	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0071b	c1 e0 04	 shl	 eax, 4
  0071e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00725	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0072c	c1 e0 04	 shl	 eax, 4
  0072f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00736	eb 4a		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00738	33 c0		 xor	 eax, eax
  0073a	85 c0		 test	 eax, eax
  0073c	74 44		 je	 SHORT $LN23@convert_yu
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00745	c1 f8 fc	 sar	 eax, -4
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0074f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00756	c1 f8 fc	 sar	 eax, -4
  00759	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00760	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00767	c1 f8 fc	 sar	 eax, -4
  0076a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00771	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00778	c1 f8 fc	 sar	 eax, -4
  0077b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00782	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00787	48 98		 cdqe
  00789	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00791	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00799	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  0079d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  007a2	ff c0		 inc	 eax
  007a4	48 98		 cdqe
  007a6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ae	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  007b6	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ba	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007be	48 98		 cdqe
  007c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007c8	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007d0	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007d4	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007d8	ff c0		 inc	 eax
  007da	48 98		 cdqe
  007dc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007e4	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007ec	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007f0	e9 45 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007f5	e9 6b fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007fa	48 8b cc	 mov	 rcx, rsp
  007fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00804	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00809	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00811	48 33 cc	 xor	 rcx, rsp
  00814	e8 00 00 00 00	 call	 __security_check_cookie
  00819	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00820	5f		 pop	 rdi
  00821	5e		 pop	 rsi
  00822	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_p010_i

; 492  : static void convert_yuv444_10_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 493  :     convert_yuv444_to_nv12_i_c<uint16_t, 10, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned short,16,0>

; 494  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv159 = 296
tv172 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0028a	c7 84 24 1c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T24[rsp], 6
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002b8	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002fd	c7 84 24 24 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -6
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0032b	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  0043e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00449	eb 68		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044b	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00452	83 c0 02	 add	 eax, 2
  00455	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00463	d1 e0		 shl	 eax, 1
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00482	d1 e0		 shl	 eax, 1
  00484	48 98		 cdqe
  00486	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0048e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00492	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049a	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0049f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ab	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004b3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004be	0f 8d f3 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004c4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004cc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004d4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ec	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004f4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ff	2b c8		 sub	 ecx, eax
  00501	8b c1		 mov	 eax, ecx
  00503	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00507	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00519	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0051b	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00522	83 c0 02	 add	 eax, 2
  00525	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0052c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00534	48 83 c0 04	 add	 rax, 4
  00538	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00548	48 83 c0 04	 add	 rax, 4
  0054c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00554	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00568	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056f	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00576	0f 8d 36 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0057c	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00584	48 98		 cdqe
  00586	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00592	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00599	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a1	48 98		 cdqe
  005a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005af	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005bd	48 98		 cdqe
  005bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005cb	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005d2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d9	48 98		 cdqe
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005e3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005e7	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005ee	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005f5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005fc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00600	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  00607	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  0060e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00615	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00619	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00620	33 c0		 xor	 eax, eax
  00622	83 f8 01	 cmp	 eax, 1
  00625	74 24		 je	 SHORT $LN21@convert_yu
  00627	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0062e	c1 e0 05	 shl	 eax, 5
  00631	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00638	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0063f	c1 e0 05	 shl	 eax, 5
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00649	eb 28		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0064b	33 c0		 xor	 eax, eax
  0064d	85 c0		 test	 eax, eax
  0064f	74 22		 je	 SHORT $LN23@convert_yu
  00651	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00658	c1 f8 fb	 sar	 eax, -5
  0065b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00662	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00669	c1 f8 fb	 sar	 eax, -5
  0066c	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00673	b8 02 00 00 00	 mov	 eax, 2
  00678	48 6b c0 00	 imul	 rax, rax, 0
  0067c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00684	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  0068c	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  00690	b8 02 00 00 00	 mov	 eax, 2
  00695	48 6b c0 01	 imul	 rax, rax, 1
  00699	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  006a1	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  006a9	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  006ad	e9 69 fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006b2	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006b7	48 8b cc	 mov	 rcx, rsp
  006ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006c6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006ce	48 33 cc	 xor	 rcx, rsp
  006d1	e8 00 00 00 00	 call	 __security_check_cookie
  006d6	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006dd	5f		 pop	 rdi
  006de	5e		 pop	 rsi
  006df	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_p010_p

; 488  : static void convert_yuv444_10_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 489  :     convert_yuv444_to_nv12_p_c<uint16_t, 10, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$09G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned short,16,0>

; 490  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv159 = 320
tv172 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0028a	c7 84 24 34 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T30[rsp], 4
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002b8	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002fd	c7 84 24 3c 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T32[rsp], -4
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0032b	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  0043e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00442	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00449	2b c8		 sub	 ecx, eax
  0044b	8b c1		 mov	 eax, ecx
  0044d	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00451	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  00458	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00463	eb 6d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00465	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00476	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0047d	c1 e0 02	 shl	 eax, 2
  00480	48 98		 cdqe
  00482	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0048a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0048e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00496	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0049d	c1 e0 02	 shl	 eax, 2
  004a0	48 98		 cdqe
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  004aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004b6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ba	d1 e0		 shl	 eax, 1
  004bc	48 98		 cdqe
  004be	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ca	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004d2	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d6	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004dd	0f 8d 17 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004eb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004fb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  00503	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  0050b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00513	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00517	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0051e	2b c8		 sub	 ecx, eax
  00520	8b c1		 mov	 eax, ecx
  00522	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0052d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00538	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0053a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00541	83 c0 02	 add	 eax, 2
  00544	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0054b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00553	48 83 c0 04	 add	 rax, 4
  00557	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0055f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00567	48 83 c0 04	 add	 rax, 4
  0056b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00573	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0057b	48 83 c0 04	 add	 rax, 4
  0057f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00587	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0058e	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00595	0f 8d 5a 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0059b	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a3	48 98		 cdqe
  005a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005ad	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005b8	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005d5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005dc	48 98		 cdqe
  005de	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005e6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ea	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005f1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f8	48 98		 cdqe
  005fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00602	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00606	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  0060d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00614	d1 e0		 shl	 eax, 1
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00620	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0062b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00632	d1 e0		 shl	 eax, 1
  00634	48 98		 cdqe
  00636	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00649	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00651	48 98		 cdqe
  00653	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0065b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065f	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00666	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0066e	48 98		 cdqe
  00670	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00678	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0067c	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00683	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0068b	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00692	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00696	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0069d	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  006a5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006ac	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006b0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006b7	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006bf	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006c6	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006ca	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006d1	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006d9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006e0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006e4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006eb	33 c0		 xor	 eax, eax
  006ed	83 f8 01	 cmp	 eax, 1
  006f0	74 46		 je	 SHORT $LN21@convert_yu
  006f2	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006f9	c1 e0 02	 shl	 eax, 2
  006fc	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00703	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0070a	c1 e0 02	 shl	 eax, 2
  0070d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00714	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0071b	c1 e0 02	 shl	 eax, 2
  0071e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00725	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0072c	c1 e0 02	 shl	 eax, 2
  0072f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00736	eb 4a		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00738	33 c0		 xor	 eax, eax
  0073a	85 c0		 test	 eax, eax
  0073c	74 44		 je	 SHORT $LN23@convert_yu
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00745	c1 f8 fe	 sar	 eax, -2
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0074f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00756	c1 f8 fe	 sar	 eax, -2
  00759	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00760	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00767	c1 f8 fe	 sar	 eax, -2
  0076a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00771	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00778	c1 f8 fe	 sar	 eax, -2
  0077b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00782	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00787	48 98		 cdqe
  00789	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00791	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00799	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  0079d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  007a2	ff c0		 inc	 eax
  007a4	48 98		 cdqe
  007a6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ae	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  007b6	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ba	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007be	48 98		 cdqe
  007c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007c8	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007d0	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007d4	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007d8	ff c0		 inc	 eax
  007da	48 98		 cdqe
  007dc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007e4	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007ec	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007f0	e9 45 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007f5	e9 6b fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007fa	48 8b cc	 mov	 rcx, rsp
  007fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00804	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00809	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00811	48 33 cc	 xor	 rcx, rsp
  00814	e8 00 00 00 00	 call	 __security_check_cookie
  00819	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00820	5f		 pop	 rdi
  00821	5e		 pop	 rsi
  00822	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_p010_i

; 484  : static void convert_yuv444_12_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 485  :     convert_yuv444_to_nv12_i_c<uint16_t, 12, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned short,16,0>

; 486  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv159 = 296
tv172 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0028a	c7 84 24 1c 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T24[rsp], 4
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002b8	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002fd	c7 84 24 24 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -4
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0032b	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  0043e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00449	eb 68		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044b	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00452	83 c0 02	 add	 eax, 2
  00455	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00463	d1 e0		 shl	 eax, 1
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00482	d1 e0		 shl	 eax, 1
  00484	48 98		 cdqe
  00486	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0048e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00492	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049a	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0049f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ab	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004b3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004be	0f 8d f3 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004c4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004cc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004d4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ec	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004f4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ff	2b c8		 sub	 ecx, eax
  00501	8b c1		 mov	 eax, ecx
  00503	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00507	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00519	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0051b	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00522	83 c0 02	 add	 eax, 2
  00525	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0052c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00534	48 83 c0 04	 add	 rax, 4
  00538	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00548	48 83 c0 04	 add	 rax, 4
  0054c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00554	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00568	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056f	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00576	0f 8d 36 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0057c	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00584	48 98		 cdqe
  00586	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00592	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00599	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a1	48 98		 cdqe
  005a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005af	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005bd	48 98		 cdqe
  005bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005cb	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005d2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d9	48 98		 cdqe
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005e3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005e7	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005ee	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005f5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005fc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00600	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  00607	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  0060e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00615	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00619	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00620	33 c0		 xor	 eax, eax
  00622	83 f8 01	 cmp	 eax, 1
  00625	74 24		 je	 SHORT $LN21@convert_yu
  00627	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0062e	c1 e0 03	 shl	 eax, 3
  00631	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00638	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0063f	c1 e0 03	 shl	 eax, 3
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00649	eb 28		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0064b	33 c0		 xor	 eax, eax
  0064d	85 c0		 test	 eax, eax
  0064f	74 22		 je	 SHORT $LN23@convert_yu
  00651	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00658	c1 f8 fd	 sar	 eax, -3
  0065b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00662	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00669	c1 f8 fd	 sar	 eax, -3
  0066c	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00673	b8 02 00 00 00	 mov	 eax, 2
  00678	48 6b c0 00	 imul	 rax, rax, 0
  0067c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00684	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  0068c	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  00690	b8 02 00 00 00	 mov	 eax, 2
  00695	48 6b c0 01	 imul	 rax, rax, 1
  00699	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  006a1	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  006a9	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  006ad	e9 69 fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006b2	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006b7	48 8b cc	 mov	 rcx, rsp
  006ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006c6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006ce	48 33 cc	 xor	 rcx, rsp
  006d1	e8 00 00 00 00	 call	 __security_check_cookie
  006d6	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006dd	5f		 pop	 rdi
  006de	5e		 pop	 rsi
  006df	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_p010_p

; 480  : static void convert_yuv444_12_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 481  :     convert_yuv444_to_nv12_p_c<uint16_t, 12, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0M@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned short,16,0>

; 482  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv159 = 320
tv172 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0028a	c7 84 24 34 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T30[rsp], 2
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002b8	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002fd	c7 84 24 3c 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T32[rsp], -2
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0032b	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  0043e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00442	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00449	2b c8		 sub	 ecx, eax
  0044b	8b c1		 mov	 eax, ecx
  0044d	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00451	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  00458	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00463	eb 6d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00465	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00476	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0047d	c1 e0 02	 shl	 eax, 2
  00480	48 98		 cdqe
  00482	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0048a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0048e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00496	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0049d	c1 e0 02	 shl	 eax, 2
  004a0	48 98		 cdqe
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  004aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004b6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ba	d1 e0		 shl	 eax, 1
  004bc	48 98		 cdqe
  004be	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ca	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004d2	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d6	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004dd	0f 8d fe 02 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004eb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004fb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  00503	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  0050b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00513	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00517	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0051e	2b c8		 sub	 ecx, eax
  00520	8b c1		 mov	 eax, ecx
  00522	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0052d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00538	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0053a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00541	83 c0 02	 add	 eax, 2
  00544	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0054b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00553	48 83 c0 04	 add	 rax, 4
  00557	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0055f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00567	48 83 c0 04	 add	 rax, 4
  0056b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00573	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0057b	48 83 c0 04	 add	 rax, 4
  0057f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00587	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0058e	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00595	0f 8d 41 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0059b	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a3	48 98		 cdqe
  005a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005ad	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005b8	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005d5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005dc	48 98		 cdqe
  005de	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005e6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ea	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005f1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f8	48 98		 cdqe
  005fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00602	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00606	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  0060d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00614	d1 e0		 shl	 eax, 1
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00620	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0062b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00632	d1 e0		 shl	 eax, 1
  00634	48 98		 cdqe
  00636	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00649	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00651	48 98		 cdqe
  00653	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0065b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065f	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00666	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0066e	48 98		 cdqe
  00670	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00678	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0067c	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00683	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0068b	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00692	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00696	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0069d	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  006a5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006ac	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006b0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006b7	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006bf	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006c6	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006ca	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006d1	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006d9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006e0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006e4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006eb	33 c0		 xor	 eax, eax
  006ed	85 c0		 test	 eax, eax
  006ef	74 3a		 je	 SHORT $LN21@convert_yu
  006f1	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006f8	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006ff	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00706	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  0070d	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00714	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  0071b	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 3e		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	85 c0		 test	 eax, eax
  0072f	74 38		 je	 SHORT $LN23@convert_yu
  00731	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00738	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0073f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00746	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  0074d	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00754	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  0075b	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00762	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00769	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0076e	48 98		 cdqe
  00770	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00778	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00780	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00784	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00789	ff c0		 inc	 eax
  0078b	48 98		 cdqe
  0078d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00795	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  0079d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007a1	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007a5	48 98		 cdqe
  007a7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007af	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007b7	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007bb	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007bf	ff c0		 inc	 eax
  007c1	48 98		 cdqe
  007c3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007cb	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007d3	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007d7	e9 5e fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007dc	e9 84 fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007e1	48 8b cc	 mov	 rcx, rsp
  007e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007eb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f0	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007f8	48 33 cc	 xor	 rcx, rsp
  007fb	e8 00 00 00 00	 call	 __security_check_cookie
  00800	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00807	5f		 pop	 rdi
  00808	5e		 pop	 rsi
  00809	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_p010_i

; 476  : static void convert_yuv444_14_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 477  :     convert_yuv444_to_nv12_i_c<uint16_t, 14, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned short,16,0>

; 478  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv159 = 296
tv172 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0021f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00227	48 d1 e0	 shl	 rax, 1
  0022a	4c 8b c0	 mov	 r8, rax
  0022d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00235	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023d	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00242	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00247	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00252	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00254	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025b	ff c0		 inc	 eax
  0025d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00264	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00272	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00278	33 c0		 xor	 eax, eax
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0028a	c7 84 24 1c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T24[rsp], 2
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002b8	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002fd	c7 84 24 24 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -2
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0032b	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00384	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  0043e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00449	eb 68		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044b	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00452	83 c0 02	 add	 eax, 2
  00455	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00463	d1 e0		 shl	 eax, 1
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00482	d1 e0		 shl	 eax, 1
  00484	48 98		 cdqe
  00486	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0048e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00492	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049a	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0049f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ab	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004b3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004be	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004c4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004cc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004d4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ec	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004f4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ff	2b c8		 sub	 ecx, eax
  00501	8b c1		 mov	 eax, ecx
  00503	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00507	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00519	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0051b	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00522	83 c0 02	 add	 eax, 2
  00525	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0052c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00534	48 83 c0 04	 add	 rax, 4
  00538	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00548	48 83 c0 04	 add	 rax, 4
  0054c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00554	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00568	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056f	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00576	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0057c	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00584	48 98		 cdqe
  00586	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00592	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00599	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a1	48 98		 cdqe
  005a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005af	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005bd	48 98		 cdqe
  005bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005cb	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005d2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d9	48 98		 cdqe
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005e3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005e7	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005ee	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005f5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005fc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00600	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  00607	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  0060e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00615	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00619	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00620	33 c0		 xor	 eax, eax
  00622	83 f8 01	 cmp	 eax, 1
  00625	74 22		 je	 SHORT $LN21@convert_yu
  00627	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0062e	d1 e0		 shl	 eax, 1
  00630	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00637	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0063e	d1 e0		 shl	 eax, 1
  00640	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00647	eb 28		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00649	33 c0		 xor	 eax, eax
  0064b	85 c0		 test	 eax, eax
  0064d	74 22		 je	 SHORT $LN23@convert_yu
  0064f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00656	c1 f8 ff	 sar	 eax, -1
  00659	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00660	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00667	c1 f8 ff	 sar	 eax, -1
  0066a	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00671	b8 02 00 00 00	 mov	 eax, 2
  00676	48 6b c0 00	 imul	 rax, rax, 0
  0067a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00682	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  0068a	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  0068e	b8 02 00 00 00	 mov	 eax, 2
  00693	48 6b c0 01	 imul	 rax, rax, 1
  00697	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0069f	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  006a7	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  006ab	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006b0	e9 96 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006b5	48 8b cc	 mov	 rcx, rsp
  006b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006bf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006c4	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006cc	48 33 cc	 xor	 rcx, rsp
  006cf	e8 00 00 00 00	 call	 __security_check_cookie
  006d4	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006db	5f		 pop	 rdi
  006dc	5e		 pop	 rsi
  006dd	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_p010_p

; 472  : static void convert_yuv444_14_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 473  :     convert_yuv444_to_nv12_p_c<uint16_t, 14, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0O@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned short,16,0>

; 474  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv159 = 320
tv172 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	83 f8 01	 cmp	 eax, 1
  0021e	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00220	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00228	48 d1 e0	 shl	 rax, 1
  0022b	4c 8b c0	 mov	 r8, rax
  0022e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00236	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023e	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00243	e9 41 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00248	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00253	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00255	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025c	ff c0		 inc	 eax
  0025e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00265	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026c	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00273	0f 8d 10 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00279	33 c0		 xor	 eax, eax
  0027b	85 c0		 test	 eax, eax
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0028a	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T30[rsp], 0
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002b8	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002fd	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T32[rsp], 0
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0032b	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00384	e9 cc fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  0043e	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00442	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00449	2b c8		 sub	 ecx, eax
  0044b	8b c1		 mov	 eax, ecx
  0044d	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00451	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  00458	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00463	eb 6d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00465	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0046c	83 c0 04	 add	 eax, 4
  0046f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00476	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0047d	c1 e0 02	 shl	 eax, 2
  00480	48 98		 cdqe
  00482	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0048a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0048e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00496	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0049d	c1 e0 02	 shl	 eax, 2
  004a0	48 98		 cdqe
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  004aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004b6	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ba	d1 e0		 shl	 eax, 1
  004bc	48 98		 cdqe
  004be	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004c6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ca	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004d2	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004d6	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004dd	0f 8d 17 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004e3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004eb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004fb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  00503	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  0050b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00513	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00517	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0051e	2b c8		 sub	 ecx, eax
  00520	8b c1		 mov	 eax, ecx
  00522	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0052d	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00538	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0053a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00541	83 c0 02	 add	 eax, 2
  00544	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0054b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00553	48 83 c0 04	 add	 rax, 4
  00557	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0055f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00567	48 83 c0 04	 add	 rax, 4
  0056b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00573	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0057b	48 83 c0 04	 add	 rax, 4
  0057f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00587	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0058e	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00595	0f 8d 5a 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0059b	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a3	48 98		 cdqe
  005a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005ad	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005b1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005b8	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005c0	48 98		 cdqe
  005c2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ca	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ce	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005d5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005dc	48 98		 cdqe
  005de	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005e6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005ea	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005f1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f8	48 98		 cdqe
  005fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00602	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00606	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  0060d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00614	d1 e0		 shl	 eax, 1
  00616	48 98		 cdqe
  00618	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00620	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0062b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00632	d1 e0		 shl	 eax, 1
  00634	48 98		 cdqe
  00636	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00642	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00649	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00651	48 98		 cdqe
  00653	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0065b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0065f	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00666	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0066e	48 98		 cdqe
  00670	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00678	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0067c	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00683	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0068b	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00692	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00696	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0069d	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  006a5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006ac	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006b0	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006b7	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006bf	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006c6	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006ca	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006d1	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006d9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006e0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006e4	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006eb	33 c0		 xor	 eax, eax
  006ed	85 c0		 test	 eax, eax
  006ef	74 46		 je	 SHORT $LN21@convert_yu
  006f1	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006f8	c1 e0 fe	 shl	 eax, -2
  006fb	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00702	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00709	c1 e0 fe	 shl	 eax, -2
  0070c	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00713	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0071a	c1 e0 fe	 shl	 eax, -2
  0071d	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00724	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0072b	c1 e0 fe	 shl	 eax, -2
  0072e	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00735	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00737	33 c0		 xor	 eax, eax
  00739	83 f8 01	 cmp	 eax, 1
  0073c	74 44		 je	 SHORT $LN23@convert_yu
  0073e	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00745	c1 f8 02	 sar	 eax, 2
  00748	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0074f	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00756	c1 f8 02	 sar	 eax, 2
  00759	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00760	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00767	c1 f8 02	 sar	 eax, 2
  0076a	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00771	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00778	c1 f8 02	 sar	 eax, 2
  0077b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00782	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00787	48 98		 cdqe
  00789	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00791	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00799	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  0079d	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  007a2	ff c0		 inc	 eax
  007a4	48 98		 cdqe
  007a6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ae	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  007b6	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ba	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007be	48 98		 cdqe
  007c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007c8	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007d0	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007d4	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007d8	ff c0		 inc	 eax
  007da	48 98		 cdqe
  007dc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007e4	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007ec	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007f0	e9 45 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007f5	e9 6b fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007fa	48 8b cc	 mov	 rcx, rsp
  007fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00804	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00809	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00811	48 33 cc	 xor	 rcx, rsp
  00814	e8 00 00 00 00	 call	 __security_check_cookie
  00819	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00820	5f		 pop	 rdi
  00821	5e		 pop	 rsi
  00822	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_p010_i

; 468  : static void convert_yuv444_16_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 469  :     convert_yuv444_to_nv12_i_c<uint16_t, 16, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned short,16,0>

; 470  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv159 = 296
tv172 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c4	33 d2		 xor	 edx, edx
  000c6	b9 02 00 00 00	 mov	 ecx, 2
  000cb	48 f7 f1	 div	 rcx
  000ce	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000d2	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d6	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000dd	2b c8		 sub	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000f4	44 8b c0	 mov	 r8d, eax
  000f7	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000fb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00103	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00108	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010d	48 8b f9	 mov	 rdi, rcx
  00110	48 8b f0	 mov	 rsi, rax
  00113	b9 0c 00 00 00	 mov	 ecx, 12
  00118	f3 a4		 rep movsb
  0011a	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0011f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	48 8b f1	 mov	 rsi, rcx
  0012a	b9 0c 00 00 00	 mov	 ecx, 12
  0012f	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00131	33 c0		 xor	 eax, eax
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 84 52 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00149	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00159	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00161	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00166	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0016a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 00	 imul	 rax, rax, 0
  0017b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0017f	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00184	48 63 c9	 movsxd	 rcx, ecx
  00187	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00193	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00197	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001a3	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001aa	2b c8		 sub	 ecx, eax
  001ac	8b c1		 mov	 eax, ecx
  001ae	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001b2	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001b9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001c4	eb 42		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001c6	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001d6	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001ef	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001fc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00200	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  00208	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0020c	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00213	0f 8d 75 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00219	33 c0		 xor	 eax, eax
  0021b	83 f8 01	 cmp	 eax, 1
  0021e	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00220	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00228	48 d1 e0	 shl	 rax, 1
  0022b	4c 8b c0	 mov	 r8, rax
  0022e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00236	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0023e	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00243	e9 41 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00248	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00253	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00255	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0025c	ff c0		 inc	 eax
  0025e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00265	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0026c	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00273	0f 8d 10 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00279	33 c0		 xor	 eax, eax
  0027b	85 c0		 test	 eax, eax
  0027d	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  0027f	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0028a	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T24[rsp], 0
  00295	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0029d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002a5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  002a9	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  002b0	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002b8	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002c0	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002c5	8b 00		 mov	 eax, DWORD PTR [rax]
  002c7	0f b6 c8	 movzx	 ecx, al
  002ca	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv159[rsp]
  002d1	d3 e0		 shl	 eax, cl
  002d3	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002e3	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002e7	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002f2	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002fd	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T26[rsp], 0
  00308	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00310	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00318	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0031c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  00323	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0032b	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00333	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f b6 c8	 movzx	 ecx, al
  0033d	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv172[rsp]
  00344	d3 f8		 sar	 eax, cl
  00346	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0034e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00356	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0035a	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0035c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00364	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00374	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  0037c	0f b7 04 47	 movzx	 eax, WORD PTR [rdi+rax*2]
  00380	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00384	e9 cc fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  00389	e9 38 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  0038e	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00396	33 d2		 xor	 edx, edx
  00398	b9 02 00 00 00	 mov	 ecx, 2
  0039d	48 f7 f1	 div	 rcx
  003a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 01	 imul	 rax, rax, 1
  003b0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003b7	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003bc	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003c0	48 63 c9	 movsxd	 rcx, ecx
  003c3	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003cb	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003cf	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003db	b8 08 00 00 00	 mov	 eax, 8
  003e0	48 6b c0 02	 imul	 rax, rax, 2
  003e4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003eb	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003f0	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003f4	48 63 c9	 movsxd	 rcx, ecx
  003f7	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003ff	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00403	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00407	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 01	 imul	 rax, rax, 1
  00418	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0041c	d1 f9		 sar	 ecx, 1
  0041e	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0042e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00432	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00436	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  0043e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00449	eb 68		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044b	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00452	83 c0 02	 add	 eax, 2
  00455	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00463	d1 e0		 shl	 eax, 1
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00473	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00482	d1 e0		 shl	 eax, 1
  00484	48 98		 cdqe
  00486	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0048e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00492	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049a	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0049f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ab	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004b3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b7	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004be	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004c4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004cc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004d4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004dc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004e4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ec	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004f4	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f8	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ff	2b c8		 sub	 ecx, eax
  00501	8b c1		 mov	 eax, ecx
  00503	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00507	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00519	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0051b	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00522	83 c0 02	 add	 eax, 2
  00525	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0052c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00534	48 83 c0 04	 add	 rax, 4
  00538	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00540	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00548	48 83 c0 04	 add	 rax, 4
  0054c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00554	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00568	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056f	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00576	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0057c	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00584	48 98		 cdqe
  00586	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00592	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00599	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a1	48 98		 cdqe
  005a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005af	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005bd	48 98		 cdqe
  005bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005cb	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005d2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d9	48 98		 cdqe
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005e3	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005e7	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005ee	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005f5	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005fc	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00600	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  00607	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  0060e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00615	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00619	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00620	33 c0		 xor	 eax, eax
  00622	85 c0		 test	 eax, eax
  00624	74 24		 je	 SHORT $LN21@convert_yu
  00626	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0062d	c1 e0 ff	 shl	 eax, -1
  00630	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00637	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0063e	c1 e0 ff	 shl	 eax, -1
  00641	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00648	eb 27		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0064a	33 c0		 xor	 eax, eax
  0064c	83 f8 01	 cmp	 eax, 1
  0064f	74 20		 je	 SHORT $LN23@convert_yu
  00651	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00658	d1 f8		 sar	 eax, 1
  0065a	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00661	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00668	d1 f8		 sar	 eax, 1
  0066a	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00671	b8 02 00 00 00	 mov	 eax, 2
  00676	48 6b c0 00	 imul	 rax, rax, 0
  0067a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00682	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  0068a	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  0068e	b8 02 00 00 00	 mov	 eax, 2
  00693	48 6b c0 01	 imul	 rax, rax, 1
  00697	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0069f	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  006a7	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  006ab	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006b0	e9 96 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006b5	48 8b cc	 mov	 rcx, rsp
  006b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006bf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006c4	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006cc	48 33 cc	 xor	 rcx, rsp
  006cf	e8 00 00 00 00	 call	 __security_check_cookie
  006d4	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006db	5f		 pop	 rdi
  006dc	5e		 pop	 rsi
  006dd	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_p010_p

; 464  : static void convert_yuv444_16_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 465  :     convert_yuv444_to_nv12_p_c<uint16_t, 16, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0BA@G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned short,16,0>

; 466  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv154 = 320
tv199 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027f	c7 84 24 34 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR $T30[rsp], -1
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002ad	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002f2	c7 84 24 3c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T32[rsp], 1
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00320	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00430	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00434	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0043b	2b c8		 sub	 ecx, eax
  0043d	8b c1		 mov	 eax, ecx
  0043f	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00443	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0044a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00455	eb 6f		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00457	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045e	83 c0 04	 add	 eax, 4
  00461	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00468	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046f	c1 e0 02	 shl	 eax, 2
  00472	48 98		 cdqe
  00474	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0047c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00480	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0048f	c1 e0 02	 shl	 eax, 2
  00492	48 98		 cdqe
  00494	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0049c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004a8	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ac	d1 e0		 shl	 eax, 1
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004b8	48 03 c8	 add	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004c6	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ca	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004d1	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004d7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004e7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004f7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ff	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00507	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0050b	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00512	2b c8		 sub	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0051a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00521	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052c	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0052e	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00535	83 c0 02	 add	 eax, 2
  00538	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0053f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00547	48 83 c0 02	 add	 rax, 2
  0054b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00553	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0055b	48 83 c0 04	 add	 rax, 4
  0055f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00567	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0056f	48 83 c0 04	 add	 rax, 4
  00573	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0057b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00582	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00589	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0058f	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005ac	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b4	48 98		 cdqe
  005b6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005c2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005c9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d0	48 98		 cdqe
  005d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005da	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005de	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005e5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005f6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  00601	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00608	d1 e0		 shl	 eax, 1
  0060a	48 98		 cdqe
  0060c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00614	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00618	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0061f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00626	d1 e0		 shl	 eax, 1
  00628	48 98		 cdqe
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00632	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00636	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  0063d	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00645	48 98		 cdqe
  00647	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0064f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00653	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0065a	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00662	48 98		 cdqe
  00664	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0066c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00670	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00677	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0067f	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00686	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00691	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00699	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006a0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006a4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006ab	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006b3	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006ba	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006be	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006c5	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006cd	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006d4	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006d8	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006df	33 c0		 xor	 eax, eax
  006e1	85 c0		 test	 eax, eax
  006e3	74 46		 je	 SHORT $LN21@convert_yu
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006ec	c1 e0 fd	 shl	 eax, -3
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006f6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006fd	c1 e0 fd	 shl	 eax, -3
  00700	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00707	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0070e	c1 e0 fd	 shl	 eax, -3
  00711	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00718	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0071f	c1 e0 fd	 shl	 eax, -3
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	83 f8 01	 cmp	 eax, 1
  00730	74 44		 je	 SHORT $LN23@convert_yu
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00739	c1 f8 03	 sar	 eax, 3
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00743	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0074a	c1 f8 03	 sar	 eax, 3
  0074d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00754	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0075b	c1 f8 03	 sar	 eax, 3
  0075e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00765	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0076c	c1 f8 03	 sar	 eax, 3
  0076f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00776	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077b	48 98		 cdqe
  0077d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00785	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  0078d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00790	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00795	ff c0		 inc	 eax
  00797	48 98		 cdqe
  00799	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a1	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  007a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ac	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b0	48 98		 cdqe
  007b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ba	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007c2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007c5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	48 98		 cdqe
  007cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007d5	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007e0	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007e5	e9 6d fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007ea	48 8b cc	 mov	 rcx, rsp
  007ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00801	48 33 cc	 xor	 rcx, rsp
  00804	e8 00 00 00 00	 call	 __security_check_cookie
  00809	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00810	5f		 pop	 rdi
  00811	5e		 pop	 rsi
  00812	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_nv12_i

; 460  : static void convert_yuv444_09_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 461  :     convert_yuv444_to_nv12_i_c<uint16_t, 9, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,9,unsigned char,8,0>

; 462  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv154 = 296
tv199 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027f	c7 84 24 1c 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR $T24[rsp], -1
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002ad	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002f2	c7 84 24 24 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T26[rsp], 1
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00320	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00430	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043b	eb 6a		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00444	83 c0 02	 add	 eax, 2
  00447	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00455	d1 e0		 shl	 eax, 1
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00465	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00474	d1 e0		 shl	 eax, 1
  00476	48 98		 cdqe
  00478	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00480	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0048c	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00499	48 03 c8	 add	 rcx, rax
  0049c	48 8b c1	 mov	 rax, rcx
  0049f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004a7	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ab	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004b2	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004d8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004e8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004ec	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004f3	2b c8		 sub	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004fb	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00502	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0050d	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0050f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00516	83 c0 02	 add	 eax, 2
  00519	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00520	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00528	48 83 c0 02	 add	 rax, 2
  0052c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00534	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00548	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00550	48 83 c0 04	 add	 rax, 4
  00554	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0055c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00563	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0056a	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00570	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00578	48 98		 cdqe
  0057a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00582	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00586	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  0058d	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00595	48 98		 cdqe
  00597	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0059f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a3	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005aa	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b1	48 98		 cdqe
  005b3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005bf	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005c6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cd	48 98		 cdqe
  005cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005db	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005e2	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005e9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005f0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005fb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  00602	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00609	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0060d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	74 24		 je	 SHORT $LN21@convert_yu
  0061a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00621	c1 e0 fe	 shl	 eax, -2
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0062b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00632	c1 e0 fe	 shl	 eax, -2
  00635	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  0063c	eb 29		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0063e	33 c0		 xor	 eax, eax
  00640	83 f8 01	 cmp	 eax, 1
  00643	74 22		 je	 SHORT $LN23@convert_yu
  00645	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0064c	c1 f8 02	 sar	 eax, 2
  0064f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00656	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0065d	c1 f8 02	 sar	 eax, 2
  00660	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00667	b8 01 00 00 00	 mov	 eax, 1
  0066c	48 6b c0 00	 imul	 rax, rax, 0
  00670	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00678	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00680	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  00683	b8 01 00 00 00	 mov	 eax, 1
  00688	48 6b c0 01	 imul	 rax, rax, 1
  0068c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00694	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  0069c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  0069f	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006a4	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a9	48 8b cc	 mov	 rcx, rsp
  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b8	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c0	48 33 cc	 xor	 rcx, rsp
  006c3	e8 00 00 00 00	 call	 __security_check_cookie
  006c8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006cf	5f		 pop	 rdi
  006d0	5e		 pop	 rsi
  006d1	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_nv12_p

; 456  : static void convert_yuv444_09_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 457  :     convert_yuv444_to_nv12_p_c<uint16_t, 9, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$08E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,9,unsigned char,8,0>

; 458  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv154 = 320
tv199 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027f	c7 84 24 34 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T30[rsp], -2
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002ad	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002f2	c7 84 24 3c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T32[rsp], 2
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00320	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00430	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00434	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0043b	2b c8		 sub	 ecx, eax
  0043d	8b c1		 mov	 eax, ecx
  0043f	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00443	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0044a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00455	eb 6f		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00457	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045e	83 c0 04	 add	 eax, 4
  00461	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00468	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046f	c1 e0 02	 shl	 eax, 2
  00472	48 98		 cdqe
  00474	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0047c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00480	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0048f	c1 e0 02	 shl	 eax, 2
  00492	48 98		 cdqe
  00494	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0049c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004a8	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ac	d1 e0		 shl	 eax, 1
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004b8	48 03 c8	 add	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004c6	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ca	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004d1	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004d7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004e7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004f7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ff	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00507	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0050b	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00512	2b c8		 sub	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0051a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00521	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052c	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0052e	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00535	83 c0 02	 add	 eax, 2
  00538	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0053f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00547	48 83 c0 02	 add	 rax, 2
  0054b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00553	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0055b	48 83 c0 04	 add	 rax, 4
  0055f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00567	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0056f	48 83 c0 04	 add	 rax, 4
  00573	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0057b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00582	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00589	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0058f	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005ac	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b4	48 98		 cdqe
  005b6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005c2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005c9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d0	48 98		 cdqe
  005d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005da	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005de	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005e5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005f6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  00601	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00608	d1 e0		 shl	 eax, 1
  0060a	48 98		 cdqe
  0060c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00614	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00618	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0061f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00626	d1 e0		 shl	 eax, 1
  00628	48 98		 cdqe
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00632	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00636	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  0063d	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00645	48 98		 cdqe
  00647	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0064f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00653	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0065a	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00662	48 98		 cdqe
  00664	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0066c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00670	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00677	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0067f	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00686	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00691	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00699	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006a0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006a4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006ab	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006b3	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006ba	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006be	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006c5	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006cd	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006d4	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006d8	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006df	33 c0		 xor	 eax, eax
  006e1	85 c0		 test	 eax, eax
  006e3	74 46		 je	 SHORT $LN21@convert_yu
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006ec	c1 e0 fc	 shl	 eax, -4
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006f6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006fd	c1 e0 fc	 shl	 eax, -4
  00700	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00707	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0070e	c1 e0 fc	 shl	 eax, -4
  00711	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00718	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0071f	c1 e0 fc	 shl	 eax, -4
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	83 f8 01	 cmp	 eax, 1
  00730	74 44		 je	 SHORT $LN23@convert_yu
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00739	c1 f8 04	 sar	 eax, 4
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00743	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0074a	c1 f8 04	 sar	 eax, 4
  0074d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00754	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0075b	c1 f8 04	 sar	 eax, 4
  0075e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00765	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0076c	c1 f8 04	 sar	 eax, 4
  0076f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00776	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077b	48 98		 cdqe
  0077d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00785	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  0078d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00790	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00795	ff c0		 inc	 eax
  00797	48 98		 cdqe
  00799	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a1	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  007a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ac	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b0	48 98		 cdqe
  007b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ba	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007c2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007c5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	48 98		 cdqe
  007cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007d5	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007e0	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007e5	e9 6d fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007ea	48 8b cc	 mov	 rcx, rsp
  007ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00801	48 33 cc	 xor	 rcx, rsp
  00804	e8 00 00 00 00	 call	 __security_check_cookie
  00809	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00810	5f		 pop	 rdi
  00811	5e		 pop	 rsi
  00812	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_nv12_i

; 452  : static void convert_yuv444_10_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 453  :     convert_yuv444_to_nv12_i_c<uint16_t, 10, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,10,unsigned char,8,0>

; 454  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv154 = 296
tv199 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027f	c7 84 24 1c 01
	00 00 fe ff ff
	ff		 mov	 DWORD PTR $T24[rsp], -2
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002ad	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002f2	c7 84 24 24 01
	00 00 02 00 00
	00		 mov	 DWORD PTR $T26[rsp], 2
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00320	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00430	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043b	eb 6a		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00444	83 c0 02	 add	 eax, 2
  00447	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00455	d1 e0		 shl	 eax, 1
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00465	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00474	d1 e0		 shl	 eax, 1
  00476	48 98		 cdqe
  00478	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00480	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0048c	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00499	48 03 c8	 add	 rcx, rax
  0049c	48 8b c1	 mov	 rax, rcx
  0049f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004a7	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ab	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004b2	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004d8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004e8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004ec	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004f3	2b c8		 sub	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004fb	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00502	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0050d	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0050f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00516	83 c0 02	 add	 eax, 2
  00519	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00520	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00528	48 83 c0 02	 add	 rax, 2
  0052c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00534	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00548	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00550	48 83 c0 04	 add	 rax, 4
  00554	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0055c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00563	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0056a	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00570	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00578	48 98		 cdqe
  0057a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00582	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00586	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  0058d	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00595	48 98		 cdqe
  00597	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0059f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a3	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005aa	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b1	48 98		 cdqe
  005b3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005bf	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005c6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cd	48 98		 cdqe
  005cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005db	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005e2	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005e9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005f0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005fb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  00602	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00609	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0060d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	74 24		 je	 SHORT $LN21@convert_yu
  0061a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00621	c1 e0 fd	 shl	 eax, -3
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0062b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00632	c1 e0 fd	 shl	 eax, -3
  00635	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  0063c	eb 29		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0063e	33 c0		 xor	 eax, eax
  00640	83 f8 01	 cmp	 eax, 1
  00643	74 22		 je	 SHORT $LN23@convert_yu
  00645	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0064c	c1 f8 03	 sar	 eax, 3
  0064f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00656	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0065d	c1 f8 03	 sar	 eax, 3
  00660	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00667	b8 01 00 00 00	 mov	 eax, 1
  0066c	48 6b c0 00	 imul	 rax, rax, 0
  00670	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00678	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00680	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  00683	b8 01 00 00 00	 mov	 eax, 1
  00688	48 6b c0 01	 imul	 rax, rax, 1
  0068c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00694	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  0069c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  0069f	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006a4	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a9	48 8b cc	 mov	 rcx, rsp
  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b8	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c0	48 33 cc	 xor	 rcx, rsp
  006c3	e8 00 00 00 00	 call	 __security_check_cookie
  006c8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006cf	5f		 pop	 rdi
  006d0	5e		 pop	 rsi
  006d1	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_nv12_p

; 448  : static void convert_yuv444_10_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 449  :     convert_yuv444_to_nv12_p_c<uint16_t, 10, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$09E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,10,unsigned char,8,0>

; 450  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv154 = 320
tv199 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027f	c7 84 24 34 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T30[rsp], -4
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002ad	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002f2	c7 84 24 3c 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T32[rsp], 4
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00320	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00430	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00434	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0043b	2b c8		 sub	 ecx, eax
  0043d	8b c1		 mov	 eax, ecx
  0043f	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00443	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0044a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00455	eb 6f		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00457	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045e	83 c0 04	 add	 eax, 4
  00461	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00468	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046f	c1 e0 02	 shl	 eax, 2
  00472	48 98		 cdqe
  00474	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0047c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00480	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0048f	c1 e0 02	 shl	 eax, 2
  00492	48 98		 cdqe
  00494	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0049c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004a8	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ac	d1 e0		 shl	 eax, 1
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004b8	48 03 c8	 add	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004c6	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ca	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004d1	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004d7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004e7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004f7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ff	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00507	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0050b	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00512	2b c8		 sub	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0051a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00521	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052c	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0052e	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00535	83 c0 02	 add	 eax, 2
  00538	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0053f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00547	48 83 c0 02	 add	 rax, 2
  0054b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00553	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0055b	48 83 c0 04	 add	 rax, 4
  0055f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00567	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0056f	48 83 c0 04	 add	 rax, 4
  00573	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0057b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00582	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00589	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0058f	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005ac	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b4	48 98		 cdqe
  005b6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005c2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005c9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d0	48 98		 cdqe
  005d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005da	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005de	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005e5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005f6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  00601	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00608	d1 e0		 shl	 eax, 1
  0060a	48 98		 cdqe
  0060c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00614	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00618	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0061f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00626	d1 e0		 shl	 eax, 1
  00628	48 98		 cdqe
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00632	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00636	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  0063d	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00645	48 98		 cdqe
  00647	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0064f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00653	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0065a	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00662	48 98		 cdqe
  00664	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0066c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00670	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00677	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0067f	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00686	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00691	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00699	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006a0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006a4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006ab	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006b3	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006ba	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006be	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006c5	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006cd	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006d4	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006d8	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006df	33 c0		 xor	 eax, eax
  006e1	85 c0		 test	 eax, eax
  006e3	74 46		 je	 SHORT $LN21@convert_yu
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006ec	c1 e0 fa	 shl	 eax, -6
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006f6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006fd	c1 e0 fa	 shl	 eax, -6
  00700	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00707	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0070e	c1 e0 fa	 shl	 eax, -6
  00711	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00718	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0071f	c1 e0 fa	 shl	 eax, -6
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	83 f8 01	 cmp	 eax, 1
  00730	74 44		 je	 SHORT $LN23@convert_yu
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00739	c1 f8 06	 sar	 eax, 6
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00743	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0074a	c1 f8 06	 sar	 eax, 6
  0074d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00754	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0075b	c1 f8 06	 sar	 eax, 6
  0075e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00765	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0076c	c1 f8 06	 sar	 eax, 6
  0076f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00776	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077b	48 98		 cdqe
  0077d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00785	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  0078d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00790	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00795	ff c0		 inc	 eax
  00797	48 98		 cdqe
  00799	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a1	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  007a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ac	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b0	48 98		 cdqe
  007b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ba	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007c2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007c5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	48 98		 cdqe
  007cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007d5	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007e0	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007e5	e9 6d fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007ea	48 8b cc	 mov	 rcx, rsp
  007ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00801	48 33 cc	 xor	 rcx, rsp
  00804	e8 00 00 00 00	 call	 __security_check_cookie
  00809	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00810	5f		 pop	 rdi
  00811	5e		 pop	 rsi
  00812	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_nv12_i

; 444  : static void convert_yuv444_12_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 445  :     convert_yuv444_to_nv12_i_c<uint16_t, 12, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,12,unsigned char,8,0>

; 446  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv154 = 296
tv199 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027f	c7 84 24 1c 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T24[rsp], -4
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002ad	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002f2	c7 84 24 24 01
	00 00 04 00 00
	00		 mov	 DWORD PTR $T26[rsp], 4
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00320	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00430	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043b	eb 6a		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00444	83 c0 02	 add	 eax, 2
  00447	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00455	d1 e0		 shl	 eax, 1
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00465	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00474	d1 e0		 shl	 eax, 1
  00476	48 98		 cdqe
  00478	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00480	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0048c	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00499	48 03 c8	 add	 rcx, rax
  0049c	48 8b c1	 mov	 rax, rcx
  0049f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004a7	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ab	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004b2	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004d8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004e8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004ec	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004f3	2b c8		 sub	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004fb	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00502	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0050d	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0050f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00516	83 c0 02	 add	 eax, 2
  00519	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00520	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00528	48 83 c0 02	 add	 rax, 2
  0052c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00534	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00548	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00550	48 83 c0 04	 add	 rax, 4
  00554	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0055c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00563	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0056a	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00570	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00578	48 98		 cdqe
  0057a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00582	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00586	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  0058d	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00595	48 98		 cdqe
  00597	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0059f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a3	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005aa	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b1	48 98		 cdqe
  005b3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005bf	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005c6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cd	48 98		 cdqe
  005cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005db	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005e2	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005e9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005f0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005fb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  00602	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00609	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0060d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	74 24		 je	 SHORT $LN21@convert_yu
  0061a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00621	c1 e0 fb	 shl	 eax, -5
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0062b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00632	c1 e0 fb	 shl	 eax, -5
  00635	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  0063c	eb 29		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0063e	33 c0		 xor	 eax, eax
  00640	83 f8 01	 cmp	 eax, 1
  00643	74 22		 je	 SHORT $LN23@convert_yu
  00645	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0064c	c1 f8 05	 sar	 eax, 5
  0064f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00656	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0065d	c1 f8 05	 sar	 eax, 5
  00660	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00667	b8 01 00 00 00	 mov	 eax, 1
  0066c	48 6b c0 00	 imul	 rax, rax, 0
  00670	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00678	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00680	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  00683	b8 01 00 00 00	 mov	 eax, 1
  00688	48 6b c0 01	 imul	 rax, rax, 1
  0068c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00694	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  0069c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  0069f	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006a4	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a9	48 8b cc	 mov	 rcx, rsp
  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b8	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c0	48 33 cc	 xor	 rcx, rsp
  006c3	e8 00 00 00 00	 call	 __security_check_cookie
  006c8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006cf	5f		 pop	 rdi
  006d0	5e		 pop	 rsi
  006d1	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_nv12_p

; 440  : static void convert_yuv444_12_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 441  :     convert_yuv444_to_nv12_p_c<uint16_t, 12, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0M@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,12,unsigned char,8,0>

; 442  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv154 = 320
tv199 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027f	c7 84 24 34 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T30[rsp], -6
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002ad	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002f2	c7 84 24 3c 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T32[rsp], 6
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00320	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00430	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00434	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0043b	2b c8		 sub	 ecx, eax
  0043d	8b c1		 mov	 eax, ecx
  0043f	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00443	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0044a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00455	eb 6f		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00457	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045e	83 c0 04	 add	 eax, 4
  00461	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00468	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046f	c1 e0 02	 shl	 eax, 2
  00472	48 98		 cdqe
  00474	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0047c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00480	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0048f	c1 e0 02	 shl	 eax, 2
  00492	48 98		 cdqe
  00494	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0049c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004a8	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ac	d1 e0		 shl	 eax, 1
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004b8	48 03 c8	 add	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004c6	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ca	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004d1	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004d7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004e7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004f7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ff	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00507	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0050b	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00512	2b c8		 sub	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0051a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00521	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052c	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0052e	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00535	83 c0 02	 add	 eax, 2
  00538	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0053f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00547	48 83 c0 02	 add	 rax, 2
  0054b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00553	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0055b	48 83 c0 04	 add	 rax, 4
  0055f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00567	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0056f	48 83 c0 04	 add	 rax, 4
  00573	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0057b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00582	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00589	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0058f	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005ac	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b4	48 98		 cdqe
  005b6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005c2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005c9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d0	48 98		 cdqe
  005d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005da	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005de	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005e5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005f6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  00601	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00608	d1 e0		 shl	 eax, 1
  0060a	48 98		 cdqe
  0060c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00614	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00618	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0061f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00626	d1 e0		 shl	 eax, 1
  00628	48 98		 cdqe
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00632	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00636	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  0063d	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00645	48 98		 cdqe
  00647	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0064f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00653	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0065a	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00662	48 98		 cdqe
  00664	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0066c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00670	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00677	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0067f	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00686	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00691	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00699	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006a0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006a4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006ab	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006b3	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006ba	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006be	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006c5	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006cd	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006d4	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006d8	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006df	33 c0		 xor	 eax, eax
  006e1	85 c0		 test	 eax, eax
  006e3	74 46		 je	 SHORT $LN21@convert_yu
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006ec	c1 e0 f8	 shl	 eax, -8
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006f6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006fd	c1 e0 f8	 shl	 eax, -8
  00700	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00707	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0070e	c1 e0 f8	 shl	 eax, -8
  00711	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00718	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0071f	c1 e0 f8	 shl	 eax, -8
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	83 f8 01	 cmp	 eax, 1
  00730	74 44		 je	 SHORT $LN23@convert_yu
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00739	c1 f8 08	 sar	 eax, 8
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00743	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0074a	c1 f8 08	 sar	 eax, 8
  0074d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00754	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0075b	c1 f8 08	 sar	 eax, 8
  0075e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00765	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0076c	c1 f8 08	 sar	 eax, 8
  0076f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00776	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077b	48 98		 cdqe
  0077d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00785	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  0078d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00790	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00795	ff c0		 inc	 eax
  00797	48 98		 cdqe
  00799	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a1	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  007a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ac	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b0	48 98		 cdqe
  007b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ba	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007c2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007c5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	48 98		 cdqe
  007cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007d5	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007e0	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007e5	e9 6d fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007ea	48 8b cc	 mov	 rcx, rsp
  007ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00801	48 33 cc	 xor	 rcx, rsp
  00804	e8 00 00 00 00	 call	 __security_check_cookie
  00809	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00810	5f		 pop	 rdi
  00811	5e		 pop	 rsi
  00812	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_nv12_i

; 436  : static void convert_yuv444_14_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 437  :     convert_yuv444_to_nv12_i_c<uint16_t, 14, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,14,unsigned char,8,0>

; 438  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv154 = 296
tv199 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027f	c7 84 24 1c 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T24[rsp], -6
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002ad	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002f2	c7 84 24 24 01
	00 00 06 00 00
	00		 mov	 DWORD PTR $T26[rsp], 6
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00320	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00430	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043b	eb 6a		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00444	83 c0 02	 add	 eax, 2
  00447	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00455	d1 e0		 shl	 eax, 1
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00465	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00474	d1 e0		 shl	 eax, 1
  00476	48 98		 cdqe
  00478	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00480	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0048c	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00499	48 03 c8	 add	 rcx, rax
  0049c	48 8b c1	 mov	 rax, rcx
  0049f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004a7	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ab	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004b2	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004d8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004e8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004ec	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004f3	2b c8		 sub	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004fb	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00502	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0050d	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0050f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00516	83 c0 02	 add	 eax, 2
  00519	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00520	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00528	48 83 c0 02	 add	 rax, 2
  0052c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00534	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00548	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00550	48 83 c0 04	 add	 rax, 4
  00554	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0055c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00563	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0056a	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00570	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00578	48 98		 cdqe
  0057a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00582	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00586	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  0058d	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00595	48 98		 cdqe
  00597	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0059f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a3	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005aa	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b1	48 98		 cdqe
  005b3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005bf	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005c6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cd	48 98		 cdqe
  005cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005db	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005e2	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005e9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005f0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005fb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  00602	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00609	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0060d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	74 24		 je	 SHORT $LN21@convert_yu
  0061a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00621	c1 e0 f9	 shl	 eax, -7
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0062b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00632	c1 e0 f9	 shl	 eax, -7
  00635	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  0063c	eb 29		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0063e	33 c0		 xor	 eax, eax
  00640	83 f8 01	 cmp	 eax, 1
  00643	74 22		 je	 SHORT $LN23@convert_yu
  00645	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0064c	c1 f8 07	 sar	 eax, 7
  0064f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00656	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0065d	c1 f8 07	 sar	 eax, 7
  00660	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00667	b8 01 00 00 00	 mov	 eax, 1
  0066c	48 6b c0 00	 imul	 rax, rax, 0
  00670	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00678	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00680	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  00683	b8 01 00 00 00	 mov	 eax, 1
  00688	48 6b c0 01	 imul	 rax, rax, 1
  0068c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00694	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  0069c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  0069f	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006a4	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a9	48 8b cc	 mov	 rcx, rsp
  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b8	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c0	48 33 cc	 xor	 rcx, rsp
  006c3	e8 00 00 00 00	 call	 __security_check_cookie
  006c8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006cf	5f		 pop	 rdi
  006d0	5e		 pop	 rsi
  006d1	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_nv12_p

; 432  : static void convert_yuv444_14_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 433  :     convert_yuv444_to_nv12_p_c<uint16_t, 14, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0O@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,14,unsigned char,8,0>

; 434  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv154 = 320
tv199 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027f	c7 84 24 34 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T30[rsp], -8
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002ad	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002f2	c7 84 24 3c 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T32[rsp], 8
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00320	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 90
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00430	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00434	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0043b	2b c8		 sub	 ecx, eax
  0043d	8b c1		 mov	 eax, ecx
  0043f	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00443	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0044a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00455	eb 6f		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00457	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  0045e	83 c0 04	 add	 eax, 4
  00461	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00468	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0046f	c1 e0 02	 shl	 eax, 2
  00472	48 98		 cdqe
  00474	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0047c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00480	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0048f	c1 e0 02	 shl	 eax, 2
  00492	48 98		 cdqe
  00494	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0049c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  004a8	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004ac	d1 e0		 shl	 eax, 1
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004b8	48 03 c8	 add	 rcx, rax
  004bb	48 8b c1	 mov	 rax, rcx
  004be	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004c6	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ca	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004d1	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004d7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004e7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004ef	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004f7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004ff	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  00507	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0050b	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00512	2b c8		 sub	 ecx, eax
  00514	8b c1		 mov	 eax, ecx
  00516	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0051a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00521	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0052c	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0052e	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00535	83 c0 02	 add	 eax, 2
  00538	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0053f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00547	48 83 c0 02	 add	 rax, 2
  0054b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00553	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0055b	48 83 c0 04	 add	 rax, 4
  0055f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00567	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  0056f	48 83 c0 04	 add	 rax, 4
  00573	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0057b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00582	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00589	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  0058f	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00597	48 98		 cdqe
  00599	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a5	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005ac	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005b4	48 98		 cdqe
  005b6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005c2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005c9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d0	48 98		 cdqe
  005d2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005da	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005de	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005e5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005f6	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  00601	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00608	d1 e0		 shl	 eax, 1
  0060a	48 98		 cdqe
  0060c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00614	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00618	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  0061f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00626	d1 e0		 shl	 eax, 1
  00628	48 98		 cdqe
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00632	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00636	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  0063d	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00645	48 98		 cdqe
  00647	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0064f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00653	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0065a	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00662	48 98		 cdqe
  00664	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0066c	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00670	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00677	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  0067f	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  00686	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0068a	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00691	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00699	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  006a0	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006a4	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006ab	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006b3	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006ba	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006be	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006c5	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006cd	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006d4	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006d8	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006df	33 c0		 xor	 eax, eax
  006e1	85 c0		 test	 eax, eax
  006e3	74 46		 je	 SHORT $LN21@convert_yu
  006e5	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006ec	c1 e0 f6	 shl	 eax, -10
  006ef	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006f6	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006fd	c1 e0 f6	 shl	 eax, -10
  00700	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00707	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0070e	c1 e0 f6	 shl	 eax, -10
  00711	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00718	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0071f	c1 e0 f6	 shl	 eax, -10
  00722	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00729	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0072b	33 c0		 xor	 eax, eax
  0072d	83 f8 01	 cmp	 eax, 1
  00730	74 44		 je	 SHORT $LN23@convert_yu
  00732	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00739	c1 f8 0a	 sar	 eax, 10
  0073c	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00743	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0074a	c1 f8 0a	 sar	 eax, 10
  0074d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00754	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  0075b	c1 f8 0a	 sar	 eax, 10
  0075e	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00765	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  0076c	c1 f8 0a	 sar	 eax, 10
  0076f	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  00776	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077b	48 98		 cdqe
  0077d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00785	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  0078d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00790	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00795	ff c0		 inc	 eax
  00797	48 98		 cdqe
  00799	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a1	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  007a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007ac	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b0	48 98		 cdqe
  007b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007ba	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007c2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007c5	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	48 98		 cdqe
  007cd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007d5	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007dd	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007e0	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007e5	e9 6d fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007ea	48 8b cc	 mov	 rcx, rsp
  007ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007f4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00801	48 33 cc	 xor	 rcx, rsp
  00804	e8 00 00 00 00	 call	 __security_check_cookie
  00809	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00810	5f		 pop	 rdi
  00811	5e		 pop	 rsi
  00812	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_nv12_i

; 428  : static void convert_yuv444_16_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 429  :     convert_yuv444_to_nv12_i_c<uint16_t, 16, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned short,16,unsigned char,8,0>

; 430  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv154 = 296
tv199 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	33 d2		 xor	 edx, edx
  000b0	b9 02 00 00 00	 mov	 ecx, 2
  000b5	48 f7 f1	 div	 rcx
  000b8	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000bc	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 50 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00156	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00174	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00179	48 63 c9	 movsxd	 rcx, ecx
  0017c	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00184	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00193	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00197	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019e	2b c8		 sub	 ecx, eax
  001a0	8b c1		 mov	 eax, ecx
  001a2	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ad	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b8	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ba	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c1	ff c0		 inc	 eax
  001c3	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001ca	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001db	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e3	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f0	48 03 c8	 add	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fe	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00202	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00209	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020f	33 c0		 xor	 eax, eax
  00211	85 c0		 test	 eax, eax
  00213	74 28		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00215	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021d	48 d1 e0	 shl	 rax, 1
  00220	4c 8b c0	 mov	 r8, rax
  00223	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00233	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00238	e9 3f 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  0023d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00248	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0024a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00251	ff c0		 inc	 eax
  00253	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0025a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00261	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00268	0f 8d 0e 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026e	33 c0		 xor	 eax, eax
  00270	85 c0		 test	 eax, eax
  00272	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00274	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027f	c7 84 24 1c 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T24[rsp], -8
  0028a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00292	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0029a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0029e	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  002a5	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002ad	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b5	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ba	8b 00		 mov	 eax, DWORD PTR [rax]
  002bc	0f b6 c8	 movzx	 ecx, al
  002bf	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv154[rsp]
  002c6	d3 e0		 shl	 eax, cl
  002c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002d0	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002db	e9 97 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002e0	33 c0		 xor	 eax, eax
  002e2	83 f8 01	 cmp	 eax, 1
  002e5	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e7	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002f2	c7 84 24 24 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T26[rsp], 8
  002fd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00305	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030d	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00311	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00318	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00320	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00328	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032d	8b 00		 mov	 eax, DWORD PTR [rax]
  0032f	0f b6 c8	 movzx	 ecx, al
  00332	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv199[rsp]
  00339	d3 f8		 sar	 eax, cl
  0033b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00343	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0034b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  0034e	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00350	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00358	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00360	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00368	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00370	0f b6 04 47	 movzx	 eax, BYTE PTR [rdi+rax*2]
  00374	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00377	e9 ce fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037c	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00381	48 63 84 24 80
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00389	33 d2		 xor	 edx, edx
  0038b	b9 02 00 00 00	 mov	 ecx, 2
  00390	48 f7 f1	 div	 rcx
  00393	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 01	 imul	 rax, rax, 1
  003a3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003aa	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003af	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003b3	48 63 c9	 movsxd	 rcx, ecx
  003b6	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003be	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003c2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003ce	b8 08 00 00 00	 mov	 eax, 8
  003d3	48 6b c0 02	 imul	 rax, rax, 2
  003d7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003de	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003e3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003e7	48 63 c9	 movsxd	 rcx, ecx
  003ea	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003f6	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003fa	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0040f	d1 f9		 sar	 ecx, 1
  00411	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00416	48 63 c9	 movsxd	 rcx, ecx
  00419	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00421	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00425	48 8b c1	 mov	 rax, rcx
  00428	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00430	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043b	eb 6a		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043d	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00444	83 c0 02	 add	 eax, 2
  00447	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00455	d1 e0		 shl	 eax, 1
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00465	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00474	d1 e0		 shl	 eax, 1
  00476	48 98		 cdqe
  00478	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00480	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0048c	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00499	48 03 c8	 add	 rcx, rax
  0049c	48 8b c1	 mov	 rax, rcx
  0049f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004a7	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004ab	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004b2	0f 8d f1 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004d8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004e8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004ec	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004f3	2b c8		 sub	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004fb	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00502	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0050d	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  0050f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00516	83 c0 02	 add	 eax, 2
  00519	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00520	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00528	48 83 c0 02	 add	 rax, 2
  0052c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00534	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00548	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00550	48 83 c0 04	 add	 rax, 4
  00554	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  0055c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00563	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0056a	0f 8d 34 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00570	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00578	48 98		 cdqe
  0057a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00582	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00586	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  0058d	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00595	48 98		 cdqe
  00597	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0059f	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005a3	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005aa	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b1	48 98		 cdqe
  005b3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005bb	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005bf	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005c6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005cd	48 98		 cdqe
  005cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005d7	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  005db	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005e2	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005e9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005f0	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005fb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  00602	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  00609	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0060d	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00614	33 c0		 xor	 eax, eax
  00616	85 c0		 test	 eax, eax
  00618	74 24		 je	 SHORT $LN21@convert_yu
  0061a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00621	c1 e0 f7	 shl	 eax, -9
  00624	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0062b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00632	c1 e0 f7	 shl	 eax, -9
  00635	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  0063c	eb 29		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  0063e	33 c0		 xor	 eax, eax
  00640	83 f8 01	 cmp	 eax, 1
  00643	74 22		 je	 SHORT $LN23@convert_yu
  00645	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0064c	c1 f8 09	 sar	 eax, 9
  0064f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00656	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0065d	c1 f8 09	 sar	 eax, 9
  00660	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  00667	b8 01 00 00 00	 mov	 eax, 1
  0066c	48 6b c0 00	 imul	 rax, rax, 0
  00670	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00678	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00680	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  00683	b8 01 00 00 00	 mov	 eax, 1
  00688	48 6b c0 01	 imul	 rax, rax, 1
  0068c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00694	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  0069c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  0069f	e9 6b fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  006a4	e9 94 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a9	48 8b cc	 mov	 rcx, rsp
  006ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006b3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b8	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c0	48 33 cc	 xor	 rcx, rsp
  006c3	e8 00 00 00 00	 call	 __security_check_cookie
  006c8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006cf	5f		 pop	 rdi
  006d0	5e		 pop	 rsi
  006d1	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_nv12_p

; 424  : static void convert_yuv444_16_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 425  :     convert_yuv444_to_nv12_p_c<uint16_t, 16, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@G$0BA@E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned short,16,unsigned char,8,0>

; 426  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv152 = 320
tv197 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b9	33 d2		 xor	 edx, edx
  000bb	b9 02 00 00 00	 mov	 ecx, 2
  000c0	48 f7 f1	 div	 rcx
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 4f 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 03 c1	 add	 rax, rcx
  00155	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015a	48 03 c1	 add	 rax, rcx
  0015d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00172	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00177	48 63 c9	 movsxd	 rcx, ecx
  0017a	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00182	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00186	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0018a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00192	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00196	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a5	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ac	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b7	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001b9	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c0	ff c0		 inc	 eax
  001c2	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001c9	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 8b c1	 mov	 rax, rcx
  001dc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e4	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fd	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00201	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00208	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020e	33 c0		 xor	 eax, eax
  00210	85 c0		 test	 eax, eax
  00212	74 25		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00214	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021c	4c 8b c0	 mov	 r8, rax
  0021f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00227	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0022f	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  00234	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00239	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00244	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00246	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0024d	ff c0		 inc	 eax
  0024f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00256	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0025d	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00264	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  0026a	33 c0		 xor	 eax, eax
  0026c	83 f8 01	 cmp	 eax, 1
  0026f	74 6d		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00271	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  0027c	c7 84 24 34 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T30[rsp], 8
  00287	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0028f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00297	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0029b	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv152[rsp], eax
  002a2	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002aa	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002b2	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002b7	8b 00		 mov	 eax, DWORD PTR [rax]
  002b9	0f b6 c8	 movzx	 ecx, al
  002bc	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv152[rsp]
  002c3	d3 e0		 shl	 eax, cl
  002c5	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002cd	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d5	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002d9	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002de	33 c0		 xor	 eax, eax
  002e0	85 c0		 test	 eax, eax
  002e2	74 6a		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e4	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002ef	c7 84 24 3c 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T32[rsp], -8
  002fa	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00302	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0030e	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv197[rsp], eax
  00315	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0031d	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  00325	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032a	8b 00		 mov	 eax, DWORD PTR [rax]
  0032c	0f b6 c8	 movzx	 ecx, al
  0032f	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv197[rsp]
  00336	d3 f8		 sar	 eax, cl
  00338	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00340	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00348	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 366  :                     } else {

  0034c	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  0034e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00356	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0035e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00362	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00372	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00376	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0037b	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00380	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00387	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0038e	b8 08 00 00 00	 mov	 eax, 8
  00393	48 6b c0 01	 imul	 rax, rax, 1
  00397	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  0039e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003a3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003a7	48 63 c9	 movsxd	 rcx, ecx
  003aa	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003b2	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003b6	48 8b c1	 mov	 rax, rcx
  003b9	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003c1	b8 08 00 00 00	 mov	 eax, 8
  003c6	48 6b c0 02	 imul	 rax, rax, 2
  003ca	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003d1	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003d6	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003da	48 63 c9	 movsxd	 rcx, ecx
  003dd	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003e9	48 8b c1	 mov	 rax, rcx
  003ec	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  003f4	b8 08 00 00 00	 mov	 eax, 8
  003f9	48 6b c0 01	 imul	 rax, rax, 1
  003fd	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00401	d1 f9		 sar	 ecx, 1
  00403	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00408	48 63 c9	 movsxd	 rcx, ecx
  0040b	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00413	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00417	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0041b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00423	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00427	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0042e	2b c8		 sub	 ecx, eax
  00430	8b c1		 mov	 eax, ecx
  00432	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00436	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0043d	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00448	eb 71		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0044a	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00451	83 c0 04	 add	 eax, 4
  00454	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0045b	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00462	c1 e0 02	 shl	 eax, 2
  00465	48 98		 cdqe
  00467	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0046f	48 03 c8	 add	 rcx, rax
  00472	48 8b c1	 mov	 rax, rcx
  00475	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0047d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00484	c1 e0 02	 shl	 eax, 2
  00487	48 98		 cdqe
  00489	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00491	48 03 c8	 add	 rcx, rax
  00494	48 8b c1	 mov	 rax, rcx
  00497	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  0049f	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  004a3	d1 e0		 shl	 eax, 1
  004a5	48 98		 cdqe
  004a7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004af	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004b3	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004bb	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004bf	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004c6	0f 8d 17 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004cc	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004d4	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004dc	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004e4	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004ec	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004f4	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  004fc	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00500	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00507	2b c8		 sub	 ecx, eax
  00509	8b c1		 mov	 eax, ecx
  0050b	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0050f	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  00516	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00521	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  00523	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  0052a	83 c0 02	 add	 eax, 2
  0052d	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00534	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  0053c	48 83 c0 04	 add	 rax, 4
  00540	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00548	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00550	48 83 c0 02	 add	 rax, 2
  00554	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  0055c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00564	48 83 c0 02	 add	 rax, 2
  00568	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00570	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00577	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0057e	0f 8d 5a 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00584	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0058c	48 98		 cdqe
  0058e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00596	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0059a	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  005a1	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  005a9	48 98		 cdqe
  005ab	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005b3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005b7	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005be	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c5	48 98		 cdqe
  005c7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005cf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005d3	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005da	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005e1	48 98		 cdqe
  005e3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005eb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005ef	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  005f6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005fd	d1 e0		 shl	 eax, 1
  005ff	48 98		 cdqe
  00601	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00609	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0060d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  00614	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0061b	d1 e0		 shl	 eax, 1
  0061d	48 98		 cdqe
  0061f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00627	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0062b	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00632	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0063a	48 98		 cdqe
  0063c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00644	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00648	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  0064f	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  00657	48 98		 cdqe
  00659	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00661	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00665	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  0066c	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  00674	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  0067b	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  0067f	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  00686	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  0068e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  00695	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  00699	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  006a0	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  006a8	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006af	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006b3	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006ba	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006c2	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006c9	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006cd	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006d4	33 c0		 xor	 eax, eax
  006d6	83 f8 01	 cmp	 eax, 1
  006d9	74 46		 je	 SHORT $LN21@convert_yu
  006db	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006e2	c1 e0 06	 shl	 eax, 6
  006e5	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006ec	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006f3	c1 e0 06	 shl	 eax, 6
  006f6	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  006fd	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00704	c1 e0 06	 shl	 eax, 6
  00707	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  0070e	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00715	c1 e0 06	 shl	 eax, 6
  00718	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  0071f	eb 4a		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00721	33 c0		 xor	 eax, eax
  00723	85 c0		 test	 eax, eax
  00725	74 44		 je	 SHORT $LN23@convert_yu
  00727	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  0072e	c1 f8 fa	 sar	 eax, -6
  00731	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  00738	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  0073f	c1 f8 fa	 sar	 eax, -6
  00742	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  00749	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00750	c1 f8 fa	 sar	 eax, -6
  00753	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  0075a	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00761	c1 f8 fa	 sar	 eax, -6
  00764	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  0076b	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00770	48 98		 cdqe
  00772	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0077a	0f b7 94 24 08
	01 00 00	 movzx	 edx, WORD PTR cu_y0$24[rsp]
  00782	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00786	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0078b	ff c0		 inc	 eax
  0078d	48 98		 cdqe
  0078f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  00797	0f b7 94 24 10
	01 00 00	 movzx	 edx, WORD PTR cv_y0$26[rsp]
  0079f	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  007a3	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007a7	48 98		 cdqe
  007a9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007b1	0f b7 94 24 0c
	01 00 00	 movzx	 edx, WORD PTR cu_y1$25[rsp]
  007b9	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007bd	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007c1	ff c0		 inc	 eax
  007c3	48 98		 cdqe
  007c5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007cd	0f b7 94 24 14
	01 00 00	 movzx	 edx, WORD PTR cv_y1$27[rsp]
  007d5	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 404  :         }

  007d9	e9 45 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007de	e9 67 fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007e3	48 8b cc	 mov	 rcx, rsp
  007e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007ed	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007f2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007fa	48 33 cc	 xor	 rcx, rsp
  007fd	e8 00 00 00 00	 call	 __security_check_cookie
  00802	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00809	5f		 pop	 rdi
  0080a	5e		 pop	 rsi
  0080b	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_p010_i

; 420  : static void convert_yuv444_to_p010_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 421  :     convert_yuv444_to_nv12_i_c<uint8_t, 8, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned short,16,0>

; 422  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_to_p010_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_p010_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv152 = 296
tv197 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b9	33 d2		 xor	 edx, edx
  000bb	b9 02 00 00 00	 mov	 ecx, 2
  000c0	48 f7 f1	 div	 rcx
  000c3	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c7	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000cb	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d2	2b c8		 sub	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000dd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e1	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000f0	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000f8	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000fd	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00102	48 8b f9	 mov	 rdi, rcx
  00105	48 8b f0	 mov	 rsi, rax
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb
  0010f	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00114	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8b f1	 mov	 rsi, rcx
  0011f	b9 0c 00 00 00	 mov	 ecx, 12
  00124	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	0f 84 4f 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  0013e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00143	48 63 c9	 movsxd	 rcx, ecx
  00146	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00152	48 03 c1	 add	 rax, rcx
  00155	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0015a	48 03 c1	 add	 rax, rcx
  0015d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00172	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00177	48 63 c9	 movsxd	 rcx, ecx
  0017a	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00182	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00186	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0018a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00192	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00196	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a5	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001ac	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001b7	eb 44		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001b9	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001c0	ff c0		 inc	 eax
  001c2	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001c9	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001d6	48 03 c8	 add	 rcx, rax
  001d9	48 8b c1	 mov	 rax, rcx
  001dc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001e4	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001f1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001fd	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00201	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  00208	0f 8d 72 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  0020e	33 c0		 xor	 eax, eax
  00210	85 c0		 test	 eax, eax
  00212	74 25		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  00214	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  0021c	4c 8b c0	 mov	 r8, rax
  0021f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  00227	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  0022f	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  00234	e9 42 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00239	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  00244	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00246	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  0024d	ff c0		 inc	 eax
  0024f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  00256	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  0025d	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  00264	0f 8d 11 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  0026a	33 c0		 xor	 eax, eax
  0026c	83 f8 01	 cmp	 eax, 1
  0026f	74 6d		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00271	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  0027c	c7 84 24 1c 01
	00 00 08 00 00
	00		 mov	 DWORD PTR $T24[rsp], 8
  00287	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0028f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  00297	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0029b	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv152[rsp], eax
  002a2	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002aa	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002b2	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002b7	8b 00		 mov	 eax, DWORD PTR [rax]
  002b9	0f b6 c8	 movzx	 ecx, al
  002bc	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv152[rsp]
  002c3	d3 e0		 shl	 eax, cl
  002c5	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002cd	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002d5	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002d9	e9 98 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002de	33 c0		 xor	 eax, eax
  002e0	85 c0		 test	 eax, eax
  002e2	74 6a		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002e4	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002ef	c7 84 24 24 01
	00 00 f8 ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -8
  002fa	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00302	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0030a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0030e	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv197[rsp], eax
  00315	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0031d	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00325	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0032a	8b 00		 mov	 eax, DWORD PTR [rax]
  0032c	0f b6 c8	 movzx	 ecx, al
  0032f	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv197[rsp]
  00336	d3 f8		 sar	 eax, cl
  00338	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00340	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00348	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 308  :                     } else {

  0034c	eb 28		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  0034e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00356	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0035e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00362	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  0036a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  00372	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00376	e9 cb fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0037b	e9 39 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00380	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00387	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  0038e	b8 08 00 00 00	 mov	 eax, 8
  00393	48 6b c0 01	 imul	 rax, rax, 1
  00397	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  0039e	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003a3	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003a7	48 63 c9	 movsxd	 rcx, ecx
  003aa	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003b2	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003b6	48 8b c1	 mov	 rax, rcx
  003b9	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003c1	b8 08 00 00 00	 mov	 eax, 8
  003c6	48 6b c0 02	 imul	 rax, rax, 2
  003ca	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003d1	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003d6	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003da	48 63 c9	 movsxd	 rcx, ecx
  003dd	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003e9	48 8b c1	 mov	 rax, rcx
  003ec	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  003f4	b8 08 00 00 00	 mov	 eax, 8
  003f9	48 6b c0 01	 imul	 rax, rax, 1
  003fd	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00401	d1 f9		 sar	 ecx, 1
  00403	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00408	48 63 c9	 movsxd	 rcx, ecx
  0040b	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00413	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00417	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0041b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00423	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0042e	eb 6c		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00430	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00437	83 c0 02	 add	 eax, 2
  0043a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00441	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00448	d1 e0		 shl	 eax, 1
  0044a	48 98		 cdqe
  0044c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00454	48 03 c8	 add	 rcx, rax
  00457	48 8b c1	 mov	 rax, rcx
  0045a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00462	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00469	d1 e0		 shl	 eax, 1
  0046b	48 98		 cdqe
  0046d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00475	48 03 c8	 add	 rcx, rax
  00478	48 8b c1	 mov	 rax, rcx
  0047b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00483	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  00488	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00490	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00494	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  0049c	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004a0	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004a7	0f 8d f3 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004ad	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004b5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004bd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004c5	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004cd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004d5	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004dd	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004e1	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004e8	2b c8		 sub	 ecx, eax
  004ea	8b c1		 mov	 eax, ecx
  004ec	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004f0	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  004f7	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00502	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  00504	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  0050b	83 c0 02	 add	 eax, 2
  0050e	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00515	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  0051d	48 83 c0 04	 add	 rax, 4
  00521	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  00529	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00531	48 83 c0 02	 add	 rax, 2
  00535	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  0053d	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00545	48 83 c0 02	 add	 rax, 2
  00549	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00551	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  00558	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  0055f	0f 8d 36 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00565	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0056d	48 98		 cdqe
  0056f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00577	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0057b	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00582	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0058a	48 98		 cdqe
  0058c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00594	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00598	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  0059f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005a6	48 98		 cdqe
  005a8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005b0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005b4	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005bb	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005c2	48 98		 cdqe
  005c4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005cc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005d0	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005d7	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005de	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005e5	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005e9	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005f0	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  005f7	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  005fe	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00602	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  00609	33 c0		 xor	 eax, eax
  0060b	83 f8 01	 cmp	 eax, 1
  0060e	74 24		 je	 SHORT $LN21@convert_yu
  00610	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00617	c1 e0 07	 shl	 eax, 7
  0061a	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00621	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00628	c1 e0 07	 shl	 eax, 7
  0062b	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00632	eb 28		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00634	33 c0		 xor	 eax, eax
  00636	85 c0		 test	 eax, eax
  00638	74 22		 je	 SHORT $LN23@convert_yu
  0063a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00641	c1 f8 f9	 sar	 eax, -7
  00644	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0064b	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00652	c1 f8 f9	 sar	 eax, -7
  00655	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  0065c	b8 02 00 00 00	 mov	 eax, 2
  00661	48 6b c0 00	 imul	 rax, rax, 0
  00665	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0066d	0f b7 94 24 f8
	00 00 00	 movzx	 edx, WORD PTR cu$20[rsp]
  00675	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 336  :             dstC[1] = (Tout)cv;

  00679	b8 02 00 00 00	 mov	 eax, 2
  0067e	48 6b c0 01	 imul	 rax, rax, 1
  00682	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0068a	0f b7 94 24 fc
	00 00 00	 movzx	 edx, WORD PTR cv$21[rsp]
  00692	66 89 14 01	 mov	 WORD PTR [rcx+rax], dx

; 337  :         }

  00696	e9 69 fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  0069b	e9 90 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  006a0	48 8b cc	 mov	 rcx, rsp
  006a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006aa	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006af	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006b7	48 33 cc	 xor	 rcx, rsp
  006ba	e8 00 00 00 00	 call	 __security_check_cookie
  006bf	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006c6	5f		 pop	 rdi
  006c7	5e		 pop	 rsi
  006c8	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_p010_p

; 416  : static void convert_yuv444_to_p010_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 417  :     convert_yuv444_to_nv12_p_c<uint8_t, 8, uint16_t, 16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@E$07G$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned short,16,0>

; 418  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_to_p010_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_p010_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
uv_fin$ = 192
y$10 = 196
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cy2u$20 = 248
cy2v$21 = 252
cy3u$22 = 256
cy3v$23 = 260
cu_y0$24 = 264
cu_y1$25 = 268
cv_y0$26 = 272
cv_y1$27 = 276
$T28 = 288
$T29 = 304
$T30 = 308
$T31 = 312
$T32 = 316
tv147 = 320
tv192 = 324
__$ArrayPad$ = 328
dst$ = 368
src$ = 376
width$ = 384
src_y_pitch_byte$ = 392
src_uv_pitch_byte$ = 400
dst_y_pitch_byte$ = 408
height$ = 416
dst_height$ = 424
thread_id$ = 432
thread_n$ = 440
crop$ = 448
??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>

; 342  : static void __forceinline convert_yuv444_to_nv12_i_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR [rsp+368]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 343  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 344  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 345  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 346  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 347  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 348  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 349  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 350  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b8	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 351  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000bc	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000c0	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c7	2b c8		 sub	 ecx, eax
  000c9	8b c1		 mov	 eax, ecx
  000cb	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d6	44 8b 8c 24 b0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000de	44 8b c0	 mov	 r8d, eax
  000e1	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000e5	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  000ed	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f2	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  000f7	48 8b f9	 mov	 rdi, rcx
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb
  00104	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00109	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 352  :     //Y成分のコピー
; 353  :     if (!uv_only) {

  0011b	33 c0		 xor	 eax, eax
  0011d	83 f8 01	 cmp	 eax, 1
  00120	0f 84 4d 02 00
	00		 je	 $LN14@convert_yu

; 354  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00126	b8 08 00 00 00	 mov	 eax, 8
  0012b	48 6b c0 00	 imul	 rax, rax, 0
  0012f	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00133	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00138	48 63 c9	 movsxd	 rcx, ecx
  0013b	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00143	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00147	48 03 c1	 add	 rax, rcx
  0014a	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0014f	48 03 c1	 add	 rax, rcx
  00152	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 355  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  0015a	b8 08 00 00 00	 mov	 eax, 8
  0015f	48 6b c0 00	 imul	 rax, rax, 0
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00167	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 356  :         const int y_width = width - crop_right - crop_left;

  00186	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0018a	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00191	2b c8		 sub	 ecx, eax
  00193	8b c1		 mov	 eax, ecx
  00195	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00199	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 357  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001a0	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001ab	eb 46		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ad	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001b4	ff c0		 inc	 eax
  001b6	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001bd	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ca	48 03 c8	 add	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001d8	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001dd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001f3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001f7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001fe	0f 8d 6f 01 00
	00		 jge	 $LN3@convert_yu

; 358  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00204	33 c0		 xor	 eax, eax
  00206	83 f8 01	 cmp	 eax, 1
  00209	74 25		 je	 SHORT $LN15@convert_yu

; 359  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0020b	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00213	4c 8b c0	 mov	 r8, rax
  00216	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0021e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00226	e8 00 00 00 00	 call	 memcpy

; 360  :             } else {

  0022b	e9 3e 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 361  :                 for (int x = 0; x < y_width; x++) {

  00230	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  0023b	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0023d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00244	ff c0		 inc	 eax
  00246	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0024d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00254	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  0025b	0f 8d 0d 01 00
	00		 jge	 $LN6@convert_yu

; 362  :                     if (out_bit_depth > in_bit_depth) {

  00261	33 c0		 xor	 eax, eax
  00263	85 c0		 test	 eax, eax
  00265	74 6c		 je	 SHORT $LN17@convert_yu

; 363  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00267	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T29[rsp], 0
  00272	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T30[rsp], 0
  0027d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00285	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0028d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00291	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv147[rsp], eax
  00298	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  002a0	48 8d 8c 24 34
	01 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  002a8	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ad	8b 00		 mov	 eax, DWORD PTR [rax]
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv147[rsp]
  002b9	d3 e0		 shl	 eax, cl
  002bb	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002c3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002cb	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002ce	e9 96 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 364  :                     } else if (out_bit_depth < in_bit_depth) {

  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	74 69		 je	 SHORT $LN19@convert_yu

; 365  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002d9	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T31[rsp], 0
  002e4	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T32[rsp], 0
  002ef	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  002f7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002ff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00303	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  0030a	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  00312	48 8d 8c 24 3c
	01 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  0031a	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0031f	8b 00		 mov	 eax, DWORD PTR [rax]
  00321	0f b6 c8	 movzx	 ecx, al
  00324	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  0032b	d3 f8		 sar	 eax, cl
  0032d	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00335	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0033d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 366  :                     } else {

  00340	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 367  :                         dstLine[x] = (Tout)srcYLine[x];

  00342	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0034a	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00352	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0035a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00362	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00366	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 368  :                     }
; 369  :                 }

  00369	e9 cf fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 370  :             }
; 371  :         }

  0036e	e9 3a fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 372  :     }
; 373  :     //UV成分のコピー
; 374  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00373	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0037a	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 375  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  00381	b8 08 00 00 00	 mov	 eax, 8
  00386	48 6b c0 01	 imul	 rax, rax, 1
  0038a	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  00391	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00396	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  0039a	48 63 c9	 movsxd	 rcx, ecx
  0039d	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003a5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003a9	48 8b c1	 mov	 rax, rcx
  003ac	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 376  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003b4	b8 08 00 00 00	 mov	 eax, 8
  003b9	48 6b c0 02	 imul	 rax, rax, 2
  003bd	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003c4	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003c9	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003cd	48 63 c9	 movsxd	 rcx, ecx
  003d0	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003d8	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003dc	48 8b c1	 mov	 rax, rcx
  003df	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 377  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  003e7	b8 08 00 00 00	 mov	 eax, 8
  003ec	48 6b c0 01	 imul	 rax, rax, 1
  003f0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  003f4	d1 f9		 sar	 ecx, 1
  003f6	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  003fb	48 63 c9	 movsxd	 rcx, ecx
  003fe	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00406	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0040a	48 8b c1	 mov	 rax, rcx
  0040d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 378  :     const int uv_fin = height - crop_bottom - crop_up;

  00415	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  00419	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00420	2b c8		 sub	 ecx, eax
  00422	8b c1		 mov	 eax, ecx
  00424	2b 44 24 34	 sub	 eax, DWORD PTR crop_up$[rsp]
  00428	89 84 24 c0 00
	00 00		 mov	 DWORD PTR uv_fin$[rsp], eax

; 379  :     for (int y = 0; y < y_range.len; y += 4, srcULine += src_uv_pitch * 4, srcVLine += src_uv_pitch * 4, dstLine += dst_y_pitch * 2) {

  0042f	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  0043a	eb 73		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0043c	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00443	83 c0 04	 add	 eax, 4
  00446	89 84 24 c4 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  0044d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00454	c1 e0 02	 shl	 eax, 2
  00457	48 98		 cdqe
  00459	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00461	48 03 c8	 add	 rcx, rax
  00464	48 8b c1	 mov	 rax, rcx
  00467	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0046f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  00476	c1 e0 02	 shl	 eax, 2
  00479	48 98		 cdqe
  0047b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00483	48 03 c8	 add	 rcx, rax
  00486	48 8b c1	 mov	 rax, rcx
  00489	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00491	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00495	d1 e0		 shl	 eax, 1
  00497	48 98		 cdqe
  00499	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  004a1	48 03 c8	 add	 rcx, rax
  004a4	48 8b c1	 mov	 rax, rcx
  004a7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  004af	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  004b3	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  004ba	0f 8d 13 03 00
	00		 jge	 $LN9@convert_yu

; 380  :         Tout *dstC = dstLine;

  004c0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004c8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 381  :         Tin *srcU = srcULine;

  004d0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004d8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 382  :         Tin *srcV = srcVLine;

  004e0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004e8	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 383  :         const int x_fin = width - crop_right - crop_left;

  004f0	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004f4	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fb	2b c8		 sub	 ecx, eax
  004fd	8b c1		 mov	 eax, ecx
  004ff	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00503	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 384  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  0050a	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  00515	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  00517	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  0051e	83 c0 02	 add	 eax, 2
  00521	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00528	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00530	48 83 c0 02	 add	 rax, 2
  00534	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0053c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00544	48 83 c0 02	 add	 rax, 2
  00548	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00550	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00558	48 83 c0 02	 add	 rax, 2
  0055c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00564	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0056b	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00572	0f 8d 56 02 00
	00		 jge	 $LN12@convert_yu

; 385  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00578	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00580	48 98		 cdqe
  00582	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0058a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0058e	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 386  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00595	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0059d	48 98		 cdqe
  0059f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005a7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005ab	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 387  :             int cy1u = srcU[1*src_uv_pitch + 0];

  005b2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b9	48 98		 cdqe
  005bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005c3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005c7	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 388  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005ce	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005d5	48 98		 cdqe
  005d7	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005df	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005e3	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 389  :             int cy2u = srcU[2*src_uv_pitch + 0];

  005ea	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005f1	d1 e0		 shl	 eax, 1
  005f3	48 98		 cdqe
  005f5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005fd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00601	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cy2u$20[rsp], eax

; 390  :             int cy2v = srcV[2*src_uv_pitch + 0];

  00608	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0060f	d1 e0		 shl	 eax, 1
  00611	48 98		 cdqe
  00613	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  0061b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0061f	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cy2v$21[rsp], eax

; 391  :             int cy3u = srcU[3*src_uv_pitch + 0];

  00626	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0062e	48 98		 cdqe
  00630	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  00638	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0063c	89 84 24 00 01
	00 00		 mov	 DWORD PTR cy3u$22[rsp], eax

; 392  :             int cy3v = srcV[3*src_uv_pitch + 0];

  00643	6b 84 24 a4 00
	00 00 03	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 3
  0064b	48 98		 cdqe
  0064d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00655	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00659	89 84 24 04 01
	00 00		 mov	 DWORD PTR cy3v$23[rsp], eax

; 393  : 
; 394  :             int cu_y0 = cy0u * 3 + cy2u * 1 + 2;

  00660	6b 84 24 e8 00
	00 00 03	 imul	 eax, DWORD PTR cy0u$16[rsp], 3
  00668	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR cy2u$20[rsp]
  0066f	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00673	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax

; 395  :             int cu_y1 = cy1u * 1 + cy3u * 3 + 2;

  0067a	6b 84 24 00 01
	00 00 03	 imul	 eax, DWORD PTR cy3u$22[rsp], 3
  00682	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  00689	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  0068d	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax

; 396  :             int cv_y0 = cy0v * 3 + cy2v * 1 + 2;

  00694	6b 84 24 ec 00
	00 00 03	 imul	 eax, DWORD PTR cy0v$17[rsp], 3
  0069c	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR cy2v$21[rsp]
  006a3	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  006a7	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax

; 397  :             int cv_y1 = cy1v * 1 + cy3v * 3 + 2;

  006ae	6b 84 24 04 01
	00 00 03	 imul	 eax, DWORD PTR cy3v$23[rsp], 3
  006b6	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  006bd	8d 44 01 02	 lea	 eax, DWORD PTR [rcx+rax+2]
  006c1	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax

; 398  :             CHANGE_BIT_DEPTH_4(cu_y0, cu_y1, cv_y0, cv_y1, 2);

  006c8	33 c0		 xor	 eax, eax
  006ca	85 c0		 test	 eax, eax
  006cc	74 46		 je	 SHORT $LN21@convert_yu
  006ce	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  006d5	c1 e0 fe	 shl	 eax, -2
  006d8	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  006df	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  006e6	c1 e0 fe	 shl	 eax, -2
  006e9	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  006f0	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  006f7	c1 e0 fe	 shl	 eax, -2
  006fa	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  00701	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00708	c1 e0 fe	 shl	 eax, -2
  0070b	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
  00712	eb 4b		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00714	33 c0		 xor	 eax, eax
  00716	83 f8 01	 cmp	 eax, 1
  00719	74 44		 je	 SHORT $LN23@convert_yu
  0071b	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR cu_y0$24[rsp]
  00722	c1 f8 02	 sar	 eax, 2
  00725	89 84 24 08 01
	00 00		 mov	 DWORD PTR cu_y0$24[rsp], eax
  0072c	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR cu_y1$25[rsp]
  00733	c1 f8 02	 sar	 eax, 2
  00736	89 84 24 0c 01
	00 00		 mov	 DWORD PTR cu_y1$25[rsp], eax
  0073d	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR cv_y0$26[rsp]
  00744	c1 f8 02	 sar	 eax, 2
  00747	89 84 24 10 01
	00 00		 mov	 DWORD PTR cv_y0$26[rsp], eax
  0074e	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR cv_y1$27[rsp]
  00755	c1 f8 02	 sar	 eax, 2
  00758	89 84 24 14 01
	00 00		 mov	 DWORD PTR cv_y1$27[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 399  : 
; 400  :             dstC[0*dst_y_pitch + 0] = (Tout)cu_y0;

  0075f	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  00764	48 98		 cdqe
  00766	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0076e	0f b6 94 24 08
	01 00 00	 movzx	 edx, BYTE PTR cu_y0$24[rsp]
  00776	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 401  :             dstC[0*dst_y_pitch + 1] = (Tout)cv_y0;

  00779	6b 44 24 44 00	 imul	 eax, DWORD PTR dst_y_pitch$[rsp], 0
  0077e	ff c0		 inc	 eax
  00780	48 98		 cdqe
  00782	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0078a	0f b6 94 24 10
	01 00 00	 movzx	 edx, BYTE PTR cv_y0$26[rsp]
  00792	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 402  :             dstC[1*dst_y_pitch + 0] = (Tout)cu_y1;

  00795	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  00799	48 98		 cdqe
  0079b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007a3	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR cu_y1$25[rsp]
  007ab	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 403  :             dstC[1*dst_y_pitch + 1] = (Tout)cv_y1;

  007ae	8b 44 24 44	 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  007b2	ff c0		 inc	 eax
  007b4	48 98		 cdqe
  007b6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  007be	0f b6 94 24 14
	01 00 00	 movzx	 edx, BYTE PTR cv_y1$27[rsp]
  007c6	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 404  :         }

  007c9	e9 49 fd ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 405  :     }

  007ce	e9 69 fc ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 406  : }

  007d3	48 8b cc	 mov	 rcx, rsp
  007d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  007dd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007e2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007ea	48 33 cc	 xor	 rcx, rsp
  007ed	e8 00 00 00 00	 call	 __security_check_cookie
  007f2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  007f9	5f		 pop	 rdi
  007fa	5e		 pop	 rsi
  007fb	c3		 ret	 0
??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_i

; 412  : static void convert_yuv444_to_nv12_i(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 413  :     convert_yuv444_to_nv12_i_c<uint8_t, 8, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_i_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_i_c<unsigned char,8,unsigned char,8,0>

; 414  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
src_y_pitch$ = 64
dst_y_pitch$ = 68
y_range$ = 88
$T4 = 120
srcYLine$5 = 136
dstLine$6 = 144
y_width$7 = 152
y$8 = 156
x$9 = 160
src_uv_pitch$ = 164
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$10 = 192
dstC$11 = 200
srcU$12 = 208
srcV$13 = 216
x_fin$14 = 224
x$15 = 228
cy0u$16 = 232
cy0v$17 = 236
cy1u$18 = 240
cy1v$19 = 244
cu$20 = 248
cv$21 = 252
$T22 = 264
$T23 = 280
$T24 = 284
$T25 = 288
$T26 = 292
tv147 = 296
tv192 = 300
__$ArrayPad$ = 304
dst$ = 352
src$ = 360
width$ = 368
src_y_pitch_byte$ = 376
src_uv_pitch_byte$ = 384
dst_y_pitch_byte$ = 392
height$ = 400
dst_height$ = 408
thread_id$ = 416
thread_n$ = 424
crop$ = 432
??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>

; 284  : static void __forceinline convert_yuv444_to_nv12_p_c(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     static_assert((sizeof(Tin)  == 1 && in_bit_depth  == 8) || (sizeof(Tin)  == 2 && 8 < in_bit_depth  && in_bit_depth  <= 16), "invalid input bit depth.");
; 286  :     static_assert((sizeof(Tout) == 1 && out_bit_depth == 8) || (sizeof(Tout) == 2 && 8 < out_bit_depth && out_bit_depth <= 16), "invalid output bit depth.");
; 287  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 288  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 289  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 290  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 291  :     const int src_y_pitch = src_y_pitch_byte / sizeof(Tin);

  000a6	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000ad	89 44 24 40	 mov	 DWORD PTR src_y_pitch$[rsp], eax

; 292  :     const int dst_y_pitch = dst_y_pitch_byte / sizeof(Tout);

  000b1	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b8	89 44 24 44	 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 293  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000bc	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000c0	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c7	2b c8		 sub	 ecx, eax
  000c9	8b c1		 mov	 eax, ecx
  000cb	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d6	44 8b 8c 24 a0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000de	44 8b c0	 mov	 r8d, eax
  000e1	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000e5	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  000ed	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f2	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  000f7	48 8b f9	 mov	 rdi, rcx
  000fa	48 8b f0	 mov	 rsi, rax
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb
  00104	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00109	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 294  :     //Y成分のコピー
; 295  :     if (!uv_only) {

  0011b	33 c0		 xor	 eax, eax
  0011d	83 f8 01	 cmp	 eax, 1
  00120	0f 84 4d 02 00
	00		 je	 $LN14@convert_yu

; 296  :         Tin *srcYLine = (Tin *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00126	b8 08 00 00 00	 mov	 eax, 8
  0012b	48 6b c0 00	 imul	 rax, rax, 0
  0012f	8b 4c 24 40	 mov	 ecx, DWORD PTR src_y_pitch$[rsp]
  00133	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00138	48 63 c9	 movsxd	 rcx, ecx
  0013b	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00143	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00147	48 03 c1	 add	 rax, rcx
  0014a	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0014f	48 03 c1	 add	 rax, rcx
  00152	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax

; 297  :         Tout *dstLine = (Tout *)dst[0] + dst_y_pitch * y_range.start_dst;

  0015a	b8 08 00 00 00	 mov	 eax, 8
  0015f	48 6b c0 00	 imul	 rax, rax, 0
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00167	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax

; 298  :         const int y_width = width - crop_right - crop_left;

  00186	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0018a	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00191	2b c8		 sub	 ecx, eax
  00193	8b c1		 mov	 eax, ecx
  00195	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00199	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$7[rsp], eax

; 299  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  001a0	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  001ab	eb 46		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001ad	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  001b4	ff c0		 inc	 eax
  001b6	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  001bd	48 63 44 24 40	 movsxd	 rax, DWORD PTR src_y_pitch$[rsp]
  001c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  001ca	48 03 c8	 add	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$5[rsp], rax
  001d8	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  001dd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$6[rsp], rax
$LN4@convert_yu:
  001f3	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001f7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001fe	0f 8d 6f 01 00
	00		 jge	 $LN3@convert_yu

; 300  :             if (in_bit_depth == out_bit_depth && sizeof(Tin) == sizeof(Tout)) {

  00204	33 c0		 xor	 eax, eax
  00206	83 f8 01	 cmp	 eax, 1
  00209	74 25		 je	 SHORT $LN15@convert_yu

; 301  :                 memcpy(dstLine, srcYLine, y_width * sizeof(Tin));

  0020b	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR y_width$7[rsp]
  00213	4c 8b c0	 mov	 r8, rax
  00216	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$5[rsp]
  0021e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$6[rsp]
  00226	e8 00 00 00 00	 call	 memcpy

; 302  :             } else {

  0022b	e9 3e 01 00 00	 jmp	 $LN16@convert_yu
$LN15@convert_yu:

; 303  :                 for (int x = 0; x < y_width; x++) {

  00230	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$9[rsp], 0
  0023b	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0023d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR x$9[rsp]
  00244	ff c0		 inc	 eax
  00246	89 84 24 a0 00
	00 00		 mov	 DWORD PTR x$9[rsp], eax
$LN7@convert_yu:
  0024d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$7[rsp]
  00254	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR x$9[rsp], eax
  0025b	0f 8d 0d 01 00
	00		 jge	 $LN6@convert_yu

; 304  :                     if (out_bit_depth > in_bit_depth) {

  00261	33 c0		 xor	 eax, eax
  00263	85 c0		 test	 eax, eax
  00265	74 6c		 je	 SHORT $LN17@convert_yu

; 305  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) << std::max(out_bit_depth - in_bit_depth, 0));

  00267	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T23[rsp], 0
  00272	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T24[rsp], 0
  0027d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  00285	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  0028d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00291	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv147[rsp], eax
  00298	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  002a0	48 8d 8c 24 1c
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002a8	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  002ad	8b 00		 mov	 eax, DWORD PTR [rax]
  002af	0f b6 c8	 movzx	 ecx, al
  002b2	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv147[rsp]
  002b9	d3 e0		 shl	 eax, cl
  002bb	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  002c3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  002cb	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002ce	e9 96 00 00 00	 jmp	 $LN18@convert_yu
$LN17@convert_yu:

; 306  :                     } else if (out_bit_depth < in_bit_depth) {

  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	74 69		 je	 SHORT $LN19@convert_yu

; 307  :                         dstLine[x] = (Tout)((int)(srcYLine[x]) >> std::max(in_bit_depth - out_bit_depth, 0));

  002d9	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T25[rsp], 0
  002e4	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T26[rsp], 0
  002ef	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  002f7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$5[rsp]
  002ff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00303	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  0030a	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  00312	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  0031a	e8 00 00 00 00	 call	 ??$max@H@std@@YAAEBHAEBH0@Z ; std::max<int>
  0031f	8b 00		 mov	 eax, DWORD PTR [rax]
  00321	0f b6 c8	 movzx	 ecx, al
  00324	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv192[rsp]
  0032b	d3 f8		 sar	 eax, cl
  0032d	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00335	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0033d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 308  :                     } else {

  00340	eb 27		 jmp	 SHORT $LN20@convert_yu
$LN19@convert_yu:

; 309  :                         dstLine[x] = (Tout)srcYLine[x];

  00342	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR x$9[rsp]
  0034a	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR x$9[rsp]
  00352	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dstLine$6[rsp]
  0035a	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR srcYLine$5[rsp]
  00362	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00366	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN20@convert_yu:
$LN18@convert_yu:

; 310  :                     }
; 311  :                 }

  00369	e9 cf fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:
$LN16@convert_yu:

; 312  :             }
; 313  :         }

  0036e	e9 3a fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:
$LN14@convert_yu:

; 314  :     }
; 315  :     //UV成分のコピー
; 316  :     const int src_uv_pitch = src_uv_pitch_byte / sizeof(Tin);

  00373	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0037a	89 84 24 a4 00
	00 00		 mov	 DWORD PTR src_uv_pitch$[rsp], eax

; 317  :     Tin *srcULine = (Tin *)src[1] + ((src_uv_pitch * y_range.start_src) + crop_left);

  00381	b8 08 00 00 00	 mov	 eax, 8
  00386	48 6b c0 01	 imul	 rax, rax, 1
  0038a	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  00391	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  00396	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  0039a	48 63 c9	 movsxd	 rcx, ecx
  0039d	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003a5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003a9	48 8b c1	 mov	 rax, rcx
  003ac	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 318  :     Tin *srcVLine = (Tin *)src[2] + ((src_uv_pitch * y_range.start_src) + crop_left);

  003b4	b8 08 00 00 00	 mov	 eax, 8
  003b9	48 6b c0 02	 imul	 rax, rax, 2
  003bd	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch$[rsp]
  003c4	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$[rsp]
  003c9	03 4c 24 30	 add	 ecx, DWORD PTR crop_left$[rsp]
  003cd	48 63 c9	 movsxd	 rcx, ecx
  003d0	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003d8	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003dc	48 8b c1	 mov	 rax, rcx
  003df	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 319  :     Tout *dstLine = (Tout *)dst[1] + (dst_y_pitch >> 1) * y_range.start_dst;

  003e7	b8 08 00 00 00	 mov	 eax, 8
  003ec	48 6b c0 01	 imul	 rax, rax, 1
  003f0	8b 4c 24 44	 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  003f4	d1 f9		 sar	 ecx, 1
  003f6	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  003fb	48 63 c9	 movsxd	 rcx, ecx
  003fe	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00406	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0040a	48 8b c1	 mov	 rax, rcx
  0040d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 320  :     for (int y = 0; y < y_range.len; y += 2, srcULine += src_uv_pitch * 2, srcVLine += src_uv_pitch * 2, dstLine += dst_y_pitch) {

  00415	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00420	eb 6e		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00422	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  00429	83 c0 02	 add	 eax, 2
  0042c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  00433	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0043a	d1 e0		 shl	 eax, 1
  0043c	48 98		 cdqe
  0043e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00446	48 03 c8	 add	 rcx, rax
  00449	48 8b c1	 mov	 rax, rcx
  0044c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00454	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0045b	d1 e0		 shl	 eax, 1
  0045d	48 98		 cdqe
  0045f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00467	48 03 c8	 add	 rcx, rax
  0046a	48 8b c1	 mov	 rax, rcx
  0046d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00475	48 63 44 24 44	 movsxd	 rax, DWORD PTR dst_y_pitch$[rsp]
  0047a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00482	48 03 c8	 add	 rcx, rax
  00485	48 8b c1	 mov	 rax, rcx
  00488	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yu:
  00490	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00494	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  0049b	0f 8d ef 01 00
	00		 jge	 $LN9@convert_yu

; 321  :         Tout *dstC = dstLine;

  004a1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  004a9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax

; 322  :         Tin *srcU = srcULine;

  004b1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  004b9	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax

; 323  :         Tin *srcV = srcVLine;

  004c1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  004c9	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax

; 324  :         const int x_fin = width - crop_right - crop_left;

  004d1	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  004d5	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004dc	2b c8		 sub	 ecx, eax
  004de	8b c1		 mov	 eax, ecx
  004e0	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  004e4	89 84 24 e0 00
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 325  :         for (int x = 0; x < x_fin; x += 2, dstC += 2, srcU += 2, srcV += 2) {

  004eb	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  004f6	eb 4d		 jmp	 SHORT $LN13@convert_yu
$LN11@convert_yu:
  004f8	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  004ff	83 c0 02	 add	 eax, 2
  00502	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  00509	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR dstC$11[rsp]
  00511	48 83 c0 02	 add	 rax, 2
  00515	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR dstC$11[rsp], rax
  0051d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcU$12[rsp]
  00525	48 83 c0 02	 add	 rax, 2
  00529	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcU$12[rsp], rax
  00531	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR srcV$13[rsp]
  00539	48 83 c0 02	 add	 rax, 2
  0053d	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR srcV$13[rsp], rax
$LN13@convert_yu:
  00545	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0054c	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00553	0f 8d 32 01 00
	00		 jge	 $LN12@convert_yu

; 326  :             int cy0u = srcU[0*src_uv_pitch + 0];

  00559	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  00561	48 98		 cdqe
  00563	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  0056b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0056f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR cy0u$16[rsp], eax

; 327  :             int cy0v = srcV[0*src_uv_pitch + 0];

  00576	6b 84 24 a4 00
	00 00 00	 imul	 eax, DWORD PTR src_uv_pitch$[rsp], 0
  0057e	48 98		 cdqe
  00580	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  00588	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0058c	89 84 24 ec 00
	00 00		 mov	 DWORD PTR cy0v$17[rsp], eax

; 328  :             int cy1u = srcU[1*src_uv_pitch + 0];

  00593	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  0059a	48 98		 cdqe
  0059c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcU$12[rsp]
  005a4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005a8	89 84 24 f0 00
	00 00		 mov	 DWORD PTR cy1u$18[rsp], eax

; 329  :             int cy1v = srcV[1*src_uv_pitch + 0];

  005af	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch$[rsp]
  005b6	48 98		 cdqe
  005b8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR srcV$13[rsp]
  005c0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005c4	89 84 24 f4 00
	00 00		 mov	 DWORD PTR cy1v$19[rsp], eax

; 330  : 
; 331  :             int cu = cy0u + cy1u + 1;

  005cb	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR cy0u$16[rsp]
  005d2	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR cy1u$18[rsp]
  005d9	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005dd	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax

; 332  :             int cv = cy0v + cy1v + 1;

  005e4	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR cy0v$17[rsp]
  005eb	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR cy1v$19[rsp]
  005f2	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  005f6	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax

; 333  :             CHANGE_BIT_DEPTH_2(cu, cv, 1);

  005fd	33 c0		 xor	 eax, eax
  005ff	85 c0		 test	 eax, eax
  00601	74 24		 je	 SHORT $LN21@convert_yu
  00603	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  0060a	c1 e0 ff	 shl	 eax, -1
  0060d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  00614	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  0061b	c1 e0 ff	 shl	 eax, -1
  0061e	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
  00625	eb 27		 jmp	 SHORT $LN22@convert_yu
$LN21@convert_yu:
  00627	33 c0		 xor	 eax, eax
  00629	83 f8 01	 cmp	 eax, 1
  0062c	74 20		 je	 SHORT $LN23@convert_yu
  0062e	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR cu$20[rsp]
  00635	d1 f8		 sar	 eax, 1
  00637	89 84 24 f8 00
	00 00		 mov	 DWORD PTR cu$20[rsp], eax
  0063e	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR cv$21[rsp]
  00645	d1 f8		 sar	 eax, 1
  00647	89 84 24 fc 00
	00 00		 mov	 DWORD PTR cv$21[rsp], eax
$LN23@convert_yu:
$LN22@convert_yu:

; 334  : 
; 335  :             dstC[0] = (Tout)cu;

  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	48 6b c0 00	 imul	 rax, rax, 0
  00657	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0065f	0f b6 94 24 f8
	00 00 00	 movzx	 edx, BYTE PTR cu$20[rsp]
  00667	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 336  :             dstC[1] = (Tout)cv;

  0066a	b8 01 00 00 00	 mov	 eax, 1
  0066f	48 6b c0 01	 imul	 rax, rax, 1
  00673	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR dstC$11[rsp]
  0067b	0f b6 94 24 fc
	00 00 00	 movzx	 edx, BYTE PTR cv$21[rsp]
  00683	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 337  :         }

  00686	e9 6d fe ff ff	 jmp	 $LN11@convert_yu
$LN12@convert_yu:

; 338  :     }

  0068b	e9 92 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 339  : }

  00690	48 8b cc	 mov	 rcx, rsp
  00693	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0069a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0069f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006a7	48 33 cc	 xor	 rcx, rsp
  006aa	e8 00 00 00 00	 call	 __security_check_cookie
  006af	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  006b6	5f		 pop	 rdi
  006b7	5e		 pop	 rsi
  006b8	c3		 ret	 0
??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_nv12_p

; 408  : static void convert_yuv444_to_nv12_p(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 409  :     convert_yuv444_to_nv12_p_c<uint8_t, 8, uint8_t, 8, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_to_nv12_p_c@E$07E$07$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_nv12_p_c<unsigned char,8,unsigned char,8,0>

; 410  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_to_nv12_p@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_nv12_p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
dst$ = 64
y_range$ = 88
$T4 = 120
src$ = 136
srcFrame$ = 144
dstYFrame$ = 152
dstCFrame$ = 160
y$5 = 168
dstY$6 = 176
dstC$7 = 184
srcP$8 = 192
x_fin$9 = 200
x$10 = 204
$T11 = 216
tv275 = 232
tv298 = 236
tv321 = 240
tv344 = 244
__$ArrayPad$ = 248
dst_array$ = 288
src_array$ = 296
width$ = 304
src_y_pitch_byte$ = 312
src_uv_pitch_byte$ = 320
dst_y_pitch_byte$ = 328
height$ = 336
dst_height$ = 344
thread_id$ = 352
thread_n$ = 360
crop$ = 368
?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i

; 223  : void convert_yuy2_to_nv12_i(void **dst_array, const void **src_array, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 224  :     int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 225  :     int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 226  :     int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 227  :     int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 228  :     void *dst = dst_array[0];

  000a6	b8 08 00 00 00	 mov	 eax, 8
  000ab	48 6b c0 00	 imul	 rax, rax, 0
  000af	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst_array$[rsp]
  000b7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000bb	48 89 44 24 40	 mov	 QWORD PTR dst$[rsp], rax

; 229  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c0	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000c4	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cb	2b c8		 sub	 ecx, eax
  000cd	8b c1		 mov	 eax, ecx
  000cf	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d6	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000da	44 8b 8c 24 60
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e2	44 8b c0	 mov	 r8d, eax
  000e5	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000e9	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  000fb	48 8b f9	 mov	 rdi, rcx
  000fe	48 8b f0	 mov	 rsi, rax
  00101	b9 0c 00 00 00	 mov	 ecx, 12
  00106	f3 a4		 rep movsb
  00108	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  0010d	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00112	48 8b f8	 mov	 rdi, rax
  00115	48 8b f1	 mov	 rsi, rcx
  00118	b9 0c 00 00 00	 mov	 ecx, 12
  0011d	f3 a4		 rep movsb

; 230  :     const void *src = src_array[0];

  0011f	b8 08 00 00 00	 mov	 eax, 8
  00124	48 6b c0 00	 imul	 rax, rax, 0
  00128	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR src_array$[rsp]
  00130	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00134	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR src$[rsp], rax

; 231  :     uint8_t *srcFrame = (uint8_t *)src;

  0013c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00144	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR srcFrame$[rsp], rax

; 232  :     uint8_t *dstYFrame = (uint8_t *)dst;

  0014c	48 8b 44 24 40	 mov	 rax, QWORD PTR dst$[rsp]
  00151	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR dstYFrame$[rsp], rax

; 233  :     uint8_t *dstCFrame = dstYFrame + dst_y_pitch_byte * dst_height;

  00159	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 84 24 58
	01 00 00	 imul	 eax, DWORD PTR dst_height$[rsp]
  00168	48 98		 cdqe
  0016a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dstYFrame$[rsp]
  00172	48 03 c8	 add	 rcx, rax
  00175	48 8b c1	 mov	 rax, rcx
  00178	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR dstCFrame$[rsp], rax

; 234  :     for (int y = y_range.start_dst; y < (y_range.start_dst + y_range.len); y += 4) {

  00180	8b 44 24 5c	 mov	 eax, DWORD PTR y_range$[rsp+4]
  00184	89 84 24 a8 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  0018b	eb 11		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  0018d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  00194	83 c0 04	 add	 eax, 4
  00197	89 84 24 a8 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
$LN4@convert_yu:
  0019e	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001a2	8b 4c 24 5c	 mov	 ecx, DWORD PTR y_range$[rsp+4]
  001a6	03 c8		 add	 ecx, eax
  001a8	8b c1		 mov	 eax, ecx
  001aa	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  001b1	0f 8d 29 04 00
	00		 jge	 $LN3@convert_yu

; 235  :         uint8_t *dstY = dstYFrame +   dst_y_pitch_byte * y;

  001b7	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  001be	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR y$5[rsp]
  001c6	48 98		 cdqe
  001c8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dstYFrame$[rsp]
  001d0	48 03 c8	 add	 rcx, rax
  001d3	48 8b c1	 mov	 rax, rcx
  001d6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstY$6[rsp], rax

; 236  :         uint8_t *dstC = dstCFrame + ((dst_y_pitch_byte * y) >> 1);

  001de	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  001e5	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR y$5[rsp]
  001ed	d1 f8		 sar	 eax, 1
  001ef	48 98		 cdqe
  001f1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dstCFrame$[rsp]
  001f9	48 03 c8	 add	 rcx, rax
  001fc	48 8b c1	 mov	 rax, rcx
  001ff	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstC$7[rsp], rax

; 237  :         uint8_t *srcP = srcFrame  +   src_y_pitch_byte * (y + crop_up) + crop_left;

  00207	8b 44 24 34	 mov	 eax, DWORD PTR crop_up$[rsp]
  0020b	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR y$5[rsp]
  00212	03 c8		 add	 ecx, eax
  00214	8b c1		 mov	 eax, ecx
  00216	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0021d	0f af c8	 imul	 ecx, eax
  00220	8b c1		 mov	 eax, ecx
  00222	48 98		 cdqe
  00224	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR srcFrame$[rsp]
  0022c	48 03 c8	 add	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00237	48 03 c1	 add	 rax, rcx
  0023a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR srcP$8[rsp], rax

; 238  :         const int x_fin = width - crop_right - crop_left;

  00242	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00246	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0024d	2b c8		 sub	 ecx, eax
  0024f	8b c1		 mov	 eax, ecx
  00251	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00255	89 84 24 c8 00
	00 00		 mov	 DWORD PTR x_fin$9[rsp], eax

; 239  :         for (int x = 0; x < x_fin; x += 2, dstY += 2, dstC += 2, srcP += 4) {

  0025c	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00267	eb 4d		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00269	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00270	83 c0 02	 add	 eax, 2
  00273	89 84 24 cc 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  0027a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dstY$6[rsp]
  00282	48 83 c0 02	 add	 rax, 2
  00286	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstY$6[rsp], rax
  0028e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR dstC$7[rsp]
  00296	48 83 c0 02	 add	 rax, 2
  0029a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR dstC$7[rsp], rax
  002a2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR srcP$8[rsp]
  002aa	48 83 c0 04	 add	 rax, 4
  002ae	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR srcP$8[rsp], rax
$LN7@convert_yu:
  002b6	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR x_fin$9[rsp]
  002bd	39 84 24 cc 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  002c4	0f 8d 11 03 00
	00		 jge	 $LN6@convert_yu

; 240  :             dstY[0*dst_y_pitch_byte   + 0] = srcP[0*src_y_pitch_byte + 0];

  002ca	6b 84 24 38 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  002d2	48 98		 cdqe
  002d4	6b 8c 24 48 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  002dc	48 63 c9	 movsxd	 rcx, ecx
  002df	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  002e7	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  002ef	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  002f3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 241  :             dstY[0*dst_y_pitch_byte   + 1] = srcP[0*src_y_pitch_byte + 2];

  002f6	6b 84 24 38 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  002fe	83 c0 02	 add	 eax, 2
  00301	48 98		 cdqe
  00303	6b 8c 24 48 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  0030b	ff c1		 inc	 ecx
  0030d	48 63 c9	 movsxd	 rcx, ecx
  00310	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  00318	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00320	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00324	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 242  :             dstY[1*dst_y_pitch_byte   + 0] = srcP[1*src_y_pitch_byte + 0];

  00327	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  0032e	48 98		 cdqe
  00330	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00337	48 63 c9	 movsxd	 rcx, ecx
  0033a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  00342	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  0034a	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0034e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 243  :             dstY[1*dst_y_pitch_byte   + 1] = srcP[1*src_y_pitch_byte + 2];

  00351	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00358	83 c0 02	 add	 eax, 2
  0035b	48 98		 cdqe
  0035d	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00364	ff c1		 inc	 ecx
  00366	48 63 c9	 movsxd	 rcx, ecx
  00369	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  00371	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00379	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0037d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 244  :             dstY[2*dst_y_pitch_byte   + 0] = srcP[2*src_y_pitch_byte + 0];

  00380	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00387	03 c0		 add	 eax, eax
  00389	48 98		 cdqe
  0038b	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00392	03 c9		 add	 ecx, ecx
  00394	48 63 c9	 movsxd	 rcx, ecx
  00397	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  0039f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  003a7	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  003ab	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 245  :             dstY[2*dst_y_pitch_byte   + 1] = srcP[2*src_y_pitch_byte + 2];

  003ae	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  003b5	8d 44 00 02	 lea	 eax, DWORD PTR [rax+rax+2]
  003b9	48 98		 cdqe
  003bb	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  003c2	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  003c6	48 63 c9	 movsxd	 rcx, ecx
  003c9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  003d1	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  003d9	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  003dd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 246  :             dstY[3*dst_y_pitch_byte   + 0] = srcP[3*src_y_pitch_byte + 0];

  003e0	6b 84 24 38 01
	00 00 03	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 3
  003e8	48 98		 cdqe
  003ea	6b 8c 24 48 01
	00 00 03	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 3
  003f2	48 63 c9	 movsxd	 rcx, ecx
  003f5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  003fd	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00405	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00409	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 247  :             dstY[3*dst_y_pitch_byte   + 1] = srcP[3*src_y_pitch_byte + 2];

  0040c	6b 84 24 38 01
	00 00 03	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 3
  00414	83 c0 02	 add	 eax, 2
  00417	48 98		 cdqe
  00419	6b 8c 24 48 01
	00 00 03	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 3
  00421	ff c1		 inc	 ecx
  00423	48 63 c9	 movsxd	 rcx, ecx
  00426	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  0042e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00436	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0043a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 248  :             dstC[0*dst_y_pitch_byte/2 + 0] =(srcP[0*src_y_pitch_byte + 1] * 3 + srcP[2*src_y_pitch_byte + 1] * 1 + 2)>>2;

  0043d	6b 84 24 38 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  00445	ff c0		 inc	 eax
  00447	48 98		 cdqe
  00449	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  00451	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00455	6b c0 03	 imul	 eax, eax, 3
  00458	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0045f	8d 4c 09 01	 lea	 ecx, DWORD PTR [rcx+rcx+1]
  00463	48 63 c9	 movsxd	 rcx, ecx
  00466	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  0046e	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00472	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00476	c1 f8 02	 sar	 eax, 2
  00479	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv275[rsp], eax
  00480	6b 8c 24 48 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  00488	8b c1		 mov	 eax, ecx
  0048a	99		 cdq
  0048b	2b c2		 sub	 eax, edx
  0048d	d1 f8		 sar	 eax, 1
  0048f	48 98		 cdqe
  00491	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  00499	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR tv275[rsp]
  004a0	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 249  :             dstC[0*dst_y_pitch_byte/2 + 1] =(srcP[0*src_y_pitch_byte + 3] * 3 + srcP[2*src_y_pitch_byte + 3] * 1 + 2)>>2;

  004a3	6b 84 24 38 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  004ab	83 c0 03	 add	 eax, 3
  004ae	48 98		 cdqe
  004b0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  004b8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004bc	6b c0 03	 imul	 eax, eax, 3
  004bf	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  004c6	8d 4c 09 03	 lea	 ecx, DWORD PTR [rcx+rcx+3]
  004ca	48 63 c9	 movsxd	 rcx, ecx
  004cd	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  004d5	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  004d9	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  004dd	c1 f8 02	 sar	 eax, 2
  004e0	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  004e7	6b 8c 24 48 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  004ef	8b c1		 mov	 eax, ecx
  004f1	99		 cdq
  004f2	2b c2		 sub	 eax, edx
  004f4	d1 f8		 sar	 eax, 1
  004f6	ff c0		 inc	 eax
  004f8	48 98		 cdqe
  004fa	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  00502	8b 94 24 ec 00
	00 00		 mov	 edx, DWORD PTR tv298[rsp]
  00509	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 250  :             dstC[1*dst_y_pitch_byte/2 + 0] =(srcP[1*src_y_pitch_byte + 1] * 1 + srcP[3*src_y_pitch_byte + 1] * 3 + 2)>>2;

  0050c	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00513	ff c0		 inc	 eax
  00515	48 98		 cdqe
  00517	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  0051f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00523	6b 8c 24 38 01
	00 00 03	 imul	 ecx, DWORD PTR src_y_pitch_byte$[rsp], 3
  0052b	ff c1		 inc	 ecx
  0052d	48 63 c9	 movsxd	 rcx, ecx
  00530	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  00538	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0053c	6b c9 03	 imul	 ecx, ecx, 3
  0053f	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00543	c1 f8 02	 sar	 eax, 2
  00546	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv321[rsp], eax
  0054d	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00554	8b c1		 mov	 eax, ecx
  00556	99		 cdq
  00557	2b c2		 sub	 eax, edx
  00559	d1 f8		 sar	 eax, 1
  0055b	48 98		 cdqe
  0055d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  00565	8b 94 24 f0 00
	00 00		 mov	 edx, DWORD PTR tv321[rsp]
  0056c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 251  :             dstC[1*dst_y_pitch_byte/2 + 1] =(srcP[1*src_y_pitch_byte + 3] * 1 + srcP[3*src_y_pitch_byte + 3] * 3 + 2)>>2;

  0056f	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00576	83 c0 03	 add	 eax, 3
  00579	48 98		 cdqe
  0057b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  00583	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00587	6b 8c 24 38 01
	00 00 03	 imul	 ecx, DWORD PTR src_y_pitch_byte$[rsp], 3
  0058f	83 c1 03	 add	 ecx, 3
  00592	48 63 c9	 movsxd	 rcx, ecx
  00595	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  0059d	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  005a1	6b c9 03	 imul	 ecx, ecx, 3
  005a4	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  005a8	c1 f8 02	 sar	 eax, 2
  005ab	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv344[rsp], eax
  005b2	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  005b9	8b c1		 mov	 eax, ecx
  005bb	99		 cdq
  005bc	2b c2		 sub	 eax, edx
  005be	d1 f8		 sar	 eax, 1
  005c0	ff c0		 inc	 eax
  005c2	48 98		 cdqe
  005c4	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  005cc	8b 94 24 f4 00
	00 00		 mov	 edx, DWORD PTR tv344[rsp]
  005d3	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 252  :         }

  005d6	e9 8e fc ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 253  :     }

  005db	e9 ad fb ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 254  : }

  005e0	48 8b cc	 mov	 rcx, rsp
  005e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005ea	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005ef	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005f7	48 33 cc	 xor	 rcx, rsp
  005fa	e8 00 00 00 00	 call	 __security_check_cookie
  005ff	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00606	5f		 pop	 rdi
  00607	5e		 pop	 rsi
  00608	c3		 ret	 0
?convert_yuy2_to_nv12_i@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
dst$ = 64
src$ = 72
y_range$ = 88
$T4 = 120
srcFrame$ = 136
dstYFrame$ = 144
dstCFrame$ = 152
y$5 = 160
dstY$6 = 168
dstC$7 = 176
srcP$8 = 184
x_fin$9 = 192
x$10 = 196
$T11 = 208
tv234 = 224
tv256 = 228
__$ArrayPad$ = 232
dst_array$ = 272
src_array$ = 280
width$ = 288
src_y_pitch_byte$ = 296
src_uv_pitch_byte$ = 304
dst_y_pitch_byte$ = 312
height$ = 320
dst_height$ = 328
thread_id$ = 336
thread_n$ = 344
crop$ = 352
?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12

; 195  : void convert_yuy2_to_nv12(void **dst_array, const void **src_array, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 196  :     int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 197  :     int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 198  :     int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 199  :     int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 200  :     void *dst = dst_array[0];

  000a6	b8 08 00 00 00	 mov	 eax, 8
  000ab	48 6b c0 00	 imul	 rax, rax, 0
  000af	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dst_array$[rsp]
  000b7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000bb	48 89 44 24 40	 mov	 QWORD PTR dst$[rsp], rax

; 201  :     const void *src = src_array[0];

  000c0	b8 08 00 00 00	 mov	 eax, 8
  000c5	48 6b c0 00	 imul	 rax, rax, 0
  000c9	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR src_array$[rsp]
  000d1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000d5	48 89 44 24 48	 mov	 QWORD PTR src$[rsp], rax

; 202  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000da	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000de	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000e5	2b c8		 sub	 ecx, eax
  000e7	8b c1		 mov	 eax, ecx
  000e9	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000f0	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000f4	44 8b 8c 24 50
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000fc	44 8b c0	 mov	 r8d, eax
  000ff	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  00103	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0010b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00110	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00115	48 8b f9	 mov	 rdi, rcx
  00118	48 8b f0	 mov	 rsi, rax
  0011b	b9 0c 00 00 00	 mov	 ecx, 12
  00120	f3 a4		 rep movsb
  00122	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00127	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  0012c	48 8b f8	 mov	 rdi, rax
  0012f	48 8b f1	 mov	 rsi, rcx
  00132	b9 0c 00 00 00	 mov	 ecx, 12
  00137	f3 a4		 rep movsb

; 203  :     uint8_t *srcFrame = (uint8_t *)src;

  00139	48 8b 44 24 48	 mov	 rax, QWORD PTR src$[rsp]
  0013e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcFrame$[rsp], rax

; 204  :     uint8_t *dstYFrame = (uint8_t *)dst;

  00146	48 8b 44 24 40	 mov	 rax, QWORD PTR dst$[rsp]
  0014b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstYFrame$[rsp], rax

; 205  :     uint8_t *dstCFrame = dstYFrame + dst_y_pitch_byte * dst_height;

  00153	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 84 24 48
	01 00 00	 imul	 eax, DWORD PTR dst_height$[rsp]
  00162	48 98		 cdqe
  00164	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstYFrame$[rsp]
  0016c	48 03 c8	 add	 rcx, rax
  0016f	48 8b c1	 mov	 rax, rcx
  00172	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR dstCFrame$[rsp], rax

; 206  :     for (int y = y_range.start_dst; y < (y_range.start_dst + y_range.len); y += 2) {

  0017a	8b 44 24 5c	 mov	 eax, DWORD PTR y_range$[rsp+4]
  0017e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  00185	eb 11		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00187	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  0018e	83 c0 02	 add	 eax, 2
  00191	89 84 24 a0 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
$LN4@convert_yu:
  00198	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0019c	8b 4c 24 5c	 mov	 ecx, DWORD PTR y_range$[rsp+4]
  001a0	03 c8		 add	 ecx, eax
  001a2	8b c1		 mov	 eax, ecx
  001a4	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  001ab	0f 8d 9d 02 00
	00		 jge	 $LN3@convert_yu

; 207  :         uint8_t *dstY = dstYFrame +   dst_y_pitch_byte * y;

  001b1	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b8	0f af 84 24 a0
	00 00 00	 imul	 eax, DWORD PTR y$5[rsp]
  001c0	48 98		 cdqe
  001c2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstYFrame$[rsp]
  001ca	48 03 c8	 add	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dstY$6[rsp], rax

; 208  :         uint8_t *dstC = dstCFrame + ((dst_y_pitch_byte * y) >> 1);

  001d8	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  001df	0f af 84 24 a0
	00 00 00	 imul	 eax, DWORD PTR y$5[rsp]
  001e7	d1 f8		 sar	 eax, 1
  001e9	48 98		 cdqe
  001eb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dstCFrame$[rsp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstC$7[rsp], rax

; 209  :         uint8_t *srcP = srcFrame  +   src_y_pitch_byte * (y + crop_up) + crop_left;

  00201	8b 44 24 34	 mov	 eax, DWORD PTR crop_up$[rsp]
  00205	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y$5[rsp]
  0020c	03 c8		 add	 ecx, eax
  0020e	8b c1		 mov	 eax, ecx
  00210	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00217	0f af c8	 imul	 ecx, eax
  0021a	8b c1		 mov	 eax, ecx
  0021c	48 98		 cdqe
  0021e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcFrame$[rsp]
  00226	48 03 c8	 add	 rcx, rax
  00229	48 8b c1	 mov	 rax, rcx
  0022c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00231	48 03 c1	 add	 rax, rcx
  00234	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR srcP$8[rsp], rax

; 210  :         const int x_fin = width - crop_right - crop_left;

  0023c	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00240	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00247	2b c8		 sub	 ecx, eax
  00249	8b c1		 mov	 eax, ecx
  0024b	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0024f	89 84 24 c0 00
	00 00		 mov	 DWORD PTR x_fin$9[rsp], eax

; 211  :         for (int x = 0; x < x_fin; x += 2, dstY += 2, dstC += 2, srcP += 4) {

  00256	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  00261	eb 4d		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00263	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  0026a	83 c0 02	 add	 eax, 2
  0026d	89 84 24 c4 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  00274	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dstY$6[rsp]
  0027c	48 83 c0 02	 add	 rax, 2
  00280	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dstY$6[rsp], rax
  00288	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dstC$7[rsp]
  00290	48 83 c0 02	 add	 rax, 2
  00294	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR dstC$7[rsp], rax
  0029c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR srcP$8[rsp]
  002a4	48 83 c0 04	 add	 rax, 4
  002a8	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR srcP$8[rsp], rax
$LN7@convert_yu:
  002b0	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR x_fin$9[rsp]
  002b7	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  002be	0f 8d 85 01 00
	00		 jge	 $LN6@convert_yu

; 212  :             dstY[0*dst_y_pitch_byte  + 0] = srcP[0*src_y_pitch_byte + 0];

  002c4	6b 84 24 28 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  002cc	48 98		 cdqe
  002ce	6b 8c 24 38 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  002d6	48 63 c9	 movsxd	 rcx, ecx
  002d9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  002e1	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  002e9	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  002ed	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 213  :             dstY[0*dst_y_pitch_byte  + 1] = srcP[0*src_y_pitch_byte + 2];

  002f0	6b 84 24 28 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  002f8	83 c0 02	 add	 eax, 2
  002fb	48 98		 cdqe
  002fd	6b 8c 24 38 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  00305	ff c1		 inc	 ecx
  00307	48 63 c9	 movsxd	 rcx, ecx
  0030a	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  00312	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  0031a	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  0031e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 214  :             dstY[1*dst_y_pitch_byte  + 0] = srcP[1*src_y_pitch_byte + 0];

  00321	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00328	48 98		 cdqe
  0032a	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00331	48 63 c9	 movsxd	 rcx, ecx
  00334	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  0033c	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00344	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00348	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 215  :             dstY[1*dst_y_pitch_byte  + 1] = srcP[1*src_y_pitch_byte + 2];

  0034b	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00352	83 c0 02	 add	 eax, 2
  00355	48 98		 cdqe
  00357	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0035e	ff c1		 inc	 ecx
  00360	48 63 c9	 movsxd	 rcx, ecx
  00363	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR dstY$6[rsp]
  0036b	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR srcP$8[rsp]
  00373	0f b6 04 07	 movzx	 eax, BYTE PTR [rdi+rax]
  00377	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 216  :             dstC[0*dst_y_pitch_byte/2+ 0] =(srcP[0*src_y_pitch_byte + 1] + srcP[1*src_y_pitch_byte + 1] + 1)/2;

  0037a	6b 84 24 28 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  00382	ff c0		 inc	 eax
  00384	48 98		 cdqe
  00386	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  0038e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00392	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00399	ff c1		 inc	 ecx
  0039b	48 63 c9	 movsxd	 rcx, ecx
  0039e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  003a6	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  003aa	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  003ae	99		 cdq
  003af	2b c2		 sub	 eax, edx
  003b1	d1 f8		 sar	 eax, 1
  003b3	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv234[rsp], eax
  003ba	6b 8c 24 38 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  003c2	8b c1		 mov	 eax, ecx
  003c4	99		 cdq
  003c5	2b c2		 sub	 eax, edx
  003c7	d1 f8		 sar	 eax, 1
  003c9	48 98		 cdqe
  003cb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  003d3	8b 94 24 e0 00
	00 00		 mov	 edx, DWORD PTR tv234[rsp]
  003da	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 217  :             dstC[0*dst_y_pitch_byte/2+ 1] =(srcP[0*src_y_pitch_byte + 3] + srcP[1*src_y_pitch_byte + 3] + 1)/2;

  003dd	6b 84 24 28 01
	00 00 00	 imul	 eax, DWORD PTR src_y_pitch_byte$[rsp], 0
  003e5	83 c0 03	 add	 eax, 3
  003e8	48 98		 cdqe
  003ea	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR srcP$8[rsp]
  003f2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003f6	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  003fd	83 c1 03	 add	 ecx, 3
  00400	48 63 c9	 movsxd	 rcx, ecx
  00403	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR srcP$8[rsp]
  0040b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0040f	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00413	99		 cdq
  00414	2b c2		 sub	 eax, edx
  00416	d1 f8		 sar	 eax, 1
  00418	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv256[rsp], eax
  0041f	6b 8c 24 38 01
	00 00 00	 imul	 ecx, DWORD PTR dst_y_pitch_byte$[rsp], 0
  00427	8b c1		 mov	 eax, ecx
  00429	99		 cdq
  0042a	2b c2		 sub	 eax, edx
  0042c	d1 f8		 sar	 eax, 1
  0042e	ff c0		 inc	 eax
  00430	48 98		 cdqe
  00432	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dstC$7[rsp]
  0043a	8b 94 24 e4 00
	00 00		 mov	 edx, DWORD PTR tv256[rsp]
  00441	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 218  :         }

  00444	e9 1a fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 219  :     }

  00449	e9 39 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 220  : }

  0044e	48 8b cc	 mov	 rcx, rsp
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00458	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0045d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00465	48 33 cc	 xor	 rcx, rsp
  00468	e8 00 00 00 00	 call	 __security_check_cookie
  0046d	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  00474	5f		 pop	 rdi
  00475	5e		 pop	 rsi
  00476	c3		 ret	 0
?convert_yuy2_to_nv12@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
h$ = 32
y_range$ = 56
y0$ = 84
y1$ = 88
__$ArrayPad$ = 104
$T4 = 144
y_start$ = 152
y_end$ = 160
thread_id$ = 168
thread_n$ = 176
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1e 00 00 00	 mov	 ecx, 30
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c4	 xor	 rax, rsp
  0003a	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 376  :     const int h = y_end - y_start;

  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_start$[rsp]
  00046	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y_end$[rsp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00055	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00059	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR thread_id$[rsp]
  00061	99		 cdq
  00062	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  00069	83 c0 03	 add	 eax, 3
  0006c	83 e0 fc	 and	 eax, -4
  0006f	89 44 24 54	 mov	 DWORD PTR y0$[rsp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  00073	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	8b 4c 24 20	 mov	 ecx, DWORD PTR h$[rsp]
  00080	0f af c8	 imul	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  0008d	83 c0 03	 add	 eax, 3
  00090	83 e0 fc	 and	 eax, -4
  00093	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax

; 380  :     if (y1 > h) {

  00097	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0009b	39 44 24 58	 cmp	 DWORD PTR y1$[rsp], eax
  0009f	7e 08		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  000a1	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  000a5	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  000a9	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000ad	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y_start$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR y_range$[rsp], eax

; 384  :     y_range.start_dst = y0;

  000bc	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c0	89 44 24 3c	 mov	 DWORD PTR y_range$[rsp+4], eax

; 385  :     y_range.len = y1 - y0;

  000c4	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c8	8b 4c 24 58	 mov	 ecx, DWORD PTR y1$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR y_range$[rsp+8], eax

; 386  :     return y_range;

  000d4	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  000d9	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 0c 00 00 00	 mov	 ecx, 12
  000e9	f3 a4		 rep movsb
  000eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 387  : }

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8b cc	 mov	 rcx, rsp
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b c7	 mov	 rax, rdi
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010d	48 33 cc	 xor	 rcx, rsp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00119	5f		 pop	 rdi
  0011a	5e		 pop	 rsi
  0011b	c3		 ret	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
$T4 = 32
<range>$L1$5 = 144
<begin>$L1$6 = 152
<end>$L1$7 = 160
simd_str$8 = 184
$T9 = 224
$T10 = 228
$T11 = 232
$T12 = 236
$T13 = 240
$T14 = 244
$T15 = 248
$T16 = 256
$T17 = 272
tv77 = 288
__$ArrayPad$ = 296
simd$ = 336
?get_simd_str@@YAPEBDI@Z PROC				; get_simd_str

; 1102 : const TCHAR *get_simd_str(unsigned int simd) {

$LN9:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	56		 push	 rsi
  00005	57		 push	 rdi
  00006	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR [rsp+336]
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002a	48 33 c4	 xor	 rax, rsp
  0002d	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1103 :     static std::vector<std::pair<uint32_t, const TCHAR*>> simd_str_list = {

  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  0003a	8b c0		 mov	 eax, eax
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00042	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004b	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004f	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  00052	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA, eax
  00058	0f 8e 70 01 00
	00		 jle	 $LN2@get_simd_s
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA
  00065	e8 00 00 00 00	 call	 _Init_thread_header
  0006a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA, -1
  00071	0f 85 57 01 00
	00		 jne	 $LN2@get_simd_s
  00077	c7 84 24 e4 00
	00 00 80 00 00
	00		 mov	 DWORD PTR $T10[rsp], 128 ; 00000080H
  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69788
  00089	48 8d 94 24 e4
	00 00 00	 lea	 rdx, QWORD PTR $T10[rsp]
  00091	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T4[rsp]
  00096	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[5],0>
  0009b	c7 84 24 e8 00
	00 00 40 00 00
	00		 mov	 DWORD PTR $T11[rsp], 64	; 00000040H
  000a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69789
  000ad	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  000b5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T4[rsp+16]
  000ba	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY03$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY03$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[4],0>
  000bf	c7 84 24 ec 00
	00 00 10 00 00
	00		 mov	 DWORD PTR $T12[rsp], 16
  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69790
  000d1	48 8d 94 24 ec
	00 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  000d9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T4[rsp+32]
  000de	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[7],0>
  000e3	c7 84 24 f0 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T13[rsp], 8
  000ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69791
  000f5	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  000fd	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp+48]
  00102	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY06$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY06$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[7],0>
  00107	c7 84 24 f4 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T14[rsp], 4
  00112	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69792
  00119	48 8d 94 24 f4
	00 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  00121	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T4[rsp+64]
  00126	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY05$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY05$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[6],0>
  0012b	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T15[rsp], 1
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG69793
  0013d	48 8d 94 24 f8
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  00145	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp+80]
  0014a	e8 00 00 00 00	 call	 ??$?0W4<unnamed-enum-NONE>@@AEAY04$$CBD$0A@@?$pair@IPEBD@std@@QEAA@$$QEAW4<unnamed-enum-NONE>@@AEAY04$$CBD@Z ; std::pair<unsigned int,char const *>::pair<unsigned int,char const *><enum <unnamed-enum-NONE>,char const (&)[5],0>
  0014f	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  00157	e8 00 00 00 00	 call	 ??0?$allocator@U?$pair@IPEBD@std@@@std@@QEAA@XZ ; std::allocator<std::pair<unsigned int,char const *> >::allocator<std::pair<unsigned int,char const *> >
  0015c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv77[rsp], rax
  00164	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp+96]
  0016c	4c 8b c1	 mov	 r8, rcx
  0016f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T4[rsp]
  00174	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  0017c	e8 00 00 00 00	 call	 ??0?$initializer_list@U?$pair@IPEBD@std@@@std@@QEAA@PEBU?$pair@IPEBD@1@0@Z ; std::initializer_list<std::pair<unsigned int,char const *> >::initializer_list<std::pair<unsigned int,char const *> >
  00181	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  00189	48 8b f9	 mov	 rdi, rcx
  0018c	48 8b f0	 mov	 rsi, rax
  0018f	b9 10 00 00 00	 mov	 ecx, 16
  00194	f3 a4		 rep movsb
  00196	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv77[rsp]
  0019e	4c 8b c0	 mov	 r8, rax
  001a1	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?simd_str_list@?1??get_simd_str@@YAPEBDI@Z@4V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@A
  001b0	e8 00 00 00 00	 call	 ??0?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@IPEBD@std@@@1@AEBV?$allocator@U?$pair@IPEBD@std@@@1@@Z ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fsimd_str_list@?1??get_simd_str@@YAPEBDI@Z@YAXXZ ; `get_simd_str'::`2'::`dynamic atexit destructor for 'simd_str_list''
  001bc	e8 00 00 00 00	 call	 atexit
  001c1	90		 npad	 1
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA
  001c9	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@get_simd_s:

; 1104 :         { AVX2,  _T("AVX2")   },
; 1105 :         { AVX,   _T("AVX")    },
; 1106 :         { SSE42, _T("SSE4.2") },
; 1107 :         { SSE41, _T("SSE4.1") },
; 1108 :         { SSSE3, _T("SSSE3")  },
; 1109 :         { SSE2,  _T("SSE2")   },
; 1110 :     };
; 1111 :     for (auto simd_str : simd_str_list) {

  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?simd_str_list@?1??get_simd_str@@YAPEBDI@Z@4V?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@A
  001d5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR <range>$L1$5[rsp], rax
  001dd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR <range>$L1$5[rsp]
  001e5	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_begin
  001ea	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR <begin>$L1$6[rsp], rax
  001f2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR <range>$L1$5[rsp]
  001fa	e8 00 00 00 00	 call	 ?_Unchecked_end@?$vector@U?$pair@IPEBD@std@@V?$allocator@U?$pair@IPEBD@std@@@2@@std@@QEAAPEAU?$pair@IPEBD@2@XZ ; std::vector<std::pair<unsigned int,char const *>,std::allocator<std::pair<unsigned int,char const *> > >::_Unchecked_end
  001ff	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR <end>$L1$7[rsp], rax
  00207	eb 14		 jmp	 SHORT $LN5@get_simd_s
$LN3@get_simd_s:
  00209	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <begin>$L1$6[rsp]
  00211	48 83 c0 10	 add	 rax, 16
  00215	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR <begin>$L1$6[rsp], rax
$LN5@get_simd_s:
  0021d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <end>$L1$7[rsp]
  00225	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR <begin>$L1$6[rsp], rax
  0022d	74 3c		 je	 SHORT $LN4@get_simd_s
  0022f	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR simd_str$8[rsp]
  00237	48 8b f8	 mov	 rdi, rax
  0023a	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR <begin>$L1$6[rsp]
  00242	b9 10 00 00 00	 mov	 ecx, 16
  00247	f3 a4		 rep movsb

; 1112 :         if (simd_str.first & simd)

  00249	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR simd$[rsp]
  00250	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR simd_str$8[rsp]
  00257	23 c8		 and	 ecx, eax
  00259	8b c1		 mov	 eax, ecx
  0025b	85 c0		 test	 eax, eax
  0025d	74 0a		 je	 SHORT $LN6@get_simd_s

; 1113 :             return simd_str.second;

  0025f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR simd_str$8[rsp+8]
  00267	eb 09		 jmp	 SHORT $LN1@get_simd_s
$LN6@get_simd_s:

; 1114 :     }

  00269	eb 9e		 jmp	 SHORT $LN3@get_simd_s
$LN4@get_simd_s:

; 1115 :     return _T("-");

  0026b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG69795
$LN1@get_simd_s:

; 1116 : }

  00272	48 8b f8	 mov	 rdi, rax
  00275	48 8b cc	 mov	 rcx, rsp
  00278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?get_simd_str@@YAPEBDI@Z$rtcFrameData
  0027f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00284	48 8b c7	 mov	 rax, rdi
  00287	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0028f	48 33 cc	 xor	 rcx, rsp
  00292	e8 00 00 00 00	 call	 __security_check_cookie
  00297	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0029e	5f		 pop	 rdi
  0029f	5e		 pop	 rsi
  002a0	c3		 ret	 0
?get_simd_str@@YAPEBDI@Z ENDP				; get_simd_str
_TEXT	ENDS
text$x	SEGMENT
$T4 = 32
<range>$L1$5 = 144
<begin>$L1$6 = 152
<end>$L1$7 = 160
simd_str$8 = 184
$T9 = 224
$T10 = 228
$T11 = 232
$T12 = 236
$T13 = 240
$T14 = 244
$T15 = 248
$T16 = 256
$T17 = 272
tv77 = 288
__$ArrayPad$ = 296
simd$ = 336
?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA PROC		; `get_simd_str'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA
  0001a	e8 00 00 00 00	 call	 _Init_thread_abort
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA ENDP		; `get_simd_str'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T4 = 32
<range>$L1$5 = 144
<begin>$L1$6 = 152
<end>$L1$7 = 160
simd_str$8 = 184
$T9 = 224
$T10 = 228
$T11 = 232
$T12 = 236
$T13 = 240
$T14 = 244
$T15 = 248
$T16 = 256
$T17 = 272
tv77 = 288
__$ArrayPad$ = 296
simd$ = 336
?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA PROC		; `get_simd_str'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1??get_simd_str@@YAPEBDI@Z@4HA
  0001a	e8 00 00 00 00	 call	 _Init_thread_abort
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0??get_simd_str@@YAPEBDI@Z@4HA ENDP		; `get_simd_str'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.cpp
_TEXT	SEGMENT
availableSIMD$ = 32
convert$ = 40
i$1 = 48
csp_from$ = 80
csp_to$ = 88
uv_only$ = 96
simd$ = 104
?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z PROC ; get_convert_csp_func

; 1080 : const ConvertCSP *get_convert_csp_func(RGY_CSP csp_from, RGY_CSP csp_to, bool uv_only, uint32_t simd) {

$LN10:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	57		 push	 rdi
  00013	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 10 00 00 00	 mov	 ecx, 16
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 4c 24 50	 mov	 ecx, DWORD PTR [rsp+80]

; 1081 :     uint32_t availableSIMD = get_availableSIMD() & simd;

  0002a	e8 00 00 00 00	 call	 ?get_availableSIMD@@YAIXZ ; get_availableSIMD
  0002f	23 44 24 68	 and	 eax, DWORD PTR simd$[rsp]
  00033	89 44 24 20	 mov	 DWORD PTR availableSIMD$[rsp], eax

; 1082 :     const ConvertCSP *convert = nullptr;

  00037	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR convert$[rsp], 0

; 1083 :     for (int i = 0; i < _countof(funcList); i++) {

  00040	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00048	eb 0a		 jmp	 SHORT $LN4@get_conver
$LN2@get_conver:
  0004a	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0004e	ff c0		 inc	 eax
  00050	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@get_conver:
  00054	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00059	48 83 f8 7e	 cmp	 rax, 126		; 0000007eH
  0005d	0f 83 b4 00 00
	00		 jae	 $LN3@get_conver

; 1084 :         if (csp_from != funcList[i].csp_from)

  00063	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00068	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  00073	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00076	39 44 24 50	 cmp	 DWORD PTR csp_from$[rsp], eax
  0007a	74 02		 je	 SHORT $LN5@get_conver

; 1085 :             continue;

  0007c	eb cc		 jmp	 SHORT $LN2@get_conver
$LN5@get_conver:

; 1086 : 
; 1087 :         if (csp_to != funcList[i].csp_to)

  0007e	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00083	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  0008e	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  00092	39 44 24 58	 cmp	 DWORD PTR csp_to$[rsp], eax
  00096	74 02		 je	 SHORT $LN6@get_conver

; 1088 :             continue;

  00098	eb b0		 jmp	 SHORT $LN2@get_conver
$LN6@get_conver:

; 1089 : 
; 1090 :         if (uv_only != funcList[i].uv_only)

  0009a	0f b6 44 24 60	 movzx	 eax, BYTE PTR uv_only$[rsp]
  0009f	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$1[rsp]
  000a4	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  000af	0f b6 4c 0a 08	 movzx	 ecx, BYTE PTR [rdx+rcx+8]
  000b4	3b c1		 cmp	 eax, ecx
  000b6	74 02		 je	 SHORT $LN7@get_conver

; 1091 :             continue;

  000b8	eb 90		 jmp	 SHORT $LN2@get_conver
$LN7@get_conver:

; 1092 : 
; 1093 :         if (funcList[i].simd != (availableSIMD & funcList[i].simd))

  000ba	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  000bf	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  000ca	48 63 54 24 30	 movsxd	 rdx, DWORD PTR i$1[rsp]
  000cf	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  000d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  000da	41 8b 54 10 20	 mov	 edx, DWORD PTR [r8+rdx+32]
  000df	44 8b 44 24 20	 mov	 r8d, DWORD PTR availableSIMD$[rsp]
  000e4	44 23 c2	 and	 r8d, edx
  000e7	41 8b d0	 mov	 edx, r8d
  000ea	39 54 01 20	 cmp	 DWORD PTR [rcx+rax+32], edx
  000ee	74 05		 je	 SHORT $LN8@get_conver

; 1094 :             continue;

  000f0	e9 55 ff ff ff	 jmp	 $LN2@get_conver
$LN8@get_conver:

; 1095 : 
; 1096 :         convert = &funcList[i];

  000f5	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  000fa	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?funcList@@3QBUConvertCSP@@B
  00105	48 03 c8	 add	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	48 89 44 24 28	 mov	 QWORD PTR convert$[rsp], rax

; 1097 :         break;

  00110	eb 05		 jmp	 SHORT $LN3@get_conver

; 1098 :     }

  00112	e9 33 ff ff ff	 jmp	 $LN2@get_conver
$LN3@get_conver:

; 1099 :     return convert;

  00117	48 8b 44 24 28	 mov	 rax, QWORD PTR convert$[rsp]

; 1100 : }

  0011c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00120	5f		 pop	 rdi
  00121	c3		 ret	 0
?get_convert_csp_func@@YAPEBUConvertCSP@@W4RGY_CSP@@0_NI@Z ENDP ; get_convert_csp_func
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1349 :         _Ptr = nullptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1350 :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 70		 je	 SHORT $LN5@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00029	ba 03 00 00 00	 mov	 edx, 3
  0002e	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00039	90		 npad	 1

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 83 c0 08	 add	 rax, 8
  00046	48 89 44 24 38	 mov	 QWORD PTR _Pnext$5[rsp], rax
  0004b	eb 14		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0004d	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnext$5[rsp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  00061	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00066	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006a	74 11		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  0006c	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00071	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00074	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1295 :         }

  0007b	eb d0		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00082	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00085	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1298 :     }

  0008d	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00098	90		 npad	 1
$LN5@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  00099	48 8b cc	 mov	 rcx, rsp
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData
  000a3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a8	90		 npad	 1
  000a9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA PROC ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA ENDP ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA PROC ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA ENDP ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Mycont_$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 1073 : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1074 :     // convert size_t to size_t, unchanged
; 1075 :     return _Len;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Len$[rsp]

; 1076 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00023	48 8b 44 24 68	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00034	48 89 01	 mov	 QWORD PTR [rcx], rax

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00037	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 44 24 30	 mov	 QWORD PTR _Ptr_user$[rsp], rax

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 ff	 imul	 rax, rax, -1
  0004d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  00052	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00056	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 fe	 imul	 rax, rax, -2
  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  00069	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00073	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  00077	75 02		 jne	 SHORT $LN14@Adjust_man
  00079	eb 6b		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00082	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0008e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00093	45 33 c9	 xor	 r9d, r9d
  00096	41 b8 6f 00 00
	00		 mov	 r8d, 111		; 0000006fH
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a3	b9 02 00 00 00	 mov	 ecx, 2
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000ae	83 f8 01	 cmp	 eax, 1
  000b1	75 03		 jne	 SHORT $LN19@Adjust_man
  000b3	cc		 int	 3
  000b4	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000b6	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bf	41 b9 6f 00 00
	00		 mov	 r9d, 111		; 0000006fH
  000c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000e0	33 c0		 xor	 eax, eax
  000e2	85 c0		 test	 eax, eax
  000e4	75 95		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	0f 85 6b ff ff
	ff		 jne	 $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000f0	48 c7 44 24 40
	10 00 00 00	 mov	 QWORD PTR _Min_back_shift$[rsp], 16

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  00103	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00106	48 2b c1	 sub	 rax, rcx
  00109	48 89 44 24 48	 mov	 QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010e	48 83 7c 24 48
	10		 cmp	 QWORD PTR _Back_shift$[rsp], 16
  00114	72 0a		 jb	 SHORT $LN16@Adjust_man
  00116	48 83 7c 24 48
	2f		 cmp	 QWORD PTR _Back_shift$[rsp], 47 ; 0000002fH
  0011c	77 02		 ja	 SHORT $LN16@Adjust_man
  0011e	eb 6b		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00127	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0012c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00133	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00138	45 33 c9	 xor	 r9d, r9d
  0013b	41 b8 79 00 00
	00		 mov	 r8d, 121		; 00000079H
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00148	b9 02 00 00 00	 mov	 ecx, 2
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00153	83 f8 01	 cmp	 eax, 1
  00156	75 03		 jne	 SHORT $LN20@Adjust_man
  00158	cc		 int	 3
  00159	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0015b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00164	41 b9 79 00 00
	00		 mov	 r9d, 121		; 00000079H
  0016a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00185	33 c0		 xor	 eax, eax
  00187	85 c0		 test	 eax, eax
  00189	75 95		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  0018b	33 c0		 xor	 eax, eax
  0018d	85 c0		 test	 eax, eax
  0018f	0f 85 79 ff ff
	ff		 jne	 $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00195	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0019a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  0019f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 123  : }

  001a2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001a6	5f		 pop	 rdi
  001a7	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 47   :         return ::operator new(_Bytes);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00023	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 48   :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 324  :     _THROW(bad_array_new_length{});

  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002b	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 325  : }

  00030	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA PROC ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA ENDP ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA PROC ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA ENDP ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 138  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 137  :         : bad_alloc("bad array new length")

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc
  0002f	90		 npad	 1

; 138  :     {

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 139  :     }

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA PROC		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA ENDP		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA PROC		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA ENDP		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 127  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 126  :         : exception(_Message, 1)

  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Message$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  00038	90		 npad	 1

; 127  :     {

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx

; 128  :     }

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Message$ = 56
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Message$ = 56
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 91   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 0f		 je	 SHORT $LN3@what
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00037	eb 0b		 jmp	 SHORT $LN4@what
$LN3@what:
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00040	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@what:
  00044	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 93   :     }

  00048	48 83 c4 10	 add	 rsp, 16
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 86   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 87   :         __std_exception_destroy(&_Data);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 __std_exception_destroy
  0003e	90		 npad	 1

; 88   :     }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 69   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 68   :         : _Data()

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 10 00 00 00	 mov	 ecx, 16
  00045	f3 aa		 rep stosb

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00055	48 83 c1 08	 add	 rcx, 8
  00059	48 8b d0	 mov	 rdx, rax
  0005c	e8 00 00 00 00	 call	 __std_exception_copy
  00061	90		 npad	 1

; 71   :     }

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 63   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 62   :         : _Data()

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 10 00 00 00	 mov	 ecx, 16
  00032	f3 aa		 rep stosb

; 64   :         _Data._What = _Message;

  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 65   :     }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 644  :     _NODISCARD static constexpr long long(max)() noexcept { // return maximum value

$LN3:
  00000	40 57		 push	 rdi

; 645  :         return LLONG_MAX;

  00002	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 646  :     }

  0000c	5f		 pop	 rdi
  0000d	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 169  :         (void)_Size;
; 170  :         return _Where;

  0000b	48 8b 44 24 18	 mov	 rax, QWORD PTR _Where$[rsp]

; 171  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
END
