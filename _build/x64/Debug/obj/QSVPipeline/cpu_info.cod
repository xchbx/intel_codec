; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?HW_DECODE_LIST@@3QBUCodecMap@@B DD 01bH		; HW_DECODE_LIST
	DD	01H
	DD	0adH
	DD	02H
	DD	02H
	DD	04H
	DD	08bH
	DD	06H
	DD	0a7H
	DD	07H
	DD	046H
	DD	08H
$SG148099 DB	'auto', 00H
$SG153630 DB	00H
	ORG $+2
$SG148101 DB	'copy', 00H
	ORG $+3
$SG148226 DB	'.', 0aH, 00H
	ORG $+1
$SG148227 DB	' for ', 00H
	ORG $+2
$SG148525 DB	'srt', 00H
$SG148230 DB	'avcodec-58.dll', 00H
	ORG $+1
$SG148231 DB	'avformat-58.dll', 00H
$SG148232 DB	'avutil-56.dll', 00H
	ORG $+2
$SG148233 DB	'avfilter-7.dll', 00H
	ORG $+1
$SG148234 DB	'swresample-3.dll', 00H
	ORG $+3
$SG148526 DB	'ass', 00H
$SG148524 DB	'invalid', 00H
$SG148533 DB	'invalid', 00H
$SG148534 DB	'kigou', 00H
	ORG $+2
$SG148535 DB	'box', 00H
$SG148536 DB	'draw', 00H
	ORG $+3
$SG135300 DB	'yuv422', 00H
	ORG $+1
$SG135328 DB	'rgb', 00H
$SG135296 DB	'Invalid', 00H
$SG135297 DB	'nv12', 00H
	ORG $+3
$SG135298 DB	'yv12', 00H
	ORG $+3
$SG135299 DB	'yuy2', 00H
	ORG $+3
$SG135301 DB	'nv16', 00H
	ORG $+3
$SG135302 DB	'yuv444', 00H
	ORG $+1
$SG135303 DB	'yv12(9bit)', 00H
	ORG $+1
$SG135330 DB	'gbr', 00H
$SG135304 DB	'yv12(10bit)', 00H
$SG135333 DB	'y8', 00H
	ORG $+1
$SG135305 DB	'yv12(12bit)', 00H
$SG136278 DB	'VP8', 00H
$SG135306 DB	'yv12(14bit)', 00H
$SG136280 DB	'VP9', 00H
$SG135307 DB	'yv12(16bit)', 00H
$SG135308 DB	'p010', 00H
	ORG $+3
$SG135322 DB	'rgb24r', 00H
	ORG $+1
$SG152900 DB	'vp8', 00H
$SG135309 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG135310 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG135311 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG135312 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG135313 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG135314 DB	'p210', 00H
	ORG $+3
$SG135315 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG135316 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG135317 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG135318 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG135319 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG135320 DB	'yuva444', 00H
$SG135321 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG135323 DB	'rgb32r', 00H
	ORG $+1
$SG135324 DB	'rgb24', 00H
	ORG $+2
$SG135325 DB	'rgb32', 00H
	ORG $+2
$SG135326 DB	'bgr24', 00H
	ORG $+2
$SG135327 DB	'bgr32', 00H
	ORG $+2
$SG135329 DB	'rgba', 00H
	ORG $+3
$SG135331 DB	'gbra', 00H
	ORG $+3
$SG135332 DB	'yc48', 00H
	ORG $+3
$SG135334 DB	'yc16', 00H
	ORG $+3
$SG136266 DB	'H.264/AVC', 00H
	ORG $+2
$SG152901 DB	'raw', 00H
$SG136268 DB	'H.265/HEVC', 00H
	ORG $+1
$SG136270 DB	'MPEG2', 00H
	ORG $+2
$SG136272 DB	'MPEG1', 00H
	ORG $+2
$SG136274 DB	'VC-1', 00H
	ORG $+3
$SG136276 DB	'MPEG4', 00H
	ORG $+2
$SG152903 DB	'CBR', 00H
$SG136282 DB	'unknown', 00H
$SG136389 DB	'unknown', 00H
$SG152896 DB	'h264', 00H
	ORG $+3
$SG152897 DB	'hevc', 00H
	ORG $+3
$SG152898 DB	'mpeg2', 00H
	ORG $+2
$SG152899 DB	'vc-1', 00H
	ORG $+3
$SG152904 DB	'VBR', 00H
$SG152905 DB	'CQP', 00H
$SG152906 DB	'AVBR', 00H
	ORG $+3
$SG152907 DB	'LA', 00H
	ORG $+1
$SG152908 DB	'LA-EXT', 00H
	ORG $+1
$SG152909 DB	'LA-HRD', 00H
	ORG $+1
$SG152910 DB	'LA-ICQ', 00H
	ORG $+1
$SG152911 DB	'ICQ', 00H
$SG152912 DB	'QVBR', 00H
	ORG $+3
$SG152913 DB	'VCM', 00H
	ORG $+4
?list_avc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152915	; list_avc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152916
	DD	042H
	ORG $+4
	DQ	FLAT:$SG152917
	DD	04dH
	ORG $+4
	DQ	FLAT:$SG152918
	DD	064H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152915 DB	'auto', 00H
	ORG $+3
$SG152916 DB	'Baseline', 00H
	ORG $+3
$SG152917 DB	'Main', 00H
	ORG $+3
$SG152918 DB	'High', 00H
	ORG $+3
$SG152920 DB	'auto', 00H
	ORG $+7
?list_hevc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152920	; list_hevc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152921
	DD	01H
	ORG $+4
	DQ	FLAT:$SG152922
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152921 DB	'main', 00H
	ORG $+3
$SG152922 DB	'main10', 00H
	ORG $+1
$SG152924 DB	'main', 00H
	ORG $+3
$SG152925 DB	'high', 00H
	ORG $+3
?list_mpeg2_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152927	; list_mpeg2_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152928
	DD	050H
	ORG $+4
	DQ	FLAT:$SG152929
	DD	040H
	ORG $+4
	DQ	FLAT:$SG152930
	DD	010H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152927 DB	'auto', 00H
	ORG $+3
$SG152928 DB	'Simple', 00H
	ORG $+1
$SG152929 DB	'Main', 00H
	ORG $+3
$SG152930 DB	'High', 00H
	ORG $+3
?list_vc1_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152932	; list_vc1_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152933
	DD	01H
	ORG $+4
	DQ	FLAT:$SG152934
	DD	05H
	ORG $+4
	DQ	FLAT:$SG152935
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152932 DB	'auto', 00H
	ORG $+3
$SG152933 DB	'Simple', 00H
	ORG $+1
$SG152934 DB	'Main', 00H
	ORG $+3
$SG152935 DB	'Advanced', 00H
	ORG $+3
$SG152937 DB	'auto', 00H
	ORG $+7
?list_vp8_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152937	; list_vp8_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152938
	DD	01H
	ORG $+4
	DQ	FLAT:$SG152939
	DD	02H
	ORG $+4
	DQ	FLAT:$SG152940
	DD	03H
	ORG $+4
	DQ	FLAT:$SG152941
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152938 DB	'0', 00H
	ORG $+2
$SG152939 DB	'1', 00H
	ORG $+2
$SG152940 DB	'2', 00H
	ORG $+2
$SG152941 DB	'3', 00H
	ORG $+2
?list_vp9_profile@@3QBUCX_DESC@@B DQ FLAT:$SG152943	; list_vp9_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152944
	DD	01H
	ORG $+4
	DQ	FLAT:$SG152945
	DD	02H
	ORG $+4
	DQ	FLAT:$SG152946
	DD	03H
	ORG $+4
	DQ	FLAT:$SG152947
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152943 DB	'auto', 00H
	ORG $+3
$SG152944 DB	'0', 00H
	ORG $+2
$SG152945 DB	'1', 00H
	ORG $+2
$SG152946 DB	'2', 00H
	ORG $+2
$SG152947 DB	'3', 00H
	ORG $+2
$SG152949 DB	'8', 00H
	ORG $+2
$SG152950 DB	'10', 00H
	ORG $+1
$SG152952 DB	'progressive', 00H
$SG152958 DB	'it', 00H
	ORG $+1
$SG152953 DB	'interlaced(tff)', 00H
$SG152954 DB	'interlaced(bff)', 00H
$SG152956 DB	'none', 00H
	ORG $+3
$SG152957 DB	'normal', 00H
	ORG $+1
$SG152959 DB	'bob', 00H
$SG152961 DB	'32', 00H
	ORG $+1
$SG152962 DB	'2332', 00H
	ORG $+3
$SG152963 DB	'repeat', 00H
	ORG $+1
$SG152964 DB	'41', 00H
	ORG $+5
?list_avc_level@@3QBUCX_DESC@@B DQ FLAT:$SG152966	; list_avc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152967
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG152968
	DD	09H
	ORG $+4
	DQ	FLAT:$SG152969
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG152970
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG152971
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG152972
	DD	014H
	ORG $+4
	DQ	FLAT:$SG152973
	DD	015H
	ORG $+4
	DQ	FLAT:$SG152974
	DD	016H
	ORG $+4
	DQ	FLAT:$SG152975
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG152976
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG152977
	DD	020H
	ORG $+4
	DQ	FLAT:$SG152978
	DD	028H
	ORG $+4
	DQ	FLAT:$SG152979
	DD	029H
	ORG $+4
	DQ	FLAT:$SG152980
	DD	02aH
	ORG $+4
	DQ	FLAT:$SG152981
	DD	032H
	ORG $+4
	DQ	FLAT:$SG152982
	DD	033H
	ORG $+4
	DQ	FLAT:$SG152983
	DD	034H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152966 DB	'auto', 00H
	ORG $+3
$SG152967 DB	'1', 00H
	ORG $+2
$SG152968 DB	'1b', 00H
	ORG $+1
$SG152969 DB	'1.1', 00H
$SG152970 DB	'1.2', 00H
$SG152971 DB	'1.3', 00H
$SG152972 DB	'2', 00H
	ORG $+2
$SG152973 DB	'2.1', 00H
$SG152974 DB	'2.2', 00H
$SG152975 DB	'3', 00H
	ORG $+2
$SG152976 DB	'3.1', 00H
$SG152977 DB	'3.2', 00H
$SG152978 DB	'4', 00H
	ORG $+2
$SG152979 DB	'4.1', 00H
$SG152980 DB	'4.2', 00H
$SG152981 DB	'5', 00H
	ORG $+2
$SG152982 DB	'5.1', 00H
$SG152983 DB	'5.2', 00H
	ORG $+4
?list_hevc_level@@3QBUCX_DESC@@B DQ FLAT:$SG152985	; list_hevc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG152986
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG152987
	DD	014H
	ORG $+4
	DQ	FLAT:$SG152988
	DD	015H
	ORG $+4
	DQ	FLAT:$SG152989
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG152990
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG152991
	DD	028H
	ORG $+4
	DQ	FLAT:$SG152992
	DD	029H
	ORG $+4
	DQ	FLAT:$SG152993
	DD	032H
	ORG $+4
	DQ	FLAT:$SG152994
	DD	033H
	ORG $+4
	DQ	FLAT:$SG152995
	DD	034H
	ORG $+4
	DQ	FLAT:$SG152996
	DD	03cH
	ORG $+4
	DQ	FLAT:$SG152997
	DD	03dH
	ORG $+4
	DQ	FLAT:$SG152998
	DD	03eH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG152985 DB	'auto', 00H
	ORG $+3
$SG152986 DB	'1', 00H
	ORG $+2
$SG152987 DB	'2', 00H
	ORG $+2
$SG152988 DB	'2.1', 00H
$SG152989 DB	'3', 00H
	ORG $+2
$SG152990 DB	'3.1', 00H
$SG152991 DB	'4', 00H
	ORG $+2
$SG152992 DB	'4.1', 00H
$SG152993 DB	'5', 00H
	ORG $+2
$SG152994 DB	'5.1', 00H
$SG152995 DB	'5.2', 00H
$SG152996 DB	'6', 00H
	ORG $+2
$SG152997 DB	'6.1', 00H
$SG152998 DB	'6.2', 00H
	ORG $+4
?list_mpeg2_level@@3QBUCX_DESC@@B DQ FLAT:$SG153000	; list_mpeg2_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG153001
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG153002
	DD	08H
	ORG $+4
	DQ	FLAT:$SG153003
	DD	04H
	ORG $+4
	DQ	FLAT:$SG153004
	DD	06H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG153000 DB	'auto', 00H
	ORG $+3
$SG153001 DB	'low', 00H
$SG153002 DB	'main', 00H
	ORG $+3
$SG153003 DB	'high', 00H
	ORG $+3
$SG153007 DB	'low', 00H
$SG153004 DB	'high1440', 00H
	ORG $+7
?list_vc1_level@@3QBUCX_DESC@@B DQ FLAT:$SG153006	; list_vc1_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG153007
	DD	01H
	ORG $+4
	DQ	FLAT:$SG153008
	DD	03H
	ORG $+4
	DQ	FLAT:$SG153009
	DD	05H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG153006 DB	'auto', 00H
	ORG $+3
$SG153008 DB	'median', 00H
	ORG $+1
$SG153009 DB	'high', 00H
	ORG $+3
$SG153011 DB	'auto', 00H
	ORG $+3
$SG153012 DB	'0', 00H
	ORG $+2
$SG153013 DB	'1', 00H
	ORG $+2
$SG153014 DB	'2', 00H
	ORG $+2
$SG153015 DB	'3', 00H
	ORG $+2
$SG153016 DB	'4', 00H
	ORG $+2
$SG153023 DB	'off', 00H
?list_vp8_level@@3QBUCX_DESC@@B DQ FLAT:$SG153018	; list_vp8_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG153018 DB	'auto', 00H
	ORG $+3
?list_vp9_level@@3QBUCX_DESC@@B DQ FLAT:$SG153020	; list_vp9_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG153020 DB	'auto', 00H
	ORG $+3
$SG153022 DB	'Auto', 00H
	ORG $+3
$SG153024 DB	'for I frames', 00H
	ORG $+3
$SG153025 DB	'for I,P frames', 00H
	ORG $+1
$SG153026 DB	'for All frames', 00H
	ORG $+1
$SG153028 DB	'auto', 00H
	ORG $+3
$SG153029 DB	'off', 00H
$SG153030 DB	'i', 00H
	ORG $+2
$SG153031 DB	'ip', 00H
	ORG $+1
$SG153032 DB	'all', 00H
$SG153033 DB	'ipb', 00H
$SG153034 DB	'ib', 00H
	ORG $+1
$SG153035 DB	'p', 00H
	ORG $+2
$SG153036 DB	'pb', 00H
	ORG $+1
$SG153037 DB	'b', 00H
	ORG $+2
$SG153039 DB	'auto', 00H
	ORG $+3
$SG153040 DB	'slow', 00H
	ORG $+3
$SG153041 DB	'medium', 00H
	ORG $+1
$SG153042 DB	'fast', 00H
	ORG $+3
$SG153045 DB	'0', 00H
	ORG $+2
$SG153044 DB	'default', 00H
$SG153046 DB	'1', 00H
	ORG $+2
$SG153047 DB	'2', 00H
	ORG $+2
$SG153048 DB	'3', 00H
	ORG $+2
$SG153049 DB	'4', 00H
	ORG $+2
$SG153051 DB	'low', 00H
$SG153052 DB	'normal', 00H
	ORG $+1
$SG153053 DB	'high', 00H
	ORG $+3
$SG153065 DB	'none', 00H
	ORG $+3
$SG153066 DB	'copy', 00H
	ORG $+3
$SG153067 DB	'aac', 00H
$SG153068 DB	'libmp3lame', 00H
	ORG $+1
$SG153073 DB	'ac3', 00H
$SG153069 DB	'libtwolame', 00H
	ORG $+1
$SG153104 DB	'tff', 00H
$SG153070 DB	'libvorbis', 00H
	ORG $+2
$SG153105 DB	'bff', 00H
$SG153071 DB	'pcm_s16le', 00H
	ORG $+2
$SG153116 DB	'higher', 00H
	ORG $+1
$SG153130 DB	'8x8', 00H
$SG153072 DB	'libopus', 00H
$SG153103 DB	'none', 00H
	ORG $+3
$SG153107 DB	' 1 - best quality', 00H
	ORG $+2
$SG153120 DB	'faster', 00H
	ORG $+1
$SG153131 DB	'4x4', 00H
$SG153108 DB	' 2 - higher', 00H
$SG153134 DB	'16', 00H
	ORG $+1
$SG153109 DB	' 3 - high quality', 00H
	ORG $+2
$SG153135 DB	'32', 00H
	ORG $+1
$SG153110 DB	' 4 - balanced', 00H
	ORG $+2
$SG153111 DB	' 5 - fast', 00H
	ORG $+2
$SG153136 DB	'64', 00H
	ORG $+1
$SG153112 DB	' 6 - faster', 00H
$SG153144 DB	'all', 00H
$SG153113 DB	' 7 - fastest', 00H
	ORG $+3
$SG153115 DB	'best', 00H
	ORG $+3
$SG153117 DB	'high', 00H
	ORG $+3
$SG153118 DB	'balanced', 00H
	ORG $+3
$SG153119 DB	'fast', 00H
	ORG $+3
$SG153126 DB	'Q-pel', 00H
	ORG $+2
$SG153143 DB	'chroma', 00H
	ORG $+1
$SG153148 DB	'box', 00H
$SG153121 DB	'fastest', 00H
$SG153123 DB	'Auto', 00H
	ORG $+3
$SG153124 DB	'full-pel', 00H
	ORG $+3
$SG153129 DB	'16x16', 00H
	ORG $+2
$SG153150 DB	'off', 00H
$SG153125 DB	'half-pel', 00H
	ORG $+3
$SG153128 DB	'Auto', 00H
	ORG $+3
$SG153133 DB	'auto', 00H
	ORG $+3
$SG153140 DB	'auto', 00H
	ORG $+3
$SG153141 DB	'none', 00H
	ORG $+3
$SG153142 DB	'luma', 00H
	ORG $+3
$SG153146 DB	'none', 00H
	ORG $+3
$SG153151 DB	'x2', 00H
	ORG $+1
$SG153147 DB	'upscale', 00H
$SG153152 DB	'x2.5', 00H
	ORG $+3
$SG153154 DB	'simple', 00H
	ORG $+1
$SG153155 DB	'complex', 00H
$SG153157 DB	'0', 00H
	ORG $+2
$SG153158 DB	'90', 00H
	ORG $+1
$SG153159 DB	'180', 00H
$SG153160 DB	'270', 00H
$SG153162 DB	'n', 00H
	ORG $+2
$SG153163 DB	'h', 00H
	ORG $+2
$SG153164 DB	'v', 00H
	ORG $+2
$SG153166 DB	'auto', 00H
	ORG $+3
$SG153167 DB	'simple', 00H
	ORG $+1
$SG153168 DB	'fine', 00H
	ORG $+3
$SG153170 DB	'auto', 00H
	ORG $+3
$SG153171 DB	'none', 00H
	ORG $+3
$SG153172 DB	'sse2', 00H
	ORG $+3
$SG153173 DB	'sse3', 00H
	ORG $+3
$SG153174 DB	'ssse3', 00H
	ORG $+2
$SG153175 DB	'sse41', 00H
	ORG $+2
$SG153176 DB	'avx', 00H
$SG153177 DB	'avx2', 00H
	ORG $+3
?list_colormatrix@@3QBUCX_DESC@@B DQ FLAT:$SG136884	; list_colormatrix
	DD	02H
	ORG $+4
	DQ	FLAT:$SG136885
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG136886
	DD	01H
	ORG $+4
	DQ	FLAT:$SG136887
	DD	06H
	ORG $+4
	DQ	FLAT:$SG136888
	DD	05H
	ORG $+4
	DQ	FLAT:$SG136889
	DD	07H
	ORG $+4
	DQ	FLAT:$SG136890
	DD	08H
	ORG $+4
	DQ	FLAT:$SG136891
	DD	04H
	ORG $+4
	DQ	FLAT:$SG136892
	DD	00H
	ORG $+4
	DQ	FLAT:$SG136893
	DD	09H
	ORG $+4
	DQ	FLAT:$SG136894
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG136895
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG136896
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG136897
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG136898
	DD	0fH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG136884 DB	'undef', 00H
	ORG $+2
$SG136885 DB	'auto', 00H
	ORG $+3
$SG136886 DB	'bt709', 00H
	ORG $+2
$SG136887 DB	'smpte170m', 00H
	ORG $+2
$SG136891 DB	'fcc', 00H
$SG136888 DB	'bt470bg', 00H
$SG136889 DB	'smpte240m', 00H
	ORG $+2
$SG136890 DB	'YCgCo', 00H
	ORG $+2
$SG136892 DB	'GBR', 00H
$SG136893 DB	'bt2020nc', 00H
	ORG $+3
$SG136897 DB	'ictco', 00H
	ORG $+2
$SG137043 DB	'bt470m', 00H
	ORG $+1
$SG153569 DB	'%s', 00H
	ORG $+1
$SG136894 DB	'bt2020c', 00H
$SG136895 DB	'derived-ncl', 00H
$SG137205 DB	'pal', 00H
$SG136896 DB	'derived-cl', 00H
	ORG $+1
$SG137207 DB	'mac', 00H
$SG136898 DB	'2100-lms', 00H
	ORG $+7
?list_transfer@@3QBUCX_DESC@@B DQ FLAT:$SG137039	; list_transfer
	DD	02H
	ORG $+4
	DQ	FLAT:$SG137040
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG137041
	DD	01H
	ORG $+4
	DQ	FLAT:$SG137042
	DD	06H
	ORG $+4
	DQ	FLAT:$SG137043
	DD	04H
	ORG $+4
	DQ	FLAT:$SG137044
	DD	05H
	ORG $+4
	DQ	FLAT:$SG137045
	DD	07H
	ORG $+4
	DQ	FLAT:$SG137046
	DD	08H
	ORG $+4
	DQ	FLAT:$SG137047
	DD	09H
	ORG $+4
	DQ	FLAT:$SG137048
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG137049
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG137050
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG137051
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG137052
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG137053
	DD	0fH
	ORG $+4
	DQ	FLAT:$SG137054
	DD	010H
	ORG $+4
	DQ	FLAT:$SG137055
	DD	011H
	ORG $+4
	DQ	FLAT:$SG137056
	DD	012H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG137039 DB	'undef', 00H
	ORG $+2
$SG137040 DB	'auto', 00H
	ORG $+3
$SG137041 DB	'bt709', 00H
	ORG $+2
$SG137042 DB	'smpte170m', 00H
	ORG $+2
$SG137046 DB	'linear', 00H
	ORG $+1
$SG137209 DB	'0', 00H
	ORG $+2
$SG137044 DB	'bt470bg', 00H
$SG137045 DB	'smpte240m', 00H
	ORG $+2
$SG137047 DB	'log100', 00H
	ORG $+1
$SG137048 DB	'log316', 00H
	ORG $+1
$SG137210 DB	'1', 00H
	ORG $+2
$SG137049 DB	'iec61966-2-4', 00H
	ORG $+3
$SG137050 DB	'bt1361e', 00H
$SG137051 DB	'iec61966-2-1', 00H
	ORG $+3
$SG137052 DB	'bt2020-10', 00H
	ORG $+2
$SG137192 DB	'bt470m', 00H
	ORG $+1
$SG137211 DB	'2', 00H
	ORG $+2
$SG137053 DB	'bt2020-12', 00H
	ORG $+2
$SG137196 DB	'bt2020', 00H
	ORG $+1
$SG137212 DB	'3', 00H
	ORG $+2
$SG137054 DB	'smpte2084', 00H
	ORG $+2
$SG137213 DB	'4', 00H
	ORG $+2
$SG137055 DB	'smpte428', 00H
	ORG $+3
$SG137188 DB	'undef', 00H
	ORG $+2
$SG137214 DB	'5', 00H
	ORG $+2
$SG137056 DB	'arib-srd-b67', 00H
	ORG $+3
$SG137189 DB	'auto', 00H
	ORG $+3
?list_colorprim@@3QBUCX_DESC@@B DQ FLAT:$SG137188	; list_colorprim
	DD	02H
	ORG $+4
	DQ	FLAT:$SG137189
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG137190
	DD	01H
	ORG $+4
	DQ	FLAT:$SG137191
	DD	06H
	ORG $+4
	DQ	FLAT:$SG137192
	DD	04H
	ORG $+4
	DQ	FLAT:$SG137193
	DD	05H
	ORG $+4
	DQ	FLAT:$SG137194
	DD	07H
	ORG $+4
	DQ	FLAT:$SG137195
	DD	08H
	ORG $+4
	DQ	FLAT:$SG137196
	DD	09H
	ORG $+4
	DQ	FLAT:$SG137197
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG137198
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG137199
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG137200
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG137190 DB	'bt709', 00H
	ORG $+2
$SG137191 DB	'smpte170m', 00H
	ORG $+2
$SG137218 DB	'tv', 00H
	ORG $+1
$SG137193 DB	'bt470bg', 00H
$SG137194 DB	'smpte240m', 00H
	ORG $+2
$SG137195 DB	'film', 00H
	ORG $+3
$SG137197 DB	'st428', 00H
	ORG $+2
$SG137219 DB	'pc', 00H
	ORG $+1
$SG137198 DB	'st431-2', 00H
$SG137199 DB	'st432-1', 00H
$SG137200 DB	'ebu3213-e', 00H
	ORG $+6
?list_videoformat@@3QBUCX_DESC@@B DQ FLAT:$SG137202	; list_videoformat
	DD	05H
	ORG $+4
	DQ	FLAT:$SG137203
	DD	02H
	ORG $+4
	DQ	FLAT:$SG137204
	DD	00H
	ORG $+4
	DQ	FLAT:$SG137205
	DD	01H
	ORG $+4
	DQ	FLAT:$SG137206
	DD	03H
	ORG $+4
	DQ	FLAT:$SG137207
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG137202 DB	'undef', 00H
	ORG $+2
$SG137203 DB	'ntsc', 00H
	ORG $+3
$SG137204 DB	'component', 00H
	ORG $+2
$SG137206 DB	'secam', 00H
	ORG $+2
$SG138308 DB	'cfr', 00H
$SG137216 DB	'limited', 00H
$SG137217 DB	'full', 00H
	ORG $+3
$SG153634 DB	'Haswell', 00H
?CPU_GEN_STR@@3QBQEBDB DQ FLAT:$SG153630		; CPU_GEN_STR
	DQ	FLAT:$SG153631
	DQ	FLAT:$SG153632
	DQ	FLAT:$SG153633
	DQ	FLAT:$SG153634
	DQ	FLAT:$SG153635
	DQ	FLAT:$SG153636
	DQ	FLAT:$SG153637
	DQ	FLAT:$SG153638
	DQ	FLAT:$SG153639
	DQ	FLAT:$SG153640
	DQ	FLAT:$SG153641
	DQ	FLAT:$SG153642
	DQ	FLAT:$SG153643
$SG153631 DB	'SandyBridge', 00H
$SG138309 DB	'vfr', 00H
$SG153632 DB	'IvyBridge', 00H
	ORG $+2
$SG138312 DB	'swr', 00H
$SG153633 DB	'Silvermont', 00H
	ORG $+1
$SG163064 DB	'%s', 00H
	ORG $+1
$SG153635 DB	'Airmont', 00H
$SG153636 DB	'Broadwell', 00H
	ORG $+2
$SG138663 DB	'(R)', 00H
$SG153637 DB	'Skylake', 00H
$SG153638 DB	'Apollolake', 00H
	ORG $+1
$SG138665 DB	'CPU', 00H
$SG153639 DB	'Kabylake', 00H
	ORG $+3
$SG153732 DB	'CBR  ', 00H
	ORG $+2
$SG138699 DB	'MHz', 00H
$SG153640 DB	'Geminilake', 00H
	ORG $+1
$SG138700 DB	'GHz', 00H
$SG153641 DB	'Coffeelake', 00H
	ORG $+1
$SG138702 DB	'%lf', 00H
$SG153642 DB	'Cannonlake', 00H
	ORG $+5
$SG153643 DB	'Icelake', 00H
$SG153733 DB	'VBR  ', 00H
	ORG $+2
$SG153734 DB	'AVBR ', 00H
	ORG $+2
$SG153735 DB	'QVBR ', 00H
	ORG $+2
$SG153736 DB	'CQP  ', 00H
	ORG $+2
$SG153737 DB	'LA   ', 00H
	ORG $+2
$SG153738 DB	'LAHRD', 00H
	ORG $+2
$SG153739 DB	'ICQ  ', 00H
	ORG $+2
$SG153740 DB	'LAICQ', 00H
	ORG $+2
$SG153741 DB	'VCM  ', 00H
	ORG $+2
$SG153743 DB	'RC mode      ', 00H
	ORG $+2
$SG153744 DB	'10bit depth  ', 00H
	ORG $+2
$SG153745 DB	'Fixed Func   ', 00H
	ORG $+2
$SG153746 DB	'Interlace    ', 00H
	ORG $+2
$SG153747 DB	'VUI info     ', 00H
	ORG $+2
$SG153748 DB	'Trellis      ', 00H
	ORG $+2
$SG153749 DB	'Adaptive_I   ', 00H
	ORG $+2
$SG153750 DB	'Adaptive_B   ', 00H
	ORG $+2
$SG153751 DB	'WeightP      ', 00H
	ORG $+2
$SG153752 DB	'WeightB      ', 00H
	ORG $+2
$SG153753 DB	'FadeDetect   ', 00H
	ORG $+2
$SG153754 DB	'B_Pyramid    ', 00H
	ORG $+2
$SG153755 DB	' +ManyBframes', 00H
	ORG $+2
$SG153756 DB	'PyramQPOffset', 00H
	ORG $+2
$SG153757 DB	'MBBRC        ', 00H
	ORG $+2
$SG153758 DB	'ExtBRC       ', 00H
	ORG $+2
$SG153759 DB	'Adaptive_LTR ', 00H
	ORG $+2
$SG153760 DB	'LA Quality   ', 00H
	ORG $+2
$SG153761 DB	'QP Min/Max   ', 00H
	ORG $+2
$SG153762 DB	'IntraRefresh ', 00H
	ORG $+2
$SG153763 DB	'No Deblock   ', 00H
	ORG $+2
$SG153764 DB	'No GPB       ', 00H
	ORG $+2
$SG153765 DB	'Windowed BRC ', 00H
	ORG $+2
$SG153766 DB	'PerMBQP(CQP) ', 00H
	ORG $+2
$SG153767 DB	'DirectBiasAdj', 00H
	ORG $+2
$SG153768 DB	'MVCostScaling', 00H
	ORG $+2
$SG153769 DB	'SAO          ', 00H
	ORG $+2
$SG153770 DB	'Max CTU Size ', 00H
	ORG $+2
$SG153771 DB	'TSkip        ', 00H
	ORG $+2
$SG153773 DB	'Resize               ', 00H
	ORG $+2
$SG153774 DB	'Deinterlace          ', 00H
	ORG $+2
$SG153775 DB	'Scaling Quality      ', 00H
	ORG $+2
$SG153776 DB	'Denoise              ', 00H
	ORG $+2
$SG153777 DB	'Mctf                 ', 00H
	ORG $+2
$SG153778 DB	'Rotate               ', 00H
	ORG $+2
$SG153779 DB	'Mirror               ', 00H
	ORG $+2
$SG153780 DB	'Detail Enhancement   ', 00H
	ORG $+2
$SG153781 DB	'Proc Amp.            ', 00H
	ORG $+2
$SG153782 DB	'Image Stabilization  ', 00H
	ORG $+2
$SG153783 DB	'Video Signal Info    ', 00H
	ORG $+2
$SG153784 DB	'FPS Conversion       ', 00H
	ORG $+2
$SG153785 DB	'FPS Conversion (Adv.)', 00H
	ORG $+2
$SG153876 DB	' @ %.2fGHz', 00H
	ORG $+5
$SG153878 DB	' [TB: %.2fGHz]', 00H
	ORG $+1
$SG153879 DB	' (%dC/%dT)', 00H
	ORG $+1
$SG153881 DB	' <%s>', 00H
	ORG $+6
?list_empty@@3QBUCX_DESC@@B DQ 0000000000000000H	; list_empty
	DD	00H
	ORG $+4
$SG138301 DB	'trace', 00H
	ORG $+2
$SG138302 DB	'debug', 00H
	ORG $+2
$SG138303 DB	'more', 00H
	ORG $+3
$SG138304 DB	'info', 00H
	ORG $+3
$SG138305 DB	'warn', 00H
	ORG $+3
$SG138306 DB	'error', 00H
	ORG $+2
$SG138310 DB	'forcecfr', 00H
	ORG $+3
$SG138313 DB	'soxr', 00H
	ORG $+7
$SG163063 DB	'invalid argument', 00H
	ORG $+7
$SG163068 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG163065 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG138664 DB	'(TM)', 00H
	ORG $+3
$SG163066 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG163067 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG163130 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG138750 DB	'GetLogicalProcessorInformation', 00H
	ORG $+1
$SG138751 DB	'kernel32', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsprintf_s_l
PUBLIC	sprintf_s
PUBLIC	_vsscanf_s_l
PUBLIC	vsscanf_s
PUBLIC	sscanf_s
PUBLIC	?strstr@@YAPEADQEADQEBD@Z			; strstr
PUBLIC	?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
PUBLIC	??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
PUBLIC	??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
PUBLIC	?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
PUBLIC	_tcschr
PUBLIC	_tcsstr
PUBLIC	?_tcschr@@YAPEADPEADI@Z				; _tcschr
PUBLIC	?_tcsstr@@YAPEADPEADPEBD@Z			; _tcsstr
PUBLIC	?getCPUName@@YAHPEAD_K@Z			; getCPUName
PUBLIC	?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z		; get_cpu_info
PUBLIC	?get_cpu_info@@YA?AUcpu_info_t@@XZ		; get_cpu_info
PUBLIC	?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z	; getCPUInfo
PUBLIC	?getCPUDefaultClock@@YANXZ			; getCPUDefaultClock
PUBLIC	?getCPUMaxTurboClock@@YANXZ			; getCPUMaxTurboClock
PUBLIC	?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z	; GetProcessTime
PUBLIC	?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z	; GetProcessTime
PUBLIC	?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z ; GetProcessAvgCPUUsage
PUBLIC	?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z	; GetProcessAvgCPUUsage
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	?getCPUDefaultClockFromCPUName@@YANXZ		; getCPUDefaultClockFromCPUName
PUBLIC	??$max@I@std@@YAAEBIAEBI0@Z			; std::max<unsigned int>
PUBLIC	??$min@_J@std@@YAAEB_JAEB_J0@Z			; std::min<__int64>
PUBLIC	??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
PUBLIC	?check_rdtscp_available@@YA_NXZ			; check_rdtscp_available
PUBLIC	?getCPUDefaultClockOpenCL@@YANXZ		; getCPUDefaultClockOpenCL
PUBLIC	??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
PUBLIC	??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3e112e0be826d695
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff028f5c28f5c29
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4123880000000000
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strstr:PROC
EXTRN	strlen:PROC
EXTRN	_Query_perf_counter:PROC
EXTRN	_Query_perf_frequency:PROC
EXTRN	__imp__mbschr:PROC
EXTRN	__imp__mbsstr:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_GetProcessTimes:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_SystemTimeToFileTime:PROC
EXTRN	runl_por:PROC
EXTRN	?cl_get_func@@YAHPEAUcl_func_t@@@Z:PROC		; cl_get_func
EXTRN	?cl_get_platform_and_device@@YAHPEBDHPEAUcl_data_t@@PEBUcl_func_t@@@Z:PROC ; cl_get_platform_and_device
EXTRN	?cl_release@@YAXPEAUcl_data_t@@PEAUcl_func_t@@@Z:PROC ; cl_release
EXTRN	?cl_get_device_max_clock_frequency_mhz@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z:PROC ; cl_get_device_max_clock_frequency_mhz
EXTRN	?getCPUGen@@YAHPEAVMFXVideoSession@@@Z:PROC	; getCPUGen
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__C_specific_handler:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_scanf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_scanf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+133
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_s_l DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$_vsscanf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsscanf_s DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$vsscanf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf_s DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$sscanf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?strstr@@YAPEADQEADQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?strstr@@YAPEADQEADQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcschr DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$_tcschr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsstr DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$_tcsstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcschr@@YAPEADPEADI@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_tcschr@@YAPEADPEADI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcsstr@@YAPEADPEADPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_tcsstr@@YAPEADPEADPEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?getCPUName@@YAHPEAD_K@Z DD imagerel $LN27
	DD	imagerel $LN27+950
	DD	imagerel $unwind$?getCPUName@@YAHPEAD_K@Z
$pdata$?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z DD imagerel $LN22
	DD	imagerel $LN22+721
	DD	imagerel $unwind$?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z
$pdata$?get_cpu_info@@YA?AUcpu_info_t@@XZ DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?get_cpu_info@@YA?AUcpu_info_t@@XZ
$pdata$?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z DD imagerel $LN13
	DD	imagerel $LN13+865
	DD	imagerel $unwind$?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z
$pdata$?getCPUDefaultClock@@YANXZ DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$?getCPUDefaultClock@@YANXZ
$pdata$?getCPUMaxTurboClock@@YANXZ DD imagerel $LN7
	DD	imagerel $LN7+323
	DD	imagerel $unwind$?getCPUMaxTurboClock@@YANXZ
$pdata$?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z
$pdata$?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z DD imagerel $LN6
	DD	imagerel $LN6+281
	DD	imagerel $unwind$?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z
$pdata$?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z DD imagerel $LN12
	DD	imagerel $LN12+504
	DD	imagerel $unwind$?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z
$pdata$?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspMatrixList@@YAXXZ DD imagerel ??__ECspMatrixList@@YAXXZ
	DD	imagerel ??__ECspMatrixList@@YAXXZ+452
	DD	imagerel $unwind$??__ECspMatrixList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+311
	DD	imagerel $unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspTransferList@@YAXXZ DD imagerel ??__ECspTransferList@@YAXXZ
	DD	imagerel ??__ECspTransferList@@YAXXZ+476
	DD	imagerel $unwind$??__ECspTransferList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+263
	DD	imagerel $unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspColorprimList@@YAXXZ DD imagerel ??__ECspColorprimList@@YAXXZ
	DD	imagerel ??__ECspColorprimList@@YAXXZ+398
	DD	imagerel $unwind$??__ECspColorprimList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z DD imagerel ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z
	DD	imagerel ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z+160
	DD	imagerel $unwind$??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?getCPUDefaultClockFromCPUName@@YANXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$?getCPUDefaultClockFromCPUName@@YANXZ
$pdata$?CountSetBits@@YAK_K@Z DD imagerel ?CountSetBits@@YAK_K@Z
	DD	imagerel ?CountSetBits@@YAK_K@Z+164
	DD	imagerel $unwind$?CountSetBits@@YAK_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I@std@@YAAEBIAEBI0@Z DD imagerel $LN13
	DD	imagerel $LN13+210
	DD	imagerel $unwind$??$max@I@std@@YAAEBIAEBI0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?get_tick_per_clock@@YANXZ DD imagerel ?get_tick_per_clock@@YANXZ
	DD	imagerel ?get_tick_per_clock@@YANXZ+176
	DD	imagerel $unwind$?get_tick_per_clock@@YANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_J@std@@YAAEB_JAEB_J0@Z DD imagerel $LN13
	DD	imagerel $LN13+214
	DD	imagerel $unwind$??$min@_J@std@@YAAEB_JAEB_J0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?get_tick_per_sec@@YANXZ DD imagerel ?get_tick_per_sec@@YANXZ
	DD	imagerel ?get_tick_per_sec@@YANXZ+200
	DD	imagerel $unwind$?get_tick_per_sec@@YANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z DD imagerel $LN9
	DD	imagerel $LN9+246
	DD	imagerel $unwind$??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?check_rdtscp_available@@YA_NXZ DD imagerel $LN9
	DD	imagerel $LN9+67
	DD	imagerel $unwind$?check_rdtscp_available@@YA_NXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA DD imagerel ?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA
	DD	imagerel ?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA+32
	DD	imagerel $unwind$?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?getCPUDefaultClockOpenCL@@YANXZ DD imagerel $LN4
	DD	imagerel $LN4+202
	DD	imagerel $unwind$?getCPUDefaultClockOpenCL@@YANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z
pdata	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT __real@4123880000000000
CONST	SEGMENT
__real@4123880000000000 DQ 04123880000000000r	; 640000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3ff028f5c28f5c29
CONST	SEGMENT
__real@3ff028f5c28f5c29 DQ 03ff028f5c28f5c29r	; 1.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT __real@3e112e0be826d695
CONST	SEGMENT
__real@3e112e0be826d695 DQ 03e112e0be826d695r	; 1e-09
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$min@_J@std@@YAAEB_JAEB_J0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$min@_J@std@@YAAEB_JAEB_J0@Z DB 040H
	DD	imagerel $ip2state$??$min@_J@std@@YAAEB_JAEB_J0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_J@std@@YAAEB_JAEB_J0@Z DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$min@_J@std@@YAAEB_JAEB_J0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$max@I@std@@YAAEBIAEBI0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$max@I@std@@YAAEBIAEBI0@Z DB 040H
	DD	imagerel $ip2state$??$max@I@std@@YAAEBIAEBI0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I@std@@YAAEBIAEBI0@Z DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$max@I@std@@YAAEBIAEBI0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspColorprimList@@YAXXZ DD 042b19H
	DD	023010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD 033d19H
	DD	07016821aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspTransferList@@YAXXZ DD 042b19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspMatrixList@@YAXXZ DD 042b19H
	DD	029010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
xdata	SEGMENT
$unwind$?getCPUName@@YAHPEAD_K@Z DD 043c19H
	DD	0150113H
	DD	0300b700cH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z DD 022401H
	DD	07006f20dH
$unwind$?get_cpu_info@@YA?AUcpu_info_t@@XZ DD 043719H
	DD	019010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z DD 034019H
	DD	0260117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0128H
$unwind$?getCPUDefaultClock@@YANXZ DD 021501H
	DD	070027206H
$unwind$?getCPUMaxTurboClock@@YANXZ DD 042b19H
	DD	013010aH
	DD	030027003H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z DD 021e01H
	DD	07006320aH
$unwind$?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z DD 023819H
	DD	0700bf212H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z DD 033b19H
	DD	0260112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0128H
$unwind$?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z DD 021e01H
	DD	07006520aH
$unwind$?getCPUDefaultClockFromCPUName@@YANXZ DD 032a19H
	DD	0960109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	04a0H
$unwind$?CountSetBits@@YAK_K@Z DD 021e01H
	DD	07006320aH
$unwind$?get_tick_per_clock@@YANXZ DD 021801H
	DD	07002f209H
$unwind$?get_tick_per_sec@@YANXZ DD 031801H
	DD	0120109H
	DD	07002H
$unwind$?check_rdtscp_available@@YA_NXZ DD 021509H
	DD	070027206H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN9+21
	DD	imagerel $LN9+34
	DD	imagerel ?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA
	DD	imagerel $LN9+34
$unwind$?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?getCPUDefaultClockOpenCL@@YANXZ DD 031801H
	DD	02e0109H
	DD	07002H
xdata	ENDS
CONST	SEGMENT
	ORG $+7
?getCPUName@@YAHPEAD_K@Z$rtcName$0 DB 043H		; getCPUName
	DB	050H
	DB	055H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
?getCPUName@@YAHPEAD_K@Z$rtcName$1 DB 072H		; getCPUName
	DB	065H
	DB	06dH
	DB	06fH
	DB	076H
	DB	065H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+2
?getCPUName@@YAHPEAD_K@Z$rtcVarDesc DD 054H		; getCPUName
	DD	01H
	DQ	FLAT:?getCPUName@@YAHPEAD_K@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:?getCPUName@@YAHPEAD_K@Z$rtcName$0
	ORG $+96
?getCPUName@@YAHPEAD_K@Z$rtcFrameData DD 02H		; getCPUName
	DD	00H
	DQ	FLAT:?getCPUName@@YAHPEAD_K@Z$rtcVarDesc
?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcName$0 DB 072H	; get_cpu_info
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	04cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+3
?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcVarDesc DD 034H ; get_cpu_info
	DD	04H
	DQ	FLAT:?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcName$0
	ORG $+48
?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcFrameData DD 01H ; get_cpu_info
	DD	00H
	DQ	FLAT:?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcVarDesc
?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcName$0 DB 063H	; get_cpu_info
	DB	070H
	DB	075H
	DB	00H
?getCPUDefaultClockFromCPUName@@YANXZ$rtcName$1 DB 062H	; getCPUDefaultClockFromCPUName
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcVarDesc DD 030H	; get_cpu_info
	DD	070H
	DQ	FLAT:?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcName$0
	ORG $+48
?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcFrameData DD 01H	; get_cpu_info
	DD	00H
	DQ	FLAT:?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcVarDesc
?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcName$0 DB 063H ; getCPUInfo
	DB	070H
	DB	075H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+7
?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcVarDesc DD 050H ; getCPUInfo
	DD	070H
	DQ	FLAT:?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcName$0
	ORG $+48
?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcFrameData DD 01H ; getCPUInfo
	DD	00H
	DQ	FLAT:?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcVarDesc
?getCPUMaxTurboClock@@YANXZ$rtcName$0 DB 043H		; getCPUMaxTurboClock
	DB	050H
	DB	055H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcName$0 DB 073H ; GetProcessTime
	DB	079H
	DB	073H
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	00H
?getCPUMaxTurboClock@@YANXZ$rtcVarDesc DD 048H		; getCPUMaxTurboClock
	DD	010H
	DQ	FLAT:?getCPUMaxTurboClock@@YANXZ$rtcName$0
	ORG $+48
?getCPUMaxTurboClock@@YANXZ$rtcFrameData DD 01H		; getCPUMaxTurboClock
	DD	00H
	DQ	FLAT:?getCPUMaxTurboClock@@YANXZ$rtcVarDesc
?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcVarDesc DD 038H ; GetProcessTime
	DD	010H
	DQ	FLAT:?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcName$0
	ORG $+48
?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcFrameData DD 01H ; GetProcessTime
	DD	00H
	DQ	FLAT:?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcVarDesc
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcName$0 DB 063H ; GetProcessAvgCPUUsage
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcName$1 DB 063H ; GetProcessAvgCPUUsage
	DB	070H
	DB	075H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+7
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcFrameData DD 02H ; GetProcessAvgCPUUsage
	DD	00H
	DQ	FLAT:?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcVarDesc
?get_tick_per_clock@@YANXZ$rtcName$1 DB 072H		; get_tick_per_clock
	DB	065H
	DB	074H
	DB	00H
	ORG $+4
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcVarDesc DD 080H ; GetProcessAvgCPUUsage
	DD	070H
	DQ	FLAT:?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcName$0
	ORG $+96
?getCPUDefaultClockFromCPUName@@YANXZ$rtcName$0 DB 064H	; getCPUDefaultClockFromCPUName
	DB	065H
	DB	066H
	DB	061H
	DB	075H
	DB	06cH
	DB	074H
	DB	043H
	DB	06cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+3
?getCPUDefaultClockFromCPUName@@YANXZ$rtcVarDesc DD 060H ; getCPUDefaultClockFromCPUName
	DD	0400H
	DQ	FLAT:?getCPUDefaultClockFromCPUName@@YANXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?getCPUDefaultClockFromCPUName@@YANXZ$rtcName$0
	ORG $+96
?getCPUDefaultClockFromCPUName@@YANXZ$rtcFrameData DD 02H ; getCPUDefaultClockFromCPUName
	DD	00H
	DQ	FLAT:?getCPUDefaultClockFromCPUName@@YANXZ$rtcVarDesc
?get_tick_per_clock@@YANXZ$rtcName$0 DB 074H		; get_tick_per_clock
	DB	069H
	DB	063H
	DB	06bH
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+7
?get_tick_per_clock@@YANXZ$rtcVarDesc DD 068H		; get_tick_per_clock
	DD	08H
	DQ	FLAT:?get_tick_per_clock@@YANXZ$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?get_tick_per_clock@@YANXZ$rtcName$0
	ORG $+96
?get_tick_per_clock@@YANXZ$rtcFrameData DD 02H		; get_tick_per_clock
	DD	00H
	DQ	FLAT:?get_tick_per_clock@@YANXZ$rtcVarDesc
?get_tick_per_sec@@YANXZ$rtcName$0 DB 073H		; get_tick_per_sec
	DB	074H
	DB	061H
	DB	072H
	DB	074H
	DB	00H
	ORG $+2
?get_tick_per_sec@@YANXZ$rtcName$1 DB 066H		; get_tick_per_sec
	DB	069H
	DB	06eH
	DB	00H
	ORG $+4
?get_tick_per_sec@@YANXZ$rtcVarDesc DD 068H		; get_tick_per_sec
	DD	08H
	DQ	FLAT:?get_tick_per_sec@@YANXZ$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?get_tick_per_sec@@YANXZ$rtcName$0
	ORG $+96
?get_tick_per_sec@@YANXZ$rtcFrameData DD 02H		; get_tick_per_sec
	DD	00H
	DQ	FLAT:?get_tick_per_sec@@YANXZ$rtcVarDesc
?check_rdtscp_available@@YA_NXZ$rtcName$0 DB 064H	; check_rdtscp_available
	DB	075H
	DB	06dH
	DB	06dH
	DB	079H
	DB	00H
	ORG $+2
?check_rdtscp_available@@YA_NXZ$rtcFrameData DD 01H	; check_rdtscp_available
	DD	00H
	DQ	FLAT:?check_rdtscp_available@@YA_NXZ$rtcVarDesc
?getCPUDefaultClockOpenCL@@YANXZ$rtcName$0 DB 063H	; getCPUDefaultClockOpenCL
	DB	06cH
	DB	00H
	ORG $+5
?check_rdtscp_available@@YA_NXZ$rtcVarDesc DD 024H	; check_rdtscp_available
	DD	04H
	DQ	FLAT:?check_rdtscp_available@@YA_NXZ$rtcName$0
	ORG $+48
?getCPUDefaultClockOpenCL@@YANXZ$rtcName$1 DB 064H	; getCPUDefaultClockOpenCL
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?getCPUDefaultClockOpenCL@@YANXZ$rtcFrameData DD 02H	; getCPUDefaultClockOpenCL
	DD	00H
	DQ	FLAT:?getCPUDefaultClockOpenCL@@YANXZ$rtcVarDesc
	ORG $+8
?getCPUDefaultClockOpenCL@@YANXZ$rtcVarDesc DD 0128H	; getCPUDefaultClockOpenCL
	DD	030H
	DQ	FLAT:?getCPUDefaultClockOpenCL@@YANXZ$rtcName$1
	DD	050H
	DD	0b8H
	DQ	FLAT:?getCPUDefaultClockOpenCL@@YANXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcsstr@@YAPEADPEADPEBD@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcschr@@YAPEADPEADI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsstr DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcschr DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DB 040H
	DD	imagerel $ip2state$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ DD 021e19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?strstr@@YAPEADQEADQEBD@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf_s DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sscanf_s$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sscanf_s$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sscanf_s$rtcName$0
	ORG $+48
sscanf_s$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sscanf_s$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsscanf_s DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_s_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf_s$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf_s$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sprintf_s$rtcName$0
	ORG $+48
sprintf_s$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf_s$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_scanf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z
_TEXT	SEGMENT
this$ = 16
_Val$ = 24
??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>, COMDAT

; 78   :             : _MyRep(static_cast<_Rep>(_Val)) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Val$[rsp]
  00015	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv68 = 56
__$ReturnUdt$ = 80
_Left$ = 88
_Right$ = 96
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z PROC ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >, COMDAT

; 262  :         _NOEXCEPT_COND(is_arithmetic_v<_Rep1>&& is_arithmetic_v<_Rep2>) { // strengthened

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 263  :         // subtract two durations
; 264  :         using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
; 265  :         return _CD(_CD(_Left).count() - _CD(_Right).count());

  00028	48 8b 44 24 58	 mov	 rax, QWORD PTR _Left$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
  00042	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00047	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  0004c	48 89 44 24 38	 mov	 QWORD PTR tv68[rsp], rax
  00051	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T3[rsp]
  00056	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  0005b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv68[rsp]
  00060	48 2b c8	 sub	 rcx, rax
  00063	48 8b c1	 mov	 rax, rcx
  00066	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0006b	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00070	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00075	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
  0007a	48 8b 44 24 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  :     }

  0007f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z ENDP ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
frequency$ = 48
cl$ = 80
data$ = 296
?getCPUDefaultClockOpenCL@@YANXZ PROC			; getCPUDefaultClockOpenCL

; 354  : double getCPUDefaultClockOpenCL() {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd

; 355  : #if !ENABLE_OPENCL
; 356  :     return 0.0;
; 357  : #else
; 358  :     int frequency = 0;

  00018	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR frequency$[rsp], 0

; 359  :     cl_func_t cl = { 0 };

  00020	48 8d 44 24 50	 lea	 rax, QWORD PTR cl$[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  0002f	f3 aa		 rep stosb

; 360  :     cl_data_t data = { 0 };

  00031	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR data$[rsp]
  00039	48 8b f8	 mov	 rdi, rax
  0003c	33 c0		 xor	 eax, eax
  0003e	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00043	f3 aa		 rep stosb

; 361  :     if (CL_SUCCESS == cl_get_func(&cl)
; 362  :         && CL_SUCCESS == cl_get_platform_and_device(nullptr, CL_DEVICE_TYPE_CPU, &data, &cl)) {

  00045	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cl$[rsp]
  0004a	e8 00 00 00 00	 call	 ?cl_get_func@@YAHPEAUcl_func_t@@@Z ; cl_get_func
  0004f	85 c0		 test	 eax, eax
  00051	75 33		 jne	 SHORT $LN2@getCPUDefa
  00053	4c 8d 4c 24 50	 lea	 r9, QWORD PTR cl$[rsp]
  00058	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR data$[rsp]
  00060	ba 02 00 00 00	 mov	 edx, 2
  00065	33 c9		 xor	 ecx, ecx
  00067	e8 00 00 00 00	 call	 ?cl_get_platform_and_device@@YAHPEBDHPEAUcl_data_t@@PEBUcl_func_t@@@Z ; cl_get_platform_and_device
  0006c	85 c0		 test	 eax, eax
  0006e	75 16		 jne	 SHORT $LN2@getCPUDefa

; 363  :         frequency = cl_get_device_max_clock_frequency_mhz(&data, &cl);

  00070	48 8d 54 24 50	 lea	 rdx, QWORD PTR cl$[rsp]
  00075	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR data$[rsp]
  0007d	e8 00 00 00 00	 call	 ?cl_get_device_max_clock_frequency_mhz@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z ; cl_get_device_max_clock_frequency_mhz
  00082	89 44 24 30	 mov	 DWORD PTR frequency$[rsp], eax
$LN2@getCPUDefa:

; 364  :     }
; 365  :     cl_release(&data, &cl);

  00086	48 8d 54 24 50	 lea	 rdx, QWORD PTR cl$[rsp]
  0008b	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR data$[rsp]
  00093	e8 00 00 00 00	 call	 ?cl_release@@YAXPEAUcl_data_t@@PEAUcl_func_t@@@Z ; cl_release

; 366  :     return frequency / 1000.0;

  00098	f2 0f 2a 44 24
	30		 cvtsi2sd xmm0, DWORD PTR frequency$[rsp]
  0009e	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000

; 367  : #endif // !ENABLE_OPENCL
; 368  : }

  000a6	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  000ac	48 8b cc	 mov	 rcx, rsp
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCPUDefaultClockOpenCL@@YANXZ$rtcFrameData
  000b6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000bb	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  000c1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  000c8	5f		 pop	 rdi
  000c9	c3		 ret	 0
?getCPUDefaultClockOpenCL@@YANXZ ENDP			; getCPUDefaultClockOpenCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
dummy$4 = 36
?check_rdtscp_available@@YA_NXZ PROC			; check_rdtscp_available

; 304  : bool check_rdtscp_available() {

$LN9:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 305  : #if defined(_WIN32) || defined(_WIN64)
; 306  :     __try {
; 307  :         UINT dummy;
; 308  :         __rdtscp(&dummy);

  00015	0f 01 f9	 rdtscp
  00018	4c 8d 44 24 24	 lea	 r8, QWORD PTR dummy$4[rsp]
  0001d	41 89 08	 mov	 DWORD PTR [r8], ecx
  00020	eb 04		 jmp	 SHORT $LN8@check_rdts
$LN6@check_rdts:

; 309  :     } __except (EXCEPTION_EXECUTE_HANDLER) {
; 310  :         return false;

  00022	32 c0		 xor	 al, al
  00024	eb 02		 jmp	 SHORT $LN4@check_rdts
$LN8@check_rdts:

; 311  :     }
; 312  : #endif //defined(_WIN32) || defined(_WIN64)
; 313  :     return true;

  00026	b0 01		 mov	 al, 1
$LN4@check_rdts:

; 314  : }

  00028	48 8b f8	 mov	 rdi, rax
  0002b	48 8b cc	 mov	 rcx, rsp
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?check_rdtscp_available@@YA_NXZ$rtcFrameData
  00035	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0003a	48 8b c7	 mov	 rax, rdi
  0003d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
?check_rdtscp_available@@YA_NXZ ENDP			; check_rdtscp_available
_TEXT	ENDS
text$x	SEGMENT
dummy$4 = 36
?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA PROC	; `check_rdtscp_available'::`1'::filt$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
$LN5@filt$0:

; 309  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  00013	b8 01 00 00 00	 mov	 eax, 1
$LN7@filt$0:
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	5f		 pop	 rdi
  0001d	5d		 pop	 rbp
  0001e	c3		 ret	 0
  0001f	cc		 int	 3
?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA ENDP	; `check_rdtscp_available'::`1'::filt$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
dummy$4 = 36
?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA PROC	; `check_rdtscp_available'::`1'::filt$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
$LN5@filt$0:

; 309  :     } __except (EXCEPTION_EXECUTE_HANDLER) {

  00013	b8 01 00 00 00	 mov	 eax, 1
$LN7@filt$0:
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	5f		 pop	 rdi
  0001d	5d		 pop	 rbp
  0001e	c3		 ret	 0
  0001f	cc		 int	 3
?filt$0@?0??check_rdtscp_available@@YA_NXZ@4HA ENDP	; `check_rdtscp_available'::`1'::filt$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
_TEXT	SEGMENT
_Num_is_one$ = 32
_Den_is_one$ = 33
$T1 = 40
$T2 = 48
$T3 = 56
$T4 = 64
__$ReturnUdt$ = 96
_Dur$ = 104
??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>, COMDAT

; 397  :         _NOEXCEPT_COND(is_arithmetic_v<_Rep>&& is_arithmetic_v<typename _To::rep>) { // strengthened

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 398  :         // convert duration to another duration; truncate
; 399  :         using _CF = ratio_divide<_Period, typename _To::period>;
; 400  : 
; 401  :         using _ToRep = typename _To::rep;
; 402  :         using _CR    = common_type_t<_ToRep, _Rep, intmax_t>;
; 403  : 
; 404  :         constexpr bool _Num_is_one = _CF::num == 1;

  00023	c6 44 24 20 01	 mov	 BYTE PTR _Num_is_one$[rsp], 1

; 405  :         constexpr bool _Den_is_one = _CF::den == 1;

  00028	c6 44 24 21 00	 mov	 BYTE PTR _Den_is_one$[rsp], 0

; 406  : 
; 407  :         if (_Den_is_one) {

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	74 58		 je	 SHORT $LN2@duration_c

; 408  :             if (_Num_is_one) {

  00033	33 c0		 xor	 eax, eax
  00035	83 f8 01	 cmp	 eax, 1
  00038	74 2a		 je	 SHORT $LN4@duration_c

; 409  :                 return static_cast<_To>(static_cast<_ToRep>(_Dur.count()));

  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Dur$[rsp]
  0003f	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  00044	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00049	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T1[rsp]
  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00053	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  00058	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  0005d	e9 8e 00 00 00	 jmp	 $LN1@duration_c

; 410  :             } else {

  00062	eb 25		 jmp	 SHORT $LN5@duration_c
$LN4@duration_c:

; 411  :                 return static_cast<_To>(

  00064	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Dur$[rsp]
  00069	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  0006e	48 89 44 24 30	 mov	 QWORD PTR $T2[rsp], rax
  00073	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  00078	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0007d	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  00082	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00087	eb 67		 jmp	 SHORT $LN1@duration_c
$LN5@duration_c:

; 412  :                     static_cast<_ToRep>(static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)));
; 413  :             }
; 414  :         } else {

  00089	eb 65		 jmp	 SHORT $LN3@duration_c
$LN2@duration_c:

; 415  :             if (_Num_is_one) {

  0008b	33 c0		 xor	 eax, eax
  0008d	83 f8 01	 cmp	 eax, 1
  00090	74 31		 je	 SHORT $LN6@duration_c

; 416  :                 return static_cast<_To>(

  00092	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Dur$[rsp]
  00097	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  0009c	48 99		 cdq
  0009e	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000a3	48 f7 f9	 idiv	 rcx
  000a6	48 89 44 24 38	 mov	 QWORD PTR $T3[rsp], rax
  000ab	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T3[rsp]
  000b0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000b5	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  000ba	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  000bf	eb 2f		 jmp	 SHORT $LN1@duration_c

; 417  :                     static_cast<_ToRep>(static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den)));
; 418  :             } else {

  000c1	eb 2d		 jmp	 SHORT $LN7@duration_c
$LN6@duration_c:

; 419  :                 return static_cast<_To>(static_cast<_ToRep>(

  000c3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Dur$[rsp]
  000c8	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
  000cd	48 99		 cdq
  000cf	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000d4	48 f7 f9	 idiv	 rcx
  000d7	48 89 44 24 40	 mov	 QWORD PTR $T4[rsp], rax
  000dc	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T4[rsp]
  000e1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000e6	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000> >::duration<__int64,std::ratio<1,1000000> ><__int64,void>
  000eb	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN7@duration_c:
$LN3@duration_c:
$LN1@duration_c:

; 420  :                     static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num) / static_cast<_CR>(_CF::den)));
; 421  :             }
; 422  :         }
; 423  :     }

  000f0	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f4	5f		 pop	 rdi
  000f5	c3		 ret	 0
??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv66 = 48
__$ReturnUdt$ = 80
_Left$ = 88
_Right$ = 96
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z PROC ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT

; 524  :             is_arithmetic_v<typename _Duration1::rep>&& is_arithmetic_v<typename _Duration2::rep>) { // strengthened

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 525  :         // add time_point to time_point
; 526  :         return _Left.time_since_epoch() - _Right.time_since_epoch();

  00028	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0002d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Right$[rsp]
  00032	e8 00 00 00 00	 call	 ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
  00037	48 89 44 24 30	 mov	 QWORD PTR tv66[rsp], rax
  0003c	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T2[rsp]
  00041	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Left$[rsp]
  00046	e8 00 00 00 00	 call	 ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv66[rsp]
  00050	4c 8b c1	 mov	 r8, rcx
  00053	48 8b d0	 mov	 rdx, rax
  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0005b	e8 00 00 00 00	 call	 ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z ; std::chrono::operator-<__int64,std::ratio<1,1000000000>,__int64,std::ratio<1,1000000000> >
  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 527  :     }

  00065	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ENDP ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
nMul$ = 48
outer_loop_count$ = 52
start$ = 72
tick$ = 88
fin$ = 104
second$ = 120
$T5 = 128
$T6 = 136
?get_tick_per_sec@@YANXZ PROC				; get_tick_per_sec

; 291  : static double get_tick_per_sec() {

  00000	40 57		 push	 rdi
  00002	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd

; 292  :     const int nMul = 100;

  00018	c7 44 24 30 64
	00 00 00	 mov	 DWORD PTR nMul$[rsp], 100 ; 00000064H

; 293  :     const int outer_loop_count = TEST_COUNT * nMul;

  00020	c7 44 24 34 20
	a1 07 00	 mov	 DWORD PTR outer_loop_count$[rsp], 500000 ; 0007a120H

; 294  :     runl_por(outer_loop_count);

  00028	b9 20 a1 07 00	 mov	 ecx, 500000		; 0007a120H
  0002d	e8 00 00 00 00	 call	 runl_por

; 295  :     auto start = std::chrono::high_resolution_clock::now();

  00032	48 8d 4c 24 48	 lea	 rcx, QWORD PTR start$[rsp]
  00037	e8 00 00 00 00	 call	 ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now

; 296  :     auto tick = runl_por(outer_loop_count);

  0003c	b9 20 a1 07 00	 mov	 ecx, 500000		; 0007a120H
  00041	e8 00 00 00 00	 call	 runl_por
  00046	48 89 44 24 58	 mov	 QWORD PTR tick$[rsp], rax

; 297  :     auto fin = std::chrono::high_resolution_clock::now();

  0004b	48 8d 4c 24 68	 lea	 rcx, QWORD PTR fin$[rsp]
  00050	e8 00 00 00 00	 call	 ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ; std::chrono::steady_clock::now

; 298  :     double second = std::chrono::duration_cast<std::chrono::microseconds>(fin - start).count() * 1e-6;

  00055	4c 8d 44 24 48	 lea	 r8, QWORD PTR start$[rsp]
  0005a	48 8d 54 24 68	 lea	 rdx, QWORD PTR fin$[rsp]
  0005f	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  00067	e8 00 00 00 00	 call	 ??$?GUsteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@V312@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@01@0@Z ; std::chrono::operator-<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> >,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
  0006c	48 8b d0	 mov	 rdx, rax
  0006f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00077	e8 00 00 00 00	 call	 ??$duration_cast@V?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@X@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0PECEA@@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000> >,__int64,std::ratio<1,1000000000>,void>
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	e8 00 00 00 00	 call	 ?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
  00084	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00089	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00091	f2 0f 11 44 24
	78		 movsd	 QWORD PTR second$[rsp], xmm0

; 299  :     return tick / second;

  00097	f2 48 0f 2a 44
	24 58		 cvtsi2sd xmm0, QWORD PTR tick$[rsp]
  0009e	f2 0f 5e 44 24
	78		 divsd	 xmm0, QWORD PTR second$[rsp]

; 300  : }

  000a4	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  000aa	48 8b cc	 mov	 rcx, rsp
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?get_tick_per_sec@@YANXZ$rtcFrameData
  000b4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b9	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  000bf	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
?get_tick_per_sec@@YANXZ ENDP				; get_tick_per_sec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$min@_J@std@@YAAEB_JAEB_J0@Z
_TEXT	SEGMENT
_Left$ = 64
_Right$ = 72
??$min@_J@std@@YAAEB_JAEB_J0@Z PROC			; std::min<__int64>, COMDAT

; 4490 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Right < _Left)) { // strengthened

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 4491 :     // return smaller of _Left and _Right
; 4492 :     if (_Right < _Left) {

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	0f 8d 92 00 00
	00		 jge	 $LN8@min
$LN4@min:

; 4493 :         _STL_ASSERT(!(_Left < _Right), "invalid comparator");

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
  0003e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00049	7c 02		 jl	 SHORT $LN7@min
  0004b	eb 6d		 jmp	 SHORT $LN10@min
$LN7@min:
  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00054	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	45 33 c9	 xor	 r9d, r9d
  00068	41 b8 8d 11 00
	00		 mov	 r8d, 4493		; 0000118dH
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00075	b9 02 00 00 00	 mov	 ecx, 2
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00080	90		 npad	 1
  00081	83 f8 01	 cmp	 eax, 1
  00084	75 03		 jne	 SHORT $LN12@min
  00086	cc		 int	 3
  00087	33 c0		 xor	 eax, eax
$LN12@min:
  00089	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00092	41 b9 8d 11 00
	00		 mov	 r9d, 4493		; 0000118dH
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BC@BLAPCBGI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAi?$AAn@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000b3	90		 npad	 1
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 93		 jne	 SHORT $LN7@min
$LN10@min:
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	0f 85 75 ff ff
	ff		 jne	 $LN4@min

; 4494 :         return _Right;

  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  000c9	eb 05		 jmp	 SHORT $LN1@min
$LN8@min:

; 4495 :     }
; 4496 : 
; 4497 :     return _Left;

  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
$LN1@min:

; 4498 : }

  000d0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
??$min@_J@std@@YAAEB_JAEB_J0@Z ENDP			; std::min<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
outer_loop_count$ = 48
inner_loop_count$ = 52
tick_min$ = 72
i$5 = 84
ret$6 = 104
?get_tick_per_clock@@YANXZ PROC				; get_tick_per_clock

; 280  : static double get_tick_per_clock() {

  00000	40 57		 push	 rdi
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd

; 281  :     const int outer_loop_count = 1000;

  00018	c7 44 24 30 e8
	03 00 00	 mov	 DWORD PTR outer_loop_count$[rsp], 1000 ; 000003e8H

; 282  :     const int inner_loop_count = TEST_COUNT;

  00020	c7 44 24 34 88
	13 00 00	 mov	 DWORD PTR inner_loop_count$[rsp], 5000 ; 00001388H

; 283  :     auto tick_min = runl_por(inner_loop_count);

  00028	b9 88 13 00 00	 mov	 ecx, 5000		; 00001388H
  0002d	e8 00 00 00 00	 call	 runl_por
  00032	48 89 44 24 48	 mov	 QWORD PTR tick_min$[rsp], rax

; 284  :     for (int i = 0; i < outer_loop_count; i++) {

  00037	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$5[rsp], 0
  0003f	eb 0a		 jmp	 SHORT $LN4@get_tick_p
$LN2@get_tick_p:
  00041	8b 44 24 54	 mov	 eax, DWORD PTR i$5[rsp]
  00045	ff c0		 inc	 eax
  00047	89 44 24 54	 mov	 DWORD PTR i$5[rsp], eax
$LN4@get_tick_p:
  0004b	81 7c 24 54 e8
	03 00 00	 cmp	 DWORD PTR i$5[rsp], 1000 ; 000003e8H
  00053	7d 28		 jge	 SHORT $LN3@get_tick_p

; 285  :         auto ret = runl_por(inner_loop_count);

  00055	b9 88 13 00 00	 mov	 ecx, 5000		; 00001388H
  0005a	e8 00 00 00 00	 call	 runl_por
  0005f	48 89 44 24 68	 mov	 QWORD PTR ret$6[rsp], rax

; 286  :         tick_min = std::min(tick_min, ret);

  00064	48 8d 54 24 68	 lea	 rdx, QWORD PTR ret$6[rsp]
  00069	48 8d 4c 24 48	 lea	 rcx, QWORD PTR tick_min$[rsp]
  0006e	e8 00 00 00 00	 call	 ??$min@_J@std@@YAAEB_JAEB_J0@Z ; std::min<__int64>
  00073	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00076	48 89 44 24 48	 mov	 QWORD PTR tick_min$[rsp], rax

; 287  :     }

  0007b	eb c4		 jmp	 SHORT $LN2@get_tick_p
$LN3@get_tick_p:

; 288  :     return tick_min / (128.0 * inner_loop_count);

  0007d	f2 48 0f 2a 44
	24 48		 cvtsi2sd xmm0, QWORD PTR tick_min$[rsp]
  00084	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4123880000000000

; 289  : }

  0008c	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00092	48 8b cc	 mov	 rcx, rsp
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?get_tick_per_clock@@YANXZ$rtcFrameData
  0009c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a1	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  000a7	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000ae	5f		 pop	 rdi
  000af	c3		 ret	 0
?get_tick_per_clock@@YANXZ ENDP				; get_tick_per_clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@I@std@@YAAEBIAEBI0@Z
_TEXT	SEGMENT
_Left$ = 64
_Right$ = 72
??$max@I@std@@YAAEBIAEBI0@Z PROC			; std::max<unsigned int>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
  00028	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002d	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002f	39 08		 cmp	 DWORD PTR [rax], ecx
  00031	0f 83 90 00 00
	00		 jae	 $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00041	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00043	39 08		 cmp	 DWORD PTR [rax], ecx
  00045	72 02		 jb	 SHORT $LN7@max
  00047	eb 6d		 jmp	 SHORT $LN10@max
$LN7@max:
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00050	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	45 33 c9	 xor	 r9d, r9d
  00064	41 b8 69 11 00
	00		 mov	 r8d, 4457		; 00001169H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00071	b9 02 00 00 00	 mov	 ecx, 2
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007c	90		 npad	 1
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 03		 jne	 SHORT $LN12@max
  00082	cc		 int	 3
  00083	33 c0		 xor	 eax, eax
$LN12@max:
  00085	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008e	41 b9 69 11 00
	00		 mov	 r9d, 4457		; 00001169H
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000af	90		 npad	 1
  000b0	33 c0		 xor	 eax, eax
  000b2	85 c0		 test	 eax, eax
  000b4	75 93		 jne	 SHORT $LN7@max
$LN10@max:
  000b6	33 c0		 xor	 eax, eax
  000b8	85 c0		 test	 eax, eax
  000ba	0f 85 77 ff ff
	ff		 jne	 $LN4@max

; 4458 :         return _Right;

  000c0	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  000c5	eb 05		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR _Left$[rsp]
$LN1@max:

; 4462 : }

  000cc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d0	5f		 pop	 rdi
  000d1	c3		 ret	 0
??$max@I@std@@YAAEBIAEBI0@Z ENDP			; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
LSHIFT$ = 0
bitSetCount$ = 4
bitTest$1 = 8
tv73 = 16
tv69 = 24
bitMask$ = 48
?CountSetBits@@YAK_K@Z PROC				; CountSetBits

; 144  : static DWORD CountSetBits(ULONG_PTR bitMask) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 145  :     DWORD LSHIFT = sizeof(ULONG_PTR)*8 - 1;

  0001e	c7 04 24 3f 00
	00 00		 mov	 DWORD PTR LSHIFT$[rsp], 63 ; 0000003fH

; 146  :     DWORD bitSetCount = 0;

  00025	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR bitSetCount$[rsp], 0

; 147  :     for (ULONG_PTR bitTest = (ULONG_PTR)1 << LSHIFT; bitTest; bitTest >>= 1)

  0002d	8b 04 24	 mov	 eax, DWORD PTR LSHIFT$[rsp]
  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	48 89 4c 24 10	 mov	 QWORD PTR tv73[rsp], rcx
  0003a	0f b6 c8	 movzx	 ecx, al
  0003d	48 8b 44 24 10	 mov	 rax, QWORD PTR tv73[rsp]
  00042	48 d3 e0	 shl	 rax, cl
  00045	48 89 44 24 08	 mov	 QWORD PTR bitTest$1[rsp], rax
  0004a	eb 0d		 jmp	 SHORT $LN4@CountSetBi
$LN2@CountSetBi:
  0004c	48 8b 44 24 08	 mov	 rax, QWORD PTR bitTest$1[rsp]
  00051	48 d1 e8	 shr	 rax, 1
  00054	48 89 44 24 08	 mov	 QWORD PTR bitTest$1[rsp], rax
$LN4@CountSetBi:
  00059	48 83 7c 24 08
	00		 cmp	 QWORD PTR bitTest$1[rsp], 0
  0005f	74 39		 je	 SHORT $LN3@CountSetBi

; 148  :         bitSetCount += ((bitMask & bitTest) != 0);

  00061	48 8b 44 24 08	 mov	 rax, QWORD PTR bitTest$1[rsp]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bitMask$[rsp]
  0006b	48 23 c8	 and	 rcx, rax
  0006e	48 8b c1	 mov	 rax, rcx
  00071	48 85 c0	 test	 rax, rax
  00074	74 0a		 je	 SHORT $LN6@CountSetBi
  00076	c7 44 24 18 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0007e	eb 08		 jmp	 SHORT $LN7@CountSetBi
$LN6@CountSetBi:
  00080	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN7@CountSetBi:
  00088	8b 44 24 18	 mov	 eax, DWORD PTR tv69[rsp]
  0008c	8b 4c 24 04	 mov	 ecx, DWORD PTR bitSetCount$[rsp]
  00090	03 c8		 add	 ecx, eax
  00092	8b c1		 mov	 eax, ecx
  00094	89 44 24 04	 mov	 DWORD PTR bitSetCount$[rsp], eax
  00098	eb b2		 jmp	 SHORT $LN2@CountSetBi
$LN3@CountSetBi:

; 149  : 
; 150  :     return bitSetCount;

  0009a	8b 44 24 04	 mov	 eax, DWORD PTR bitSetCount$[rsp]

; 151  : }

  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5f		 pop	 rdi
  000a3	c3		 ret	 0
?CountSetBits@@YAK_K@Z ENDP				; CountSetBits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
defaultClock$ = 56
buffer$ = 96
ptr_mhz$ = 1128
ptr_ghz$ = 1136
ptr$ = 1144
clockInfoAvailable$ = 1152
tv82 = 1168
tv93 = 1176
__$ArrayPad$ = 1184
?getCPUDefaultClockFromCPUName@@YANXZ PROC		; getCPUDefaultClockFromCPUName

; 126  : double getCPUDefaultClockFromCPUName() {

$LN9:
  00000	40 57		 push	 rdi
  00002	48 81 ec b0 04
	00 00		 sub	 rsp, 1200		; 000004b0H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 127  :     double defaultClock = 0.0;

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f2 0f 11 44 24
	38		 movsd	 QWORD PTR defaultClock$[rsp], xmm0

; 128  :     TCHAR buffer[1024] = { 0 };

  00033	48 8d 44 24 60	 lea	 rax, QWORD PTR buffer$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00042	f3 aa		 rep stosb

; 129  :     getCPUName(buffer, _countof(buffer));

  00044	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00049	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buffer$[rsp]
  0004e	e8 00 00 00 00	 call	 ?getCPUName@@YAHPEAD_K@Z ; getCPUName

; 130  :     TCHAR *ptr_mhz = _tcsstr(buffer, _T("MHz"));

  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG138699
  0005a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buffer$[rsp]
  0005f	e8 00 00 00 00	 call	 ?_tcsstr@@YAPEADPEADPEBD@Z ; _tcsstr
  00064	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR ptr_mhz$[rsp], rax

; 131  :     TCHAR *ptr_ghz = _tcsstr(buffer, _T("GHz"));

  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG138700
  00073	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buffer$[rsp]
  00078	e8 00 00 00 00	 call	 ?_tcsstr@@YAPEADPEADPEBD@Z ; _tcsstr
  0007d	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR ptr_ghz$[rsp], rax

; 132  :     TCHAR *ptr = _tcschr(buffer, _T('@'));

  00085	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0008a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buffer$[rsp]
  0008f	e8 00 00 00 00	 call	 ?_tcschr@@YAPEADPEADI@Z	; _tcschr
  00094	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR ptr$[rsp], rax

; 133  :     bool clockInfoAvailable = (NULL != ptr_mhz || ptr_ghz != NULL) && NULL != ptr;

  0009c	48 83 bc 24 68
	04 00 00 00	 cmp	 QWORD PTR ptr_mhz$[rsp], 0
  000a5	75 0b		 jne	 SHORT $LN4@getCPUDefa
  000a7	48 83 bc 24 70
	04 00 00 00	 cmp	 QWORD PTR ptr_ghz$[rsp], 0
  000b0	74 18		 je	 SHORT $LN5@getCPUDefa
$LN4@getCPUDefa:
  000b2	48 83 bc 24 78
	04 00 00 00	 cmp	 QWORD PTR ptr$[rsp], 0
  000bb	74 0d		 je	 SHORT $LN5@getCPUDefa
  000bd	c7 84 24 90 04
	00 00 01 00 00
	00		 mov	 DWORD PTR tv82[rsp], 1
  000c8	eb 0b		 jmp	 SHORT $LN6@getCPUDefa
$LN5@getCPUDefa:
  000ca	c7 84 24 90 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv82[rsp], 0
$LN6@getCPUDefa:
  000d5	0f b6 84 24 90
	04 00 00	 movzx	 eax, BYTE PTR tv82[rsp]
  000dd	88 84 24 80 04
	00 00		 mov	 BYTE PTR clockInfoAvailable$[rsp], al

; 134  :     if (clockInfoAvailable && 1 == _stscanf_s(ptr+1, _T("%lf"), &defaultClock)) {

  000e4	0f b6 84 24 80
	04 00 00	 movzx	 eax, BYTE PTR clockInfoAvailable$[rsp]
  000ec	85 c0		 test	 eax, eax
  000ee	74 64		 je	 SHORT $LN2@getCPUDefa
  000f0	48 8b 84 24 78
	04 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	4c 8d 44 24 38	 lea	 r8, QWORD PTR defaultClock$[rsp]
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG138702
  00107	48 8b c8	 mov	 rcx, rax
  0010a	e8 00 00 00 00	 call	 sscanf_s
  0010f	83 f8 01	 cmp	 eax, 1
  00112	75 40		 jne	 SHORT $LN2@getCPUDefa

; 135  :         return defaultClock * ((NULL == ptr_ghz) ? 1000.0 : 1.0);

  00114	48 83 bc 24 70
	04 00 00 00	 cmp	 QWORD PTR ptr_ghz$[rsp], 0
  0011d	75 13		 jne	 SHORT $LN7@getCPUDefa
  0011f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@408f400000000000
  00127	f2 0f 11 84 24
	98 04 00 00	 movsd	 QWORD PTR tv93[rsp], xmm0
  00130	eb 11		 jmp	 SHORT $LN8@getCPUDefa
$LN7@getCPUDefa:
  00132	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013a	f2 0f 11 84 24
	98 04 00 00	 movsd	 QWORD PTR tv93[rsp], xmm0
$LN8@getCPUDefa:
  00143	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR defaultClock$[rsp]
  00149	f2 0f 59 84 24
	98 04 00 00	 mulsd	 xmm0, QWORD PTR tv93[rsp]
  00152	eb 03		 jmp	 SHORT $LN1@getCPUDefa
$LN2@getCPUDefa:

; 136  :     }
; 137  :     return 0.0;

  00154	0f 57 c0	 xorps	 xmm0, xmm0
$LN1@getCPUDefa:

; 138  : }

  00157	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  0015d	48 8b cc	 mov	 rcx, rsp
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCPUDefaultClockFromCPUName@@YANXZ$rtcFrameData
  00167	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0016c	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  00172	48 8b 8c 24 a0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017a	48 33 cc	 xor	 rcx, rsp
  0017d	e8 00 00 00 00	 call	 __security_check_cookie
  00182	48 81 c4 b0 04
	00 00		 add	 rsp, 1200		; 000004b0H
  00189	5f		 pop	 rdi
  0018a	c3		 ret	 0
?getCPUDefaultClockFromCPUName@@YANXZ ENDP		; getCPUDefaultClockFromCPUName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
;	COMDAT ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z
_TEXT	SEGMENT
ptr$ = 32
tv69 = 40
tv74 = 48
this$ = 80
target_str$ = 88
remove_str$ = 96
??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z PROC ; <lambda_d3034a9c3733331d4a325329ca2d9a89>::operator(), COMDAT

; 70   :     auto remove_string =[](char *target_str, const char *remove_str) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 71   :         char *ptr = strstr(target_str, remove_str);

  00028	48 8b 54 24 60	 mov	 rdx, QWORD PTR remove_str$[rsp]
  0002d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR target_str$[rsp]
  00032	e8 00 00 00 00	 call	 ?strstr@@YAPEADQEADQEBD@Z ; strstr
  00037	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax

; 72   :         if (nullptr != ptr) {

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  00042	74 56		 je	 SHORT $LN2@operator

; 73   :             memmove(ptr, ptr + strlen(remove_str), (strlen(ptr) - strlen(remove_str) + 1) *  sizeof(target_str[0]));

  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  00049	e8 00 00 00 00	 call	 strlen
  0004e	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  00053	48 8b 4c 24 60	 mov	 rcx, QWORD PTR remove_str$[rsp]
  00058	e8 00 00 00 00	 call	 strlen
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv69[rsp]
  00062	48 2b c8	 sub	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 ff c0	 inc	 rax
  0006b	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  00070	48 8b 4c 24 60	 mov	 rcx, QWORD PTR remove_str$[rsp]
  00075	e8 00 00 00 00	 call	 strlen
  0007a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  0007f	48 03 c8	 add	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv74[rsp]
  0008a	4c 8b c1	 mov	 r8, rcx
  0008d	48 8b d0	 mov	 rdx, rax
  00090	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  00095	e8 00 00 00 00	 call	 memmove
$LN2@operator:

; 74   :         }
; 75   :     };

  0009a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z ENDP ; <lambda_d3034a9c3733331d4a325329ca2d9a89>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = 112
$T2 = 168
$T3 = 172
$T4 = 176
$T5 = 180
$T6 = 184
$T7 = 188
$T8 = 192
$T9 = 196
$T10 = 200
$T11 = 204
$T12 = 208
$T13 = 212
$T14 = 216
__$ArrayPad$ = 264
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  0002b	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T2[rsp], 13
  00036	c7 84 24 ac 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T3[rsp], 12
  00041	c7 84 24 b0 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T4[rsp], 11
  0004c	c7 84 24 b4 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T5[rsp], 10
  00057	c7 84 24 b8 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T6[rsp], 9
  00062	c7 84 24 bc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T7[rsp], 8
  0006d	c7 84 24 c0 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T8[rsp], 7
  00078	c7 84 24 c4 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T9[rsp], 6
  00083	c7 84 24 c8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T10[rsp], 5
  0008e	c7 84 24 cc 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T11[rsp], 4
  00099	c7 84 24 d0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T12[rsp], 2
  000a4	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T13[rsp], 1
  000af	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000b7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000bc	48 8d 84 24 ac
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000c4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000c9	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000d1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000d6	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000de	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000e3	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  000eb	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000f0	48 8d 84 24 bc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  000f8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000fd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00105	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010a	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00117	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  0011f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00124	4c 8d 8c 24 cc
	00 00 00	 lea	 r9, QWORD PTR $T11[rsp]
  0012c	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T12[rsp]
  00134	48 8d 94 24 d4
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  0013c	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  00144	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  00149	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  0014e	48 8b f9	 mov	 rdi, rcx
  00151	48 8b f0	 mov	 rsi, rax
  00154	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00159	f3 a4		 rep movsb
  0015b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  00162	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  00167	48 8b f8	 mov	 rdi, rax
  0016a	48 8b f1	 mov	 rsi, rcx
  0016d	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00172	f3 a4		 rep movsb
  00174	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017c	48 33 cc	 xor	 rcx, rsp
  0017f	e8 00 00 00 00	 call	 __security_check_cookie
  00184	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0018b	5f		 pop	 rdi
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 56
$T2 = 96
<args_0>$ = 104
<args_1>$ = 112
<args_2>$ = 120
<args_3>$ = 128
<args_4>$ = 136
<args_5>$ = 144
<args_6>$ = 152
<args_7>$ = 160
<args_8>$ = 168
<args_9>$ = 176
<args_10>$ = 184
<args_11>$ = 192
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 12 00 00 00	 mov	 ecx, 18
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 44 24 70	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_2>$[rsp]
  00057	8b 00		 mov	 eax, DWORD PTR [rax]
  00059	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  00065	8b 00		 mov	 eax, DWORD PTR [rax]
  00067	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  0006b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00073	8b 00		 mov	 eax, DWORD PTR [rax]
  00075	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  00087	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  0008f	8b 00		 mov	 eax, DWORD PTR [rax]
  00091	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  00095	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  0009d	8b 00		 mov	 eax, DWORD PTR [rax]
  0009f	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000ab	8b 00		 mov	 eax, DWORD PTR [rax]
  000ad	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000b9	8b 00		 mov	 eax, DWORD PTR [rax]
  000bb	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000c7	8b 00		 mov	 eax, DWORD PTR [rax]
  000c9	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000cd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000d5	8b 00		 mov	 eax, DWORD PTR [rax]
  000d7	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000db	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  000df	48 8b 7c 24 60	 mov	 rdi, QWORD PTR $T2[rsp]
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000ec	f3 a4		 rep movsb
  000ee	48 8b 44 24 60	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  000f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f8	48 33 cc	 xor	 rcx, rsp
  000fb	e8 00 00 00 00	 call	 __security_check_cookie
  00100	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00104	5f		 pop	 rdi
  00105	5e		 pop	 rsi
  00106	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 200
$T3 = 204
$T4 = 208
$T5 = 212
$T6 = 216
$T7 = 220
$T8 = 224
$T9 = 228
$T10 = 232
$T11 = 236
$T12 = 240
$T13 = 244
$T14 = 248
$T15 = 252
$T16 = 256
$T17 = 264
__$ArrayPad$ = 328
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  0002b	c7 84 24 c8 00
	00 00 12 00 00
	00		 mov	 DWORD PTR $T2[rsp], 18
  00036	c7 84 24 cc 00
	00 00 10 00 00
	00		 mov	 DWORD PTR $T3[rsp], 16
  00041	c7 84 24 d0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T4[rsp], 15
  0004c	c7 84 24 d4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T5[rsp], 14
  00057	c7 84 24 d8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T6[rsp], 13
  00062	c7 84 24 dc 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T7[rsp], 11
  0006d	c7 84 24 e0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T8[rsp], 10
  00078	c7 84 24 e4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T9[rsp], 9
  00083	c7 84 24 e8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T10[rsp], 8
  0008e	c7 84 24 ec 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T11[rsp], 7
  00099	c7 84 24 f0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T12[rsp], 6
  000a4	c7 84 24 f4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T13[rsp], 5
  000af	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T14[rsp], 4
  000ba	c7 84 24 fc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T15[rsp], 2
  000c5	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T16[rsp], 1
  000d0	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000d8	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  000dd	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000e5	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000ea	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000f2	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000f7	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000ff	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00104	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  0010c	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00111	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  00119	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0011e	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00126	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0012b	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00133	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00138	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00140	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00145	48 8d 84 24 ec
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  0014d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00152	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0015a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015f	48 8d 84 24 f4
	00 00 00	 lea	 rax, QWORD PTR $T13[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016c	4c 8d 8c 24 f8
	00 00 00	 lea	 r9, QWORD PTR $T14[rsp]
  00174	4c 8d 84 24 fc
	00 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0017c	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00184	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  0018c	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  00191	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00199	48 8b f9	 mov	 rdi, rcx
  0019c	48 8b f0	 mov	 rsi, rax
  0019f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001a4	f3 a4		 rep movsb
  001a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  001ad	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  001b5	48 8b f8	 mov	 rdi, rax
  001b8	48 8b f1	 mov	 rsi, rcx
  001bb	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001c0	f3 a4		 rep movsb
  001c2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ca	48 33 cc	 xor	 rcx, rsp
  001cd	e8 00 00 00 00	 call	 __security_check_cookie
  001d2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  001d9	5f		 pop	 rdi
  001da	5e		 pop	 rsi
  001db	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 72
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
<args_14>$ = 232
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR <args_14>$[rsp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	89 44 24 38	 mov	 DWORD PTR $T1[rsp+56], eax
  0010b	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  0010f	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00114	48 8b f0	 mov	 rsi, rax
  00117	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0011c	f3 a4		 rep movsb
  0011e	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00123	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00128	48 33 cc	 xor	 rcx, rsp
  0012b	e8 00 00 00 00	 call	 __security_check_cookie
  00130	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 192
$T3 = 196
$T4 = 200
$T5 = 204
$T6 = 208
$T7 = 212
$T8 = 216
$T9 = 220
$T10 = 224
$T11 = 228
$T12 = 232
$T13 = 236
$T14 = 240
$T15 = 244
$T16 = 248
__$ArrayPad$ = 304
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  0002b	c7 84 24 c0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T2[rsp], 15
  00036	c7 84 24 c4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T3[rsp], 14
  00041	c7 84 24 c8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T4[rsp], 13
  0004c	c7 84 24 cc 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T5[rsp], 12
  00057	c7 84 24 d0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T6[rsp], 10
  00062	c7 84 24 d4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T7[rsp], 9
  0006d	c7 84 24 d8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T8[rsp], 8
  00078	c7 84 24 dc 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T9[rsp], 7
  00083	c7 84 24 e0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T10[rsp], 6
  0008e	c7 84 24 e4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T11[rsp], 5
  00099	c7 84 24 e8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T12[rsp], 4
  000a4	c7 84 24 ec 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T13[rsp], 2
  000af	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T14[rsp], 1
  000ba	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T15[rsp], 0
  000c5	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000cd	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000d2	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000da	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000df	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000e7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000ec	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000f4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f9	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00101	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00106	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  0010e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00113	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0011b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00120	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00128	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0012d	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0013a	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00142	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00147	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0014f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00154	4c 8d 8c 24 ec
	00 00 00	 lea	 r9, QWORD PTR $T13[rsp]
  0015c	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T14[rsp]
  00164	48 8d 94 24 f4
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0016c	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00174	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  00179	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00181	48 8b f9	 mov	 rdi, rcx
  00184	48 8b f0	 mov	 rsi, rax
  00187	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0018c	f3 a4		 rep movsb
  0018e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  00195	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  0019d	48 8b f8	 mov	 rdi, rax
  001a0	48 8b f1	 mov	 rsi, rcx
  001a3	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  001a8	f3 a4		 rep movsb
  001aa	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b2	48 33 cc	 xor	 rcx, rsp
  001b5	e8 00 00 00 00	 call	 __security_check_cookie
  001ba	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  001c1	5f		 pop	 rdi
  001c2	5e		 pop	 rsi
  001c3	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 64
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  00101	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00106	48 8b f0	 mov	 rsi, rax
  00109	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0010e	f3 a4		 rep movsb
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00115	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
start$ = 64
?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z PROC	; GetProcessAvgCPUUsage

; 459  : double GetProcessAvgCPUUsage(PROCESS_TIME *start) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 460  : #if defined(_WIN32) || defined(_WIN64)
; 461  :     return GetProcessAvgCPUUsage(GetCurrentProcess(), start);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00024	48 8b 54 24 40	 mov	 rdx, QWORD PTR start$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z ; GetProcessAvgCPUUsage

; 462  : #else
; 463  :     return GetProcessAvgCPUUsage(NULL, start);
; 464  : #endif
; 465  : }

  00031	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
?GetProcessAvgCPUUsage@@YANPEAUPROCESS_TIME@@@Z ENDP	; GetProcessAvgCPUUsage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
current$ = 56
cpu_info$ = 128
result$ = 248
current_total_time$5 = 256
start_total_time$6 = 264
tv82 = 280
tv89 = 288
__$ArrayPad$ = 296
hProcess$ = 320
start$ = 328
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z PROC ; GetProcessAvgCPUUsage

; 445  : double GetProcessAvgCPUUsage(HANDLE hProcess, PROCESS_TIME *start) {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR [rsp+320]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 446  :     PROCESS_TIME current = { 0 };

  0003b	48 8d 44 24 38	 lea	 rax, QWORD PTR current$[rsp]
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0004a	f3 aa		 rep stosb

; 447  :     cpu_info_t cpu_info;
; 448  :     double result = 0;

  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR result$[rsp], xmm0

; 449  :     if (NULL != hProcess
; 450  :         && get_cpu_info(&cpu_info)
; 451  :         && GetProcessTime(hProcess, &current)) {

  00058	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR hProcess$[rsp], 0
  00061	0f 84 54 01 00
	00		 je	 $LN2@GetProcess
  00067	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR cpu_info$[rsp]
  0006f	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z ; get_cpu_info
  00074	0f b6 c0	 movzx	 eax, al
  00077	85 c0		 test	 eax, eax
  00079	0f 84 3c 01 00
	00		 je	 $LN2@GetProcess
  0007f	48 8d 54 24 38	 lea	 rdx, QWORD PTR current$[rsp]
  00084	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR hProcess$[rsp]
  0008c	e8 00 00 00 00	 call	 ?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z ; GetProcessTime
  00091	85 c0		 test	 eax, eax
  00093	0f 84 22 01 00
	00		 je	 $LN2@GetProcess

; 452  :         uint64_t current_total_time = current.kernel + current.user;

  00099	48 8b 44 24 50	 mov	 rax, QWORD PTR current$[rsp+24]
  0009e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR current$[rsp+16]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 8b c1	 mov	 rax, rcx
  000a9	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR current_total_time$5[rsp], rax

; 453  :         uint64_t start_total_time = (nullptr == start) ? 0 : start->kernel + start->user;

  000b1	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR start$[rsp], 0
  000ba	75 0e		 jne	 SHORT $LN4@GetProcess
  000bc	48 c7 84 24 18
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv82[rsp], 0
  000c8	eb 20		 jmp	 SHORT $LN5@GetProcess
$LN4@GetProcess:
  000ca	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  000d2	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d6	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR start$[rsp]
  000de	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  000e2	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv82[rsp], rax
$LN5@GetProcess:
  000ea	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv82[rsp]
  000f2	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR start_total_time$6[rsp], rax

; 454  :         result = (current_total_time - start_total_time) * 100.0 / (double)(cpu_info.logical_cores * (current.exit - ((nullptr == start) ? current.creation : start->exit)));

  000fa	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR start$[rsp], 0
  00103	75 0f		 jne	 SHORT $LN6@GetProcess
  00105	48 8b 44 24 38	 mov	 rax, QWORD PTR current$[rsp]
  0010a	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv89[rsp], rax
  00112	eb 14		 jmp	 SHORT $LN7@GetProcess
$LN6@GetProcess:
  00114	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  0011c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00120	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv89[rsp], rax
$LN7@GetProcess:
  00128	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR start_total_time$6[rsp]
  00130	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR current_total_time$5[rsp]
  00138	48 2b c8	 sub	 rcx, rax
  0013b	48 8b c1	 mov	 rax, rcx
  0013e	48 85 c0	 test	 rax, rax
  00141	7c 07		 jl	 SHORT $LN10@GetProcess
  00143	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00148	eb 19		 jmp	 SHORT $LN11@GetProcess
$LN10@GetProcess:
  0014a	48 8b c8	 mov	 rcx, rax
  0014d	48 d1 e9	 shr	 rcx, 1
  00150	48 83 e0 01	 and	 rax, 1
  00154	48 0b c8	 or	 rcx, rax
  00157	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  0015c	f2 0f 58 c9	 addsd	 xmm1, xmm1
  00160	0f 28 c1	 movaps	 xmm0, xmm1
$LN11@GetProcess:
  00163	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0016b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR cpu_info$[rsp+8]
  00172	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv89[rsp]
  0017a	48 8b 54 24 40	 mov	 rdx, QWORD PTR current$[rsp+8]
  0017f	48 2b d1	 sub	 rdx, rcx
  00182	48 8b ca	 mov	 rcx, rdx
  00185	48 0f af c1	 imul	 rax, rcx
  00189	48 85 c0	 test	 rax, rax
  0018c	7c 07		 jl	 SHORT $LN8@GetProcess
  0018e	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  00193	eb 19		 jmp	 SHORT $LN9@GetProcess
$LN8@GetProcess:
  00195	48 8b c8	 mov	 rcx, rax
  00198	48 d1 e9	 shr	 rcx, 1
  0019b	48 83 e0 01	 and	 rax, 1
  0019f	48 0b c8	 or	 rcx, rax
  001a2	f2 48 0f 2a d1	 cvtsi2sd xmm2, rcx
  001a7	f2 0f 58 d2	 addsd	 xmm2, xmm2
  001ab	0f 28 ca	 movaps	 xmm1, xmm2
$LN9@GetProcess:
  001ae	f2 0f 5e c1	 divsd	 xmm0, xmm1
  001b2	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR result$[rsp], xmm0
$LN2@GetProcess:

; 455  :     }
; 456  :     return result;

  001bb	f2 0f 10 84 24
	f8 00 00 00	 movsd	 xmm0, QWORD PTR result$[rsp]

; 457  : }

  001c4	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  001ca	48 8b cc	 mov	 rcx, rsp
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z$rtcFrameData
  001d4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001d9	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  001df	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001e7	48 33 cc	 xor	 rcx, rsp
  001ea	e8 00 00 00 00	 call	 __security_check_cookie
  001ef	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  001f6	5f		 pop	 rdi
  001f7	c3		 ret	 0
?GetProcessAvgCPUUsage@@YANPEAXPEAUPROCESS_TIME@@@Z ENDP ; GetProcessAvgCPUUsage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
systime$ = 56
tv73 = 96
tv86 = 104
__$ArrayPad$ = 112
hProcess$ = 144
time$ = 152
?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z PROC	; GetProcessTime

; 419  : BOOL GetProcessTime(HANDLE hProcess, PROCESS_TIME *time) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 420  : #if defined(_WIN32) || defined(_WIN64)
; 421  :     SYSTEMTIME systime;
; 422  :     GetSystemTime(&systime);

  00038	48 8d 4c 24 38	 lea	 rcx, QWORD PTR systime$[rsp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 423  :     return (NULL != hProcess

  00043	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR hProcess$[rsp], 0
  0004c	0f 84 92 00 00
	00		 je	 $LN3@GetProcess
  00052	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR time$[rsp]
  0005a	48 83 c0 18	 add	 rax, 24
  0005e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR time$[rsp]
  00066	48 83 c1 10	 add	 rcx, 16
  0006a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR time$[rsp]
  00072	48 83 c2 08	 add	 rdx, 8
  00076	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR time$[rsp]
  0007e	4c 89 44 24 60	 mov	 QWORD PTR tv73[rsp], r8
  00083	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00088	4c 8b c9	 mov	 r9, rcx
  0008b	4c 8b c2	 mov	 r8, rdx
  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR tv73[rsp]
  00093	48 8b d0	 mov	 rdx, rax
  00096	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR hProcess$[rsp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcessTimes
  000a4	85 c0		 test	 eax, eax
  000a6	74 3c		 je	 SHORT $LN3@GetProcess
  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR hProcess$[rsp]
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  000b8	85 c0		 test	 eax, eax
  000ba	74 1e		 je	 SHORT $LN4@GetProcess
  000bc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR time$[rsp]
  000c4	48 83 c0 08	 add	 rax, 8
  000c8	48 8b d0	 mov	 rdx, rax
  000cb	48 8d 4c 24 38	 lea	 rcx, QWORD PTR systime$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime
  000d6	85 c0		 test	 eax, eax
  000d8	74 0a		 je	 SHORT $LN3@GetProcess
$LN4@GetProcess:
  000da	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  000e2	eb 08		 jmp	 SHORT $LN5@GetProcess
$LN3@GetProcess:
  000e4	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN5@GetProcess:
  000ec	8b 44 24 68	 mov	 eax, DWORD PTR tv86[rsp]

; 424  :         && GetProcessTimes(hProcess, (FILETIME *)&time->creation, (FILETIME *)&time->exit, (FILETIME *)&time->kernel, (FILETIME *)&time->user)
; 425  :         && (WAIT_OBJECT_0 == WaitForSingleObject(hProcess, 0) || SystemTimeToFileTime(&systime, (FILETIME *)&time->exit)));
; 426  : #else //#if defined(_WIN32) || defined(_WIN64)
; 427  :     struct tms tm;
; 428  :     times(&tm);
; 429  :     time->exit = time->creation;
; 430  :     time->creation = clock();
; 431  :     time->kernel = tm.tms_stime;
; 432  :     time->user = tm.tms_utime;
; 433  :     return 0;
; 434  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 435  : }

  000f0	8b f8		 mov	 edi, eax
  000f2	48 8b cc	 mov	 rcx, rsp
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z$rtcFrameData
  000fc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00101	8b c7		 mov	 eax, edi
  00103	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00108	48 33 cc	 xor	 rcx, rsp
  0010b	e8 00 00 00 00	 call	 __security_check_cookie
  00110	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00117	5f		 pop	 rdi
  00118	c3		 ret	 0
?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z ENDP	; GetProcessTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
time$ = 48
?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z PROC		; GetProcessTime

; 437  : BOOL GetProcessTime(PROCESS_TIME *time) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 438  : #if defined(_WIN32) || defined(_WIN64)
; 439  :     return GetProcessTime(GetCurrentProcess(), time);

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00024	48 8b 54 24 30	 mov	 rdx, QWORD PTR time$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?GetProcessTime@@YAHPEAXPEAUPROCESS_TIME@@@Z ; GetProcessTime

; 440  : #else
; 441  :     return GetProcessTime(NULL, time);
; 442  : #endif
; 443  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
?GetProcessTime@@YAHPEAUPROCESS_TIME@@@Z ENDP		; GetProcessTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
defaultClock$ = 48
CPUInfo$ = 72
tick_per_clock$ = 104
tick_per_sec$ = 112
__$ArrayPad$ = 128
?getCPUMaxTurboClock@@YANXZ PROC			; getCPUMaxTurboClock

; 318  : double getCPUMaxTurboClock() {

$LN7:
  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 319  :     double defaultClock = getCPUDefaultClock();

  0002b	e8 00 00 00 00	 call	 ?getCPUDefaultClock@@YANXZ ; getCPUDefaultClock
  00030	f2 0f 11 44 24
	30		 movsd	 QWORD PTR defaultClock$[rsp], xmm0

; 320  :     if (0.0 >= defaultClock) {

  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	66 0f 2f 44 24
	30		 comisd	 xmm0, QWORD PTR defaultClock$[rsp]
  0003f	72 08		 jb	 SHORT $LN2@getCPUMaxT

; 321  :         return 0.0;

  00041	0f 57 c0	 xorps	 xmm0, xmm0
  00044	e9 c5 00 00 00	 jmp	 $LN1@getCPUMaxT
$LN2@getCPUMaxT:

; 322  :     }
; 323  : 
; 324  :     //http://instlatx64.atw.hu/
; 325  :     //によれば、Sandy/Ivy/Haswell/Silvermont
; 326  :     //いずれでもサポートされているのでノーチェックでも良い気がするが...
; 327  :     //固定クロックのタイマーを持つかチェック (Fn:8000_0007:EDX8)
; 328  :     int CPUInfo[4] ={ -1 };

  00049	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR CPUInfo$[rsp], -1
  00051	48 8d 44 24 4c	 lea	 rax, QWORD PTR CPUInfo$[rsp+4]
  00056	48 8b f8	 mov	 rdi, rax
  00059	33 c0		 xor	 eax, eax
  0005b	b9 0c 00 00 00	 mov	 ecx, 12
  00060	f3 aa		 rep stosb

; 329  :     __cpuid(CPUInfo, 0x80000007);

  00062	b8 07 00 00 80	 mov	 eax, -2147483641	; ffffffff80000007H
  00067	33 c9		 xor	 ecx, ecx
  00069	0f a2		 cpuid
  0006b	48 8d 7c 24 48	 lea	 rdi, QWORD PTR CPUInfo$[rsp]
  00070	89 07		 mov	 DWORD PTR [rdi], eax
  00072	89 5f 04	 mov	 DWORD PTR [rdi+4], ebx
  00075	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  00078	89 57 0c	 mov	 DWORD PTR [rdi+12], edx

; 330  :     if (0 == (CPUInfo[3] & (1<<8))) {

  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	48 6b c0 03	 imul	 rax, rax, 3
  00084	8b 44 04 48	 mov	 eax, DWORD PTR CPUInfo$[rsp+rax]
  00088	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0008d	85 c0		 test	 eax, eax
  0008f	75 08		 jne	 SHORT $LN3@getCPUMaxT

; 331  :         return defaultClock;

  00091	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR defaultClock$[rsp]
  00097	eb 75		 jmp	 SHORT $LN1@getCPUMaxT
$LN3@getCPUMaxT:

; 332  :     }
; 333  :     //rdtscp命令のチェック (Fn:8000_0001:EDX27)
; 334  :     __cpuid(CPUInfo, 0x80000001);

  00099	b8 01 00 00 80	 mov	 eax, -2147483647	; ffffffff80000001H
  0009e	33 c9		 xor	 ecx, ecx
  000a0	0f a2		 cpuid
  000a2	48 8d 7c 24 48	 lea	 rdi, QWORD PTR CPUInfo$[rsp]
  000a7	89 07		 mov	 DWORD PTR [rdi], eax
  000a9	89 5f 04	 mov	 DWORD PTR [rdi+4], ebx
  000ac	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  000af	89 57 0c	 mov	 DWORD PTR [rdi+12], edx

; 335  :     if (0 == (CPUInfo[3] & (1<<27))) {

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	48 6b c0 03	 imul	 rax, rax, 3
  000bb	8b 44 04 48	 mov	 eax, DWORD PTR CPUInfo$[rsp+rax]
  000bf	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000c4	85 c0		 test	 eax, eax
  000c6	75 08		 jne	 SHORT $LN4@getCPUMaxT

; 336  :         return defaultClock;

  000c8	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR defaultClock$[rsp]
  000ce	eb 3e		 jmp	 SHORT $LN1@getCPUMaxT
$LN4@getCPUMaxT:

; 337  :     }
; 338  :     //例外が発生するなら処理を中断する
; 339  :     if (!check_rdtscp_available()) {

  000d0	e8 00 00 00 00	 call	 ?check_rdtscp_available@@YA_NXZ ; check_rdtscp_available
  000d5	0f b6 c0	 movzx	 eax, al
  000d8	85 c0		 test	 eax, eax
  000da	75 08		 jne	 SHORT $LN5@getCPUMaxT

; 340  :         return defaultClock;

  000dc	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR defaultClock$[rsp]
  000e2	eb 2a		 jmp	 SHORT $LN1@getCPUMaxT
$LN5@getCPUMaxT:

; 341  :     }
; 342  : 
; 343  :     const double tick_per_clock = get_tick_per_clock();

  000e4	e8 00 00 00 00	 call	 ?get_tick_per_clock@@YANXZ ; get_tick_per_clock
  000e9	f2 0f 11 44 24
	68		 movsd	 QWORD PTR tick_per_clock$[rsp], xmm0

; 344  :     const double tick_per_sec = get_tick_per_sec();

  000ef	e8 00 00 00 00	 call	 ?get_tick_per_sec@@YANXZ ; get_tick_per_sec
  000f4	f2 0f 11 44 24
	70		 movsd	 QWORD PTR tick_per_sec$[rsp], xmm0

; 345  :     return (tick_per_sec / tick_per_clock) * 1e-9;

  000fa	f2 0f 10 44 24
	70		 movsd	 xmm0, QWORD PTR tick_per_sec$[rsp]
  00100	f2 0f 5e 44 24
	68		 divsd	 xmm0, QWORD PTR tick_per_clock$[rsp]
  00106	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3e112e0be826d695
$LN1@getCPUMaxT:

; 346  : }

  0010e	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR [rsp+32], xmm0
  00114	48 8b cc	 mov	 rcx, rsp
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCPUMaxTurboClock@@YANXZ$rtcFrameData
  0011e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00123	f3 0f 6f 44 24
	20		 movdqu	 xmm0, XMMWORD PTR [rsp+32]
  00129	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00131	48 33 cc	 xor	 rcx, rsp
  00134	e8 00 00 00 00	 call	 __security_check_cookie
  00139	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00140	5f		 pop	 rdi
  00141	5b		 pop	 rbx
  00142	c3		 ret	 0
?getCPUMaxTurboClock@@YANXZ ENDP			; getCPUMaxTurboClock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
defautlClock$ = 48
?getCPUDefaultClock@@YANXZ PROC				; getCPUDefaultClock

; 371  : double getCPUDefaultClock() {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 372  :     double defautlClock = getCPUDefaultClockFromCPUName();

  00015	e8 00 00 00 00	 call	 ?getCPUDefaultClockFromCPUName@@YANXZ ; getCPUDefaultClockFromCPUName
  0001a	f2 0f 11 44 24
	30		 movsd	 QWORD PTR defautlClock$[rsp], xmm0

; 373  :     if (0 >= defautlClock)

  00020	0f 57 c0	 xorps	 xmm0, xmm0
  00023	66 0f 2f 44 24
	30		 comisd	 xmm0, QWORD PTR defautlClock$[rsp]
  00029	72 0b		 jb	 SHORT $LN2@getCPUDefa

; 374  :         defautlClock = getCPUDefaultClockOpenCL();

  0002b	e8 00 00 00 00	 call	 ?getCPUDefaultClockOpenCL@@YANXZ ; getCPUDefaultClockOpenCL
  00030	f2 0f 11 44 24
	30		 movsd	 QWORD PTR defautlClock$[rsp], xmm0
$LN2@getCPUDefa:

; 375  :     return defautlClock;

  00036	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR defautlClock$[rsp]

; 376  : }

  0003c	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00040	5f		 pop	 rdi
  00041	c3		 ret	 0
?getCPUDefaultClock@@YANXZ ENDP				; getCPUDefaultClock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
ret$ = 48
cpu_info$ = 80
defaultClock$4 = 200
noDefaultClockInCPUName$5 = 208
maxFrequency$6 = 216
cpuGen$7 = 224
tv78 = 240
tv91 = 248
tv136 = 256
tv147 = 264
tv156 = 272
tv155 = 280
tv163 = 288
__$ArrayPad$ = 296
buffer$ = 320
nSize$ = 328
pSession$ = 336
?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z PROC	; getCPUInfo

; 386  : ) {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR [rsp+320]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 387  :     int ret = 0;

  00040	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 388  :     buffer[0] = _T('\0');

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	48 6b c0 00	 imul	 rax, rax, 0
  00051	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00059	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 389  :     cpu_info_t cpu_info;
; 390  :     if (getCPUName(buffer, nSize) || !get_cpu_info(&cpu_info)) {

  0005d	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR nSize$[rsp]
  00065	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0006d	e8 00 00 00 00	 call	 ?getCPUName@@YAHPEAD_K@Z ; getCPUName
  00072	85 c0		 test	 eax, eax
  00074	75 11		 jne	 SHORT $LN4@getCPUInfo
  00076	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cpu_info$[rsp]
  0007b	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z ; get_cpu_info
  00080	0f b6 c0	 movzx	 eax, al
  00083	85 c0		 test	 eax, eax
  00085	75 22		 jne	 SHORT $LN2@getCPUInfo
$LN4@getCPUInfo:

; 391  :         buffer[0] = _T('\0');

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 00	 imul	 rax, rax, 0
  00090	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00098	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 392  :         ret = 1;

  0009c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR ret$[rsp], 1

; 393  :     } else {

  000a4	e9 88 02 00 00	 jmp	 $LN3@getCPUInfo
$LN2@getCPUInfo:

; 394  :         double defaultClock = getCPUDefaultClockFromCPUName();

  000a9	e8 00 00 00 00	 call	 ?getCPUDefaultClockFromCPUName@@YANXZ ; getCPUDefaultClockFromCPUName
  000ae	f2 0f 11 84 24
	c8 00 00 00	 movsd	 QWORD PTR defaultClock$4[rsp], xmm0

; 395  :         bool noDefaultClockInCPUName = (0.0 >= defaultClock);

  000b7	0f 57 c0	 xorps	 xmm0, xmm0
  000ba	66 0f 2f 84 24
	c8 00 00 00	 comisd	 xmm0, QWORD PTR defaultClock$4[rsp]
  000c3	72 0d		 jb	 SHORT $LN11@getCPUInfo
  000c5	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv78[rsp], 1
  000d0	eb 0b		 jmp	 SHORT $LN12@getCPUInfo
$LN11@getCPUInfo:
  000d2	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv78[rsp], 0
$LN12@getCPUInfo:
  000dd	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR tv78[rsp]
  000e5	88 84 24 d0 00
	00 00		 mov	 BYTE PTR noDefaultClockInCPUName$5[rsp], al

; 396  :         if (noDefaultClockInCPUName)

  000ec	0f b6 84 24 d0
	00 00 00	 movzx	 eax, BYTE PTR noDefaultClockInCPUName$5[rsp]
  000f4	85 c0		 test	 eax, eax
  000f6	74 0e		 je	 SHORT $LN5@getCPUInfo

; 397  :             defaultClock = getCPUDefaultClockOpenCL();

  000f8	e8 00 00 00 00	 call	 ?getCPUDefaultClockOpenCL@@YANXZ ; getCPUDefaultClockOpenCL
  000fd	f2 0f 11 84 24
	c8 00 00 00	 movsd	 QWORD PTR defaultClock$4[rsp], xmm0
$LN5@getCPUInfo:

; 398  :         if (defaultClock > 0.0) {

  00106	f2 0f 10 84 24
	c8 00 00 00	 movsd	 xmm0, QWORD PTR defaultClock$4[rsp]
  0010f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00117	0f 86 02 01 00
	00		 jbe	 $LN6@getCPUInfo

; 399  :             if (noDefaultClockInCPUName) {

  0011d	0f b6 84 24 d0
	00 00 00	 movzx	 eax, BYTE PTR noDefaultClockInCPUName$5[rsp]
  00125	85 c0		 test	 eax, eax
  00127	74 66		 je	 SHORT $LN7@getCPUInfo

; 400  :                 _stprintf_s(buffer + _tcslen(buffer), nSize - _tcslen(buffer), _T(" @ %.2fGHz"), defaultClock);

  00129	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00131	e8 00 00 00 00	 call	 strlen
  00136	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR nSize$[rsp]
  0013e	48 2b c8	 sub	 rcx, rax
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv91[rsp], rax
  0014c	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00154	e8 00 00 00 00	 call	 strlen
  00159	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00161	48 03 c8	 add	 rcx, rax
  00164	48 8b c1	 mov	 rax, rcx
  00167	f2 0f 10 9c 24
	c8 00 00 00	 movsd	 xmm3, QWORD PTR defaultClock$4[rsp]
  00170	66 49 0f 7e d9	 movq	 r9, xmm3
  00175	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG153876
  0017c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv91[rsp]
  00184	48 8b d1	 mov	 rdx, rcx
  00187	48 8b c8	 mov	 rcx, rax
  0018a	e8 00 00 00 00	 call	 sprintf_s
$LN7@getCPUInfo:

; 401  :             }
; 402  :             double maxFrequency = getCPUMaxTurboClock();

  0018f	e8 00 00 00 00	 call	 ?getCPUMaxTurboClock@@YANXZ ; getCPUMaxTurboClock
  00194	f2 0f 11 84 24
	d8 00 00 00	 movsd	 QWORD PTR maxFrequency$6[rsp], xmm0

; 403  :             //大きな違いがなければ、TurboBoostはないものとして表示しない
; 404  :             if (maxFrequency / defaultClock > 1.01) {

  0019d	f2 0f 10 84 24
	d8 00 00 00	 movsd	 xmm0, QWORD PTR maxFrequency$6[rsp]
  001a6	f2 0f 5e 84 24
	c8 00 00 00	 divsd	 xmm0, QWORD PTR defaultClock$4[rsp]
  001af	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff028f5c28f5c29
  001b7	76 66		 jbe	 SHORT $LN8@getCPUInfo

; 405  :                 _stprintf_s(buffer + _tcslen(buffer), nSize - _tcslen(buffer), _T(" [TB: %.2fGHz]"), maxFrequency);

  001b9	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  001c1	e8 00 00 00 00	 call	 strlen
  001c6	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR nSize$[rsp]
  001ce	48 2b c8	 sub	 rcx, rax
  001d1	48 8b c1	 mov	 rax, rcx
  001d4	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv136[rsp], rax
  001dc	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  001e4	e8 00 00 00 00	 call	 strlen
  001e9	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  001f1	48 03 c8	 add	 rcx, rax
  001f4	48 8b c1	 mov	 rax, rcx
  001f7	f2 0f 10 9c 24
	d8 00 00 00	 movsd	 xmm3, QWORD PTR maxFrequency$6[rsp]
  00200	66 49 0f 7e d9	 movq	 r9, xmm3
  00205	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG153878
  0020c	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv136[rsp]
  00214	48 8b d1	 mov	 rdx, rcx
  00217	48 8b c8	 mov	 rcx, rax
  0021a	e8 00 00 00 00	 call	 sprintf_s
$LN8@getCPUInfo:
$LN6@getCPUInfo:

; 406  :             }
; 407  :         }
; 408  :         _stprintf_s(buffer + _tcslen(buffer), nSize - _tcslen(buffer), _T(" (%dC/%dT)"), cpu_info.physical_cores, cpu_info.logical_cores);

  0021f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00227	e8 00 00 00 00	 call	 strlen
  0022c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR nSize$[rsp]
  00234	48 2b c8	 sub	 rcx, rax
  00237	48 8b c1	 mov	 rax, rcx
  0023a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv147[rsp], rax
  00242	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0024a	e8 00 00 00 00	 call	 strlen
  0024f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00257	48 03 c8	 add	 rcx, rax
  0025a	48 8b c1	 mov	 rax, rcx
  0025d	8b 4c 24 58	 mov	 ecx, DWORD PTR cpu_info$[rsp+8]
  00261	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00265	44 8b 4c 24 54	 mov	 r9d, DWORD PTR cpu_info$[rsp+4]
  0026a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG153879
  00271	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv147[rsp]
  00279	48 8b d1	 mov	 rdx, rcx
  0027c	48 8b c8	 mov	 rcx, rax
  0027f	e8 00 00 00 00	 call	 sprintf_s

; 409  : #if ENCODER_QSV
; 410  :         int cpuGen = getCPUGen(pSession);

  00284	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR pSession$[rsp]
  0028c	e8 00 00 00 00	 call	 ?getCPUGen@@YAHPEAVMFXVideoSession@@@Z ; getCPUGen
  00291	89 84 24 e0 00
	00 00		 mov	 DWORD PTR cpuGen$7[rsp], eax

; 411  :         if (cpuGen != CPU_GEN_UNKNOWN) {

  00298	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR cpuGen$7[rsp], 0
  002a0	0f 84 8b 00 00
	00		 je	 $LN9@getCPUInfo

; 412  :             _stprintf_s(buffer + _tcslen(buffer), nSize - _tcslen(buffer), _T(" <%s>"), CPU_GEN_STR[cpuGen]);

  002a6	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR cpuGen$7[rsp]
  002ae	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv156[rsp], rax
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?CPU_GEN_STR@@3QBQEBDB
  002bd	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv155[rsp], rcx
  002c5	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002cd	e8 00 00 00 00	 call	 strlen
  002d2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR nSize$[rsp]
  002da	48 2b c8	 sub	 rcx, rax
  002dd	48 8b c1	 mov	 rax, rcx
  002e0	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv163[rsp], rax
  002e8	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002f0	e8 00 00 00 00	 call	 strlen
  002f5	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002fd	48 03 c8	 add	 rcx, rax
  00300	48 8b c1	 mov	 rax, rcx
  00303	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv155[rsp]
  0030b	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv156[rsp]
  00313	4c 8b 0c d1	 mov	 r9, QWORD PTR [rcx+rdx*8]
  00317	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG153881
  0031e	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv163[rsp]
  00326	48 8b d1	 mov	 rdx, rcx
  00329	48 8b c8	 mov	 rcx, rax
  0032c	e8 00 00 00 00	 call	 sprintf_s
$LN9@getCPUInfo:
$LN3@getCPUInfo:

; 413  :         }
; 414  : #endif
; 415  :     }
; 416  :     return ret;

  00331	8b 44 24 30	 mov	 eax, DWORD PTR ret$[rsp]

; 417  : }

  00335	8b f8		 mov	 edi, eax
  00337	48 8b cc	 mov	 rcx, rsp
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z$rtcFrameData
  00341	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00346	8b c7		 mov	 eax, edi
  00348	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00350	48 33 cc	 xor	 rcx, rsp
  00353	e8 00 00 00 00	 call	 __security_check_cookie
  00358	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0035f	5f		 pop	 rdi
  00360	c3		 ret	 0
?getCPUInfo@@YAHPEAD_KPEAVMFXVideoSession@@@Z ENDP	; getCPUInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
cpu$ = 48
__$ArrayPad$ = 176
$T4 = 224
?get_cpu_info@@YA?AUcpu_info_t@@XZ PROC			; get_cpu_info

; 260  : cpu_info_t get_cpu_info() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 261  :     cpu_info_t cpu;
; 262  :     get_cpu_info(&cpu);

  00037	48 8d 4c 24 30	 lea	 rcx, QWORD PTR cpu$[rsp]
  0003c	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z ; get_cpu_info

; 263  :     return cpu;

  00041	48 8d 44 24 30	 lea	 rax, QWORD PTR cpu$[rsp]
  00046	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  0004e	48 8b f0	 mov	 rsi, rax
  00051	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00056	f3 a4		 rep movsb
  00058	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 264  : }

  00060	48 8b f8	 mov	 rdi, rax
  00063	48 8b cc	 mov	 rcx, rsp
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?get_cpu_info@@YA?AUcpu_info_t@@XZ$rtcFrameData
  0006d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00072	48 8b c7	 mov	 rax, rdi
  00075	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007d	48 33 cc	 xor	 rcx, rsp
  00080	e8 00 00 00 00	 call	 __security_check_cookie
  00085	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0008c	5f		 pop	 rdi
  0008d	5e		 pop	 rsi
  0008e	c3		 ret	 0
?get_cpu_info@@YA?AUcpu_info_t@@XZ ENDP			; get_cpu_info
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
glpi$ = 32
returnLength$ = 52
buffer$ = 72
processorPackageCount$ = 80
ptr$ = 88
byteOffset$4 = 96
Cache$5 = 104
cache$6 = 112
tv129 = 120
cpu_info$ = 144
?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z PROC		; get_cpu_info

; 153  : bool get_cpu_info(cpu_info_t *cpu_info) {

$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 154  :     if (nullptr == cpu_info)

  00024	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR cpu_info$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN9@get_cpu_in

; 155  :         return false;

  0002f	32 c0		 xor	 al, al
  00031	e9 7d 02 00 00	 jmp	 $LN1@get_cpu_in
$LN9@get_cpu_in:

; 156  : 
; 157  :     memset(cpu_info, 0, sizeof(cpu_info[0]));

  00036	41 b8 70 00 00
	00		 mov	 r8d, 112		; 00000070H
  0003c	33 d2		 xor	 edx, edx
  0003e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  00046	e8 00 00 00 00	 call	 memset

; 158  : 
; 159  :     LPFN_GLPI glpi = (LPFN_GLPI)GetProcAddress(GetModuleHandle(_T("kernel32")), "GetLogicalProcessorInformation");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG138751
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG138750
  0005f	48 8b c8	 mov	 rcx, rax
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00068	48 89 44 24 20	 mov	 QWORD PTR glpi$[rsp], rax

; 160  :     if (nullptr == glpi)

  0006d	48 83 7c 24 20
	00		 cmp	 QWORD PTR glpi$[rsp], 0
  00073	75 07		 jne	 SHORT $LN10@get_cpu_in

; 161  :         return false;

  00075	32 c0		 xor	 al, al
  00077	e9 37 02 00 00	 jmp	 $LN1@get_cpu_in
$LN10@get_cpu_in:

; 162  : 
; 163  :     DWORD returnLength = 0;

  0007c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR returnLength$[rsp], 0

; 164  :     PSYSTEM_LOGICAL_PROCESSOR_INFORMATION buffer = nullptr;

  00084	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0
$LN2@get_cpu_in:

; 165  :     while (FALSE == glpi(buffer, &returnLength)) {

  0008d	48 8d 54 24 34	 lea	 rdx, QWORD PTR returnLength$[rsp]
  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buffer$[rsp]
  00097	ff 54 24 20	 call	 QWORD PTR glpi$[rsp]
  0009b	85 c0		 test	 eax, eax
  0009d	75 40		 jne	 SHORT $LN3@get_cpu_in

; 166  :         if (GetLastError() == ERROR_INSUFFICIENT_BUFFER) {

  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000a5	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  000a8	75 33		 jne	 SHORT $LN11@get_cpu_in

; 167  :             if (buffer)

  000aa	48 83 7c 24 48
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000b0	74 0b		 je	 SHORT $LN12@get_cpu_in

; 168  :                 free(buffer);

  000b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buffer$[rsp]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN12@get_cpu_in:

; 169  :             if (NULL == (buffer = (PSYSTEM_LOGICAL_PROCESSOR_INFORMATION)malloc(returnLength)))

  000bd	8b 44 24 34	 mov	 eax, DWORD PTR returnLength$[rsp]
  000c1	8b c8		 mov	 ecx, eax
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000c9	48 89 44 24 48	 mov	 QWORD PTR buffer$[rsp], rax
  000ce	48 83 7c 24 48
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000d4	75 07		 jne	 SHORT $LN13@get_cpu_in

; 170  :                 return FALSE;

  000d6	32 c0		 xor	 al, al
  000d8	e9 d6 01 00 00	 jmp	 $LN1@get_cpu_in
$LN13@get_cpu_in:
$LN11@get_cpu_in:

; 171  :         }
; 172  :     }

  000dd	eb ae		 jmp	 SHORT $LN2@get_cpu_in
$LN3@get_cpu_in:

; 173  : 
; 174  :     DWORD processorPackageCount = 0;

  000df	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR processorPackageCount$[rsp], 0

; 175  :     PSYSTEM_LOGICAL_PROCESSOR_INFORMATION ptr = buffer;

  000e7	48 8b 44 24 48	 mov	 rax, QWORD PTR buffer$[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR ptr$[rsp], rax

; 176  :     for (DWORD byteOffset = 0; byteOffset + sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION) <= returnLength;

  000f1	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR byteOffset$4[rsp], 0
  000f9	eb 0c		 jmp	 SHORT $LN6@get_cpu_in
$LN4@get_cpu_in:

; 177  :         byteOffset += sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION)) {

  000fb	8b 44 24 60	 mov	 eax, DWORD PTR byteOffset$4[rsp]
  000ff	48 83 c0 20	 add	 rax, 32			; 00000020H
  00103	89 44 24 60	 mov	 DWORD PTR byteOffset$4[rsp], eax
$LN6@get_cpu_in:

; 176  :     for (DWORD byteOffset = 0; byteOffset + sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION) <= returnLength;

  00107	8b 44 24 60	 mov	 eax, DWORD PTR byteOffset$4[rsp]
  0010b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0010f	8b 4c 24 34	 mov	 ecx, DWORD PTR returnLength$[rsp]
  00113	48 3b c1	 cmp	 rax, rcx
  00116	0f 87 82 01 00
	00		 ja	 $LN5@get_cpu_in

; 178  :         switch (ptr->Relationship) {

  0011c	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr$[rsp]
  00121	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00124	89 44 24 78	 mov	 DWORD PTR tv129[rsp], eax
  00128	83 7c 24 78 00	 cmp	 DWORD PTR tv129[rsp], 0
  0012d	74 39		 je	 SHORT $LN15@get_cpu_in
  0012f	83 7c 24 78 01	 cmp	 DWORD PTR tv129[rsp], 1
  00134	74 17		 je	 SHORT $LN14@get_cpu_in
  00136	83 7c 24 78 02	 cmp	 DWORD PTR tv129[rsp], 2
  0013b	74 6b		 je	 SHORT $LN16@get_cpu_in
  0013d	83 7c 24 78 03	 cmp	 DWORD PTR tv129[rsp], 3
  00142	0f 84 39 01 00
	00		 je	 $LN18@get_cpu_in
  00148	e9 3e 01 00 00	 jmp	 $LN19@get_cpu_in
$LN14@get_cpu_in:

; 179  :         case RelationNumaNode:
; 180  :             // Non-NUMA systems report a single record of this type.
; 181  :             cpu_info->nodes++;

  0014d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR cpu_info$[rsp]
  00155	8b 00		 mov	 eax, DWORD PTR [rax]
  00157	ff c0		 inc	 eax
  00159	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  00161	89 01		 mov	 DWORD PTR [rcx], eax

; 182  :             break;

  00163	e9 23 01 00 00	 jmp	 $LN7@get_cpu_in
$LN15@get_cpu_in:

; 183  :         case RelationProcessorCore:
; 184  :             cpu_info->physical_cores++;

  00168	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR cpu_info$[rsp]
  00170	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00173	ff c0		 inc	 eax
  00175	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  0017d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 185  :             // A hyperthreaded core supplies more than one logical processor.
; 186  :             cpu_info->logical_cores += CountSetBits(ptr->ProcessorMask);

  00180	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr$[rsp]
  00185	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00188	e8 00 00 00 00	 call	 ?CountSetBits@@YAK_K@Z	; CountSetBits
  0018d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  00195	03 41 08	 add	 eax, DWORD PTR [rcx+8]
  00198	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  001a0	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 187  :             break;

  001a3	e9 e3 00 00 00	 jmp	 $LN7@get_cpu_in
$LN16@get_cpu_in:

; 188  : 
; 189  :         case RelationCache:
; 190  :         {
; 191  :             // Cache data is in ptr->Cache, one CACHE_DESCRIPTOR structure for each cache.
; 192  :             PCACHE_DESCRIPTOR Cache = &ptr->Cache;

  001a8	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr$[rsp]
  001ad	48 83 c0 10	 add	 rax, 16
  001b1	48 89 44 24 68	 mov	 QWORD PTR Cache$5[rsp], rax

; 193  :             if (1 <= Cache->Level && Cache->Level <= _countof(cpu_info->caches)) {

  001b6	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  001bb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001be	83 f8 01	 cmp	 eax, 1
  001c1	0f 8c b8 00 00
	00		 jl	 $LN17@get_cpu_in
  001c7	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  001cc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001cf	48 83 f8 04	 cmp	 rax, 4
  001d3	0f 87 a6 00 00
	00		 ja	 $LN17@get_cpu_in

; 194  :                 cache_info_t *cache = &cpu_info->caches[Cache->Level-1];

  001d9	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  001de	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001e1	ff c8		 dec	 eax
  001e3	48 98		 cdqe
  001e5	48 6b c0 18	 imul	 rax, rax, 24
  001e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  001f1	48 8d 44 01 10	 lea	 rax, QWORD PTR [rcx+rax+16]
  001f6	48 89 44 24 70	 mov	 QWORD PTR cache$6[rsp], rax

; 195  :                 cache->count++;

  001fb	48 8b 44 24 70	 mov	 rax, QWORD PTR cache$6[rsp]
  00200	8b 00		 mov	 eax, DWORD PTR [rax]
  00202	ff c0		 inc	 eax
  00204	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cache$6[rsp]
  00209	89 01		 mov	 DWORD PTR [rcx], eax

; 196  :                 cache->level = Cache->Level;

  0020b	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  00210	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00213	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cache$6[rsp]
  00218	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 197  :                 cache->linesize = Cache->LineSize;

  0021b	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  00220	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00224	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cache$6[rsp]
  00229	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 198  :                 cache->size += Cache->Size;

  0022c	48 8b 44 24 70	 mov	 rax, QWORD PTR cache$6[rsp]
  00231	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00234	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Cache$5[rsp]
  00239	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  0023c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cache$6[rsp]
  00241	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 199  :                 cache->associativity = Cache->Associativity;

  00244	48 8b 44 24 68	 mov	 rax, QWORD PTR Cache$5[rsp]
  00249	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0024d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cache$6[rsp]
  00252	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 200  :                 cpu_info->max_cache_level = (std::max)(cpu_info->max_cache_level, cache->level);

  00255	48 8b 44 24 70	 mov	 rax, QWORD PTR cache$6[rsp]
  0025a	48 83 c0 04	 add	 rax, 4
  0025e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  00266	48 83 c1 0c	 add	 rcx, 12
  0026a	48 8b d0	 mov	 rdx, rax
  0026d	e8 00 00 00 00	 call	 ??$max@I@std@@YAAEBIAEBI0@Z ; std::max<unsigned int>
  00272	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cpu_info$[rsp]
  0027a	8b 00		 mov	 eax, DWORD PTR [rax]
  0027c	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
$LN17@get_cpu_in:

; 201  :             }
; 202  :             break;

  0027f	eb 0a		 jmp	 SHORT $LN7@get_cpu_in
$LN18@get_cpu_in:

; 203  :         }
; 204  :         case RelationProcessorPackage:
; 205  :             // Logical processors share a physical package.
; 206  :             processorPackageCount++;

  00281	8b 44 24 50	 mov	 eax, DWORD PTR processorPackageCount$[rsp]
  00285	ff c0		 inc	 eax
  00287	89 44 24 50	 mov	 DWORD PTR processorPackageCount$[rsp], eax
$LN19@get_cpu_in:
$LN7@get_cpu_in:

; 207  :             break;
; 208  : 
; 209  :         default:
; 210  :             //Unsupported LOGICAL_PROCESSOR_RELATIONSHIP value.
; 211  :             break;
; 212  :         }
; 213  :         ptr++;

  0028b	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr$[rsp]
  00290	48 83 c0 20	 add	 rax, 32			; 00000020H
  00294	48 89 44 24 58	 mov	 QWORD PTR ptr$[rsp], rax

; 214  :     }

  00299	e9 5d fe ff ff	 jmp	 $LN4@get_cpu_in
$LN5@get_cpu_in:

; 215  :     if (buffer)

  0029e	48 83 7c 24 48
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  002a4	74 0b		 je	 SHORT $LN20@get_cpu_in

; 216  :         free(buffer);

  002a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR buffer$[rsp]
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN20@get_cpu_in:

; 217  : 
; 218  :     return true;

  002b1	b0 01		 mov	 al, 1
$LN1@get_cpu_in:

; 219  : }

  002b3	48 8b f8	 mov	 rdi, rax
  002b6	48 8b cc	 mov	 rcx, rsp
  002b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z$rtcFrameData
  002c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c5	48 8b c7	 mov	 rax, rdi
  002c8	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  002cf	5f		 pop	 rdi
  002d0	c3		 ret	 0
?get_cpu_info@@YA_NPEAUcpu_info_t@@@Z ENDP		; get_cpu_info
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
_TEXT	SEGMENT
CPUInfo$ = 40
nExIds$ = 68
i$5 = 72
offset$6 = 76
remove_string$ = 84
i$7 = 100
i$8 = 104
space_idx$9 = 108
last_ptr$10 = 112
$T11 = 128
tv80 = 132
tv189 = 136
__$ArrayPad$ = 144
buffer$ = 192
nSize$ = 200
?getCPUName@@YAHPEAD_K@Z PROC				; getCPUName

; 50   : int getCPUName(char *buffer, size_t nSize) {

$LN27:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	48 33 c4	 xor	 rax, rsp
  00034	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 51   :     int CPUInfo[4] = {-1};

  0003c	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR CPUInfo$[rsp], -1
  00044	48 8d 44 24 2c	 lea	 rax, QWORD PTR CPUInfo$[rsp+4]
  00049	48 8b f8	 mov	 rdi, rax
  0004c	33 c0		 xor	 eax, eax
  0004e	b9 0c 00 00 00	 mov	 ecx, 12
  00053	f3 aa		 rep stosb

; 52   :     __cpuid(CPUInfo, 0x80000000);

  00055	b8 00 00 00 80	 mov	 eax, -2147483648	; ffffffff80000000H
  0005a	33 c9		 xor	 ecx, ecx
  0005c	0f a2		 cpuid
  0005e	48 8d 7c 24 28	 lea	 rdi, QWORD PTR CPUInfo$[rsp]
  00063	89 07		 mov	 DWORD PTR [rdi], eax
  00065	89 5f 04	 mov	 DWORD PTR [rdi+4], ebx
  00068	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  0006b	89 57 0c	 mov	 DWORD PTR [rdi+12], edx

; 53   :     unsigned int nExIds = CPUInfo[0];

  0006e	b8 04 00 00 00	 mov	 eax, 4
  00073	48 6b c0 00	 imul	 rax, rax, 0
  00077	8b 44 04 28	 mov	 eax, DWORD PTR CPUInfo$[rsp+rax]
  0007b	89 44 24 44	 mov	 DWORD PTR nExIds$[rsp], eax

; 54   :     if (nSize < 0x40)

  0007f	48 83 bc 24 c8
	00 00 00 40	 cmp	 QWORD PTR nSize$[rsp], 64 ; 00000040H
  00088	73 0a		 jae	 SHORT $LN15@getCPUName

; 55   :         return 1;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	e9 f3 02 00 00	 jmp	 $LN1@getCPUName
$LN15@getCPUName:

; 56   : 
; 57   :     memset(buffer, 0, 0x40);

  00094	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0009a	33 d2		 xor	 edx, edx
  0009c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000a4	e8 00 00 00 00	 call	 memset

; 58   :     for (unsigned int i = 0x80000000; i <= nExIds; i++) {

  000a9	c7 44 24 48 00
	00 00 80	 mov	 DWORD PTR i$5[rsp], -2147483648 ; 80000000H
  000b1	eb 0a		 jmp	 SHORT $LN4@getCPUName
$LN2@getCPUName:
  000b3	8b 44 24 48	 mov	 eax, DWORD PTR i$5[rsp]
  000b7	ff c0		 inc	 eax
  000b9	89 44 24 48	 mov	 DWORD PTR i$5[rsp], eax
$LN4@getCPUName:
  000bd	8b 44 24 44	 mov	 eax, DWORD PTR nExIds$[rsp]
  000c1	39 44 24 48	 cmp	 DWORD PTR i$5[rsp], eax
  000c5	0f 87 a2 00 00
	00		 ja	 $LN3@getCPUName

; 59   :         __cpuid(CPUInfo, i);

  000cb	8b 44 24 48	 mov	 eax, DWORD PTR i$5[rsp]
  000cf	33 c9		 xor	 ecx, ecx
  000d1	0f a2		 cpuid
  000d3	48 8d 7c 24 28	 lea	 rdi, QWORD PTR CPUInfo$[rsp]
  000d8	89 07		 mov	 DWORD PTR [rdi], eax
  000da	89 5f 04	 mov	 DWORD PTR [rdi+4], ebx
  000dd	89 4f 08	 mov	 DWORD PTR [rdi+8], ecx
  000e0	89 57 0c	 mov	 DWORD PTR [rdi+12], edx

; 60   :         int offset = 0;

  000e3	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR offset$6[rsp], 0

; 61   :         switch (i) {

  000eb	8b 44 24 48	 mov	 eax, DWORD PTR i$5[rsp]
  000ef	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv80[rsp], eax
  000f6	81 bc 24 84 00
	00 00 02 00 00
	80		 cmp	 DWORD PTR tv80[rsp], -2147483646 ; 80000002H
  00101	74 1c		 je	 SHORT $LN16@getCPUName
  00103	81 bc 24 84 00
	00 00 03 00 00
	80		 cmp	 DWORD PTR tv80[rsp], -2147483645 ; 80000003H
  0010e	74 19		 je	 SHORT $LN17@getCPUName
  00110	81 bc 24 84 00
	00 00 04 00 00
	80		 cmp	 DWORD PTR tv80[rsp], -2147483644 ; 80000004H
  0011b	74 16		 je	 SHORT $LN18@getCPUName
  0011d	eb 1e		 jmp	 SHORT $LN19@getCPUName
$LN16@getCPUName:

; 62   :             case 0x80000002: offset =  0; break;

  0011f	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR offset$6[rsp], 0
  00127	eb 19		 jmp	 SHORT $LN5@getCPUName
$LN17@getCPUName:

; 63   :             case 0x80000003: offset = 16; break;

  00129	c7 44 24 4c 10
	00 00 00	 mov	 DWORD PTR offset$6[rsp], 16
  00131	eb 0f		 jmp	 SHORT $LN5@getCPUName
$LN18@getCPUName:

; 64   :             case 0x80000004: offset = 32; break;

  00133	c7 44 24 4c 20
	00 00 00	 mov	 DWORD PTR offset$6[rsp], 32 ; 00000020H
  0013b	eb 05		 jmp	 SHORT $LN5@getCPUName
$LN19@getCPUName:

; 65   :             default:
; 66   :                 continue;

  0013d	e9 71 ff ff ff	 jmp	 $LN2@getCPUName
$LN5@getCPUName:

; 67   :         }
; 68   :         memcpy(buffer + offset, CPUInfo, sizeof(CPUInfo));

  00142	48 63 44 24 4c	 movsxd	 rax, DWORD PTR offset$6[rsp]
  00147	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0014f	48 03 c8	 add	 rcx, rax
  00152	48 8b c1	 mov	 rax, rcx
  00155	41 b8 10 00 00
	00		 mov	 r8d, 16
  0015b	48 8d 54 24 28	 lea	 rdx, QWORD PTR CPUInfo$[rsp]
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 memcpy

; 69   :     }

  00168	e9 46 ff ff ff	 jmp	 $LN2@getCPUName
$LN3@getCPUName:

; 70   :     auto remove_string =[](char *target_str, const char *remove_str) {

  0016d	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00175	48 8b f8	 mov	 rdi, rax
  00178	33 c0		 xor	 eax, eax
  0017a	b9 01 00 00 00	 mov	 ecx, 1
  0017f	f3 aa		 rep stosb

; 71   :         char *ptr = strstr(target_str, remove_str);
; 72   :         if (nullptr != ptr) {
; 73   :             memmove(ptr, ptr + strlen(remove_str), (strlen(ptr) - strlen(remove_str) + 1) *  sizeof(target_str[0]));
; 74   :         }
; 75   :     };
; 76   :     remove_string(buffer, "(R)");

  00181	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG138663
  00188	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  00190	48 8d 4c 24 54	 lea	 rcx, QWORD PTR remove_string$[rsp]
  00195	e8 00 00 00 00	 call	 ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z ; <lambda_d3034a9c3733331d4a325329ca2d9a89>::operator()

; 77   :     remove_string(buffer, "(TM)");

  0019a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG138664
  001a1	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  001a9	48 8d 4c 24 54	 lea	 rcx, QWORD PTR remove_string$[rsp]
  001ae	e8 00 00 00 00	 call	 ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z ; <lambda_d3034a9c3733331d4a325329ca2d9a89>::operator()

; 78   :     remove_string(buffer, "CPU");

  001b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG138665
  001ba	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  001c2	48 8d 4c 24 54	 lea	 rcx, QWORD PTR remove_string$[rsp]
  001c7	e8 00 00 00 00	 call	 ??R<lambda_d3034a9c3733331d4a325329ca2d9a89>@@QEBAXPEADPEBD@Z ; <lambda_d3034a9c3733331d4a325329ca2d9a89>::operator()

; 79   :     //crop space beforce string
; 80   :     for (int i = 0; buffer[i]; i++) {

  001cc	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$7[rsp], 0
  001d4	eb 0a		 jmp	 SHORT $LN9@getCPUName
$LN7@getCPUName:
  001d6	8b 44 24 64	 mov	 eax, DWORD PTR i$7[rsp]
  001da	ff c0		 inc	 eax
  001dc	89 44 24 64	 mov	 DWORD PTR i$7[rsp], eax
$LN9@getCPUName:
  001e0	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$7[rsp]
  001e5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  001ed	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001f1	85 c0		 test	 eax, eax
  001f3	74 68		 je	 SHORT $LN8@getCPUName

; 81   :         if (buffer[i] != ' ') {

  001f5	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$7[rsp]
  001fa	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00202	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00206	83 f8 20	 cmp	 eax, 32			; 00000020H
  00209	74 4d		 je	 SHORT $LN20@getCPUName

; 82   :             if (i)

  0020b	83 7c 24 64 00	 cmp	 DWORD PTR i$7[rsp], 0
  00210	74 44		 je	 SHORT $LN21@getCPUName

; 83   :                 memmove(buffer, buffer + i, strlen(buffer + i) + 1);

  00212	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$7[rsp]
  00217	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0021f	48 03 c8	 add	 rcx, rax
  00222	48 8b c1	 mov	 rax, rcx
  00225	48 8b c8	 mov	 rcx, rax
  00228	e8 00 00 00 00	 call	 strlen
  0022d	48 ff c0	 inc	 rax
  00230	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$7[rsp]
  00235	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  0023d	48 03 d1	 add	 rdx, rcx
  00240	48 8b ca	 mov	 rcx, rdx
  00243	4c 8b c0	 mov	 r8, rax
  00246	48 8b d1	 mov	 rdx, rcx
  00249	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00251	e8 00 00 00 00	 call	 memmove
$LN21@getCPUName:

; 84   :             break;

  00256	eb 05		 jmp	 SHORT $LN8@getCPUName
$LN20@getCPUName:

; 85   :         }
; 86   :     }

  00258	e9 79 ff ff ff	 jmp	 $LN7@getCPUName
$LN8@getCPUName:

; 87   :     //remove space which continues.
; 88   :     for (int i = 0; buffer[i]; i++) {

  0025d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i$8[rsp], 0
  00265	eb 0a		 jmp	 SHORT $LN12@getCPUName
$LN10@getCPUName:
  00267	8b 44 24 68	 mov	 eax, DWORD PTR i$8[rsp]
  0026b	ff c0		 inc	 eax
  0026d	89 44 24 68	 mov	 DWORD PTR i$8[rsp], eax
$LN12@getCPUName:
  00271	48 63 44 24 68	 movsxd	 rax, DWORD PTR i$8[rsp]
  00276	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0027e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00282	85 c0		 test	 eax, eax
  00284	0f 84 b5 00 00
	00		 je	 $LN11@getCPUName

; 89   :         if (buffer[i] == ' ') {

  0028a	48 63 44 24 68	 movsxd	 rax, DWORD PTR i$8[rsp]
  0028f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00297	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0029b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0029e	0f 85 96 00 00
	00		 jne	 $LN22@getCPUName

; 90   :             int space_idx = i;

  002a4	8b 44 24 68	 mov	 eax, DWORD PTR i$8[rsp]
  002a8	89 44 24 6c	 mov	 DWORD PTR space_idx$9[rsp], eax
$LN13@getCPUName:

; 91   :             while (buffer[i+1] == ' ')

  002ac	8b 44 24 68	 mov	 eax, DWORD PTR i$8[rsp]
  002b0	ff c0		 inc	 eax
  002b2	48 98		 cdqe
  002b4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002bc	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002c0	83 f8 20	 cmp	 eax, 32			; 00000020H
  002c3	75 0c		 jne	 SHORT $LN14@getCPUName

; 92   :                 i++;

  002c5	8b 44 24 68	 mov	 eax, DWORD PTR i$8[rsp]
  002c9	ff c0		 inc	 eax
  002cb	89 44 24 68	 mov	 DWORD PTR i$8[rsp], eax
  002cf	eb db		 jmp	 SHORT $LN13@getCPUName
$LN14@getCPUName:

; 93   :             if (i != space_idx)

  002d1	8b 44 24 6c	 mov	 eax, DWORD PTR space_idx$9[rsp]
  002d5	39 44 24 68	 cmp	 DWORD PTR i$8[rsp], eax
  002d9	74 5f		 je	 SHORT $LN23@getCPUName

; 94   :                 memmove(buffer + space_idx + 1, buffer + i + 1, strlen(buffer + i + 1) + 1);

  002db	48 63 44 24 68	 movsxd	 rax, DWORD PTR i$8[rsp]
  002e0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002e8	48 8d 44 01 01	 lea	 rax, QWORD PTR [rcx+rax+1]
  002ed	48 8b c8	 mov	 rcx, rax
  002f0	e8 00 00 00 00	 call	 strlen
  002f5	48 ff c0	 inc	 rax
  002f8	48 63 4c 24 68	 movsxd	 rcx, DWORD PTR i$8[rsp]
  002fd	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  00305	48 8d 4c 0a 01	 lea	 rcx, QWORD PTR [rdx+rcx+1]
  0030a	48 63 54 24 6c	 movsxd	 rdx, DWORD PTR space_idx$9[rsp]
  0030f	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR buffer$[rsp]
  00317	48 8d 54 13 01	 lea	 rdx, QWORD PTR [rbx+rdx+1]
  0031c	48 89 94 24 88
	00 00 00	 mov	 QWORD PTR tv189[rsp], rdx
  00324	4c 8b c0	 mov	 r8, rax
  00327	48 8b d1	 mov	 rdx, rcx
  0032a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv189[rsp]
  00332	48 8b c8	 mov	 rcx, rax
  00335	e8 00 00 00 00	 call	 memmove
$LN23@getCPUName:
$LN22@getCPUName:

; 95   :         }
; 96   :     }

  0033a	e9 28 ff ff ff	 jmp	 $LN10@getCPUName
$LN11@getCPUName:

; 97   :     //delete last blank
; 98   :     if (0 < strlen(buffer)) {

  0033f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00347	e8 00 00 00 00	 call	 strlen
  0034c	48 85 c0	 test	 rax, rax
  0034f	76 34		 jbe	 SHORT $LN24@getCPUName

; 99   :         char *last_ptr = buffer + strlen(buffer) - 1;

  00351	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00359	e8 00 00 00 00	 call	 strlen
  0035e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00366	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  0036b	48 89 44 24 70	 mov	 QWORD PTR last_ptr$10[rsp], rax

; 100  :         if (' ' == *last_ptr)

  00370	48 8b 44 24 70	 mov	 rax, QWORD PTR last_ptr$10[rsp]
  00375	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00378	83 f8 20	 cmp	 eax, 32			; 00000020H
  0037b	75 08		 jne	 SHORT $LN25@getCPUName

; 101  :             *last_ptr = '\0';

  0037d	48 8b 44 24 70	 mov	 rax, QWORD PTR last_ptr$10[rsp]
  00382	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN25@getCPUName:
$LN24@getCPUName:

; 102  :     }
; 103  :     return 0;

  00385	33 c0		 xor	 eax, eax
$LN1@getCPUName:

; 104  : }

  00387	48 8b f8	 mov	 rdi, rax
  0038a	48 8b cc	 mov	 rcx, rsp
  0038d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCPUName@@YAHPEAD_K@Z$rtcFrameData
  00394	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00399	48 8b c7	 mov	 rax, rdi
  0039c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003a4	48 33 cc	 xor	 rcx, rsp
  003a7	e8 00 00 00 00	 call	 __security_check_cookie
  003ac	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  003b3	5f		 pop	 rdi
  003b4	5b		 pop	 rbx
  003b5	c3		 ret	 0
?getCPUName@@YAHPEAD_K@Z ENDP				; getCPUName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT ?_tcsstr@@YAPEADPEADPEBD@Z
_TEXT	SEGMENT
_S$ = 48
_P$ = 56
?_tcsstr@@YAPEADPEADPEBD@Z PROC				; _tcsstr, COMDAT

; 2044 :         {return ((char *)_tcsstr((const char *)_S, _P)); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _P$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  0002d	e8 00 00 00 00	 call	 _tcsstr
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
?_tcsstr@@YAPEADPEADPEBD@Z ENDP				; _tcsstr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT ?_tcschr@@YAPEADPEADI@Z
_TEXT	SEGMENT
_S$ = 48
_C$ = 56
?_tcschr@@YAPEADPEADI@Z PROC				; _tcschr, COMDAT

; 2038 :         {return ((char *)_tcschr((const char *)_S, _C)); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _C$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  0002b	e8 00 00 00 00	 call	 _tcschr
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?_tcschr@@YAPEADPEADI@Z ENDP				; _tcschr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT _tcsstr
_TEXT	SEGMENT
_s1$ = 48
_s2$ = 56
_tcsstr	PROC						; COMDAT

; 1582 : _Check_return_ __inline _CRPC _tcsstr(_In_z_ _CPC _s1,_In_z_ _CPC _s2) {return (_CRPC)_mbsstr((_CPUC)_s1,(_CPUC)_s2);}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _s2$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsstr
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
_tcsstr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT _tcschr
_TEXT	SEGMENT
_s1$ = 48
_c$ = 56
_tcschr	PROC						; COMDAT

; 1506 : __inline _CRPC _tcschr(_In_z_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbschr((_CPUC)_s1,_c);}

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _c$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbschr
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
_tcschr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 16
?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count, COMDAT

; 88   :         _NODISCARD constexpr _Rep count() const _NOEXCEPT_COND(is_arithmetic_v<_Rep>) { // strengthened

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 89   :             return _MyRep;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 90   :         }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?count@?$duration@_JU?$ratio@$00$0PECEA@@std@@@chrono@std@@QEBA_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z
_TEXT	SEGMENT
this$ = 16
_Val$ = 24
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>, COMDAT

; 78   :             : _MyRep(static_cast<_Rep>(_Val)) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Val$[rsp]
  00015	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ
_TEXT	SEGMENT
this$ = 16
__$ReturnUdt$ = 24
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch, COMDAT

; 194  :         _NODISCARD constexpr _Duration time_since_epoch() const _NOEXCEPT_COND(is_arithmetic_v<rep>) { // strengthened

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 195  :             // get duration from epoch
; 196  :             return _MyDur;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	48 8b 4c 24 18	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax
  0001b	48 8b 44 24 18	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 197  :         }

  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?time_since_epoch@?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEBA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@XZ ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_since_epoch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z
_TEXT	SEGMENT
this$ = 16
_Other$ = 24
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >, COMDAT

; 184  :         constexpr explicit time_point(const _Duration& _Other) _NOEXCEPT_COND(is_arithmetic_v<rep>) // strengthened

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 185  :             : _MyDur(_Other) { // construct from a duration

  0000b	48 8b 44 24 18	 mov	 rax, QWORD PTR _Other$[rsp]
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00013	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 186  :         }

  0001b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 16
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count, COMDAT

; 88   :         _NODISCARD constexpr _Rep count() const _NOEXCEPT_COND(is_arithmetic_v<_Rep>) { // strengthened

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 89   :             return _MyRep;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 90   :         }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEBA_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\chrono
;	COMDAT ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
_TEXT	SEGMENT
_Freq$ = 32
_Ctr$ = 40
_Whole$ = 48
_Part$ = 56
$T1 = 64
$T2 = 72
__$ReturnUdt$ = 96
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ PROC ; std::chrono::steady_clock::now, COMDAT

; 647  :         _NODISCARD static time_point now() noexcept { // get current time

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 648  :             const long long _Freq = _Query_perf_frequency(); // doesn't change after system boot

  0001e	e8 00 00 00 00	 call	 _Query_perf_frequency
  00023	90		 npad	 1
  00024	48 89 44 24 20	 mov	 QWORD PTR _Freq$[rsp], rax

; 649  :             const long long _Ctr  = _Query_perf_counter();

  00029	e8 00 00 00 00	 call	 _Query_perf_counter
  0002e	90		 npad	 1
  0002f	48 89 44 24 28	 mov	 QWORD PTR _Ctr$[rsp], rax

; 650  :             static_assert(period::num == 1, "This assumes period::num == 1.");
; 651  :             const long long _Whole = (_Ctr / _Freq) * period::den;

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ctr$[rsp]
  00039	48 99		 cdq
  0003b	48 f7 7c 24 20	 idiv	 QWORD PTR _Freq$[rsp]
  00040	48 69 c0 00 ca
	9a 3b		 imul	 rax, rax, 1000000000	; 3b9aca00H
  00047	48 89 44 24 30	 mov	 QWORD PTR _Whole$[rsp], rax

; 652  :             const long long _Part  = (_Ctr % _Freq) * period::den / _Freq;

  0004c	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ctr$[rsp]
  00051	48 99		 cdq
  00053	48 f7 7c 24 20	 idiv	 QWORD PTR _Freq$[rsp]
  00058	48 8b c2	 mov	 rax, rdx
  0005b	48 69 c0 00 ca
	9a 3b		 imul	 rax, rax, 1000000000	; 3b9aca00H
  00062	48 99		 cdq
  00064	48 f7 7c 24 20	 idiv	 QWORD PTR _Freq$[rsp]
  00069	48 89 44 24 38	 mov	 QWORD PTR _Part$[rsp], rax

; 653  :             return time_point(duration(_Whole + _Part));

  0006e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Part$[rsp]
  00073	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Whole$[rsp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 89 44 24 48	 mov	 QWORD PTR $T2[rsp], rax
  00083	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T2[rsp]
  00088	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  0008d	e8 00 00 00 00	 call	 ??$?0_JX@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,void>
  00092	90		 npad	 1
  00093	48 8b d0	 mov	 rdx, rax
  00096	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0009b	e8 00 00 00 00	 call	 ??0?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >::time_point<std::chrono::steady_clock,std::chrono::duration<__int64,std::ratio<1,1000000000> > >
  000a0	90		 npad	 1
  000a1	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 654  :         }

  000a6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000aa	5f		 pop	 rdi
  000ab	c3		 ret	 0
?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ ENDP ; std::chrono::steady_clock::now
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\string.h
;	COMDAT ?strstr@@YAPEADQEADQEBD@Z
_TEXT	SEGMENT
_String$ = 48
_SubString$ = 56
?strstr@@YAPEADQEADQEBD@Z PROC				; strstr, COMDAT

; 523  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 524  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _SubString$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _String$[rsp]
  0002d	e8 00 00 00 00	 call	 strstr

; 525  :     }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
?strstr@@YAPEADQEADQEBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sscanf_s
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Buffer$ = 96
_Format$ = 104
sscanf_s PROC						; COMDAT

; 2309 :         {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 2310 :             int _Result;
; 2311 :             va_list _ArgList;
; 2312 :             __crt_va_start(_ArgList, _Format);

  0002d	48 8d 44 24 70	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00032	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2313 : 
; 2314 :             #pragma warning(push)
; 2315 :             #pragma warning(disable: 4996) // Deprecation
; 2316 :             _Result = vsscanf_s(_Buffer, _Format, _ArgList);

  00037	4c 8b 44 24 38	 mov	 r8, QWORD PTR _ArgList$[rsp]
  0003c	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Format$[rsp]
  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00046	e8 00 00 00 00	 call	 vsscanf_s
  0004b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2317 :             #pragma warning(pop)
; 2318 : 
; 2319 :             __crt_va_end(_ArgList);

  0004f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2320 :             return _Result;

  00058	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2321 :         }

  0005c	8b f8		 mov	 edi, eax
  0005e	48 8b cc	 mov	 rcx, rsp
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sscanf_s$rtcFrameData
  00068	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006d	8b c7		 mov	 eax, edi
  0006f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT vsscanf_s
_TEXT	SEGMENT
_Buffer$ = 48
_Format$ = 56
_ArgList$ = 64
vsscanf_s PROC						; COMDAT

; 2227 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 2228 :             return _vsscanf_s_l(_Buffer, _Format, NULL, _ArgList);

  00028	4c 8b 4c 24 40	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Format$[rsp]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003a	e8 00 00 00 00	 call	 _vsscanf_s_l

; 2229 :         }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
vsscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsscanf_s_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_s_l PROC					; COMDAT

; 2206 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 2207 :         return __stdio_common_vsscanf(

  0002d	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 83 c8 01	 or	 rax, 1
  00039	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0003e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00048	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00052	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  00059	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2208 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 2209 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2210 :     }

  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
_vsscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 72
_Buffer$ = 112
_BufferCount$ = 120
_Format$ = 128
sprintf_s PROC						; COMDAT

; 1841 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

  0002d	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00035	48 89 44 24 48	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	45 33 c9	 xor	 r9d, r9d
  00047	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR _Format$[rsp]
  0004f	48 8b 54 24 78	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  00054	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00059	e8 00 00 00 00	 call	 _vsprintf_s_l
  0005e	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1846 :             __crt_va_end(_ArgList);

  00062	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1847 :             return _Result;

  0006b	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 1848 :         }

  0006f	8b f8		 mov	 edi, eax
  00071	48 8b cc	 mov	 rcx, rsp
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf_s$rtcFrameData
  0007b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00080	8b c7		 mov	 eax, edi
  00082	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1497 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00041	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00046	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0004b	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00050	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00055	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf_s
  0005e	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00062	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00067	7d 0a		 jge	 SHORT $LN3@vsprintf_s
  00069	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  00071	eb 08		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00073	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00077	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
  0007b	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1503 :     }

  0007f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

$LN3:
  00000	40 57		 push	 rdi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
  00000	40 57		 push	 rdi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\cpu_info.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
