; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
$SG6927	DB	'Invalid', 00H
$SG6928	DB	'nv12', 00H
	ORG $+3
$SG6929	DB	'yv12', 00H
	ORG $+3
$SG6930	DB	'yuy2', 00H
	ORG $+3
$SG6931	DB	'yuv422', 00H
	ORG $+1
$SG6932	DB	'nv16', 00H
	ORG $+3
$SG6933	DB	'yuv444', 00H
	ORG $+1
$SG6934	DB	'yv12(9bit)', 00H
	ORG $+1
$SG6959	DB	'rgb', 00H
$SG6935	DB	'yv12(10bit)', 00H
$SG6961	DB	'gbr', 00H
$SG6936	DB	'yv12(12bit)', 00H
$SG6964	DB	'y8', 00H
	ORG $+1
$SG6937	DB	'yv12(14bit)', 00H
	ORG $+4
$SG6938	DB	'yv12(16bit)', 00H
$SG6939	DB	'p010', 00H
	ORG $+7
$SG6940	DB	'yuv422(9bit)', 00H
	ORG $+3
$SG6941	DB	'yuv422(10bit)', 00H
	ORG $+2
$SG6942	DB	'yuv422(12bit)', 00H
	ORG $+2
$SG6943	DB	'yuv422(14bit)', 00H
	ORG $+2
$SG6944	DB	'yuv422(16bit)', 00H
	ORG $+2
$SG6945	DB	'p210', 00H
	ORG $+3
$SG6946	DB	'yuv444(9bit)', 00H
	ORG $+3
$SG6947	DB	'yuv444(10bit)', 00H
	ORG $+2
$SG6948	DB	'yuv444(12bit)', 00H
	ORG $+2
$SG6949	DB	'yuv444(14bit)', 00H
	ORG $+2
$SG6950	DB	'yuv444(16bit)', 00H
	ORG $+2
$SG6951	DB	'yuva444', 00H
$SG6952	DB	'yuva444(16bit)', 00H
	ORG $+1
$SG6953	DB	'rgb24r', 00H
	ORG $+1
$SG6954	DB	'rgb32r', 00H
	ORG $+1
$SG6955	DB	'rgb24', 00H
	ORG $+2
$SG6956	DB	'rgb32', 00H
	ORG $+2
$SG6957	DB	'bgr24', 00H
	ORG $+2
$SG6958	DB	'bgr32', 00H
	ORG $+2
$SG6960	DB	'rgba', 00H
	ORG $+3
$SG6962	DB	'gbra', 00H
	ORG $+3
$SG6963	DB	'yc48', 00H
	ORG $+3
$SG6965	DB	'yc16', 00H
	ORG $+3
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_avx
PUBLIC	?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i_avx
PUBLIC	?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_avx
PUBLIC	?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_uv_yv12_to_nv12_avx
PUBLIC	?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_p010_avx
PUBLIC	?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb32_avx
PUBLIC	?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb32_avx
PUBLIC	?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_avx
PUBLIC	?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_avx
PUBLIC	??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_simd<29>
PUBLIC	?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32r_to_rgb32_avx
PUBLIC	?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_avx
PUBLIC	?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_avx
PUBLIC	?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_avx
PUBLIC	?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16bit_to_yc48_avx
PUBLIC	__xmm@00001000000010000000100000001000
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@00020002000200020002000200020002
PUBLIC	__xmm@00800080008000800080008000800080
PUBLIC	__xmm@08000800080008000800080008000800
PUBLIC	__xmm@082f082f082f082f082f082f082f082f
PUBLIC	__xmm@10001000100010001000100010001000
PUBLIC	__xmm@124a124a124a124a124a124a124a124a
PUBLIC	__xmm@12b412b412b412b412b412b412b412b4
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
	DD	imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z+284
	DD	imagerel $unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
$pdata$?memcpy_sse@@YAXPEAEPEBEH@Z DD imagerel ?memcpy_sse@@YAXPEAEPEBEH@Z
	DD	imagerel ?memcpy_sse@@YAXPEAEPEBEH@Z+872
	DD	imagerel $unwind$?memcpy_sse@@YAXPEAEPEBEH@Z
$pdata$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
	DD	imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z+72
	DD	imagerel $unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
$pdata$?separate_low_up@@YAXAEAT__m128i@@0@Z DD imagerel ?separate_low_up@@YAXAEAT__m128i@@0@Z
	DD	imagerel ?separate_low_up@@YAXAEAT__m128i@@0@Z+383
	DD	imagerel $unwind$?separate_low_up@@YAXAEAT__m128i@@0@Z
$pdata$?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1145
	DD	imagerel $unwind$?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z DD imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z
	DD	imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z+501
	DD	imagerel $unwind$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z
$pdata$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1300
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1509
	DD	imagerel $unwind$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1521
	DD	imagerel $unwind$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+596
	DD	imagerel $unwind$?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
	DD	imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z+403
	DD	imagerel $unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
$pdata$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
	DD	imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z+179
	DD	imagerel $unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
$pdata$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z+233
	DD	imagerel $unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
$pdata$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z+901
	DD	imagerel $unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
$pdata$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z DD imagerel ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z
	DD	imagerel ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z+276
	DD	imagerel $unwind$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z
$pdata$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z DD imagerel ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z
	DD	imagerel ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z+544
	DD	imagerel $unwind$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z
$pdata$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
	DD	imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z+598
	DD	imagerel $unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
$pdata$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z DD imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z
	DD	imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z+582
	DD	imagerel $unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z
$pdata$?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1381
	DD	imagerel $unwind$??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1380
	DD	imagerel $unwind$??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2347
	DD	imagerel $unwind$??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1879
	DD	imagerel $unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN18
	DD	imagerel $LN18+1481
	DD	imagerel $unwind$??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2185
	DD	imagerel $unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2539
	DD	imagerel $unwind$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1909
	DD	imagerel $unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1272
	DD	imagerel $unwind$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@12b412b412b412b412b412b412b412b4
CONST	SEGMENT
__xmm@12b412b412b412b412b412b412b412b4 DB 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
	DB	0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
CONST	ENDS
;	COMDAT __xmm@124a124a124a124a124a124a124a124a
CONST	SEGMENT
__xmm@124a124a124a124a124a124a124a124a DB 'J', 012H, 'J', 012H, 'J', 012H
	DB	'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H
CONST	ENDS
;	COMDAT __xmm@10001000100010001000100010001000
CONST	SEGMENT
__xmm@10001000100010001000100010001000 DB 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __xmm@082f082f082f082f082f082f082f082f
CONST	SEGMENT
__xmm@082f082f082f082f082f082f082f082f DB '/', 08H, '/', 08H, '/', 08H, '/'
	DB	08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H
CONST	ENDS
;	COMDAT __xmm@08000800080008000800080008000800
CONST	SEGMENT
__xmm@08000800080008000800080008000800 DB 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __xmm@00800080008000800080008000800080
CONST	SEGMENT
__xmm@00800080008000800080008000800080 DB 080H, 00H, 080H, 00H, 080H, 00H
	DB	080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H
CONST	ENDS
;	COMDAT __xmm@00020002000200020002000200020002
CONST	SEGMENT
__xmm@00020002000200020002000200020002 DB 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00001000000010000000100000001000
CONST	SEGMENT
__xmm@00001000000010000000100000001000 DB 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB
CONST	SEGMENT
?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB DB 00H ; `gather_y_u_v_to_yc48'::`2'::shuffle_yc48
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	03f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb32_to_rgb32_simd<29>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb32_to_rgb32_simd<29>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	042H
	DB	047H
	DB	052H
	DB	034H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 04dH ; convert_rgb32_to_rgb32_simd<29>
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	047H
	DB	042H
	DB	052H
	DB	034H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+14
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0d0H ; convert_rgb32_to_rgb32_simd<29>
	DD	010H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_rgb32_to_rgb32_simd<29>
	DD	00H
	DQ	FLAT:??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD 033f19H
	DD	07015e219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?memcpy_sse@@YAXPEAEPEBEH@Z DD 032e01H
	DD	0220117H
	DD	07010H
$unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD 022301H
	DD	0700b320fH
$unwind$?separate_low_up@@YAXAEAT__m128i@@0@Z DD 032901H
	DD	01a0112H
	DD	0700bH
$unwind$?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	035011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z DD 032e01H
	DD	0200117H
	DD	07010H
$unwind$?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	03b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	041011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
$unwind$?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	041011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
$unwind$?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD 032e01H
	DD	0140117H
	DD	07010H
$unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD 023001H
	DD	07015d219H
$unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD 023301H
	DD	07015f21cH
$unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD 033301H
	DD	034011cH
	DD	07015H
$unwind$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z DD 032401H
	DD	012010dH
	DD	07006H
$unwind$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z DD 032401H
	DD	022010dH
	DD	07006H
$unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD 032e01H
	DD	0280117H
	DD	07010H
$unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z DD 032e01H
	DD	01c0117H
	DD	07010H
$unwind$?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	037011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01a8H
$unwind$?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	037011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01a8H
$unwind$?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	073011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0388H
$unwind$?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	075011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0390H
$unwind$?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	085011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0410H
$unwind$?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	09b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	04c0H
$unwind$?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	07b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
$unwind$?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	043011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
CONST	SEGMENT
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0 DB 079H ; thread_y_range
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc DD 038H ; thread_y_range
	DD	0cH
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData DD 01H ; thread_y_range
	DD	00H
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yuy2_to_nv12_simd
	DB	030H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yuy2_to_nv12_simd
	DB	031H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_yuy2_to_nv12_simd
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_i_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0f0H ; convert_yuy2_to_nv12_simd
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0c0H
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yuy2_to_nv12_i_simd
	DB	030H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yuy2_to_nv12_i_simd
	DB	031H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_yuy2_to_nv12_i_simd
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb32_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0f0H ; convert_yuy2_to_nv12_i_simd
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0c0H
	DD	010H
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb32_simd
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb32_simd
	DD	00H
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24r_to_rgb32_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb24_to_rgb32_simd
	DD	010H
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24r_to_rgb32_simd
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24r_to_rgb32_simd
	DD	00H
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb32r_to_rgb32_simd
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a0H ; convert_rgb24r_to_rgb32_simd
	DD	010H
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_rgb32r_to_rgb32_simd
	DD	0cH
	DQ	FLAT:?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_rgb32r_to_rgb32_simd
	DD	00H
	DQ	FLAT:?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_nv12_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_nv12_simd<0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_nv12_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_nv12_simd<1>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 098H ; convert_yv12_to_nv12_simd<0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_nv12_simd<1>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 098H ; convert_yv12_to_nv12_simd<1>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_nv12_simd<1>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_p010_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_p010_simd<0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_p010_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_p010_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0168H ; convert_yv12_to_p010_simd<0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01a0H ; convert_yc48_to_p010_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0170H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0110H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0d0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_p010_i_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_i_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01b0H ; convert_yc48_to_p010_i_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0180H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0128H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	033H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0180H ; convert_yc48_to_yuv444_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	0150H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0120H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	033H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0180H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	0150H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0120H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	033H
	DB	00H
	ORG $+5
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0100H ; convert_yuv444_16bit_to_yc48_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0d0H
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+192
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 04H ; convert_yuv444_16bit_to_yc48_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T7 = 88
Y_line$ = 104
U_line$ = 112
V_line$ = 120
pixel$ = 128
x1$ = 160
x2$ = 208
x3$ = 256
y$8 = 276
Y$9 = 280
U$10 = 288
V$11 = 296
ycp_fin$12 = 304
ycp$13 = 312
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
$T20 = 424
$T21 = 448
$T22 = 464
$T23 = 480
tv194 = 496
tv202 = 500
tv210 = 504
__$ArrayPad$ = 512
dst$ = 560
src$ = 568
width$ = 576
src_y_pitch_byte$ = 584
src_uv_pitch_byte$ = 592
dst_y_pitch_byte$ = 600
height$ = 608
dst_height$ = 616
thread_id$ = 624
thread_n$ = 632
crop$ = 640
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16bit_to_yc48_simd<0>

; 1751 : static __forceinline void convert_yuv444_16bit_to_yc48_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR [rsp+560]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1752 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 78 02
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 70
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 60
	02 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 a8
	01 00 00	 lea	 rcx, QWORD PTR $T20[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T7[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T7[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1753 :     char *Y_line = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000a9	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  000ae	48 63 c9	 movsxd	 rcx, ecx
  000b1	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000b9	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax

; 1754 :     char *U_line = (char *)src[1] + src_y_pitch_byte * y_range.start_src;

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 01	 imul	 rax, rax, 1
  000ce	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000d5	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  000da	48 63 c9	 movsxd	 rcx, ecx
  000dd	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000e9	48 8b c1	 mov	 rax, rcx
  000ec	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax

; 1755 :     char *V_line = (char *)src[2] + src_y_pitch_byte * y_range.start_src;

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 02	 imul	 rax, rax, 2
  000fa	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00101	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax

; 1756 :     char *pixel = (char *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0011d	b8 08 00 00 00	 mov	 eax, 8
  00122	48 6b c0 00	 imul	 rax, rax, 0
  00126	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0012d	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00132	48 63 c9	 movsxd	 rcx, ecx
  00135	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0013d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1757 :     __m128i x1, x2, x3;
; 1758 :     for (int y = 0; y < y_range.len; y++, pixel += dst_y_pitch_byte, Y_line += src_y_pitch_byte, U_line += src_y_pitch_byte, V_line += src_y_pitch_byte) {

  0014c	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  00157	eb 76		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00159	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  00160	ff c0		 inc	 eax
  00162	89 84 24 14 01
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  00169	48 63 84 24 58
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00171	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00179	48 03 c8	 add	 rcx, rax
  0017c	48 8b c1	 mov	 rax, rcx
  0017f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax
  00187	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0018f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Y_line$[rsp]
  00194	48 03 c8	 add	 rcx, rax
  00197	48 8b c1	 mov	 rax, rcx
  0019a	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax
  0019f	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR U_line$[rsp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax
  001b7	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001bf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR V_line$[rsp]
  001c4	48 03 c8	 add	 rcx, rax
  001c7	48 8b c1	 mov	 rax, rcx
  001ca	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax
$LN4@convert_yu:
  001cf	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001d3	39 84 24 14 01
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001da	0f 8d ef 02 00
	00		 jge	 $LN3@convert_yu

; 1759 :         short *Y = (short *)Y_line;

  001e0	48 8b 44 24 68	 mov	 rax, QWORD PTR Y_line$[rsp]
  001e5	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Y$9[rsp], rax

; 1760 :         short *U = (short *)U_line;

  001ed	48 8b 44 24 70	 mov	 rax, QWORD PTR U_line$[rsp]
  001f2	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR U$10[rsp], rax

; 1761 :         short *V = (short *)V_line;

  001fa	48 8b 44 24 78	 mov	 rax, QWORD PTR V_line$[rsp]
  001ff	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR V$11[rsp], rax

; 1762 :         short *const ycp_fin = (short *)pixel + width * 3;

  00207	6b 84 24 40 02
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  0020f	48 98		 cdqe
  00211	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00219	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0021d	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ycp_fin$12[rsp], rax

; 1763 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  00225	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pixel$[rsp]
  0022d	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR ycp$13[rsp], rax
  00235	eb 50		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00237	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  0023f	48 83 c0 30	 add	 rax, 48			; 00000030H
  00243	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR ycp$13[rsp], rax
  0024b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR Y$9[rsp]
  00253	48 83 c0 10	 add	 rax, 16
  00257	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Y$9[rsp], rax
  0025f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR U$10[rsp]
  00267	48 83 c0 10	 add	 rax, 16
  0026b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR U$10[rsp], rax
  00273	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR V$11[rsp]
  0027b	48 83 c0 10	 add	 rax, 16
  0027f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR V$11[rsp], rax
$LN7@convert_yu:
  00287	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$12[rsp]
  0028f	48 39 84 24 38
	01 00 00	 cmp	 QWORD PTR ycp$13[rsp], rax
  00297	0f 83 2d 02 00
	00		 jae	 $LN6@convert_yu

; 1764 :             x1 = _mm_loadu_si128((__m128i *)(Y));

  0029d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR Y$9[rsp]
  002a5	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a9	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002b2	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002bb	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1765 :             x2 = _mm_loadu_si128((__m128i *)(U));

  002c4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR U$10[rsp]
  002cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002d0	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002d9	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002e2	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1766 :             x3 = _mm_loadu_si128((__m128i *)(V));

  002eb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR V$11[rsp]
  002f3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002f7	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00300	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00309	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1767 :             x1 = convert_y_range_to_yc48(x1);

  00312	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0031b	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00324	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  0032c	e8 00 00 00 00	 call	 ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_y_range_to_yc48
  00331	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0033a	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00343	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1768 :             x2 = convert_uv_range_to_yc48(x2);

  0034c	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00355	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  0035e	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00366	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  0036b	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00374	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  0037d	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1769 :             x3 = convert_uv_range_to_yc48(x3);

  00386	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0038f	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00398	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR $T23[rsp]
  003a0	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  003a5	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003ae	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003b7	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1770 :             gather_y_u_v_to_yc48(x1, x2, x3);

  003c0	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  003c8	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  003d0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  003d8	e8 00 00 00 00	 call	 ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_to_yc48

; 1771 :             _mm_store_switch_si128((__m128i *)(ycp +  0), x1);

  003dd	33 c0		 xor	 eax, eax
  003df	85 c0		 test	 eax, eax
  003e1	74 22		 je	 SHORT $LN9@convert_yu
  003e3	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  003eb	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003f4	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003f8	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
  00403	eb 20		 jmp	 SHORT $LN10@convert_yu
$LN9@convert_yu:
  00405	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  0040d	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00416	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0041a	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN10@convert_yu:

; 1772 :             _mm_store_switch_si128((__m128i *)(ycp +  8), x2);

  00425	33 c0		 xor	 eax, eax
  00427	85 c0		 test	 eax, eax
  00429	74 26		 je	 SHORT $LN11@convert_yu
  0042b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00433	48 83 c0 10	 add	 rax, 16
  00437	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00440	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00444	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
  0044f	eb 24		 jmp	 SHORT $LN12@convert_yu
$LN11@convert_yu:
  00451	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00459	48 83 c0 10	 add	 rax, 16
  0045d	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00466	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0046a	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
$LN12@convert_yu:

; 1773 :             _mm_store_switch_si128((__m128i *)(ycp + 16), x3);

  00475	33 c0		 xor	 eax, eax
  00477	85 c0		 test	 eax, eax
  00479	74 26		 je	 SHORT $LN13@convert_yu
  0047b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00483	48 83 c0 20	 add	 rax, 32			; 00000020H
  00487	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00490	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00494	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
  0049f	eb 24		 jmp	 SHORT $LN14@convert_yu
$LN13@convert_yu:
  004a1	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  004a9	48 83 c0 20	 add	 rax, 32			; 00000020H
  004ad	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004b6	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  004ba	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN14@convert_yu:

; 1774 :         }

  004c5	e9 6d fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 1775 :     }

  004ca	e9 8a fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 1776 : }

  004cf	48 8b cc	 mov	 rcx, rsp
  004d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004d9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004de	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004e6	48 33 cc	 xor	 rcx, rsp
  004e9	e8 00 00 00 00	 call	 __security_check_cookie
  004ee	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  004f5	5f		 pop	 rdi
  004f6	5e		 pop	 rsi
  004f7	c3		 ret	 0
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16bit_to_yc48_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16bit_to_yc48_avx

; 96   : void convert_yuv444_16bit_to_yc48_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 97   :     convert_yuv444_16bit_to_yc48_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16bit_to_yc48_simd<0>

; 98   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16bit_to_yc48_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16bit_to_yc48_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T9 = 88
Y_line$ = 104
U_line$ = 112
V_line$ = 120
pixel$ = 128
xC_pw_one$ = 160
$T10 = 192
xC_YCC$ = 224
$T11 = 256
x1$ = 288
x2$ = 336
x3$ = 384
y$12 = 404
Y$13 = 408
U$14 = 416
V$15 = 424
ycp_fin$16 = 432
ycp$17 = 440
$T18 = 448
$T19 = 464
$T20 = 480
$T21 = 496
$T22 = 512
$T23 = 528
$T24 = 544
$T25 = 560
$T26 = 576
$T27 = 592
$T28 = 608
$T29 = 624
$T30 = 640
$T31 = 656
$T32 = 672
$T33 = 688
$T34 = 704
$T35 = 720
$T36 = 736
$T37 = 760
$T38 = 784
$T39 = 800
$T40 = 816
$T41 = 832
$T42 = 848
$T43 = 864
$T44 = 880
$T45 = 896
$T46 = 912
$T47 = 928
tv213 = 944
tv241 = 948
tv269 = 952
__$ArrayPad$ = 960
dst$ = 1008
src$ = 1016
width$ = 1024
src_y_pitch_byte$ = 1032
src_uv_pitch_byte$ = 1040
dst_y_pitch_byte$ = 1048
height$ = 1056
dst_height$ = 1064
thread_id$ = 1072
thread_n$ = 1080
crop$ = 1088
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_simd<0>

; 1724 : static __forceinline void convert_yc48_to_yuv444_16bit_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1008]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1725 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 38 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 30
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 20
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 f8
	02 00 00	 lea	 rcx, QWORD PTR $T37[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1726 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte + y_range.start_dst;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000aa	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000b2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000b6	48 03 c1	 add	 rax, rcx
  000b9	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000be	48 03 c1	 add	 rax, rcx
  000c1	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax

; 1727 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte + y_range.start_dst;

  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 01	 imul	 rax, rax, 1
  000cf	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d7	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000df	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000e3	48 03 c1	 add	 rax, rcx
  000e6	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000eb	48 03 c1	 add	 rax, rcx
  000ee	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax

; 1728 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte + y_range.start_dst;

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 02	 imul	 rax, rax, 2
  000fc	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  00104	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0010c	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00110	48 03 c1	 add	 rax, rcx
  00113	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  00118	48 03 c1	 add	 rax, rcx
  0011b	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax

; 1729 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00120	b8 08 00 00 00	 mov	 eax, 8
  00125	48 6b c0 00	 imul	 rax, rax, 0
  00129	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00130	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00135	48 63 c9	 movsxd	 rcx, ecx
  00138	48 8b 94 24 f8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00140	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00144	48 8b c1	 mov	 rax, rcx
  00147	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1730 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0014f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00157	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00160	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00169	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1731 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  00172	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  0017a	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00183	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  0018c	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1732 :     __m128i x1, x2, x3;
; 1733 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00195	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  001a0	eb 76		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  001a2	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  001a9	ff c0		 inc	 eax
  001ab	89 84 24 94 01
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  001b2	48 63 84 24 08
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ba	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001c2	48 03 c8	 add	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax
  001d0	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Y_line$[rsp]
  001dd	48 03 c8	 add	 rcx, rax
  001e0	48 8b c1	 mov	 rax, rcx
  001e3	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax
  001e8	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR U_line$[rsp]
  001f5	48 03 c8	 add	 rcx, rax
  001f8	48 8b c1	 mov	 rax, rcx
  001fb	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax
  00200	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00208	48 8b 4c 24 78	 mov	 rcx, QWORD PTR V_line$[rsp]
  0020d	48 03 c8	 add	 rcx, rax
  00210	48 8b c1	 mov	 rax, rcx
  00213	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax
$LN4@convert_yc:
  00218	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0021c	39 84 24 94 01
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00223	0f 8d 23 05 00
	00		 jge	 $LN3@convert_yc

; 1734 :         short *Y = (short *)Y_line;

  00229	48 8b 44 24 68	 mov	 rax, QWORD PTR Y_line$[rsp]
  0022e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax

; 1735 :         short *U = (short *)U_line;

  00236	48 8b 44 24 70	 mov	 rax, QWORD PTR U_line$[rsp]
  0023b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax

; 1736 :         short *V = (short *)V_line;

  00243	48 8b 44 24 78	 mov	 rax, QWORD PTR V_line$[rsp]
  00248	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax

; 1737 :         short *const ycp_fin = (short *)pixel + width * 3;

  00250	6b 84 24 00 04
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00258	48 98		 cdqe
  0025a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00262	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00266	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR ycp_fin$16[rsp], rax

; 1738 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  0026e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pixel$[rsp]
  00276	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  0027e	eb 50		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00280	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00288	48 83 c0 30	 add	 rax, 48			; 00000030H
  0028c	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  00294	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  0029c	48 83 c0 10	 add	 rax, 16
  002a0	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax
  002a8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  002b0	48 83 c0 10	 add	 rax, 16
  002b4	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax
  002bc	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  002c4	48 83 c0 10	 add	 rax, 16
  002c8	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax
$LN7@convert_yc:
  002d0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$16[rsp]
  002d8	48 39 84 24 b8
	01 00 00	 cmp	 QWORD PTR ycp$17[rsp], rax
  002e0	0f 83 61 04 00
	00		 jae	 $LN6@convert_yc

; 1739 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  002e6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  002ee	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002f2	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002fb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00304	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1740 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0030d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00315	48 83 c0 10	 add	 rax, 16
  00319	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031d	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00326	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0032f	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1741 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00338	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00340	48 83 c0 20	 add	 rax, 32			; 00000020H
  00344	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00348	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00351	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0035a	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1742 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00363	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  0036b	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  00373	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  0037b	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1743 :             _mm_store_switch_si128((__m128i *)Y, convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00380	33 c0		 xor	 eax, eax
  00382	85 c0		 test	 eax, eax
  00384	74 7e		 je	 SHORT $LN9@convert_yc
  00386	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0038e	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00397	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003a0	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  003a9	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b6	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003be	41 b8 04 00 00
	00		 mov	 r8d, 4
  003c4	48 8d 94 24 f0
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  003cc	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  003d4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003d9	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003e2	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  003ea	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  003f3	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003f7	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
  00402	eb 7c		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00404	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0040c	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00415	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0041e	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00427	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  0042f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00434	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0043c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00442	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0044a	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  00452	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00457	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00460	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00468	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00471	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00475	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
$LN10@convert_yc:

; 1744 :             _mm_store_switch_si128((__m128i *)U, convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  00480	33 c0		 xor	 eax, eax
  00482	85 c0		 test	 eax, eax
  00484	0f 84 ae 00 00
	00		 je	 $LN11@convert_yc
  0048a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00492	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0049b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  004a3	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004ac	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  004b5	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  004be	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  004c7	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  004d0	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  004d8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004dd	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR $T41[rsp]
  004e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ea	45 33 c9	 xor	 r9d, r9d
  004ed	4c 8d 84 24 40
	02 00 00	 lea	 r8, QWORD PTR $T26[rsp]
  004f5	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  004fd	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  00505	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0050a	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00513	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  0051b	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  00524	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00528	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
  00533	e9 a9 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00538	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00540	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  00549	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00551	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0055a	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00563	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  0056c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00575	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0057e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00586	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0058b	48 8d 84 24 60
	03 00 00	 lea	 rax, QWORD PTR $T43[rsp]
  00593	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00598	45 33 c9	 xor	 r9d, r9d
  0059b	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  005a3	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR $T28[rsp]
  005ab	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  005b3	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  005b8	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  005c1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  005c9	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  005d2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  005d6	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
$LN12@convert_yc:

; 1745 :             _mm_store_switch_si128((__m128i *)V, convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  005e1	33 c0		 xor	 eax, eax
  005e3	85 c0		 test	 eax, eax
  005e5	0f 84 ae 00 00
	00		 je	 $LN13@convert_yc
  005eb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  005f3	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  005fc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00604	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0060d	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00616	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  0061f	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00628	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  00631	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00639	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0063e	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR $T45[rsp]
  00646	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0064b	45 33 c9	 xor	 r9d, r9d
  0064e	4c 8d 84 24 a0
	02 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  00656	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0065e	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00666	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0066b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  00674	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0067c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  00685	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00689	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
  00694	e9 a9 00 00 00	 jmp	 $LN14@convert_yc
$LN13@convert_yc:
  00699	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  006a1	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  006aa	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  006b2	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  006bb	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  006c4	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  006cd	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  006d6	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  006df	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006e7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006ec	48 8d 84 24 a0
	03 00 00	 lea	 rax, QWORD PTR $T47[rsp]
  006f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f9	45 33 c9	 xor	 r9d, r9d
  006fc	4c 8d 84 24 d0
	02 00 00	 lea	 r8, QWORD PTR $T35[rsp]
  00704	48 8d 94 24 c0
	02 00 00	 lea	 rdx, QWORD PTR $T34[rsp]
  0070c	48 8d 8c 24 90
	03 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  00714	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00719	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00722	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0072a	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  00733	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00737	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
$LN14@convert_yc:

; 1746 :         }

  00742	e9 39 fb ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1747 :     }

  00747	e9 56 fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1748 : }

  0074c	48 8b cc	 mov	 rcx, rsp
  0074f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00756	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0075b	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00763	48 33 cc	 xor	 rcx, rsp
  00766	e8 00 00 00 00	 call	 __security_check_cookie
  0076b	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  00772	5f		 pop	 rdi
  00773	5e		 pop	 rsi
  00774	c3		 ret	 0
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_avx

; 92   : void convert_yc48_to_yuv444_16bit_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 93   :     convert_yc48_to_yuv444_16bit_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_simd<0>

; 94   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T9 = 88
YLine$ = 104
ULine$ = 112
VLine$ = 120
ycpLine$ = 128
xC_pw_one$ = 160
$T10 = 192
xC_YCC$ = 224
$T11 = 256
x1$ = 288
x2$ = 336
x3$ = 384
xY$ = 416
xU$ = 432
xV$ = 448
y$12 = 464
Y$13 = 472
U$14 = 480
V$15 = 488
ycp_fin$16 = 496
ycp$17 = 504
$T18 = 512
$T19 = 528
$T20 = 544
$T21 = 560
$T22 = 576
$T23 = 592
$T24 = 608
$T25 = 624
$T26 = 640
$T27 = 656
$T28 = 672
$T29 = 688
$T30 = 704
$T31 = 720
$T32 = 736
$T33 = 752
$T34 = 768
$T35 = 784
$T36 = 800
$T37 = 816
$T38 = 832
$T39 = 848
$T40 = 864
$T41 = 880
$T42 = 896
$T43 = 912
$T44 = 928
$T45 = 944
$T46 = 960
$T47 = 976
$T48 = 992
$T49 = 1016
$T50 = 1040
$T51 = 1056
$T52 = 1072
$T53 = 1088
$T54 = 1104
$T55 = 1120
$T56 = 1136
$T57 = 1152
$T58 = 1168
$T59 = 1184
tv325 = 1200
tv331 = 1204
tv337 = 1208
__$ArrayPad$ = 1216
dst$ = 1264
src$ = 1272
width$ = 1280
src_y_pitch_byte$ = 1288
src_uv_pitch_byte$ = 1296
dst_y_pitch_byte$ = 1304
height$ = 1312
dst_height$ = 1320
thread_id$ = 1328
thread_n$ = 1336
crop$ = 1344
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_simd<0>

; 1673 : static void __forceinline convert_yc48_to_yuv444_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 04
	00 00		 sub	 rsp, 1240		; 000004d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 36 01 00 00	 mov	 ecx, 310		; 00000136H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1264]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1674 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 38 05
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 30
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 20
	05 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 f8
	03 00 00	 lea	 rcx, QWORD PTR $T49[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1675 :     uint8_t *YLine   = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000a9	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  000ae	48 63 c9	 movsxd	 rcx, ecx
  000b1	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000b9	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 44 24 68	 mov	 QWORD PTR YLine$[rsp], rax

; 1676 :     uint8_t *ULine   = (uint8_t *)dst[1] + dst_y_pitch_byte * y_range.start_dst;

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 01	 imul	 rax, rax, 1
  000ce	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d5	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  000da	48 63 c9	 movsxd	 rcx, ecx
  000dd	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000e9	48 8b c1	 mov	 rax, rcx
  000ec	48 89 44 24 70	 mov	 QWORD PTR ULine$[rsp], rax

; 1677 :     uint8_t *VLine   = (uint8_t *)dst[2] + dst_y_pitch_byte * y_range.start_dst;

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 02	 imul	 rax, rax, 2
  000fa	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00101	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 44 24 78	 mov	 QWORD PTR VLine$[rsp], rax

; 1678 :     uint8_t *ycpLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src;

  0011d	b8 08 00 00 00	 mov	 eax, 8
  00122	48 6b c0 00	 imul	 rax, rax, 0
  00126	8b 8c 24 08 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0012d	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00132	48 63 c9	 movsxd	 rcx, ecx
  00135	48 8b 94 24 f8
	04 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0013d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ycpLine$[rsp], rax

; 1679 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0014c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00154	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0015d	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00166	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1680 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0016f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00177	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00180	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00189	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1681 :     __m128i x1, x2, x3, xY, xU, xV;
; 1682 :     for (int y = 0; y < y_range.len; y++, ycpLine += src_y_pitch_byte, YLine += dst_y_pitch_byte, ULine += dst_y_pitch_byte, VLine += dst_y_pitch_byte) {

  00192	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  0019d	eb 76		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  0019f	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  001a6	ff c0		 inc	 eax
  001a8	89 84 24 d0 01
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  001af	48 63 84 24 08
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ycpLine$[rsp]
  001bf	48 03 c8	 add	 rcx, rax
  001c2	48 8b c1	 mov	 rax, rcx
  001c5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ycpLine$[rsp], rax
  001cd	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR YLine$[rsp]
  001da	48 03 c8	 add	 rcx, rax
  001dd	48 8b c1	 mov	 rax, rcx
  001e0	48 89 44 24 68	 mov	 QWORD PTR YLine$[rsp], rax
  001e5	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ULine$[rsp]
  001f2	48 03 c8	 add	 rcx, rax
  001f5	48 8b c1	 mov	 rax, rcx
  001f8	48 89 44 24 70	 mov	 QWORD PTR ULine$[rsp], rax
  001fd	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00205	48 8b 4c 24 78	 mov	 rcx, QWORD PTR VLine$[rsp]
  0020a	48 03 c8	 add	 rcx, rax
  0020d	48 8b c1	 mov	 rax, rcx
  00210	48 89 44 24 78	 mov	 QWORD PTR VLine$[rsp], rax
$LN4@convert_yc:
  00215	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00219	39 84 24 d0 01
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00220	0f 8d 9c 07 00
	00		 jge	 $LN3@convert_yc

; 1683 :         uint8_t *Y = YLine;

  00226	48 8b 44 24 68	 mov	 rax, QWORD PTR YLine$[rsp]
  0022b	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax

; 1684 :         uint8_t *U = ULine;

  00233	48 8b 44 24 70	 mov	 rax, QWORD PTR ULine$[rsp]
  00238	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax

; 1685 :         uint8_t *V = VLine;

  00240	48 8b 44 24 78	 mov	 rax, QWORD PTR VLine$[rsp]
  00245	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax

; 1686 :         int16_t *const ycp_fin = (int16_t *)ycpLine + width * 3;

  0024d	6b 84 24 00 05
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00255	48 98		 cdqe
  00257	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ycpLine$[rsp]
  0025f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00263	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR ycp_fin$16[rsp], rax

; 1687 :         for (int16_t *ycp = (int16_t *)ycpLine; ycp < ycp_fin; ycp += 48, Y += 16, U += 16, V += 16) {

  0026b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ycpLine$[rsp]
  00273	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  0027b	eb 50		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0027d	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00285	48 83 c0 60	 add	 rax, 96			; 00000060H
  00289	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  00291	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00299	48 83 c0 10	 add	 rax, 16
  0029d	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax
  002a5	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  002ad	48 83 c0 10	 add	 rax, 16
  002b1	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax
  002b9	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  002c1	48 83 c0 10	 add	 rax, 16
  002c5	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax
$LN7@convert_yc:
  002cd	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$16[rsp]
  002d5	48 39 84 24 f8
	01 00 00	 cmp	 QWORD PTR ycp$17[rsp], rax
  002dd	0f 83 da 06 00
	00		 jae	 $LN6@convert_yc

; 1688 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  002e3	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  002eb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002ef	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002f8	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00301	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1689 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0030a	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00312	48 83 c0 10	 add	 rax, 16
  00316	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031a	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00323	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0032c	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1690 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00335	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  0033d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00341	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00345	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  0034e	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00357	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1691 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00360	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  00368	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  00370	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00378	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1692 : 
; 1693 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  0037d	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00385	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0038e	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00397	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR $T50[rsp], xmm0
  003a0	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ad	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003b5	41 b8 04 00 00
	00		 mov	 r8d, 4
  003bb	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  003c3	48 8d 8c 24 10
	04 00 00	 lea	 rcx, QWORD PTR $T50[rsp]
  003cb	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003d0	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003d9	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  003e2	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1694 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  003eb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  003f3	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  003fc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00404	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  0040d	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00416	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR $T52[rsp], xmm0
  0041f	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00428	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00431	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00439	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0043e	48 8d 84 24 30
	04 00 00	 lea	 rax, QWORD PTR $T52[rsp]
  00446	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0044b	45 33 c9	 xor	 r9d, r9d
  0044e	4c 8d 84 24 60
	02 00 00	 lea	 r8, QWORD PTR $T24[rsp]
  00456	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0045e	48 8d 8c 24 20
	04 00 00	 lea	 rcx, QWORD PTR $T51[rsp]
  00466	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0046b	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00474	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  0047d	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1695 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  00486	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  0048e	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00497	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0049f	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  004a8	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  004b1	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T54[rsp], xmm0
  004ba	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004c3	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  004cc	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  004d4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004d9	48 8d 84 24 50
	04 00 00	 lea	 rax, QWORD PTR $T54[rsp]
  004e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004e6	45 33 c9	 xor	 r9d, r9d
  004e9	4c 8d 84 24 90
	02 00 00	 lea	 r8, QWORD PTR $T27[rsp]
  004f1	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR $T26[rsp]
  004f9	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR $T53[rsp]
  00501	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00506	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0050f	66 0f 6f 84 24
	a0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  00518	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1696 :             xY = _mm_srli_epi16(x1, 8);

  00521	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0052a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0052f	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  00538	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T29[rsp]
  00541	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xY$[rsp], xmm0

; 1697 :             xU = _mm_srli_epi16(x2, 8);

  0054a	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00553	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00558	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00561	66 0f 6f 84 24
	c0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  0056a	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR xU$[rsp], xmm0

; 1698 :             xV = _mm_srli_epi16(x3, 8);

  00573	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0057c	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00581	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0058a	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  00593	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xV$[rsp], xmm0

; 1699 : 
; 1700 :             x1 = _mm_loadu_si128((__m128i *)(ycp + 24));

  0059c	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005a4	48 83 c0 30	 add	 rax, 48			; 00000030H
  005a8	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005ac	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  005b5	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T32[rsp]
  005be	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1701 :             x2 = _mm_loadu_si128((__m128i *)(ycp + 32));

  005c7	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005cf	48 83 c0 40	 add	 rax, 64			; 00000040H
  005d3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005d7	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  005e0	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  005e9	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1702 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 40));

  005f2	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005fa	48 83 c0 50	 add	 rax, 80			; 00000050H
  005fe	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00602	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  0060b	66 0f 6f 84 24
	00 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T34[rsp]
  00614	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1703 :             gather_y_u_v_from_yc48(x1, x2, x3);

  0061d	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  00625	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0062d	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00635	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1704 : 
; 1705 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  0063a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00642	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  0064b	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00654	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  0065d	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00665	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066a	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00672	41 b8 04 00 00
	00		 mov	 r8d, 4
  00678	48 8d 94 24 10
	03 00 00	 lea	 rdx, QWORD PTR $T35[rsp]
  00680	48 8d 8c 24 60
	04 00 00	 lea	 rcx, QWORD PTR $T55[rsp]
  00688	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0068d	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00696	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  0069f	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1706 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  006a8	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  006b0	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  006b9	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  006c1	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  006ca	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  006d3	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  006dc	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  006e5	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T56[rsp], xmm0
  006ee	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006fb	48 8d 84 24 80
	04 00 00	 lea	 rax, QWORD PTR $T57[rsp]
  00703	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00708	45 33 c9	 xor	 r9d, r9d
  0070b	4c 8d 84 24 40
	03 00 00	 lea	 r8, QWORD PTR $T38[rsp]
  00713	48 8d 94 24 30
	03 00 00	 lea	 rdx, QWORD PTR $T37[rsp]
  0071b	48 8d 8c 24 70
	04 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  00723	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00728	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00731	66 0f 6f 84 24
	50 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T39[rsp]
  0073a	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1707 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  00743	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  0074b	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  00754	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0075c	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  00765	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  0076e	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00777	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00780	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T58[rsp], xmm0
  00789	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00791	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00796	48 8d 84 24 a0
	04 00 00	 lea	 rax, QWORD PTR $T59[rsp]
  0079e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a3	45 33 c9	 xor	 r9d, r9d
  007a6	4c 8d 84 24 70
	03 00 00	 lea	 r8, QWORD PTR $T41[rsp]
  007ae	48 8d 94 24 60
	03 00 00	 lea	 rdx, QWORD PTR $T40[rsp]
  007b6	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  007be	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  007c3	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007cc	66 0f 6f 84 24
	80 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T42[rsp]
  007d5	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1708 :             x1 = _mm_srli_epi16(x1, 8);

  007de	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  007e7	66 0f 71 d0 08	 psrlw	 xmm0, 8
  007ec	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  007f5	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  007fe	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1709 :             x2 = _mm_srli_epi16(x2, 8);

  00807	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00810	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00815	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  0081e	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T44[rsp]
  00827	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1710 :             x3 = _mm_srli_epi16(x3, 8);

  00830	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00839	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0083e	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00847	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T45[rsp]
  00850	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1711 : 
; 1712 :             xY = _mm_packus_epi16(xY, x1);

  00859	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  00862	66 0f 67 84 24
	20 01 00 00	 packuswb xmm0, XMMWORD PTR x1$[rsp]
  0086b	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  00874	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  0087d	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xY$[rsp], xmm0

; 1713 :             xU = _mm_packus_epi16(xU, x2);

  00886	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  0088f	66 0f 67 84 24
	50 01 00 00	 packuswb xmm0, XMMWORD PTR x2$[rsp]
  00898	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  008a1	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T47[rsp]
  008aa	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR xU$[rsp], xmm0

; 1714 :             xV = _mm_packus_epi16(xV, x3);

  008b3	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  008bc	66 0f 67 84 24
	80 01 00 00	 packuswb xmm0, XMMWORD PTR x3$[rsp]
  008c5	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  008ce	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T48[rsp]
  008d7	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xV$[rsp], xmm0

; 1715 : 
; 1716 :             _mm_store_switch_si128((__m128i*)Y, xY);

  008e0	33 c0		 xor	 eax, eax
  008e2	85 c0		 test	 eax, eax
  008e4	74 22		 je	 SHORT $LN9@convert_yc
  008e6	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  008ee	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  008f7	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  008fb	c7 84 24 b0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
  00906	eb 20		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00908	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00910	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  00919	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0091d	c7 84 24 b0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN10@convert_yc:

; 1717 :             _mm_store_switch_si128((__m128i*)U, xU);

  00928	33 c0		 xor	 eax, eax
  0092a	85 c0		 test	 eax, eax
  0092c	74 22		 je	 SHORT $LN11@convert_yc
  0092e	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  00936	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  0093f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00943	c7 84 24 b4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
  0094e	eb 20		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  00950	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  00958	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  00961	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00965	c7 84 24 b4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN12@convert_yc:

; 1718 :             _mm_store_switch_si128((__m128i*)V, xV);

  00970	33 c0		 xor	 eax, eax
  00972	85 c0		 test	 eax, eax
  00974	74 22		 je	 SHORT $LN13@convert_yc
  00976	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0097e	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  00987	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0098b	c7 84 24 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
  00996	eb 20		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  00998	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  009a0	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  009a9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  009ad	c7 84 24 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
$LN14@convert_yc:

; 1719 :         }

  009b8	e9 c0 f8 ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1720 :     }

  009bd	e9 dd f7 ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1721 : }

  009c2	48 8b cc	 mov	 rcx, rsp
  009c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  009cc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  009d1	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  009d9	48 33 cc	 xor	 rcx, rsp
  009dc	e8 00 00 00 00	 call	 __security_check_cookie
  009e1	48 81 c4 d8 04
	00 00		 add	 rsp, 1240		; 000004d8H
  009e8	5f		 pop	 rdi
  009e9	5e		 pop	 rsi
  009ea	c3		 ret	 0
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_avx

; 88   : void convert_yc48_to_yuv444_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 89   :     convert_yc48_to_yuv444_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_simd<0>

; 90   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_yuv444_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
i$ = 72
dst_Y$ = 80
dst_C$ = 88
pixel$ = 96
ycp$ = 104
ycpw$ = 112
Y$ = 120
C$ = 128
xC_pw_one$ = 160
$T8 = 192
xC_YCC$ = 224
$T9 = 256
dst_y_pitch$ = 272
y_range$ = 296
$T10 = 328
x0$ = 352
x1$ = 384
x2$ = 432
x3$ = 464
$T11 = 480
$T12 = 496
$T13 = 512
$T14 = 528
$T15 = 544
$T16 = 560
$T17 = 576
$T18 = 592
$T19 = 608
$T20 = 624
$T21 = 640
$T22 = 656
$T23 = 672
$T24 = 688
$T25 = 704
$T26 = 720
$T27 = 736
$T28 = 752
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 840
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
$T40 = 960
$T41 = 976
$T42 = 992
$T43 = 1008
tv218 = 1024
tv265 = 1028
tv323 = 1032
__$ArrayPad$ = 1040
dst$ = 1088
src$ = 1096
width$ = 1104
src_y_pitch_byte$ = 1112
src_uv_pitch_byte$ = 1120
dst_y_pitch_byte$ = 1128
height$ = 1136
dst_height$ = 1144
thread_id$ = 1152
thread_n$ = 1160
crop$ = 1168
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_simd<0>

; 1633 : static __forceinline void convert_yc48_to_p010_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 28 04
	00 00		 sub	 rsp, 1064		; 00000428H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1088]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1634 :     int x, y, i;
; 1635 :     short *dst_Y = (short *)dst[0];

  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 44 24 50	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1636 :     short *dst_C = (short *)dst[1];

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00071	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00075	48 89 44 24 58	 mov	 QWORD PTR dst_C$[rsp], rax

; 1637 :     const void  *pixel = src[0];

  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0008b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0008f	48 89 44 24 60	 mov	 QWORD PTR pixel$[rsp], rax

; 1638 :     const short *ycp, *ycpw;
; 1639 :     short *Y = nullptr, *C = nullptr;

  00094	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR Y$[rsp], 0
  0009d	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1640 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000a9	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000b1	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  000ba	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  000c3	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1641 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000cc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000d4	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  000dd	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  000e6	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1642 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000ef	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000f6	d1 f8		 sar	 eax, 1
  000f8	89 84 24 10 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1643 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000ff	8b 84 24 88 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00106	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0010a	44 8b 8c 24 80
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00112	44 8b 84 24 70
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  0011a	33 d2		 xor	 edx, edx
  0011c	48 8d 8c 24 48
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00124	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00129	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  00131	48 8b f9	 mov	 rdi, rcx
  00134	48 8b f0	 mov	 rsi, rax
  00137	b9 0c 00 00 00	 mov	 ecx, 12
  0013c	f3 a4		 rep movsb
  0013e	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR y_range$[rsp]
  00146	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  0014e	48 8b f8	 mov	 rdi, rax
  00151	48 8b f1	 mov	 rsi, rcx
  00154	b9 0c 00 00 00	 mov	 ecx, 12
  00159	f3 a4		 rep movsb

; 1644 :     __m128i x0, x1, x2, x3;
; 1645 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0015b	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 04	 add	 eax, 4
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp+8]
  0017a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR y_range$[rsp]
  00181	03 c8		 add	 ecx, eax
  00183	8b c1		 mov	 eax, ecx
  00185	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00189	0f 8d d1 06 00
	00		 jge	 $LN3@convert_yc

; 1646 :         for (i = 0; i < 2; i++) {

  0018f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00197	eb 0a		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00199	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0019d	ff c0		 inc	 eax
  0019f	89 44 24 48	 mov	 DWORD PTR i$[rsp], eax
$LN7@convert_yc:
  001a3	83 7c 24 48 02	 cmp	 DWORD PTR i$[rsp], 2
  001a8	0f 8d ad 06 00
	00		 jge	 $LN6@convert_yc

; 1647 :             ycp = (short*)pixel + width * (y + i) * 3;

  001ae	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001b2	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001b6	03 c8		 add	 ecx, eax
  001b8	8b c1		 mov	 eax, ecx
  001ba	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c1	0f af c8	 imul	 ecx, eax
  001c4	8b c1		 mov	 eax, ecx
  001c6	6b c0 03	 imul	 eax, eax, 3
  001c9	48 98		 cdqe
  001cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixel$[rsp]
  001d0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001d4	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax

; 1648 :             ycpw= ycp + width*2*3;

  001d9	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  001e0	d1 e0		 shl	 eax, 1
  001e2	6b c0 03	 imul	 eax, eax, 3
  001e5	48 98		 cdqe
  001e7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ycp$[rsp]
  001ec	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f0	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax

; 1649 :             Y   = dst_Y + dst_y_pitch * (y + i);

  001f5	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001f9	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001fd	03 c8		 add	 ecx, eax
  001ff	8b c1		 mov	 eax, ecx
  00201	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00208	0f af c8	 imul	 ecx, eax
  0020b	8b c1		 mov	 eax, ecx
  0020d	48 98		 cdqe
  0020f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  00214	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00218	48 89 44 24 78	 mov	 QWORD PTR Y$[rsp], rax

; 1650 :             C   = dst_C + dst_y_pitch * (y + i*2) / 2;

  0021d	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  00221	8b 4c 24 48	 mov	 ecx, DWORD PTR i$[rsp]
  00225	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00228	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0022f	0f af c8	 imul	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	99		 cdq
  00235	2b c2		 sub	 eax, edx
  00237	d1 f8		 sar	 eax, 1
  00239	48 98		 cdqe
  0023b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00240	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00244	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1651 :             for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  0024c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  00254	eb 27		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  00256	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  0025a	83 c0 08	 add	 eax, 8
  0025d	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  00261	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00266	48 83 c0 30	 add	 rax, 48			; 00000030H
  0026a	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax
  0026f	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00274	48 83 c0 30	 add	 rax, 48			; 00000030H
  00278	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax
$LN10@convert_yc:
  0027d	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00284	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  00288	0f 8d c8 05 00
	00		 jge	 $LN9@convert_yc

; 1652 :                 x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  0028e	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  002a0	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  002a9	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1653 :                 x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  002b2	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002b7	48 83 c0 10	 add	 rax, 16
  002bb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002bf	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002c8	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002d1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1654 :                 x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002da	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002df	48 83 c0 20	 add	 rax, 32			; 00000020H
  002e3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002e7	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002f0	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002f9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1655 :                 _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  00302	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00307	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1656 :                 gather_y_uv_from_yc48(x1, x2, x3);

  0030a	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00313	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  0031c	4c 8d 84 24 60
	03 00 00	 lea	 r8, QWORD PTR $T34[rsp]
  00324	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0032c	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00334	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1657 :                 x0 = x2;

  00339	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00342	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1658 :                 _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0034b	33 c0		 xor	 eax, eax
  0034d	85 c0		 test	 eax, eax
  0034f	0f 84 87 00 00
	00		 je	 $LN12@convert_yc
  00355	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0035d	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00366	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0036f	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00378	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00380	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00385	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0038d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00393	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0039b	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  003a3	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003a8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  003b1	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  003b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  003bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003bf	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003c8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003cc	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
  003d7	e9 82 00 00 00	 jmp	 $LN13@convert_yc
$LN12@convert_yc:
  003dc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003e4	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003ed	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003f6	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  003ff	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00407	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040c	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00414	41 b8 04 00 00
	00		 mov	 r8d, 4
  0041a	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00422	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR $T36[rsp]
  0042a	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0042f	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  00438	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0043d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00442	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00446	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0044f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00453	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
$LN13@convert_yc:

; 1659 : 
; 1660 :                 x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  0045e	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00463	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00467	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00470	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00479	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1661 :                 x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  00482	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00487	48 83 c0 10	 add	 rax, 16
  0048b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0048f	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00498	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  004a1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1662 :                 x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  004aa	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  004af	48 83 c0 20	 add	 rax, 32			; 00000020H
  004b3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004b7	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004c0	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004c9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1663 :                 gather_y_uv_from_yc48(x1, x2, x3);

  004d2	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004db	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  004e4	4c 8d 84 24 90
	03 00 00	 lea	 r8, QWORD PTR $T37[rsp]
  004ec	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004f4	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004fc	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1664 :                 _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00501	33 c0		 xor	 eax, eax
  00503	85 c0		 test	 eax, eax
  00505	0f 84 97 00 00
	00		 je	 $LN14@convert_yc
  0050b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00513	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0051c	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00525	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  0052e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00536	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053b	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00543	41 b8 04 00 00
	00		 mov	 r8d, 4
  00549	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00551	48 8d 8c 24 a0
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  00559	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0055e	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00567	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0056c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00571	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00575	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0057c	d1 e1		 shl	 ecx, 1
  0057e	48 63 c9	 movsxd	 rcx, ecx
  00581	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00585	66 0f 6f 84 24
	90 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0058e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00592	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
  0059d	e9 92 00 00 00	 jmp	 $LN15@convert_yc
$LN14@convert_yc:
  005a2	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  005aa	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005b3	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005bc	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  005c5	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d2	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005da	41 b8 04 00 00
	00		 mov	 r8d, 4
  005e0	48 8d 94 24 a0
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005e8	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  005f0	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005f5	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005fe	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00603	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00608	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0060c	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00613	d1 e1		 shl	 ecx, 1
  00615	48 63 c9	 movsxd	 rcx, ecx
  00618	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0061c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00625	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00629	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN15@convert_yc:

; 1665 : 
; 1666 :                 _mm_store_switch_si128((__m128i *)(C + x), convert_uv_range_from_yc48_420i(x0, x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_420I(i), xC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, xC_YCC, xC_pw_one));

  00634	33 c0		 xor	 eax, eax
  00636	85 c0		 test	 eax, eax
  00638	0f 84 0c 01 00
	00		 je	 $LN16@convert_yc
  0063e	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00642	ff c0		 inc	 eax
  00644	83 e0 01	 and	 eax, 1
  00647	48 98		 cdqe
  00649	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00654	48 03 c8	 add	 rcx, rax
  00657	48 8b c1	 mov	 rax, rcx
  0065a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0065e	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00667	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  0066c	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00670	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00677	48 03 c8	 add	 rcx, rax
  0067a	48 8b c1	 mov	 rax, rcx
  0067d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00681	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0068a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00692	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  0069b	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  006a4	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  006ad	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006b6	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  006bf	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006c7	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  006cc	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  006d4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006d9	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  006e1	48 8d 84 24 e0
	02 00 00	 lea	 rax, QWORD PTR $T27[rsp]
  006e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ee	4c 8d 8c 24 d0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  006f6	4c 8d 84 24 c0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  006fe	48 8d 94 24 d0
	03 00 00	 lea	 rdx, QWORD PTR $T41[rsp]
  00706	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  0070e	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  00713	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0071c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00721	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00729	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0072d	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  00736	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0073a	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
  00745	e9 07 01 00 00	 jmp	 $LN17@convert_yc
$LN16@convert_yc:
  0074a	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0074e	ff c0		 inc	 eax
  00750	83 e0 01	 and	 eax, 1
  00753	48 98		 cdqe
  00755	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00759	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00760	48 03 c8	 add	 rcx, rax
  00763	48 8b c1	 mov	 rax, rcx
  00766	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0076a	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  00773	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00778	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0077c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00783	48 03 c8	 add	 rcx, rax
  00786	48 8b c1	 mov	 rax, rcx
  00789	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0078d	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00796	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0079e	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  007a7	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  007b0	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  007b9	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  007c2	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007cb	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  007d3	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  007d8	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  007e0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007e5	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  007ed	48 8d 84 24 20
	03 00 00	 lea	 rax, QWORD PTR $T31[rsp]
  007f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007fa	4c 8d 8c 24 10
	03 00 00	 lea	 r9, QWORD PTR $T30[rsp]
  00802	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  0080a	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR $T43[rsp]
  00812	48 8d 8c 24 e0
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  0081a	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  0081f	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  00828	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0082d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00835	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00839	66 0f 6f 84 24
	30 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T32[rsp]
  00842	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00846	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
$LN17@convert_yc:

; 1667 :             }

  00851	e9 00 fa ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1668 :         }

  00856	e9 3e f9 ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1669 :     }

  0085b	e9 08 f9 ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1670 : }

  00860	48 8b cc	 mov	 rcx, rsp
  00863	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0086a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0086f	48 8b 8c 24 10
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00877	48 33 cc	 xor	 rcx, rsp
  0087a	e8 00 00 00 00	 call	 __security_check_cookie
  0087f	48 81 c4 28 04
	00 00		 add	 rsp, 1064		; 00000428H
  00886	5f		 pop	 rdi
  00887	5e		 pop	 rsi
  00888	c3		 ret	 0
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_avx

; 84   : void convert_yc48_to_p010_i_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 85   :     convert_yc48_to_p010_i_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_simd<0>

; 86   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32r_to_rgb32_avx

; 80   : void convert_rgb32r_to_rgb32_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 81   :     convert_rgb32r_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32r_to_rgb32_simd

; 82   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb32r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32r_to_rgb32_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
;	COMDAT ??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T6 = 104
srcLine$ = 120
dstLine$ = 128
x_width$ = 136
y$7 = 140
MASK_BGR4_TO_RGB4$8 = 160
MASK_GBR4_TO_RGB4$9 = 208
mask$10 = 232
y$11 = 240
ptr_dst$12 = 248
ptr_src$13 = 256
x$14 = 264
src0$15 = 272
$T16 = 288
x0$17 = 304
$T18 = 320
$T19 = 336
x_offest$20 = 352
src0$21 = 368
$T22 = 384
x0$23 = 400
$T24 = 416
$T25 = 432
$T26 = 456
tv138 = 472
__$ArrayPad$ = 480
dst$ = 528
src$ = 536
width$ = 544
src_y_pitch_byte$ = 552
src_uv_pitch_byte$ = 560
dst_y_pitch_byte$ = 568
height$ = 576
dst_height$ = 584
thread_id$ = 592
thread_n$ = 600
crop$ = 608
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32_to_rgb32_simd<29>, COMDAT

; 829  : void convert_rgb32_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR [rsp+528]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 830  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 831  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 832  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 833  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 834  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 40 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 50
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 c8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 835  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 4;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  00130	c1 e1 02	 shl	 ecx, 2
  00133	48 63 c9	 movsxd	 rcx, ecx
  00136	48 03 c1	 add	 rax, rcx
  00139	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 836  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013e	b8 08 00 00 00	 mov	 eax, 8
  00143	48 6b c0 00	 imul	 rax, rax, 0
  00147	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014e	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 837  :     const int x_width = width - crop_right - crop_left;

  0016d	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00171	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00178	2b c8		 sub	 ecx, eax
  0017a	8b c1		 mov	 eax, ecx
  0017c	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00180	89 84 24 88 00
	00 00		 mov	 DWORD PTR x_width$[rsp], eax

; 838  :     if (csp_from == RGY_CSP_RGB24) {

  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	0f 84 86 00 00
	00		 je	 $LN13@convert_rg

; 839  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00191	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  0019c	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0019e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  001a5	ff c0		 inc	 eax
  001a7	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  001ae	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001be	48 03 c8	 add	 rcx, rax
  001c1	48 8b c1	 mov	 rax, rcx
  001c4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001cc	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001d4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001d9	48 03 c8	 add	 rcx, rax
  001dc	48 8b c1	 mov	 rax, rcx
  001df	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001e4	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001e8	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  001ef	7d 21		 jge	 SHORT $LN3@convert_rg

; 840  :         memcpy_sse(dstLine, srcLine, x_width * 4);

  001f1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  001f8	c1 e0 02	 shl	 eax, 2
  001fb	44 8b c0	 mov	 r8d, eax
  001fe	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  00203	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  0020b	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 841  :     }

  00210	eb 8c		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 842  :     } else {

  00212	e9 89 03 00 00	 jmp	 $LN14@convert_rg
$LN13@convert_rg:

; 843  : #if USE_SSSE3
; 844  :         static_assert(csp_from == RGY_CSP_BGR32 || csp_from == RGY_CSP_RGB32, "invalid csp");
; 845  :         alignas(16) const char MASK_BGR4_TO_RGB4[] = { 2, 1, 0, 3, 6, 5, 4, 7, 10, 9, 8, 11, 14, 13, 12, 15 };

  00217	c6 84 24 a0 00
	00 00 02	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp], 2
  0021f	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+1], 1
  00227	c6 84 24 a2 00
	00 00 00	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+2], 0
  0022f	c6 84 24 a3 00
	00 00 03	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+3], 3
  00237	c6 84 24 a4 00
	00 00 06	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+4], 6
  0023f	c6 84 24 a5 00
	00 00 05	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+5], 5
  00247	c6 84 24 a6 00
	00 00 04	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+6], 4
  0024f	c6 84 24 a7 00
	00 00 07	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+7], 7
  00257	c6 84 24 a8 00
	00 00 0a	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+8], 10
  0025f	c6 84 24 a9 00
	00 00 09	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+9], 9
  00267	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+10], 8
  0026f	c6 84 24 ab 00
	00 00 0b	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+11], 11
  00277	c6 84 24 ac 00
	00 00 0e	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+12], 14
  0027f	c6 84 24 ad 00
	00 00 0d	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+13], 13
  00287	c6 84 24 ae 00
	00 00 0c	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+14], 12
  0028f	c6 84 24 af 00
	00 00 0f	 mov	 BYTE PTR MASK_BGR4_TO_RGB4$8[rsp+15], 15

; 846  :         alignas(16) const char MASK_GBR4_TO_RGB4[] = { 2, 0, 1, 3, 6, 4, 5, 7, 10, 8, 9, 11, 14, 12, 13, 15 };

  00297	c6 84 24 d0 00
	00 00 02	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp], 2
  0029f	c6 84 24 d1 00
	00 00 00	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+1], 0
  002a7	c6 84 24 d2 00
	00 00 01	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+2], 1
  002af	c6 84 24 d3 00
	00 00 03	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+3], 3
  002b7	c6 84 24 d4 00
	00 00 06	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+4], 6
  002bf	c6 84 24 d5 00
	00 00 04	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+5], 4
  002c7	c6 84 24 d6 00
	00 00 05	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+6], 5
  002cf	c6 84 24 d7 00
	00 00 07	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+7], 7
  002d7	c6 84 24 d8 00
	00 00 0a	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+8], 10
  002df	c6 84 24 d9 00
	00 00 08	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+9], 8
  002e7	c6 84 24 da 00
	00 00 09	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+10], 9
  002ef	c6 84 24 db 00
	00 00 0b	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+11], 11
  002f7	c6 84 24 dc 00
	00 00 0e	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+12], 14
  002ff	c6 84 24 dd 00
	00 00 0c	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+13], 12
  00307	c6 84 24 de 00
	00 00 0d	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+14], 13
  0030f	c6 84 24 df 00
	00 00 0f	 mov	 BYTE PTR MASK_GBR4_TO_RGB4$9[rsp+15], 15

; 847  :         const char *mask = nullptr;

  00317	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mask$10[rsp], 0

; 848  :         switch (csp_from) {

  00323	c7 84 24 d8 01
	00 00 1d 00 00
	00		 mov	 DWORD PTR tv138[rsp], 29

; 849  :         //case RGY_CSP_GBR32: mask = MASK_GBR4_TO_RGB4; break;
; 850  :         case RGY_CSP_BGR32:
; 851  :         default:            mask = MASK_BGR4_TO_RGB4; break;

  0032e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR MASK_BGR4_TO_RGB4$8[rsp]
  00336	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR mask$10[rsp], rax

; 852  :         }
; 853  :         for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  0033e	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$11[rsp], 0
  00349	eb 46		 jmp	 SHORT $LN9@convert_rg
$LN7@convert_rg:
  0034b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR y$11[rsp]
  00352	ff c0		 inc	 eax
  00354	89 84 24 f0 00
	00 00		 mov	 DWORD PTR y$11[rsp], eax
  0035b	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00363	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  0036b	48 03 c8	 add	 rcx, rax
  0036e	48 8b c1	 mov	 rax, rcx
  00371	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  00379	48 63 84 24 28
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00381	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00386	48 03 c8	 add	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN9@convert_rg:
  00391	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00395	39 84 24 f0 00
	00 00		 cmp	 DWORD PTR y$11[rsp], eax
  0039c	0f 8d fe 01 00
	00		 jge	 $LN8@convert_rg

; 854  :             uint8_t *ptr_dst = dstLine;

  003a2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  003aa	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax

; 855  :             uint8_t *ptr_src = srcLine;

  003b2	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  003b7	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax

; 856  :             for (int x = 0; x < x_width - 4; x += 4, ptr_dst += 16, ptr_src += 16) {

  003bf	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$14[rsp], 0
  003ca	eb 39		 jmp	 SHORT $LN12@convert_rg
$LN10@convert_rg:
  003cc	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR x$14[rsp]
  003d3	83 c0 04	 add	 eax, 4
  003d6	89 84 24 08 01
	00 00		 mov	 DWORD PTR x$14[rsp], eax
  003dd	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  003e5	48 83 c0 10	 add	 rax, 16
  003e9	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax
  003f1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  003f9	48 83 c0 10	 add	 rax, 16
  003fd	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax
$LN12@convert_rg:
  00405	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  0040c	83 e8 04	 sub	 eax, 4
  0040f	39 84 24 08 01
	00 00		 cmp	 DWORD PTR x$14[rsp], eax
  00416	0f 8d 84 00 00
	00		 jge	 $LN11@convert_rg

; 857  :                 __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0041c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  00424	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00428	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00431	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  0043a	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR src0$15[rsp], xmm0

; 858  :                 __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00443	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  0044b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0044f	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00458	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$15[rsp]
  00461	66 0f 38 00 84
	24 40 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T18[rsp]
  0046b	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00474	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0047d	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 859  :                 _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00486	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  0048e	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  00497	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 860  :             }

  0049b	e9 2c ff ff ff	 jmp	 $LN10@convert_rg
$LN11@convert_rg:

; 861  :             if (x_width % 4) {

  004a0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  004a7	99		 cdq
  004a8	83 e2 03	 and	 edx, 3
  004ab	03 c2		 add	 eax, edx
  004ad	83 e0 03	 and	 eax, 3
  004b0	2b c2		 sub	 eax, edx
  004b2	85 c0		 test	 eax, eax
  004b4	74 66		 je	 SHORT $LN16@convert_rg

; 862  :                 int x_offest = 4 - (x_width % 4);

  004b6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR x_width$[rsp]
  004bd	99		 cdq
  004be	83 e2 03	 and	 edx, 3
  004c1	03 c2		 add	 eax, edx
  004c3	83 e0 03	 and	 eax, 3
  004c6	2b c2		 sub	 eax, edx
  004c8	b9 04 00 00 00	 mov	 ecx, 4
  004cd	2b c8		 sub	 ecx, eax
  004cf	8b c1		 mov	 eax, ecx
  004d1	89 84 24 60 01
	00 00		 mov	 DWORD PTR x_offest$20[rsp], eax

; 863  :                 ptr_dst -= x_offest * 4;

  004d8	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR x_offest$20[rsp]
  004df	c1 e0 02	 shl	 eax, 2
  004e2	48 98		 cdqe
  004e4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$12[rsp]
  004ec	48 2b c8	 sub	 rcx, rax
  004ef	48 8b c1	 mov	 rax, rcx
  004f2	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ptr_dst$12[rsp], rax

; 864  :                 ptr_src -= x_offest * 4;

  004fa	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR x_offest$20[rsp]
  00501	c1 e0 02	 shl	 eax, 2
  00504	48 98		 cdqe
  00506	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR ptr_src$13[rsp]
  0050e	48 2b c8	 sub	 rcx, rax
  00511	48 8b c1	 mov	 rax, rcx
  00514	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR ptr_src$13[rsp], rax
$LN16@convert_rg:

; 865  :             }
; 866  :             __m128i src0 = _mm_loadu_si128((const __m128i *)(ptr_src +  0));

  0051c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR ptr_src$13[rsp]
  00524	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00528	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00531	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0053a	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR src0$21[rsp], xmm0

; 867  :             __m128i x0 = _mm_shuffle_epi8(src0, _mm_load_si128((__m128i *)(mask +  0)));

  00543	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  0054b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0054f	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00558	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR src0$21[rsp]
  00561	66 0f 38 00 84
	24 a0 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T24[rsp]
  0056b	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00574	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  0057d	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR x0$23[rsp], xmm0

; 868  :             _mm_storeu_si128((__m128i *)(ptr_dst +  0), x0);

  00586	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$12[rsp]
  0058e	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$23[rsp]
  00597	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 869  :         }

  0059b	e9 ab fd ff ff	 jmp	 $LN7@convert_rg
$LN8@convert_rg:
$LN14@convert_rg:

; 870  : #else
; 871  :         static_assert(csp_from == RGY_CSP_RGB32, "invalid csp");
; 872  : #endif
; 873  :     }
; 874  : }

  005a0	48 8b cc	 mov	 rcx, rsp
  005a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005aa	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005af	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005b7	48 33 cc	 xor	 rcx, rsp
  005ba	e8 00 00 00 00	 call	 __security_check_cookie
  005bf	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  005c6	5f		 pop	 rdi
  005c7	5e		 pop	 rsi
  005c8	c3		 ret	 0
??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32_to_rgb32_simd<29>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32_to_rgb32_avx

; 76   : void convert_rgb32_to_rgb32_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 77   :     convert_rgb32_to_rgb32_simd<RGY_CSP_RGB32>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_rgb32_to_rgb32_simd@$0BN@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_simd<29>

; 78   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb32_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32_to_rgb32_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
y_range$ = 88
$T8 = 120
dst_Y$ = 136
dst_C$ = 144
pixel$ = 152
ycp$ = 160
ycpw$ = 168
Y$ = 176
C$ = 184
xC_pw_one$ = 208
$T9 = 240
xC_YCC$ = 272
$T10 = 304
dst_y_pitch$ = 320
x0$ = 336
x1$ = 368
x2$ = 416
x3$ = 448
$T11 = 464
$T12 = 480
$T13 = 496
$T14 = 512
$T15 = 528
$T16 = 544
$T17 = 560
$T18 = 576
$T19 = 592
$T20 = 608
$T21 = 624
$T22 = 640
$T23 = 656
$T24 = 672
$T25 = 688
$T26 = 704
$T27 = 720
$T28 = 744
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 832
$T34 = 848
$T35 = 864
$T36 = 880
tv211 = 896
tv256 = 900
tv280 = 904
__$ArrayPad$ = 912
dst$ = 960
src$ = 968
width$ = 976
src_y_pitch_byte$ = 984
src_uv_pitch_byte$ = 992
dst_y_pitch_byte$ = 1000
height$ = 1008
dst_height$ = 1016
thread_id$ = 1024
thread_n$ = 1032
crop$ = 1040
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_simd<0>

; 1591 : static __forceinline void convert_yc48_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 03
	00 00		 sub	 rsp, 936		; 000003a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 ea 00 00 00	 mov	 ecx, 234		; 000000eaH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+960]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1592 :     int x, y;
; 1593 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 08 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 00
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 f0
	03 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1594 :     short *dst_Y = (short *)dst[0];

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000aa	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000ae	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1595 :     short *dst_C = (short *)dst[1];

  000b6	b8 08 00 00 00	 mov	 eax, 8
  000bb	48 6b c0 01	 imul	 rax, rax, 1
  000bf	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000c7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000cb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_C$[rsp], rax

; 1596 :     const void  *pixel = src[0];

  000d3	b8 08 00 00 00	 mov	 eax, 8
  000d8	48 6b c0 00	 imul	 rax, rax, 0
  000dc	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  000e4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1597 :     const short *ycp, *ycpw;
; 1598 :     short *Y = NULL, *C = NULL;

  000f0	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR Y$[rsp], 0
  000fc	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1599 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  00108	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00110	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00119	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00122	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1600 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0012b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00133	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0013c	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00145	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1601 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  0014e	8b 84 24 e8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  00155	d1 f8		 sar	 eax, 1
  00157	89 84 24 40 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1602 :     __m128i x0, x1, x2, x3;
; 1603 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  0015e	8b 44 24 58	 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 02	 add	 eax, 2
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00177	8b 4c 24 58	 mov	 ecx, DWORD PTR y_range$[rsp]
  0017b	03 c8		 add	 ecx, eax
  0017d	8b c1		 mov	 eax, ecx
  0017f	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00183	0f 8d a5 05 00
	00		 jge	 $LN3@convert_yc

; 1604 :         ycp = (short*)pixel + width * y * 3;

  00189	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00190	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  00195	6b c0 03	 imul	 eax, eax, 3
  00198	48 98		 cdqe
  0019a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax

; 1605 :         ycpw= ycp + width*3;

  001ae	6b 84 24 d0 03
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  001b6	48 98		 cdqe
  001b8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ycp$[rsp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax

; 1606 :         Y   = dst_Y + dst_y_pitch * y;

  001cc	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001d3	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001d8	48 98		 cdqe
  001da	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  001e2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR Y$[rsp], rax

; 1607 :         C   = dst_C + dst_y_pitch * y / 2;

  001ee	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001f5	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001fa	99		 cdq
  001fb	2b c2		 sub	 eax, edx
  001fd	d1 f8		 sar	 eax, 1
  001ff	48 98		 cdqe
  00201	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00209	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0020d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1608 :         for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  00215	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  0021d	eb 33		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0021f	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  00223	83 c0 08	 add	 eax, 8
  00226	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  0022a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00232	48 83 c0 30	 add	 rax, 48			; 00000030H
  00236	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax
  0023e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00246	48 83 c0 30	 add	 rax, 48			; 00000030H
  0024a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax
$LN7@convert_yc:
  00252	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00259	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  0025d	0f 8d c6 04 00
	00		 jge	 $LN6@convert_yc

; 1609 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  00263	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  0026b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0026f	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00278	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00281	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1610 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0028a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00292	48 83 c0 10	 add	 rax, 16
  00296	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0029a	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002a3	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002ac	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1611 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002b5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  002bd	48 83 c0 20	 add	 rax, 32			; 00000020H
  002c1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002c5	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002ce	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002d7	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1612 :             _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  002e0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  002e8	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1613 :             gather_y_uv_from_yc48(x1, x2, x3);

  002eb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  002f4	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  002fd	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  00305	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0030d	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00315	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1614 :             x0 = x2;

  0031a	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00323	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1615 : 
; 1616 :             _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0032c	33 c0		 xor	 eax, eax
  0032e	85 c0		 test	 eax, eax
  00330	0f 84 8a 00 00
	00		 je	 $LN9@convert_yc
  00336	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0033e	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00347	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00350	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00359	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00361	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00366	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0036e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00374	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0037c	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  00384	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00389	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00392	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00397	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  0039f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003a3	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003ac	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003b0	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
  003bb	e9 85 00 00 00	 jmp	 $LN10@convert_yc
$LN9@convert_yc:
  003c0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003c8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003d1	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003da	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  003e3	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f0	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  003fe	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00406	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  0040e	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00413	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0041c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00421	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00429	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0042d	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00436	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0043a	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
$LN10@convert_yc:

; 1617 : 
; 1618 :             x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  00445	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0044d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00451	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  0045a	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00463	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1619 :             x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  0046c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00474	48 83 c0 10	 add	 rax, 16
  00478	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0047c	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00485	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0048e	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1620 :             x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  00497	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0049f	48 83 c0 20	 add	 rax, 32			; 00000020H
  004a3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004a7	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004b0	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004b9	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1621 :             gather_y_uv_from_yc48(x1, x2, x3);

  004c2	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004cb	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  004d4	4c 8d 84 24 30
	03 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  004dc	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004e4	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004ec	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1622 : 
; 1623 :             _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  004f1	33 c0		 xor	 eax, eax
  004f3	85 c0		 test	 eax, eax
  004f5	0f 84 96 00 00
	00		 je	 $LN11@convert_yc
  004fb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00503	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0050c	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00515	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  0051e	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00526	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052b	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00533	41 b8 04 00 00
	00		 mov	 r8d, 4
  00539	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00541	48 8d 8c 24 40
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00549	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0054e	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00557	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0055c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00564	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00568	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00570	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00574	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0057d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00581	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  0058c	e9 91 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00591	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00599	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005a2	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005ab	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  005b4	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005c9	41 b8 04 00 00
	00		 mov	 r8d, 4
  005cf	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005d7	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  005df	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005e4	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005ed	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  005f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  005fa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  005fe	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00606	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0060a	66 0f 6f 84 24
	a0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00613	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00617	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN12@convert_yc:

; 1624 : 
; 1625 :             x0 = convert_uv_range_from_yc48_yuv420p(x0, x2, _mm_set1_epi16(UV_OFFSET_x2), xC_UV_L_MA_16_420P, UV_L_RSH_16_420P, xC_YCC, xC_pw_one);

  00622	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  0062a	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00633	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@10001000100010001000100010001000
  0063b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00644	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  0064d	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00656	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  0065f	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00668	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00670	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00675	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  0067d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00682	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0068a	4c 8d 8c 24 c0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  00692	4c 8d 84 24 b0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  0069a	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR $T36[rsp]
  006a2	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  006aa	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ; convert_uv_range_from_yc48_yuv420p
  006af	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  006b8	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  006c1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1626 : 
; 1627 :             _mm_store_switch_si128((__m128i *)(C + x), x0);

  006ca	33 c0		 xor	 eax, eax
  006cc	85 c0		 test	 eax, eax
  006ce	74 2b		 je	 SHORT $LN13@convert_yc
  006d0	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  006d5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  006dd	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  006e1	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006ea	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  006ee	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
  006f9	eb 29		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  006fb	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00700	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00708	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0070c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00715	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00719	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
$LN14@convert_yc:

; 1628 :         }

  00724	e9 f6 fa ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1629 :     }

  00729	e9 3a fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1630 : }

  0072e	48 8b cc	 mov	 rcx, rsp
  00731	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00738	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0073d	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00745	48 33 cc	 xor	 rcx, rsp
  00748	e8 00 00 00 00	 call	 __security_check_cookie
  0074d	48 81 c4 a8 03
	00 00		 add	 rsp, 936		; 000003a8H
  00754	5f		 pop	 rdi
  00755	5e		 pop	 rsi
  00756	c3		 ret	 0
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_avx

; 72   : void convert_yc48_to_p010_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 73   :     convert_yc48_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_simd<0>

; 74   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb32_avx

; 68   : void convert_rgb24r_to_rgb32_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 69   :     convert_rgb24r_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb32_simd

; 70   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24r_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb32_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb32_avx

; 64   : void convert_rgb24_to_rgb32_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 65   :     convert_rgb24_to_rgb32_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb32_simd

; 66   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_rgb24_to_rgb32_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb32_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$5 = 72
$T6 = 104
srcYLine$7 = 120
dstLine$8 = 128
y_width$9 = 136
y$10 = 140
dst_ptr$11 = 144
src_ptr$12 = 152
src_ptr_fin$13 = 160
x0$14 = 176
x1$15 = 192
$T16 = 208
$T17 = 224
$T18 = 240
$T19 = 256
$T20 = 272
$T21 = 288
$T22 = 304
$T23 = 320
$T24 = 336
uv_range$ = 360
$T25 = 392
srcULine$ = 408
srcVLine$ = 416
dstLine$ = 424
y$26 = 432
x_fin$27 = 436
src_u_ptr$28 = 440
src_v_ptr$29 = 448
dst_ptr$30 = 456
dst_ptr_fin$31 = 464
x0$32 = 480
x1$33 = 496
x2$34 = 512
x3$35 = 528
$T36 = 544
$T37 = 560
$T38 = 576
$T39 = 592
$T40 = 608
$T41 = 624
$T42 = 640
$T43 = 656
$T44 = 672
$T45 = 688
$T46 = 704
$T47 = 720
$T48 = 736
$T49 = 752
$T50 = 768
$T51 = 784
$T52 = 800
$T53 = 816
$T54 = 832
$T55 = 848
$T56 = 872
$T57 = 888
__$ArrayPad$ = 904
dst$ = 944
src$ = 952
width$ = 960
src_y_pitch_byte$ = 968
src_uv_pitch_byte$ = 976
dst_y_pitch_byte$ = 984
height$ = 992
dst_height$ = 1000
thread_id$ = 1008
thread_n$ = 1016
crop$ = 1024
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010_simd<0>

; 908  : static void convert_yv12_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 98 03
	00 00		 sub	 rsp, 920		; 00000398H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 e6 00 00 00	 mov	 ecx, 230		; 000000e6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+944]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 909  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 910  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 911  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 912  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 913  :     //Y成分のコピー
; 914  :     if (!uv_only) {

  000a6	33 c0		 xor	 eax, eax
  000a8	83 f8 01	 cmp	 eax, 1
  000ab	0f 84 0a 03 00
	00		 je	 $LN14@convert_yv

; 915  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000b5	8b 8c 24 e0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000bc	2b c8		 sub	 ecx, eax
  000be	8b c1		 mov	 eax, ecx
  000c0	8b 8c 24 f8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cb	44 8b 8c 24 f0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d3	44 8b c0	 mov	 r8d, eax
  000d6	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000da	48 8d 8c 24 68
	03 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  000e2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e7	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 0c 00 00 00	 mov	 ecx, 12
  000f7	f3 a4		 rep movsb
  000f9	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$5[rsp]
  000fe	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 916  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 00	 imul	 rax, rax, 0
  00119	8b 8c 24 c8 03
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00120	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$5[rsp]
  00125	48 63 c9	 movsxd	 rcx, ecx
  00128	48 8b 94 24 b8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00130	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00134	48 03 c1	 add	 rax, rcx
  00137	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0013c	48 03 c1	 add	 rax, rcx
  0013f	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 917  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00144	b8 08 00 00 00	 mov	 eax, 8
  00149	48 6b c0 00	 imul	 rax, rax, 0
  0014d	8b 8c 24 d8 03
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00154	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00159	48 63 c9	 movsxd	 rcx, ecx
  0015c	48 8b 94 24 b0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00164	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00168	48 8b c1	 mov	 rax, rcx
  0016b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 918  :         const int y_width = width - crop_right - crop_left;

  00173	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00177	8b 8c 24 c0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00186	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 919  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00198	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001a1	ff c0		 inc	 eax
  001a3	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001aa	48 63 84 24 c8
	03 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001b7	48 03 c8	 add	 rcx, rax
  001ba	48 8b c1	 mov	 rax, rcx
  001bd	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001c2	48 63 84 24 d8
	03 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ca	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001d2	48 03 c8	 add	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN4@convert_yv:
  001e0	8b 44 24 50	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  001e4	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  001eb	0f 8d ca 01 00
	00		 jge	 $LN3@convert_yv

; 920  :             uint16_t *dst_ptr = (uint16_t *)dstLine;

  001f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$8[rsp]
  001f9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_ptr$11[rsp], rax

; 921  :             uint8_t *src_ptr = srcYLine;

  00201	48 8b 44 24 78	 mov	 rax, QWORD PTR srcYLine$7[rsp]
  00206	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR src_ptr$12[rsp], rax

; 922  :             uint8_t *src_ptr_fin = src_ptr + y_width;

  0020e	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR y_width$9[rsp]
  00216	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR src_ptr$12[rsp]
  0021e	48 03 c8	 add	 rcx, rax
  00221	48 8b c1	 mov	 rax, rcx
  00224	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR src_ptr_fin$13[rsp], rax

; 923  :             __m128i x0, x1;
; 924  :             for (; src_ptr < src_ptr_fin; dst_ptr += 16, src_ptr += 16) {

  0022c	eb 28		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0022e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$11[rsp]
  00236	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_ptr$11[rsp], rax
  00242	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR src_ptr$12[rsp]
  0024a	48 83 c0 10	 add	 rax, 16
  0024e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR src_ptr$12[rsp], rax
$LN7@convert_yv:
  00256	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR src_ptr_fin$13[rsp]
  0025e	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR src_ptr$12[rsp], rax
  00266	0f 83 4a 01 00
	00		 jae	 $LN6@convert_yv

; 925  :                 x1 = _mm_loadu_si128((const __m128i *)src_ptr);

  0026c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR src_ptr$12[rsp]
  00274	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00278	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00281	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  0028a	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x1$15[rsp], xmm0

; 926  :                 x0 = _mm_unpacklo_epi8(_mm_setzero_si128(), x1);

  00293	66 0f ef c0	 pxor	 xmm0, xmm0
  00297	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  002a0	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  002a9	66 0f 60 84 24
	c0 00 00 00	 punpcklbw xmm0, XMMWORD PTR x1$15[rsp]
  002b2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002bb	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  002c4	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR x0$14[rsp], xmm0

; 927  :                 x1 = _mm_unpackhi_epi8(_mm_setzero_si128(), x1);

  002cd	66 0f ef c0	 pxor	 xmm0, xmm0
  002d1	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  002da	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  002e3	66 0f 68 84 24
	c0 00 00 00	 punpckhbw xmm0, XMMWORD PTR x1$15[rsp]
  002ec	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  002f5	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  002fe	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x1$15[rsp], xmm0

; 928  :                 x0 = _mm_add_epi16(x0, _mm_set1_epi16(2 << 6));

  00307	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  0030f	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00318	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$14[rsp]
  00321	66 0f fd 84 24
	20 01 00 00	 paddw	 xmm0, XMMWORD PTR $T21[rsp]
  0032a	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00333	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0033c	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR x0$14[rsp], xmm0

; 929  :                 x1 = _mm_add_epi16(x1, _mm_set1_epi16(2 << 6));

  00345	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  0034d	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00356	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$15[rsp]
  0035f	66 0f fd 84 24
	40 01 00 00	 paddw	 xmm0, XMMWORD PTR $T23[rsp]
  00368	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00371	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  0037a	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x1$15[rsp], xmm0

; 930  :                 _mm_storeu_si128((__m128i *)(dst_ptr + 0), x0);

  00383	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$11[rsp]
  0038b	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$14[rsp]
  00394	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 931  :                 _mm_storeu_si128((__m128i *)(dst_ptr + 8), x1);

  00398	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$11[rsp]
  003a0	48 83 c0 10	 add	 rax, 16
  003a4	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$15[rsp]
  003ad	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 932  :             }

  003b1	e9 78 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 933  :         }

  003b6	e9 df fd ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 934  :     }
; 935  :     //UV成分のコピー
; 936  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  003bb	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  003bf	8b 8c 24 e0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  003c6	2b c8		 sub	 ecx, eax
  003c8	8b c1		 mov	 eax, ecx
  003ca	d1 f8		 sar	 eax, 1
  003cc	8b 4c 24 34	 mov	 ecx, DWORD PTR crop_up$[rsp]
  003d0	d1 f9		 sar	 ecx, 1
  003d2	8b 94 24 f8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  003d9	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  003dd	44 8b 8c 24 f0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  003e5	44 8b c0	 mov	 r8d, eax
  003e8	8b d1		 mov	 edx, ecx
  003ea	48 8d 8c 24 78
	03 00 00	 lea	 rcx, QWORD PTR $T57[rsp]
  003f2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  003f7	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  003ff	48 8b f9	 mov	 rdi, rcx
  00402	48 8b f0	 mov	 rsi, rax
  00405	b9 0c 00 00 00	 mov	 ecx, 12
  0040a	f3 a4		 rep movsb
  0040c	48 8d 84 24 68
	01 00 00	 lea	 rax, QWORD PTR uv_range$[rsp]
  00414	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  0041c	48 8b f8	 mov	 rdi, rax
  0041f	48 8b f1	 mov	 rsi, rcx
  00422	b9 0c 00 00 00	 mov	 ecx, 12
  00427	f3 a4		 rep movsb

; 937  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00429	b8 08 00 00 00	 mov	 eax, 8
  0042e	48 6b c0 01	 imul	 rax, rax, 1
  00432	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00439	0f af 8c 24 68
	01 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  00441	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  00445	d1 fa		 sar	 edx, 1
  00447	03 ca		 add	 ecx, edx
  00449	48 63 c9	 movsxd	 rcx, ecx
  0044c	48 8b 94 24 b8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00454	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00458	48 8b c1	 mov	 rax, rcx
  0045b	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 938  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00463	b8 08 00 00 00	 mov	 eax, 8
  00468	48 6b c0 02	 imul	 rax, rax, 2
  0046c	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00473	0f af 8c 24 68
	01 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  0047b	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  0047f	d1 fa		 sar	 edx, 1
  00481	03 ca		 add	 ecx, edx
  00483	48 63 c9	 movsxd	 rcx, ecx
  00486	48 8b 94 24 b8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0048e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00492	48 8b c1	 mov	 rax, rcx
  00495	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 939  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0049d	b8 08 00 00 00	 mov	 eax, 8
  004a2	48 6b c0 01	 imul	 rax, rax, 1
  004a6	8b 8c 24 d8 03
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  004ad	0f af 8c 24 6c
	01 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp+4]
  004b5	48 63 c9	 movsxd	 rcx, ecx
  004b8	48 8b 94 24 b0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  004c0	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  004c4	48 8b c1	 mov	 rax, rcx
  004c7	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 940  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  004cf	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$26[rsp], 0
  004da	eb 6a		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  004dc	8b 84 24 b0 01
	00 00		 mov	 eax, DWORD PTR y$26[rsp]
  004e3	ff c0		 inc	 eax
  004e5	89 84 24 b0 01
	00 00		 mov	 DWORD PTR y$26[rsp], eax
  004ec	48 63 84 24 d0
	03 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  004f4	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  004fc	48 03 c8	 add	 rcx, rax
  004ff	48 8b c1	 mov	 rax, rcx
  00502	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  0050a	48 63 84 24 d0
	03 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00512	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  0051a	48 03 c8	 add	 rcx, rax
  0051d	48 8b c1	 mov	 rax, rcx
  00520	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00528	48 63 84 24 d8
	03 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00530	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00538	48 03 c8	 add	 rcx, rax
  0053b	48 8b c1	 mov	 rax, rcx
  0053e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN10@convert_yv:
  00546	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR uv_range$[rsp+8]
  0054d	39 84 24 b0 01
	00 00		 cmp	 DWORD PTR y$26[rsp], eax
  00554	0f 8d a8 03 00
	00		 jge	 $LN9@convert_yv

; 941  :         const int x_fin = width - crop_right;

  0055a	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0055e	8b 8c 24 c0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00565	2b c8		 sub	 ecx, eax
  00567	8b c1		 mov	 eax, ecx
  00569	89 84 24 b4 01
	00 00		 mov	 DWORD PTR x_fin$27[rsp], eax

; 942  :         uint8_t *src_u_ptr = srcULine;

  00570	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  00578	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR src_u_ptr$28[rsp], rax

; 943  :         uint8_t *src_v_ptr = srcVLine;

  00580	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  00588	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR src_v_ptr$29[rsp], rax

; 944  :         uint16_t *dst_ptr = (uint16_t *)dstLine;

  00590	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00598	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR dst_ptr$30[rsp], rax

; 945  :         uint16_t *dst_ptr_fin = dst_ptr + x_fin;

  005a0	48 63 84 24 b4
	01 00 00	 movsxd	 rax, DWORD PTR x_fin$27[rsp]
  005a8	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR dst_ptr$30[rsp]
  005b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  005b4	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR dst_ptr_fin$31[rsp], rax

; 946  :         __m128i x0, x1, x2, x3;
; 947  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  005bc	eb 3c		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  005be	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR src_u_ptr$28[rsp]
  005c6	48 83 c0 10	 add	 rax, 16
  005ca	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR src_u_ptr$28[rsp], rax
  005d2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR src_v_ptr$29[rsp]
  005da	48 83 c0 10	 add	 rax, 16
  005de	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR src_v_ptr$29[rsp], rax
  005e6	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$30[rsp]
  005ee	48 83 c0 40	 add	 rax, 64			; 00000040H
  005f2	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR dst_ptr$30[rsp], rax
$LN13@convert_yv:
  005fa	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dst_ptr_fin$31[rsp]
  00602	48 39 84 24 c8
	01 00 00	 cmp	 QWORD PTR dst_ptr$30[rsp], rax
  0060a	0f 83 ed 02 00
	00		 jae	 $LN12@convert_yv

; 948  :             x0 = _mm_loadu_si128((const __m128i *)src_u_ptr);

  00610	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR src_u_ptr$28[rsp]
  00618	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0061c	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00625	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  0062e	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$32[rsp], xmm0

; 949  :             x2 = _mm_loadu_si128((const __m128i *)src_v_ptr);

  00637	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR src_v_ptr$29[rsp]
  0063f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00643	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  0064c	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T37[rsp]
  00655	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x2$34[rsp], xmm0

; 950  :             x1 = _mm_unpacklo_epi8(x0, x2);

  0065e	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$32[rsp]
  00667	66 0f 60 84 24
	00 02 00 00	 punpcklbw xmm0, XMMWORD PTR x2$34[rsp]
  00670	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  00679	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T38[rsp]
  00682	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR x1$33[rsp], xmm0

; 951  :             x3 = _mm_unpackhi_epi8(x0, x2);

  0068b	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$32[rsp]
  00694	66 0f 68 84 24
	00 02 00 00	 punpckhbw xmm0, XMMWORD PTR x2$34[rsp]
  0069d	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  006a6	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T39[rsp]
  006af	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR x3$35[rsp], xmm0

; 952  : 
; 953  :             x0 = _mm_unpacklo_epi8(_mm_setzero_si128(), x1);

  006b8	66 0f ef c0	 pxor	 xmm0, xmm0
  006bc	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  006c5	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T40[rsp]
  006ce	66 0f 60 84 24
	f0 01 00 00	 punpcklbw xmm0, XMMWORD PTR x1$33[rsp]
  006d7	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  006e0	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T41[rsp]
  006e9	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$32[rsp], xmm0

; 954  :             x1 = _mm_unpackhi_epi8(_mm_setzero_si128(), x1);

  006f2	66 0f ef c0	 pxor	 xmm0, xmm0
  006f6	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  006ff	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T42[rsp]
  00708	66 0f 68 84 24
	f0 01 00 00	 punpckhbw xmm0, XMMWORD PTR x1$33[rsp]
  00711	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  0071a	66 0f 6f 84 24
	90 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  00723	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR x1$33[rsp], xmm0

; 955  :             x0 = _mm_add_epi16(x0, _mm_set1_epi16(2 << 6));

  0072c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  00734	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  0073d	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$32[rsp]
  00746	66 0f fd 84 24
	a0 02 00 00	 paddw	 xmm0, XMMWORD PTR $T44[rsp]
  0074f	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00758	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T45[rsp]
  00761	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR x0$32[rsp], xmm0

; 956  :             x1 = _mm_add_epi16(x1, _mm_set1_epi16(2 << 6));

  0076a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  00772	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  0077b	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$33[rsp]
  00784	66 0f fd 84 24
	c0 02 00 00	 paddw	 xmm0, XMMWORD PTR $T46[rsp]
  0078d	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  00796	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T47[rsp]
  0079f	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR x1$33[rsp], xmm0

; 957  : 
; 958  :             x2 = _mm_unpacklo_epi8(_mm_setzero_si128(), x3);

  007a8	66 0f ef c0	 pxor	 xmm0, xmm0
  007ac	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  007b5	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T48[rsp]
  007be	66 0f 60 84 24
	10 02 00 00	 punpcklbw xmm0, XMMWORD PTR x3$35[rsp]
  007c7	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T49[rsp], xmm0
  007d0	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T49[rsp]
  007d9	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x2$34[rsp], xmm0

; 959  :             x3 = _mm_unpackhi_epi8(_mm_setzero_si128(), x3);

  007e2	66 0f ef c0	 pxor	 xmm0, xmm0
  007e6	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T50[rsp], xmm0
  007ef	66 0f 6f 84 24
	00 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T50[rsp]
  007f8	66 0f 68 84 24
	10 02 00 00	 punpckhbw xmm0, XMMWORD PTR x3$35[rsp]
  00801	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  0080a	66 0f 6f 84 24
	10 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T51[rsp]
  00813	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR x3$35[rsp], xmm0

; 960  :             x2 = _mm_add_epi16(x2, _mm_set1_epi16(2 << 6));

  0081c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  00824	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T52[rsp], xmm0
  0082d	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$34[rsp]
  00836	66 0f fd 84 24
	20 03 00 00	 paddw	 xmm0, XMMWORD PTR $T52[rsp]
  0083f	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  00848	66 0f 6f 84 24
	30 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T53[rsp]
  00851	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR x2$34[rsp], xmm0

; 961  :             x3 = _mm_add_epi16(x3, _mm_set1_epi16(2 << 6));

  0085a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00800080008000800080008000800080
  00862	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T54[rsp], xmm0
  0086b	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR x3$35[rsp]
  00874	66 0f fd 84 24
	40 03 00 00	 paddw	 xmm0, XMMWORD PTR $T54[rsp]
  0087d	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  00886	66 0f 6f 84 24
	50 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T55[rsp]
  0088f	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR x3$35[rsp], xmm0

; 962  : 
; 963  :             _mm_storeu_si128((__m128i *)(dst_ptr +  0), x0);

  00898	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$30[rsp]
  008a0	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$32[rsp]
  008a9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 964  :             _mm_storeu_si128((__m128i *)(dst_ptr +  8), x1);

  008ad	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$30[rsp]
  008b5	48 83 c0 10	 add	 rax, 16
  008b9	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$33[rsp]
  008c2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 965  :             _mm_storeu_si128((__m128i *)(dst_ptr + 16), x2);

  008c6	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$30[rsp]
  008ce	48 83 c0 20	 add	 rax, 32			; 00000020H
  008d2	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR x2$34[rsp]
  008db	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 966  :             _mm_storeu_si128((__m128i *)(dst_ptr + 24), x3);

  008df	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR dst_ptr$30[rsp]
  008e7	48 83 c0 30	 add	 rax, 48			; 00000030H
  008eb	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR x3$35[rsp]
  008f4	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 967  :         }

  008f8	e9 c1 fc ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 968  :     }

  008fd	e9 da fb ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 969  : }

  00902	48 8b cc	 mov	 rcx, rsp
  00905	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0090c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00911	48 8b 8c 24 88
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00919	48 33 cc	 xor	 rcx, rsp
  0091c	e8 00 00 00 00	 call	 __security_check_cookie
  00921	48 81 c4 98 03
	00 00		 add	 rsp, 920		; 00000398H
  00928	5f		 pop	 rdi
  00929	5e		 pop	 rsi
  0092a	c3		 ret	 0
??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010_avx

; 60   : void convert_yv12_to_p010_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 61   :     convert_yv12_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_p010_simd<0>

; 62   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_to_p010_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$5 = 72
$T6 = 104
srcYLine$7 = 120
dstLine$8 = 128
y_width$9 = 136
y$10 = 140
uv_range$ = 152
$T11 = 184
srcULine$ = 200
srcVLine$ = 208
dstLine$ = 216
y$12 = 224
x_fin$13 = 228
src_u_ptr$14 = 232
src_v_ptr$15 = 240
dst_ptr$16 = 248
x0$17 = 256
x1$18 = 272
x2$19 = 288
x$20 = 304
$T21 = 320
$T22 = 336
$T23 = 352
$T24 = 368
$T25 = 392
$T26 = 408
__$ArrayPad$ = 424
dst$ = 464
src$ = 472
width$ = 480
src_y_pitch_byte$ = 488
src_uv_pitch_byte$ = 496
dst_y_pitch_byte$ = 504
height$ = 512
dst_height$ = 520
thread_id$ = 528
thread_n$ = 536
crop$ = 544
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_simd<1>

; 284  : static void __forceinline convert_yv12_to_nv12_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+464]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 286  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 287  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 288  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 289  :     //Y成分のコピー
; 290  :     if (!uv_only) {

  000a6	33 c0		 xor	 eax, eax
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 58 01 00
	00		 je	 $LN11@convert_yv

; 291  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b0	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000b4	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000bb	2b c8		 sub	 ecx, eax
  000bd	8b c1		 mov	 eax, ecx
  000bf	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c6	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ca	44 8b 8c 24 10
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d2	44 8b c0	 mov	 r8d, eax
  000d5	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000d9	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  000e1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e6	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000eb	48 8b f9	 mov	 rdi, rcx
  000ee	48 8b f0	 mov	 rsi, rax
  000f1	b9 0c 00 00 00	 mov	 ecx, 12
  000f6	f3 a4		 rep movsb
  000f8	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$5[rsp]
  000fd	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  00102	48 8b f8	 mov	 rdi, rax
  00105	48 8b f1	 mov	 rsi, rcx
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb

; 292  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  0010f	b8 08 00 00 00	 mov	 eax, 8
  00114	48 6b c0 00	 imul	 rax, rax, 0
  00118	8b 8c 24 e8 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0011f	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$5[rsp]
  00124	48 63 c9	 movsxd	 rcx, ecx
  00127	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0012f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00133	48 03 c1	 add	 rax, rcx
  00136	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0013b	48 03 c1	 add	 rax, rcx
  0013e	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 293  :         uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	48 6b c0 00	 imul	 rax, rax, 0
  0014c	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00153	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00158	48 63 c9	 movsxd	 rcx, ecx
  0015b	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00163	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00167	48 8b c1	 mov	 rax, rcx
  0016a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 294  :         const int y_width = width - crop_right - crop_left;

  00172	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00176	8b 8c 24 e0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017d	2b c8		 sub	 ecx, eax
  0017f	8b c1		 mov	 eax, ecx
  00181	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00185	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 295  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00197	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00199	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001a0	ff c0		 inc	 eax
  001a2	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001a9	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001b6	48 03 c8	 add	 rcx, rax
  001b9	48 8b c1	 mov	 rax, rcx
  001bc	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001c1	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001d1	48 03 c8	 add	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN4@convert_yv:
  001df	8b 44 24 50	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  001e3	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  001ea	7d 1c		 jge	 SHORT $LN3@convert_yv

; 296  :             memcpy_sse(dstLine, srcYLine, y_width);

  001ec	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR y_width$9[rsp]
  001f4	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcYLine$7[rsp]
  001f9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  00201	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 297  :         }

  00206	eb 91		 jmp	 SHORT $LN2@convert_yv
$LN3@convert_yv:
$LN11@convert_yv:

; 298  :     }
; 299  :     //UV成分のコピー
; 300  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00208	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  0020c	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00213	2b c8		 sub	 ecx, eax
  00215	8b c1		 mov	 eax, ecx
  00217	d1 f8		 sar	 eax, 1
  00219	8b 4c 24 34	 mov	 ecx, DWORD PTR crop_up$[rsp]
  0021d	d1 f9		 sar	 ecx, 1
  0021f	8b 94 24 18 02
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00226	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  0022a	44 8b 8c 24 10
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00232	44 8b c0	 mov	 r8d, eax
  00235	8b d1		 mov	 edx, ecx
  00237	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  0023f	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00244	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0024c	48 8b f9	 mov	 rdi, rcx
  0024f	48 8b f0	 mov	 rsi, rax
  00252	b9 0c 00 00 00	 mov	 ecx, 12
  00257	f3 a4		 rep movsb
  00259	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR uv_range$[rsp]
  00261	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  00269	48 8b f8	 mov	 rdi, rax
  0026c	48 8b f1	 mov	 rsi, rcx
  0026f	b9 0c 00 00 00	 mov	 ecx, 12
  00274	f3 a4		 rep movsb

; 301  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00276	b8 08 00 00 00	 mov	 eax, 8
  0027b	48 6b c0 01	 imul	 rax, rax, 1
  0027f	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00286	0f af 8c 24 98
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  0028e	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  00292	d1 fa		 sar	 edx, 1
  00294	03 ca		 add	 ecx, edx
  00296	48 63 c9	 movsxd	 rcx, ecx
  00299	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002a1	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002a5	48 8b c1	 mov	 rax, rcx
  002a8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 302  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  002b0	b8 08 00 00 00	 mov	 eax, 8
  002b5	48 6b c0 02	 imul	 rax, rax, 2
  002b9	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  002c0	0f af 8c 24 98
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  002c8	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  002cc	d1 fa		 sar	 edx, 1
  002ce	03 ca		 add	 ecx, edx
  002d0	48 63 c9	 movsxd	 rcx, ecx
  002d3	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002db	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002df	48 8b c1	 mov	 rax, rcx
  002e2	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 303  :     uint8_t *dstLine = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  002ea	b8 08 00 00 00	 mov	 eax, 8
  002ef	48 6b c0 01	 imul	 rax, rax, 1
  002f3	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  002fa	0f af 8c 24 9c
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp+4]
  00302	48 63 c9	 movsxd	 rcx, ecx
  00305	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0030d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00311	48 8b c1	 mov	 rax, rcx
  00314	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 304  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  0031c	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  00327	eb 6a		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  00329	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  00330	ff c0		 inc	 eax
  00332	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  00339	48 63 84 24 f0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00341	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  00349	48 03 c8	 add	 rcx, rax
  0034c	48 8b c1	 mov	 rax, rcx
  0034f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00357	48 63 84 24 f0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0035f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00367	48 03 c8	 add	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00375	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0037d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00385	48 03 c8	 add	 rcx, rax
  00388	48 8b c1	 mov	 rax, rcx
  0038b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN7@convert_yv:
  00393	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR uv_range$[rsp+8]
  0039a	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  003a1	0f 8d 94 01 00
	00		 jge	 $LN6@convert_yv

; 305  :         const int x_fin = width - crop_right;

  003a7	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  003ab	8b 8c 24 e0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  003b2	2b c8		 sub	 ecx, eax
  003b4	8b c1		 mov	 eax, ecx
  003b6	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x_fin$13[rsp], eax

; 306  :         uint8_t *src_u_ptr = srcULine;

  003bd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  003c5	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR src_u_ptr$14[rsp], rax

; 307  :         uint8_t *src_v_ptr = srcVLine;

  003cd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  003d5	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR src_v_ptr$15[rsp], rax

; 308  :         uint8_t *dst_ptr = dstLine;

  003dd	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  003e5	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR dst_ptr$16[rsp], rax

; 309  :         __m128i x0, x1, x2;
; 310  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  003ed	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  003f1	89 84 24 30 01
	00 00		 mov	 DWORD PTR x$20[rsp], eax
  003f8	eb 4d		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003fa	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR x$20[rsp]
  00401	83 c0 20	 add	 eax, 32			; 00000020H
  00404	89 84 24 30 01
	00 00		 mov	 DWORD PTR x$20[rsp], eax
  0040b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR src_u_ptr$14[rsp]
  00413	48 83 c0 10	 add	 rax, 16
  00417	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR src_u_ptr$14[rsp], rax
  0041f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR src_v_ptr$15[rsp]
  00427	48 83 c0 10	 add	 rax, 16
  0042b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR src_v_ptr$15[rsp], rax
  00433	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  0043b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0043f	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR dst_ptr$16[rsp], rax
$LN10@convert_yv:
  00447	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x_fin$13[rsp]
  0044e	39 84 24 30 01
	00 00		 cmp	 DWORD PTR x$20[rsp], eax
  00455	0f 8d db 00 00
	00		 jge	 $LN9@convert_yv

; 311  :             x0 = _mm_loadu_si128((const __m128i *)src_u_ptr);

  0045b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR src_u_ptr$14[rsp]
  00463	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00467	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00470	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  00479	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 312  :             x1 = _mm_loadu_si128((const __m128i *)src_v_ptr);

  00482	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR src_v_ptr$15[rsp]
  0048a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0048e	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00497	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  004a0	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR x1$18[rsp], xmm0

; 313  : 
; 314  :             x2 = _mm_unpackhi_epi8(x0, x1);

  004a9	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  004b2	66 0f 68 84 24
	10 01 00 00	 punpckhbw xmm0, XMMWORD PTR x1$18[rsp]
  004bb	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  004c4	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  004cd	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x2$19[rsp], xmm0

; 315  :             x0 = _mm_unpacklo_epi8(x0, x1);

  004d6	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  004df	66 0f 60 84 24
	10 01 00 00	 punpcklbw xmm0, XMMWORD PTR x1$18[rsp]
  004e8	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  004f1	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  004fa	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 316  : 
; 317  :             _mm_storeu_si128((__m128i *)(dst_ptr +  0), x0);

  00503	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  0050b	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  00514	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 318  :             _mm_storeu_si128((__m128i *)(dst_ptr + 16), x2);

  00518	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  00520	48 83 c0 10	 add	 rax, 16
  00524	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$19[rsp]
  0052d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 319  :         }

  00531	e9 c4 fe ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 320  :     }

  00536	e9 ee fd ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 321  : }

  0053b	48 8b cc	 mov	 rcx, rsp
  0053e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00545	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0054a	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00552	48 33 cc	 xor	 rcx, rsp
  00555	e8 00 00 00 00	 call	 __security_check_cookie
  0055a	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  00561	5f		 pop	 rdi
  00562	5e		 pop	 rsi
  00563	c3		 ret	 0
??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_simd<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_uv_yv12_to_nv12_avx

; 56   : void convert_uv_yv12_to_nv12_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 57   :     convert_yv12_to_nv12_simd<true>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_nv12_simd@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_simd<1>

; 58   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_uv_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_uv_yv12_to_nv12_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$5 = 72
$T6 = 104
srcYLine$7 = 120
dstLine$8 = 128
y_width$9 = 136
y$10 = 140
uv_range$ = 152
$T11 = 184
srcULine$ = 200
srcVLine$ = 208
dstLine$ = 216
y$12 = 224
x_fin$13 = 228
src_u_ptr$14 = 232
src_v_ptr$15 = 240
dst_ptr$16 = 248
x0$17 = 256
x1$18 = 272
x2$19 = 288
x$20 = 304
$T21 = 320
$T22 = 336
$T23 = 352
$T24 = 368
$T25 = 392
$T26 = 408
__$ArrayPad$ = 424
dst$ = 464
src$ = 472
width$ = 480
src_y_pitch_byte$ = 488
src_uv_pitch_byte$ = 496
dst_y_pitch_byte$ = 504
height$ = 512
dst_height$ = 520
thread_id$ = 528
thread_n$ = 536
crop$ = 544
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_simd<0>

; 284  : static void __forceinline convert_yv12_to_nv12_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+464]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 285  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 286  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 287  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 288  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 289  :     //Y成分のコピー
; 290  :     if (!uv_only) {

  000a6	33 c0		 xor	 eax, eax
  000a8	83 f8 01	 cmp	 eax, 1
  000ab	0f 84 58 01 00
	00		 je	 $LN11@convert_yv

; 291  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000b5	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000bc	2b c8		 sub	 ecx, eax
  000be	8b c1		 mov	 eax, ecx
  000c0	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cb	44 8b 8c 24 10
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d3	44 8b c0	 mov	 r8d, eax
  000d6	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000da	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  000e2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e7	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 0c 00 00 00	 mov	 ecx, 12
  000f7	f3 a4		 rep movsb
  000f9	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$5[rsp]
  000fe	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 292  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 00	 imul	 rax, rax, 0
  00119	8b 8c 24 e8 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00120	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$5[rsp]
  00125	48 63 c9	 movsxd	 rcx, ecx
  00128	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00130	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00134	48 03 c1	 add	 rax, rcx
  00137	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0013c	48 03 c1	 add	 rax, rcx
  0013f	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 293  :         uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00144	b8 08 00 00 00	 mov	 eax, 8
  00149	48 6b c0 00	 imul	 rax, rax, 0
  0014d	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00154	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00159	48 63 c9	 movsxd	 rcx, ecx
  0015c	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00164	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00168	48 8b c1	 mov	 rax, rcx
  0016b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 294  :         const int y_width = width - crop_right - crop_left;

  00173	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00177	8b 8c 24 e0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00186	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 295  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  00198	eb 46		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001a1	ff c0		 inc	 eax
  001a3	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001aa	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001b7	48 03 c8	 add	 rcx, rax
  001ba	48 8b c1	 mov	 rax, rcx
  001bd	48 89 44 24 78	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001c2	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ca	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001d2	48 03 c8	 add	 rcx, rax
  001d5	48 8b c1	 mov	 rax, rcx
  001d8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN4@convert_yv:
  001e0	8b 44 24 50	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  001e4	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  001eb	7d 1c		 jge	 SHORT $LN3@convert_yv

; 296  :             memcpy_sse(dstLine, srcYLine, y_width);

  001ed	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR y_width$9[rsp]
  001f5	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcYLine$7[rsp]
  001fa	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  00202	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 297  :         }

  00207	eb 91		 jmp	 SHORT $LN2@convert_yv
$LN3@convert_yv:
$LN11@convert_yv:

; 298  :     }
; 299  :     //UV成分のコピー
; 300  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00209	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  0020d	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00214	2b c8		 sub	 ecx, eax
  00216	8b c1		 mov	 eax, ecx
  00218	d1 f8		 sar	 eax, 1
  0021a	8b 4c 24 34	 mov	 ecx, DWORD PTR crop_up$[rsp]
  0021e	d1 f9		 sar	 ecx, 1
  00220	8b 94 24 18 02
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00227	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  0022b	44 8b 8c 24 10
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00233	44 8b c0	 mov	 r8d, eax
  00236	8b d1		 mov	 edx, ecx
  00238	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00240	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00245	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0024d	48 8b f9	 mov	 rdi, rcx
  00250	48 8b f0	 mov	 rsi, rax
  00253	b9 0c 00 00 00	 mov	 ecx, 12
  00258	f3 a4		 rep movsb
  0025a	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR uv_range$[rsp]
  00262	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0026a	48 8b f8	 mov	 rdi, rax
  0026d	48 8b f1	 mov	 rsi, rcx
  00270	b9 0c 00 00 00	 mov	 ecx, 12
  00275	f3 a4		 rep movsb

; 301  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00277	b8 08 00 00 00	 mov	 eax, 8
  0027c	48 6b c0 01	 imul	 rax, rax, 1
  00280	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00287	0f af 8c 24 98
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  0028f	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  00293	d1 fa		 sar	 edx, 1
  00295	03 ca		 add	 ecx, edx
  00297	48 63 c9	 movsxd	 rcx, ecx
  0029a	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002a2	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002a6	48 8b c1	 mov	 rax, rcx
  002a9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax

; 302  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  002b1	b8 08 00 00 00	 mov	 eax, 8
  002b6	48 6b c0 02	 imul	 rax, rax, 2
  002ba	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  002c1	0f af 8c 24 98
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp]
  002c9	8b 54 24 30	 mov	 edx, DWORD PTR crop_left$[rsp]
  002cd	d1 fa		 sar	 edx, 1
  002cf	03 ca		 add	 ecx, edx
  002d1	48 63 c9	 movsxd	 rcx, ecx
  002d4	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002dc	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002e0	48 8b c1	 mov	 rax, rcx
  002e3	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax

; 303  :     uint8_t *dstLine = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  002eb	b8 08 00 00 00	 mov	 eax, 8
  002f0	48 6b c0 01	 imul	 rax, rax, 1
  002f4	8b 8c 24 f8 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  002fb	0f af 8c 24 9c
	00 00 00	 imul	 ecx, DWORD PTR uv_range$[rsp+4]
  00303	48 63 c9	 movsxd	 rcx, ecx
  00306	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0030e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00312	48 8b c1	 mov	 rax, rcx
  00315	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 304  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  0031d	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  00328	eb 6a		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0032a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  00331	ff c0		 inc	 eax
  00333	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  0033a	48 63 84 24 f0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00342	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR srcULine$[rsp]
  0034a	48 03 c8	 add	 rcx, rax
  0034d	48 8b c1	 mov	 rax, rcx
  00350	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR srcULine$[rsp], rax
  00358	48 63 84 24 f0
	01 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00360	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR srcVLine$[rsp]
  00368	48 03 c8	 add	 rcx, rax
  0036b	48 8b c1	 mov	 rax, rcx
  0036e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR srcVLine$[rsp], rax
  00376	48 63 84 24 f8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0037e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00386	48 03 c8	 add	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN7@convert_yv:
  00394	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR uv_range$[rsp+8]
  0039b	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  003a2	0f 8d 94 01 00
	00		 jge	 $LN6@convert_yv

; 305  :         const int x_fin = width - crop_right;

  003a8	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  003ac	8b 8c 24 e0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  003b3	2b c8		 sub	 ecx, eax
  003b5	8b c1		 mov	 eax, ecx
  003b7	89 84 24 e4 00
	00 00		 mov	 DWORD PTR x_fin$13[rsp], eax

; 306  :         uint8_t *src_u_ptr = srcULine;

  003be	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR srcULine$[rsp]
  003c6	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR src_u_ptr$14[rsp], rax

; 307  :         uint8_t *src_v_ptr = srcVLine;

  003ce	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR srcVLine$[rsp]
  003d6	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR src_v_ptr$15[rsp], rax

; 308  :         uint8_t *dst_ptr = dstLine;

  003de	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  003e6	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR dst_ptr$16[rsp], rax

; 309  :         __m128i x0, x1, x2;
; 310  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  003ee	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  003f2	89 84 24 30 01
	00 00		 mov	 DWORD PTR x$20[rsp], eax
  003f9	eb 4d		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003fb	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR x$20[rsp]
  00402	83 c0 20	 add	 eax, 32			; 00000020H
  00405	89 84 24 30 01
	00 00		 mov	 DWORD PTR x$20[rsp], eax
  0040c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR src_u_ptr$14[rsp]
  00414	48 83 c0 10	 add	 rax, 16
  00418	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR src_u_ptr$14[rsp], rax
  00420	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR src_v_ptr$15[rsp]
  00428	48 83 c0 10	 add	 rax, 16
  0042c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR src_v_ptr$15[rsp], rax
  00434	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  0043c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00440	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR dst_ptr$16[rsp], rax
$LN10@convert_yv:
  00448	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR x_fin$13[rsp]
  0044f	39 84 24 30 01
	00 00		 cmp	 DWORD PTR x$20[rsp], eax
  00456	0f 8d db 00 00
	00		 jge	 $LN9@convert_yv

; 311  :             x0 = _mm_loadu_si128((const __m128i *)src_u_ptr);

  0045c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR src_u_ptr$14[rsp]
  00464	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00468	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00471	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  0047a	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 312  :             x1 = _mm_loadu_si128((const __m128i *)src_v_ptr);

  00483	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR src_v_ptr$15[rsp]
  0048b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0048f	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00498	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  004a1	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR x1$18[rsp], xmm0

; 313  : 
; 314  :             x2 = _mm_unpackhi_epi8(x0, x1);

  004aa	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  004b3	66 0f 68 84 24
	10 01 00 00	 punpckhbw xmm0, XMMWORD PTR x1$18[rsp]
  004bc	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  004c5	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  004ce	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x2$19[rsp], xmm0

; 315  :             x0 = _mm_unpacklo_epi8(x0, x1);

  004d7	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  004e0	66 0f 60 84 24
	10 01 00 00	 punpcklbw xmm0, XMMWORD PTR x1$18[rsp]
  004e9	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  004f2	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  004fb	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$17[rsp], xmm0

; 316  : 
; 317  :             _mm_storeu_si128((__m128i *)(dst_ptr +  0), x0);

  00504	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  0050c	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$17[rsp]
  00515	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 318  :             _mm_storeu_si128((__m128i *)(dst_ptr + 16), x2);

  00519	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dst_ptr$16[rsp]
  00521	48 83 c0 10	 add	 rax, 16
  00525	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$19[rsp]
  0052e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 319  :         }

  00532	e9 c4 fe ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 320  :     }

  00537	e9 ee fd ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 321  : }

  0053c	48 8b cc	 mov	 rcx, rsp
  0053f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00546	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0054b	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00553	48 33 cc	 xor	 rcx, rsp
  00556	e8 00 00 00 00	 call	 __security_check_cookie
  0055b	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  00562	5f		 pop	 rdi
  00563	5e		 pop	 rsi
  00564	c3		 ret	 0
??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_avx

; 52   : void convert_yv12_to_nv12_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 53   :     convert_yv12_to_nv12_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_nv12_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_simd<0>

; 54   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i_avx

; 48   : void convert_yuy2_to_nv12_i_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 49   :     return convert_yuy2_to_nv12_i_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i_simd

; 50   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuy2_to_nv12_i_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_avx

; 44   : void convert_yuy2_to_nv12_avx(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 45   :     return convert_yuy2_to_nv12_simd(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_simd

; 46   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuy2_to_nv12_avx@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_avx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
x4$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
$T9 = 160
$T10 = 176
$T11 = 192
$T12 = 208
x0$ = 240
x1$ = 248
x2$ = 256
?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z PROC	; gather_y_u_v_to_yc48

; 1528 : static __forceinline void gather_y_u_v_to_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]

; 1529 :     __m128i x3, x4;
; 1530 : #if USE_SSE41
; 1531 :     alignas(16) static const uint8_t shuffle_yc48[16] = {
; 1532 :         0x00, 0x01, 0x06, 0x07, 0x0C, 0x0D, 0x02, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x04, 0x05, 0x0A, 0x0B
; 1533 :     };
; 1534 :     x4 = _mm_load_si128((__m128i *)shuffle_yc48);

  0002e	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB
  00036	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003c	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00042	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1535 :     x0 = _mm_shuffle_epi8(x0, x4);                          //5,2,7,4,1,6,3,0

  00048	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00050	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00054	66 0f 38 00 44
	24 10		 pshufb	 xmm0, XMMWORD PTR x4$[rsp]
  0005b	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00061	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00069	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0006f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1536 :     x1 = _mm_shuffle_epi8(x1, _mm_alignr_epi8(x4, x4, 14)); //2,7,4,1,6,3,0,5

  00073	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00079	66 0f 3a 0f 44
	24 10 0e	 palignr xmm0, XMMWORD PTR x4$[rsp], 14
  00081	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00087	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0008f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00093	66 0f 38 00 44
	24 40		 pshufb	 xmm0, XMMWORD PTR $T3[rsp]
  0009a	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000a0	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000a8	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000ae	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1537 :     x2 = _mm_shuffle_epi8(x2, _mm_alignr_epi8(x4, x4, 12)); //7,4,1,6,3,0,5,2

  000b2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  000b8	66 0f 3a 0f 44
	24 10 0c	 palignr xmm0, XMMWORD PTR x4$[rsp], 12
  000c0	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000c6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  000ce	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d2	66 0f 38 00 44
	24 60		 pshufb	 xmm0, XMMWORD PTR $T5[rsp]
  000d9	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000df	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  000e7	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000ed	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1538 : 
; 1539 :     x3 = _mm_blend_epi16(x0, x1, 0x80 + 0x10 + 0x02);

  000f1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00101	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00105	66 0f 3a 0e 01
	92		 pblendw xmm0, XMMWORD PTR [rcx], 146 ; 00000092H
  0010b	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00114	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0011d	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1540 :     x3 = _mm_blend_epi16(x3, x2, 0x20 + 0x04);

  00122	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0012a	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0012f	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [rax], 36 ; 00000024H
  00135	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0013e	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00147	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1541 : 
; 1542 :     x4 = _mm_blend_epi16(x2, x1, 0x20 + 0x04);

  0014c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00154	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0015c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00160	66 0f 3a 0e 01
	24		 pblendw xmm0, XMMWORD PTR [rcx], 36 ; 00000024H
  00166	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  0016f	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00178	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1543 :     x4 = _mm_blend_epi16(x4, x0, 0x80 + 0x10 + 0x02);

  0017e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00186	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  0018c	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  00192	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0019b	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  001a4	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1544 : 
; 1545 :     x2 = _mm_blend_epi16(x2, x0, 0x20 + 0x04);

  001aa	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001b2	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  001ba	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001be	66 0f 3a 0e 01
	24		 pblendw xmm0, XMMWORD PTR [rcx], 36 ; 00000024H
  001c4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001cd	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001d5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  001de	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1546 :     x2 = _mm_blend_epi16(x2, x1, 0x40 + 0x08 + 0x01);

  001e2	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001ea	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  001f2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001f6	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  001fc	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00205	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0020d	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00216	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1547 : 
; 1548 :     x0 = x3;

  0021a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00222	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00227	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1549 :     x1 = x4;

  0022b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00233	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00239	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1550 : #else
; 1551 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,6,5,4,3,1,2,0
; 1552 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,6,4,3,1,2,0
; 1553 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,4,2,0
; 1554 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,2,4,0
; 1555 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,3,5,1,6,2,4,0
; 1556 : 
; 1557 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1558 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1559 :     x1 = _mm_shuffle_epi32(  x1, _MM_SHUFFLE(3,1,2,0));
; 1560 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1561 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1562 : 
; 1563 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1564 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1565 :     x2 = _mm_shuffle_epi32(  x2, _MM_SHUFFLE(3,1,2,0));
; 1566 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1567 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1568 : 
; 1569 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1570 :     x0 = _mm_unpacklo_epi16(x0, x1);
; 1571 :     x1 = _mm_unpackhi_epi16(x1, x2);
; 1572 :     x2 = _mm_unpacklo_epi16(x2, x3);
; 1573 : 
; 1574 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1575 :     x0 = _mm_unpacklo_epi32(x0, x2);
; 1576 :     x2 = _mm_unpackhi_epi32(x2, x1);
; 1577 :     x1 = _mm_unpacklo_epi32(x1, x3);
; 1578 : 
; 1579 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1580 :     x0 = _mm_unpacklo_epi64(x0, x1);
; 1581 :     x1 = _mm_unpackhi_epi64(x1, x2);
; 1582 :     x2 = _mm_unpacklo_epi64(x2, x3);
; 1583 : 
; 1584 :     x4 = x2;
; 1585 :     x2 = x1;
; 1586 :     x1 = x4;
; 1587 : #endif
; 1588 : }

  0023d	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00244	5f		 pop	 rdi
  00245	c3		 ret	 0
?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z ENDP	; gather_y_u_v_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
x4$ = 16
x5$ = 32
MASK_INT$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$T13 = 256
$T14 = 272
$T15 = 288
$T16 = 304
x0$ = 336
x1$ = 344
x2$ = 352
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z PROC	; gather_y_u_v_from_yc48

; 1464 : static __forceinline void gather_y_u_v_from_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR [rsp+336]

; 1465 : #if USE_SSE41
; 1466 :     __m128i x3, x4, x5;
; 1467 :     const int MASK_INT = 0x40 + 0x08 + 0x01;

  0002e	c7 44 24 30 49
	00 00 00	 mov	 DWORD PTR MASK_INT$[rsp], 73 ; 00000049H

; 1468 :     x3 = _mm_blend_epi16(x2, x0, MASK_INT);

  00036	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0003e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  00046	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0004a	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  00050	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00056	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005c	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1469 :     x4 = _mm_blend_epi16(x1, x2, MASK_INT);

  00061	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00069	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR x2$[rsp]
  00071	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00075	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  0007b	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00081	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00087	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1470 :     x5 = _mm_blend_epi16(x0, x1, MASK_INT);

  0008d	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  000a7	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ad	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b3	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1471 : 
; 1472 :     x3 = _mm_blend_epi16(x3, x1, MASK_INT<<1);

  000b9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000c1	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  000c6	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  000cc	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d2	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000d8	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1473 :     x4 = _mm_blend_epi16(x4, x0, MASK_INT<<1);

  000dd	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000e5	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  000eb	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  000f1	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000fa	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00103	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1474 :     x5 = _mm_blend_epi16(x5, x2, MASK_INT<<1);

  00109	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00111	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00117	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  0011d	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00126	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  0012f	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1475 : 
; 1476 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  00135	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0013d	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00146	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0014b	66 0f 38 00 84
	24 a0 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T7[rsp]
  00155	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0015e	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00166	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  0016f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1477 :     x1 = _mm_shuffle_epi8(x4, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 6));

  00173	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0017b	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00184	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0018c	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00195	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  0019e	66 0f 3a 0f 84
	24 d0 00 00 00
	06		 palignr xmm0, XMMWORD PTR $T10[rsp], 6
  001a9	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001b2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  001b8	66 0f 38 00 84
	24 e0 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T11[rsp]
  001c2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001cb	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  001d3	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001dc	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1478 :     x2 = _mm_shuffle_epi8(x5, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 12));

  001e0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  001e8	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  001f1	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  001f9	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00202	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  0020b	66 0f 3a 0f 84
	24 10 01 00 00
	0c		 palignr xmm0, XMMWORD PTR $T14[rsp], 12
  00216	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  0021f	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00225	66 0f 38 00 84
	24 20 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T15[rsp]
  0022f	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00238	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00240	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00249	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1479 : #else
; 1480 :     //code from afs v7.5a+10
; 1481 :     __m128i x5, x6, x7, xMask;
; 1482 :     //select y
; 1483 :     alignas(16) static const uint16_t maskY_select[8] = { 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000 };
; 1484 :     xMask = _mm_load_si128((__m128i*)maskY_select);
; 1485 : 
; 1486 :     x5 = select_by_mask(x2, x0, xMask);
; 1487 :     xMask = _mm_slli_si128(xMask, 2);
; 1488 :     x5 = select_by_mask(x5, x1, xMask); //52741630
; 1489 : 
; 1490 :     x6 = _mm_unpacklo_epi16(x5, x5);    //11663300
; 1491 :     x7 = _mm_unpackhi_epi16(x5, x5);    //55227744
; 1492 : 
; 1493 :     alignas(16) static const uint16_t maskY_shuffle[8] = { 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000 };
; 1494 :     xMask = _mm_load_si128((__m128i*)maskY_shuffle);
; 1495 :     x5 = select_by_mask(x7, x6, xMask);                 //51627340
; 1496 :     x5 = _mm_shuffle_epi32(x5, _MM_SHUFFLE(1, 2, 3, 0));   //73625140
; 1497 : 
; 1498 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //75316420
; 1499 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //76543210
; 1500 : 
; 1501 :                                                         //select uv
; 1502 :     xMask = _mm_srli_si128(_mm_cmpeq_epi8(xMask, xMask), 8); //0x00000000, 0x00000000, 0xffffffff, 0xffffffff
; 1503 :     x6 = select_by_mask(_mm_srli_si128(x1, 2), _mm_srli_si128(x2, 2), xMask); //x  x v4 u4 v6 u6 x  x
; 1504 :     x7 = select_by_mask(x0, x1, xMask);               //x  x  v1 u1 v3 u3 x  x
; 1505 :     xMask = _mm_slli_si128(xMask, 4);                 //0x00000000, 0xffffffff, 0xffffffff, 0x00000000
; 1506 :     x0 = _mm_alignr_epi8_simd(x1, x0, 2);             //v2 u2  x  x  x  x v0 u0
; 1507 :     x6 = select_by_mask(x0, x6, xMask);               //v2 u2 v4 u4 v6 u6 v0 u0
; 1508 :     x7 = select_by_mask(x2, x7, xMask);               //v7 u7 v1 u1 v3 u3 v5 u5
; 1509 :     x0 = _mm_shuffle_epi32(x6, _MM_SHUFFLE(1, 2, 3, 0)); //v6 u6 v4 u4 v2 u2 v0 u0
; 1510 :     x1 = _mm_shuffle_epi32(x7, _MM_SHUFFLE(3, 0, 1, 2)); //v7 u7 v5 u5 v3 u3 v1 u1
; 1511 : 
; 1512 :     x6 = _mm_unpacklo_epi16(x0, x1); //v3 v2 u3 u2 v1 v0 u1 u0
; 1513 :     x7 = _mm_unpackhi_epi16(x0, x1); //v7 v6 u7 u6 v5 v4 u5 u4
; 1514 : 
; 1515 :     x0 = _mm_unpacklo_epi32(x6, x7); //v5 v4 v1 v0 u5 u4 u1 u0
; 1516 :     x1 = _mm_unpackhi_epi32(x6, x7); //v7 v6 v3 v2 u7 u6 u3 u2
; 1517 : 
; 1518 :     x6 = _mm_unpacklo_epi32(x0, x1); //u7 u6 u5 u4 u3 u2 u1 u0
; 1519 :     x7 = _mm_unpackhi_epi32(x0, x1); //v7 v6 v5 v4 v3 v2 v1 v0
; 1520 : 
; 1521 :     x0 = x5;
; 1522 :     x1 = x6;
; 1523 :     x2 = x7;
; 1524 : #endif //USE_SSE41
; 1525 : }

  0024d	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  00254	5f		 pop	 rdi
  00255	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
xC_coeff$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
xC_0x8000$ = 80
$T4 = 96
$T5 = 112
x1$ = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$T13 = 256
x0$ = 288
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_uv_range_to_yc48

; 1447 : static __forceinline __m128i convert_uv_range_to_yc48(__m128i x0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]

; 1448 :     //coeff = 4682
; 1449 :     //UV = (( uv - 32768 ) * coef + (1<<15) ) >> 16
; 1450 :     const __m128i xC_coeff = _mm_unpacklo_epi16(_mm_set1_epi16(4682), _mm_set1_epi16(-1));

  00024	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0002c	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00032	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@124a124a124a124a124a124a124a124a
  0003a	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00040	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00046	66 0f 61 44 24
	30		 punpcklwd xmm0, XMMWORD PTR $T2[rsp]
  0004c	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00052	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00058	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR xC_coeff$[rsp], xmm0

; 1451 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  0005e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00066	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  0006e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00072	66 0f 76 01	 pcmpeqd xmm0, XMMWORD PTR [rcx]
  00076	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  0007c	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00082	66 0f 71 f0 0f	 psllw	 xmm0, 15
  00087	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  0008d	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00093	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xC_0x8000$[rsp], xmm0

; 1452 :     __m128i x1;
; 1453 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  00099	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000a1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a5	66 0f fd 44 24
	50		 paddw	 xmm0, XMMWORD PTR xC_0x8000$[rsp]
  000ab	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000b4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000bc	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000c5	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1454 :     x1 = _mm_unpackhi_epi16(x0, xC_0x8000);

  000c9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d5	66 0f 69 44 24
	50		 punpckhwd xmm0, XMMWORD PTR xC_0x8000$[rsp]
  000db	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000e4	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000ed	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1455 :     x0 = _mm_unpacklo_epi16(x0, xC_0x8000);

  000f6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000fe	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00102	66 0f 61 44 24
	50		 punpcklwd xmm0, XMMWORD PTR xC_0x8000$[rsp]
  00108	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00111	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00119	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00122	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1456 :     x0 = _mm_madd_epi16(x0, xC_coeff);

  00126	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0012e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00132	66 0f f5 44 24
	10		 pmaddwd xmm0, XMMWORD PTR xC_coeff$[rsp]
  00138	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00141	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00149	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00152	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1457 :     x1 = _mm_madd_epi16(x1, xC_coeff);

  00156	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0015f	66 0f f5 44 24
	10		 pmaddwd xmm0, XMMWORD PTR xC_coeff$[rsp]
  00165	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0016e	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00177	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1458 :     x0 = _mm_srai_epi32(x0, 16);

  00180	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00188	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0018c	66 0f 72 e0 10	 psrad	 xmm0, 16
  00191	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  0019a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001a2	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  001ab	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1459 :     x1 = _mm_srai_epi32(x1, 16);

  001af	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001b8	66 0f 72 e0 10	 psrad	 xmm0, 16
  001bd	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001c6	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001cf	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1460 :     x0 = _mm_packs_epi32(x0, x1);

  001d8	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001e0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001e4	66 0f 6b 84 24
	80 00 00 00	 packssdw xmm0, XMMWORD PTR x1$[rsp]
  001ed	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  001f6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001fe	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00207	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1461 :     return x0;

  0020b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00213	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1462 : }

  00217	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0021e	5f		 pop	 rdi
  0021f	c3		 ret	 0
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_uv_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
xC_0x8000$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
x0$ = 160
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_y_range_to_yc48

; 1437 : static __forceinline __m128i convert_y_range_to_yc48(__m128i x0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]

; 1438 :     //coef = 4788
; 1439 :     //((( y - 32768 ) * coef) >> 16 ) + (coef/2 - 299)
; 1440 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  00024	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0002c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  00034	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00038	66 0f 76 01	 pcmpeqd xmm0, XMMWORD PTR [rcx]
  0003c	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00042	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00048	66 0f 71 f0 0f	 psllw	 xmm0, 15
  0004d	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00053	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00059	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR xC_0x8000$[rsp], xmm0

; 1441 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  0005f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00067	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006b	66 0f fd 44 24
	10		 paddw	 xmm0, XMMWORD PTR xC_0x8000$[rsp]
  00071	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00077	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0007f	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00085	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1442 :     x0 = _mm_mulhi_epi16(x0, _mm_set1_epi16(4788));

  00089	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@12b412b412b412b412b412b412b412b4
  00091	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  00097	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0009f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a3	66 0f e5 44 24
	50		 pmulhw	 xmm0, XMMWORD PTR $T4[rsp]
  000a9	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000af	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b7	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  000bd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1443 :     x0 = _mm_adds_epi16(x0, _mm_set1_epi16(4788/2 - 299));

  000c1	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@082f082f082f082f082f082f082f082f
  000c9	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000cf	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d7	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000db	66 0f ed 44 24
	70		 paddsw	 xmm0, XMMWORD PTR $T6[rsp]
  000e1	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000ea	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000fb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1444 :     return x0;

  000ff	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00107	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1445 : }

  0010b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_y_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x2$ = 48
x3$ = 64
x6$ = 80
x7$ = 96
$T1 = 112
$T2 = 128
$T3 = 144
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
x0$ = 432
x1$ = 440
xC_UV_OFFSET_x1$ = 448
xC_UV_MA_16_0$ = 456
xC_UV_MA_16_1$ = 464
UV_RSH_16$ = 472
xC_YCC$ = 480
xC_pw_one$ = 488
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i

; 1411 : static __forceinline __m128i convert_uv_range_from_yc48_420i(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16_0, const __m128i& xC_UV_MA_16_1, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+432]

; 1412 :     __m128i x2, x3, x6, x7;
; 1413 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00033	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1414 :     x1 = _mm_add_epi16(x1, xC_UV_OFFSET_x1);

  00063	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0006b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00084	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0008c	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00095	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1415 : 
; 1416 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00099	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000a1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000a9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000ad	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  000b1	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ba	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000c3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1417 :     x6 = _mm_unpacklo_epi16(x0, xC_pw_one);

  000c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000d9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000dd	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  000e1	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000ea	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000f3	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1418 :     x3 = _mm_unpackhi_epi16(x1, xC_pw_one);

  000f9	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00101	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00109	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0010d	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  00111	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  0011a	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00123	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1419 :     x2 = _mm_unpacklo_epi16(x1, xC_pw_one);

  00129	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00131	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00139	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0013d	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00141	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0014a	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00153	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1420 : 
; 1421 :     x6 = _mm_madd_epi16(x6, xC_UV_MA_16_0);

  00159	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  00161	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00167	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  0016b	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00174	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1422 :     x7 = _mm_madd_epi16(x7, xC_UV_MA_16_0);

  00183	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  0018b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00191	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  00195	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019e	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a7	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1423 :     x2 = _mm_madd_epi16(x2, xC_UV_MA_16_1);

  001ad	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001b5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  001bb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001bf	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001c8	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001d1	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1424 :     x3 = _mm_madd_epi16(x3, xC_UV_MA_16_1);

  001d7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001df	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  001e5	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001e9	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  001f2	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  001fb	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1425 :     x0 = _mm_add_epi32(x6, x2);

  00201	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00207	66 0f fe 44 24
	30		 paddd	 xmm0, XMMWORD PTR x2$[rsp]
  0020d	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00216	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0021e	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00227	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1426 :     x7 = _mm_add_epi32(x7, x3);

  0022b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00231	66 0f fe 44 24
	40		 paddd	 xmm0, XMMWORD PTR x3$[rsp]
  00237	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00240	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00249	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1427 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  0024f	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00258	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00260	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  00264	66 0f e2 c8	 psrad	 xmm1, xmm0
  00268	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0026c	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00275	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0027d	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00286	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1428 :     x7 = _mm_srai_epi32(x7, UV_RSH_16);

  0028a	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00293	66 0f 6f 4c 24
	60		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  00299	66 0f e2 c8	 psrad	 xmm1, xmm0
  0029d	66 0f 6f c1	 movdqa	 xmm0, xmm1
  002a1	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002aa	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002b3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1429 :     x0 = _mm_add_epi32(x0, xC_YCC);

  002b9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002c1	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  002c9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002cd	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  002d1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002da	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002e2	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002eb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1430 :     x7 = _mm_add_epi32(x7, xC_YCC);

  002ef	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  002f7	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  002fd	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00301	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  0030a	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00313	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1431 : 
; 1432 :     x0 = _mm_packus_epi32_simd(x0, x7);

  00319	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0031f	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00328	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00330	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00334	f3 0f 7f 84 24
	80 01 00 00	 movdqu	 XMMWORD PTR $T18[rsp], xmm0
  0033d	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  00345	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR $T18[rsp]
  0034d	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  00352	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0035b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00363	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0036c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1433 : 
; 1434 :     return x0;

  00370	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00378	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1435 : }

  0037c	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  00383	5f		 pop	 rdi
  00384	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
x0$ = 144
x1$ = 152
xC_UV_OFFSET_x2$ = 160
xC_UV_MA_16$ = 168
UV_RSH_16$ = 176
xC_YCC$ = 184
xC_pw_one$ = 192
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z PROC ; convert_uv_range_from_yc48_yuv420p

; 1405 : static __forceinline __m128i convert_uv_range_from_yc48_yuv420p(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x2, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 1406 :     x0 = _mm_add_epi16(x0, x1);

  00033	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1407 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x2);

  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0006b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x2$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00081	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00089	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0008f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1408 : 
; 1409 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00093	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	f3 0f 7f 44 24
	70		 movdqu	 XMMWORD PTR $T4[rsp], xmm0
  000a5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  000ba	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  000c2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  000ca	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp]
  000cf	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000d4	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000da	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]

; 1410 : }

  000e0	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
x0$ = 128
xC_UV_OFFSET_x1$ = 136
xC_UV_MA_16$ = 144
UV_RSH_16$ = 152
xC_YCC$ = 160
xC_pw_one$ = 168
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z PROC ; convert_uv_range_from_yc48

; 1400 : static __forceinline __m128i convert_uv_range_from_yc48(__m128i x0, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16, int UV_RSH_16, __m128i xC_YCC, const __m128i& xC_pw_one) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1c 00 00 00	 mov	 ecx, 28
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1401 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00030	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00038	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00040	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00044	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  00048	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00056	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1402 : 
; 1403 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00068	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006c	f3 0f 7f 44 24
	60		 movdqu	 XMMWORD PTR $T3[rsp], xmm0
  00072	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  00087	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  0008f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  00097	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T3[rsp]
  0009c	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000a1	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  000a7	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]

; 1404 : }

  000ad	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x1$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_UV_MA_16$ = 264
UV_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_uv_range_after_adding_offset

; 1383 : static __forceinline __m128i convert_uv_range_after_adding_offset(__m128i x0, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1384 :     __m128i x1;
; 1385 :     x1 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1386 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1387 : 
; 1388 :     x0 = _mm_madd_epi16(x0, xC_UV_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1389 :     x1 = _mm_madd_epi16(x1, xC_UV_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1390 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1391 :     x1 = _mm_srai_epi32(x1, UV_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x1$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1392 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1393 :     x1 = _mm_add_epi32(x1, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1394 : 
; 1395 :     x0 = _mm_packus_epi32_simd(x0, x1);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1396 : 
; 1397 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1398 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x7$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_Y_MA_16$ = 264
Y_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_y_range_from_yc48

; 1366 : static __forceinline __m128i convert_y_range_from_yc48(__m128i x0, const __m128i& xC_Y_MA_16, int Y_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1367 :     __m128i x7;
; 1368 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1369 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1370 : 
; 1371 :     x0 = _mm_madd_epi16(x0, xC_Y_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_Y_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1372 :     x7 = _mm_madd_epi16(x7, xC_Y_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_Y_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1373 :     x0 = _mm_srai_epi32(x0, Y_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1374 :     x7 = _mm_srai_epi32(x7, Y_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1375 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1376 :     x7 = _mm_add_epi32(x7, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1377 : 
; 1378 :     x0 = _mm_packus_epi32_simd(x0, x7);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1379 : 
; 1380 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1381 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
MASK_INT_Y$ = 16
MASK_INT_UV$ = 20
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
x0$ = 176
x1$ = 184
x2$ = 192
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z PROC	; gather_y_uv_from_yc48

; 1331 : static __forceinline void gather_y_uv_from_yc48(__m128i& x0, __m128i& x1, __m128i x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 1332 : #if USE_SSE41
; 1333 :     __m128i x3;
; 1334 :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;

  0002e	c7 44 24 10 92
	00 00 00	 mov	 DWORD PTR MASK_INT_Y$[rsp], 146 ; 00000092H

; 1335 :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;

  00036	c7 44 24 14 61
	00 00 00	 mov	 DWORD PTR MASK_INT_UV$[rsp], 97 ; 00000061H

; 1336 :     x3 = _mm_blend_epi16(x0, x1, MASK_INT_Y);

  0003e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00046	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0004e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00052	66 0f 3a 0e 01
	92		 pblendw xmm0, XMMWORD PTR [rcx], 146 ; 00000092H
  00058	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00064	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1337 :     x3 = _mm_blend_epi16(x3, x2, MASK_INT_Y>>2);

  00069	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00071	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00076	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [rax], 36 ; 00000024H
  0007c	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00082	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00088	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1338 : 
; 1339 :     x1 = _mm_blend_epi16(x0, x1, MASK_INT_UV);

  0008d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f 3a 0e 01
	61		 pblendw xmm0, XMMWORD PTR [rcx], 97 ; 00000061H
  000a7	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ad	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000b5	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000bb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1340 :     x1 = _mm_blend_epi16(x1, x2, MASK_INT_UV>>2);

  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000c7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR x2$[rsp]
  000cf	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d3	66 0f 3a 0e 01
	18		 pblendw xmm0, XMMWORD PTR [rcx], 24
  000d9	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000df	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000e7	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000ed	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1341 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);

  000f1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000f9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00101	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00105	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [rcx], 2
  0010b	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00111	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00119	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  0011f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1342 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));//UV1行目

  00123	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0012b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0012f	66 0f 70 c0 6c	 pshufd	 xmm0, xmm0, 108		; 0000006cH
  00134	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00142	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00148	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1343 : 
; 1344 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  0014c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00154	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0015d	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00162	66 0f 38 00 84
	24 80 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T7[rsp]
  0016c	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00175	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0017d	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00186	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1345 : #else
; 1346 :     __m128i x3;
; 1347 :     x3 = select_by_mask(x0, x1, xC_MASK_YCP2Y(0));
; 1348 :     x3 = select_by_mask(x3, x2, xC_MASK_YCP2Y(1));
; 1349 : 
; 1350 :     x1 = select_by_mask(x0, x1, xC_MASK_YCP2UV(0));
; 1351 :     x1 = select_by_mask(x1, x2, xC_MASK_YCP2UV(1));
; 1352 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);
; 1353 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));
; 1354 : #if USE_SSSE3
; 1355 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1356 : #else
; 1357 :     x0 = _mm_shuffle_epi32(  x3, _MM_SHUFFLE(3,1,2,0));
; 1358 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1359 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(1,2,3,0));
; 1360 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1361 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,0,1,2));
; 1362 : #endif //USE_SSSE3
; 1363 : #endif //USE_SSE41
; 1364 : }

  0018a	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00191	5f		 pop	 rdi
  00192	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstLine$ = 128
y_width$ = 136
y$5 = 140
$T6 = 152
__$ArrayPad$ = 168
dst$ = 208
src$ = 216
width$ = 224
src_y_pitch_byte$ = 232
src_uv_pitch_byte$ = 240
dst_y_pitch_byte$ = 248
height$ = 256
dst_height$ = 264
thread_id$ = 272
thread_n$ = 280
crop$ = 288
?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32r_to_rgb32_simd

; 876  : static void __forceinline convert_rgb32r_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 877  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 878  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 879  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 880  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 881  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 10
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 882  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * (y_range.start_src + y_range.len - 1) + crop_left * 4;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 4c 24 48	 mov	 ecx, DWORD PTR y_range$[rsp]
  00112	8b 54 24 50	 mov	 edx, DWORD PTR y_range$[rsp+8]
  00116	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  0011a	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  00121	0f af d1	 imul	 edx, ecx
  00124	8b ca		 mov	 ecx, edx
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00131	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00135	48 03 c1	 add	 rax, rcx
  00138	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  0013c	c1 e1 02	 shl	 ecx, 2
  0013f	48 63 c9	 movsxd	 rcx, ecx
  00142	48 03 c1	 add	 rax, rcx
  00145	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 883  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * (height - (y_range.start_dst + y_range.len));

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 4c 24 50	 mov	 ecx, DWORD PTR y_range$[rsp+8]
  00157	8b 54 24 4c	 mov	 edx, DWORD PTR y_range$[rsp+4]
  0015b	03 d1		 add	 edx, ecx
  0015d	8b ca		 mov	 ecx, edx
  0015f	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR height$[rsp]
  00166	2b d1		 sub	 edx, ecx
  00168	8b ca		 mov	 ecx, edx
  0016a	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  00171	0f af d1	 imul	 edx, ecx
  00174	8b ca		 mov	 ecx, edx
  00176	48 63 c9	 movsxd	 rcx, ecx
  00179	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00181	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00185	48 8b c1	 mov	 rax, rcx
  00188	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 884  :     const int y_width = width - crop_right - crop_left;

  00190	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00194	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019b	2b c8		 sub	 ecx, eax
  0019d	8b c1		 mov	 eax, ecx
  0019f	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a3	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 885  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine -= src_y_pitch_byte) {

  001aa	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  001b5	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  001b7	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  001be	ff c0		 inc	 eax
  001c0	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  001c7	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001cf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001d7	48 03 c8	 add	 rcx, rax
  001da	48 8b c1	 mov	 rax, rcx
  001dd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001e5	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ed	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001f2	48 2b c8	 sub	 rcx, rax
  001f5	48 8b c1	 mov	 rax, rcx
  001f8	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001fd	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00201	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  00208	7d 21		 jge	 SHORT $LN3@convert_rg

; 886  :         memcpy_sse(dstLine, srcLine, y_width * 4);

  0020a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR y_width$[rsp]
  00211	c1 e0 02	 shl	 eax, 2
  00214	44 8b c0	 mov	 r8d, eax
  00217	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  0021c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00224	e8 00 00 00 00	 call	 ?memcpy_sse@@YAXPEAEPEBEH@Z ; memcpy_sse

; 887  :     }

  00229	eb 8c		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 888  : }

  0022b	48 8b cc	 mov	 rcx, rsp
  0022e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00235	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0023a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00242	48 33 cc	 xor	 rcx, rsp
  00245	e8 00 00 00 00	 call	 __security_check_cookie
  0024a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00251	5f		 pop	 rdi
  00252	5e		 pop	 rsi
  00253	c3		 ret	 0
?convert_rgb32r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32r_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcLine$ = 120
dstLine$ = 128
MASK_RGB3_TO_RGB4$ = 160
xMask$ = 192
$T6 = 208
y$7 = 224
ptr_src$8 = 232
ptr_dst$9 = 240
x$10 = 248
x_fin$11 = 252
x0$12 = 256
$T13 = 272
x1$14 = 288
$T15 = 304
x2$16 = 320
$T17 = 336
x3$18 = 352
$T19 = 368
$T20 = 384
$T21 = 400
$T22 = 416
$T23 = 432
$T24 = 448
$T25 = 464
$T26 = 488
__$ArrayPad$ = 504
dst$ = 544
src$ = 552
width$ = 560
src_y_pitch_byte$ = 568
src_uv_pitch_byte$ = 576
dst_y_pitch_byte$ = 584
height$ = 592
dst_height$ = 600
thread_id$ = 608
thread_n$ = 616
crop$ = 624
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb32_simd

; 429  : static void __forceinline convert_rgb24r_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR [rsp+544]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 430  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 431  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 432  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 433  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 434  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 60
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 435  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1)) + crop_left * 3;;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 4c 24 48	 mov	 ecx, DWORD PTR y_range$[rsp]
  00112	8b 54 24 50	 mov	 edx, DWORD PTR y_range$[rsp+8]
  00116	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  0011a	8b 94 24 38 02
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  00121	0f af d1	 imul	 edx, ecx
  00124	8b ca		 mov	 ecx, edx
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00131	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00135	48 03 c1	 add	 rax, rcx
  00138	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  0013d	48 63 c9	 movsxd	 rcx, ecx
  00140	48 03 c1	 add	 rax, rcx
  00143	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 436  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  00148	b8 08 00 00 00	 mov	 eax, 8
  0014d	48 6b c0 00	 imul	 rax, rax, 0
  00151	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00158	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0015d	48 63 c9	 movsxd	 rcx, ecx
  00160	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00168	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016c	48 8b c1	 mov	 rax, rcx
  0016f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 437  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  00177	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp], 0
  0017f	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+1], 1
  00187	c6 84 24 a2 00
	00 00 02	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+2], 2
  0018f	c6 84 24 a3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+3], -1
  00197	c6 84 24 a4 00
	00 00 03	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+4], 3
  0019f	c6 84 24 a5 00
	00 00 04	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+5], 4
  001a7	c6 84 24 a6 00
	00 00 05	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+6], 5
  001af	c6 84 24 a7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+7], -1
  001b7	c6 84 24 a8 00
	00 00 06	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+8], 6
  001bf	c6 84 24 a9 00
	00 00 07	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+9], 7
  001c7	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+10], 8
  001cf	c6 84 24 ab 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+11], -1
  001d7	c6 84 24 ac 00
	00 00 09	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+12], 9
  001df	c6 84 24 ad 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+13], 10
  001e7	c6 84 24 ae 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+14], 11
  001ef	c6 84 24 af 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+15], -1

; 438  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  001f7	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR MASK_RGB3_TO_RGB4$[rsp]
  00200	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00209	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00212	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 439  :     for (int y = 0; y  < y_range.len; y++, srcLine -= src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0021b	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  00226	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00228	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  0022f	ff c0		 inc	 eax
  00231	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  00238	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00240	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00245	48 2b c8	 sub	 rcx, rax
  00248	48 8b c1	 mov	 rax, rcx
  0024b	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
  00250	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00258	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00260	48 03 c8	 add	 rcx, rax
  00263	48 8b c1	 mov	 rax, rcx
  00266	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN4@convert_rg:
  0026e	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00272	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  00279	0f 8d 49 03 00
	00		 jge	 $LN3@convert_rg

; 440  :         uint8_t *ptr_src = srcLine;

  0027f	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  00284	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax

; 441  :         uint8_t *ptr_dst = dstLine;

  0028c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00294	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax

; 442  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  0029c	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  002a7	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  002ab	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002b2	2b c8		 sub	 ecx, eax
  002b4	8b c1		 mov	 eax, ecx
  002b6	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  002ba	83 e8 10	 sub	 eax, 16
  002bd	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 443  :         for (; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  002c4	eb 39		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002c6	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  002cd	83 c0 10	 add	 eax, 16
  002d0	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  002d7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  002df	48 83 c0 40	 add	 rax, 64			; 00000040H
  002e3	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  002eb	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  002f3	48 83 c0 30	 add	 rax, 48			; 00000030H
  002f7	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN7@convert_rg:
  002ff	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  00306	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0030d	0f 8d 21 02 00
	00		 jge	 $LN6@convert_rg

; 444  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  00313	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0031b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031f	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00328	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00331	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 445  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  0033a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00342	48 83 c0 10	 add	 rax, 16
  00346	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0034a	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00353	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  0035c	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 446  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  00365	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0036d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00371	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00375	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0037e	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00387	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 447  :             __m128i x3 = _mm_srli_si128(x2, 4);

  00390	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  00399	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0039e	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003a7	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003b0	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 448  :             x3 = _mm_shuffle_epi8(x3, xMask);

  003b9	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  003c2	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  003cc	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  003d5	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  003de	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 449  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  003e7	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  003f0	66 0f 3a 0f 84
	24 20 01 00 00
	08		 palignr xmm0, XMMWORD PTR x1$14[rsp], 8
  003fb	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00404	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  0040d	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 450  :             x2 = _mm_shuffle_epi8(x2, xMask);

  00416	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  0041f	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  00429	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00432	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0043b	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 451  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  00444	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0044d	66 0f 3a 0f 84
	24 00 01 00 00
	0c		 palignr xmm0, XMMWORD PTR x0$12[rsp], 12
  00458	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00461	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  0046a	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 452  :             x1 = _mm_shuffle_epi8(x1, xMask);

  00473	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0047c	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  00486	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  0048f	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00498	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 453  :             x0 = _mm_shuffle_epi8(x0, xMask);

  004a1	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  004aa	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  004b4	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004bd	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  004c6	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 454  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  004cf	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004d7	48 83 c0 30	 add	 rax, 48			; 00000030H
  004db	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  004e4	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 455  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  004e8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004f0	48 83 c0 20	 add	 rax, 32			; 00000020H
  004f4	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  004fd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 456  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  00501	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00509	48 83 c0 10	 add	 rax, 16
  0050d	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00516	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 457  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  0051a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00522	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0052b	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 458  :         }

  0052f	e9 92 fd ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 459  :         x_fin = width - crop_left - crop_right;

  00534	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  00538	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0053f	2b c8		 sub	 ecx, eax
  00541	8b c1		 mov	 eax, ecx
  00543	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  00547	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 460  :         for (; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  0054e	eb 38		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  00550	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  00557	ff c0		 inc	 eax
  00559	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  00560	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00568	48 83 c0 04	 add	 rax, 4
  0056c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  00574	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0057c	48 83 c0 03	 add	 rax, 3
  00580	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN10@convert_rg:
  00588	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  0058f	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00596	7d 2b		 jge	 SHORT $LN9@convert_rg

; 461  :             *(int *)ptr_dst = *(int *)ptr_src;

  00598	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  005a0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR ptr_src$8[rsp]
  005a8	8b 09		 mov	 ecx, DWORD PTR [rcx]
  005aa	89 08		 mov	 DWORD PTR [rax], ecx

; 462  :             ptr_dst[3] = 0;

  005ac	b8 01 00 00 00	 mov	 eax, 1
  005b1	48 6b c0 03	 imul	 rax, rax, 3
  005b5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$9[rsp]
  005bd	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 463  :         }

  005c1	eb 8d		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 464  :     }

  005c3	e9 60 fc ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 465  : }

  005c8	48 8b cc	 mov	 rcx, rsp
  005cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005d2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005d7	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005df	48 33 cc	 xor	 rcx, rsp
  005e2	e8 00 00 00 00	 call	 __security_check_cookie
  005e7	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  005ee	5f		 pop	 rdi
  005ef	5e		 pop	 rsi
  005f0	c3		 ret	 0
?convert_rgb24r_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T5 = 104
srcLine$ = 120
dstLine$ = 128
MASK_RGB3_TO_RGB4$ = 160
xMask$ = 192
$T6 = 208
y$7 = 224
ptr_src$8 = 232
ptr_dst$9 = 240
x$10 = 248
x_fin$11 = 252
x0$12 = 256
$T13 = 272
x1$14 = 288
$T15 = 304
x2$16 = 320
$T17 = 336
x3$18 = 352
$T19 = 368
$T20 = 384
$T21 = 400
$T22 = 416
$T23 = 432
$T24 = 448
$T25 = 464
$T26 = 488
__$ArrayPad$ = 504
dst$ = 544
src$ = 552
width$ = 560
src_y_pitch_byte$ = 568
src_uv_pitch_byte$ = 576
dst_y_pitch_byte$ = 584
height$ = 592
dst_height$ = 600
thread_id$ = 608
thread_n$ = 616
crop$ = 624
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb32_simd

; 391  : static void __forceinline convert_rgb24_to_rgb32_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR [rsp+544]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 392  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 393  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 394  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 395  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 396  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 60
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 e8
	01 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 397  :     uint8_t *srcLine = (uint8_t *)src[0] + (src_y_pitch_byte * y_range.start_src) + crop_left * 3;;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  00131	48 63 c9	 movsxd	 rcx, ecx
  00134	48 03 c1	 add	 rax, rcx
  00137	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 398  :     uint8_t *dstLine = (uint8_t *)dst[0] + (dst_y_pitch_byte * y_range.start_dst);

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014c	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00151	48 63 c9	 movsxd	 rcx, ecx
  00154	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00160	48 8b c1	 mov	 rax, rcx
  00163	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 399  :     alignas(16) const char MASK_RGB3_TO_RGB4[] = { 0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1 };

  0016b	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp], 0
  00173	c6 84 24 a1 00
	00 00 01	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+1], 1
  0017b	c6 84 24 a2 00
	00 00 02	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+2], 2
  00183	c6 84 24 a3 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+3], -1
  0018b	c6 84 24 a4 00
	00 00 03	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+4], 3
  00193	c6 84 24 a5 00
	00 00 04	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+5], 4
  0019b	c6 84 24 a6 00
	00 00 05	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+6], 5
  001a3	c6 84 24 a7 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+7], -1
  001ab	c6 84 24 a8 00
	00 00 06	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+8], 6
  001b3	c6 84 24 a9 00
	00 00 07	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+9], 7
  001bb	c6 84 24 aa 00
	00 00 08	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+10], 8
  001c3	c6 84 24 ab 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+11], -1
  001cb	c6 84 24 ac 00
	00 00 09	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+12], 9
  001d3	c6 84 24 ad 00
	00 00 0a	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+13], 10
  001db	c6 84 24 ae 00
	00 00 0b	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+14], 11
  001e3	c6 84 24 af 00
	00 00 ff	 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rsp+15], -1

; 400  :     __m128i xMask = _mm_load_si128((__m128i*)MASK_RGB3_TO_RGB4);

  001eb	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR MASK_RGB3_TO_RGB4$[rsp]
  001f4	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  001fd	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00206	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR xMask$[rsp], xmm0

; 401  :     for (int y = 0; y < y_range.len; y++, srcLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0020f	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  0021a	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0021c	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  00223	ff c0		 inc	 eax
  00225	89 84 24 e0 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
  0022c	48 63 84 24 38
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00234	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00239	48 03 c8	 add	 rcx, rax
  0023c	48 8b c1	 mov	 rax, rcx
  0023f	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
  00244	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0024c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00254	48 03 c8	 add	 rcx, rax
  00257	48 8b c1	 mov	 rax, rcx
  0025a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
$LN4@convert_rg:
  00262	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00266	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  0026d	0f 8d 49 03 00
	00		 jge	 $LN3@convert_rg

; 402  :         uint8_t *ptr_src = srcLine;

  00273	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  00278	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax

; 403  :         uint8_t *ptr_dst = dstLine;

  00280	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dstLine$[rsp]
  00288	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax

; 404  :         int x = 0, x_fin = width - crop_left - crop_right - 16;

  00290	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR x$10[rsp], 0
  0029b	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  0029f	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002a6	2b c8		 sub	 ecx, eax
  002a8	8b c1		 mov	 eax, ecx
  002aa	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  002ae	83 e8 10	 sub	 eax, 16
  002b1	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 405  :         for ( ; x < x_fin; x += 16, ptr_dst += 64, ptr_src += 48) {

  002b8	eb 39		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002ba	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  002c1	83 c0 10	 add	 eax, 16
  002c4	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  002cb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  002d3	48 83 c0 40	 add	 rax, 64			; 00000040H
  002d7	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  002df	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  002e7	48 83 c0 30	 add	 rax, 48			; 00000030H
  002eb	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN7@convert_rg:
  002f3	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  002fa	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  00301	0f 8d 21 02 00
	00		 jge	 $LN6@convert_rg

; 406  :             __m128i x0 = _mm_loadu_si128((__m128i*)(ptr_src +  0));

  00307	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  0030f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00313	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  0031c	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00325	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 407  :             __m128i x1 = _mm_loadu_si128((__m128i*)(ptr_src + 16));

  0032e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00336	48 83 c0 10	 add	 rax, 16
  0033a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0033e	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00347	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  00350	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 408  :             __m128i x2 = _mm_loadu_si128((__m128i*)(ptr_src + 32));

  00359	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00361	48 83 c0 20	 add	 rax, 32			; 00000020H
  00365	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00369	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  00372	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0037b	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 409  :             __m128i x3 = _mm_srli_si128(x2, 4);

  00384	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  0038d	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00392	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  0039b	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003a4	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 410  :             x3 = _mm_shuffle_epi8(x3, xMask);

  003ad	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  003b6	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  003c0	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  003c9	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  003d2	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x3$18[rsp], xmm0

; 411  :             x2 = _mm_alignr_epi8(x2, x1, 8);

  003db	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  003e4	66 0f 3a 0f 84
	24 20 01 00 00
	08		 palignr xmm0, XMMWORD PTR x1$14[rsp], 8
  003ef	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  003f8	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T21[rsp]
  00401	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 412  :             x2 = _mm_shuffle_epi8(x2, xMask);

  0040a	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  00413	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  0041d	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00426	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0042f	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR x2$16[rsp], xmm0

; 413  :             x1 = _mm_alignr_epi8(x1, x0, 12);

  00438	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00441	66 0f 3a 0f 84
	24 00 01 00 00
	0c		 palignr xmm0, XMMWORD PTR x0$12[rsp], 12
  0044c	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00455	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T23[rsp]
  0045e	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 414  :             x1 = _mm_shuffle_epi8(x1, xMask);

  00467	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  00470	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  0047a	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00483	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  0048c	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$14[rsp], xmm0

; 415  :             x0 = _mm_shuffle_epi8(x0, xMask);

  00495	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0049e	66 0f 38 00 84
	24 c0 00 00 00	 pshufb	 xmm0, XMMWORD PTR xMask$[rsp]
  004a8	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004b1	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  004ba	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x0$12[rsp], xmm0

; 416  :             _mm_storeu_si128((__m128i*)(ptr_dst + 48), x3);

  004c3	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004cb	48 83 c0 30	 add	 rax, 48			; 00000030H
  004cf	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$18[rsp]
  004d8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 417  :             _mm_storeu_si128((__m128i*)(ptr_dst + 32), x2);

  004dc	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004e4	48 83 c0 20	 add	 rax, 32			; 00000020H
  004e8	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$16[rsp]
  004f1	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 418  :             _mm_storeu_si128((__m128i*)(ptr_dst + 16), x1);

  004f5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  004fd	48 83 c0 10	 add	 rax, 16
  00501	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$14[rsp]
  0050a	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 419  :             _mm_storeu_si128((__m128i*)(ptr_dst +  0), x0);

  0050e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00516	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$12[rsp]
  0051f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 420  :         }

  00523	e9 92 fd ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 421  :         x_fin = width - crop_left - crop_right;

  00528	8b 44 24 30	 mov	 eax, DWORD PTR crop_left$[rsp]
  0052c	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00533	2b c8		 sub	 ecx, eax
  00535	8b c1		 mov	 eax, ecx
  00537	2b 44 24 38	 sub	 eax, DWORD PTR crop_right$[rsp]
  0053b	89 84 24 fc 00
	00 00		 mov	 DWORD PTR x_fin$11[rsp], eax

; 422  :         for ( ; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  00542	eb 38		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  00544	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR x$10[rsp]
  0054b	ff c0		 inc	 eax
  0054d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR x$10[rsp], eax
  00554	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  0055c	48 83 c0 04	 add	 rax, 4
  00560	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR ptr_dst$9[rsp], rax
  00568	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR ptr_src$8[rsp]
  00570	48 83 c0 03	 add	 rax, 3
  00574	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR ptr_src$8[rsp], rax
$LN10@convert_rg:
  0057c	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR x_fin$11[rsp]
  00583	39 84 24 f8 00
	00 00		 cmp	 DWORD PTR x$10[rsp], eax
  0058a	7d 2b		 jge	 SHORT $LN9@convert_rg

; 423  :             *(int *)ptr_dst = *(int *)ptr_src;

  0058c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR ptr_dst$9[rsp]
  00594	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR ptr_src$8[rsp]
  0059c	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0059e	89 08		 mov	 DWORD PTR [rax], ecx

; 424  :             ptr_dst[3] = 0;

  005a0	b8 01 00 00 00	 mov	 eax, 1
  005a5	48 6b c0 03	 imul	 rax, rax, 3
  005a9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ptr_dst$9[rsp]
  005b1	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 425  :         }

  005b5	eb 8d		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 426  :     }

  005b7	e9 60 fc ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 427  : }

  005bc	48 8b cc	 mov	 rcx, rsp
  005bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  005c6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  005cb	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005d3	48 33 cc	 xor	 rcx, rsp
  005d6	e8 00 00 00 00	 call	 __security_check_cookie
  005db	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  005e2	5f		 pop	 rdi
  005e3	5e		 pop	 rsi
  005e4	c3		 ret	 0
?convert_rgb24_to_rgb32_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T6 = 104
srcLine$ = 120
dstYLine$ = 128
dstCLine$ = 136
y$7 = 144
i$8 = 148
p$9 = 152
pw$10 = 160
x0$11 = 192
x1$12 = 240
x3$13 = 272
x_fin$14 = 288
x$15 = 292
$T16 = 304
$T17 = 320
$T18 = 336
$T19 = 352
$T20 = 368
$T21 = 392
$T22 = 416
$T23 = 432
__$ArrayPad$ = 448
dst$ = 496
src$ = 504
width$ = 512
src_y_pitch_byte$ = 520
src_uv_pitch_byte$ = 528
dst_y_pitch_byte$ = 536
height$ = 544
dst_height$ = 552
thread_id$ = 560
thread_n$ = 568
crop$ = 576
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i_simd

; 233  : static void __forceinline convert_yuy2_to_nv12_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+496]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 234  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 235  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 236  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 237  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 238  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 30
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 239  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00131	48 03 c1	 add	 rax, rcx
  00134	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 240  :     uint8_t *dstYLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 00	 imul	 rax, rax, 0
  00142	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00149	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00159	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 241  :     uint8_t *dstCLine = (uint8_t *)dst[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 01	 imul	 rax, rax, 1
  00171	8b 4c 24 4c	 mov	 ecx, DWORD PTR y_range$[rsp+4]
  00175	d1 f9		 sar	 ecx, 1
  00177	8b 94 24 18 02
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017e	0f af d1	 imul	 edx, ecx
  00181	8b ca		 mov	 ecx, edx
  00183	48 63 c9	 movsxd	 rcx, ecx
  00186	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 242  :     for (int y = 0; y < y_range.len; y += 4) {

  0019d	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  001a8	eb 11		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001aa	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  001b1	83 c0 04	 add	 eax, 4
  001b4	89 84 24 90 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
$LN4@convert_yu:
  001bb	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001bf	39 84 24 90 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  001c6	0f 8d 1f 03 00
	00		 jge	 $LN3@convert_yu

; 243  :         for (int i = 0; i < 2; i++) {

  001cc	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$8[rsp], 0
  001d7	eb 10		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001d9	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR i$8[rsp]
  001e0	ff c0		 inc	 eax
  001e2	89 84 24 94 00
	00 00		 mov	 DWORD PTR i$8[rsp], eax
$LN7@convert_yu:
  001e9	83 bc 24 94 00
	00 00 02	 cmp	 DWORD PTR i$8[rsp], 2
  001f1	0f 8d b3 02 00
	00		 jge	 $LN6@convert_yu

; 244  :             uint8_t *p = srcLine;

  001f7	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  001fc	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax

; 245  :             uint8_t *pw = p + (src_y_pitch_byte<<1);

  00204	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  0020b	d1 e0		 shl	 eax, 1
  0020d	48 98		 cdqe
  0020f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR p$9[rsp]
  00217	48 03 c8	 add	 rcx, rax
  0021a	48 8b c1	 mov	 rax, rcx
  0021d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$10[rsp], rax

; 246  :             __m128i x0, x1, x3;
; 247  :             const int x_fin = width - crop_right - crop_left;

  00225	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00229	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00230	2b c8		 sub	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00238	89 84 24 20 01
	00 00		 mov	 DWORD PTR x_fin$14[rsp], eax

; 248  :             for (int x = 0; x < x_fin; x += 16, p += 32, pw += 32) {

  0023f	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$15[rsp], 0
  0024a	eb 39		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  0024c	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR x$15[rsp]
  00253	83 c0 10	 add	 eax, 16
  00256	89 84 24 24 01
	00 00		 mov	 DWORD PTR x$15[rsp], eax
  0025d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  00265	48 83 c0 20	 add	 rax, 32			; 00000020H
  00269	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax
  00271	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  00279	48 83 c0 20	 add	 rax, 32			; 00000020H
  0027d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$10[rsp], rax
$LN10@convert_yu:
  00285	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR x_fin$14[rsp]
  0028c	39 84 24 24 01
	00 00		 cmp	 DWORD PTR x$15[rsp], eax
  00293	0f 8d b8 01 00
	00		 jge	 $LN9@convert_yu

; 249  :                 //-----------    1+i行目   ---------------
; 250  :                 x0 = _mm_loadu_si128((const __m128i *)(p+ 0));

  00299	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  002a1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a5	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  002ae	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  002b7	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 251  :                 x1 = _mm_loadu_si128((const __m128i *)(p+16));

  002c0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  002c8	48 83 c0 10	 add	 rax, 16
  002cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002d0	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  002d9	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  002e2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 252  : 
; 253  :                 separate_low_up(x0, x1);

  002eb	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  002f3	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  002fb	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 254  :                 x3 = x1;

  00300	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  00309	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR x3$13[rsp], xmm0

; 255  : 
; 256  :                 _mm_store_si128((__m128i *)(dstYLine + x), x0);

  00312	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR x$15[rsp]
  0031a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  00322	48 03 c8	 add	 rcx, rax
  00325	48 8b c1	 mov	 rax, rcx
  00328	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00331	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 257  :                 //-----------1+i行目終了---------------
; 258  : 
; 259  :                 //-----------3+i行目---------------
; 260  :                 x0 = _mm_loadu_si128((const __m128i *)(pw+ 0));

  00335	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  0033d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00341	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  0034a	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00353	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 261  :                 x1 = _mm_loadu_si128((const __m128i *)(pw+16));

  0035c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$10[rsp]
  00364	48 83 c0 10	 add	 rax, 16
  00368	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0036c	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00375	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0037e	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 262  : 
; 263  :                 separate_low_up(x0, x1);

  00387	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  0038f	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  00397	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 264  : 
; 265  :                 _mm_store_si128((__m128i *)(dstYLine + (dst_y_pitch_byte<<1) + x), x0);

  0039c	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  003a3	d1 e0		 shl	 eax, 1
  003a5	48 98		 cdqe
  003a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  003af	48 03 c8	 add	 rcx, rax
  003b2	48 8b c1	 mov	 rax, rcx
  003b5	48 63 8c 24 24
	01 00 00	 movsxd	 rcx, DWORD PTR x$15[rsp]
  003bd	48 03 c1	 add	 rax, rcx
  003c0	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  003c9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 266  :                 //-----------3+i行目終了---------------
; 267  :                 x0 = yuv422_to_420_i_interpolate(x3, x1, i);

  003cd	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  003d6	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  003df	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$13[rsp]
  003e8	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003f1	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR i$8[rsp]
  003f9	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  00401	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00409	e8 00 00 00 00	 call	 ?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ; yuv422_to_420_i_interpolate
  0040e	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00417	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00420	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 268  : 
; 269  :                 _mm_store_si128((__m128i *)(dstCLine + x), x0);

  00429	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR x$15[rsp]
  00431	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  00439	48 03 c8	 add	 rcx, rax
  0043c	48 8b c1	 mov	 rax, rcx
  0043f	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00448	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 270  :             }

  0044c	e9 fb fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 271  :             srcLine  += src_y_pitch_byte;

  00451	48 63 84 24 08
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00459	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  0045e	48 03 c8	 add	 rcx, rax
  00461	48 8b c1	 mov	 rax, rcx
  00464	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 272  :             dstYLine += dst_y_pitch_byte;

  00469	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00471	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  00479	48 03 c8	 add	 rcx, rax
  0047c	48 8b c1	 mov	 rax, rcx
  0047f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 273  :             dstCLine += dst_y_pitch_byte;

  00487	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0048f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  00497	48 03 c8	 add	 rcx, rax
  0049a	48 8b c1	 mov	 rax, rcx
  0049d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 274  :         }

  004a5	e9 2f fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 275  :         srcLine  += src_y_pitch_byte << 1;

  004aa	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  004b1	d1 e0		 shl	 eax, 1
  004b3	48 98		 cdqe
  004b5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  004ba	48 03 c8	 add	 rcx, rax
  004bd	48 8b c1	 mov	 rax, rcx
  004c0	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 276  :         dstYLine += dst_y_pitch_byte << 1;

  004c5	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  004cc	d1 e0		 shl	 eax, 1
  004ce	48 98		 cdqe
  004d0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  004d8	48 03 c8	 add	 rcx, rax
  004db	48 8b c1	 mov	 rax, rcx
  004de	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 277  :     }

  004e6	e9 bf fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 278  : }

  004eb	48 8b cc	 mov	 rcx, rsp
  004ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004f5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004fa	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00502	48 33 cc	 xor	 rcx, rsp
  00505	e8 00 00 00 00	 call	 __security_check_cookie
  0050a	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  00511	5f		 pop	 rdi
  00512	5e		 pop	 rsi
  00513	c3		 ret	 0
?convert_yuy2_to_nv12_i_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x0$ = 16
x1$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
$T11 = 208
$T12 = 224
$T13 = 240
y_up$ = 272
y_down$ = 280
i$ = 288
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z PROC ; yuv422_to_420_i_interpolate

; 205  : static __forceinline __m128i yuv422_to_420_i_interpolate(__m128i y_up, __m128i y_down, int i) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]

; 206  :     __m128i x0, x1;
; 207  : #if USE_SSSE3
; 208  :     x0 = _mm_unpacklo_epi8(y_down, y_up);

  0002e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00036	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  0003e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00042	66 0f 60 01	 punpcklbw xmm0, XMMWORD PTR [rcx]
  00046	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004c	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00052	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 209  :     x1 = _mm_unpackhi_epi8(y_down, y_up);

  00058	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00060	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  00068	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006c	66 0f 68 01	 punpckhbw xmm0, XMMWORD PTR [rcx]
  00070	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00076	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0007c	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 210  :     x0 = _mm_maddubs_epi16(x0, xC_INTERLACE_WEIGHT(i));

  00082	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0008a	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000a5	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  000ab	66 0f 38 04 44
	24 50		 pmaddubsw xmm0, XMMWORD PTR $T3[rsp]
  000b2	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000b8	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000be	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 211  :     x1 = _mm_maddubs_epi16(x1, xC_INTERLACE_WEIGHT(i));

  000c4	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  000cc	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  000d7	48 03 c8	 add	 rcx, rax
  000da	48 8b c1	 mov	 rax, rcx
  000dd	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000e1	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000e7	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  000ed	66 0f 38 04 44
	24 70		 pmaddubsw xmm0, XMMWORD PTR $T5[rsp]
  000f4	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000fd	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00106	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 212  : #else
; 213  :     __m128i x2, x3, xC[2];
; 214  :     xC[0] = y_up;
; 215  :     xC[1] = y_down;
; 216  :     x0 = _mm_unpacklo_epi8(xC[i], _mm_setzero_si128());
; 217  :     x1 = _mm_unpackhi_epi8(xC[i], _mm_setzero_si128());
; 218  :     x0 = _mm_mullo_epi16(x0, _mm_set1_epi16(3));
; 219  :     x1 = _mm_mullo_epi16(x1, _mm_set1_epi16(3));
; 220  :     x2 = _mm_unpacklo_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 221  :     x3 = _mm_unpackhi_epi8(xC[(i+1)&0x01], _mm_setzero_si128());
; 222  :     x0 = _mm_add_epi16(x0, x2);
; 223  :     x1 = _mm_add_epi16(x1, x3);
; 224  : #endif
; 225  :     x0 = _mm_add_epi16(x0, _mm_set1_epi16(2));

  0010c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  00114	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0011d	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00123	66 0f fd 84 24
	90 00 00 00	 paddw	 xmm0, XMMWORD PTR $T7[rsp]
  0012c	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00135	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  0013e	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 226  :     x1 = _mm_add_epi16(x1, _mm_set1_epi16(2));

  00144	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00020002000200020002000200020002
  0014c	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00155	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0015b	66 0f fd 84 24
	b0 00 00 00	 paddw	 xmm0, XMMWORD PTR $T9[rsp]
  00164	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0016d	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00176	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 227  :     x0 = _mm_srai_epi16(x0, 2);

  0017c	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00182	66 0f 71 e0 02	 psraw	 xmm0, 2
  00187	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00190	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00199	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 228  :     x1 = _mm_srai_epi16(x1, 2);

  0019f	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001a5	66 0f 71 e0 02	 psraw	 xmm0, 2
  001aa	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001b3	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001bc	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 229  :     x0 = _mm_packus_epi16(x0, x1);

  001c2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  001c8	66 0f 67 44 24
	20		 packuswb xmm0, XMMWORD PTR x1$[rsp]
  001ce	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  001d7	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  001e0	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 230  :     return x0;

  001e6	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x0$[rsp]

; 231  : }

  001ec	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  001f3	5f		 pop	 rdi
  001f4	c3		 ret	 0
?yuv422_to_420_i_interpolate@@YA?AT__m128i@@T1@0H@Z ENDP ; yuv422_to_420_i_interpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T6 = 104
srcLine$ = 120
dstYLine$ = 128
dstCLine$ = 136
y$7 = 144
p$8 = 152
pw$9 = 160
x_fin$10 = 168
x0$11 = 192
x1$12 = 240
x3$13 = 272
x$14 = 288
$T15 = 304
$T16 = 320
$T17 = 336
$T18 = 352
$T19 = 368
$T20 = 392
__$ArrayPad$ = 408
dst$ = 448
src$ = 456
width$ = 464
src_y_pitch_byte$ = 472
src_uv_pitch_byte$ = 480
dst_y_pitch_byte$ = 488
height$ = 496
dst_height$ = 504
thread_id$ = 512
thread_n$ = 520
crop$ = 528
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_simd

; 162  : static void __forceinline convert_yuy2_to_nv12_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+448]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 163  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 164  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 165  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 166  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 167  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 f0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 00
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR $T20[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T6[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 168  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00131	48 03 c1	 add	 rax, rcx
  00134	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 169  :     uint8_t *dstYLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 00	 imul	 rax, rax, 0
  00142	8b 8c 24 e8 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00149	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  0014e	48 63 c9	 movsxd	 rcx, ecx
  00151	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00159	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 170  :     uint8_t *dstCLine = (uint8_t *)dst[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 01	 imul	 rax, rax, 1
  00171	8b 4c 24 4c	 mov	 ecx, DWORD PTR y_range$[rsp+4]
  00175	d1 f9		 sar	 ecx, 1
  00177	8b 94 24 e8 01
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017e	0f af d1	 imul	 edx, ecx
  00181	8b ca		 mov	 ecx, edx
  00183	48 63 c9	 movsxd	 rcx, ecx
  00186	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 171  :     for (int y = 0; y < y_range.len; y += 2) {

  0019d	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$7[rsp], 0
  001a8	eb 11		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001aa	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR y$7[rsp]
  001b1	83 c0 02	 add	 eax, 2
  001b4	89 84 24 90 00
	00 00		 mov	 DWORD PTR y$7[rsp], eax
$LN4@convert_yu:
  001bb	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001bf	39 84 24 90 00
	00 00		 cmp	 DWORD PTR y$7[rsp], eax
  001c6	0f 8d 84 02 00
	00		 jge	 $LN3@convert_yu

; 172  :         uint8_t *p = srcLine;

  001cc	48 8b 44 24 78	 mov	 rax, QWORD PTR srcLine$[rsp]
  001d1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$8[rsp], rax

; 173  :         uint8_t *pw = p + src_y_pitch_byte;

  001d9	48 63 84 24 d8
	01 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR p$8[rsp]
  001e9	48 03 c8	 add	 rcx, rax
  001ec	48 8b c1	 mov	 rax, rcx
  001ef	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$9[rsp], rax

; 174  :         const int x_fin = width - crop_right - crop_left;

  001f7	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  001fb	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00202	2b c8		 sub	 ecx, eax
  00204	8b c1		 mov	 eax, ecx
  00206	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0020a	89 84 24 a8 00
	00 00		 mov	 DWORD PTR x_fin$10[rsp], eax

; 175  :         __m128i x0, x1, x3;
; 176  :         for (int x = 0; x < x_fin; x += 16, p += 32, pw += 32) {

  00211	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR x$14[rsp], 0
  0021c	eb 39		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0021e	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR x$14[rsp]
  00225	83 c0 10	 add	 eax, 16
  00228	89 84 24 20 01
	00 00		 mov	 DWORD PTR x$14[rsp], eax
  0022f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  00237	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$8[rsp], rax
  00243	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$9[rsp]
  0024b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0024f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pw$9[rsp], rax
$LN7@convert_yu:
  00257	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR x_fin$10[rsp]
  0025e	39 84 24 20 01
	00 00		 cmp	 DWORD PTR x$14[rsp], eax
  00265	0f 8d 86 01 00
	00		 jge	 $LN6@convert_yu

; 177  :             //-----------1行目---------------
; 178  :             x0 = _mm_loadu_si128((const __m128i *)(p+ 0));

  0026b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  00273	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00277	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00280	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  00289	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 179  :             x1 = _mm_loadu_si128((const __m128i *)(p+16));

  00292	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  0029a	48 83 c0 10	 add	 rax, 16
  0029e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a2	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  002ab	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  002b4	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 180  : 
; 181  :             separate_low_up(x0, x1);

  002bd	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  002c5	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  002cd	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 182  :             x3 = x1;

  002d2	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  002db	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR x3$13[rsp], xmm0

; 183  : 
; 184  :             _mm_store_si128((__m128i *)(dstYLine + x), x0);

  002e4	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR x$14[rsp]
  002ec	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  002f4	48 03 c8	 add	 rcx, rax
  002f7	48 8b c1	 mov	 rax, rcx
  002fa	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00303	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 185  :             //-----------1行目終了---------------
; 186  : 
; 187  :             //-----------2行目---------------
; 188  :             x0 = _mm_loadu_si128((const __m128i *)(pw+ 0));

  00307	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$9[rsp]
  0030f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00313	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0031c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00325	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR x0$11[rsp], xmm0

; 189  :             x1 = _mm_loadu_si128((const __m128i *)(pw+16));

  0032e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pw$9[rsp]
  00336	48 83 c0 10	 add	 rax, 16
  0033a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0033e	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00347	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00350	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 190  : 
; 191  :             separate_low_up(x0, x1);

  00359	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR x1$12[rsp]
  00361	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR x0$11[rsp]
  00369	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m128i@@0@Z ; separate_low_up

; 192  : 
; 193  :             _mm_store_si128((__m128i *)(dstYLine + dst_y_pitch_byte + x), x0);

  0036e	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00376	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  0037e	48 03 c8	 add	 rcx, rax
  00381	48 8b c1	 mov	 rax, rcx
  00384	48 63 8c 24 20
	01 00 00	 movsxd	 rcx, DWORD PTR x$14[rsp]
  0038c	48 03 c1	 add	 rax, rcx
  0038f	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x0$11[rsp]
  00398	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 194  :             //-----------2行目終了---------------
; 195  : 
; 196  :             x1 = _mm_avg_epu8(x1, x3);

  0039c	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  003a5	66 0f e0 84 24
	10 01 00 00	 pavgb	 xmm0, XMMWORD PTR x3$13[rsp]
  003ae	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003b7	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003c0	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR x1$12[rsp], xmm0

; 197  :             _mm_store_si128((__m128i *)(dstCLine + x), x1);

  003c9	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR x$14[rsp]
  003d1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  003d9	48 03 c8	 add	 rcx, rax
  003dc	48 8b c1	 mov	 rax, rcx
  003df	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$12[rsp]
  003e8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 198  :         }

  003ec	e9 2d fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 199  :         srcLine  += src_y_pitch_byte << 1;

  003f1	8b 84 24 d8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  003f8	d1 e0		 shl	 eax, 1
  003fa	48 98		 cdqe
  003fc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  00401	48 03 c8	 add	 rcx, rax
  00404	48 8b c1	 mov	 rax, rcx
  00407	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 200  :         dstYLine += dst_y_pitch_byte << 1;

  0040c	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  00413	d1 e0		 shl	 eax, 1
  00415	48 98		 cdqe
  00417	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstYLine$[rsp]
  0041f	48 03 c8	 add	 rcx, rax
  00422	48 8b c1	 mov	 rax, rcx
  00425	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstYLine$[rsp], rax

; 201  :         dstCLine += dst_y_pitch_byte;

  0042d	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00435	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstCLine$[rsp]
  0043d	48 03 c8	 add	 rcx, rax
  00440	48 8b c1	 mov	 rax, rcx
  00443	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstCLine$[rsp], rax

; 202  :     }

  0044b	e9 5a fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 203  : }

  00450	48 8b cc	 mov	 rcx, rsp
  00453	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0045a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0045f	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00467	48 33 cc	 xor	 rcx, rsp
  0046a	e8 00 00 00 00	 call	 __security_check_cookie
  0046f	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00476	5f		 pop	 rdi
  00477	5e		 pop	 rsi
  00478	c3		 ret	 0
?convert_yuy2_to_nv12_simd@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x4$ = 0
x5$ = 16
xMaskLowByte$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$T9 = 176
$T10 = 192
x0_return_lower$ = 224
x1_return_upper$ = 232
?separate_low_up@@YAXAEAT__m128i@@0@Z PROC		; separate_low_up

; 146  : static __forceinline void separate_low_up(__m128i& x0_return_lower, __m128i& x1_return_upper) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]

; 147  :     __m128i x4, x5;
; 148  :     const __m128i xMaskLowByte = _mm_srli_epi16(_mm_cmpeq_epi8(_mm_setzero_si128(), _mm_setzero_si128()), 8);

  00029	66 0f ef c0	 pxor	 xmm0, xmm0
  0002d	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00033	66 0f ef c0	 pxor	 xmm0, xmm0
  00037	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003d	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00043	66 0f 74 44 24
	40		 pcmpeqb xmm0, XMMWORD PTR $T2[rsp]
  00049	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  0004f	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00055	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0005a	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  00060	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00066	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR xMaskLowByte$[rsp], xmm0

; 149  :     x4 = _mm_srli_epi16(x0_return_lower, 8);

  0006c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  00074	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00078	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0007d	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00083	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00089	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 150  :     x5 = _mm_srli_epi16(x1_return_upper, 8);

  0008e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00096	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0009f	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000a8	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000b1	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 151  : 
; 152  :     x0_return_lower = _mm_and_si128(x0_return_lower, xMaskLowByte);

  000b7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000bf	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000c3	66 0f db 44 24
	20		 pand	 xmm0, XMMWORD PTR xMaskLowByte$[rsp]
  000c9	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000d2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000da	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000e3	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 153  :     x1_return_upper = _mm_and_si128(x1_return_upper, xMaskLowByte);

  000e7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  000ef	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000f3	66 0f db 44 24
	20		 pand	 xmm0, XMMWORD PTR xMaskLowByte$[rsp]
  000f9	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00102	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  0010a	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00113	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 154  : 
; 155  :     x0_return_lower = _mm_packus_epi16(x0_return_lower, x1_return_upper);

  00117	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  0011f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR x1_return_upper$[rsp]
  00127	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0012b	66 0f 67 01	 packuswb xmm0, XMMWORD PTR [rcx]
  0012f	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00138	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  00140	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00149	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 156  :     x1_return_upper = _mm_packus_epi16(x4, x5);

  0014d	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00152	66 0f 67 44 24
	10		 packuswb xmm0, XMMWORD PTR x5$[rsp]
  00158	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00161	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00169	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00172	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 157  : }

  00176	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0017d	5f		 pop	 rdi
  0017e	c3		 ret	 0
?separate_low_up@@YAXAEAT__m128i@@0@Z ENDP		; separate_low_up
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 16
a$ = 48
b$ = 56
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z PROC	; _mm_packus_epi32_simd

; 98   : static __forceinline __m128i _mm_packus_epi32_simd(__m128i a, __m128i b) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 99   : #if USE_SSE41
; 100  :     return _mm_packus_epi32(a, b);

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$[rsp]
  0002d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00031	66 0f 38 2b 01	 packusdw xmm0, XMMWORD PTR [rcx]
  00036	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003c	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]

; 101  : #else
; 102  :     alignas(64) static const uint32_t VAL[2][4] = {
; 103  :         { 0x00008000, 0x00008000, 0x00008000, 0x00008000 },
; 104  :         { 0x80008000, 0x80008000, 0x80008000, 0x80008000 }
; 105  :     };
; 106  : #define LOAD_32BIT_0x8000 _mm_load_si128((__m128i *)VAL[0])
; 107  : #define LOAD_16BIT_0x8000 _mm_load_si128((__m128i *)VAL[1])
; 108  :     a = _mm_sub_epi32(a, LOAD_32BIT_0x8000);
; 109  :     b = _mm_sub_epi32(b, LOAD_32BIT_0x8000);
; 110  :     a = _mm_packs_epi32(a, b);
; 111  :     return _mm_add_epi16(a, LOAD_16BIT_0x8000);
; 112  : #undef LOAD_32BIT_0x8000
; 113  : #undef LOAD_16BIT_0x8000
; 114  : #endif
; 115  : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ENDP	; _mm_packus_epi32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
i$1 = 0
dst_fin$ = 8
dst_aligned_fin$ = 16
x0$ = 32
x1$ = 48
x2$ = 64
x3$ = 80
start_align_diff$ = 96
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
dst_tmp$ = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
dst$ = 288
src$ = 296
size$ = 304
?memcpy_sse@@YAXPEAEPEBEH@Z PROC			; memcpy_sse

; 44   : static void __forceinline memcpy_sse(uint8_t *dst, const uint8_t *src, int size) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]

; 45   :     if (size < 64) {

  0002e	83 bc 24 30 01
	00 00 40	 cmp	 DWORD PTR size$[rsp], 64 ; 00000040H
  00036	7d 44		 jge	 SHORT $LN8@memcpy_sse

; 46   :         for (int i = 0; i < size; i++)

  00038	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$1[rsp], 0
  0003f	eb 08		 jmp	 SHORT $LN4@memcpy_sse
$LN2@memcpy_sse:
  00041	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00044	ff c0		 inc	 eax
  00046	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@memcpy_sse:
  00049	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR size$[rsp]
  00050	39 04 24	 cmp	 DWORD PTR i$1[rsp], eax
  00053	7d 22		 jge	 SHORT $LN3@memcpy_sse

; 47   :             dst[i] = src[i];

  00055	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00059	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$1[rsp]
  0005d	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00065	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR src$[rsp]
  0006d	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00072	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00075	eb ca		 jmp	 SHORT $LN2@memcpy_sse
$LN3@memcpy_sse:

; 48   :         return;

  00077	e9 e3 02 00 00	 jmp	 $LN1@memcpy_sse
$LN8@memcpy_sse:

; 49   :     }
; 50   :     uint8_t *dst_fin = dst + size;

  0007c	48 63 84 24 30
	01 00 00	 movsxd	 rax, DWORD PTR size$[rsp]
  00084	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 89 44 24 08	 mov	 QWORD PTR dst_fin$[rsp], rax

; 51   :     uint8_t *dst_aligned_fin = (uint8_t *)(((size_t)(dst_fin + 15) & ~15) - 64);

  00097	48 8b 44 24 08	 mov	 rax, QWORD PTR dst_fin$[rsp]
  0009c	48 83 c0 0f	 add	 rax, 15
  000a0	48 83 e0 f0	 and	 rax, -16
  000a4	48 83 e8 40	 sub	 rax, 64			; 00000040H
  000a8	48 89 44 24 10	 mov	 QWORD PTR dst_aligned_fin$[rsp], rax

; 52   :     __m128 x0, x1, x2, x3;
; 53   :     const int start_align_diff = (int)((size_t)dst & 15);

  000ad	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000b5	48 83 e0 0f	 and	 rax, 15
  000b9	89 44 24 60	 mov	 DWORD PTR start_align_diff$[rsp], eax

; 54   :     if (start_align_diff) {

  000bd	83 7c 24 60 00	 cmp	 DWORD PTR start_align_diff$[rsp], 0
  000c2	74 6c		 je	 SHORT $LN9@memcpy_sse

; 55   :         x0 = _mm_loadu_ps((float*)src);

  000c4	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  000cc	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  000cf	0f 29 44 24 70	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  000d4	0f 28 44 24 70	 movaps	 xmm0, XMMWORD PTR $T2[rsp]
  000d9	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 56   :         _mm_storeu_ps((float*)dst, x0);

  000de	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000e6	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  000eb	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 57   :         dst += 16 - start_align_diff;

  000ee	b8 10 00 00 00	 mov	 eax, 16
  000f3	2b 44 24 60	 sub	 eax, DWORD PTR start_align_diff$[rsp]
  000f7	48 98		 cdqe
  000f9	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00101	48 03 c8	 add	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR dst$[rsp], rax

; 58   :         src += 16 - start_align_diff;

  0010f	b8 10 00 00 00	 mov	 eax, 16
  00114	2b 44 24 60	 sub	 eax, DWORD PTR start_align_diff$[rsp]
  00118	48 98		 cdqe
  0011a	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00122	48 03 c8	 add	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN9@memcpy_sse:

; 59   :     }
; 60   :     for ( ; dst < dst_aligned_fin; dst += 64, src += 64) {

  00130	eb 28		 jmp	 SHORT $LN7@memcpy_sse
$LN5@memcpy_sse:
  00132	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0013a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0013e	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR dst$[rsp], rax
  00146	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0014e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00152	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN7@memcpy_sse:
  0015a	48 8b 44 24 10	 mov	 rax, QWORD PTR dst_aligned_fin$[rsp]
  0015f	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR dst$[rsp], rax
  00167	0f 83 dd 00 00
	00		 jae	 $LN6@memcpy_sse

; 61   :         x0 = _mm_loadu_ps((float*)(src +  0));

  0016d	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00175	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00178	0f 29 84 24 80
	00 00 00	 movaps	 XMMWORD PTR $T3[rsp], xmm0
  00180	0f 28 84 24 80
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T3[rsp]
  00188	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 62   :         x1 = _mm_loadu_ps((float*)(src + 16));

  0018d	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00195	48 83 c0 10	 add	 rax, 16
  00199	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0019c	0f 29 84 24 90
	00 00 00	 movaps	 XMMWORD PTR $T4[rsp], xmm0
  001a4	0f 28 84 24 90
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T4[rsp]
  001ac	0f 29 44 24 30	 movaps	 XMMWORD PTR x1$[rsp], xmm0

; 63   :         x2 = _mm_loadu_ps((float*)(src + 32));

  001b1	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001b9	48 83 c0 20	 add	 rax, 32			; 00000020H
  001bd	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001c0	0f 29 84 24 a0
	00 00 00	 movaps	 XMMWORD PTR $T5[rsp], xmm0
  001c8	0f 28 84 24 a0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T5[rsp]
  001d0	0f 29 44 24 40	 movaps	 XMMWORD PTR x2$[rsp], xmm0

; 64   :         x3 = _mm_loadu_ps((float*)(src + 48));

  001d5	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001dd	48 83 c0 30	 add	 rax, 48			; 00000030H
  001e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001e4	0f 29 84 24 b0
	00 00 00	 movaps	 XMMWORD PTR $T6[rsp], xmm0
  001ec	0f 28 84 24 b0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T6[rsp]
  001f4	0f 29 44 24 50	 movaps	 XMMWORD PTR x3$[rsp], xmm0

; 65   :         _mm_store_ps((float*)(dst +  0), x0);

  001f9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00201	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  00206	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 66   :         _mm_store_ps((float*)(dst + 16), x1);

  00209	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00211	48 83 c0 10	 add	 rax, 16
  00215	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR x1$[rsp]
  0021a	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 67   :         _mm_store_ps((float*)(dst + 32), x2);

  0021d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00225	48 83 c0 20	 add	 rax, 32			; 00000020H
  00229	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR x2$[rsp]
  0022e	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 68   :         _mm_store_ps((float*)(dst + 48), x3);

  00231	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00239	48 83 c0 30	 add	 rax, 48			; 00000030H
  0023d	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR x3$[rsp]
  00242	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 69   :     }

  00245	e9 e8 fe ff ff	 jmp	 $LN5@memcpy_sse
$LN6@memcpy_sse:

; 70   :     uint8_t *dst_tmp = dst_fin - 64;

  0024a	48 8b 44 24 08	 mov	 rax, QWORD PTR dst_fin$[rsp]
  0024f	48 83 e8 40	 sub	 rax, 64			; 00000040H
  00253	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR dst_tmp$[rsp], rax

; 71   :     src -= (dst - dst_tmp);

  0025b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  00263	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0026b	48 2b c8	 sub	 rcx, rax
  0026e	48 8b c1	 mov	 rax, rcx
  00271	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00279	48 2b c8	 sub	 rcx, rax
  0027c	48 8b c1	 mov	 rax, rcx
  0027f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR src$[rsp], rax

; 72   :     x0 = _mm_loadu_ps((float*)(src +  0));

  00287	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0028f	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00292	0f 29 84 24 d0
	00 00 00	 movaps	 XMMWORD PTR $T7[rsp], xmm0
  0029a	0f 28 84 24 d0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T7[rsp]
  002a2	0f 29 44 24 20	 movaps	 XMMWORD PTR x0$[rsp], xmm0

; 73   :     x1 = _mm_loadu_ps((float*)(src + 16));

  002a7	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002af	48 83 c0 10	 add	 rax, 16
  002b3	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002b6	0f 29 84 24 e0
	00 00 00	 movaps	 XMMWORD PTR $T8[rsp], xmm0
  002be	0f 28 84 24 e0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T8[rsp]
  002c6	0f 29 44 24 30	 movaps	 XMMWORD PTR x1$[rsp], xmm0

; 74   :     x2 = _mm_loadu_ps((float*)(src + 32));

  002cb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002d3	48 83 c0 20	 add	 rax, 32			; 00000020H
  002d7	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002da	0f 29 84 24 f0
	00 00 00	 movaps	 XMMWORD PTR $T9[rsp], xmm0
  002e2	0f 28 84 24 f0
	00 00 00	 movaps	 xmm0, XMMWORD PTR $T9[rsp]
  002ea	0f 29 44 24 40	 movaps	 XMMWORD PTR x2$[rsp], xmm0

; 75   :     x3 = _mm_loadu_ps((float*)(src + 48));

  002ef	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR src$[rsp]
  002f7	48 83 c0 30	 add	 rax, 48			; 00000030H
  002fb	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  002fe	0f 29 84 24 00
	01 00 00	 movaps	 XMMWORD PTR $T10[rsp], xmm0
  00306	0f 28 84 24 00
	01 00 00	 movaps	 xmm0, XMMWORD PTR $T10[rsp]
  0030e	0f 29 44 24 50	 movaps	 XMMWORD PTR x3$[rsp], xmm0

; 76   :     _mm_storeu_ps((float*)(dst_tmp +  0), x0);

  00313	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0031b	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR x0$[rsp]
  00320	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 77   :     _mm_storeu_ps((float*)(dst_tmp + 16), x1);

  00323	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0032b	48 83 c0 10	 add	 rax, 16
  0032f	0f 28 44 24 30	 movaps	 xmm0, XMMWORD PTR x1$[rsp]
  00334	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 78   :     _mm_storeu_ps((float*)(dst_tmp + 32), x2);

  00337	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  0033f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00343	0f 28 44 24 40	 movaps	 xmm0, XMMWORD PTR x2$[rsp]
  00348	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0

; 79   :     _mm_storeu_ps((float*)(dst_tmp + 48), x3);

  0034b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dst_tmp$[rsp]
  00353	48 83 c0 30	 add	 rax, 48			; 00000030H
  00357	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR x3$[rsp]
  0035c	0f 11 00	 movups	 XMMWORD PTR [rax], xmm0
$LN1@memcpy_sse:

; 80   : }

  0035f	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00366	5f		 pop	 rdi
  00367	c3		 ret	 0
?memcpy_sse@@YAXPEAEPEBEH@Z ENDP			; memcpy_sse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
h$ = 32
y_range$ = 56
y0$ = 84
y1$ = 88
__$ArrayPad$ = 104
$T4 = 144
y_start$ = 152
y_end$ = 160
thread_id$ = 168
thread_n$ = 176
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1e 00 00 00	 mov	 ecx, 30
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c4	 xor	 rax, rsp
  0003a	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 376  :     const int h = y_end - y_start;

  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_start$[rsp]
  00046	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y_end$[rsp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00055	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00059	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR thread_id$[rsp]
  00061	99		 cdq
  00062	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  00069	83 c0 03	 add	 eax, 3
  0006c	83 e0 fc	 and	 eax, -4
  0006f	89 44 24 54	 mov	 DWORD PTR y0$[rsp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  00073	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	8b 4c 24 20	 mov	 ecx, DWORD PTR h$[rsp]
  00080	0f af c8	 imul	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  0008d	83 c0 03	 add	 eax, 3
  00090	83 e0 fc	 and	 eax, -4
  00093	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax

; 380  :     if (y1 > h) {

  00097	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0009b	39 44 24 58	 cmp	 DWORD PTR y1$[rsp], eax
  0009f	7e 08		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  000a1	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  000a5	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  000a9	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000ad	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y_start$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR y_range$[rsp], eax

; 384  :     y_range.start_dst = y0;

  000bc	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c0	89 44 24 3c	 mov	 DWORD PTR y_range$[rsp+4], eax

; 385  :     y_range.len = y1 - y0;

  000c4	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c8	8b 4c 24 58	 mov	 ecx, DWORD PTR y1$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR y_range$[rsp+8], eax

; 386  :     return y_range;

  000d4	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  000d9	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 0c 00 00 00	 mov	 ecx, 12
  000e9	f3 a4		 rep movsb
  000eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 387  : }

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8b cc	 mov	 rcx, rsp
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b c7	 mov	 rax, rdi
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010d	48 33 cc	 xor	 rcx, rsp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00119	5f		 pop	 rdi
  0011a	5e		 pop	 rsi
  0011b	c3		 ret	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
