; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG172182 DB	'invalid argument', 00H
	ORG $+3
$SG172183 DB	'%s', 00H
	ORG $+1
$SG172187 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG172184 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG156197 DB	'trace', 00H
	ORG $+2
$SG172185 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG172186 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG156198 DB	'debug', 00H
	ORG $+2
$SG156199 DB	'more', 00H
	ORG $+3
$SG156200 DB	'info', 00H
	ORG $+3
$SG156201 DB	'warn', 00H
	ORG $+3
$SG156202 DB	'error', 00H
	ORG $+2
$SG156204 DB	'cfr', 00H
$SG156205 DB	'vfr', 00H
$SG156206 DB	'forcecfr', 00H
	ORG $+3
$SG156208 DB	'swr', 00H
$SG156209 DB	'soxr', 00H
	ORG $+3
$SG156578 DB	' (%dEU)', 00H
$SG172899 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG156582 DB	' %d-%dMHz', 00H
	ORG $+2
$SG156584 DB	' %dMHz', 00H
	ORG $+1
$SG156586 DB	' [%dW]', 00H
	ORG $+1
$SG156588 DB	' (%s)', 00H
	ORG $+2
$SG156589 DB	'(R)', 00H
$SG156590 DB	'(TM)', 00H
	ORG $+3
$SG156617 DB	'[0]Intel HD Graphics', 00H
	ORG $+3
$SG156619 DB	'[1]Intel HD Graphics', 00H
	ORG $+3
$SG156621 DB	'Failed to get GPU Info.', 00H
$SG168511 DB	'containers incompatible for swap', 00H
	ORG $+3
$SG168512 DB	'%s', 00H
	ORG $+1
$SG168515 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'P', 00H, 'o', 00H, 'c', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG168513 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG153193 DB	'Invalid', 00H
$SG168514 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG168516 DB	'"', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H
	DB	't', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H, 'w', 00H, 'a', 00H
	DB	'p', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG153194 DB	'nv12', 00H
	ORG $+3
$SG153195 DB	'yv12', 00H
	ORG $+3
$SG153196 DB	'yuy2', 00H
	ORG $+3
$SG153197 DB	'yuv422', 00H
	ORG $+1
$SG153198 DB	'nv16', 00H
	ORG $+3
$SG153199 DB	'yuv444', 00H
	ORG $+1
$SG153200 DB	'yv12(9bit)', 00H
	ORG $+1
$SG153225 DB	'rgb', 00H
$SG153201 DB	'yv12(10bit)', 00H
$SG153227 DB	'gbr', 00H
$SG153202 DB	'yv12(12bit)', 00H
$SG153230 DB	'y8', 00H
	ORG $+1
$SG153203 DB	'yv12(14bit)', 00H
$SG154174 DB	'VP8', 00H
$SG153204 DB	'yv12(16bit)', 00H
$SG153205 DB	'p010', 00H
	ORG $+3
$SG153219 DB	'rgb24r', 00H
	ORG $+1
$SG154176 DB	'VP9', 00H
$SG153206 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG153207 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG153208 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG153209 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG153210 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG153211 DB	'p210', 00H
	ORG $+3
$SG153212 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG153213 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG153214 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG153215 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG153216 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG153217 DB	'yuva444', 00H
$SG153218 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG153220 DB	'rgb32r', 00H
	ORG $+1
$SG153221 DB	'rgb24', 00H
	ORG $+2
$SG153222 DB	'rgb32', 00H
	ORG $+2
$SG153223 DB	'bgr24', 00H
	ORG $+2
$SG153224 DB	'bgr32', 00H
	ORG $+2
$SG153226 DB	'rgba', 00H
	ORG $+3
$SG153228 DB	'gbra', 00H
	ORG $+3
$SG153229 DB	'yc48', 00H
	ORG $+3
$SG153231 DB	'yc16', 00H
	ORG $+3
$SG154162 DB	'H.264/AVC', 00H
	ORG $+2
$SG154787 DB	'fcc', 00H
$SG154164 DB	'H.265/HEVC', 00H
	ORG $+1
$SG154166 DB	'MPEG2', 00H
	ORG $+2
$SG154168 DB	'MPEG1', 00H
	ORG $+2
$SG154170 DB	'VC-1', 00H
	ORG $+3
$SG154172 DB	'MPEG4', 00H
	ORG $+2
$SG154788 DB	'GBR', 00H
$SG154178 DB	'unknown', 00H
$SG154285 DB	'unknown', 00H
?list_colormatrix@@3QBUCX_DESC@@B DQ FLAT:$SG154780	; list_colormatrix
	DD	02H
	ORG $+4
	DQ	FLAT:$SG154781
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG154782
	DD	01H
	ORG $+4
	DQ	FLAT:$SG154783
	DD	06H
	ORG $+4
	DQ	FLAT:$SG154784
	DD	05H
	ORG $+4
	DQ	FLAT:$SG154785
	DD	07H
	ORG $+4
	DQ	FLAT:$SG154786
	DD	08H
	ORG $+4
	DQ	FLAT:$SG154787
	DD	04H
	ORG $+4
	DQ	FLAT:$SG154788
	DD	00H
	ORG $+4
	DQ	FLAT:$SG154789
	DD	09H
	ORG $+4
	DQ	FLAT:$SG154790
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG154791
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG154792
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG154793
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG154794
	DD	0fH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG154780 DB	'undef', 00H
	ORG $+2
$SG154781 DB	'auto', 00H
	ORG $+3
$SG154782 DB	'bt709', 00H
	ORG $+2
$SG154783 DB	'smpte170m', 00H
	ORG $+2
$SG154939 DB	'bt470m', 00H
	ORG $+1
$SG155101 DB	'pal', 00H
$SG154784 DB	'bt470bg', 00H
$SG154785 DB	'smpte240m', 00H
	ORG $+2
$SG154786 DB	'YCgCo', 00H
	ORG $+2
$SG154942 DB	'linear', 00H
	ORG $+1
$SG155103 DB	'mac', 00H
$SG154789 DB	'bt2020nc', 00H
	ORG $+3
$SG154793 DB	'ictco', 00H
	ORG $+2
$SG154943 DB	'log100', 00H
	ORG $+1
$SG155105 DB	'0', 00H
	ORG $+2
$SG154790 DB	'bt2020c', 00H
$SG154791 DB	'derived-ncl', 00H
$SG155106 DB	'1', 00H
	ORG $+2
$SG154792 DB	'derived-cl', 00H
	ORG $+1
$SG155107 DB	'2', 00H
	ORG $+2
$SG154794 DB	'2100-lms', 00H
	ORG $+7
?list_transfer@@3QBUCX_DESC@@B DQ FLAT:$SG154935	; list_transfer
	DD	02H
	ORG $+4
	DQ	FLAT:$SG154936
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG154937
	DD	01H
	ORG $+4
	DQ	FLAT:$SG154938
	DD	06H
	ORG $+4
	DQ	FLAT:$SG154939
	DD	04H
	ORG $+4
	DQ	FLAT:$SG154940
	DD	05H
	ORG $+4
	DQ	FLAT:$SG154941
	DD	07H
	ORG $+4
	DQ	FLAT:$SG154942
	DD	08H
	ORG $+4
	DQ	FLAT:$SG154943
	DD	09H
	ORG $+4
	DQ	FLAT:$SG154944
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG154945
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG154946
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG154947
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG154948
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG154949
	DD	0fH
	ORG $+4
	DQ	FLAT:$SG154950
	DD	010H
	ORG $+4
	DQ	FLAT:$SG154951
	DD	011H
	ORG $+4
	DQ	FLAT:$SG154952
	DD	012H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG154935 DB	'undef', 00H
	ORG $+2
$SG154936 DB	'auto', 00H
	ORG $+3
$SG154937 DB	'bt709', 00H
	ORG $+2
$SG154938 DB	'smpte170m', 00H
	ORG $+2
$SG154944 DB	'log316', 00H
	ORG $+1
$SG155108 DB	'3', 00H
	ORG $+2
$SG154940 DB	'bt470bg', 00H
$SG154941 DB	'smpte240m', 00H
	ORG $+2
$SG155088 DB	'bt470m', 00H
	ORG $+1
$SG155109 DB	'4', 00H
	ORG $+2
$SG154945 DB	'iec61966-2-4', 00H
	ORG $+3
$SG154946 DB	'bt1361e', 00H
$SG154947 DB	'iec61966-2-1', 00H
	ORG $+3
$SG154948 DB	'bt2020-10', 00H
	ORG $+2
$SG155092 DB	'bt2020', 00H
	ORG $+1
$SG155110 DB	'5', 00H
	ORG $+2
$SG154949 DB	'bt2020-12', 00H
	ORG $+2
$SG155114 DB	'tv', 00H
	ORG $+1
$SG154950 DB	'smpte2084', 00H
	ORG $+2
$SG155115 DB	'pc', 00H
	ORG $+1
$SG154951 DB	'smpte428', 00H
	ORG $+3
$SG155084 DB	'undef', 00H
	ORG $+6
$SG154952 DB	'arib-srd-b67', 00H
	ORG $+3
$SG155085 DB	'auto', 00H
	ORG $+3
?list_colorprim@@3QBUCX_DESC@@B DQ FLAT:$SG155084	; list_colorprim
	DD	02H
	ORG $+4
	DQ	FLAT:$SG155085
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG155086
	DD	01H
	ORG $+4
	DQ	FLAT:$SG155087
	DD	06H
	ORG $+4
	DQ	FLAT:$SG155088
	DD	04H
	ORG $+4
	DQ	FLAT:$SG155089
	DD	05H
	ORG $+4
	DQ	FLAT:$SG155090
	DD	07H
	ORG $+4
	DQ	FLAT:$SG155091
	DD	08H
	ORG $+4
	DQ	FLAT:$SG155092
	DD	09H
	ORG $+4
	DQ	FLAT:$SG155093
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG155094
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG155095
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG155096
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG155086 DB	'bt709', 00H
	ORG $+2
$SG155087 DB	'smpte170m', 00H
	ORG $+6
$SG155089 DB	'bt470bg', 00H
$SG155090 DB	'smpte240m', 00H
	ORG $+2
$SG155091 DB	'film', 00H
	ORG $+3
$SG155093 DB	'st428', 00H
	ORG $+6
$SG155094 DB	'st431-2', 00H
$SG155095 DB	'st432-1', 00H
$SG155096 DB	'ebu3213-e', 00H
	ORG $+6
?list_videoformat@@3QBUCX_DESC@@B DQ FLAT:$SG155098	; list_videoformat
	DD	05H
	ORG $+4
	DQ	FLAT:$SG155099
	DD	02H
	ORG $+4
	DQ	FLAT:$SG155100
	DD	00H
	ORG $+4
	DQ	FLAT:$SG155101
	DD	01H
	ORG $+4
	DQ	FLAT:$SG155102
	DD	03H
	ORG $+4
	DQ	FLAT:$SG155103
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG155098 DB	'undef', 00H
	ORG $+2
$SG155099 DB	'ntsc', 00H
	ORG $+3
$SG155100 DB	'component', 00H
	ORG $+2
$SG155102 DB	'secam', 00H
	ORG $+6
$SG155112 DB	'limited', 00H
$SG155113 DB	'full', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	_tcsstr
PUBLIC	?_tcsstr@@YAPEADPEADPEBD@Z			; _tcsstr
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsprintf_s_l
PUBLIC	sprintf_s
PUBLIC	?getGPUInfo@@YAHPEBDPEADI_N@Z			; getGPUInfo
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z	; getIntelGPUInfo
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_strcpy_s:PROC
EXTRN	strlen:PROC
EXTRN	__imp__mbsstr:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	?cl_get_func@@YAHPEAUcl_func_t@@@Z:PROC		; cl_get_func
EXTRN	?cl_get_platform_and_device@@YAHPEBDHPEAUcl_data_t@@PEBUcl_func_t@@@Z:PROC ; cl_get_platform_and_device
EXTRN	?cl_get_device_max_compute_units@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z:PROC ; cl_get_device_max_compute_units
EXTRN	?cl_get_device_name@@YAHPEBUcl_data_t@@PEBUcl_func_t@@PEADI@Z:PROC ; cl_get_device_name
EXTRN	?cl_get_driver_version@@YAHPEBUcl_data_t@@PEBUcl_func_t@@PEADI@Z:PROC ; cl_get_driver_version
EXTRN	?cl_release@@YAXPEAUcl_data_t@@PEAUcl_func_t@@@Z:PROC ; cl_release
EXTRN	?cl_get_device_max_clock_frequency_mhz@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z:PROC ; cl_get_device_max_clock_frequency_mhz
EXTRN	?getGraphicsDeviceInfo@@YA_NPEAI00@Z:PROC	; getGraphicsDeviceInfo
EXTRN	?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z:PROC ; getIntelDeviceInfo
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsstr DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$_tcsstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcsstr@@YAPEADPEADPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_tcsstr@@YAPEADPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+133
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
pdata	SEGMENT
$pdata$?getGPUInfo@@YAHPEBDPEADI_N@Z DD imagerel $LN16
	DD	imagerel $LN16+644
	DD	imagerel $unwind$?getGPUInfo@@YAHPEBDPEADI_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspMatrixList@@YAXXZ DD imagerel ??__ECspMatrixList@@YAXXZ
	DD	imagerel ??__ECspMatrixList@@YAXXZ+452
	DD	imagerel $unwind$??__ECspMatrixList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+311
	DD	imagerel $unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspTransferList@@YAXXZ DD imagerel ??__ECspTransferList@@YAXXZ
	DD	imagerel ??__ECspTransferList@@YAXXZ+476
	DD	imagerel $unwind$??__ECspTransferList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+263
	DD	imagerel $unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspColorprimList@@YAXXZ DD imagerel ??__ECspColorprimList@@YAXXZ
	DD	imagerel ??__ECspColorprimList@@YAXXZ+398
	DD	imagerel $unwind$??__ECspColorprimList@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z DD imagerel ?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z
	DD	imagerel ?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z+1180
	DD	imagerel $unwind$?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z DD imagerel ??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z
	DD	imagerel ??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z+160
	DD	imagerel $unwind$??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z DD imagerel $LN6
	DD	imagerel $LN6+402
	DD	imagerel $unwind$?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z DD 022801H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspColorprimList@@YAXXZ DD 042b19H
	DD	023010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD 033d19H
	DD	07016821aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspTransferList@@YAXXZ DD 042b19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspMatrixList@@YAXXZ DD 042b19H
	DD	029010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
xdata	SEGMENT
$unwind$?getGPUInfo@@YAHPEBDPEADI_N@Z DD 034519H
	DD	03a011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z DD 034519H
	DD	03e011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z DD 033619H
	DD	0a0010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	04f0H
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$0 DB 063H		; getGPUInfo
	DB	06cH
	DB	00H
	ORG $+1
?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$1 DB 064H		; getGPUInfo
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$2 DB 069H		; getGPUInfo
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+7
?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcVarDesc DD 0178H	; getGPUInfo
	DD	01cH
	DQ	FLAT:?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$2
	DD	0128H
	DD	030H
	DQ	FLAT:?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$1
	DD	050H
	DD	0b8H
	DQ	FLAT:?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcName$0
	ORG $+144
?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcFrameData DD 03H	; getGPUInfo
	DD	00H
	DQ	FLAT:?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcVarDesc
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcName$0 DB 064H ; cl_create_info_string
	DB	072H
	DB	069H
	DB	076H
	DB	065H
	DB	072H
	DB	05fH
	DB	076H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcName$1 DB 072H ; cl_create_info_string
	DB	065H
	DB	06dH
	DB	06fH
	DB	076H
	DB	065H
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+2
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcVarDesc DD 0164H ; cl_create_info_string
	DD	01H
	DQ	FLAT:?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcName$1
	DD	050H
	DD	0100H
	DQ	FLAT:?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcName$0
	ORG $+96
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcFrameData DD 02H ; cl_create_info_string
	DD	00H
	DQ	FLAT:?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcVarDesc
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$0 DB 056H ; getIntelGPUInfo
	DB	065H
	DB	06eH
	DB	064H
	DB	06fH
	DB	072H
	DB	049H
	DB	064H
	DB	00H
	ORG $+7
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$1 DB 044H ; getIntelGPUInfo
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	049H
	DB	064H
	DB	00H
	ORG $+7
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$2 DB 056H ; getIntelGPUInfo
	DB	069H
	DB	064H
	DB	065H
	DB	06fH
	DB	04dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+4
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$3 DB 069H ; getIntelGPUInfo
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	048H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$4 DB 069H ; getIntelGPUInfo
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$5 DB 069H ; getIntelGPUInfo
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcVarDesc DD 04c8H ; getIntelGPUInfo
	DD	018H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$5
	DD	0b0H
	DD	0400H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$4
	DD	088H
	DD	08H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$3
	DD	064H
	DD	04H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcName$0
	ORG $+288
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcFrameData DD 06H ; getIntelGPUInfo
	DD	00H
	DQ	FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf_s$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf_s$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sprintf_s$rtcName$0
	ORG $+48
sprintf_s$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf_s$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcsstr@@YAPEADPEADPEBD@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsstr DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
_TEXT	SEGMENT
VendorId$ = 36
DeviceId$ = 68
VideoMemory$ = 100
intelDeviceInfoHeader$ = 136
intelDeviceInfoBuffer$ = 176
intelDeviceInfo$ = 1224
__$ArrayPad$ = 1264
info$ = 1296
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z PROC	; getIntelGPUInfo

; 108  : int getIntelGPUInfo(IntelDeviceInfo *info) {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 00 05
	00 00		 sub	 rsp, 1280		; 00000500H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1296]
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002b	48 33 c4	 xor	 rax, rsp
  0002e	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 109  :     memset(info, 0, sizeof(info[0]));

  00036	41 b8 1c 00 00
	00		 mov	 r8d, 28
  0003c	33 d2		 xor	 edx, edx
  0003e	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00046	e8 00 00 00 00	 call	 memset

; 110  : 
; 111  :     unsigned int VendorId, DeviceId, VideoMemory;
; 112  :     if (!getGraphicsDeviceInfo(&VendorId, &DeviceId, &VideoMemory)) {

  0004b	4c 8d 44 24 64	 lea	 r8, QWORD PTR VideoMemory$[rsp]
  00050	48 8d 54 24 44	 lea	 rdx, QWORD PTR DeviceId$[rsp]
  00055	48 8d 4c 24 24	 lea	 rcx, QWORD PTR VendorId$[rsp]
  0005a	e8 00 00 00 00	 call	 ?getGraphicsDeviceInfo@@YA_NPEAI00@Z ; getGraphicsDeviceInfo
  0005f	0f b6 c0	 movzx	 eax, al
  00062	85 c0		 test	 eax, eax
  00064	75 0a		 jne	 SHORT $LN2@getIntelGP

; 113  :         return 1;

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	e9 f4 00 00 00	 jmp	 $LN1@getIntelGP
$LN2@getIntelGP:

; 114  :     }
; 115  :     info->GPUMemoryBytes = VideoMemory;

  00070	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00078	8b 4c 24 64	 mov	 ecx, DWORD PTR VideoMemory$[rsp]
  0007c	89 08		 mov	 DWORD PTR [rax], ecx

; 116  : 
; 117  :     IntelDeviceInfoHeader intelDeviceInfoHeader = { 0 };

  0007e	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR intelDeviceInfoHeader$[rsp]
  00086	48 8b f8	 mov	 rdi, rax
  00089	33 c0		 xor	 eax, eax
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	f3 aa		 rep stosb

; 118  :     char intelDeviceInfoBuffer[1024];
; 119  :     if (GGF_SUCCESS != getIntelDeviceInfo(VendorId, &intelDeviceInfoHeader, &intelDeviceInfoBuffer)) {

  00092	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR intelDeviceInfoBuffer$[rsp]
  0009a	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR intelDeviceInfoHeader$[rsp]
  000a2	8b 4c 24 24	 mov	 ecx, DWORD PTR VendorId$[rsp]
  000a6	e8 00 00 00 00	 call	 ?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z ; getIntelDeviceInfo
  000ab	85 c0		 test	 eax, eax
  000ad	74 0a		 je	 SHORT $LN3@getIntelGP

; 120  :         return 1;

  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	e9 ab 00 00 00	 jmp	 $LN1@getIntelGP
$LN3@getIntelGP:

; 121  :     }
; 122  : 
; 123  :     IntelDeviceInfoV2 intelDeviceInfo = { 0 };

  000b9	48 8d 84 24 c8
	04 00 00	 lea	 rax, QWORD PTR intelDeviceInfo$[rsp]
  000c1	48 8b f8	 mov	 rdi, rax
  000c4	33 c0		 xor	 eax, eax
  000c6	b9 18 00 00 00	 mov	 ecx, 24
  000cb	f3 aa		 rep stosb

; 124  :     memcpy(&intelDeviceInfo, intelDeviceInfoBuffer, intelDeviceInfoHeader.Size);

  000cd	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR intelDeviceInfoHeader$[rsp]
  000d4	44 8b c0	 mov	 r8d, eax
  000d7	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR intelDeviceInfoBuffer$[rsp]
  000df	48 8d 8c 24 c8
	04 00 00	 lea	 rcx, QWORD PTR intelDeviceInfo$[rsp]
  000e7	e8 00 00 00 00	 call	 memcpy

; 125  :     info->GPUMaxFreqMHz = intelDeviceInfo.GPUMaxFreq;

  000ec	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  000f4	8b 8c 24 c8 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp]
  000fb	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 126  :     info->GPUMinFreqMHz = intelDeviceInfo.GPUMinFreq;

  000fe	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00106	8b 8c 24 cc 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp+4]
  0010d	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 127  :     if (intelDeviceInfoHeader.Version == 2) {

  00110	83 bc 24 8c 00
	00 00 02	 cmp	 DWORD PTR intelDeviceInfoHeader$[rsp+4], 2
  00118	75 48		 jne	 SHORT $LN4@getIntelGP

; 128  :         info->EUCount      = intelDeviceInfo.EUCount;

  0011a	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00122	8b 8c 24 d4 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp+12]
  00129	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 129  :         info->GTGeneration = intelDeviceInfo.GTGeneration;

  0012c	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00134	8b 8c 24 d0 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp+8]
  0013b	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 130  :         info->MaxFillRate  = intelDeviceInfo.MaxFillRate;

  0013e	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00146	8b 8c 24 dc 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp+20]
  0014d	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 131  :         info->PackageTDP   = intelDeviceInfo.PackageTDP;

  00150	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00158	8b 8c 24 d8 04
	00 00		 mov	 ecx, DWORD PTR intelDeviceInfo$[rsp+16]
  0015f	89 48 14	 mov	 DWORD PTR [rax+20], ecx
$LN4@getIntelGP:

; 132  :     }
; 133  :     return 0;

  00162	33 c0		 xor	 eax, eax
$LN1@getIntelGP:

; 134  : }

  00164	48 8b f8	 mov	 rdi, rax
  00167	48 8b cc	 mov	 rcx, rsp
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z$rtcFrameData
  00171	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00176	48 8b c7	 mov	 rax, rdi
  00179	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00181	48 33 cc	 xor	 rcx, rsp
  00184	e8 00 00 00 00	 call	 __security_check_cookie
  00189	48 81 c4 00 05
	00 00		 add	 rsp, 1280		; 00000500H
  00190	5f		 pop	 rdi
  00191	c3		 ret	 0
?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z ENDP	; getIntelGPUInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
;	COMDAT ??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z
_TEXT	SEGMENT
ptr$ = 32
tv69 = 40
tv74 = 48
this$ = 80
target_str$ = 88
remove_str$ = 96
??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z PROC ; <lambda_85e343cb2491c9ece773db8f206033cd>::operator(), COMDAT

; 94   :     auto remove_string =[](TCHAR *target_str, const TCHAR *remove_str) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 95   :         TCHAR *ptr = _tcsstr(target_str, remove_str);

  00028	48 8b 54 24 60	 mov	 rdx, QWORD PTR remove_str$[rsp]
  0002d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR target_str$[rsp]
  00032	e8 00 00 00 00	 call	 ?_tcsstr@@YAPEADPEADPEBD@Z ; _tcsstr
  00037	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax

; 96   :         if (nullptr != ptr) {

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  00042	74 56		 je	 SHORT $LN2@operator

; 97   :             memmove(ptr, ptr + _tcslen(remove_str), (_tcslen(ptr) - _tcslen(remove_str) + 1) *  sizeof(target_str[0]));

  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  00049	e8 00 00 00 00	 call	 strlen
  0004e	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  00053	48 8b 4c 24 60	 mov	 rcx, QWORD PTR remove_str$[rsp]
  00058	e8 00 00 00 00	 call	 strlen
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv69[rsp]
  00062	48 2b c8	 sub	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 ff c0	 inc	 rax
  0006b	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  00070	48 8b 4c 24 60	 mov	 rcx, QWORD PTR remove_str$[rsp]
  00075	e8 00 00 00 00	 call	 strlen
  0007a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  0007f	48 03 c8	 add	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv74[rsp]
  0008a	4c 8b c1	 mov	 r8, rcx
  0008d	48 8b d0	 mov	 rdx, rax
  00090	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  00095	e8 00 00 00 00	 call	 memmove
$LN2@operator:

; 98   :         }
; 99   :     };

  0009a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z ENDP ; <lambda_85e343cb2491c9ece773db8f206033cd>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
_TEXT	SEGMENT
ret$ = 48
numEU$ = 52
MaxFreqMHz$ = 56
MinFreqMHz$ = 60
driver_ver$ = 80
remove_string$ = 356
$T5 = 384
tv72 = 388
tv82 = 392
tv85 = 400
tv92 = 408
tv95 = 412
tv139 = 416
tv142 = 424
tv151 = 432
tv154 = 440
tv166 = 448
tv169 = 456
tv188 = 464
tv191 = 472
__$ArrayPad$ = 480
cl_data$ = 512
cl$ = 520
info$ = 528
buffer$ = 536
buffer_size$ = 544
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z PROC ; cl_create_info_string

; 62   : static cl_int cl_create_info_string(cl_data_t *cl_data, const cl_func_t *cl, const IntelDeviceInfo *info, TCHAR *buffer, unsigned int buffer_size) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 7c 00 00 00	 mov	 ecx, 124		; 0000007cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR [rsp+512]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c4	 xor	 rax, rsp
  0003d	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 63   :     cl_int ret = CL_SUCCESS;

  00045	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 64   : 
; 65   :     if (cl_data) {

  0004d	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR cl_data$[rsp], 0
  00056	74 29		 je	 SHORT $LN2@cl_create_

; 66   :         ret = cl_get_device_name(cl_data, cl, buffer, buffer_size);

  00058	44 8b 8c 24 20
	02 00 00	 mov	 r9d, DWORD PTR buffer_size$[rsp]
  00060	4c 8b 84 24 18
	02 00 00	 mov	 r8, QWORD PTR buffer$[rsp]
  00068	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR cl$[rsp]
  00070	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR cl_data$[rsp]
  00078	e8 00 00 00 00	 call	 ?cl_get_device_name@@YAHPEBUcl_data_t@@PEBUcl_func_t@@PEADI@Z ; cl_get_device_name
  0007d	89 44 24 30	 mov	 DWORD PTR ret$[rsp], eax
$LN2@cl_create_:

; 67   :     }
; 68   : 
; 69   :     int numEU = (info) ? info->EUCount : 0;

  00081	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR info$[rsp], 0
  0008a	74 14		 je	 SHORT $LN12@cl_create_
  0008c	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00094	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00097	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv72[rsp], eax
  0009e	eb 0b		 jmp	 SHORT $LN13@cl_create_
$LN12@cl_create_:
  000a0	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv72[rsp], 0
$LN13@cl_create_:
  000ab	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv72[rsp]
  000b2	89 44 24 34	 mov	 DWORD PTR numEU$[rsp], eax

; 70   :     if (numEU == 0 && cl_data) {

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR numEU$[rsp], 0
  000bb	75 24		 jne	 SHORT $LN3@cl_create_
  000bd	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR cl_data$[rsp], 0
  000c6	74 19		 je	 SHORT $LN3@cl_create_

; 71   :         numEU = cl_get_device_max_compute_units(cl_data, cl);

  000c8	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR cl$[rsp]
  000d0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR cl_data$[rsp]
  000d8	e8 00 00 00 00	 call	 ?cl_get_device_max_compute_units@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z ; cl_get_device_max_compute_units
  000dd	89 44 24 34	 mov	 DWORD PTR numEU$[rsp], eax
$LN3@cl_create_:

; 72   :     }
; 73   :     if (numEU) {

  000e1	83 7c 24 34 00	 cmp	 DWORD PTR numEU$[rsp], 0
  000e6	74 6c		 je	 SHORT $LN4@cl_create_

; 74   :         _stprintf_s(buffer + _tcslen(buffer), buffer_size - _tcslen(buffer), _T(" (%dEU)"), numEU);

  000e8	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  000ef	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv82[rsp], rax
  000f7	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ff	e8 00 00 00 00	 call	 strlen
  00104	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv82[rsp]
  0010c	48 2b c8	 sub	 rcx, rax
  0010f	48 8b c1	 mov	 rax, rcx
  00112	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv85[rsp], rax
  0011a	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00122	e8 00 00 00 00	 call	 strlen
  00127	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0012f	48 03 c8	 add	 rcx, rax
  00132	48 8b c1	 mov	 rax, rcx
  00135	44 8b 4c 24 34	 mov	 r9d, DWORD PTR numEU$[rsp]
  0013a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156578
  00141	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv85[rsp]
  00149	48 8b d1	 mov	 rdx, rcx
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 sprintf_s
$LN4@cl_create_:

; 75   :     }
; 76   : 
; 77   :     int MaxFreqMHz = (info) ? info->GPUMaxFreqMHz : 0;

  00154	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR info$[rsp], 0
  0015d	74 14		 je	 SHORT $LN14@cl_create_
  0015f	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00167	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0016a	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv92[rsp], eax
  00171	eb 0b		 jmp	 SHORT $LN15@cl_create_
$LN14@cl_create_:
  00173	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv92[rsp], 0
$LN15@cl_create_:
  0017e	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv92[rsp]
  00185	89 44 24 38	 mov	 DWORD PTR MaxFreqMHz$[rsp], eax

; 78   :     int MinFreqMHz = (info) ? info->GPUMinFreqMHz : 0;

  00189	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR info$[rsp], 0
  00192	74 14		 je	 SHORT $LN16@cl_create_
  00194	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0019c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0019f	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv95[rsp], eax
  001a6	eb 0b		 jmp	 SHORT $LN17@cl_create_
$LN16@cl_create_:
  001a8	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv95[rsp], 0
$LN17@cl_create_:
  001b3	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv95[rsp]
  001ba	89 44 24 3c	 mov	 DWORD PTR MinFreqMHz$[rsp], eax

; 79   :     if (MaxFreqMHz == 0 && cl_data) {

  001be	83 7c 24 38 00	 cmp	 DWORD PTR MaxFreqMHz$[rsp], 0
  001c3	75 24		 jne	 SHORT $LN5@cl_create_
  001c5	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR cl_data$[rsp], 0
  001ce	74 19		 je	 SHORT $LN5@cl_create_

; 80   :         MaxFreqMHz = cl_get_device_max_clock_frequency_mhz(cl_data, cl);

  001d0	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR cl$[rsp]
  001d8	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR cl_data$[rsp]
  001e0	e8 00 00 00 00	 call	 ?cl_get_device_max_clock_frequency_mhz@@YAHPEBUcl_data_t@@PEBUcl_func_t@@@Z ; cl_get_device_max_clock_frequency_mhz
  001e5	89 44 24 38	 mov	 DWORD PTR MaxFreqMHz$[rsp], eax
$LN5@cl_create_:

; 81   :     }
; 82   :     if (MaxFreqMHz && MinFreqMHz) {

  001e9	83 7c 24 38 00	 cmp	 DWORD PTR MaxFreqMHz$[rsp], 0
  001ee	74 7d		 je	 SHORT $LN6@cl_create_
  001f0	83 7c 24 3c 00	 cmp	 DWORD PTR MinFreqMHz$[rsp], 0
  001f5	74 76		 je	 SHORT $LN6@cl_create_

; 83   :         _stprintf_s(buffer + _tcslen(buffer), buffer_size - _tcslen(buffer), _T(" %d-%dMHz"), MinFreqMHz, MaxFreqMHz);

  001f7	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  001fe	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv139[rsp], rax
  00206	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0020e	e8 00 00 00 00	 call	 strlen
  00213	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv139[rsp]
  0021b	48 2b c8	 sub	 rcx, rax
  0021e	48 8b c1	 mov	 rax, rcx
  00221	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv142[rsp], rax
  00229	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00231	e8 00 00 00 00	 call	 strlen
  00236	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0023e	48 03 c8	 add	 rcx, rax
  00241	48 8b c1	 mov	 rax, rcx
  00244	8b 4c 24 38	 mov	 ecx, DWORD PTR MaxFreqMHz$[rsp]
  00248	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0024c	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR MinFreqMHz$[rsp]
  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156582
  00258	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv142[rsp]
  00260	48 8b d1	 mov	 rdx, rcx
  00263	48 8b c8	 mov	 rcx, rax
  00266	e8 00 00 00 00	 call	 sprintf_s
  0026b	eb 73		 jmp	 SHORT $LN7@cl_create_
$LN6@cl_create_:

; 84   :     } else if (MaxFreqMHz) {

  0026d	83 7c 24 38 00	 cmp	 DWORD PTR MaxFreqMHz$[rsp], 0
  00272	74 6c		 je	 SHORT $LN8@cl_create_

; 85   :         _stprintf_s(buffer + _tcslen(buffer), buffer_size - _tcslen(buffer), _T(" %dMHz"), MaxFreqMHz);

  00274	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  0027b	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv151[rsp], rax
  00283	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0028b	e8 00 00 00 00	 call	 strlen
  00290	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv151[rsp]
  00298	48 2b c8	 sub	 rcx, rax
  0029b	48 8b c1	 mov	 rax, rcx
  0029e	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv154[rsp], rax
  002a6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002ae	e8 00 00 00 00	 call	 strlen
  002b3	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002bb	48 03 c8	 add	 rcx, rax
  002be	48 8b c1	 mov	 rax, rcx
  002c1	44 8b 4c 24 38	 mov	 r9d, DWORD PTR MaxFreqMHz$[rsp]
  002c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156584
  002cd	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv154[rsp]
  002d5	48 8b d1	 mov	 rdx, rcx
  002d8	48 8b c8	 mov	 rcx, rax
  002db	e8 00 00 00 00	 call	 sprintf_s
$LN8@cl_create_:
$LN7@cl_create_:

; 86   :     }
; 87   :     if (info && info->PackageTDP) {

  002e0	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR info$[rsp], 0
  002e9	0f 84 81 00 00
	00		 je	 $LN9@cl_create_
  002ef	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR info$[rsp]
  002f7	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  002fb	74 73		 je	 SHORT $LN9@cl_create_

; 88   :         _stprintf_s(buffer + _tcslen(buffer), buffer_size - _tcslen(buffer), _T(" [%dW]"), info->PackageTDP);

  002fd	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  00304	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv166[rsp], rax
  0030c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00314	e8 00 00 00 00	 call	 strlen
  00319	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv166[rsp]
  00321	48 2b c8	 sub	 rcx, rax
  00324	48 8b c1	 mov	 rax, rcx
  00327	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv169[rsp], rax
  0032f	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00337	e8 00 00 00 00	 call	 strlen
  0033c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00344	48 03 c8	 add	 rcx, rax
  00347	48 8b c1	 mov	 rax, rcx
  0034a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00352	44 8b 49 14	 mov	 r9d, DWORD PTR [rcx+20]
  00356	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156586
  0035d	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv169[rsp]
  00365	48 8b d1	 mov	 rdx, rcx
  00368	48 8b c8	 mov	 rcx, rax
  0036b	e8 00 00 00 00	 call	 sprintf_s
$LN9@cl_create_:

; 89   :     }
; 90   :     TCHAR driver_ver[256] = { 0 };

  00370	48 8d 44 24 50	 lea	 rax, QWORD PTR driver_ver$[rsp]
  00375	48 8b f8	 mov	 rdi, rax
  00378	33 c0		 xor	 eax, eax
  0037a	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0037f	f3 aa		 rep stosb

; 91   :     if (cl_data && CL_SUCCESS == cl_get_driver_version(cl_data, cl, driver_ver, _countof(driver_ver))) {

  00381	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR cl_data$[rsp], 0
  0038a	0f 84 90 00 00
	00		 je	 $LN10@cl_create_
  00390	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00396	4c 8d 44 24 50	 lea	 r8, QWORD PTR driver_ver$[rsp]
  0039b	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR cl$[rsp]
  003a3	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR cl_data$[rsp]
  003ab	e8 00 00 00 00	 call	 ?cl_get_driver_version@@YAHPEBUcl_data_t@@PEBUcl_func_t@@PEADI@Z ; cl_get_driver_version
  003b0	85 c0		 test	 eax, eax
  003b2	75 6c		 jne	 SHORT $LN10@cl_create_

; 92   :         _stprintf_s(buffer + _tcslen(buffer), buffer_size - _tcslen(buffer), _T(" (%s)"), driver_ver);

  003b4	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  003bb	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv188[rsp], rax
  003c3	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  003cb	e8 00 00 00 00	 call	 strlen
  003d0	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv188[rsp]
  003d8	48 2b c8	 sub	 rcx, rax
  003db	48 8b c1	 mov	 rax, rcx
  003de	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv191[rsp], rax
  003e6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  003ee	e8 00 00 00 00	 call	 strlen
  003f3	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  003fb	48 03 c8	 add	 rcx, rax
  003fe	48 8b c1	 mov	 rax, rcx
  00401	4c 8d 4c 24 50	 lea	 r9, QWORD PTR driver_ver$[rsp]
  00406	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156588
  0040d	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv191[rsp]
  00415	48 8b d1	 mov	 rdx, rcx
  00418	48 8b c8	 mov	 rcx, rax
  0041b	e8 00 00 00 00	 call	 sprintf_s
$LN10@cl_create_:

; 93   :     }
; 94   :     auto remove_string =[](TCHAR *target_str, const TCHAR *remove_str) {

  00420	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  00428	48 8b f8	 mov	 rdi, rax
  0042b	33 c0		 xor	 eax, eax
  0042d	b9 01 00 00 00	 mov	 ecx, 1
  00432	f3 aa		 rep stosb

; 95   :         TCHAR *ptr = _tcsstr(target_str, remove_str);
; 96   :         if (nullptr != ptr) {
; 97   :             memmove(ptr, ptr + _tcslen(remove_str), (_tcslen(ptr) - _tcslen(remove_str) + 1) *  sizeof(target_str[0]));
; 98   :         }
; 99   :     };
; 100  :     remove_string(buffer, _T("(R)"));

  00434	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156589
  0043b	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  00443	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR remove_string$[rsp]
  0044b	e8 00 00 00 00	 call	 ??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z ; <lambda_85e343cb2491c9ece773db8f206033cd>::operator()

; 101  :     remove_string(buffer, _T("(TM)"));

  00450	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156590
  00457	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  0045f	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR remove_string$[rsp]
  00467	e8 00 00 00 00	 call	 ??R<lambda_85e343cb2491c9ece773db8f206033cd>@@QEBAXPEADPEBD@Z ; <lambda_85e343cb2491c9ece773db8f206033cd>::operator()

; 102  :     return ret;

  0046c	8b 44 24 30	 mov	 eax, DWORD PTR ret$[rsp]

; 103  : }

  00470	8b f8		 mov	 edi, eax
  00472	48 8b cc	 mov	 rcx, rsp
  00475	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z$rtcFrameData
  0047c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00481	8b c7		 mov	 eax, edi
  00483	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0048b	48 33 cc	 xor	 rcx, rsp
  0048e	e8 00 00 00 00	 call	 __security_check_cookie
  00493	48 81 c4 f0 01
	00 00		 add	 rsp, 496		; 000001f0H
  0049a	5f		 pop	 rdi
  0049b	c3		 ret	 0
?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z ENDP ; cl_create_info_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = 112
$T2 = 168
$T3 = 172
$T4 = 176
$T5 = 180
$T6 = 184
$T7 = 188
$T8 = 192
$T9 = 196
$T10 = 200
$T11 = 204
$T12 = 208
$T13 = 212
$T14 = 216
__$ArrayPad$ = 264
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  0002b	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T2[rsp], 13
  00036	c7 84 24 ac 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T3[rsp], 12
  00041	c7 84 24 b0 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T4[rsp], 11
  0004c	c7 84 24 b4 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T5[rsp], 10
  00057	c7 84 24 b8 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T6[rsp], 9
  00062	c7 84 24 bc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T7[rsp], 8
  0006d	c7 84 24 c0 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T8[rsp], 7
  00078	c7 84 24 c4 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T9[rsp], 6
  00083	c7 84 24 c8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T10[rsp], 5
  0008e	c7 84 24 cc 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T11[rsp], 4
  00099	c7 84 24 d0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T12[rsp], 2
  000a4	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T13[rsp], 1
  000af	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000b7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000bc	48 8d 84 24 ac
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000c4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000c9	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000d1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000d6	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000de	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000e3	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  000eb	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000f0	48 8d 84 24 bc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  000f8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000fd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00105	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010a	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00117	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  0011f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00124	4c 8d 8c 24 cc
	00 00 00	 lea	 r9, QWORD PTR $T11[rsp]
  0012c	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T12[rsp]
  00134	48 8d 94 24 d4
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  0013c	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  00144	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  00149	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  0014e	48 8b f9	 mov	 rdi, rcx
  00151	48 8b f0	 mov	 rsi, rax
  00154	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00159	f3 a4		 rep movsb
  0015b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  00162	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  00167	48 8b f8	 mov	 rdi, rax
  0016a	48 8b f1	 mov	 rsi, rcx
  0016d	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00172	f3 a4		 rep movsb
  00174	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017c	48 33 cc	 xor	 rcx, rsp
  0017f	e8 00 00 00 00	 call	 __security_check_cookie
  00184	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0018b	5f		 pop	 rdi
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 56
$T2 = 96
<args_0>$ = 104
<args_1>$ = 112
<args_2>$ = 120
<args_3>$ = 128
<args_4>$ = 136
<args_5>$ = 144
<args_6>$ = 152
<args_7>$ = 160
<args_8>$ = 168
<args_9>$ = 176
<args_10>$ = 184
<args_11>$ = 192
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 12 00 00 00	 mov	 ecx, 18
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 44 24 70	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_2>$[rsp]
  00057	8b 00		 mov	 eax, DWORD PTR [rax]
  00059	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  00065	8b 00		 mov	 eax, DWORD PTR [rax]
  00067	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  0006b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00073	8b 00		 mov	 eax, DWORD PTR [rax]
  00075	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  00087	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  0008f	8b 00		 mov	 eax, DWORD PTR [rax]
  00091	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  00095	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  0009d	8b 00		 mov	 eax, DWORD PTR [rax]
  0009f	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000ab	8b 00		 mov	 eax, DWORD PTR [rax]
  000ad	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000b9	8b 00		 mov	 eax, DWORD PTR [rax]
  000bb	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000c7	8b 00		 mov	 eax, DWORD PTR [rax]
  000c9	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000cd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000d5	8b 00		 mov	 eax, DWORD PTR [rax]
  000d7	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000db	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  000df	48 8b 7c 24 60	 mov	 rdi, QWORD PTR $T2[rsp]
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000ec	f3 a4		 rep movsb
  000ee	48 8b 44 24 60	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  000f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f8	48 33 cc	 xor	 rcx, rsp
  000fb	e8 00 00 00 00	 call	 __security_check_cookie
  00100	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00104	5f		 pop	 rdi
  00105	5e		 pop	 rsi
  00106	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 200
$T3 = 204
$T4 = 208
$T5 = 212
$T6 = 216
$T7 = 220
$T8 = 224
$T9 = 228
$T10 = 232
$T11 = 236
$T12 = 240
$T13 = 244
$T14 = 248
$T15 = 252
$T16 = 256
$T17 = 264
__$ArrayPad$ = 328
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  0002b	c7 84 24 c8 00
	00 00 12 00 00
	00		 mov	 DWORD PTR $T2[rsp], 18
  00036	c7 84 24 cc 00
	00 00 10 00 00
	00		 mov	 DWORD PTR $T3[rsp], 16
  00041	c7 84 24 d0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T4[rsp], 15
  0004c	c7 84 24 d4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T5[rsp], 14
  00057	c7 84 24 d8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T6[rsp], 13
  00062	c7 84 24 dc 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T7[rsp], 11
  0006d	c7 84 24 e0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T8[rsp], 10
  00078	c7 84 24 e4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T9[rsp], 9
  00083	c7 84 24 e8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T10[rsp], 8
  0008e	c7 84 24 ec 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T11[rsp], 7
  00099	c7 84 24 f0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T12[rsp], 6
  000a4	c7 84 24 f4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T13[rsp], 5
  000af	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T14[rsp], 4
  000ba	c7 84 24 fc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T15[rsp], 2
  000c5	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T16[rsp], 1
  000d0	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000d8	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  000dd	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000e5	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000ea	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000f2	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000f7	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000ff	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00104	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  0010c	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00111	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  00119	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0011e	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00126	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0012b	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00133	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00138	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00140	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00145	48 8d 84 24 ec
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  0014d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00152	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0015a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015f	48 8d 84 24 f4
	00 00 00	 lea	 rax, QWORD PTR $T13[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016c	4c 8d 8c 24 f8
	00 00 00	 lea	 r9, QWORD PTR $T14[rsp]
  00174	4c 8d 84 24 fc
	00 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0017c	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00184	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  0018c	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  00191	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00199	48 8b f9	 mov	 rdi, rcx
  0019c	48 8b f0	 mov	 rsi, rax
  0019f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001a4	f3 a4		 rep movsb
  001a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  001ad	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  001b5	48 8b f8	 mov	 rdi, rax
  001b8	48 8b f1	 mov	 rsi, rcx
  001bb	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001c0	f3 a4		 rep movsb
  001c2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ca	48 33 cc	 xor	 rcx, rsp
  001cd	e8 00 00 00 00	 call	 __security_check_cookie
  001d2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  001d9	5f		 pop	 rdi
  001da	5e		 pop	 rsi
  001db	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 72
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
<args_14>$ = 232
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR <args_14>$[rsp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	89 44 24 38	 mov	 DWORD PTR $T1[rsp+56], eax
  0010b	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  0010f	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00114	48 8b f0	 mov	 rsi, rax
  00117	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0011c	f3 a4		 rep movsb
  0011e	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00123	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00128	48 33 cc	 xor	 rcx, rsp
  0012b	e8 00 00 00 00	 call	 __security_check_cookie
  00130	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 192
$T3 = 196
$T4 = 200
$T5 = 204
$T6 = 208
$T7 = 212
$T8 = 216
$T9 = 220
$T10 = 224
$T11 = 228
$T12 = 232
$T13 = 236
$T14 = 240
$T15 = 244
$T16 = 248
__$ArrayPad$ = 304
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  0002b	c7 84 24 c0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T2[rsp], 15
  00036	c7 84 24 c4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T3[rsp], 14
  00041	c7 84 24 c8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T4[rsp], 13
  0004c	c7 84 24 cc 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T5[rsp], 12
  00057	c7 84 24 d0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T6[rsp], 10
  00062	c7 84 24 d4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T7[rsp], 9
  0006d	c7 84 24 d8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T8[rsp], 8
  00078	c7 84 24 dc 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T9[rsp], 7
  00083	c7 84 24 e0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T10[rsp], 6
  0008e	c7 84 24 e4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T11[rsp], 5
  00099	c7 84 24 e8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T12[rsp], 4
  000a4	c7 84 24 ec 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T13[rsp], 2
  000af	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T14[rsp], 1
  000ba	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T15[rsp], 0
  000c5	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000cd	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000d2	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000da	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000df	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000e7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000ec	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000f4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f9	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00101	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00106	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  0010e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00113	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0011b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00120	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00128	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0012d	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0013a	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00142	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00147	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0014f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00154	4c 8d 8c 24 ec
	00 00 00	 lea	 r9, QWORD PTR $T13[rsp]
  0015c	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T14[rsp]
  00164	48 8d 94 24 f4
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0016c	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00174	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  00179	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00181	48 8b f9	 mov	 rdi, rcx
  00184	48 8b f0	 mov	 rsi, rax
  00187	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0018c	f3 a4		 rep movsb
  0018e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  00195	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  0019d	48 8b f8	 mov	 rdi, rax
  001a0	48 8b f1	 mov	 rsi, rcx
  001a3	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  001a8	f3 a4		 rep movsb
  001aa	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b2	48 33 cc	 xor	 rcx, rsp
  001b5	e8 00 00 00 00	 call	 __security_check_cookie
  001ba	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  001c1	5f		 pop	 rdi
  001c2	5e		 pop	 rsi
  001c3	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 64
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  00101	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00106	48 8b f0	 mov	 rsi, rax
  00109	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0010e	f3 a4		 rep movsb
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00115	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
_TEXT	SEGMENT
ret$ = 48
cl$ = 80
data$ = 296
info$ = 376
opencl_error$ = 420
intel_error$ = 421
tv151 = 432
tv156 = 440
__$ArrayPad$ = 448
VendorName$ = 480
buffer$ = 488
buffer_size$ = 496
driver_version_only$ = 504
?getGPUInfo@@YAHPEBDPEADI_N@Z PROC			; getGPUInfo

; 148  : int getGPUInfo(const char *VendorName, TCHAR *buffer, unsigned int buffer_size, bool driver_version_only) {

$LN16:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec d0 01
	00 00		 sub	 rsp, 464		; 000001d0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 74 00 00 00	 mov	 ecx, 116		; 00000074H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c4	 xor	 rax, rsp
  0003d	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 149  : #if !ENABLE_OPENCL
; 150  : #ifdef LIBVA_SUPPORT
; 151  :     _stprintf_s(buffer, buffer_size, _T("Intel Graphics / Driver : %s"), getGPUInfoVA().c_str());
; 152  : #else
; 153  :     _stprintf_s(buffer, buffer_size, _T("Unknown (not compiled with OpenCL support)"));
; 154  : #endif
; 155  :     return 0;
; 156  : #else
; 157  :     int ret = CL_SUCCESS;

  00045	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 158  :     cl_func_t cl = { 0 };

  0004d	48 8d 44 24 50	 lea	 rax, QWORD PTR cl$[rsp]
  00052	48 8b f8	 mov	 rdi, rax
  00055	33 c0		 xor	 eax, eax
  00057	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  0005c	f3 aa		 rep stosb

; 159  :     cl_data_t data = { 0 };

  0005e	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR data$[rsp]
  00066	48 8b f8	 mov	 rdi, rax
  00069	33 c0		 xor	 eax, eax
  0006b	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00070	f3 aa		 rep stosb

; 160  :     IntelDeviceInfo info = { 0 };

  00072	48 8d 84 24 78
	01 00 00	 lea	 rax, QWORD PTR info$[rsp]
  0007a	48 8b f8	 mov	 rdi, rax
  0007d	33 c0		 xor	 eax, eax
  0007f	b9 1c 00 00 00	 mov	 ecx, 28
  00084	f3 aa		 rep stosb

; 161  : 
; 162  :     bool opencl_error = false;

  00086	c6 84 24 a4 01
	00 00 00	 mov	 BYTE PTR opencl_error$[rsp], 0

; 163  :     bool intel_error = false;

  0008e	c6 84 24 a5 01
	00 00 00	 mov	 BYTE PTR intel_error$[rsp], 0

; 164  :     if (CL_SUCCESS != (ret = cl_get_func(&cl))) {

  00096	48 8d 4c 24 50	 lea	 rcx, QWORD PTR cl$[rsp]
  0009b	e8 00 00 00 00	 call	 ?cl_get_func@@YAHPEAUcl_func_t@@@Z ; cl_get_func
  000a0	89 44 24 30	 mov	 DWORD PTR ret$[rsp], eax
  000a4	83 7c 24 30 00	 cmp	 DWORD PTR ret$[rsp], 0
  000a9	74 28		 je	 SHORT $LN2@getGPUInfo

; 165  :         _tcscpy_s(buffer, buffer_size, _T("[0]Intel HD Graphics"));

  000ab	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  000b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156617
  000b9	8b d0		 mov	 edx, eax
  000bb	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 166  :         opencl_error = true;

  000c9	c6 84 24 a4 01
	00 00 01	 mov	 BYTE PTR opencl_error$[rsp], 1
  000d1	eb 50		 jmp	 SHORT $LN3@getGPUInfo
$LN2@getGPUInfo:

; 167  :     } else if (CL_SUCCESS != (ret = cl_get_platform_and_device(VendorName, CL_DEVICE_TYPE_GPU, &data, &cl))) {

  000d3	4c 8d 4c 24 50	 lea	 r9, QWORD PTR cl$[rsp]
  000d8	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR data$[rsp]
  000e0	ba 04 00 00 00	 mov	 edx, 4
  000e5	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR VendorName$[rsp]
  000ed	e8 00 00 00 00	 call	 ?cl_get_platform_and_device@@YAHPEBDHPEAUcl_data_t@@PEBUcl_func_t@@@Z ; cl_get_platform_and_device
  000f2	89 44 24 30	 mov	 DWORD PTR ret$[rsp], eax
  000f6	83 7c 24 30 00	 cmp	 DWORD PTR ret$[rsp], 0
  000fb	74 26		 je	 SHORT $LN4@getGPUInfo

; 168  :         _tcscpy_s(buffer, buffer_size, _T("[1]Intel HD Graphics"));

  000fd	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156619
  0010b	8b d0		 mov	 edx, eax
  0010d	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 169  :         opencl_error = true;

  0011b	c6 84 24 a4 01
	00 00 01	 mov	 BYTE PTR opencl_error$[rsp], 1
$LN4@getGPUInfo:
$LN3@getGPUInfo:

; 170  :     }
; 171  : 
; 172  :     if (!driver_version_only && 0 != getIntelGPUInfo(&info)) {

  00123	0f b6 84 24 f8
	01 00 00	 movzx	 eax, BYTE PTR driver_version_only$[rsp]
  0012b	85 c0		 test	 eax, eax
  0012d	75 37		 jne	 SHORT $LN5@getGPUInfo
  0012f	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00137	e8 00 00 00 00	 call	 ?getIntelGPUInfo@@YAHPEAUIntelDeviceInfo@@@Z ; getIntelGPUInfo
  0013c	85 c0		 test	 eax, eax
  0013e	74 26		 je	 SHORT $LN5@getGPUInfo

; 173  :         _tcscpy_s(buffer, buffer_size, _T("Failed to get GPU Info."));

  00140	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  00147	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG156621
  0014e	8b d0		 mov	 edx, eax
  00150	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strcpy_s

; 174  :         intel_error = true;

  0015e	c6 84 24 a5 01
	00 00 01	 mov	 BYTE PTR intel_error$[rsp], 1
$LN5@getGPUInfo:

; 175  :     }
; 176  : 
; 177  : 
; 178  :     if (driver_version_only) {

  00166	0f b6 84 24 f8
	01 00 00	 movzx	 eax, BYTE PTR driver_version_only$[rsp]
  0016e	85 c0		 test	 eax, eax
  00170	74 33		 je	 SHORT $LN6@getGPUInfo

; 179  :         if (!opencl_error) {

  00172	0f b6 84 24 a4
	01 00 00	 movzx	 eax, BYTE PTR opencl_error$[rsp]
  0017a	85 c0		 test	 eax, eax
  0017c	75 22		 jne	 SHORT $LN8@getGPUInfo

; 180  :             cl_get_driver_version(&data, &cl, buffer, buffer_size);

  0017e	44 8b 8c 24 f0
	01 00 00	 mov	 r9d, DWORD PTR buffer_size$[rsp]
  00186	4c 8b 84 24 e8
	01 00 00	 mov	 r8, QWORD PTR buffer$[rsp]
  0018e	48 8d 54 24 50	 lea	 rdx, QWORD PTR cl$[rsp]
  00193	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR data$[rsp]
  0019b	e8 00 00 00 00	 call	 ?cl_get_driver_version@@YAHPEBUcl_data_t@@PEBUcl_func_t@@PEADI@Z ; cl_get_driver_version
$LN8@getGPUInfo:

; 181  :         }
; 182  :     } else {

  001a0	e9 9d 00 00 00	 jmp	 $LN7@getGPUInfo
$LN6@getGPUInfo:

; 183  :         if (!(opencl_error && intel_error)) {

  001a5	0f b6 84 24 a4
	01 00 00	 movzx	 eax, BYTE PTR opencl_error$[rsp]
  001ad	85 c0		 test	 eax, eax
  001af	74 10		 je	 SHORT $LN10@getGPUInfo
  001b1	0f b6 84 24 a5
	01 00 00	 movzx	 eax, BYTE PTR intel_error$[rsp]
  001b9	85 c0		 test	 eax, eax
  001bb	0f 85 81 00 00
	00		 jne	 $LN9@getGPUInfo
$LN10@getGPUInfo:

; 184  :             cl_create_info_string((opencl_error) ? NULL : &data, &cl, (intel_error) ? NULL : &info, buffer, buffer_size);

  001c1	0f b6 84 24 a5
	01 00 00	 movzx	 eax, BYTE PTR intel_error$[rsp]
  001c9	85 c0		 test	 eax, eax
  001cb	74 0e		 je	 SHORT $LN12@getGPUInfo
  001cd	48 c7 84 24 b0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv151[rsp], 0
  001d9	eb 10		 jmp	 SHORT $LN13@getGPUInfo
$LN12@getGPUInfo:
  001db	48 8d 84 24 78
	01 00 00	 lea	 rax, QWORD PTR info$[rsp]
  001e3	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN13@getGPUInfo:
  001eb	0f b6 84 24 a4
	01 00 00	 movzx	 eax, BYTE PTR opencl_error$[rsp]
  001f3	85 c0		 test	 eax, eax
  001f5	74 0e		 je	 SHORT $LN14@getGPUInfo
  001f7	48 c7 84 24 b8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv156[rsp], 0
  00203	eb 10		 jmp	 SHORT $LN15@getGPUInfo
$LN14@getGPUInfo:
  00205	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR data$[rsp]
  0020d	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv156[rsp], rax
$LN15@getGPUInfo:
  00215	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR buffer_size$[rsp]
  0021c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00220	4c 8b 8c 24 e8
	01 00 00	 mov	 r9, QWORD PTR buffer$[rsp]
  00228	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR tv151[rsp]
  00230	48 8d 54 24 50	 lea	 rdx, QWORD PTR cl$[rsp]
  00235	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  0023d	e8 00 00 00 00	 call	 ?cl_create_info_string@@YAHPEAUcl_data_t@@PEBUcl_func_t@@PEBUIntelDeviceInfo@@PEADI@Z ; cl_create_info_string
$LN9@getGPUInfo:
$LN7@getGPUInfo:

; 185  :         }
; 186  :     }
; 187  :     cl_release(&data, &cl);

  00242	48 8d 54 24 50	 lea	 rdx, QWORD PTR cl$[rsp]
  00247	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR data$[rsp]
  0024f	e8 00 00 00 00	 call	 ?cl_release@@YAXPEAUcl_data_t@@PEAUcl_func_t@@@Z ; cl_release

; 188  :     return ret;

  00254	8b 44 24 30	 mov	 eax, DWORD PTR ret$[rsp]

; 189  : #endif // !ENABLE_OPENCL
; 190  : }

  00258	8b f8		 mov	 edi, eax
  0025a	48 8b cc	 mov	 rcx, rsp
  0025d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getGPUInfo@@YAHPEBDPEADI_N@Z$rtcFrameData
  00264	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00269	8b c7		 mov	 eax, edi
  0026b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00273	48 33 cc	 xor	 rcx, rsp
  00276	e8 00 00 00 00	 call	 __security_check_cookie
  0027b	48 81 c4 d0 01
	00 00		 add	 rsp, 464		; 000001d0H
  00282	5f		 pop	 rdi
  00283	c3		 ret	 0
?getGPUInfo@@YAHPEBDPEADI_N@Z ENDP			; getGPUInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 72
_Buffer$ = 112
_BufferCount$ = 120
_Format$ = 128
sprintf_s PROC						; COMDAT

; 1841 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

  0002d	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00035	48 89 44 24 48	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	45 33 c9	 xor	 r9d, r9d
  00047	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR _Format$[rsp]
  0004f	48 8b 54 24 78	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  00054	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00059	e8 00 00 00 00	 call	 _vsprintf_s_l
  0005e	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1846 :             __crt_va_end(_ArgList);

  00062	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1847 :             return _Result;

  0006b	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 1848 :         }

  0006f	8b f8		 mov	 edi, eax
  00071	48 8b cc	 mov	 rcx, rsp
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf_s$rtcFrameData
  0007b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00080	8b c7		 mov	 eax, edi
  00082	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00086	5f		 pop	 rdi
  00087	c3		 ret	 0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1497 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00041	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00046	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0004b	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00050	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00055	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf_s
  0005e	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00062	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00067	7d 0a		 jge	 SHORT $LN3@vsprintf_s
  00069	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  00071	eb 08		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  00073	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00077	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
  0007b	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1503 :     }

  0007f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
  00000	40 57		 push	 rdi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT ?_tcsstr@@YAPEADPEADPEBD@Z
_TEXT	SEGMENT
_S$ = 48
_P$ = 56
?_tcsstr@@YAPEADPEADPEBD@Z PROC				; _tcsstr, COMDAT

; 2044 :         {return ((char *)_tcsstr((const char *)_S, _P)); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _P$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  0002d	e8 00 00 00 00	 call	 _tcsstr
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
?_tcsstr@@YAPEADPEADPEBD@Z ENDP				; _tcsstr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT _tcsstr
_TEXT	SEGMENT
_s1$ = 48
_s2$ = 56
_tcsstr	PROC						; COMDAT

; 1582 : _Check_return_ __inline _CRPC _tcsstr(_In_z_ _CPC _s1,_In_z_ _CPC _s2) {return (_CRPC)_mbsstr((_CPUC)_s1,(_CPUC)_s2);}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _s2$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsstr
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
_tcsstr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpu_info.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
