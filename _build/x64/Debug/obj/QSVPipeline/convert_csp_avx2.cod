; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG27266 DB	'Invalid', 00H
$SG27267 DB	'nv12', 00H
	ORG $+3
$SG27268 DB	'yv12', 00H
	ORG $+3
$SG27269 DB	'yuy2', 00H
	ORG $+3
$SG27270 DB	'yuv422', 00H
	ORG $+1
$SG27271 DB	'nv16', 00H
	ORG $+3
$SG27272 DB	'yuv444', 00H
	ORG $+1
$SG27273 DB	'yv12(9bit)', 00H
	ORG $+1
$SG27298 DB	'rgb', 00H
$SG27274 DB	'yv12(10bit)', 00H
$SG27300 DB	'gbr', 00H
$SG27275 DB	'yv12(12bit)', 00H
$SG27303 DB	'y8', 00H
	ORG $+1
$SG27276 DB	'yv12(14bit)', 00H
	ORG $+4
$SG27277 DB	'yv12(16bit)', 00H
$SG27278 DB	'p010', 00H
	ORG $+7
$SG27279 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG27280 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG27281 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG27282 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG27283 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG27284 DB	'p210', 00H
	ORG $+3
$SG27285 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG27286 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG27287 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG27288 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG27289 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG27290 DB	'yuva444', 00H
$SG27291 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG27292 DB	'rgb24r', 00H
	ORG $+1
$SG27293 DB	'rgb32r', 00H
	ORG $+1
$SG27294 DB	'rgb24', 00H
	ORG $+2
$SG27295 DB	'rgb32', 00H
	ORG $+2
$SG27296 DB	'bgr24', 00H
	ORG $+2
$SG27297 DB	'bgr32', 00H
	ORG $+2
$SG27299 DB	'rgba', 00H
	ORG $+3
$SG27301 DB	'gbra', 00H
	ORG $+3
$SG27302 DB	'yc48', 00H
	ORG $+3
$SG27304 DB	'yc16', 00H
	ORG $+3
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_nv12_to_nv12_avx2
PUBLIC	??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_nv12_to_nv12_avx2_internal<0>
PUBLIC	?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_p010_to_p010_avx2
PUBLIC	??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_nv12_to_nv12_avx2_internal<1>
PUBLIC	?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_avx2
PUBLIC	?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuy2_to_nv12_i_avx2
PUBLIC	?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_avx2
PUBLIC	?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_uv_yv12_to_nv12_avx2
PUBLIC	?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb32_avx2
PUBLIC	?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb32_avx2
PUBLIC	?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32_to_rgb32_avx2
PUBLIC	?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb32r_to_rgb32_avx2
PUBLIC	?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24_to_rgb24_avx2
PUBLIC	?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_rgb24r_to_rgb24_avx2
PUBLIC	?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_p010_avx2
PUBLIC	?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_16_to_nv12_avx2
PUBLIC	?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_14_to_nv12_avx2
PUBLIC	?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_12_to_nv12_avx2
PUBLIC	?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_10_to_nv12_avx2
PUBLIC	?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_09_to_nv12_avx2
PUBLIC	?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_16_to_p010_avx2
PUBLIC	?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_14_to_p010_avx2
PUBLIC	?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_12_to_p010_avx2
PUBLIC	?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_10_to_p010_avx2
PUBLIC	?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_09_to_p010_avx2
PUBLIC	?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_yuv444_to_yuv444_avx2
PUBLIC	?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_14_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_12_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_10_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_09_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_to_yuv444_16_avx2
PUBLIC	?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16_to_yuv444_avx2
PUBLIC	?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_14_to_yuv444_avx2
PUBLIC	?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_12_to_yuv444_avx2
PUBLIC	?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_10_to_yuv444_avx2
PUBLIC	?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_09_to_yuv444_avx2
PUBLIC	?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_avx2
PUBLIC	?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_avx2
PUBLIC	?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_avx2
PUBLIC	?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16bit_to_yc48_avx2
PUBLIC	__ymm@0000100000001000000010000000100000001000000010000000100000001000
PUBLIC	__ymm@0001000100010001000100010001000100010001000100010001000100010001
PUBLIC	__ymm@0002000200020002000200020002000200020002000200020002000200020002
PUBLIC	__ymm@0080008000800080008000800080008000800080008000800080008000800080
PUBLIC	__ymm@0800080008000800080008000800080008000800080008000800080008000800
PUBLIC	__ymm@082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f
PUBLIC	__ymm@1000100010001000100010001000100010001000100010001000100010001000
PUBLIC	__ymm@124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a
PUBLIC	__ymm@12b412b412b412b412b412b412b412b412b412b412b412b412b412b412b412b4
PUBLIC	__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
	DD	imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z+284
	DD	imagerel $unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
$pdata$?separate_low_up@@YAXAEAT__m256i@@0@Z DD imagerel ?separate_low_up@@YAXAEAT__m256i@@0@Z
	DD	imagerel ?separate_low_up@@YAXAEAT__m256i@@0@Z+393
	DD	imagerel $unwind$?separate_low_up@@YAXAEAT__m256i@@0@Z
$pdata$?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+615
	DD	imagerel $unwind$??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+619
	DD	imagerel $unwind$??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1285
	DD	imagerel $unwind$?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z DD imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z
	DD	imagerel ?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z+486
	DD	imagerel $unwind$?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z
$pdata$?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+1406
	DD	imagerel $unwind$?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1340
	DD	imagerel $unwind$??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1339
	DD	imagerel $unwind$??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+1795
	DD	imagerel $unwind$?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+1828
	DD	imagerel $unwind$?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN6
	DD	imagerel $LN6+564
	DD	imagerel $unwind$?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z DD imagerel ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z
	DD	imagerel ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z+1125
	DD	imagerel $unwind$??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z
$pdata$?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN6
	DD	imagerel $LN6+599
	DD	imagerel $unwind$?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN6
	DD	imagerel $LN6+560
	DD	imagerel $unwind$?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN6
	DD	imagerel $LN6+595
	DD	imagerel $unwind$?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2254
	DD	imagerel $unwind$??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1813
	DD	imagerel $unwind$??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1813
	DD	imagerel $unwind$??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1813
	DD	imagerel $unwind$??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1813
	DD	imagerel $unwind$??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1813
	DD	imagerel $unwind$??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1610
	DD	imagerel $unwind$??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1610
	DD	imagerel $unwind$??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1610
	DD	imagerel $unwind$??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1610
	DD	imagerel $unwind$??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1610
	DD	imagerel $unwind$??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+591
	DD	imagerel $unwind$?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z DD imagerel ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z
	DD	imagerel ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z+1129
	DD	imagerel $unwind$??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z
$pdata$?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+733
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+732
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+732
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+732
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+732
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+824
	DD	imagerel $unwind$?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+938
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+938
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+938
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+938
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+938
	DD	imagerel $unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z DD imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z
	DD	imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z+599
	DD	imagerel $unwind$?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z
$pdata$?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z DD imagerel ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z
	DD	imagerel ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z+480
	DD	imagerel $unwind$?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z
$pdata$?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z DD imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z+480
	DD	imagerel $unwind$?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z DD imagerel ?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z
	DD	imagerel ?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z+190
	DD	imagerel $unwind$?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z
$pdata$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z DD imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z+236
	DD	imagerel $unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z
$pdata$?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z DD imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z+816
	DD	imagerel $unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z
$pdata$?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z DD imagerel ?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z
	DD	imagerel ?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z+289
	DD	imagerel $unwind$?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z
$pdata$?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z DD imagerel ?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z
	DD	imagerel ?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z+540
	DD	imagerel $unwind$?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z
$pdata$?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z DD imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z
	DD	imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z+754
	DD	imagerel $unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z
$pdata$?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z DD imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z
	DD	imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z+689
	DD	imagerel $unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z
$pdata$?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1330
	DD	imagerel $unwind$?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN12
	DD	imagerel $LN12+1454
	DD	imagerel $unwind$?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1251
	DD	imagerel $unwind$?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+1022
	DD	imagerel $unwind$?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT __ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
CONST	SEGMENT
__ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff DB 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __ymm@12b412b412b412b412b412b412b412b412b412b412b412b412b412b412b412b4
CONST	SEGMENT
__ymm@12b412b412b412b412b412b412b412b412b412b412b412b412b412b412b412b4 DB 0b4H
	DB	012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
	DB	0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H
	DB	012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
CONST	ENDS
;	COMDAT __ymm@124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a
CONST	SEGMENT
__ymm@124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a DB 'J'
	DB	012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J'
	DB	012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J'
	DB	012H, 'J', 012H, 'J', 012H, 'J', 012H
CONST	ENDS
;	COMDAT __ymm@1000100010001000100010001000100010001000100010001000100010001000
CONST	SEGMENT
__ymm@1000100010001000100010001000100010001000100010001000100010001000 DB 00H
	DB	010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H
	DB	010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H
	DB	010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __ymm@082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f
CONST	SEGMENT
__ymm@082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f DB '/'
	DB	08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H
	DB	'/', 08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H, '/'
	DB	08H, '/', 08H, '/', 08H
CONST	ENDS
;	COMDAT __ymm@0800080008000800080008000800080008000800080008000800080008000800
CONST	SEGMENT
__ymm@0800080008000800080008000800080008000800080008000800080008000800 DB 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __ymm@0080008000800080008000800080008000800080008000800080008000800080
CONST	SEGMENT
__ymm@0080008000800080008000800080008000800080008000800080008000800080 DB 080H
	DB	00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H
	DB	00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H, 00H, 080H
	DB	00H, 080H, 00H, 080H, 00H, 080H, 00H
CONST	ENDS
;	COMDAT __ymm@0002000200020002000200020002000200020002000200020002000200020002
CONST	SEGMENT
__ymm@0002000200020002000200020002000200020002000200020002000200020002 DB 02H
	DB	00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H
	DB	02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H, 00H, 02H
	DB	00H, 02H, 00H, 02H, 00H
CONST	ENDS
;	COMDAT __ymm@0001000100010001000100010001000100010001000100010001000100010001
CONST	SEGMENT
__ymm@0001000100010001000100010001000100010001000100010001000100010001 DB 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
	DB	01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __ymm@0000100000001000000010000000100000001000000010000000100000001000
CONST	SEGMENT
__ymm@0000100000001000000010000000100000001000000010000000100000001000 DB 00H
	DB	010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H, 010H
	DB	00H, 00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?SHUFFLE_MASK@?N@???$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z@4QBHB
CONST	SEGMENT
?SHUFFLE_MASK@?N@???$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z@4QBHB DD 00H ; `convert_yv12_to_p010_avx2_base<0>'::`13'::SHUFFLE_MASK
	DD	02H
	DD	04H
	DD	06H
	DD	01H
	DD	03H
	DD	05H
	DD	07H
CONST	ENDS
;	COMDAT ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z@4QBEB
CONST	SEGMENT
?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z@4QBEB DB 00H ; `gather_y_u_v_to_yc48'::`2'::shuffle_yc48
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	019011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; copy_nv12_to_nv12_avx2_internal<1>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+8
??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; copy_nv12_to_nv12_avx2_internal<1>
	DD	0cH
	DQ	FLAT:??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; copy_nv12_to_nv12_avx2_internal<1>
	DD	00H
	DQ	FLAT:??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	019011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; copy_nv12_to_nv12_avx2_internal<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+8
??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; copy_nv12_to_nv12_avx2_internal<0>
	DD	0cH
	DQ	FLAT:??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; copy_nv12_to_nv12_avx2_internal<0>
	DD	00H
	DQ	FLAT:??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD 033f19H
	DD	07015e219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?separate_low_up@@YAXAEAT__m256i@@0@Z DD 043301H
	DD	0390113H
	DD	0500b700cH
$unwind$?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	07a011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	037cH
	DD	050H
	DD	020H
$unwind$?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z DD 043801H
	DD	0450118H
	DD	050107011H
$unwind$?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	084011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03c4H
	DD	050H
	DD	020H
$unwind$?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	054011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	024cH
	DD	050H
	DD	020H
$unwind$?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	054011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	024cH
	DD	050H
	DD	020H
$unwind$?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	049cH
	DD	050H
	DD	020H
$unwind$?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	049cH
	DD	050H
	DD	020H
$unwind$?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z DD 043801H
	DD	0470118H
	DD	050107011H
$unwind$?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	0d0011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	062cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09c011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	048cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09c011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	048cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09c011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	048cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09c011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	048cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	09c011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	048cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	070011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	032cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	070011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	032cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	070011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	032cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	070011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	032cH
	DD	050H
	DD	020H
$unwind$?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	070011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	032cH
	DD	050H
	DD	020H
$unwind$?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	019011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z DD 043801H
	DD	0470118H
	DD	050107011H
$unwind$?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	02e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	011cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	02e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	011cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	02e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	011cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	02e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	011cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	02e011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	011cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	042011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01bcH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	056011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	025cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	056011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	025cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	056011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	025cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	056011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	025cH
	DD	050H
	DD	020H
$unwind$?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	056011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	025cH
	DD	050H
	DD	020H
$unwind$?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z DD 043801H
	DD	0410118H
	DD	050107011H
$unwind$?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z DD 043d01H
	DD	031011dH
	DD	050157016H
$unwind$?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z DD 043d01H
	DD	031011dH
	DD	050157016H
$unwind$?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z DD 043d01H
	DD	01b011dH
	DD	050157016H
$unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z DD 043d01H
	DD	01f011dH
	DD	050157016H
$unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z DD 043d01H
	DD	05d011dH
	DD	050157016H
$unwind$?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z DD 042e01H
	DD	029010eH
	DD	050067007H
$unwind$?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z DD 042e01H
	DD	049010eH
	DD	050067007H
$unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z DD 043801H
	DD	0610118H
	DD	050107011H
$unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z DD 043801H
	DD	04d0118H
	DD	050107011H
$unwind$?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	0ba011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0564H
	DD	060H
	DD	020H
$unwind$?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	0ba011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0564H
	DD	060H
	DD	020H
$unwind$?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	098011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0464H
	DD	050H
	DD	020H
$unwind$?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 054f19H
	DD	060011eH
	DD	060167017H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	02a4H
	DD	050H
	DD	020H
xdata	ENDS
CONST	SEGMENT
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0 DB 079H ; thread_y_range
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc DD 038H ; thread_y_range
	DD	0cH
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData DD 01H ; thread_y_range
	DD	00H
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yuy2_to_nv12_avx2
	DB	030H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yuy2_to_nv12_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_yuy2_to_nv12_avx2
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuy2_to_nv12_i_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0110H ; convert_yuy2_to_nv12_avx2
	DD	020H
	DQ	FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0d0H
	DD	020H
	DQ	FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yuy2_to_nv12_i_avx2
	DB	030H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yuy2_to_nv12_i_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 03H ; convert_yuy2_to_nv12_i_avx2
	DD	00H
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_nv12_avx2_base<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0110H ; convert_yuy2_to_nv12_i_avx2
	DD	020H
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0d0H
	DD	020H
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+144
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_nv12_avx2_base<0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a8H ; convert_yv12_to_nv12_avx2_base<0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_nv12_avx2_base<0>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_nv12_avx2_base<1>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_nv12_avx2_base<1>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_nv12_avx2_base<1>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb32_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0a8H ; convert_yv12_to_nv12_avx2_base<1>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24_to_rgb32_avx2
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24_to_rgb32_avx2
	DD	00H
	DQ	FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24r_to_rgb32_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0b0H ; convert_rgb24_to_rgb32_avx2
	DD	020H
	DQ	FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 04dH ; convert_rgb24r_to_rgb32_avx2
	DB	041H
	DB	053H
	DB	04bH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	033H
	DB	05fH
	DB	054H
	DB	04fH
	DB	05fH
	DB	052H
	DB	047H
	DB	042H
	DB	034H
	DB	00H
	ORG $+6
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_rgb24r_to_rgb32_avx2
	DD	00H
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb32_to_rgb32_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0b0H ; convert_rgb24r_to_rgb32_avx2
	DD	020H
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_rgb32_to_rgb32_avx2
	DD	0cH
	DQ	FLAT:?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_rgb32_to_rgb32_avx2
	DD	00H
	DQ	FLAT:?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb32r_to_rgb32_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24_to_rgb24_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_rgb32r_to_rgb32_avx2
	DD	0cH
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_rgb32r_to_rgb32_avx2
	DD	00H
	DQ	FLAT:?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_rgb24_to_rgb24_avx2
	DD	0cH
	DQ	FLAT:?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_rgb24_to_rgb24_avx2
	DD	00H
	DQ	FLAT:?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_rgb24r_to_rgb24_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_to_p010_avx2_base<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; convert_rgb24r_to_rgb24_avx2
	DD	0cH
	DQ	FLAT:?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_rgb24r_to_rgb24_avx2
	DD	00H
	DQ	FLAT:?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_to_p010_avx2_base<0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0238H ; convert_yv12_to_p010_avx2_base<0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	048H
	DD	0cH
	DQ	FLAT:??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_to_p010_avx2_base<0>
	DD	00H
	DQ	FLAT:??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_nv12_avx2_base<16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_nv12_avx2_base<16,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_nv12_avx2_base<16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_nv12_avx2_base<14,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0278H ; convert_yv12_high_to_nv12_avx2_base<16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_nv12_avx2_base<14,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0278H ; convert_yv12_high_to_nv12_avx2_base<14,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_nv12_avx2_base<14,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_nv12_avx2_base<12,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_nv12_avx2_base<12,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_nv12_avx2_base<12,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_nv12_avx2_base<10,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0278H ; convert_yv12_high_to_nv12_avx2_base<12,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_nv12_avx2_base<10,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0278H ; convert_yv12_high_to_nv12_avx2_base<10,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_nv12_avx2_base<10,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_nv12_avx2_base<9,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_nv12_avx2_base<9,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_nv12_avx2_base<9,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_p010_avx2_base<16,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0278H ; convert_yv12_high_to_nv12_avx2_base<9,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_p010_avx2_base<16,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0138H ; convert_yv12_high_to_p010_avx2_base<16,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_p010_avx2_base<16,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_p010_avx2_base<14,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_p010_avx2_base<14,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_p010_avx2_base<14,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_p010_avx2_base<12,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0138H ; convert_yv12_high_to_p010_avx2_base<14,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_p010_avx2_base<12,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0138H ; convert_yv12_high_to_p010_avx2_base<12,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_p010_avx2_base<12,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_p010_avx2_base<10,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_p010_avx2_base<10,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_p010_avx2_base<10,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yv12_high_to_p010_avx2_base<9,0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0138H ; convert_yv12_high_to_p010_avx2_base<10,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 075H ; convert_yv12_high_to_p010_avx2_base<9,0>
	DB	076H
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
	ORG $+7
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0138H ; convert_yv12_high_to_p010_avx2_base<9,0>
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+96
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 02H ; convert_yv12_high_to_p010_avx2_base<9,0>
	DD	00H
	DQ	FLAT:??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; copy_yuv444_to_yuv444_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_16_avx2_base<16>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 048H ; copy_yuv444_to_yuv444_avx2
	DD	0cH
	DQ	FLAT:?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; copy_yuv444_to_yuv444_avx2
	DD	00H
	DQ	FLAT:?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_16_avx2_base<16>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_16_avx2_base<16>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_16_avx2_base<14>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_16_avx2_base<12>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_16_avx2_base<14>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_16_avx2_base<14>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_16_avx2_base<12>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_16_avx2_base<12>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_16_avx2_base<10>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_16_avx2_base<9>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_16_avx2_base<10>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_16_avx2_base<10>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_16_avx2_base<9>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_16_avx2_base<9>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_to_yuv444_16_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_avx2_base<16>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_to_yuv444_16_avx2
	DD	0cH
	DQ	FLAT:?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_to_yuv444_16_avx2
	DD	00H
	DQ	FLAT:?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_avx2_base<16>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_avx2_base<16>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_avx2_base<14>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_avx2_base<12>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_avx2_base<14>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_avx2_base<14>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_avx2_base<12>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_avx2_base<12>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_avx2_base<10>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_high_to_yuv444_avx2_base<9>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_avx2_base<10>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_avx2_base<10>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 058H ; convert_yuv444_high_to_yuv444_avx2_base<9>
	DD	0cH
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+48
??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 01H ; convert_yuv444_high_to_yuv444_avx2_base<9>
	DD	00H
	DQ	FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_p010_avx2
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yc48_to_p010_avx2
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 079H ; convert_yc48_to_p010_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_p010_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 079H ; convert_yc48_to_p010_avx2
	DB	032H
	DB	00H
	ORG $+5
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_avx2
	DD	00H
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yc48_to_p010_i_avx2
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0260H ; convert_yc48_to_p010_avx2
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0220H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0198H
	DD	0cH
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0120H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	0a0H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_p010_i_avx2
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 079H ; convert_yc48_to_p010_i_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_p010_i_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 079H ; convert_yc48_to_p010_i_avx2
	DB	032H
	DB	00H
	ORG $+5
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0260H ; convert_yc48_to_p010_i_avx2
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0220H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0198H
	DD	0cH
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0120H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	0a0H
	DD	020H
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_i_avx2
	DD	00H
	DQ	FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	032H
	DB	00H
	ORG $+1
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 079H ; convert_yc48_to_yuv444_16bit_avx2
	DB	033H
	DB	00H
	ORG $+1
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_16bit_avx2
	DD	00H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_16bit_to_yc48_avx2
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0230H ; convert_yc48_to_yuv444_16bit_avx2
	DD	020H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	01f0H
	DD	020H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	01b0H
	DD	020H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0130H
	DD	020H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0b0H
	DD	020H
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 079H ; convert_yuv444_16bit_to_yc48_avx2
	DB	031H
	DB	00H
	ORG $+1
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yuv444_16bit_to_yc48_avx2
	DB	032H
	DB	00H
	ORG $+1
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 079H ; convert_yuv444_16bit_to_yc48_avx2
	DB	033H
	DB	00H
	ORG $+5
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0130H ; convert_yuv444_16bit_to_yc48_avx2
	DD	020H
	DQ	FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0f0H
	DD	020H
	DQ	FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0b0H
	DD	020H
	DQ	FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+192
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 04H ; convert_yuv444_16bit_to_yc48_avx2
	DD	00H
	DQ	FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y_range$ = 8
$T7 = 40
Y_line$ = 56
U_line$ = 64
V_line$ = 72
pixel$ = 80
y1$ = 128
y2$ = 192
y3$ = 256
y$8 = 292
Y$9 = 296
U$10 = 304
V$11 = 312
ycp_fin$12 = 320
ycp$13 = 328
$T14 = 352
$T15 = 384
$T16 = 416
$T17 = 448
$T18 = 480
$T19 = 512
$T20 = 552
$T21 = 576
$T22 = 608
$T23 = 640
__$ArrayPad$ = 672
dst$ = 800
src$ = 808
width$ = 816
src_y_pitch_byte$ = 824
src_uv_pitch_byte$ = 832
dst_y_pitch_byte$ = 840
height$ = 848
dst_height$ = 856
thread_id$ = 864
thread_n$ = 872
crop$ = 880
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16bit_to_yc48_avx2

; 1143 : void convert_yuv444_16bit_to_yc48_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 00 03
	00 00		 sub	 rsp, 768		; 00000300H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 c0 00 00 00	 mov	 ecx, 192		; 000000c0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR [rsp+800]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 a0 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1144 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  0004f	8b 84 24 68 03
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0005a	44 8b 8c 24 60
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00062	44 8b 84 24 50
	03 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  0006a	33 d2		 xor	 edx, edx
  0006c	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00073	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00078	48 8d 4d 28	 lea	 rcx, QWORD PTR $T7[rbp]
  0007c	48 8b f9	 mov	 rdi, rcx
  0007f	48 8b f0	 mov	 rsi, rax
  00082	b9 0c 00 00 00	 mov	 ecx, 12
  00087	f3 a4		 rep movsb
  00089	48 8d 45 08	 lea	 rax, QWORD PTR y_range$[rbp]
  0008d	48 8d 4d 28	 lea	 rcx, QWORD PTR $T7[rbp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	48 8b f1	 mov	 rsi, rcx
  00097	b9 0c 00 00 00	 mov	 ecx, 12
  0009c	f3 a4		 rep movsb

; 1145 :     char *Y_line = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  0009e	b8 08 00 00 00	 mov	 eax, 8
  000a3	48 6b c0 00	 imul	 rax, rax, 0
  000a7	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000ae	0f af 4d 08	 imul	 ecx, DWORD PTR y_range$[rbp]
  000b2	48 63 c9	 movsxd	 rcx, ecx
  000b5	48 8b 94 24 28
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000bd	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 89 45 38	 mov	 QWORD PTR Y_line$[rbp], rax

; 1146 :     char *U_line = (char *)src[1] + src_y_pitch_byte * y_range.start_src;

  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	48 6b c0 01	 imul	 rax, rax, 1
  000d1	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000d8	0f af 4d 08	 imul	 ecx, DWORD PTR y_range$[rbp]
  000dc	48 63 c9	 movsxd	 rcx, ecx
  000df	48 8b 94 24 28
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000e7	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000eb	48 8b c1	 mov	 rax, rcx
  000ee	48 89 45 40	 mov	 QWORD PTR U_line$[rbp], rax

; 1147 :     char *V_line = (char *)src[2] + src_y_pitch_byte * y_range.start_src;

  000f2	b8 08 00 00 00	 mov	 eax, 8
  000f7	48 6b c0 02	 imul	 rax, rax, 2
  000fb	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00102	0f af 4d 08	 imul	 ecx, DWORD PTR y_range$[rbp]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 28
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 45 48	 mov	 QWORD PTR V_line$[rbp], rax

; 1148 :     char *pixel = (char *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0011c	b8 08 00 00 00	 mov	 eax, 8
  00121	48 6b c0 00	 imul	 rax, rax, 0
  00125	8b 8c 24 48 03
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0012c	0f af 4d 0c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00130	48 63 c9	 movsxd	 rcx, ecx
  00133	48 8b 94 24 20
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0013b	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0013f	48 8b c1	 mov	 rax, rcx
  00142	48 89 45 50	 mov	 QWORD PTR pixel$[rbp], rax

; 1149 :     __m256i y1, y2, y3;
; 1150 :     for (int y = 0; y < y_range.len; y++, pixel += dst_y_pitch_byte, Y_line += src_y_pitch_byte, U_line += src_y_pitch_byte, V_line += src_y_pitch_byte) {

  00146	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$8[rbp], 0
  00150	eb 66		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00152	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR y$8[rbp]
  00158	ff c0		 inc	 eax
  0015a	89 85 24 01 00
	00		 mov	 DWORD PTR y$8[rbp], eax
  00160	48 63 84 24 48
	03 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00168	48 8b 4d 50	 mov	 rcx, QWORD PTR pixel$[rbp]
  0016c	48 03 c8	 add	 rcx, rax
  0016f	48 8b c1	 mov	 rax, rcx
  00172	48 89 45 50	 mov	 QWORD PTR pixel$[rbp], rax
  00176	48 63 84 24 38
	03 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0017e	48 8b 4d 38	 mov	 rcx, QWORD PTR Y_line$[rbp]
  00182	48 03 c8	 add	 rcx, rax
  00185	48 8b c1	 mov	 rax, rcx
  00188	48 89 45 38	 mov	 QWORD PTR Y_line$[rbp], rax
  0018c	48 63 84 24 38
	03 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00194	48 8b 4d 40	 mov	 rcx, QWORD PTR U_line$[rbp]
  00198	48 03 c8	 add	 rcx, rax
  0019b	48 8b c1	 mov	 rax, rcx
  0019e	48 89 45 40	 mov	 QWORD PTR U_line$[rbp], rax
  001a2	48 63 84 24 38
	03 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001aa	48 8b 4d 48	 mov	 rcx, QWORD PTR V_line$[rbp]
  001ae	48 03 c8	 add	 rcx, rax
  001b1	48 8b c1	 mov	 rax, rcx
  001b4	48 89 45 48	 mov	 QWORD PTR V_line$[rbp], rax
$LN4@convert_yu:
  001b8	8b 45 10	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001bb	39 85 24 01 00
	00		 cmp	 DWORD PTR y$8[rbp], eax
  001c1	0f 8d 0d 02 00
	00		 jge	 $LN3@convert_yu

; 1151 :         short *Y = (short *)Y_line;

  001c7	48 8b 45 38	 mov	 rax, QWORD PTR Y_line$[rbp]
  001cb	48 89 85 28 01
	00 00		 mov	 QWORD PTR Y$9[rbp], rax

; 1152 :         short *U = (short *)U_line;

  001d2	48 8b 45 40	 mov	 rax, QWORD PTR U_line$[rbp]
  001d6	48 89 85 30 01
	00 00		 mov	 QWORD PTR U$10[rbp], rax

; 1153 :         short *V = (short *)V_line;

  001dd	48 8b 45 48	 mov	 rax, QWORD PTR V_line$[rbp]
  001e1	48 89 85 38 01
	00 00		 mov	 QWORD PTR V$11[rbp], rax

; 1154 :         short *const ycp_fin = (short *)pixel + width * 3;

  001e8	6b 84 24 30 03
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  001f0	48 98		 cdqe
  001f2	48 8b 4d 50	 mov	 rcx, QWORD PTR pixel$[rbp]
  001f6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001fa	48 89 85 40 01
	00 00		 mov	 QWORD PTR ycp_fin$12[rbp], rax

; 1155 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 48, Y += 16, U += 16, V += 16) {

  00201	48 8b 45 50	 mov	 rax, QWORD PTR pixel$[rbp]
  00205	48 89 85 48 01
	00 00		 mov	 QWORD PTR ycp$13[rbp], rax
  0020c	eb 48		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0020e	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR ycp$13[rbp]
  00215	48 83 c0 60	 add	 rax, 96			; 00000060H
  00219	48 89 85 48 01
	00 00		 mov	 QWORD PTR ycp$13[rbp], rax
  00220	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR Y$9[rbp]
  00227	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022b	48 89 85 28 01
	00 00		 mov	 QWORD PTR Y$9[rbp], rax
  00232	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR U$10[rbp]
  00239	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023d	48 89 85 30 01
	00 00		 mov	 QWORD PTR U$10[rbp], rax
  00244	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR V$11[rbp]
  0024b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0024f	48 89 85 38 01
	00 00		 mov	 QWORD PTR V$11[rbp], rax
$LN7@convert_yu:
  00256	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR ycp_fin$12[rbp]
  0025d	48 39 85 48 01
	00 00		 cmp	 QWORD PTR ycp$13[rbp], rax
  00264	0f 83 65 01 00
	00		 jae	 $LN6@convert_yu

; 1156 :             y1 = _mm256_loadu_si256((__m256i *)(Y));

  0026a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR Y$9[rbp]
  00271	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00275	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0027d	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00285	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1157 :             y2 = _mm256_loadu_si256((__m256i *)(U));

  0028d	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR U$10[rbp]
  00294	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00298	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  002a0	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  002a8	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1158 :             y3 = _mm256_loadu_si256((__m256i *)(V));

  002b0	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR V$11[rbp]
  002b7	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002bb	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  002c3	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  002cb	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1159 :             y1 = convert_y_range_to_yc48(y1);

  002d3	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  002db	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002e3	48 8d 8d 40 02
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  002ea	e8 00 00 00 00	 call	 ?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z ; convert_y_range_to_yc48
  002ef	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  002f7	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  002ff	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1160 :             y2 = convert_uv_range_to_yc48(y2);

  00307	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  0030f	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  00317	48 8d 8d 60 02
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  0031e	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z ; convert_uv_range_to_yc48
  00323	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  0032b	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  00333	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1161 :             y3 = convert_uv_range_to_yc48(y3);

  0033b	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00343	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  0034b	48 8d 8d 80 02
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  00352	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z ; convert_uv_range_to_yc48
  00357	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  0035f	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  00367	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1162 :             gather_y_u_v_to_yc48(y1, y2, y3);

  0036f	4c 8d 85 00 01
	00 00		 lea	 r8, QWORD PTR y3$[rbp]
  00376	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  0037d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  00384	e8 00 00 00 00	 call	 ?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z ; gather_y_u_v_to_yc48

; 1163 :             _mm256_storeu_si256((__m256i *)(ycp +  0), y1);

  00389	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR ycp$13[rbp]
  00390	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00398	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1164 :             _mm256_storeu_si256((__m256i *)(ycp + 16), y2);

  0039c	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR ycp$13[rbp]
  003a3	48 83 c0 20	 add	 rax, 32			; 00000020H
  003a7	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  003af	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1165 :             _mm256_storeu_si256((__m256i *)(ycp + 32), y3);

  003b3	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR ycp$13[rbp]
  003ba	48 83 c0 40	 add	 rax, 64			; 00000040H
  003be	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  003c6	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1166 :         }

  003ca	e9 3f fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 1167 :     }

  003cf	e9 7e fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 1168 : }

  003d4	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  003d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  003df	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003e4	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003eb	48 33 cc	 xor	 rcx, rsp
  003ee	e8 00 00 00 00	 call	 __security_check_cookie
  003f3	48 81 c4 00 03
	00 00		 add	 rsp, 768		; 00000300H
  003fa	5f		 pop	 rdi
  003fb	5e		 pop	 rsi
  003fc	5d		 pop	 rbp
  003fd	c3		 ret	 0
?convert_yuv444_16bit_to_yc48_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16bit_to_yc48_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y_range$ = 8
$T9 = 40
Y_line$ = 56
U_line$ = 64
V_line$ = 72
pixel$ = 80
yC_pw_one$ = 128
$T10 = 192
yC_YCC$ = 256
$T11 = 320
y1$ = 384
y2$ = 448
y3$ = 512
y$12 = 548
Y$13 = 552
U$14 = 560
V$15 = 568
ycp_fin$16 = 576
ycp$17 = 584
$T18 = 608
$T19 = 640
$T20 = 672
$T21 = 704
$T22 = 736
$T23 = 768
$T24 = 800
$T25 = 832
$T26 = 864
$T27 = 896
$T28 = 928
$T29 = 968
$T30 = 992
$T31 = 1024
$T32 = 1056
$T33 = 1088
__$ArrayPad$ = 1120
dst$ = 1248
src$ = 1256
width$ = 1264
src_y_pitch_byte$ = 1272
src_uv_pitch_byte$ = 1280
dst_y_pitch_byte$ = 1288
height$ = 1296
dst_height$ = 1304
thread_id$ = 1312
thread_n$ = 1320
crop$ = 1328
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_avx2

; 1114 : void convert_yc48_to_yuv444_16bit_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec c0 04
	00 00		 sub	 rsp, 1216		; 000004c0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 30 01 00 00	 mov	 ecx, 304		; 00000130H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 e0
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1248]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 60 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1115 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  0004f	8b 84 24 28 05
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0005a	44 8b 8c 24 20
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00062	44 8b 84 24 10
	05 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  0006a	33 d2		 xor	 edx, edx
  0006c	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  00073	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00078	48 8d 4d 28	 lea	 rcx, QWORD PTR $T9[rbp]
  0007c	48 8b f9	 mov	 rdi, rcx
  0007f	48 8b f0	 mov	 rsi, rax
  00082	b9 0c 00 00 00	 mov	 ecx, 12
  00087	f3 a4		 rep movsb
  00089	48 8d 45 08	 lea	 rax, QWORD PTR y_range$[rbp]
  0008d	48 8d 4d 28	 lea	 rcx, QWORD PTR $T9[rbp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	48 8b f1	 mov	 rsi, rcx
  00097	b9 0c 00 00 00	 mov	 ecx, 12
  0009c	f3 a4		 rep movsb

; 1116 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0009e	b8 08 00 00 00	 mov	 eax, 8
  000a3	48 6b c0 00	 imul	 rax, rax, 0
  000a7	8b 8c 24 08 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000ae	0f af 4d 0c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  000b2	48 63 c9	 movsxd	 rcx, ecx
  000b5	48 8b 94 24 e0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000bd	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 89 45 38	 mov	 QWORD PTR Y_line$[rbp], rax

; 1117 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte * y_range.start_dst;

  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	48 6b c0 01	 imul	 rax, rax, 1
  000d1	8b 8c 24 08 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d8	0f af 4d 0c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  000dc	48 63 c9	 movsxd	 rcx, ecx
  000df	48 8b 94 24 e0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000e7	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000eb	48 8b c1	 mov	 rax, rcx
  000ee	48 89 45 40	 mov	 QWORD PTR U_line$[rbp], rax

; 1118 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte * y_range.start_dst;

  000f2	b8 08 00 00 00	 mov	 eax, 8
  000f7	48 6b c0 02	 imul	 rax, rax, 2
  000fb	8b 8c 24 08 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00102	0f af 4d 0c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 e0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 45 48	 mov	 QWORD PTR V_line$[rbp], rax

; 1119 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  0011c	b8 08 00 00 00	 mov	 eax, 8
  00121	48 6b c0 00	 imul	 rax, rax, 0
  00125	8b 8c 24 f8 04
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0012c	0f af 4d 08	 imul	 ecx, DWORD PTR y_range$[rbp]
  00130	48 63 c9	 movsxd	 rcx, ecx
  00133	48 8b 94 24 e8
	04 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0013b	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0013f	48 8b c1	 mov	 rax, rcx
  00142	48 89 45 50	 mov	 QWORD PTR pixel$[rbp], rax

; 1120 :     const __m256i yC_pw_one = _mm256_set1_epi16(1);

  00146	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
  0014e	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  00156	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  0015e	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR yC_pw_one$[rbp], ymm0

; 1121 :     const __m256i yC_YCC = _mm256_set1_epi32(1<<LSFT_YCC_16);

  00166	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0000100000001000000010000000100000001000000010000000100000001000
  0016e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  00176	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  0017e	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR yC_YCC$[rbp], ymm0

; 1122 :     __m256i y1, y2, y3;
; 1123 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00186	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$12[rbp], 0
  00190	eb 66		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00192	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR y$12[rbp]
  00198	ff c0		 inc	 eax
  0019a	89 85 24 02 00
	00		 mov	 DWORD PTR y$12[rbp], eax
  001a0	48 63 84 24 f8
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a8	48 8b 4d 50	 mov	 rcx, QWORD PTR pixel$[rbp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 45 50	 mov	 QWORD PTR pixel$[rbp], rax
  001b6	48 63 84 24 08
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001be	48 8b 4d 38	 mov	 rcx, QWORD PTR Y_line$[rbp]
  001c2	48 03 c8	 add	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 45 38	 mov	 QWORD PTR Y_line$[rbp], rax
  001cc	48 63 84 24 08
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d4	48 8b 4d 40	 mov	 rcx, QWORD PTR U_line$[rbp]
  001d8	48 03 c8	 add	 rcx, rax
  001db	48 8b c1	 mov	 rax, rcx
  001de	48 89 45 40	 mov	 QWORD PTR U_line$[rbp], rax
  001e2	48 63 84 24 08
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ea	48 8b 4d 48	 mov	 rcx, QWORD PTR V_line$[rbp]
  001ee	48 03 c8	 add	 rcx, rax
  001f1	48 8b c1	 mov	 rax, rcx
  001f4	48 89 45 48	 mov	 QWORD PTR V_line$[rbp], rax
$LN4@convert_yc:
  001f8	8b 45 10	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001fb	39 85 24 02 00
	00		 cmp	 DWORD PTR y$12[rbp], eax
  00201	0f 8d af 02 00
	00		 jge	 $LN3@convert_yc

; 1124 :         short *Y = (short *)Y_line;

  00207	48 8b 45 38	 mov	 rax, QWORD PTR Y_line$[rbp]
  0020b	48 89 85 28 02
	00 00		 mov	 QWORD PTR Y$13[rbp], rax

; 1125 :         short *U = (short *)U_line;

  00212	48 8b 45 40	 mov	 rax, QWORD PTR U_line$[rbp]
  00216	48 89 85 30 02
	00 00		 mov	 QWORD PTR U$14[rbp], rax

; 1126 :         short *V = (short *)V_line;

  0021d	48 8b 45 48	 mov	 rax, QWORD PTR V_line$[rbp]
  00221	48 89 85 38 02
	00 00		 mov	 QWORD PTR V$15[rbp], rax

; 1127 :         short *const ycp_fin = (short *)pixel + width * 3;

  00228	6b 84 24 f0 04
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00230	48 98		 cdqe
  00232	48 8b 4d 50	 mov	 rcx, QWORD PTR pixel$[rbp]
  00236	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0023a	48 89 85 40 02
	00 00		 mov	 QWORD PTR ycp_fin$16[rbp], rax

; 1128 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 48, Y += 16, U += 16, V += 16) {

  00241	48 8b 45 50	 mov	 rax, QWORD PTR pixel$[rbp]
  00245	48 89 85 48 02
	00 00		 mov	 QWORD PTR ycp$17[rbp], rax
  0024c	eb 48		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0024e	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR ycp$17[rbp]
  00255	48 83 c0 60	 add	 rax, 96			; 00000060H
  00259	48 89 85 48 02
	00 00		 mov	 QWORD PTR ycp$17[rbp], rax
  00260	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR Y$13[rbp]
  00267	48 83 c0 20	 add	 rax, 32			; 00000020H
  0026b	48 89 85 28 02
	00 00		 mov	 QWORD PTR Y$13[rbp], rax
  00272	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR U$14[rbp]
  00279	48 83 c0 20	 add	 rax, 32			; 00000020H
  0027d	48 89 85 30 02
	00 00		 mov	 QWORD PTR U$14[rbp], rax
  00284	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR V$15[rbp]
  0028b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0028f	48 89 85 38 02
	00 00		 mov	 QWORD PTR V$15[rbp], rax
$LN7@convert_yc:
  00296	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR ycp_fin$16[rbp]
  0029d	48 39 85 48 02
	00 00		 cmp	 QWORD PTR ycp$17[rbp], rax
  002a4	0f 83 07 02 00
	00		 jae	 $LN6@convert_yc

; 1129 :             y1 = _mm256_loadu_si256((__m256i *)(ycp +  0));

  002aa	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR ycp$17[rbp]
  002b1	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002b5	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  002bd	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  002c5	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1130 :             y2 = _mm256_loadu_si256((__m256i *)(ycp + 16));

  002cd	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR ycp$17[rbp]
  002d4	48 83 c0 20	 add	 rax, 32			; 00000020H
  002d8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002dc	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  002e4	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  002ec	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1131 :             y3 = _mm256_loadu_si256((__m256i *)(ycp + 32));

  002f4	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR ycp$17[rbp]
  002fb	48 83 c0 40	 add	 rax, 64			; 00000040H
  002ff	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00303	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  0030b	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  00313	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1132 : 
; 1133 :             gather_y_u_v_from_yc48(y1, y2, y3);

  0031b	4c 8d 85 00 02
	00 00		 lea	 r8, QWORD PTR y3$[rbp]
  00322	48 8d 95 c0 01
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  00329	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  00330	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z ; gather_y_u_v_from_yc48

; 1134 : 
; 1135 :             _mm256_storeu_si256((__m256i *)Y, convert_y_range_from_yc48(y1, yC_Y_L_MA_16, Y_L_RSH_16, yC_YCC, yC_pw_one));

  00335	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0033d	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  00345	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  0034d	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  00355	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  0035d	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00365	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  0036c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00371	4c 8d 8d 00 01
	00 00		 lea	 r9, QWORD PTR yC_YCC$[rbp]
  00378	41 b8 04 00 00
	00		 mov	 r8d, 4
  0037e	48 8d 95 00 04
	00 00		 lea	 rdx, QWORD PTR $T31[rbp]
  00385	48 8d 8d e0 03
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  0038c	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ; convert_y_range_from_yc48
  00391	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  00399	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR Y$13[rbp]
  003a0	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  003a8	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1136 :             _mm256_storeu_si256((__m256i *)U, convert_uv_range_from_yc48(y2, _mm256_set1_epi16(UV_OFFSET_x1), yC_UV_L_MA_16_444, UV_L_RSH_16_444, yC_YCC, yC_pw_one));

  003ac	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  003b4	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  003bc	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0800080008000800080008000800080008000800080008000800080008000800
  003c4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  003cc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  003d4	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  003dc	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  003e3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  003e8	48 8d 85 00 01
	00 00		 lea	 rax, QWORD PTR yC_YCC$[rbp]
  003ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f4	45 33 c9	 xor	 r9d, r9d
  003f7	4c 8d 85 20 03
	00 00		 lea	 r8, QWORD PTR $T24[rbp]
  003fe	48 8d 95 00 03
	00 00		 lea	 rdx, QWORD PTR $T23[rbp]
  00405	48 8d 8d 20 04
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  0040c	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z ; convert_uv_range_from_yc48
  00411	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00419	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR U$14[rbp]
  00420	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00428	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1137 :             _mm256_storeu_si256((__m256i *)V, convert_uv_range_from_yc48(y3, _mm256_set1_epi16(UV_OFFSET_x1), yC_UV_L_MA_16_444, UV_L_RSH_16_444, yC_YCC, yC_pw_one));

  0042c	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00434	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  0043c	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0800080008000800080008000800080008000800080008000800080008000800
  00444	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0044c	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00454	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  0045c	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  00463	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00468	48 8d 85 00 01
	00 00		 lea	 rax, QWORD PTR yC_YCC$[rbp]
  0046f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00474	45 33 c9	 xor	 r9d, r9d
  00477	4c 8d 85 80 03
	00 00		 lea	 r8, QWORD PTR $T27[rbp]
  0047e	48 8d 95 60 03
	00 00		 lea	 rdx, QWORD PTR $T26[rbp]
  00485	48 8d 8d 40 04
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  0048c	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z ; convert_uv_range_from_yc48
  00491	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  00499	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR V$15[rbp]
  004a0	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004a8	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1138 :         }

  004ac	e9 9d fd ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1139 :     }

  004b1	e9 dc fc ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1140 :     _mm256_zeroupper();

  004b6	c5 f8 77	 vzeroupper

; 1141 : }

  004b9	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  004bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004c4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004c9	48 8b 8d 60 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004d0	48 33 cc	 xor	 rcx, rsp
  004d3	e8 00 00 00 00	 call	 __security_check_cookie
  004d8	48 81 c4 c0 04
	00 00		 add	 rsp, 1216		; 000004c0H
  004df	5f		 pop	 rdi
  004e0	5e		 pop	 rsi
  004e1	5d		 pop	 rbp
  004e2	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
x$ = 0
y$ = 4
i$ = 8
dst_Y$ = 16
dst_C$ = 24
pixel$ = 32
ycp$ = 40
ycpw$ = 48
Y$ = 56
C$ = 64
yC_pw_one$ = 96
$T8 = 160
yC_YCC$ = 224
$T9 = 288
dst_y_pitch$ = 320
y_range$ = 344
$T10 = 376
y0$ = 416
y1$ = 480
y2$ = 544
y3$ = 608
$T11 = 640
$T12 = 672
$T13 = 704
$T14 = 736
$T15 = 768
$T16 = 800
$T17 = 832
$T18 = 864
$T19 = 896
$T20 = 928
$T21 = 960
$T22 = 992
$T23 = 1024
$T24 = 1056
$T25 = 1096
$T26 = 1120
$T27 = 1152
$T28 = 1184
$T29 = 1216
$T30 = 1248
$T31 = 1280
$T32 = 1312
$T33 = 1344
__$ArrayPad$ = 1376
dst$ = 1520
src$ = 1528
width$ = 1536
src_y_pitch_byte$ = 1544
src_uv_pitch_byte$ = 1552
dst_y_pitch_byte$ = 1560
height$ = 1568
dst_height$ = 1576
thread_id$ = 1584
thread_n$ = 1592
crop$ = 1600
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_avx2

; 1071 : void convert_yc48_to_p010_i_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec d0 05
	00 00		 sub	 rsp, 1488		; 000005d0H
  0001e	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 74 01 00 00	 mov	 ecx, 372		; 00000174H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1520]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 60 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1072 :     int x, y, i;
; 1073 :     short *dst_Y = (short *)dst[0];

  0004f	b8 08 00 00 00	 mov	 eax, 8
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00060	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00064	48 89 45 10	 mov	 QWORD PTR dst_Y$[rbp], rax

; 1074 :     short *dst_C = (short *)dst[1];

  00068	b8 08 00 00 00	 mov	 eax, 8
  0006d	48 6b c0 01	 imul	 rax, rax, 1
  00071	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00079	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0007d	48 89 45 18	 mov	 QWORD PTR dst_C$[rbp], rax

; 1075 :     const void  *pixel = src[0];

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	48 6b c0 00	 imul	 rax, rax, 0
  0008a	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00092	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00096	48 89 45 20	 mov	 QWORD PTR pixel$[rbp], rax

; 1076 :     const short *ycp, *ycpw;
; 1077 :     short *Y = NULL, *C = NULL;

  0009a	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR Y$[rbp], 0
  000a2	48 c7 45 40 00
	00 00 00	 mov	 QWORD PTR C$[rbp], 0

; 1078 :     const __m256i yC_pw_one = _mm256_set1_epi16(1);

  000aa	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
  000b2	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  000ba	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  000c2	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR yC_pw_one$[rbp], ymm0

; 1079 :     const __m256i yC_YCC = _mm256_set1_epi32(1<<LSFT_YCC_16);

  000c7	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0000100000001000000010000000100000001000000010000000100000001000
  000cf	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  000d7	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  000df	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR yC_YCC$[rbp], ymm0

; 1080 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000e7	8b 84 24 18 06
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000ee	d1 f8		 sar	 eax, 1
  000f0	89 85 40 01 00
	00		 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 1081 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000f6	8b 84 24 38 06
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  000fd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00101	44 8b 8c 24 30
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00109	44 8b 84 24 20
	06 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00111	33 d2		 xor	 edx, edx
  00113	48 8d 8d 48 04
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  0011a	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0011f	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00126	48 8b f9	 mov	 rdi, rcx
  00129	48 8b f0	 mov	 rsi, rax
  0012c	b9 0c 00 00 00	 mov	 ecx, 12
  00131	f3 a4		 rep movsb
  00133	48 8d 85 58 01
	00 00		 lea	 rax, QWORD PTR y_range$[rbp]
  0013a	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00141	48 8b f8	 mov	 rdi, rax
  00144	48 8b f1	 mov	 rsi, rcx
  00147	b9 0c 00 00 00	 mov	 ecx, 12
  0014c	f3 a4		 rep movsb

; 1082 :     __m256i y0, y1, y2, y3;
; 1083 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0014e	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y_range$[rbp]
  00154	89 45 04	 mov	 DWORD PTR y$[rbp], eax
  00157	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00159	8b 45 04	 mov	 eax, DWORD PTR y$[rbp]
  0015c	83 c0 04	 add	 eax, 4
  0015f	89 45 04	 mov	 DWORD PTR y$[rbp], eax
$LN4@convert_yc:
  00162	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR y_range$[rbp+8]
  00168	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR y_range$[rbp]
  0016e	03 c8		 add	 ecx, eax
  00170	8b c1		 mov	 eax, ecx
  00172	39 45 04	 cmp	 DWORD PTR y$[rbp], eax
  00175	0f 8d 06 04 00
	00		 jge	 $LN3@convert_yc

; 1084 :         for (i = 0; i < 2; i++) {

  0017b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00182	eb 08		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00184	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00187	ff c0		 inc	 eax
  00189	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN7@convert_yc:
  0018c	83 7d 08 02	 cmp	 DWORD PTR i$[rbp], 2
  00190	0f 8d e6 03 00
	00		 jge	 $LN6@convert_yc

; 1085 :             ycp = (short*)pixel + width * (y + i) * 3;

  00196	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00199	8b 4d 04	 mov	 ecx, DWORD PTR y$[rbp]
  0019c	03 c8		 add	 ecx, eax
  0019e	8b c1		 mov	 eax, ecx
  001a0	8b 8c 24 00 06
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001a7	0f af c8	 imul	 ecx, eax
  001aa	8b c1		 mov	 eax, ecx
  001ac	6b c0 03	 imul	 eax, eax, 3
  001af	48 98		 cdqe
  001b1	48 8b 4d 20	 mov	 rcx, QWORD PTR pixel$[rbp]
  001b5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b9	48 89 45 28	 mov	 QWORD PTR ycp$[rbp], rax

; 1086 :             ycpw= ycp + width*2*3;

  001bd	8b 84 24 00 06
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  001c4	d1 e0		 shl	 eax, 1
  001c6	6b c0 03	 imul	 eax, eax, 3
  001c9	48 98		 cdqe
  001cb	48 8b 4d 28	 mov	 rcx, QWORD PTR ycp$[rbp]
  001cf	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001d3	48 89 45 30	 mov	 QWORD PTR ycpw$[rbp], rax

; 1087 :             Y   = (short*)dst_Y + dst_y_pitch * (y + i);

  001d7	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  001da	8b 4d 04	 mov	 ecx, DWORD PTR y$[rbp]
  001dd	03 c8		 add	 ecx, eax
  001df	8b c1		 mov	 eax, ecx
  001e1	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  001e7	0f af c8	 imul	 ecx, eax
  001ea	8b c1		 mov	 eax, ecx
  001ec	48 98		 cdqe
  001ee	48 8b 4d 10	 mov	 rcx, QWORD PTR dst_Y$[rbp]
  001f2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f6	48 89 45 38	 mov	 QWORD PTR Y$[rbp], rax

; 1088 :             C   = (short*)dst_C + dst_y_pitch * (y + i*2) / 2;

  001fa	8b 45 04	 mov	 eax, DWORD PTR y$[rbp]
  001fd	8b 4d 08	 mov	 ecx, DWORD PTR i$[rbp]
  00200	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00203	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00209	0f af c8	 imul	 ecx, eax
  0020c	8b c1		 mov	 eax, ecx
  0020e	99		 cdq
  0020f	2b c2		 sub	 eax, edx
  00211	d1 f8		 sar	 eax, 1
  00213	48 98		 cdqe
  00215	48 8b 4d 18	 mov	 rcx, QWORD PTR dst_C$[rbp]
  00219	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0021d	48 89 45 40	 mov	 QWORD PTR C$[rbp], rax

; 1089 :             for (x = 0; x < width; x += 16, ycp += 48, ycpw += 48) {

  00221	c7 45 00 00 00
	00 00		 mov	 DWORD PTR x$[rbp], 0
  00228	eb 21		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  0022a	8b 45 00	 mov	 eax, DWORD PTR x$[rbp]
  0022d	83 c0 10	 add	 eax, 16
  00230	89 45 00	 mov	 DWORD PTR x$[rbp], eax
  00233	48 8b 45 28	 mov	 rax, QWORD PTR ycp$[rbp]
  00237	48 83 c0 60	 add	 rax, 96			; 00000060H
  0023b	48 89 45 28	 mov	 QWORD PTR ycp$[rbp], rax
  0023f	48 8b 45 30	 mov	 rax, QWORD PTR ycpw$[rbp]
  00243	48 83 c0 60	 add	 rax, 96			; 00000060H
  00247	48 89 45 30	 mov	 QWORD PTR ycpw$[rbp], rax
$LN10@convert_yc:
  0024b	8b 84 24 00 06
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00252	39 45 00	 cmp	 DWORD PTR x$[rbp], eax
  00255	0f 8d 1c 03 00
	00		 jge	 $LN9@convert_yc

; 1090 :                 y1 = _mm256_loadu_si256((__m256i *)(ycp +  0)); // 128, 0

  0025b	48 8b 45 28	 mov	 rax, QWORD PTR ycp$[rbp]
  0025f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00263	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  0026b	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  00273	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1091 :                 y2 = _mm256_loadu_si256((__m256i *)(ycp + 16)); // 384, 256

  0027b	48 8b 45 28	 mov	 rax, QWORD PTR ycp$[rbp]
  0027f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00283	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00287	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  0028f	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  00297	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1092 :                 y3 = _mm256_loadu_si256((__m256i *)(ycp + 32)); // 640, 512

  0029f	48 8b 45 28	 mov	 rax, QWORD PTR ycp$[rbp]
  002a3	48 83 c0 40	 add	 rax, 64			; 00000040H
  002a7	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002ab	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  002b3	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  002bb	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1093 : 
; 1094 :                 gather_y_uv_from_yc48(y1, y2, y3);

  002c3	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  002cb	c5 fe 7f 85 60
	04 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  002d3	4c 8d 85 60 04
	00 00		 lea	 r8, QWORD PTR $T26[rbp]
  002da	48 8d 95 20 02
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  002e1	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  002e8	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z ; gather_y_uv_from_yc48

; 1095 :                 y0 = y2;

  002ed	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002f5	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 1096 : 
; 1097 :                 _mm256_storeu_si256((__m256i *)(Y + x), convert_y_range_from_yc48(y1, yC_Y_L_MA_16, Y_L_RSH_16, yC_YCC, yC_pw_one));

  002fd	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00305	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0030d	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00315	c5 fe 7f 85 a0
	04 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  0031d	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00325	c5 fe 7f 85 80
	04 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  0032d	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  00331	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00336	4c 8d 8d e0 00
	00 00		 lea	 r9, QWORD PTR yC_YCC$[rbp]
  0033d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00343	48 8d 95 a0 04
	00 00		 lea	 rdx, QWORD PTR $T28[rbp]
  0034a	48 8d 8d 80 04
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00351	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ; convert_y_range_from_yc48
  00356	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0035e	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  00362	48 8b 4d 38	 mov	 rcx, QWORD PTR Y$[rbp]
  00366	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0036a	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00372	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1098 : 
; 1099 :                 y1 = _mm256_loadu_si256((__m256i *)(ycpw +  0));

  00376	48 8b 45 30	 mov	 rax, QWORD PTR ycpw$[rbp]
  0037a	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0037e	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00386	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  0038e	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1100 :                 y2 = _mm256_loadu_si256((__m256i *)(ycpw + 16));

  00396	48 8b 45 30	 mov	 rax, QWORD PTR ycpw$[rbp]
  0039a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0039e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003a2	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  003aa	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  003b2	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1101 :                 y3 = _mm256_loadu_si256((__m256i *)(ycpw + 32));

  003ba	48 8b 45 30	 mov	 rax, QWORD PTR ycpw$[rbp]
  003be	48 83 c0 40	 add	 rax, 64			; 00000040H
  003c2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003c6	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  003ce	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  003d6	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1102 : 
; 1103 :                 gather_y_uv_from_yc48(y1, y2, y3);

  003de	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  003e6	c5 fe 7f 85 c0
	04 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  003ee	4c 8d 85 c0 04
	00 00		 lea	 r8, QWORD PTR $T29[rbp]
  003f5	48 8d 95 20 02
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  003fc	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  00403	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z ; gather_y_uv_from_yc48

; 1104 : 
; 1105 :                 _mm256_storeu_si256((__m256i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(y1, yC_Y_L_MA_16, Y_L_RSH_16, yC_YCC, yC_pw_one));

  00408	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00410	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00418	c5 fe 6f 85 80
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  00420	c5 fe 7f 85 00
	05 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  00428	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00430	c5 fe 7f 85 e0
	04 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00438	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  0043c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00441	4c 8d 8d e0 00
	00 00		 lea	 r9, QWORD PTR yC_YCC$[rbp]
  00448	41 b8 04 00 00
	00		 mov	 r8d, 4
  0044e	48 8d 95 00 05
	00 00		 lea	 rdx, QWORD PTR $T31[rbp]
  00455	48 8d 8d e0 04
	00 00		 lea	 rcx, QWORD PTR $T30[rbp]
  0045c	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ; convert_y_range_from_yc48
  00461	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  00469	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  0046d	48 8b 4d 38	 mov	 rcx, QWORD PTR Y$[rbp]
  00471	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00475	8b 8d 40 01 00
	00		 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0047b	d1 e1		 shl	 ecx, 1
  0047d	48 63 c9	 movsxd	 rcx, ecx
  00480	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00484	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  0048c	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1106 : 
; 1107 :                 _mm256_storeu_si256((__m256i *)(C + x), convert_uv_range_from_yc48_420i(y0, y2, _mm256_set1_epi16(UV_OFFSET_x1), yC_UV_L_MA_16_420I(i), yC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, yC_YCC, yC_pw_one));

  00490	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00493	ff c0		 inc	 eax
  00495	83 e0 01	 and	 eax, 1
  00498	48 98		 cdqe
  0049a	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0049e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  004a5	48 03 c8	 add	 rcx, rax
  004a8	48 8b c1	 mov	 rax, rcx
  004ab	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004af	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  004b7	48 63 45 08	 movsxd	 rax, DWORD PTR i$[rbp]
  004bb	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  004c6	48 03 c8	 add	 rcx, rax
  004c9	48 8b c1	 mov	 rax, rcx
  004cc	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004d0	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  004d8	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0800080008000800080008000800080008000800080008000800080008000800
  004e0	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  004e8	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  004f0	c5 fe 7f 85 40
	05 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  004f8	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00500	c5 fe 7f 85 20
	05 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  00508	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  0050c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00511	48 8d 85 e0 00
	00 00		 lea	 rax, QWORD PTR yC_YCC$[rbp]
  00518	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0051d	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  00525	48 8d 85 00 04
	00 00		 lea	 rax, QWORD PTR $T23[rbp]
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	4c 8d 8d e0 03
	00 00		 lea	 r9, QWORD PTR $T22[rbp]
  00538	4c 8d 85 c0 03
	00 00		 lea	 r8, QWORD PTR $T21[rbp]
  0053f	48 8d 95 40 05
	00 00		 lea	 rdx, QWORD PTR $T33[rbp]
  00546	48 8d 8d 20 05
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  0054d	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  00552	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  0055a	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  0055e	48 8b 4d 40	 mov	 rcx, QWORD PTR C$[rbp]
  00562	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00566	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0056e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1108 :             }

  00572	e9 b3 fc ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1109 :         }

  00577	e9 08 fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1110 :     }

  0057c	e9 d8 fb ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1111 :     _mm256_zeroupper();

  00581	c5 f8 77	 vzeroupper

; 1112 : }

  00584	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00588	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0058f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00594	48 8b 8d 60 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0059b	48 33 cc	 xor	 rcx, rsp
  0059e	e8 00 00 00 00	 call	 __security_check_cookie
  005a3	48 81 c4 d0 05
	00 00		 add	 rsp, 1488		; 000005d0H
  005aa	5f		 pop	 rdi
  005ab	5e		 pop	 rsi
  005ac	5d		 pop	 rbp
  005ad	c3		 ret	 0
?convert_yc48_to_p010_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
x$ = 0
y$ = 4
dst_Y$ = 8
dst_C$ = 16
pixel$ = 24
ycp$ = 32
ycpw$ = 40
Y$ = 48
C$ = 56
yC_pw_one$ = 96
$T8 = 160
yC_YCC$ = 224
$T9 = 288
dst_y_pitch$ = 320
y_range$ = 344
$T10 = 376
y0$ = 416
y1$ = 480
y2$ = 544
y3$ = 608
$T11 = 640
$T12 = 672
$T13 = 704
$T14 = 736
$T15 = 768
$T16 = 800
$T17 = 832
$T18 = 864
$T19 = 896
$T20 = 928
$T21 = 960
$T22 = 992
$T23 = 1024
$T24 = 1064
$T25 = 1088
$T26 = 1120
$T27 = 1152
$T28 = 1184
$T29 = 1216
$T30 = 1248
$T31 = 1280
$T32 = 1312
$T33 = 1344
__$ArrayPad$ = 1376
dst$ = 1520
src$ = 1528
width$ = 1536
src_y_pitch_byte$ = 1544
src_uv_pitch_byte$ = 1552
dst_y_pitch_byte$ = 1560
height$ = 1568
dst_height$ = 1576
thread_id$ = 1584
thread_n$ = 1592
crop$ = 1600
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_avx2

; 1030 : void convert_yc48_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec d0 05
	00 00		 sub	 rsp, 1488		; 000005d0H
  0001e	48 8d 6c 24 60	 lea	 rbp, QWORD PTR [rsp+96]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 74 01 00 00	 mov	 ecx, 372		; 00000174H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1520]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 60 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1031 :     int x, y;
; 1032 :     short *dst_Y = (short *)dst[0];

  0004f	b8 08 00 00 00	 mov	 eax, 8
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00060	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00064	48 89 45 08	 mov	 QWORD PTR dst_Y$[rbp], rax

; 1033 :     short *dst_C = (short *)dst[1];

  00068	b8 08 00 00 00	 mov	 eax, 8
  0006d	48 6b c0 01	 imul	 rax, rax, 1
  00071	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00079	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0007d	48 89 45 10	 mov	 QWORD PTR dst_C$[rbp], rax

; 1034 :     const void  *pixel = src[0];

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	48 6b c0 00	 imul	 rax, rax, 0
  0008a	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00092	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00096	48 89 45 18	 mov	 QWORD PTR pixel$[rbp], rax

; 1035 :     const short *ycp, *ycpw;
; 1036 :     short *Y = NULL, *C = NULL;

  0009a	48 c7 45 30 00
	00 00 00	 mov	 QWORD PTR Y$[rbp], 0
  000a2	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR C$[rbp], 0

; 1037 :     const __m256i yC_pw_one = _mm256_set1_epi16(1);

  000aa	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0001000100010001000100010001000100010001000100010001000100010001
  000b2	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  000ba	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  000c2	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR yC_pw_one$[rbp], ymm0

; 1038 :     const __m256i yC_YCC = _mm256_set1_epi32(1<<LSFT_YCC_16);

  000c7	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0000100000001000000010000000100000001000000010000000100000001000
  000cf	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  000d7	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  000df	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR yC_YCC$[rbp], ymm0

; 1039 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000e7	8b 84 24 18 06
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000ee	d1 f8		 sar	 eax, 1
  000f0	89 85 40 01 00
	00		 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 1040 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000f6	8b 84 24 38 06
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  000fd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00101	44 8b 8c 24 30
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00109	44 8b 84 24 20
	06 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00111	33 d2		 xor	 edx, edx
  00113	48 8d 8d 28 04
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0011a	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0011f	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00126	48 8b f9	 mov	 rdi, rcx
  00129	48 8b f0	 mov	 rsi, rax
  0012c	b9 0c 00 00 00	 mov	 ecx, 12
  00131	f3 a4		 rep movsb
  00133	48 8d 85 58 01
	00 00		 lea	 rax, QWORD PTR y_range$[rbp]
  0013a	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00141	48 8b f8	 mov	 rdi, rax
  00144	48 8b f1	 mov	 rsi, rcx
  00147	b9 0c 00 00 00	 mov	 ecx, 12
  0014c	f3 a4		 rep movsb

; 1041 :     __m256i y0, y1, y2, y3;
; 1042 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  0014e	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y_range$[rbp]
  00154	89 45 04	 mov	 DWORD PTR y$[rbp], eax
  00157	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00159	8b 45 04	 mov	 eax, DWORD PTR y$[rbp]
  0015c	83 c0 02	 add	 eax, 2
  0015f	89 45 04	 mov	 DWORD PTR y$[rbp], eax
$LN4@convert_yc:
  00162	8b 85 60 01 00
	00		 mov	 eax, DWORD PTR y_range$[rbp+8]
  00168	8b 8d 58 01 00
	00		 mov	 ecx, DWORD PTR y_range$[rbp]
  0016e	03 c8		 add	 ecx, eax
  00170	8b c1		 mov	 eax, ecx
  00172	39 45 04	 cmp	 DWORD PTR y$[rbp], eax
  00175	0f 8d 8a 03 00
	00		 jge	 $LN3@convert_yc

; 1043 :         ycp = (short*)pixel + width * y * 3;

  0017b	8b 84 24 00 06
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00182	0f af 45 04	 imul	 eax, DWORD PTR y$[rbp]
  00186	6b c0 03	 imul	 eax, eax, 3
  00189	48 98		 cdqe
  0018b	48 8b 4d 18	 mov	 rcx, QWORD PTR pixel$[rbp]
  0018f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00193	48 89 45 20	 mov	 QWORD PTR ycp$[rbp], rax

; 1044 :         ycpw= ycp + width*3;

  00197	6b 84 24 00 06
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  0019f	48 98		 cdqe
  001a1	48 8b 4d 20	 mov	 rcx, QWORD PTR ycp$[rbp]
  001a5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a9	48 89 45 28	 mov	 QWORD PTR ycpw$[rbp], rax

; 1045 :         Y   = (short*)dst_Y + dst_y_pitch * y;

  001ad	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR dst_y_pitch$[rbp]
  001b3	0f af 45 04	 imul	 eax, DWORD PTR y$[rbp]
  001b7	48 98		 cdqe
  001b9	48 8b 4d 08	 mov	 rcx, QWORD PTR dst_Y$[rbp]
  001bd	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c1	48 89 45 30	 mov	 QWORD PTR Y$[rbp], rax

; 1046 :         C   = (short*)dst_C + dst_y_pitch * y / 2;

  001c5	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR dst_y_pitch$[rbp]
  001cb	0f af 45 04	 imul	 eax, DWORD PTR y$[rbp]
  001cf	99		 cdq
  001d0	2b c2		 sub	 eax, edx
  001d2	d1 f8		 sar	 eax, 1
  001d4	48 98		 cdqe
  001d6	48 8b 4d 10	 mov	 rcx, QWORD PTR dst_C$[rbp]
  001da	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001de	48 89 45 38	 mov	 QWORD PTR C$[rbp], rax

; 1047 :         for (x = 0; x < width; x += 16, ycp += 48, ycpw += 48) {

  001e2	c7 45 00 00 00
	00 00		 mov	 DWORD PTR x$[rbp], 0
  001e9	eb 21		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  001eb	8b 45 00	 mov	 eax, DWORD PTR x$[rbp]
  001ee	83 c0 10	 add	 eax, 16
  001f1	89 45 00	 mov	 DWORD PTR x$[rbp], eax
  001f4	48 8b 45 20	 mov	 rax, QWORD PTR ycp$[rbp]
  001f8	48 83 c0 60	 add	 rax, 96			; 00000060H
  001fc	48 89 45 20	 mov	 QWORD PTR ycp$[rbp], rax
  00200	48 8b 45 28	 mov	 rax, QWORD PTR ycpw$[rbp]
  00204	48 83 c0 60	 add	 rax, 96			; 00000060H
  00208	48 89 45 28	 mov	 QWORD PTR ycpw$[rbp], rax
$LN7@convert_yc:
  0020c	8b 84 24 00 06
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00213	39 45 00	 cmp	 DWORD PTR x$[rbp], eax
  00216	0f 8d e4 02 00
	00		 jge	 $LN6@convert_yc

; 1048 :             y1 = _mm256_loadu_si256((__m256i *)(ycp +  0)); // 128, 0

  0021c	48 8b 45 20	 mov	 rax, QWORD PTR ycp$[rbp]
  00220	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00224	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  0022c	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  00234	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1049 :             y2 = _mm256_loadu_si256((__m256i *)(ycp + 16)); // 384, 256

  0023c	48 8b 45 20	 mov	 rax, QWORD PTR ycp$[rbp]
  00240	48 83 c0 20	 add	 rax, 32			; 00000020H
  00244	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00248	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  00250	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  00258	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1050 :             y3 = _mm256_loadu_si256((__m256i *)(ycp + 32)); // 640, 512

  00260	48 8b 45 20	 mov	 rax, QWORD PTR ycp$[rbp]
  00264	48 83 c0 40	 add	 rax, 64			; 00000040H
  00268	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0026c	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  00274	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  0027c	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1051 : 
; 1052 :             gather_y_uv_from_yc48(y1, y2, y3);

  00284	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  0028c	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00294	4c 8d 85 40 04
	00 00		 lea	 r8, QWORD PTR $T25[rbp]
  0029b	48 8d 95 20 02
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  002a2	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  002a9	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z ; gather_y_uv_from_yc48

; 1053 :             y0 = y2;

  002ae	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002b6	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 1054 : 
; 1055 :             _mm256_storeu_si256((__m256i *)(Y + x), convert_y_range_from_yc48(y1, yC_Y_L_MA_16, Y_L_RSH_16, yC_YCC, yC_pw_one));

  002be	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  002c6	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  002ce	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  002d6	c5 fe 7f 85 80
	04 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  002de	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  002e6	c5 fe 7f 85 60
	04 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  002ee	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  002f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002f7	4c 8d 8d e0 00
	00 00		 lea	 r9, QWORD PTR yC_YCC$[rbp]
  002fe	41 b8 04 00 00
	00		 mov	 r8d, 4
  00304	48 8d 95 80 04
	00 00		 lea	 rdx, QWORD PTR $T27[rbp]
  0030b	48 8d 8d 60 04
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  00312	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ; convert_y_range_from_yc48
  00317	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0031f	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  00323	48 8b 4d 30	 mov	 rcx, QWORD PTR Y$[rbp]
  00327	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0032b	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00333	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1056 : 
; 1057 :             y1 = _mm256_loadu_si256((__m256i *)(ycpw +  0));

  00337	48 8b 45 28	 mov	 rax, QWORD PTR ycpw$[rbp]
  0033b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0033f	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00347	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  0034f	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 1058 :             y2 = _mm256_loadu_si256((__m256i *)(ycpw + 16));

  00357	48 8b 45 28	 mov	 rax, QWORD PTR ycpw$[rbp]
  0035b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0035f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00363	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0036b	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00373	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 1059 :             y3 = _mm256_loadu_si256((__m256i *)(ycpw + 32));

  0037b	48 8b 45 28	 mov	 rax, QWORD PTR ycpw$[rbp]
  0037f	48 83 c0 40	 add	 rax, 64			; 00000040H
  00383	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00387	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  0038f	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  00397	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1060 : 
; 1061 :             gather_y_uv_from_yc48(y1, y2, y3);

  0039f	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  003a7	c5 fe 7f 85 a0
	04 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  003af	4c 8d 85 a0 04
	00 00		 lea	 r8, QWORD PTR $T28[rbp]
  003b6	48 8d 95 20 02
	00 00		 lea	 rdx, QWORD PTR y2$[rbp]
  003bd	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR y1$[rbp]
  003c4	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z ; gather_y_uv_from_yc48

; 1062 : 
; 1063 :             _mm256_storeu_si256((__m256i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(y1, yC_Y_L_MA_16, Y_L_RSH_16, yC_YCC, yC_pw_one));

  003c9	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003d1	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  003d9	c5 fe 6f 85 80
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  003e1	c5 fe 7f 85 e0
	04 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  003e9	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  003f1	c5 fe 7f 85 c0
	04 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  003f9	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  003fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00402	4c 8d 8d e0 00
	00 00		 lea	 r9, QWORD PTR yC_YCC$[rbp]
  00409	41 b8 04 00 00
	00		 mov	 r8d, 4
  0040f	48 8d 95 e0 04
	00 00		 lea	 rdx, QWORD PTR $T30[rbp]
  00416	48 8d 8d c0 04
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  0041d	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ; convert_y_range_from_yc48
  00422	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  0042a	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  0042e	48 8b 4d 30	 mov	 rcx, QWORD PTR Y$[rbp]
  00432	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00436	48 63 8d 40 01
	00 00		 movsxd	 rcx, DWORD PTR dst_y_pitch$[rbp]
  0043d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00441	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  00449	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1064 : 
; 1065 :             _mm256_storeu_si256((__m256i *)(C + x), convert_uv_range_from_yc48_yuv420p(y0, y2,  _mm256_set1_epi16(UV_OFFSET_x2), yC_UV_L_MA_16_420P, UV_L_RSH_16_420P, yC_YCC, yC_pw_one));

  0044d	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  00455	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  0045d	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@1000100010001000100010001000100010001000100010001000100010001000
  00465	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  0046d	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  00475	c5 fe 7f 85 40
	05 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  0047d	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  00485	c5 fe 7f 85 20
	05 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0048d	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00495	c5 fe 7f 85 00
	05 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0049d	48 8d 45 60	 lea	 rax, QWORD PTR yC_pw_one$[rbp]
  004a1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004a6	48 8d 85 e0 00
	00 00		 lea	 rax, QWORD PTR yC_YCC$[rbp]
  004ad	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004b2	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  004ba	4c 8d 8d 40 05
	00 00		 lea	 r9, QWORD PTR $T33[rbp]
  004c1	4c 8d 85 c0 03
	00 00		 lea	 r8, QWORD PTR $T21[rbp]
  004c8	48 8d 95 20 05
	00 00		 lea	 rdx, QWORD PTR $T32[rbp]
  004cf	48 8d 8d 00 05
	00 00		 lea	 rcx, QWORD PTR $T31[rbp]
  004d6	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z ; convert_uv_range_from_yc48_yuv420p
  004db	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  004e3	48 63 45 00	 movsxd	 rax, DWORD PTR x$[rbp]
  004e7	48 8b 4d 38	 mov	 rcx, QWORD PTR C$[rbp]
  004eb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004ef	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  004f7	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1066 :         }

  004fb	e9 eb fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1067 :     }

  00500	e9 54 fc ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1068 :     _mm256_zeroupper();

  00505	c5 f8 77	 vzeroupper

; 1069 : }

  00508	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  0050c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00513	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00518	48 8b 8d 60 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0051f	48 33 cc	 xor	 rcx, rsp
  00522	e8 00 00 00 00	 call	 __security_check_cookie
  00527	48 81 c4 d0 05
	00 00		 add	 rsp, 1488		; 000005d0H
  0052e	5f		 pop	 rdi
  0052f	5e		 pop	 rsi
  00530	5d		 pop	 rbp
  00531	c3		 ret	 0
?convert_yc48_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y3$ = 0
y4$ = 32
y5$ = 64
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
$T11 = 416
$T12 = 448
$T13 = 480
$T14 = 512
$T15 = 544
y0$ = 640
y1$ = 648
y2$ = 656
?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z PROC	; gather_y_u_v_to_yc48

; 1001 : static __forceinline void gather_y_u_v_to_yc48(__m256i& y0, __m256i& y1, __m256i& y2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR [rsp+640]

; 1002 :     __m256i y3, y4, y5;
; 1003 : 
; 1004 :     alignas(16) static const uint8_t shuffle_yc48[32] = {
; 1005 :         0x00, 0x01, 0x06, 0x07, 0x0C, 0x0D, 0x02, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x04, 0x05, 0x0A, 0x0B,
; 1006 :         0x00, 0x01, 0x06, 0x07, 0x0C, 0x0D, 0x02, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x04, 0x05, 0x0A, 0x0B
; 1007 :     };
; 1008 :     y5 = _mm256_load_si256((__m256i *)shuffle_yc48);

  00038	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z@4QBEB
  00040	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00045	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004a	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y5$[rbp], ymm0

; 1009 :     y0 = _mm256_shuffle_epi8(y0, y5);                             //5,2,7,4,1,6,3,0

  0004f	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00057	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0005b	c4 e2 7d 00 45
	40		 vpshufb ymm0, ymm0, YMMWORD PTR y5$[rbp]
  00061	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00069	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00071	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  00079	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1010 :     y1 = _mm256_shuffle_epi8(y1, _mm256_alignr_epi8(y5, y5, 14)); //2,7,4,1,6,3,0,5

  0007d	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y5$[rbp]
  00082	c4 e3 7d 0f 45
	40 0e		 vpalignr ymm0, ymm0, YMMWORD PTR y5$[rbp], 14
  00089	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  00091	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00099	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0009d	c4 e2 7d 00 85
	a0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T3[rbp]
  000a6	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000ae	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  000b6	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000be	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1011 :     y2 = _mm256_shuffle_epi8(y2, _mm256_alignr_epi8(y5, y5, 12)); //7,4,1,6,3,0,5,2

  000c2	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y5$[rbp]
  000c7	c4 e3 7d 0f 45
	40 0c		 vpalignr ymm0, ymm0, YMMWORD PTR y5$[rbp], 12
  000ce	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  000d6	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  000de	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e2	c4 e2 7d 00 85
	e0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T5[rbp]
  000eb	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  000f3	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  000fb	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00103	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1012 : 
; 1013 :     y3 = _mm256_blend_epi16(y0, y1, 0x80 + 0x10 + 0x02);

  00107	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0010f	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  00117	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0011b	c4 e3 7d 0e 01
	92		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 146 ; 00000092H
  00121	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  00129	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00131	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1014 :     y3 = _mm256_blend_epi16(y3, y2, 0x20 + 0x04);        //384, 0

  00136	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  0013e	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00143	c4 e3 7d 0e 00
	24		 vpblendw ymm0, ymm0, YMMWORD PTR [rax], 36 ; 00000024H
  00149	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  00151	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  00159	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 1015 : 
; 1016 :     y4 = _mm256_blend_epi16(y2, y1, 0x20 + 0x04);

  0015e	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00166	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  0016e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00172	c4 e3 7d 0e 01
	24		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 36 ; 00000024H
  00178	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  00180	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  00188	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y4$[rbp], ymm0

; 1017 :     y4 = _mm256_blend_epi16(y4, y0, 0x80 + 0x10 + 0x02); //512, 128

  0018d	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00195	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y4$[rbp]
  0019a	c4 e3 7d 0e 00
	92		 vpblendw ymm0, ymm0, YMMWORD PTR [rax], 146 ; 00000092H
  001a0	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  001a8	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  001b0	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y4$[rbp], ymm0

; 1018 : 
; 1019 :     y2 = _mm256_blend_epi16(y2, y0, 0x20 + 0x04);

  001b5	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  001bd	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR y0$[rsp]
  001c5	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001c9	c4 e3 7d 0e 01
	24		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 36 ; 00000024H
  001cf	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  001d7	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  001df	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  001e7	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1020 :     y2 = _mm256_blend_epi16(y2, y1, 0x40 + 0x08 + 0x01); //640, 256

  001eb	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  001f3	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  001fb	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001ff	c4 e3 7d 0e 01
	49		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 73 ; 00000049H
  00205	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  0020d	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00215	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  0021d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1021 : 
; 1022 :     y0 = _mm256_permute2x128_si256(y3, y4, (0x02<<4) + 0x00); // 128, 0

  00221	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00226	c4 e3 7d 46 45
	20 20		 vperm2i128 ymm0, ymm0, YMMWORD PTR y4$[rbp], 32 ; 00000020H
  0022d	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  00235	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0023d	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  00245	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1023 :     y1 = _mm256_blend_epi32(y2, y3, 0xf0);                    // 384, 256

  00249	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00251	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00255	c4 e3 7d 02 45
	00 f0		 vpblendd ymm0, ymm0, YMMWORD PTR y3$[rbp], 240 ; 000000f0H
  0025c	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  00264	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  0026c	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00274	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1024 :     y2 = _mm256_permute2x128_si256(y4, y2, (0x03<<4) + 0x01); // 640, 512

  00278	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00280	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y4$[rbp]
  00285	c4 e3 7d 46 00
	31		 vperm2i128 ymm0, ymm0, YMMWORD PTR [rax], 49 ; 00000031H
  0028b	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00293	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  0029b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  002a3	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 1025 : }

  002a7	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  002ae	5f		 pop	 rdi
  002af	5d		 pop	 rbp
  002b0	c3		 ret	 0
?gather_y_u_v_to_yc48@@YAXAEAT__m256i@@00@Z ENDP	; gather_y_u_v_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y3$ = 0
y4$ = 32
y5$ = 64
MASK_INT$ = 96
$T1 = 128
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
$T7 = 320
$T8 = 352
$T9 = 384
$T10 = 416
$T11 = 448
$T12 = 480
$T13 = 512
$T14 = 544
$T15 = 576
$T16 = 608
$T17 = 640
$T18 = 672
$T19 = 704
y0$ = 800
y1$ = 808
y2$ = 816
?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z PROC	; gather_y_u_v_from_yc48

; 980  : static __forceinline void gather_y_u_v_from_yc48(__m256i& y0, __m256i& y1, __m256i& y2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 03
	00 00		 sub	 rsp, 776		; 00000308H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 c2 00 00 00	 mov	 ecx, 194		; 000000c2H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR [rsp+800]

; 981  :     __m256i y3, y4, y5;
; 982  :     const int MASK_INT = 0x40 + 0x08 + 0x01;

  00038	c7 45 60 49 00
	00 00		 mov	 DWORD PTR MASK_INT$[rbp], 73 ; 00000049H

; 983  :     y3 = _mm256_blend_epi32(y0, y1, 0xf0);                    // 384, 0

  0003f	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00047	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  0004f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00053	c4 e3 7d 02 01
	f0		 vpblendd ymm0, ymm0, YMMWORD PTR [rcx], 240 ; 000000f0H
  00059	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00061	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  00069	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 984  :     y4 = _mm256_permute2x128_si256(y0, y2, (0x02<<4) + 0x01); // 512, 128

  0006e	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00076	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR y2$[rsp]
  0007e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00082	c4 e3 7d 46 01
	21		 vperm2i128 ymm0, ymm0, YMMWORD PTR [rcx], 33 ; 00000021H
  00088	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00090	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  00098	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y4$[rbp], ymm0

; 985  :     y5 = _mm256_blend_epi32(y1, y2, 0xf0);                    // 640, 256

  0009d	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  000a5	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR y2$[rsp]
  000ad	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000b1	c4 e3 7d 02 01
	f0		 vpblendd ymm0, ymm0, YMMWORD PTR [rcx], 240 ; 000000f0H
  000b7	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000bf	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  000c7	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y5$[rbp], ymm0

; 986  : 
; 987  :     y0 = _mm256_blend_epi16(y5, y3, MASK_INT);

  000cc	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y5$[rbp]
  000d1	c4 e3 7d 0e 45
	00 49		 vpblendw ymm0, ymm0, YMMWORD PTR y3$[rbp], 73 ; 00000049H
  000d8	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000e0	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000e8	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000f0	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 988  :     y1 = _mm256_blend_epi16(y4, y5, MASK_INT);

  000f4	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y4$[rbp]
  000f9	c4 e3 7d 0e 45
	40 49		 vpblendw ymm0, ymm0, YMMWORD PTR y5$[rbp], 73 ; 00000049H
  00100	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  00108	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00110	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  00118	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 989  :     y2 = _mm256_blend_epi16(y3, y4, MASK_INT);

  0011c	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00121	c4 e3 7d 0e 45
	20 49		 vpblendw ymm0, ymm0, YMMWORD PTR y4$[rbp], 73 ; 00000049H
  00128	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00130	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00138	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00140	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 990  : 
; 991  :     y0 = _mm256_blend_epi16(y0, y4, MASK_INT<<1);

  00144	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0014c	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00150	c4 e3 7d 0e 45
	20 92		 vpblendw ymm0, ymm0, YMMWORD PTR y4$[rbp], 146 ; 00000092H
  00157	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  0015f	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00167	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  0016f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 992  :     y1 = _mm256_blend_epi16(y1, y3, MASK_INT<<1);

  00173	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  0017b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0017f	c4 e3 7d 0e 45
	00 92		 vpblendw ymm0, ymm0, YMMWORD PTR y3$[rbp], 146 ; 00000092H
  00186	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  0018e	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00196	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  0019e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 993  :     y2 = _mm256_blend_epi16(y2, y5, MASK_INT<<1);

  001a2	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  001aa	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001ae	c4 e3 7d 0e 45
	40 92		 vpblendw ymm0, ymm0, YMMWORD PTR y5$[rbp], 146 ; 00000092H
  001b5	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  001bd	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  001c5	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  001cd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 994  : 
; 995  :     y0 = _mm256_shuffle_epi8(y0, yC_SUFFLE_YCP_Y);

  001d1	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  001d9	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  001e1	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001e9	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001ed	c4 e2 7d 00 85
	a0 01 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T10[rbp]
  001f6	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  001fe	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00206	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  0020e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 996  :     y1 = _mm256_shuffle_epi8(y1, _mm256_alignr_epi8(yC_SUFFLE_YCP_Y, yC_SUFFLE_YCP_Y, 6));

  00212	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0021a	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  00222	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0022a	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  00232	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  0023a	c4 e3 7d 0f 85
	00 02 00 00 06	 vpalignr ymm0, ymm0, YMMWORD PTR $T13[rbp], 6
  00244	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0024c	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00254	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00258	c4 e2 7d 00 85
	20 02 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T14[rbp]
  00261	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00269	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00271	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00279	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 997  :     y2 = _mm256_shuffle_epi8(y2, _mm256_alignr_epi8(yC_SUFFLE_YCP_Y, yC_SUFFLE_YCP_Y, 12));

  0027d	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00285	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0028d	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00295	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  0029d	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  002a5	c4 e3 7d 0f 85
	80 02 00 00 0c	 vpalignr ymm0, ymm0, YMMWORD PTR $T17[rbp], 12
  002af	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  002b7	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  002bf	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002c3	c4 e2 7d 00 85
	a0 02 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T18[rbp]
  002cc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  002d4	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  002dc	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  002e4	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 998  : }

  002e8	48 81 c4 08 03
	00 00		 add	 rsp, 776		; 00000308H
  002ef	5f		 pop	 rdi
  002f0	5d		 pop	 rbp
  002f1	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAEAT__m256i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
yC_coeff$ = 0
$T1 = 32
$T2 = 64
$T3 = 96
yC_0x8000$ = 128
$T4 = 160
$T5 = 192
y1$ = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
$T11 = 416
$T12 = 448
$T13 = 480
y0$ = 608
?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z PROC	; convert_uv_range_to_yc48

; 963  : static __forceinline __m256i convert_uv_range_to_yc48(__m256i y0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR [rsp+608]

; 964  :     //coeff = 4682
; 965  :     //UV = (( uv - 32768 ) * coef + (1<<15) ) >> 16
; 966  :     const __m256i yC_coeff = _mm256_unpacklo_epi16(_mm256_set1_epi16(4682), _mm256_set1_epi16(-1));

  0002e	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  00036	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  0003b	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a124a
  00043	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00048	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004d	c5 fd 61 45 40	 vpunpcklwd ymm0, ymm0, YMMWORD PTR $T2[rbp]
  00052	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  00057	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  0005c	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR yC_coeff$[rbp], ymm0

; 967  :     const __m256i yC_0x8000 = _mm256_slli_epi16(_mm256_cmpeq_epi32(y0, y0), 15);

  00061	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00069	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR y0$[rsp]
  00071	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00075	c5 fd 76 01	 vpcmpeqd ymm0, ymm0, YMMWORD PTR [rcx]
  00079	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  00081	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  00089	c5 fd 71 f0 0f	 vpsllw	 ymm0, ymm0, 15
  0008e	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  00096	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  0009e	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR yC_0x8000$[rbp], ymm0

; 968  :     __m256i y1;
; 969  :     y0 = _mm256_add_epi16(y0, yC_0x8000); // -32768

  000a6	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000ae	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000b2	c5 fd fd 85 80
	00 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR yC_0x8000$[rbp]
  000ba	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  000c2	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000ca	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  000d2	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 970  :     y1 = _mm256_unpackhi_epi16(y0, yC_0x8000);

  000d6	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000de	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e2	c5 fd 69 85 80
	00 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR yC_0x8000$[rbp]
  000ea	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  000f2	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  000fa	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 971  :     y0 = _mm256_unpacklo_epi16(y0, yC_0x8000);

  00102	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0010a	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0010e	c5 fd 61 85 80
	00 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR yC_0x8000$[rbp]
  00116	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  0011e	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00126	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  0012e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 972  :     y0 = _mm256_madd_epi16(y0, yC_coeff);

  00132	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0013a	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0013e	c5 fd f5 45 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR yC_coeff$[rbp]
  00143	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  0014b	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00153	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  0015b	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 973  :     y1 = _mm256_madd_epi16(y1, yC_coeff);

  0015f	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00167	c5 fd f5 45 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR yC_coeff$[rbp]
  0016c	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  00174	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  0017c	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 974  :     y0 = _mm256_srai_epi32(y0, 16);

  00184	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0018c	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00190	c5 fd 72 e0 10	 vpsrad	 ymm0, ymm0, 16
  00195	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  0019d	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001a5	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  001ad	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 975  :     y1 = _mm256_srai_epi32(y1, 16);

  001b1	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  001b9	c5 fd 72 e0 10	 vpsrad	 ymm0, ymm0, 16
  001be	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  001c6	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  001ce	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 976  :     y0 = _mm256_packs_epi32(y0, y1);

  001d6	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001de	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001e2	c5 fd 6b 85 e0
	00 00 00	 vpackssdw ymm0, ymm0, YMMWORD PTR y1$[rbp]
  001ea	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  001f2	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001fa	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  00202	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 977  :     return y0;

  00206	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0020e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]

; 978  : }

  00212	48 81 c4 48 02
	00 00		 add	 rsp, 584		; 00000248H
  00219	5f		 pop	 rdi
  0021a	5d		 pop	 rbp
  0021b	c3		 ret	 0
?convert_uv_range_to_yc48@@YA?AT__m256i@@T1@@Z ENDP	; convert_uv_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
yC_0x8000$ = 0
$T1 = 32
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 224
y0$ = 352
?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z PROC	; convert_y_range_to_yc48

; 953  : static __forceinline __m256i convert_y_range_to_yc48(__m256i y0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00013	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR [rsp+352]

; 954  :     //coef = 4788
; 955  :     //((( y - 32768 ) * coef) >> 16 ) + (coef/2 - 299)
; 956  :     const __m256i yC_0x8000 = _mm256_slli_epi16(_mm256_cmpeq_epi32(y0, y0), 15);

  0002e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00036	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR y0$[rsp]
  0003e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00042	c5 fd 76 01	 vpcmpeqd ymm0, ymm0, YMMWORD PTR [rcx]
  00046	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0004b	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  00050	c5 fd 71 f0 0f	 vpsllw	 ymm0, ymm0, 15
  00055	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  0005a	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  0005f	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR yC_0x8000$[rbp], ymm0

; 957  :     y0 = _mm256_add_epi16(y0, yC_0x8000); // -32768

  00064	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0006c	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00070	c5 fd fd 45 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR yC_0x8000$[rbp]
  00075	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  0007a	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00082	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  00087	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 958  :     y0 = _mm256_mulhi_epi16(y0, _mm256_set1_epi16(4788));

  0008b	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@12b412b412b412b412b412b412b412b412b412b412b412b412b412b412b412b4
  00093	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  0009b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000a3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000a7	c5 fd e5 85 80
	00 00 00	 vpmulhw ymm0, ymm0, YMMWORD PTR $T4[rbp]
  000af	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  000b7	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000bf	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  000c7	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 959  :     y0 = _mm256_adds_epi16(y0, _mm256_set1_epi16(4788/2 - 299));

  000cb	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f082f
  000d3	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  000db	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000e3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e7	c5 fd ed 85 c0
	00 00 00	 vpaddsw ymm0, ymm0, YMMWORD PTR $T6[rbp]
  000ef	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  000f7	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000ff	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00107	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 960  :     return y0;

  0010b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00113	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]

; 961  : }

  00117	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  0011e	5f		 pop	 rdi
  0011f	5d		 pop	 rbp
  00120	c3		 ret	 0
?convert_y_range_to_yc48@@YA?AT__m256i@@T1@@Z ENDP	; convert_y_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y2$ = 0
y3$ = 32
y6$ = 64
y7$ = 96
$T1 = 128
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
$T7 = 320
$T8 = 352
$T9 = 384
$T10 = 416
$T11 = 448
$T12 = 480
$T13 = 512
$T14 = 544
$T15 = 576
$T16 = 608
$T17 = 640
y0$ = 768
y1$ = 776
yC_UV_OFFSET_x1$ = 784
yC_UV_MA_16_0$ = 792
yC_UV_MA_16_1$ = 800
UV_RSH_16$ = 808
yC_YCC$ = 816
yC_pw_one$ = 824
?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i

; 926  : static __forceinline __m256i convert_uv_range_from_yc48_420i(__m256i y0, __m256i y1, const __m256i& yC_UV_OFFSET_x1, const __m256i& yC_UV_MA_16_0, const __m256i& yC_UV_MA_16_1, int UV_RSH_16, const __m256i& yC_YCC, const __m256i& yC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 02
	00 00		 sub	 rsp, 744		; 000002e8H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 ba 00 00 00	 mov	 ecx, 186		; 000000baH
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd
  00035	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR [rsp+768]

; 927  :     __m256i y2, y3, y6, y7;
; 928  : 
; 929  :     y0 = _mm256_add_epi16(y0, yC_UV_OFFSET_x1);

  0003d	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00045	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR yC_UV_OFFSET_x1$[rsp]
  0004d	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00051	c5 fd fd 01	 vpaddw	 ymm0, ymm0, YMMWORD PTR [rcx]
  00055	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0005d	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00065	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0006d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 930  :     y1 = _mm256_add_epi16(y1, yC_UV_OFFSET_x1);

  00071	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00079	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR yC_UV_OFFSET_x1$[rsp]
  00081	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00085	c5 fd fd 01	 vpaddw	 ymm0, ymm0, YMMWORD PTR [rcx]
  00089	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00091	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00099	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  000a1	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 931  : 
; 932  :     y7 = _mm256_unpackhi_epi16(y0, yC_pw_one);

  000a5	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000ad	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  000b5	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000b9	c5 fd 69 01	 vpunpckhwd ymm0, ymm0, YMMWORD PTR [rcx]
  000bd	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000c5	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  000cd	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 933  :     y6 = _mm256_unpacklo_epi16(y0, yC_pw_one);

  000d2	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000da	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  000e2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e6	c5 fd 61 01	 vpunpcklwd ymm0, ymm0, YMMWORD PTR [rcx]
  000ea	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000f2	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000fa	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y6$[rbp], ymm0

; 934  :     y3 = _mm256_unpackhi_epi16(y1, yC_pw_one);

  000ff	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00107	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  0010f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00113	c5 fd 69 01	 vpunpckhwd ymm0, ymm0, YMMWORD PTR [rcx]
  00117	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  0011f	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  00127	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 935  :     y2 = _mm256_unpacklo_epi16(y1, yC_pw_one);

  0012c	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00134	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  0013c	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00140	c5 fd 61 01	 vpunpcklwd ymm0, ymm0, YMMWORD PTR [rcx]
  00144	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  0014c	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00154	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 936  : 
; 937  :     y6 = _mm256_madd_epi16(y6, yC_UV_MA_16_0);

  00159	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR yC_UV_MA_16_0$[rsp]
  00161	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y6$[rbp]
  00166	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  0016a	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  00172	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  0017a	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y6$[rbp], ymm0

; 938  :     y7 = _mm256_madd_epi16(y7, yC_UV_MA_16_0);

  0017f	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR yC_UV_MA_16_0$[rsp]
  00187	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  0018c	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  00190	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  00198	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  001a0	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 939  :     y2 = _mm256_madd_epi16(y2, yC_UV_MA_16_1);

  001a5	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR yC_UV_MA_16_1$[rsp]
  001ad	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  001b2	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  001b6	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  001be	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  001c6	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 940  :     y3 = _mm256_madd_epi16(y3, yC_UV_MA_16_1);

  001cb	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR yC_UV_MA_16_1$[rsp]
  001d3	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  001d8	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  001dc	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  001e4	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  001ec	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 941  :     y0 = _mm256_add_epi32(y6, y2);

  001f1	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y6$[rbp]
  001f6	c5 fd fe 45 00	 vpaddd	 ymm0, ymm0, YMMWORD PTR y2$[rbp]
  001fb	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  00203	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0020b	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  00213	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 942  :     y7 = _mm256_add_epi32(y7, y3);

  00217	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  0021c	c5 fd fe 45 20	 vpaddd	 ymm0, ymm0, YMMWORD PTR y3$[rbp]
  00221	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  00229	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  00231	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 943  :     y0 = _mm256_srai_epi32(y0, UV_RSH_16);

  00236	66 0f 6e 84 24
	28 03 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  0023f	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00247	c5 fe 6f 08	 vmovdqu ymm1, YMMWORD PTR [rax]
  0024b	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  0024f	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  00257	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0025f	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  00267	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 944  :     y7 = _mm256_srai_epi32(y7, UV_RSH_16);

  0026b	66 0f 6e 84 24
	28 03 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00274	c5 fe 6f 4d 60	 vmovdqu ymm1, YMMWORD PTR y7$[rbp]
  00279	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  0027d	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  00285	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  0028d	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 945  :     y0 = _mm256_add_epi32(y0, yC_YCC);

  00292	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0029a	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR yC_YCC$[rsp]
  002a2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002a6	c5 fd fe 01	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rcx]
  002aa	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  002b2	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  002ba	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  002c2	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 946  :     y7 = _mm256_add_epi32(y7, yC_YCC);

  002c6	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR yC_YCC$[rsp]
  002ce	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  002d3	c5 fd fe 00	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rax]
  002d7	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  002df	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  002e7	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 947  : 
; 948  :     y0 = _mm256_packus_epi32(y0, y7);

  002ec	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  002f4	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  002f8	c4 e2 7d 2b 45
	60		 vpackusdw ymm0, ymm0, YMMWORD PTR y7$[rbp]
  002fe	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  00306	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0030e	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00316	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 949  : 
; 950  :     return y0;

  0031a	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00322	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]

; 951  : }

  00326	48 81 c4 e8 02
	00 00		 add	 rsp, 744		; 000002e8H
  0032d	5f		 pop	 rdi
  0032e	5d		 pop	 rbp
  0032f	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m256i@@T1@0AEBT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
$T1 = 0
$T2 = 32
$T3 = 64
$T4 = 96
y0$ = 272
y1$ = 280
yC_UV_OFFSET_x2$ = 288
yC_UV_MA_16$ = 296
UV_RSH_16$ = 304
yC_YCC$ = 312
yC_pw_one$ = 320
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z PROC ; convert_uv_range_from_yc48_yuv420p

; 920  : static __forceinline __m256i convert_uv_range_from_yc48_yuv420p(__m256i y0, __m256i y1, const __m256i& yC_UV_OFFSET_x2, __m256i yC_UV_MA_16, int UV_RSH_16, const __m256i& yC_YCC, const __m256i& yC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00022	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd
  00035	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR [rsp+272]

; 921  :     y0 = _mm256_add_epi16(y0, y1);

  0003d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00045	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  0004d	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00051	c5 fd fd 01	 vpaddw	 ymm0, ymm0, YMMWORD PTR [rcx]
  00055	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0005a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00062	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  00067	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 922  :     y0 = _mm256_add_epi16(y0, yC_UV_OFFSET_x2);

  0006b	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00073	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR yC_UV_OFFSET_x2$[rsp]
  0007b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0007f	c5 fd fd 01	 vpaddw	 ymm0, ymm0, YMMWORD PTR [rcx]
  00083	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00088	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00090	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  00095	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 923  : 
; 924  :     return convert_uv_range_after_adding_offset(y0, yC_UV_MA_16, UV_RSH_16, yC_YCC, yC_pw_one);

  00099	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000a1	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000a5	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000aa	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR yC_pw_one$[rsp]
  000b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b7	4c 8b 8c 24 38
	01 00 00	 mov	 r9, QWORD PTR yC_YCC$[rsp]
  000bf	44 8b 84 24 30
	01 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  000c7	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR yC_UV_MA_16$[rsp]
  000cf	48 8d 4d 60	 lea	 rcx, QWORD PTR $T4[rbp]
  000d3	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000d8	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000dd	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]

; 925  : }

  000e2	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  000e9	5f		 pop	 rdi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m256i@@T1@0AEBT1@0H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
$T1 = 0
$T2 = 32
$T3 = 64
y0$ = 240
yC_UV_OFFSET_x1$ = 248
yC_UV_MA_16$ = 256
UV_RSH_16$ = 264
yC_YCC$ = 272
yC_pw_one$ = 280
?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z PROC ; convert_uv_range_from_yc48

; 915  : static __forceinline __m256i convert_uv_range_from_yc48(__m256i y0, const __m256i& yC_UV_OFFSET_x1, const __m256i& yC_UV_MA_16, int UV_RSH_16, const __m256i& yC_YCC, const __m256i& yC_pw_one) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001d	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00022	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd
  00035	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]

; 916  :     y0 = _mm256_add_epi16(y0, yC_UV_OFFSET_x1);

  0003d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00045	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR yC_UV_OFFSET_x1$[rsp]
  0004d	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00051	c5 fd fd 01	 vpaddw	 ymm0, ymm0, YMMWORD PTR [rcx]
  00055	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0005a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00062	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  00067	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 917  : 
; 918  :     return convert_uv_range_after_adding_offset(y0, yC_UV_MA_16, UV_RSH_16, yC_YCC, yC_pw_one);

  0006b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00073	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00077	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  0007c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR yC_pw_one$[rsp]
  00084	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00089	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR yC_YCC$[rsp]
  00091	44 8b 84 24 08
	01 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  00099	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR yC_UV_MA_16$[rsp]
  000a1	48 8d 4d 40	 lea	 rcx, QWORD PTR $T3[rbp]
  000a5	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000aa	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  000af	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]

; 919  : }

  000b4	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  000bb	5f		 pop	 rdi
  000bc	5d		 pop	 rbp
  000bd	c3		 ret	 0
?convert_uv_range_from_yc48@@YA?AT__m256i@@T1@AEBT1@1H11@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y7$ = 0
$T1 = 32
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 224
$T8 = 256
$T9 = 288
y0$ = 416
yC_UV_MA_16$ = 424
UV_RSH_16$ = 432
yC_YCC$ = 440
yC_pw_one$ = 448
?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z PROC ; convert_uv_range_after_adding_offset

; 899  : static __forceinline __m256i convert_uv_range_after_adding_offset(__m256i y0, const __m256i& yC_UV_MA_16, int UV_RSH_16, const __m256i& yC_YCC, const __m256i& yC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd
  00035	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+416]

; 900  :     __m256i y7;
; 901  :     y7 = _mm256_unpackhi_epi16(y0, yC_pw_one);

  0003d	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00045	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  0004d	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00051	c5 fd 69 01	 vpunpckhwd ymm0, ymm0, YMMWORD PTR [rcx]
  00055	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0005a	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0005f	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 902  :     y0 = _mm256_unpacklo_epi16(y0, yC_pw_one);

  00064	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0006c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  00074	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00078	c5 fd 61 01	 vpunpcklwd ymm0, ymm0, YMMWORD PTR [rcx]
  0007c	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00081	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00089	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  0008e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 903  : 
; 904  :     y0 = _mm256_madd_epi16(y0, yC_UV_MA_16);

  00092	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0009a	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR yC_UV_MA_16$[rsp]
  000a2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000a6	c5 fd f5 01	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rcx]
  000aa	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000af	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000b7	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  000bc	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 905  :     y7 = _mm256_madd_epi16(y7, yC_UV_MA_16);

  000c0	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR yC_UV_MA_16$[rsp]
  000c8	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  000cd	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  000d1	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000d9	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000e1	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 906  :     y0 = _mm256_srai_epi32(y0, UV_RSH_16);

  000e6	66 0f 6e 84 24
	b0 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  000ef	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000f7	c5 fe 6f 08	 vmovdqu ymm1, YMMWORD PTR [rax]
  000fb	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  000ff	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  00107	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0010f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  00117	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 907  :     y7 = _mm256_srai_epi32(y7, UV_RSH_16);

  0011b	66 0f 6e 84 24
	b0 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00124	c5 fe 6f 4d 00	 vmovdqu ymm1, YMMWORD PTR y7$[rbp]
  00129	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  0012d	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00135	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  0013d	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 908  :     y0 = _mm256_add_epi32(y0, yC_YCC);

  00142	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0014a	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR yC_YCC$[rsp]
  00152	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00156	c5 fd fe 01	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rcx]
  0015a	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  00162	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0016a	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00172	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 909  :     y7 = _mm256_add_epi32(y7, yC_YCC);

  00176	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR yC_YCC$[rsp]
  0017e	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  00183	c5 fd fe 00	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rax]
  00187	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  0018f	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  00197	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 910  : 
; 911  :     y0 = _mm256_packus_epi32(y0, y7);

  0019c	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001a4	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001a8	c4 e2 7d 2b 45
	00		 vpackusdw ymm0, ymm0, YMMWORD PTR y7$[rbp]
  001ae	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  001b6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001be	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  001c6	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 912  : 
; 913  :     return y0;

  001ca	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001d2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]

; 914  : }

  001d6	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  001dd	5f		 pop	 rdi
  001de	5d		 pop	 rbp
  001df	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m256i@@T1@AEBT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y7$ = 0
$T1 = 32
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 224
$T8 = 256
$T9 = 288
y0$ = 416
yC_Y_MA_16$ = 424
Y_RSH_16$ = 432
yC_YCC$ = 440
yC_pw_one$ = 448
?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z PROC ; convert_y_range_from_yc48

; 882  : static __forceinline __m256i convert_y_range_from_yc48(__m256i y0, __m256i yC_Y_MA_16, int Y_RSH_16, const __m256i& yC_YCC, const __m256i& yC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00026	48 8b fc	 mov	 rdi, rsp
  00029	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00033	f3 ab		 rep stosd
  00035	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+416]

; 883  :     __m256i y7;
; 884  : 
; 885  :     y7 = _mm256_unpackhi_epi16(y0, yC_pw_one);

  0003d	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00045	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  0004d	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00051	c5 fd 69 01	 vpunpckhwd ymm0, ymm0, YMMWORD PTR [rcx]
  00055	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0005a	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0005f	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 886  :     y0 = _mm256_unpacklo_epi16(y0, yC_pw_one);

  00064	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0006c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR yC_pw_one$[rsp]
  00074	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00078	c5 fd 61 01	 vpunpcklwd ymm0, ymm0, YMMWORD PTR [rcx]
  0007c	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00081	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00089	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  0008e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 887  : 
; 888  :     y0 = _mm256_madd_epi16(y0, yC_Y_MA_16);

  00092	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0009a	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR yC_Y_MA_16$[rsp]
  000a2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000a6	c5 fd f5 01	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rcx]
  000aa	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000af	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000b7	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  000bc	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 889  :     y7 = _mm256_madd_epi16(y7, yC_Y_MA_16);

  000c0	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR yC_Y_MA_16$[rsp]
  000c8	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  000cd	c5 fd f5 00	 vpmaddwd ymm0, ymm0, YMMWORD PTR [rax]
  000d1	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000d9	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000e1	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 890  :     y0 = _mm256_srai_epi32(y0, Y_RSH_16);

  000e6	66 0f 6e 84 24
	b0 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  000ef	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000f7	c5 fe 6f 08	 vmovdqu ymm1, YMMWORD PTR [rax]
  000fb	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  000ff	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  00107	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0010f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  00117	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 891  :     y7 = _mm256_srai_epi32(y7, Y_RSH_16);

  0011b	66 0f 6e 84 24
	b0 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  00124	c5 fe 6f 4d 00	 vmovdqu ymm1, YMMWORD PTR y7$[rbp]
  00129	c5 f5 e2 c0	 vpsrad	 ymm0, ymm1, xmm0
  0012d	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00135	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  0013d	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 892  :     y0 = _mm256_add_epi32(y0, yC_YCC);

  00142	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0014a	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR yC_YCC$[rsp]
  00152	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00156	c5 fd fe 01	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rcx]
  0015a	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  00162	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0016a	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00172	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 893  :     y7 = _mm256_add_epi32(y7, yC_YCC);

  00176	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR yC_YCC$[rsp]
  0017e	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y7$[rbp]
  00183	c5 fd fe 00	 vpaddd	 ymm0, ymm0, YMMWORD PTR [rax]
  00187	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  0018f	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  00197	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y7$[rbp], ymm0

; 894  : 
; 895  :     y0 = _mm256_packus_epi32(y0, y7);

  0019c	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001a4	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001a8	c4 e2 7d 2b 45
	00		 vpackusdw ymm0, ymm0, YMMWORD PTR y7$[rbp]
  001ae	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  001b6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001be	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  001c6	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 896  : 
; 897  :     return y0;

  001ca	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  001d2	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]

; 898  : }

  001d6	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  001dd	5f		 pop	 rdi
  001de	5d		 pop	 rbp
  001df	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m256i@@T1@0HAEBT1@1@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
MASK_INT_Y$ = 0
MASK_INT_UV$ = 4
y3$ = 32
y4$ = 64
y5$ = 96
$T1 = 128
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
$T7 = 320
$T8 = 352
$T9 = 384
$T10 = 416
$T11 = 448
y0$ = 544
y1$ = 552
y2$ = 560
?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z PROC	; gather_y_uv_from_yc48

; 860  : static __forceinline void gather_y_uv_from_yc48(__m256i& y0, __m256i& y1, __m256i y2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR [rsp+544]

; 861  :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;

  00038	c7 45 00 92 00
	00 00		 mov	 DWORD PTR MASK_INT_Y$[rbp], 146 ; 00000092H

; 862  :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;

  0003f	c7 45 04 61 00
	00 00		 mov	 DWORD PTR MASK_INT_UV$[rbp], 97 ; 00000061H

; 863  :     __m256i y3 = y0;

  00046	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  0004e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00052	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 864  :     __m256i y4 = y1;

  00057	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  0005f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00063	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y4$[rbp], ymm0

; 865  :     __m256i y5 = y2;

  00068	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00070	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00074	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y5$[rbp], ymm0

; 866  : 
; 867  :     y0 = _mm256_blend_epi32(y3, y4, 0xf0);                    // 384, 0

  00079	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  0007e	c4 e3 7d 02 45
	40 f0		 vpblendd ymm0, ymm0, YMMWORD PTR y4$[rbp], 240 ; 000000f0H
  00085	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  0008d	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00095	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0009d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 868  :     y1 = _mm256_permute2x128_si256(y3, y5, (0x02<<4) + 0x01); // 512, 128

  000a1	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  000a6	c4 e3 7d 46 45
	60 21		 vperm2i128 ymm0, ymm0, YMMWORD PTR y5$[rbp], 33 ; 00000021H
  000ad	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  000b5	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  000bd	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  000c5	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 869  :     y2 = _mm256_blend_epi32(y4, y5, 0xf0);                    // 640, 256

  000c9	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y4$[rbp]
  000ce	c4 e3 7d 02 45
	60 f0		 vpblendd ymm0, ymm0, YMMWORD PTR y5$[rbp], 240 ; 000000f0H
  000d5	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000dd	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  000e5	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  000ed	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 870  : 
; 871  :     y3 = _mm256_blend_epi16(y0, y1, MASK_INT_Y);

  000f1	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  000f9	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  00101	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00105	c4 e3 7d 0e 01
	92		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 146 ; 00000092H
  0010b	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  00113	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  0011b	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 872  :     y3 = _mm256_blend_epi16(y3, y2, MASK_INT_Y>>2);

  00120	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR y2$[rsp]
  00128	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  0012d	c4 e3 7d 0e 00
	24		 vpblendw ymm0, ymm0, YMMWORD PTR [rax], 36 ; 00000024H
  00133	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  0013b	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  00143	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 873  : 
; 874  :     y1 = _mm256_blend_epi16(y0, y1, MASK_INT_UV);

  00148	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00150	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  00158	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0015c	c4 e3 7d 0e 01
	61		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 97 ; 00000061H
  00162	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  0016a	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00172	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  0017a	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 875  :     y1 = _mm256_blend_epi16(y1, y2, MASK_INT_UV>>2);

  0017e	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00186	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR y2$[rsp]
  0018e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00192	c4 e3 7d 0e 01
	18		 vpblendw ymm0, ymm0, YMMWORD PTR [rcx], 24
  00198	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  001a0	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  001a8	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  001b0	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 876  :     y1 = _mm256_alignr_epi8(y1, y1, 2);

  001b4	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  001bc	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR y1$[rsp]
  001c4	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001c8	c4 e3 7d 0f 01
	02		 vpalignr ymm0, ymm0, YMMWORD PTR [rcx], 2
  001ce	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  001d6	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  001de	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  001e6	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 877  :     y1 = _mm256_shuffle_epi32(y1, _MM_SHUFFLE(1, 2, 3, 0));//UV1行目

  001ea	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  001f2	c5 fd 70 00 6c	 vpshufd ymm0, YMMWORD PTR [rax], 108 ; 0000006cH
  001f7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  001ff	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR y1$[rsp]
  00207	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  0020f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 878  : 
; 879  :     y0 = _mm256_shuffle_epi8(y3, yC_SUFFLE_YCP_Y);

  00213	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0021b	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  00223	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00228	c4 e2 7d 00 85
	a0 01 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR $T10[rbp]
  00231	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  00239	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR y0$[rsp]
  00241	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  00249	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 880  : }

  0024d	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  00254	5f		 pop	 rdi
  00255	5d		 pop	 rbp
  00256	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAEAT__m256i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
y1$18 = 320
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 544
$T26 = 584
__$ArrayPad$ = 600
dst$ = 720
src$ = 728
width$ = 736
src_y_pitch_byte$ = 744
src_uv_pitch_byte$ = 752
dst_y_pitch_byte$ = 760
height$ = 768
dst_height$ = 776
thread_id$ = 784
thread_n$ = 792
crop$ = 800
??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_avx2_base<9>

; 810  : static void __forceinline convert_yuv444_high_to_yuv444_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+720]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 811  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 812  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 813  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 814  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 815  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 816  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 817  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 10
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 818  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d 55 02 00
	00		 jge	 $LN3@convert_yu

; 819  :         uint16_t *srcYLine = (uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00132	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00136	48 63 c9	 movsxd	 rcx, ecx
  00139	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00141	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00145	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00149	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00151	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 820  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00155	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00159	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00164	48 63 c9	 movsxd	 rcx, ecx
  00167	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016f	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 821  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 822  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00195	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00197	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019f	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a3	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ab	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001af	48 63 84 24 f8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c5	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c8	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001cb	0f 8d aa 01 00
	00		 jge	 $LN6@convert_yu

; 823  :             uint16_t *src_ptr = srcYLine;

  001d1	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d5	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 824  :             uint8_t *dst_ptr = dstLine;

  001d9	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dd	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 825  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e4	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ee	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001f0	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f6	83 c0 20	 add	 eax, 32			; 00000020H
  001f9	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001ff	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00206	48 83 c0 20	 add	 rax, 32			; 00000020H
  0020a	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00211	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00215	48 83 c0 40	 add	 rax, 64			; 00000040H
  00219	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021d	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00220	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00226	0f 8d 4a 01 00
	00		 jge	 $LN9@convert_yu

; 826  :                 __m256i y0 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 16), (const __m128i *)(src_ptr +  0));

  0022c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00230	48 83 c0 20	 add	 rax, 32			; 00000020H
  00234	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00238	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00240	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00244	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00248	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T14[rbp], xmm0
  00250	c5 f8 10 85 c0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T14[rbp]
  00258	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00260	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00268	c4 e3 7d 18 85
	00 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T16[rbp], 1
  00272	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0027a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00282	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 827  :                 __m256i y1 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 24), (const __m128i *)(src_ptr +  8));

  0028a	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0028e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00292	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00296	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  0029e	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  002a2	48 83 c0 10	 add	 rax, 16
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002b2	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002ba	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c2	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002ca	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002d4	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002dc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002e4	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 828  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002ec	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002f4	c5 fd 71 d0 01	 vpsrlw	 ymm0, ymm0, 1
  002f9	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00301	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00309	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 829  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  00311	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$18[rbp]
  00319	c5 fd 71 d0 01	 vpsrlw	 ymm0, ymm0, 1
  0031e	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00326	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0032e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 830  :                 y0 = _mm256_packus_epi16(y0, y1);

  00336	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0033e	c5 fd 67 85 40
	01 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$18[rbp]
  00346	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0034e	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00356	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 831  :                 _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  0035e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00365	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0036d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 832  :             }

  00371	e9 7a fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 833  :         }

  00376	e9 1c fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 834  :     }

  0037b	e9 99 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 835  : }

  00380	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0038b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00390	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00397	48 33 cc	 xor	 rcx, rsp
  0039a	e8 00 00 00 00	 call	 __security_check_cookie
  0039f	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  003a6	5f		 pop	 rdi
  003a7	5e		 pop	 rsi
  003a8	5d		 pop	 rbp
  003a9	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_avx2_base<9>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_yuv444_avx2

; 854  : void convert_yuv444_09_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 855  :     convert_yuv444_high_to_yuv444_avx2_base<9>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_avx2_base<9>

; 856  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
y1$18 = 320
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 544
$T26 = 584
__$ArrayPad$ = 600
dst$ = 720
src$ = 728
width$ = 736
src_y_pitch_byte$ = 744
src_uv_pitch_byte$ = 752
dst_y_pitch_byte$ = 760
height$ = 768
dst_height$ = 776
thread_id$ = 784
thread_n$ = 792
crop$ = 800
??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_avx2_base<10>

; 810  : static void __forceinline convert_yuv444_high_to_yuv444_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+720]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 811  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 812  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 813  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 814  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 815  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 816  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 817  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 10
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 818  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d 55 02 00
	00		 jge	 $LN3@convert_yu

; 819  :         uint16_t *srcYLine = (uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00132	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00136	48 63 c9	 movsxd	 rcx, ecx
  00139	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00141	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00145	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00149	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00151	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 820  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00155	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00159	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00164	48 63 c9	 movsxd	 rcx, ecx
  00167	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016f	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 821  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 822  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00195	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00197	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019f	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a3	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ab	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001af	48 63 84 24 f8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c5	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c8	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001cb	0f 8d aa 01 00
	00		 jge	 $LN6@convert_yu

; 823  :             uint16_t *src_ptr = srcYLine;

  001d1	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d5	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 824  :             uint8_t *dst_ptr = dstLine;

  001d9	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dd	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 825  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e4	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ee	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001f0	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f6	83 c0 20	 add	 eax, 32			; 00000020H
  001f9	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001ff	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00206	48 83 c0 20	 add	 rax, 32			; 00000020H
  0020a	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00211	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00215	48 83 c0 40	 add	 rax, 64			; 00000040H
  00219	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021d	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00220	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00226	0f 8d 4a 01 00
	00		 jge	 $LN9@convert_yu

; 826  :                 __m256i y0 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 16), (const __m128i *)(src_ptr +  0));

  0022c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00230	48 83 c0 20	 add	 rax, 32			; 00000020H
  00234	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00238	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00240	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00244	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00248	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T14[rbp], xmm0
  00250	c5 f8 10 85 c0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T14[rbp]
  00258	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00260	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00268	c4 e3 7d 18 85
	00 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T16[rbp], 1
  00272	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0027a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00282	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 827  :                 __m256i y1 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 24), (const __m128i *)(src_ptr +  8));

  0028a	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0028e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00292	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00296	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  0029e	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  002a2	48 83 c0 10	 add	 rax, 16
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002b2	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002ba	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c2	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002ca	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002d4	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002dc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002e4	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 828  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002ec	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002f4	c5 fd 71 d0 02	 vpsrlw	 ymm0, ymm0, 2
  002f9	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00301	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00309	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 829  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  00311	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$18[rbp]
  00319	c5 fd 71 d0 02	 vpsrlw	 ymm0, ymm0, 2
  0031e	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00326	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0032e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 830  :                 y0 = _mm256_packus_epi16(y0, y1);

  00336	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0033e	c5 fd 67 85 40
	01 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$18[rbp]
  00346	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0034e	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00356	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 831  :                 _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  0035e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00365	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0036d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 832  :             }

  00371	e9 7a fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 833  :         }

  00376	e9 1c fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 834  :     }

  0037b	e9 99 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 835  : }

  00380	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0038b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00390	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00397	48 33 cc	 xor	 rcx, rsp
  0039a	e8 00 00 00 00	 call	 __security_check_cookie
  0039f	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  003a6	5f		 pop	 rdi
  003a7	5e		 pop	 rsi
  003a8	5d		 pop	 rbp
  003a9	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_avx2_base<10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_yuv444_avx2

; 850  : void convert_yuv444_10_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 851  :     convert_yuv444_high_to_yuv444_avx2_base<10>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_avx2_base<10>

; 852  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
y1$18 = 320
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 544
$T26 = 584
__$ArrayPad$ = 600
dst$ = 720
src$ = 728
width$ = 736
src_y_pitch_byte$ = 744
src_uv_pitch_byte$ = 752
dst_y_pitch_byte$ = 760
height$ = 768
dst_height$ = 776
thread_id$ = 784
thread_n$ = 792
crop$ = 800
??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_avx2_base<12>

; 810  : static void __forceinline convert_yuv444_high_to_yuv444_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+720]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 811  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 812  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 813  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 814  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 815  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 816  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 817  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 10
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 818  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d 55 02 00
	00		 jge	 $LN3@convert_yu

; 819  :         uint16_t *srcYLine = (uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00132	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00136	48 63 c9	 movsxd	 rcx, ecx
  00139	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00141	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00145	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00149	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00151	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 820  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00155	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00159	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00164	48 63 c9	 movsxd	 rcx, ecx
  00167	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016f	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 821  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 822  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00195	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00197	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019f	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a3	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ab	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001af	48 63 84 24 f8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c5	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c8	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001cb	0f 8d aa 01 00
	00		 jge	 $LN6@convert_yu

; 823  :             uint16_t *src_ptr = srcYLine;

  001d1	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d5	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 824  :             uint8_t *dst_ptr = dstLine;

  001d9	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dd	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 825  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e4	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ee	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001f0	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f6	83 c0 20	 add	 eax, 32			; 00000020H
  001f9	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001ff	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00206	48 83 c0 20	 add	 rax, 32			; 00000020H
  0020a	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00211	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00215	48 83 c0 40	 add	 rax, 64			; 00000040H
  00219	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021d	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00220	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00226	0f 8d 4a 01 00
	00		 jge	 $LN9@convert_yu

; 826  :                 __m256i y0 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 16), (const __m128i *)(src_ptr +  0));

  0022c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00230	48 83 c0 20	 add	 rax, 32			; 00000020H
  00234	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00238	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00240	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00244	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00248	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T14[rbp], xmm0
  00250	c5 f8 10 85 c0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T14[rbp]
  00258	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00260	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00268	c4 e3 7d 18 85
	00 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T16[rbp], 1
  00272	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0027a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00282	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 827  :                 __m256i y1 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 24), (const __m128i *)(src_ptr +  8));

  0028a	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0028e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00292	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00296	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  0029e	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  002a2	48 83 c0 10	 add	 rax, 16
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002b2	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002ba	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c2	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002ca	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002d4	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002dc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002e4	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 828  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002ec	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002f4	c5 fd 71 d0 04	 vpsrlw	 ymm0, ymm0, 4
  002f9	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00301	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00309	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 829  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  00311	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$18[rbp]
  00319	c5 fd 71 d0 04	 vpsrlw	 ymm0, ymm0, 4
  0031e	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00326	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0032e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 830  :                 y0 = _mm256_packus_epi16(y0, y1);

  00336	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0033e	c5 fd 67 85 40
	01 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$18[rbp]
  00346	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0034e	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00356	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 831  :                 _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  0035e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00365	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0036d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 832  :             }

  00371	e9 7a fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 833  :         }

  00376	e9 1c fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 834  :     }

  0037b	e9 99 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 835  : }

  00380	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0038b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00390	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00397	48 33 cc	 xor	 rcx, rsp
  0039a	e8 00 00 00 00	 call	 __security_check_cookie
  0039f	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  003a6	5f		 pop	 rdi
  003a7	5e		 pop	 rsi
  003a8	5d		 pop	 rbp
  003a9	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_avx2_base<12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_yuv444_avx2

; 846  : void convert_yuv444_12_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 847  :     convert_yuv444_high_to_yuv444_avx2_base<12>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_avx2_base<12>

; 848  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
y1$18 = 320
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 544
$T26 = 584
__$ArrayPad$ = 600
dst$ = 720
src$ = 728
width$ = 736
src_y_pitch_byte$ = 744
src_uv_pitch_byte$ = 752
dst_y_pitch_byte$ = 760
height$ = 768
dst_height$ = 776
thread_id$ = 784
thread_n$ = 792
crop$ = 800
??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_avx2_base<14>

; 810  : static void __forceinline convert_yuv444_high_to_yuv444_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+720]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 811  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 812  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 813  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 814  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 815  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 816  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 817  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 10
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 818  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d 55 02 00
	00		 jge	 $LN3@convert_yu

; 819  :         uint16_t *srcYLine = (uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00132	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00136	48 63 c9	 movsxd	 rcx, ecx
  00139	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00141	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00145	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00149	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00151	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 820  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00155	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00159	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00164	48 63 c9	 movsxd	 rcx, ecx
  00167	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016f	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 821  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 822  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00195	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00197	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019f	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a3	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ab	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001af	48 63 84 24 f8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c5	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c8	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001cb	0f 8d aa 01 00
	00		 jge	 $LN6@convert_yu

; 823  :             uint16_t *src_ptr = srcYLine;

  001d1	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d5	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 824  :             uint8_t *dst_ptr = dstLine;

  001d9	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dd	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 825  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e4	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ee	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001f0	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f6	83 c0 20	 add	 eax, 32			; 00000020H
  001f9	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001ff	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00206	48 83 c0 20	 add	 rax, 32			; 00000020H
  0020a	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00211	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00215	48 83 c0 40	 add	 rax, 64			; 00000040H
  00219	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021d	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00220	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00226	0f 8d 4a 01 00
	00		 jge	 $LN9@convert_yu

; 826  :                 __m256i y0 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 16), (const __m128i *)(src_ptr +  0));

  0022c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00230	48 83 c0 20	 add	 rax, 32			; 00000020H
  00234	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00238	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00240	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00244	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00248	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T14[rbp], xmm0
  00250	c5 f8 10 85 c0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T14[rbp]
  00258	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00260	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00268	c4 e3 7d 18 85
	00 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T16[rbp], 1
  00272	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0027a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00282	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 827  :                 __m256i y1 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 24), (const __m128i *)(src_ptr +  8));

  0028a	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0028e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00292	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00296	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  0029e	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  002a2	48 83 c0 10	 add	 rax, 16
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002b2	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002ba	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c2	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002ca	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002d4	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002dc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002e4	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 828  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002ec	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002f4	c5 fd 71 d0 06	 vpsrlw	 ymm0, ymm0, 6
  002f9	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00301	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00309	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 829  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  00311	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$18[rbp]
  00319	c5 fd 71 d0 06	 vpsrlw	 ymm0, ymm0, 6
  0031e	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00326	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0032e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 830  :                 y0 = _mm256_packus_epi16(y0, y1);

  00336	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0033e	c5 fd 67 85 40
	01 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$18[rbp]
  00346	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0034e	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00356	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 831  :                 _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  0035e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00365	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0036d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 832  :             }

  00371	e9 7a fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 833  :         }

  00376	e9 1c fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 834  :     }

  0037b	e9 99 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 835  : }

  00380	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0038b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00390	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00397	48 33 cc	 xor	 rcx, rsp
  0039a	e8 00 00 00 00	 call	 __security_check_cookie
  0039f	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  003a6	5f		 pop	 rdi
  003a7	5e		 pop	 rsi
  003a8	5d		 pop	 rbp
  003a9	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_avx2_base<14>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_yuv444_avx2

; 842  : void convert_yuv444_14_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 843  :     convert_yuv444_high_to_yuv444_avx2_base<14>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_avx2_base<14>

; 844  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
y1$18 = 320
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 544
$T26 = 584
__$ArrayPad$ = 600
dst$ = 720
src$ = 728
width$ = 736
src_y_pitch_byte$ = 744
src_uv_pitch_byte$ = 752
dst_y_pitch_byte$ = 760
height$ = 768
dst_height$ = 776
thread_id$ = 784
thread_n$ = 792
crop$ = 800
??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_avx2_base<16>

; 810  : static void __forceinline convert_yuv444_high_to_yuv444_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+720]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 811  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 812  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 813  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 814  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 815  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 816  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 817  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 10
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d 48 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 818  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d 55 02 00
	00		 jge	 $LN3@convert_yu

; 819  :         uint16_t *srcYLine = (uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00132	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00136	48 63 c9	 movsxd	 rcx, ecx
  00139	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00141	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00145	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00149	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014d	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00151	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 820  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00155	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00159	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00160	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00164	48 63 c9	 movsxd	 rcx, ecx
  00167	48 8b 94 24 d0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016f	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 821  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 822  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00195	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00197	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019f	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a3	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001a7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ab	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001af	48 63 84 24 f8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bb	48 03 c8	 add	 rcx, rax
  001be	48 8b c1	 mov	 rax, rcx
  001c1	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c5	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c8	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001cb	0f 8d aa 01 00
	00		 jge	 $LN6@convert_yu

; 823  :             uint16_t *src_ptr = srcYLine;

  001d1	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d5	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 824  :             uint8_t *dst_ptr = dstLine;

  001d9	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dd	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 825  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e4	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ee	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001f0	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f6	83 c0 20	 add	 eax, 32			; 00000020H
  001f9	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001ff	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00206	48 83 c0 20	 add	 rax, 32			; 00000020H
  0020a	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00211	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00215	48 83 c0 40	 add	 rax, 64			; 00000040H
  00219	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021d	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00220	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00226	0f 8d 4a 01 00
	00		 jge	 $LN9@convert_yu

; 826  :                 __m256i y0 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 16), (const __m128i *)(src_ptr +  0));

  0022c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00230	48 83 c0 20	 add	 rax, 32			; 00000020H
  00234	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00238	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00240	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00244	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00248	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T14[rbp], xmm0
  00250	c5 f8 10 85 c0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T14[rbp]
  00258	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00260	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00268	c4 e3 7d 18 85
	00 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T16[rbp], 1
  00272	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0027a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00282	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 827  :                 __m256i y1 = _mm256_loadu2_m128i((const __m128i *)(src_ptr + 24), (const __m128i *)(src_ptr +  8));

  0028a	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0028e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00292	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00296	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  0029e	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  002a2	48 83 c0 10	 add	 rax, 16
  002a6	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002aa	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002b2	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002ba	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c2	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002ca	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002d4	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002dc	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002e4	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 828  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002ec	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002f4	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  002f9	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00301	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00309	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 829  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  00311	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$18[rbp]
  00319	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  0031e	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00326	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0032e	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR y1$18[rbp], ymm0

; 830  :                 y0 = _mm256_packus_epi16(y0, y1);

  00336	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0033e	c5 fd 67 85 40
	01 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$18[rbp]
  00346	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0034e	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00356	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 831  :                 _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  0035e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00365	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  0036d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 832  :             }

  00371	e9 7a fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 833  :         }

  00376	e9 1c fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 834  :     }

  0037b	e9 99 fd ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 835  : }

  00380	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0038b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00390	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00397	48 33 cc	 xor	 rcx, rsp
  0039a	e8 00 00 00 00	 call	 __security_check_cookie
  0039f	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  003a6	5f		 pop	 rdi
  003a7	5e		 pop	 rsi
  003a8	5d		 pop	 rbp
  003a9	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_avx2_base<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_yuv444_avx2

; 838  : void convert_yuv444_16_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 839  :     convert_yuv444_high_to_yuv444_avx2_base<16>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_avx2_base<16>

; 840  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
dst_y_pitch$ = 16
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
y0$13 = 160
y1$14 = 192
$T15 = 224
$T16 = 256
$T17 = 288
$T18 = 320
$T19 = 352
$T20 = 384
$T21 = 424
__$ArrayPad$ = 440
dst$ = 560
src$ = 568
width$ = 576
src_y_pitch_byte$ = 584
src_uv_pitch_byte$ = 592
dst_y_pitch_byte$ = 600
height$ = 608
dst_height$ = 616
thread_id$ = 624
thread_n$ = 632
crop$ = 640
?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_to_yuv444_16_avx2

; 782  : void convert_yuv444_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 84 00 00 00	 mov	 ecx, 132		; 00000084H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR [rsp+560]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 b8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 783  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 784  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 785  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 786  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 787  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000ab	8b 84 24 58 02
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 788  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ba	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c1	2b c8		 sub	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	8b 8c 24 78 02
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000d0	44 8b 8c 24 70
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d8	44 8b c0	 mov	 r8d, eax
  000db	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000de	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  000e5	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000ea	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 0c 00 00 00	 mov	 ecx, 12
  000f9	f3 a4		 rep movsb
  000fb	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  000ff	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  00103	48 8b f8	 mov	 rdi, rax
  00106	48 8b f1	 mov	 rsi, rcx
  00109	b9 0c 00 00 00	 mov	 ecx, 12
  0010e	f3 a4		 rep movsb

; 789  :     for (int i = 0; i < 3; i++) {

  00110	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00117	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00119	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  0011c	ff c0		 inc	 eax
  0011e	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  00121	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00125	0f 8d e3 01 00
	00		 jge	 $LN3@convert_yu

; 790  :         uint8_t *srcYLine = (uint8_t *)src[i] + src_y_pitch_byte * y_range.start_src + crop_left;

  0012b	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0012f	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00136	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  0013a	48 63 c9	 movsxd	 rcx, ecx
  0013d	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00145	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00149	48 03 c1	 add	 rax, rcx
  0014c	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00150	48 03 c1	 add	 rax, rcx
  00153	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 791  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00157	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0015b	8b 4d 10	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0015e	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00162	48 63 c9	 movsxd	 rcx, ecx
  00165	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0016d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00171	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00175	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 792  :         const int y_width = width - crop_right - crop_left;

  00179	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017c	8b 8c 24 40 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00183	2b c8		 sub	 ecx, eax
  00185	8b c1		 mov	 eax, ecx
  00187	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018a	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 793  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch) {

  0018d	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  00194	eb 2e		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00196	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  00199	ff c0		 inc	 eax
  0019b	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  0019e	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a6	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001aa	48 03 c8	 add	 rcx, rax
  001ad	48 8b c1	 mov	 rax, rcx
  001b0	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b4	48 63 45 10	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b8	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001bc	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c0	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c4	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001c7	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ca	0f 8d 39 01 00
	00		 jge	 $LN6@convert_yu

; 794  :             uint8_t *src_ptr = srcYLine;

  001d0	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001d4	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 795  :             uint16_t *dst_ptr = dstLine;

  001d8	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  001dc	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 796  :             for (int x = 0; x < y_width; x += 32, dst_ptr += 32, src_ptr += 32) {

  001e3	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  001ed	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  001ef	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  001f5	83 c0 20	 add	 eax, 32			; 00000020H
  001f8	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  001fe	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00205	48 83 c0 40	 add	 rax, 64			; 00000040H
  00209	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00210	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00214	48 83 c0 20	 add	 rax, 32			; 00000020H
  00218	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  0021c	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  0021f	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00225	0f 8d d9 00 00
	00		 jge	 $LN9@convert_yu

; 797  :                 __m256i y0, y1;
; 798  :                 y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0022b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0022f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00233	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0023b	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00243	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 799  :                 y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  0024b	c4 e3 fd 00 85
	a0 00 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$13[rbp], 216 ; 000000d8H
  00255	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  0025d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00265	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 800  :                 y1 = _mm256_unpackhi_epi8(_mm256_setzero_si256(), y0);

  0026d	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00271	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  00279	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00281	c5 fd 68 85 a0
	00 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y0$13[rbp]
  00289	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  00291	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  00299	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$14[rbp], ymm0

; 801  :                 y0 = _mm256_unpacklo_epi8(_mm256_setzero_si256(), y0);

  002a1	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  002a5	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  002ad	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  002b5	c5 fd 60 85 a0
	00 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y0$13[rbp]
  002bd	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002c5	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002cd	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$13[rbp], ymm0

; 802  :                 _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  002d5	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  002dc	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$13[rbp]
  002e4	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 803  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y1);

  002e8	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  002ef	48 83 c0 20	 add	 rax, 32			; 00000020H
  002f3	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$14[rbp]
  002fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 804  :             }

  002ff	e9 eb fe ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 805  :         }

  00304	e9 8d fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 806  :     }

  00309	e9 0b fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 807  : }

  0030e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00312	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00319	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0031e	48 8b 8d b8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00325	48 33 cc	 xor	 rcx, rsp
  00328	e8 00 00 00 00	 call	 __security_check_cookie
  0032d	48 81 c4 10 02
	00 00		 add	 rsp, 528		; 00000210H
  00334	5f		 pop	 rdi
  00335	5e		 pop	 rsi
  00336	5d		 pop	 rbp
  00337	c3		 ret	 0
?convert_yuv444_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
x0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 264
__$ArrayPad$ = 280
dst$ = 400
src$ = 408
width$ = 416
src_y_pitch_byte$ = 424
src_uv_pitch_byte$ = 432
dst_y_pitch_byte$ = 440
height$ = 448
dst_height$ = 456
thread_id$ = 464
thread_n$ = 472
crop$ = 480
??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_16_avx2_base<9>

; 729  : static void __forceinline convert_yuv444_high_to_yuv444_16_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR [rsp+400]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 730  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 731  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 732  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 733  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 734  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 735  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 736  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 737  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c6	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cd	2b c8		 sub	 ecx, eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dc	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e4	44 8b c0	 mov	 r8d, eax
  000e7	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000ea	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000fa	48 8b f9	 mov	 rdi, rcx
  000fd	48 8b f0	 mov	 rsi, rax
  00100	b9 0c 00 00 00	 mov	 ecx, 12
  00105	f3 a4		 rep movsb
  00107	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010b	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8b f1	 mov	 rsi, rcx
  00115	b9 0c 00 00 00	 mov	 ecx, 12
  0011a	f3 a4		 rep movsb

; 738  :     for (int i = 0; i < 3; i++) {

  0011c	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00123	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00125	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  00128	ff c0		 inc	 eax
  0012a	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  0012d	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00131	0f 8d 7b 01 00
	00		 jge	 $LN3@convert_yu

; 739  :         const uint16_t *srcYLine = (const uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  00137	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  0013e	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00142	48 63 c9	 movsxd	 rcx, ecx
  00145	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00151	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00155	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00159	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015d	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 740  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00161	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00168	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0017b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0017f	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 741  :         const int y_width = width - crop_right - crop_left;

  00183	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00186	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00194	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 742  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00197	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  0019e	eb 28		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001a0	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  001a3	ff c0		 inc	 eax
  001a5	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  001a8	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001ac	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b4	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b8	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001bc	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c8	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001cb	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ce	0f 8d d9 00 00
	00		 jge	 $LN6@convert_yu

; 743  :             if (in_bit_depth == 16) {

  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	74 1a		 je	 SHORT $LN11@convert_yu

; 744  :                 avx2_memcpy<true>((uint8_t *)dstLine, (const uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001da	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  001dd	d1 e0		 shl	 eax, 1
  001df	44 8b c0	 mov	 r8d, eax
  001e2	48 8b 55 60	 mov	 rdx, QWORD PTR srcYLine$6[rbp]
  001e6	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001ea	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 745  :             } else {

  001ef	e9 b4 00 00 00	 jmp	 $LN12@convert_yu
$LN11@convert_yu:

; 746  :                 const uint16_t *src_ptr = srcYLine;

  001f4	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001f8	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 747  :                 uint16_t *dst_ptr = dstLine;

  001fc	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  00200	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 748  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  00207	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  00211	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00213	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  00219	83 c0 10	 add	 eax, 16
  0021c	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00222	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00234	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00238	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023c	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  00240	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00243	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00249	7d 5d		 jge	 SHORT $LN9@convert_yu

; 749  :                     __m256i x0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0024b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0024f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00253	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0025b	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00263	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 750  :                     x0 = _mm256_slli_epi16(x0, 16 - in_bit_depth);

  0026b	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  00273	c5 fd 71 f0 07	 vpsllw	 ymm0, ymm0, 7
  00278	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00280	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00288	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 751  :                     _mm256_storeu_si256((__m256i *)dst_ptr, x0);

  00290	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00297	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  0029f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 752  :                 }

  002a3	e9 6b ff ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:
$LN12@convert_yu:

; 753  :             }
; 754  :         }

  002a8	e9 f3 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 755  :     }

  002ad	e9 73 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 756  : }

  002b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  002bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c2	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002c9	48 33 cc	 xor	 rcx, rsp
  002cc	e8 00 00 00 00	 call	 __security_check_cookie
  002d1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  002d8	5f		 pop	 rdi
  002d9	5e		 pop	 rsi
  002da	5d		 pop	 rbp
  002db	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_16_avx2_base<9>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_09_to_yuv444_16_avx2

; 775  : void convert_yuv444_09_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 776  :     convert_yuv444_high_to_yuv444_16_avx2_base<9>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_16_avx2_base@$08@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_16_avx2_base<9>

; 777  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_09_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_09_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
x0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 264
__$ArrayPad$ = 280
dst$ = 400
src$ = 408
width$ = 416
src_y_pitch_byte$ = 424
src_uv_pitch_byte$ = 432
dst_y_pitch_byte$ = 440
height$ = 448
dst_height$ = 456
thread_id$ = 464
thread_n$ = 472
crop$ = 480
??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_16_avx2_base<10>

; 729  : static void __forceinline convert_yuv444_high_to_yuv444_16_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR [rsp+400]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 730  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 731  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 732  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 733  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 734  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 735  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 736  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 737  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c6	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cd	2b c8		 sub	 ecx, eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dc	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e4	44 8b c0	 mov	 r8d, eax
  000e7	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000ea	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000fa	48 8b f9	 mov	 rdi, rcx
  000fd	48 8b f0	 mov	 rsi, rax
  00100	b9 0c 00 00 00	 mov	 ecx, 12
  00105	f3 a4		 rep movsb
  00107	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010b	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8b f1	 mov	 rsi, rcx
  00115	b9 0c 00 00 00	 mov	 ecx, 12
  0011a	f3 a4		 rep movsb

; 738  :     for (int i = 0; i < 3; i++) {

  0011c	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00123	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00125	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  00128	ff c0		 inc	 eax
  0012a	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  0012d	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00131	0f 8d 7b 01 00
	00		 jge	 $LN3@convert_yu

; 739  :         const uint16_t *srcYLine = (const uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  00137	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  0013e	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00142	48 63 c9	 movsxd	 rcx, ecx
  00145	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00151	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00155	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00159	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015d	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 740  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00161	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00168	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0017b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0017f	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 741  :         const int y_width = width - crop_right - crop_left;

  00183	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00186	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00194	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 742  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00197	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  0019e	eb 28		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001a0	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  001a3	ff c0		 inc	 eax
  001a5	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  001a8	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001ac	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b4	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b8	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001bc	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c8	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001cb	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ce	0f 8d d9 00 00
	00		 jge	 $LN6@convert_yu

; 743  :             if (in_bit_depth == 16) {

  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	74 1a		 je	 SHORT $LN11@convert_yu

; 744  :                 avx2_memcpy<true>((uint8_t *)dstLine, (const uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001da	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  001dd	d1 e0		 shl	 eax, 1
  001df	44 8b c0	 mov	 r8d, eax
  001e2	48 8b 55 60	 mov	 rdx, QWORD PTR srcYLine$6[rbp]
  001e6	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001ea	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 745  :             } else {

  001ef	e9 b4 00 00 00	 jmp	 $LN12@convert_yu
$LN11@convert_yu:

; 746  :                 const uint16_t *src_ptr = srcYLine;

  001f4	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001f8	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 747  :                 uint16_t *dst_ptr = dstLine;

  001fc	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  00200	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 748  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  00207	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  00211	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00213	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  00219	83 c0 10	 add	 eax, 16
  0021c	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00222	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00234	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00238	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023c	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  00240	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00243	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00249	7d 5d		 jge	 SHORT $LN9@convert_yu

; 749  :                     __m256i x0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0024b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0024f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00253	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0025b	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00263	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 750  :                     x0 = _mm256_slli_epi16(x0, 16 - in_bit_depth);

  0026b	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  00273	c5 fd 71 f0 06	 vpsllw	 ymm0, ymm0, 6
  00278	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00280	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00288	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 751  :                     _mm256_storeu_si256((__m256i *)dst_ptr, x0);

  00290	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00297	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  0029f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 752  :                 }

  002a3	e9 6b ff ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:
$LN12@convert_yu:

; 753  :             }
; 754  :         }

  002a8	e9 f3 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 755  :     }

  002ad	e9 73 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 756  : }

  002b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  002bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c2	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002c9	48 33 cc	 xor	 rcx, rsp
  002cc	e8 00 00 00 00	 call	 __security_check_cookie
  002d1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  002d8	5f		 pop	 rdi
  002d9	5e		 pop	 rsi
  002da	5d		 pop	 rbp
  002db	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_16_avx2_base<10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_10_to_yuv444_16_avx2

; 771  : void convert_yuv444_10_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 772  :     convert_yuv444_high_to_yuv444_16_avx2_base<10>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_16_avx2_base@$09@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_16_avx2_base<10>

; 773  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_10_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_10_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
x0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 264
__$ArrayPad$ = 280
dst$ = 400
src$ = 408
width$ = 416
src_y_pitch_byte$ = 424
src_uv_pitch_byte$ = 432
dst_y_pitch_byte$ = 440
height$ = 448
dst_height$ = 456
thread_id$ = 464
thread_n$ = 472
crop$ = 480
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_16_avx2_base<12>

; 729  : static void __forceinline convert_yuv444_high_to_yuv444_16_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR [rsp+400]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 730  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 731  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 732  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 733  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 734  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 735  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 736  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 737  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c6	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cd	2b c8		 sub	 ecx, eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dc	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e4	44 8b c0	 mov	 r8d, eax
  000e7	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000ea	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000fa	48 8b f9	 mov	 rdi, rcx
  000fd	48 8b f0	 mov	 rsi, rax
  00100	b9 0c 00 00 00	 mov	 ecx, 12
  00105	f3 a4		 rep movsb
  00107	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010b	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8b f1	 mov	 rsi, rcx
  00115	b9 0c 00 00 00	 mov	 ecx, 12
  0011a	f3 a4		 rep movsb

; 738  :     for (int i = 0; i < 3; i++) {

  0011c	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00123	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00125	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  00128	ff c0		 inc	 eax
  0012a	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  0012d	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00131	0f 8d 7b 01 00
	00		 jge	 $LN3@convert_yu

; 739  :         const uint16_t *srcYLine = (const uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  00137	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  0013e	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00142	48 63 c9	 movsxd	 rcx, ecx
  00145	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00151	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00155	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00159	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015d	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 740  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00161	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00168	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0017b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0017f	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 741  :         const int y_width = width - crop_right - crop_left;

  00183	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00186	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00194	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 742  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00197	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  0019e	eb 28		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001a0	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  001a3	ff c0		 inc	 eax
  001a5	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  001a8	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001ac	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b4	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b8	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001bc	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c8	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001cb	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ce	0f 8d d9 00 00
	00		 jge	 $LN6@convert_yu

; 743  :             if (in_bit_depth == 16) {

  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	74 1a		 je	 SHORT $LN11@convert_yu

; 744  :                 avx2_memcpy<true>((uint8_t *)dstLine, (const uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001da	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  001dd	d1 e0		 shl	 eax, 1
  001df	44 8b c0	 mov	 r8d, eax
  001e2	48 8b 55 60	 mov	 rdx, QWORD PTR srcYLine$6[rbp]
  001e6	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001ea	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 745  :             } else {

  001ef	e9 b4 00 00 00	 jmp	 $LN12@convert_yu
$LN11@convert_yu:

; 746  :                 const uint16_t *src_ptr = srcYLine;

  001f4	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001f8	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 747  :                 uint16_t *dst_ptr = dstLine;

  001fc	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  00200	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 748  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  00207	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  00211	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00213	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  00219	83 c0 10	 add	 eax, 16
  0021c	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00222	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00234	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00238	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023c	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  00240	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00243	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00249	7d 5d		 jge	 SHORT $LN9@convert_yu

; 749  :                     __m256i x0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0024b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0024f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00253	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0025b	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00263	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 750  :                     x0 = _mm256_slli_epi16(x0, 16 - in_bit_depth);

  0026b	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  00273	c5 fd 71 f0 04	 vpsllw	 ymm0, ymm0, 4
  00278	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00280	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00288	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 751  :                     _mm256_storeu_si256((__m256i *)dst_ptr, x0);

  00290	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00297	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  0029f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 752  :                 }

  002a3	e9 6b ff ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:
$LN12@convert_yu:

; 753  :             }
; 754  :         }

  002a8	e9 f3 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 755  :     }

  002ad	e9 73 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 756  : }

  002b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  002bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c2	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002c9	48 33 cc	 xor	 rcx, rsp
  002cc	e8 00 00 00 00	 call	 __security_check_cookie
  002d1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  002d8	5f		 pop	 rdi
  002d9	5e		 pop	 rsi
  002da	5d		 pop	 rbp
  002db	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_16_avx2_base<12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_12_to_yuv444_16_avx2

; 767  : void convert_yuv444_12_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 768  :     convert_yuv444_high_to_yuv444_16_avx2_base<12>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0M@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_16_avx2_base<12>

; 769  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_12_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_12_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
x0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 264
__$ArrayPad$ = 280
dst$ = 400
src$ = 408
width$ = 416
src_y_pitch_byte$ = 424
src_uv_pitch_byte$ = 432
dst_y_pitch_byte$ = 440
height$ = 448
dst_height$ = 456
thread_id$ = 464
thread_n$ = 472
crop$ = 480
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_16_avx2_base<14>

; 729  : static void __forceinline convert_yuv444_high_to_yuv444_16_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR [rsp+400]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 730  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 731  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 732  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 733  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 734  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 735  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 736  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 737  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c6	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cd	2b c8		 sub	 ecx, eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dc	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e4	44 8b c0	 mov	 r8d, eax
  000e7	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000ea	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000fa	48 8b f9	 mov	 rdi, rcx
  000fd	48 8b f0	 mov	 rsi, rax
  00100	b9 0c 00 00 00	 mov	 ecx, 12
  00105	f3 a4		 rep movsb
  00107	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010b	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8b f1	 mov	 rsi, rcx
  00115	b9 0c 00 00 00	 mov	 ecx, 12
  0011a	f3 a4		 rep movsb

; 738  :     for (int i = 0; i < 3; i++) {

  0011c	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00123	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00125	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  00128	ff c0		 inc	 eax
  0012a	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  0012d	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00131	0f 8d 7b 01 00
	00		 jge	 $LN3@convert_yu

; 739  :         const uint16_t *srcYLine = (const uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  00137	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  0013e	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00142	48 63 c9	 movsxd	 rcx, ecx
  00145	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00151	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00155	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00159	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015d	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 740  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00161	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00168	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0017b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0017f	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 741  :         const int y_width = width - crop_right - crop_left;

  00183	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00186	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00194	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 742  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00197	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  0019e	eb 28		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001a0	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  001a3	ff c0		 inc	 eax
  001a5	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  001a8	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001ac	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b4	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b8	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001bc	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c8	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001cb	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ce	0f 8d d9 00 00
	00		 jge	 $LN6@convert_yu

; 743  :             if (in_bit_depth == 16) {

  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	74 1a		 je	 SHORT $LN11@convert_yu

; 744  :                 avx2_memcpy<true>((uint8_t *)dstLine, (const uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001da	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  001dd	d1 e0		 shl	 eax, 1
  001df	44 8b c0	 mov	 r8d, eax
  001e2	48 8b 55 60	 mov	 rdx, QWORD PTR srcYLine$6[rbp]
  001e6	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001ea	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 745  :             } else {

  001ef	e9 b4 00 00 00	 jmp	 $LN12@convert_yu
$LN11@convert_yu:

; 746  :                 const uint16_t *src_ptr = srcYLine;

  001f4	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001f8	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 747  :                 uint16_t *dst_ptr = dstLine;

  001fc	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  00200	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 748  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  00207	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  00211	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00213	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  00219	83 c0 10	 add	 eax, 16
  0021c	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00222	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00234	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00238	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023c	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  00240	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00243	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  00249	7d 5d		 jge	 SHORT $LN9@convert_yu

; 749  :                     __m256i x0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0024b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  0024f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00253	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0025b	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00263	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 750  :                     x0 = _mm256_slli_epi16(x0, 16 - in_bit_depth);

  0026b	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  00273	c5 fd 71 f0 02	 vpsllw	 ymm0, ymm0, 2
  00278	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00280	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00288	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 751  :                     _mm256_storeu_si256((__m256i *)dst_ptr, x0);

  00290	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00297	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  0029f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 752  :                 }

  002a3	e9 6b ff ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:
$LN12@convert_yu:

; 753  :             }
; 754  :         }

  002a8	e9 f3 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 755  :     }

  002ad	e9 73 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 756  : }

  002b2	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  002bd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c2	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002c9	48 33 cc	 xor	 rcx, rsp
  002cc	e8 00 00 00 00	 call	 __security_check_cookie
  002d1	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  002d8	5f		 pop	 rdi
  002d9	5e		 pop	 rsi
  002da	5d		 pop	 rbp
  002db	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_16_avx2_base<14>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_14_to_yuv444_16_avx2

; 763  : void convert_yuv444_14_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 764  :     convert_yuv444_high_to_yuv444_16_avx2_base<14>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0O@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_16_avx2_base<14>

; 765  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_14_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_14_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$ = 40
$T4 = 72
i$5 = 88
srcYLine$6 = 96
dstLine$7 = 104
y_width$8 = 112
y$9 = 116
src_ptr$10 = 120
dst_ptr$11 = 128
x$12 = 136
x0$13 = 160
$T14 = 192
$T15 = 224
$T16 = 264
__$ArrayPad$ = 280
dst$ = 400
src$ = 408
width$ = 416
src_y_pitch_byte$ = 424
src_uv_pitch_byte$ = 432
dst_y_pitch_byte$ = 440
height$ = 448
dst_height$ = 456
thread_id$ = 464
thread_n$ = 472
crop$ = 480
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_high_to_yuv444_16_avx2_base<16>

; 729  : static void __forceinline convert_yuv444_high_to_yuv444_16_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR [rsp+400]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 730  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 731  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 732  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 733  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 734  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 735  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 736  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 737  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c6	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cd	2b c8		 sub	 ecx, eax
  000cf	8b c1		 mov	 eax, ecx
  000d1	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dc	44 8b 8c 24 d0
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e4	44 8b c0	 mov	 r8d, eax
  000e7	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000ea	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T16[rbp]
  000f1	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f6	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  000fa	48 8b f9	 mov	 rdi, rcx
  000fd	48 8b f0	 mov	 rsi, rax
  00100	b9 0c 00 00 00	 mov	 ecx, 12
  00105	f3 a4		 rep movsb
  00107	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010b	48 8d 4d 48	 lea	 rcx, QWORD PTR $T4[rbp]
  0010f	48 8b f8	 mov	 rdi, rax
  00112	48 8b f1	 mov	 rsi, rcx
  00115	b9 0c 00 00 00	 mov	 ecx, 12
  0011a	f3 a4		 rep movsb

; 738  :     for (int i = 0; i < 3; i++) {

  0011c	c7 45 58 00 00
	00 00		 mov	 DWORD PTR i$5[rbp], 0
  00123	eb 08		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00125	8b 45 58	 mov	 eax, DWORD PTR i$5[rbp]
  00128	ff c0		 inc	 eax
  0012a	89 45 58	 mov	 DWORD PTR i$5[rbp], eax
$LN4@convert_yu:
  0012d	83 7d 58 03	 cmp	 DWORD PTR i$5[rbp], 3
  00131	0f 8d 7c 01 00
	00		 jge	 $LN3@convert_yu

; 739  :         const uint16_t *srcYLine = (const uint16_t *)src[i] + src_y_pitch * y_range.start_src + crop_left;

  00137	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  0013b	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  0013e	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$[rbp]
  00142	48 63 c9	 movsxd	 rcx, ecx
  00145	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0014d	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00151	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00155	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00159	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0015d	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax

; 740  :         uint16_t *dstLine = (uint16_t *)dst[i] + dst_y_pitch * y_range.start_dst;

  00161	48 63 45 58	 movsxd	 rax, DWORD PTR i$5[rbp]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00168	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00177	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0017b	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0017f	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax

; 741  :         const int y_width = width - crop_right - crop_left;

  00183	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00186	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00194	89 45 70	 mov	 DWORD PTR y_width$8[rbp], eax

; 742  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00197	c7 45 74 00 00
	00 00		 mov	 DWORD PTR y$9[rbp], 0
  0019e	eb 28		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001a0	8b 45 74	 mov	 eax, DWORD PTR y$9[rbp]
  001a3	ff c0		 inc	 eax
  001a5	89 45 74	 mov	 DWORD PTR y$9[rbp], eax
  001a8	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001ac	48 8b 4d 60	 mov	 rcx, QWORD PTR srcYLine$6[rbp]
  001b0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001b4	48 89 45 60	 mov	 QWORD PTR srcYLine$6[rbp], rax
  001b8	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001bc	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 45 68	 mov	 QWORD PTR dstLine$7[rbp], rax
$LN7@convert_yu:
  001c8	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001cb	39 45 74	 cmp	 DWORD PTR y$9[rbp], eax
  001ce	0f 8d da 00 00
	00		 jge	 $LN6@convert_yu

; 743  :             if (in_bit_depth == 16) {

  001d4	33 c0		 xor	 eax, eax
  001d6	83 f8 01	 cmp	 eax, 1
  001d9	74 1a		 je	 SHORT $LN11@convert_yu

; 744  :                 avx2_memcpy<true>((uint8_t *)dstLine, (const uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001db	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  001de	d1 e0		 shl	 eax, 1
  001e0	44 8b c0	 mov	 r8d, eax
  001e3	48 8b 55 60	 mov	 rdx, QWORD PTR srcYLine$6[rbp]
  001e7	48 8b 4d 68	 mov	 rcx, QWORD PTR dstLine$7[rbp]
  001eb	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 745  :             } else {

  001f0	e9 b4 00 00 00	 jmp	 $LN12@convert_yu
$LN11@convert_yu:

; 746  :                 const uint16_t *src_ptr = srcYLine;

  001f5	48 8b 45 60	 mov	 rax, QWORD PTR srcYLine$6[rbp]
  001f9	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax

; 747  :                 uint16_t *dst_ptr = dstLine;

  001fd	48 8b 45 68	 mov	 rax, QWORD PTR dstLine$7[rbp]
  00201	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 748  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  00208	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$12[rbp], 0
  00212	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00214	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x$12[rbp]
  0021a	83 c0 10	 add	 eax, 16
  0021d	89 85 88 00 00
	00		 mov	 DWORD PTR x$12[rbp], eax
  00223	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0022a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022e	48 89 85 80 00
	00 00		 mov	 QWORD PTR dst_ptr$11[rbp], rax
  00235	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00239	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023d	48 89 45 78	 mov	 QWORD PTR src_ptr$10[rbp], rax
$LN10@convert_yu:
  00241	8b 45 70	 mov	 eax, DWORD PTR y_width$8[rbp]
  00244	39 85 88 00 00
	00		 cmp	 DWORD PTR x$12[rbp], eax
  0024a	7d 5d		 jge	 SHORT $LN9@convert_yu

; 749  :                     __m256i x0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0024c	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$10[rbp]
  00250	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00254	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  0025c	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  00264	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 750  :                     x0 = _mm256_slli_epi16(x0, 16 - in_bit_depth);

  0026c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  00274	c5 fd 71 f0 00	 vpsllw	 ymm0, ymm0, 0
  00279	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  00281	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00289	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR x0$13[rbp], ymm0

; 751  :                     _mm256_storeu_si256((__m256i *)dst_ptr, x0);

  00291	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00298	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR x0$13[rbp]
  002a0	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 752  :                 }

  002a4	e9 6b ff ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:
$LN12@convert_yu:

; 753  :             }
; 754  :         }

  002a9	e9 f2 fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 755  :     }

  002ae	e9 72 fe ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 756  : }

  002b3	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  002be	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002c3	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002ca	48 33 cc	 xor	 rcx, rsp
  002cd	e8 00 00 00 00	 call	 __security_check_cookie
  002d2	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  002d9	5f		 pop	 rdi
  002da	5e		 pop	 rsi
  002db	5d		 pop	 rbp
  002dc	c3		 ret	 0
??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_high_to_yuv444_16_avx2_base<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16_to_yuv444_16_avx2

; 759  : void convert_yuv444_16_to_yuv444_16_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 760  :     convert_yuv444_high_to_yuv444_16_avx2_base<16>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_high_to_yuv444_16_avx2_base@$0BA@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_high_to_yuv444_16_avx2_base<16>

; 761  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16_to_yuv444_16_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16_to_yuv444_16_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
i$1 = 0
dst_fin$ = 8
dst_aligned_fin$ = 16
y0$ = 32
y1$ = 64
y2$ = 96
y3$ = 128
start_align_diff$ = 160
$T2 = 192
$T3 = 224
$T4 = 256
$T5 = 288
$T6 = 320
dst_tmp$ = 352
$T7 = 384
$T8 = 416
$T9 = 448
$T10 = 480
tv142 = 512
tv150 = 516
tv158 = 520
tv166 = 524
dst$ = 592
src$ = 600
size$ = 608
??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z PROC			; avx2_memcpy<1>

; 47   : static void __forceinline avx2_memcpy(uint8_t *dst, const uint8_t *src, int size) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR [rsp+592]

; 48   :     if (size < 128) {

  00038	81 bc 24 60 02
	00 00 80 00 00
	00		 cmp	 DWORD PTR size$[rsp], 128 ; 00000080H
  00043	7d 44		 jge	 SHORT $LN8@avx2_memcp

; 49   :         for (int i = 0; i < size; i++)

  00045	c7 45 00 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0004c	eb 08		 jmp	 SHORT $LN4@avx2_memcp
$LN2@avx2_memcp:
  0004e	8b 45 00	 mov	 eax, DWORD PTR i$1[rbp]
  00051	ff c0		 inc	 eax
  00053	89 45 00	 mov	 DWORD PTR i$1[rbp], eax
$LN4@avx2_memcp:
  00056	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR size$[rsp]
  0005d	39 45 00	 cmp	 DWORD PTR i$1[rbp], eax
  00060	7d 22		 jge	 SHORT $LN3@avx2_memcp

; 50   :             dst[i] = src[i];

  00062	48 63 45 00	 movsxd	 rax, DWORD PTR i$1[rbp]
  00066	48 63 4d 00	 movsxd	 rcx, DWORD PTR i$1[rbp]
  0006a	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00072	4c 8b 84 24 58
	02 00 00	 mov	 r8, QWORD PTR src$[rsp]
  0007a	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0007f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00082	eb ca		 jmp	 SHORT $LN2@avx2_memcp
$LN3@avx2_memcp:

; 51   :         return;

  00084	e9 d6 03 00 00	 jmp	 $LN1@avx2_memcp
$LN8@avx2_memcp:

; 52   :     }
; 53   :     uint8_t *dst_fin = dst + size;

  00089	48 63 84 24 60
	02 00 00	 movsxd	 rax, DWORD PTR size$[rsp]
  00091	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 89 45 08	 mov	 QWORD PTR dst_fin$[rbp], rax

; 54   :     uint8_t *dst_aligned_fin = (uint8_t *)(((size_t)(dst_fin + 31) & ~31) - 128);

  000a3	48 8b 45 08	 mov	 rax, QWORD PTR dst_fin$[rbp]
  000a7	48 83 c0 1f	 add	 rax, 31
  000ab	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000af	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  000b5	48 89 45 10	 mov	 QWORD PTR dst_aligned_fin$[rbp], rax

; 55   :     __m256i y0, y1, y2, y3;
; 56   :     const int start_align_diff = (int)((size_t)dst & 31);

  000b9	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000c1	48 83 e0 1f	 and	 rax, 31
  000c5	89 85 a0 00 00
	00		 mov	 DWORD PTR start_align_diff$[rbp], eax

; 57   :     if (start_align_diff) {

  000cb	83 bd a0 00 00
	00 00		 cmp	 DWORD PTR start_align_diff$[rbp], 0
  000d2	74 78		 je	 SHORT $LN9@avx2_memcp

; 58   :         y0 = _mm256_loadu_si256((const __m256i*)src);

  000d4	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  000dc	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e0	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  000e8	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  000f0	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 59   :         _mm256_storeu_si256((__m256i*)dst, y0);

  000f5	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000fd	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00102	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 60   :         dst += 32 - start_align_diff;

  00106	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0010b	2b 85 a0 00 00
	00		 sub	 eax, DWORD PTR start_align_diff$[rbp]
  00111	48 98		 cdqe
  00113	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0011b	48 03 c8	 add	 rcx, rax
  0011e	48 8b c1	 mov	 rax, rcx
  00121	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR dst$[rsp], rax

; 61   :         src += 32 - start_align_diff;

  00129	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0012e	2b 85 a0 00 00
	00		 sub	 eax, DWORD PTR start_align_diff$[rbp]
  00134	48 98		 cdqe
  00136	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0013e	48 03 c8	 add	 rcx, rax
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN9@avx2_memcp:

; 62   :     }
; 63   : #define _mm256_stream_switch_si256(x, ymm) ((use_stream) ? _mm256_stream_si256((x), (ymm)) : _mm256_store_si256((x), (ymm)))
; 64   :     for ( ; dst < dst_aligned_fin; dst += 128, src += 128) {

  0014c	eb 2c		 jmp	 SHORT $LN7@avx2_memcp
$LN5@avx2_memcp:
  0014e	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00156	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0015c	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR dst$[rsp], rax
  00164	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0016c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00172	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN7@avx2_memcp:
  0017a	48 8b 45 10	 mov	 rax, QWORD PTR dst_aligned_fin$[rbp]
  0017e	48 39 84 24 50
	02 00 00	 cmp	 QWORD PTR dst$[rsp], rax
  00186	0f 83 b2 01 00
	00		 jae	 $LN6@avx2_memcp

; 65   :         y0 = _mm256_loadu_si256((const __m256i*)(src +  0));

  0018c	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00194	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00198	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  001a0	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  001a8	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 66   :         y1 = _mm256_loadu_si256((const __m256i*)(src + 32));

  001ad	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001b5	48 83 c0 20	 add	 rax, 32			; 00000020H
  001b9	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001bd	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  001c5	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  001cd	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 67   :         y2 = _mm256_loadu_si256((const __m256i*)(src + 64));

  001d2	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001da	48 83 c0 40	 add	 rax, 64			; 00000040H
  001de	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001e2	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  001ea	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  001f2	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 68   :         y3 = _mm256_loadu_si256((const __m256i*)(src + 96));

  001f7	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001ff	48 83 c0 60	 add	 rax, 96			; 00000060H
  00203	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00207	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  0020f	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00217	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 69   :         _mm256_stream_switch_si256((__m256i*)(dst +  0), y0);

  0021f	33 c0		 xor	 eax, eax
  00221	83 f8 01	 cmp	 eax, 1
  00224	74 1d		 je	 SHORT $LN11@avx2_memcp
  00226	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0022e	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00233	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  00237	c7 85 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
  00241	eb 1b		 jmp	 SHORT $LN12@avx2_memcp
$LN11@avx2_memcp:
  00243	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0024b	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00250	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  00254	c7 85 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
$LN12@avx2_memcp:

; 70   :         _mm256_stream_switch_si256((__m256i*)(dst + 32), y1);

  0025e	33 c0		 xor	 eax, eax
  00260	83 f8 01	 cmp	 eax, 1
  00263	74 21		 je	 SHORT $LN13@avx2_memcp
  00265	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0026d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00271	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00276	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  0027a	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv150[rbp], 0
  00284	eb 1f		 jmp	 SHORT $LN14@avx2_memcp
$LN13@avx2_memcp:
  00286	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0028e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00292	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00297	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  0029b	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv150[rbp], 0
$LN14@avx2_memcp:

; 71   :         _mm256_stream_switch_si256((__m256i*)(dst + 64), y2);

  002a5	33 c0		 xor	 eax, eax
  002a7	83 f8 01	 cmp	 eax, 1
  002aa	74 21		 je	 SHORT $LN15@avx2_memcp
  002ac	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002b4	48 83 c0 40	 add	 rax, 64			; 00000040H
  002b8	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002bd	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  002c1	c7 85 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv158[rbp], 0
  002cb	eb 1f		 jmp	 SHORT $LN16@avx2_memcp
$LN15@avx2_memcp:
  002cd	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002d5	48 83 c0 40	 add	 rax, 64			; 00000040H
  002d9	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002de	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  002e2	c7 85 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv158[rbp], 0
$LN16@avx2_memcp:

; 72   :         _mm256_stream_switch_si256((__m256i*)(dst + 96), y3);

  002ec	33 c0		 xor	 eax, eax
  002ee	83 f8 01	 cmp	 eax, 1
  002f1	74 24		 je	 SHORT $LN17@avx2_memcp
  002f3	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002fb	48 83 c0 60	 add	 rax, 96			; 00000060H
  002ff	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00307	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  0030b	c7 85 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv166[rbp], 0
  00315	eb 22		 jmp	 SHORT $LN18@avx2_memcp
$LN17@avx2_memcp:
  00317	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0031f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00323	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  0032b	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  0032f	c7 85 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv166[rbp], 0
$LN18@avx2_memcp:

; 73   :     }

  00339	e9 10 fe ff ff	 jmp	 $LN5@avx2_memcp
$LN6@avx2_memcp:

; 74   : #undef _mm256_stream_switch_si256
; 75   :     uint8_t *dst_tmp = dst_fin - 128;

  0033e	48 8b 45 08	 mov	 rax, QWORD PTR dst_fin$[rbp]
  00342	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00348	48 89 85 60 01
	00 00		 mov	 QWORD PTR dst_tmp$[rbp], rax

; 76   :     src -= (dst - dst_tmp);

  0034f	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00356	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0035e	48 2b c8	 sub	 rcx, rax
  00361	48 8b c1	 mov	 rax, rcx
  00364	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0036c	48 2b c8	 sub	 rcx, rax
  0036f	48 8b c1	 mov	 rax, rcx
  00372	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax

; 77   :     y0 = _mm256_loadu_si256((const __m256i*)(src +  0));

  0037a	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00382	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00386	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  0038e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00396	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 78   :     y1 = _mm256_loadu_si256((const __m256i*)(src + 32));

  0039b	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003a3	48 83 c0 20	 add	 rax, 32			; 00000020H
  003a7	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003ab	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  003b3	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  003bb	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 79   :     y2 = _mm256_loadu_si256((const __m256i*)(src + 64));

  003c0	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003c8	48 83 c0 40	 add	 rax, 64			; 00000040H
  003cc	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003d0	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  003d8	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  003e0	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 80   :     y3 = _mm256_loadu_si256((const __m256i*)(src + 96));

  003e5	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003ed	48 83 c0 60	 add	 rax, 96			; 00000060H
  003f1	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003f5	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  003fd	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  00405	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 81   :     _mm256_storeu_si256((__m256i*)(dst_tmp +  0), y0);

  0040d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00414	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00419	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 82   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 32), y1);

  0041d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00424	48 83 c0 20	 add	 rax, 32			; 00000020H
  00428	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  0042d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 83   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 64), y2);

  00431	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00438	48 83 c0 40	 add	 rax, 64			; 00000040H
  0043c	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  00441	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 84   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 96), y3);

  00445	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  0044c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00450	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00458	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 85   :     _mm256_zeroupper();

  0045c	c5 f8 77	 vzeroupper
$LN1@avx2_memcp:

; 86   : }

  0045f	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00466	5f		 pop	 rdi
  00467	5d		 pop	 rbp
  00468	c3		 ret	 0
??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ENDP			; avx2_memcpy<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
i$5 = 120
srcYLine$6 = 128
dstLine$7 = 136
y_width$8 = 144
y$9 = 148
$T10 = 160
__$ArrayPad$ = 176
dst$ = 224
src$ = 232
width$ = 240
src_y_pitch_byte$ = 248
src_uv_pitch_byte$ = 256
dst_y_pitch_byte$ = 264
height$ = 272
dst_height$ = 280
thread_id$ = 288
thread_n$ = 296
crop$ = 304
?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; copy_yuv444_to_yuv444_avx2

; 712  : void copy_yuv444_to_yuv444_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 713  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 714  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 715  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 716  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 717  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 20
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 718  :     for (int i = 0; i < 3; i++) {

  00105	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR i$5[rsp], 0
  0010d	eb 0a		 jmp	 SHORT $LN4@copy_yuv44
$LN2@copy_yuv44:
  0010f	8b 44 24 78	 mov	 eax, DWORD PTR i$5[rsp]
  00113	ff c0		 inc	 eax
  00115	89 44 24 78	 mov	 DWORD PTR i$5[rsp], eax
$LN4@copy_yuv44:
  00119	83 7c 24 78 03	 cmp	 DWORD PTR i$5[rsp], 3
  0011e	0f 8d 02 01 00
	00		 jge	 $LN3@copy_yuv44

; 719  :         const uint8_t *srcYLine = (const uint8_t *)src[i] + src_y_pitch_byte * y_range.start_src + crop_left;

  00124	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$5[rsp]
  00129	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00130	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  00135	48 63 c9	 movsxd	 rcx, ecx
  00138	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00140	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00144	48 03 c1	 add	 rax, rcx
  00147	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  0014c	48 03 c1	 add	 rax, rcx
  0014f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR srcYLine$6[rsp], rax

; 720  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  00157	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$5[rsp]
  0015c	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00163	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00168	48 63 c9	 movsxd	 rcx, ecx
  0016b	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00173	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  00177	48 8b c1	 mov	 rax, rcx
  0017a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstLine$7[rsp], rax

; 721  :         const int y_width = width - crop_right - crop_left;

  00182	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00186	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00195	89 84 24 90 00
	00 00		 mov	 DWORD PTR y_width$8[rsp], eax

; 722  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0019c	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$9[rsp], 0
  001a7	eb 4c		 jmp	 SHORT $LN7@copy_yuv44
$LN5@copy_yuv44:
  001a9	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR y$9[rsp]
  001b0	ff c0		 inc	 eax
  001b2	89 84 24 94 00
	00 00		 mov	 DWORD PTR y$9[rsp], eax
  001b9	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001c1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$6[rsp]
  001c9	48 03 c8	 add	 rcx, rax
  001cc	48 8b c1	 mov	 rax, rcx
  001cf	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR srcYLine$6[rsp], rax
  001d7	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001df	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstLine$7[rsp]
  001e7	48 03 c8	 add	 rcx, rax
  001ea	48 8b c1	 mov	 rax, rcx
  001ed	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dstLine$7[rsp], rax
$LN7@copy_yuv44:
  001f5	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001f9	39 84 24 94 00
	00 00		 cmp	 DWORD PTR y$9[rsp], eax
  00200	7d 1f		 jge	 SHORT $LN6@copy_yuv44

; 723  :             avx2_memcpy<true>(dstLine, srcYLine, y_width);

  00202	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR y_width$8[rsp]
  0020a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$6[rsp]
  00212	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dstLine$7[rsp]
  0021a	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 724  :         }

  0021f	eb 88		 jmp	 SHORT $LN5@copy_yuv44
$LN6@copy_yuv44:

; 725  :     }

  00221	e9 e9 fe ff ff	 jmp	 $LN2@copy_yuv44
$LN3@copy_yuv44:

; 726  : }

  00226	48 8b cc	 mov	 rcx, rsp
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00230	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00235	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0023d	48 33 cc	 xor	 rcx, rsp
  00240	e8 00 00 00 00	 call	 __security_check_cookie
  00245	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0024c	5f		 pop	 rdi
  0024d	5e		 pop	 rsi
  0024e	c3		 ret	 0
?copy_yuv444_to_yuv444_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; copy_yuv444_to_yuv444_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
src_ptr$11 = 112
dst_ptr$12 = 120
x$13 = 128
y0$14 = 160
$T15 = 192
$T16 = 224
uv_range$ = 264
$T17 = 296
src_uv_pitch$ = 312
srcULine$ = 320
srcVLine$ = 328
dstLine$ = 336
y$18 = 344
x_fin$19 = 348
src_u_ptr$20 = 352
src_v_ptr$21 = 360
dst_ptr$22 = 368
y0$23 = 384
y1$24 = 416
y2$25 = 448
x$26 = 480
$T27 = 512
$T28 = 544
$T29 = 576
$T30 = 608
$T31 = 640
$T32 = 672
$T33 = 704
$T34 = 736
$T35 = 776
$T36 = 792
__$ArrayPad$ = 808
dst$ = 928
src$ = 936
width$ = 944
src_y_pitch_byte$ = 952
src_uv_pitch_byte$ = 960
dst_y_pitch_byte$ = 968
height$ = 976
dst_height$ = 984
thread_id$ = 992
thread_n$ = 1000
crop$ = 1008
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_p010_avx2_base<9,0>

; 627  : static void __forceinline convert_yv12_high_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+928]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 628  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 629  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 630  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 631  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 632  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 633  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 b8 03
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 634  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 635  :     //Y成分のコピー
; 636  :     if (!uv_only) {

  000c3	33 c0		 xor	 eax, eax
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	0f 84 cd 01 00
	00		 je	 $LN14@convert_yv

; 637  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000d1	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e7	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000f5	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  000fc	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00101	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00105	48 8b f9	 mov	 rdi, rcx
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 0c 00 00 00	 mov	 ecx, 12
  00110	f3 a4		 rep movsb
  00112	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  00116	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0011a	48 8b f8	 mov	 rdi, rax
  0011d	48 8b f1	 mov	 rsi, rcx
  00120	b9 0c 00 00 00	 mov	 ecx, 12
  00125	f3 a4		 rep movsb

; 638  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 00	 imul	 rax, rax, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00133	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00137	48 63 c9	 movsxd	 rcx, ecx
  0013a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00142	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00146	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014a	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00152	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 639  :         uint16_t *dstLine = (uint16_t *)dst[0] + dst_y_pitch * y_range.start_dst;

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 00	 imul	 rax, rax, 0
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00162	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00166	48 63 c9	 movsxd	 rcx, ecx
  00169	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00171	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00175	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00179	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 640  :         const int y_width = width - crop_right - crop_left;

  0017d	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00180	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00187	2b c8		 sub	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018e	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 641  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00191	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00198	eb 28		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  0019d	ff c0		 inc	 eax
  0019f	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  001a2	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a6	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ae	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b2	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b6	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001ba	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001be	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001c2	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c5	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c8	0f 8d cd 00 00
	00		 jge	 $LN3@convert_yv

; 642  :             if (in_bit_depth == 16) {

  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	74 1a		 je	 SHORT $LN15@convert_yv

; 643  :                 avx2_memcpy<true>((uint8_t *)dstLine, (uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001d4	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  001d7	d1 e0		 shl	 eax, 1
  001d9	44 8b c0	 mov	 r8d, eax
  001dc	48 8b 55 58	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001e0	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e4	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 644  :             } else {

  001e9	e9 a8 00 00 00	 jmp	 $LN16@convert_yv
$LN15@convert_yv:

; 645  :                 uint16_t *src_ptr = srcYLine;

  001ee	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001f2	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax

; 646  :                 uint16_t *dst_ptr = dstLine;

  001f6	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001fa	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax

; 647  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  001fe	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$13[rbp], 0
  00208	eb 27		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020a	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR x$13[rbp]
  00210	83 c0 10	 add	 eax, 16
  00213	89 85 80 00 00
	00		 mov	 DWORD PTR x$13[rbp], eax
  00219	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax
  00225	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax
$LN7@convert_yv:
  00231	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  00234	39 85 80 00 00
	00		 cmp	 DWORD PTR x$13[rbp], eax
  0023a	7d 5a		 jge	 SHORT $LN6@convert_yv

; 648  :                     __m256i y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0023c	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00240	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00244	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0024c	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00254	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 649  :                     y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0025c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00264	c5 fd 71 f0 07	 vpsllw	 ymm0, ymm0, 7
  00269	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00271	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00279	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 650  :                     _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  00281	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  00285	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0028d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 651  :                 }

  00291	e9 74 ff ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN16@convert_yv:

; 652  :             }
; 653  :         }

  00296	e9 ff fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 654  :     }
; 655  :     //UV成分のコピー
; 656  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0029b	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0029e	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  002a5	2b c8		 sub	 ecx, eax
  002a7	8b c1		 mov	 eax, ecx
  002a9	d1 f8		 sar	 eax, 1
  002ab	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  002ae	d1 f9		 sar	 ecx, 1
  002b0	8b 94 24 e8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  002b7	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  002bb	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  002c3	44 8b c0	 mov	 r8d, eax
  002c6	8b d1		 mov	 edx, ecx
  002c8	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  002cf	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  002d4	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002db	48 8b f9	 mov	 rdi, rcx
  002de	48 8b f0	 mov	 rsi, rax
  002e1	b9 0c 00 00 00	 mov	 ecx, 12
  002e6	f3 a4		 rep movsb
  002e8	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  002ef	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002f6	48 8b f8	 mov	 rdi, rax
  002f9	48 8b f1	 mov	 rsi, rcx
  002fc	b9 0c 00 00 00	 mov	 ecx, 12
  00301	f3 a4		 rep movsb

; 657  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  00303	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0030a	d1 f8		 sar	 eax, 1
  0030c	89 85 38 01 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 658  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00312	b8 08 00 00 00	 mov	 eax, 8
  00317	48 6b c0 01	 imul	 rax, rax, 1
  0031b	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00321	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00328	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0032b	d1 fa		 sar	 edx, 1
  0032d	03 ca		 add	 ecx, edx
  0032f	48 63 c9	 movsxd	 rcx, ecx
  00332	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0033a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0033e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00342	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 659  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00349	b8 08 00 00 00	 mov	 eax, 8
  0034e	48 6b c0 02	 imul	 rax, rax, 2
  00352	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00358	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  0035f	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00362	d1 fa		 sar	 edx, 1
  00364	03 ca		 add	 ecx, edx
  00366	48 63 c9	 movsxd	 rcx, ecx
  00369	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00371	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00375	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00379	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 660  :     uint16_t *dstLine = (uint16_t *)dst[1] + dst_y_pitch * uv_range.start_dst;;

  00380	b8 08 00 00 00	 mov	 eax, 8
  00385	48 6b c0 01	 imul	 rax, rax, 1
  00389	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0038c	0f af 8d 0c 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00393	48 63 c9	 movsxd	 rcx, ecx
  00396	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0039e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003a2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003a6	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 661  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch) {

  003ad	c7 85 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$18[rbp], 0
  003b7	eb 56		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b9	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y$18[rbp]
  003bf	ff c0		 inc	 eax
  003c1	89 85 58 01 00
	00		 mov	 DWORD PTR y$18[rbp], eax
  003c7	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003ce	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  003d5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003d9	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  003e0	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003e7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  003ee	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003f2	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  003f9	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  003fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00404	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00408	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  0040f	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00415	39 85 58 01 00
	00		 cmp	 DWORD PTR y$18[rbp], eax
  0041b	0f 8d ff 01 00
	00		 jge	 $LN9@convert_yv

; 662  :         const int x_fin = width - crop_right;

  00421	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00424	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0042b	2b c8		 sub	 ecx, eax
  0042d	8b c1		 mov	 eax, ecx
  0042f	89 85 5c 01 00
	00		 mov	 DWORD PTR x_fin$19[rbp], eax

; 663  :         uint16_t *src_u_ptr = srcULine;

  00435	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0043c	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax

; 664  :         uint16_t *src_v_ptr = srcVLine;

  00443	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0044a	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax

; 665  :         uint16_t *dst_ptr = dstLine;

  00451	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00458	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax

; 666  :         __m256i y0, y1, y2;
; 667  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0045f	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00462	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00468	eb 45		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0046a	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR x$26[rbp]
  00470	83 c0 20	 add	 eax, 32			; 00000020H
  00473	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00479	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  00480	48 83 c0 20	 add	 rax, 32			; 00000020H
  00484	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax
  0048b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  00492	48 83 c0 20	 add	 rax, 32			; 00000020H
  00496	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax
  0049d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  004a4	48 83 c0 40	 add	 rax, 64			; 00000040H
  004a8	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax
$LN13@convert_yv:
  004af	8b 85 5c 01 00
	00		 mov	 eax, DWORD PTR x_fin$19[rbp]
  004b5	39 85 e0 01 00
	00		 cmp	 DWORD PTR x$26[rbp], eax
  004bb	0f 8d 5a 01 00
	00		 jge	 $LN12@convert_yv

; 668  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  004c1	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  004c8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004cc	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004d4	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004dc	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 669  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  004e4	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  004eb	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004ef	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004f7	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004ff	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 670  : 
; 671  :             if (in_bit_depth < 16) {

  00507	33 c0		 xor	 eax, eax
  00509	83 f8 01	 cmp	 eax, 1
  0050c	74 4a		 je	 SHORT $LN17@convert_yv

; 672  :                 y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0050e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  00516	c5 fd 71 f0 07	 vpsllw	 ymm0, ymm0, 7
  0051b	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  00523	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  0052b	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 673  :                 y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00533	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$24[rbp]
  0053b	c5 fd 71 f0 07	 vpsllw	 ymm0, ymm0, 7
  00540	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00548	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  00550	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0
$LN17@convert_yv:

; 674  :             }
; 675  : 
; 676  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00558	c4 e3 fd 00 85
	80 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$23[rbp], 216 ; 000000d8H
  00562	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0056a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00572	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 677  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  0057a	c4 e3 fd 00 85
	a0 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$24[rbp], 216 ; 000000d8H
  00584	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0058c	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00594	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 678  : 
; 679  :             y2 = _mm256_unpackhi_epi16(y0, y1);

  0059c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005a4	c5 fd 69 85 a0
	01 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005ac	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  005b4	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  005bc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$25[rbp], ymm0

; 680  :             y0 = _mm256_unpacklo_epi16(y0, y1);

  005c4	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005cc	c5 fd 61 85 a0
	01 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  005dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005e4	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 681  : 
; 682  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  005ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  005f3	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 683  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y2);

  005ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  00606	48 83 c0 20	 add	 rax, 32			; 00000020H
  0060a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$25[rbp]
  00612	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 684  :         }

  00616	e9 4f fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 685  :     }

  0061b	e9 99 fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 686  : }

  00620	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0062b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00630	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00637	48 33 cc	 xor	 rcx, rsp
  0063a	e8 00 00 00 00	 call	 __security_check_cookie
  0063f	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  00646	5f		 pop	 rdi
  00647	5e		 pop	 rsi
  00648	5d		 pop	 rbp
  00649	c3		 ret	 0
??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_p010_avx2_base<9,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_to_p010_avx2

; 705  : void convert_yv12_09_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 706  :     convert_yv12_high_to_p010_avx2_base<9, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_p010_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_p010_avx2_base<9,0>

; 707  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
src_ptr$11 = 112
dst_ptr$12 = 120
x$13 = 128
y0$14 = 160
$T15 = 192
$T16 = 224
uv_range$ = 264
$T17 = 296
src_uv_pitch$ = 312
srcULine$ = 320
srcVLine$ = 328
dstLine$ = 336
y$18 = 344
x_fin$19 = 348
src_u_ptr$20 = 352
src_v_ptr$21 = 360
dst_ptr$22 = 368
y0$23 = 384
y1$24 = 416
y2$25 = 448
x$26 = 480
$T27 = 512
$T28 = 544
$T29 = 576
$T30 = 608
$T31 = 640
$T32 = 672
$T33 = 704
$T34 = 736
$T35 = 776
$T36 = 792
__$ArrayPad$ = 808
dst$ = 928
src$ = 936
width$ = 944
src_y_pitch_byte$ = 952
src_uv_pitch_byte$ = 960
dst_y_pitch_byte$ = 968
height$ = 976
dst_height$ = 984
thread_id$ = 992
thread_n$ = 1000
crop$ = 1008
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_p010_avx2_base<10,0>

; 627  : static void __forceinline convert_yv12_high_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+928]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 628  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 629  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 630  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 631  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 632  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 633  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 b8 03
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 634  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 635  :     //Y成分のコピー
; 636  :     if (!uv_only) {

  000c3	33 c0		 xor	 eax, eax
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	0f 84 cd 01 00
	00		 je	 $LN14@convert_yv

; 637  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000d1	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e7	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000f5	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  000fc	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00101	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00105	48 8b f9	 mov	 rdi, rcx
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 0c 00 00 00	 mov	 ecx, 12
  00110	f3 a4		 rep movsb
  00112	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  00116	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0011a	48 8b f8	 mov	 rdi, rax
  0011d	48 8b f1	 mov	 rsi, rcx
  00120	b9 0c 00 00 00	 mov	 ecx, 12
  00125	f3 a4		 rep movsb

; 638  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 00	 imul	 rax, rax, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00133	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00137	48 63 c9	 movsxd	 rcx, ecx
  0013a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00142	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00146	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014a	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00152	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 639  :         uint16_t *dstLine = (uint16_t *)dst[0] + dst_y_pitch * y_range.start_dst;

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 00	 imul	 rax, rax, 0
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00162	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00166	48 63 c9	 movsxd	 rcx, ecx
  00169	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00171	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00175	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00179	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 640  :         const int y_width = width - crop_right - crop_left;

  0017d	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00180	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00187	2b c8		 sub	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018e	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 641  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00191	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00198	eb 28		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  0019d	ff c0		 inc	 eax
  0019f	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  001a2	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a6	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ae	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b2	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b6	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001ba	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001be	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001c2	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c5	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c8	0f 8d cd 00 00
	00		 jge	 $LN3@convert_yv

; 642  :             if (in_bit_depth == 16) {

  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	74 1a		 je	 SHORT $LN15@convert_yv

; 643  :                 avx2_memcpy<true>((uint8_t *)dstLine, (uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001d4	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  001d7	d1 e0		 shl	 eax, 1
  001d9	44 8b c0	 mov	 r8d, eax
  001dc	48 8b 55 58	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001e0	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e4	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 644  :             } else {

  001e9	e9 a8 00 00 00	 jmp	 $LN16@convert_yv
$LN15@convert_yv:

; 645  :                 uint16_t *src_ptr = srcYLine;

  001ee	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001f2	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax

; 646  :                 uint16_t *dst_ptr = dstLine;

  001f6	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001fa	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax

; 647  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  001fe	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$13[rbp], 0
  00208	eb 27		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020a	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR x$13[rbp]
  00210	83 c0 10	 add	 eax, 16
  00213	89 85 80 00 00
	00		 mov	 DWORD PTR x$13[rbp], eax
  00219	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax
  00225	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax
$LN7@convert_yv:
  00231	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  00234	39 85 80 00 00
	00		 cmp	 DWORD PTR x$13[rbp], eax
  0023a	7d 5a		 jge	 SHORT $LN6@convert_yv

; 648  :                     __m256i y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0023c	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00240	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00244	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0024c	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00254	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 649  :                     y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0025c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00264	c5 fd 71 f0 06	 vpsllw	 ymm0, ymm0, 6
  00269	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00271	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00279	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 650  :                     _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  00281	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  00285	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0028d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 651  :                 }

  00291	e9 74 ff ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN16@convert_yv:

; 652  :             }
; 653  :         }

  00296	e9 ff fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 654  :     }
; 655  :     //UV成分のコピー
; 656  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0029b	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0029e	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  002a5	2b c8		 sub	 ecx, eax
  002a7	8b c1		 mov	 eax, ecx
  002a9	d1 f8		 sar	 eax, 1
  002ab	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  002ae	d1 f9		 sar	 ecx, 1
  002b0	8b 94 24 e8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  002b7	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  002bb	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  002c3	44 8b c0	 mov	 r8d, eax
  002c6	8b d1		 mov	 edx, ecx
  002c8	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  002cf	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  002d4	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002db	48 8b f9	 mov	 rdi, rcx
  002de	48 8b f0	 mov	 rsi, rax
  002e1	b9 0c 00 00 00	 mov	 ecx, 12
  002e6	f3 a4		 rep movsb
  002e8	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  002ef	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002f6	48 8b f8	 mov	 rdi, rax
  002f9	48 8b f1	 mov	 rsi, rcx
  002fc	b9 0c 00 00 00	 mov	 ecx, 12
  00301	f3 a4		 rep movsb

; 657  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  00303	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0030a	d1 f8		 sar	 eax, 1
  0030c	89 85 38 01 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 658  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00312	b8 08 00 00 00	 mov	 eax, 8
  00317	48 6b c0 01	 imul	 rax, rax, 1
  0031b	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00321	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00328	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0032b	d1 fa		 sar	 edx, 1
  0032d	03 ca		 add	 ecx, edx
  0032f	48 63 c9	 movsxd	 rcx, ecx
  00332	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0033a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0033e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00342	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 659  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00349	b8 08 00 00 00	 mov	 eax, 8
  0034e	48 6b c0 02	 imul	 rax, rax, 2
  00352	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00358	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  0035f	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00362	d1 fa		 sar	 edx, 1
  00364	03 ca		 add	 ecx, edx
  00366	48 63 c9	 movsxd	 rcx, ecx
  00369	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00371	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00375	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00379	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 660  :     uint16_t *dstLine = (uint16_t *)dst[1] + dst_y_pitch * uv_range.start_dst;;

  00380	b8 08 00 00 00	 mov	 eax, 8
  00385	48 6b c0 01	 imul	 rax, rax, 1
  00389	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0038c	0f af 8d 0c 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00393	48 63 c9	 movsxd	 rcx, ecx
  00396	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0039e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003a2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003a6	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 661  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch) {

  003ad	c7 85 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$18[rbp], 0
  003b7	eb 56		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b9	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y$18[rbp]
  003bf	ff c0		 inc	 eax
  003c1	89 85 58 01 00
	00		 mov	 DWORD PTR y$18[rbp], eax
  003c7	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003ce	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  003d5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003d9	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  003e0	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003e7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  003ee	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003f2	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  003f9	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  003fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00404	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00408	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  0040f	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00415	39 85 58 01 00
	00		 cmp	 DWORD PTR y$18[rbp], eax
  0041b	0f 8d ff 01 00
	00		 jge	 $LN9@convert_yv

; 662  :         const int x_fin = width - crop_right;

  00421	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00424	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0042b	2b c8		 sub	 ecx, eax
  0042d	8b c1		 mov	 eax, ecx
  0042f	89 85 5c 01 00
	00		 mov	 DWORD PTR x_fin$19[rbp], eax

; 663  :         uint16_t *src_u_ptr = srcULine;

  00435	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0043c	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax

; 664  :         uint16_t *src_v_ptr = srcVLine;

  00443	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0044a	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax

; 665  :         uint16_t *dst_ptr = dstLine;

  00451	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00458	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax

; 666  :         __m256i y0, y1, y2;
; 667  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0045f	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00462	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00468	eb 45		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0046a	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR x$26[rbp]
  00470	83 c0 20	 add	 eax, 32			; 00000020H
  00473	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00479	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  00480	48 83 c0 20	 add	 rax, 32			; 00000020H
  00484	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax
  0048b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  00492	48 83 c0 20	 add	 rax, 32			; 00000020H
  00496	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax
  0049d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  004a4	48 83 c0 40	 add	 rax, 64			; 00000040H
  004a8	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax
$LN13@convert_yv:
  004af	8b 85 5c 01 00
	00		 mov	 eax, DWORD PTR x_fin$19[rbp]
  004b5	39 85 e0 01 00
	00		 cmp	 DWORD PTR x$26[rbp], eax
  004bb	0f 8d 5a 01 00
	00		 jge	 $LN12@convert_yv

; 668  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  004c1	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  004c8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004cc	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004d4	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004dc	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 669  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  004e4	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  004eb	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004ef	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004f7	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004ff	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 670  : 
; 671  :             if (in_bit_depth < 16) {

  00507	33 c0		 xor	 eax, eax
  00509	83 f8 01	 cmp	 eax, 1
  0050c	74 4a		 je	 SHORT $LN17@convert_yv

; 672  :                 y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0050e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  00516	c5 fd 71 f0 06	 vpsllw	 ymm0, ymm0, 6
  0051b	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  00523	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  0052b	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 673  :                 y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00533	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$24[rbp]
  0053b	c5 fd 71 f0 06	 vpsllw	 ymm0, ymm0, 6
  00540	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00548	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  00550	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0
$LN17@convert_yv:

; 674  :             }
; 675  : 
; 676  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00558	c4 e3 fd 00 85
	80 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$23[rbp], 216 ; 000000d8H
  00562	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0056a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00572	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 677  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  0057a	c4 e3 fd 00 85
	a0 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$24[rbp], 216 ; 000000d8H
  00584	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0058c	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00594	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 678  : 
; 679  :             y2 = _mm256_unpackhi_epi16(y0, y1);

  0059c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005a4	c5 fd 69 85 a0
	01 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005ac	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  005b4	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  005bc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$25[rbp], ymm0

; 680  :             y0 = _mm256_unpacklo_epi16(y0, y1);

  005c4	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005cc	c5 fd 61 85 a0
	01 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  005dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005e4	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 681  : 
; 682  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  005ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  005f3	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 683  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y2);

  005ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  00606	48 83 c0 20	 add	 rax, 32			; 00000020H
  0060a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$25[rbp]
  00612	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 684  :         }

  00616	e9 4f fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 685  :     }

  0061b	e9 99 fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 686  : }

  00620	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0062b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00630	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00637	48 33 cc	 xor	 rcx, rsp
  0063a	e8 00 00 00 00	 call	 __security_check_cookie
  0063f	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  00646	5f		 pop	 rdi
  00647	5e		 pop	 rsi
  00648	5d		 pop	 rbp
  00649	c3		 ret	 0
??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_p010_avx2_base<10,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_to_p010_avx2

; 701  : void convert_yv12_10_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 702  :     convert_yv12_high_to_p010_avx2_base<10, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_p010_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_p010_avx2_base<10,0>

; 703  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
src_ptr$11 = 112
dst_ptr$12 = 120
x$13 = 128
y0$14 = 160
$T15 = 192
$T16 = 224
uv_range$ = 264
$T17 = 296
src_uv_pitch$ = 312
srcULine$ = 320
srcVLine$ = 328
dstLine$ = 336
y$18 = 344
x_fin$19 = 348
src_u_ptr$20 = 352
src_v_ptr$21 = 360
dst_ptr$22 = 368
y0$23 = 384
y1$24 = 416
y2$25 = 448
x$26 = 480
$T27 = 512
$T28 = 544
$T29 = 576
$T30 = 608
$T31 = 640
$T32 = 672
$T33 = 704
$T34 = 736
$T35 = 776
$T36 = 792
__$ArrayPad$ = 808
dst$ = 928
src$ = 936
width$ = 944
src_y_pitch_byte$ = 952
src_uv_pitch_byte$ = 960
dst_y_pitch_byte$ = 968
height$ = 976
dst_height$ = 984
thread_id$ = 992
thread_n$ = 1000
crop$ = 1008
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_p010_avx2_base<12,0>

; 627  : static void __forceinline convert_yv12_high_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+928]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 628  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 629  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 630  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 631  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 632  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 633  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 b8 03
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 634  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 635  :     //Y成分のコピー
; 636  :     if (!uv_only) {

  000c3	33 c0		 xor	 eax, eax
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	0f 84 cd 01 00
	00		 je	 $LN14@convert_yv

; 637  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000d1	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e7	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000f5	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  000fc	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00101	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00105	48 8b f9	 mov	 rdi, rcx
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 0c 00 00 00	 mov	 ecx, 12
  00110	f3 a4		 rep movsb
  00112	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  00116	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0011a	48 8b f8	 mov	 rdi, rax
  0011d	48 8b f1	 mov	 rsi, rcx
  00120	b9 0c 00 00 00	 mov	 ecx, 12
  00125	f3 a4		 rep movsb

; 638  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 00	 imul	 rax, rax, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00133	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00137	48 63 c9	 movsxd	 rcx, ecx
  0013a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00142	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00146	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014a	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00152	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 639  :         uint16_t *dstLine = (uint16_t *)dst[0] + dst_y_pitch * y_range.start_dst;

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 00	 imul	 rax, rax, 0
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00162	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00166	48 63 c9	 movsxd	 rcx, ecx
  00169	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00171	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00175	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00179	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 640  :         const int y_width = width - crop_right - crop_left;

  0017d	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00180	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00187	2b c8		 sub	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018e	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 641  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00191	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00198	eb 28		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  0019d	ff c0		 inc	 eax
  0019f	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  001a2	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a6	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ae	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b2	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b6	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001ba	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001be	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001c2	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c5	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c8	0f 8d cd 00 00
	00		 jge	 $LN3@convert_yv

; 642  :             if (in_bit_depth == 16) {

  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	74 1a		 je	 SHORT $LN15@convert_yv

; 643  :                 avx2_memcpy<true>((uint8_t *)dstLine, (uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001d4	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  001d7	d1 e0		 shl	 eax, 1
  001d9	44 8b c0	 mov	 r8d, eax
  001dc	48 8b 55 58	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001e0	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e4	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 644  :             } else {

  001e9	e9 a8 00 00 00	 jmp	 $LN16@convert_yv
$LN15@convert_yv:

; 645  :                 uint16_t *src_ptr = srcYLine;

  001ee	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001f2	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax

; 646  :                 uint16_t *dst_ptr = dstLine;

  001f6	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001fa	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax

; 647  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  001fe	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$13[rbp], 0
  00208	eb 27		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020a	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR x$13[rbp]
  00210	83 c0 10	 add	 eax, 16
  00213	89 85 80 00 00
	00		 mov	 DWORD PTR x$13[rbp], eax
  00219	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax
  00225	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax
$LN7@convert_yv:
  00231	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  00234	39 85 80 00 00
	00		 cmp	 DWORD PTR x$13[rbp], eax
  0023a	7d 5a		 jge	 SHORT $LN6@convert_yv

; 648  :                     __m256i y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0023c	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00240	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00244	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0024c	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00254	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 649  :                     y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0025c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00264	c5 fd 71 f0 04	 vpsllw	 ymm0, ymm0, 4
  00269	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00271	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00279	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 650  :                     _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  00281	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  00285	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0028d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 651  :                 }

  00291	e9 74 ff ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN16@convert_yv:

; 652  :             }
; 653  :         }

  00296	e9 ff fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 654  :     }
; 655  :     //UV成分のコピー
; 656  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0029b	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0029e	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  002a5	2b c8		 sub	 ecx, eax
  002a7	8b c1		 mov	 eax, ecx
  002a9	d1 f8		 sar	 eax, 1
  002ab	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  002ae	d1 f9		 sar	 ecx, 1
  002b0	8b 94 24 e8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  002b7	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  002bb	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  002c3	44 8b c0	 mov	 r8d, eax
  002c6	8b d1		 mov	 edx, ecx
  002c8	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  002cf	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  002d4	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002db	48 8b f9	 mov	 rdi, rcx
  002de	48 8b f0	 mov	 rsi, rax
  002e1	b9 0c 00 00 00	 mov	 ecx, 12
  002e6	f3 a4		 rep movsb
  002e8	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  002ef	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002f6	48 8b f8	 mov	 rdi, rax
  002f9	48 8b f1	 mov	 rsi, rcx
  002fc	b9 0c 00 00 00	 mov	 ecx, 12
  00301	f3 a4		 rep movsb

; 657  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  00303	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0030a	d1 f8		 sar	 eax, 1
  0030c	89 85 38 01 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 658  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00312	b8 08 00 00 00	 mov	 eax, 8
  00317	48 6b c0 01	 imul	 rax, rax, 1
  0031b	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00321	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00328	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0032b	d1 fa		 sar	 edx, 1
  0032d	03 ca		 add	 ecx, edx
  0032f	48 63 c9	 movsxd	 rcx, ecx
  00332	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0033a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0033e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00342	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 659  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00349	b8 08 00 00 00	 mov	 eax, 8
  0034e	48 6b c0 02	 imul	 rax, rax, 2
  00352	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00358	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  0035f	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00362	d1 fa		 sar	 edx, 1
  00364	03 ca		 add	 ecx, edx
  00366	48 63 c9	 movsxd	 rcx, ecx
  00369	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00371	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00375	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00379	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 660  :     uint16_t *dstLine = (uint16_t *)dst[1] + dst_y_pitch * uv_range.start_dst;;

  00380	b8 08 00 00 00	 mov	 eax, 8
  00385	48 6b c0 01	 imul	 rax, rax, 1
  00389	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0038c	0f af 8d 0c 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00393	48 63 c9	 movsxd	 rcx, ecx
  00396	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0039e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003a2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003a6	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 661  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch) {

  003ad	c7 85 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$18[rbp], 0
  003b7	eb 56		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b9	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y$18[rbp]
  003bf	ff c0		 inc	 eax
  003c1	89 85 58 01 00
	00		 mov	 DWORD PTR y$18[rbp], eax
  003c7	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003ce	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  003d5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003d9	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  003e0	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003e7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  003ee	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003f2	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  003f9	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  003fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00404	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00408	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  0040f	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00415	39 85 58 01 00
	00		 cmp	 DWORD PTR y$18[rbp], eax
  0041b	0f 8d ff 01 00
	00		 jge	 $LN9@convert_yv

; 662  :         const int x_fin = width - crop_right;

  00421	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00424	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0042b	2b c8		 sub	 ecx, eax
  0042d	8b c1		 mov	 eax, ecx
  0042f	89 85 5c 01 00
	00		 mov	 DWORD PTR x_fin$19[rbp], eax

; 663  :         uint16_t *src_u_ptr = srcULine;

  00435	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0043c	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax

; 664  :         uint16_t *src_v_ptr = srcVLine;

  00443	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0044a	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax

; 665  :         uint16_t *dst_ptr = dstLine;

  00451	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00458	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax

; 666  :         __m256i y0, y1, y2;
; 667  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0045f	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00462	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00468	eb 45		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0046a	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR x$26[rbp]
  00470	83 c0 20	 add	 eax, 32			; 00000020H
  00473	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00479	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  00480	48 83 c0 20	 add	 rax, 32			; 00000020H
  00484	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax
  0048b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  00492	48 83 c0 20	 add	 rax, 32			; 00000020H
  00496	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax
  0049d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  004a4	48 83 c0 40	 add	 rax, 64			; 00000040H
  004a8	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax
$LN13@convert_yv:
  004af	8b 85 5c 01 00
	00		 mov	 eax, DWORD PTR x_fin$19[rbp]
  004b5	39 85 e0 01 00
	00		 cmp	 DWORD PTR x$26[rbp], eax
  004bb	0f 8d 5a 01 00
	00		 jge	 $LN12@convert_yv

; 668  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  004c1	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  004c8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004cc	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004d4	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004dc	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 669  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  004e4	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  004eb	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004ef	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004f7	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004ff	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 670  : 
; 671  :             if (in_bit_depth < 16) {

  00507	33 c0		 xor	 eax, eax
  00509	83 f8 01	 cmp	 eax, 1
  0050c	74 4a		 je	 SHORT $LN17@convert_yv

; 672  :                 y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0050e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  00516	c5 fd 71 f0 04	 vpsllw	 ymm0, ymm0, 4
  0051b	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  00523	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  0052b	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 673  :                 y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00533	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$24[rbp]
  0053b	c5 fd 71 f0 04	 vpsllw	 ymm0, ymm0, 4
  00540	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00548	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  00550	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0
$LN17@convert_yv:

; 674  :             }
; 675  : 
; 676  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00558	c4 e3 fd 00 85
	80 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$23[rbp], 216 ; 000000d8H
  00562	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0056a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00572	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 677  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  0057a	c4 e3 fd 00 85
	a0 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$24[rbp], 216 ; 000000d8H
  00584	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0058c	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00594	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 678  : 
; 679  :             y2 = _mm256_unpackhi_epi16(y0, y1);

  0059c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005a4	c5 fd 69 85 a0
	01 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005ac	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  005b4	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  005bc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$25[rbp], ymm0

; 680  :             y0 = _mm256_unpacklo_epi16(y0, y1);

  005c4	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005cc	c5 fd 61 85 a0
	01 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  005dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005e4	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 681  : 
; 682  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  005ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  005f3	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 683  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y2);

  005ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  00606	48 83 c0 20	 add	 rax, 32			; 00000020H
  0060a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$25[rbp]
  00612	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 684  :         }

  00616	e9 4f fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 685  :     }

  0061b	e9 99 fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 686  : }

  00620	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0062b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00630	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00637	48 33 cc	 xor	 rcx, rsp
  0063a	e8 00 00 00 00	 call	 __security_check_cookie
  0063f	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  00646	5f		 pop	 rdi
  00647	5e		 pop	 rsi
  00648	5d		 pop	 rbp
  00649	c3		 ret	 0
??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_p010_avx2_base<12,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_to_p010_avx2

; 697  : void convert_yv12_12_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 698  :     convert_yv12_high_to_p010_avx2_base<12, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_p010_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_p010_avx2_base<12,0>

; 699  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
src_ptr$11 = 112
dst_ptr$12 = 120
x$13 = 128
y0$14 = 160
$T15 = 192
$T16 = 224
uv_range$ = 264
$T17 = 296
src_uv_pitch$ = 312
srcULine$ = 320
srcVLine$ = 328
dstLine$ = 336
y$18 = 344
x_fin$19 = 348
src_u_ptr$20 = 352
src_v_ptr$21 = 360
dst_ptr$22 = 368
y0$23 = 384
y1$24 = 416
y2$25 = 448
x$26 = 480
$T27 = 512
$T28 = 544
$T29 = 576
$T30 = 608
$T31 = 640
$T32 = 672
$T33 = 704
$T34 = 736
$T35 = 776
$T36 = 792
__$ArrayPad$ = 808
dst$ = 928
src$ = 936
width$ = 944
src_y_pitch_byte$ = 952
src_uv_pitch_byte$ = 960
dst_y_pitch_byte$ = 968
height$ = 976
dst_height$ = 984
thread_id$ = 992
thread_n$ = 1000
crop$ = 1008
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_p010_avx2_base<14,0>

; 627  : static void __forceinline convert_yv12_high_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+928]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 628  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 629  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 630  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 631  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 632  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 633  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 b8 03
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 634  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 635  :     //Y成分のコピー
; 636  :     if (!uv_only) {

  000c3	33 c0		 xor	 eax, eax
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	0f 84 cd 01 00
	00		 je	 $LN14@convert_yv

; 637  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000d1	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e7	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000f5	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  000fc	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00101	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00105	48 8b f9	 mov	 rdi, rcx
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 0c 00 00 00	 mov	 ecx, 12
  00110	f3 a4		 rep movsb
  00112	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  00116	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0011a	48 8b f8	 mov	 rdi, rax
  0011d	48 8b f1	 mov	 rsi, rcx
  00120	b9 0c 00 00 00	 mov	 ecx, 12
  00125	f3 a4		 rep movsb

; 638  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 00	 imul	 rax, rax, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00133	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00137	48 63 c9	 movsxd	 rcx, ecx
  0013a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00142	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00146	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014a	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00152	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 639  :         uint16_t *dstLine = (uint16_t *)dst[0] + dst_y_pitch * y_range.start_dst;

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 00	 imul	 rax, rax, 0
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00162	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00166	48 63 c9	 movsxd	 rcx, ecx
  00169	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00171	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00175	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00179	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 640  :         const int y_width = width - crop_right - crop_left;

  0017d	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00180	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00187	2b c8		 sub	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018e	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 641  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00191	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00198	eb 28		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  0019d	ff c0		 inc	 eax
  0019f	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  001a2	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a6	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ae	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b2	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b6	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001ba	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001be	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001c2	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c5	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c8	0f 8d cd 00 00
	00		 jge	 $LN3@convert_yv

; 642  :             if (in_bit_depth == 16) {

  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	74 1a		 je	 SHORT $LN15@convert_yv

; 643  :                 avx2_memcpy<true>((uint8_t *)dstLine, (uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001d4	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  001d7	d1 e0		 shl	 eax, 1
  001d9	44 8b c0	 mov	 r8d, eax
  001dc	48 8b 55 58	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001e0	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e4	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 644  :             } else {

  001e9	e9 a8 00 00 00	 jmp	 $LN16@convert_yv
$LN15@convert_yv:

; 645  :                 uint16_t *src_ptr = srcYLine;

  001ee	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001f2	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax

; 646  :                 uint16_t *dst_ptr = dstLine;

  001f6	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001fa	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax

; 647  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  001fe	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$13[rbp], 0
  00208	eb 27		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020a	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR x$13[rbp]
  00210	83 c0 10	 add	 eax, 16
  00213	89 85 80 00 00
	00		 mov	 DWORD PTR x$13[rbp], eax
  00219	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax
  00225	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00229	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022d	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax
$LN7@convert_yv:
  00231	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  00234	39 85 80 00 00
	00		 cmp	 DWORD PTR x$13[rbp], eax
  0023a	7d 5a		 jge	 SHORT $LN6@convert_yv

; 648  :                     __m256i y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0023c	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00240	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00244	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0024c	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00254	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 649  :                     y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0025c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00264	c5 fd 71 f0 02	 vpsllw	 ymm0, ymm0, 2
  00269	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00271	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00279	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 650  :                     _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  00281	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  00285	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0028d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 651  :                 }

  00291	e9 74 ff ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN16@convert_yv:

; 652  :             }
; 653  :         }

  00296	e9 ff fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 654  :     }
; 655  :     //UV成分のコピー
; 656  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0029b	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0029e	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  002a5	2b c8		 sub	 ecx, eax
  002a7	8b c1		 mov	 eax, ecx
  002a9	d1 f8		 sar	 eax, 1
  002ab	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  002ae	d1 f9		 sar	 ecx, 1
  002b0	8b 94 24 e8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  002b7	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  002bb	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  002c3	44 8b c0	 mov	 r8d, eax
  002c6	8b d1		 mov	 edx, ecx
  002c8	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  002cf	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  002d4	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002db	48 8b f9	 mov	 rdi, rcx
  002de	48 8b f0	 mov	 rsi, rax
  002e1	b9 0c 00 00 00	 mov	 ecx, 12
  002e6	f3 a4		 rep movsb
  002e8	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  002ef	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002f6	48 8b f8	 mov	 rdi, rax
  002f9	48 8b f1	 mov	 rsi, rcx
  002fc	b9 0c 00 00 00	 mov	 ecx, 12
  00301	f3 a4		 rep movsb

; 657  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  00303	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0030a	d1 f8		 sar	 eax, 1
  0030c	89 85 38 01 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 658  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00312	b8 08 00 00 00	 mov	 eax, 8
  00317	48 6b c0 01	 imul	 rax, rax, 1
  0031b	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00321	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00328	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0032b	d1 fa		 sar	 edx, 1
  0032d	03 ca		 add	 ecx, edx
  0032f	48 63 c9	 movsxd	 rcx, ecx
  00332	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0033a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0033e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00342	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 659  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00349	b8 08 00 00 00	 mov	 eax, 8
  0034e	48 6b c0 02	 imul	 rax, rax, 2
  00352	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00358	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  0035f	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00362	d1 fa		 sar	 edx, 1
  00364	03 ca		 add	 ecx, edx
  00366	48 63 c9	 movsxd	 rcx, ecx
  00369	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00371	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00375	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00379	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 660  :     uint16_t *dstLine = (uint16_t *)dst[1] + dst_y_pitch * uv_range.start_dst;;

  00380	b8 08 00 00 00	 mov	 eax, 8
  00385	48 6b c0 01	 imul	 rax, rax, 1
  00389	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0038c	0f af 8d 0c 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00393	48 63 c9	 movsxd	 rcx, ecx
  00396	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0039e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003a2	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003a6	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 661  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch) {

  003ad	c7 85 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$18[rbp], 0
  003b7	eb 56		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003b9	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y$18[rbp]
  003bf	ff c0		 inc	 eax
  003c1	89 85 58 01 00
	00		 mov	 DWORD PTR y$18[rbp], eax
  003c7	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003ce	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  003d5	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003d9	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  003e0	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003e7	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  003ee	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003f2	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  003f9	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  003fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00404	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00408	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  0040f	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00415	39 85 58 01 00
	00		 cmp	 DWORD PTR y$18[rbp], eax
  0041b	0f 8d ff 01 00
	00		 jge	 $LN9@convert_yv

; 662  :         const int x_fin = width - crop_right;

  00421	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00424	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0042b	2b c8		 sub	 ecx, eax
  0042d	8b c1		 mov	 eax, ecx
  0042f	89 85 5c 01 00
	00		 mov	 DWORD PTR x_fin$19[rbp], eax

; 663  :         uint16_t *src_u_ptr = srcULine;

  00435	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0043c	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax

; 664  :         uint16_t *src_v_ptr = srcVLine;

  00443	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0044a	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax

; 665  :         uint16_t *dst_ptr = dstLine;

  00451	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00458	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax

; 666  :         __m256i y0, y1, y2;
; 667  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0045f	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00462	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00468	eb 45		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0046a	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR x$26[rbp]
  00470	83 c0 20	 add	 eax, 32			; 00000020H
  00473	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00479	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  00480	48 83 c0 20	 add	 rax, 32			; 00000020H
  00484	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax
  0048b	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  00492	48 83 c0 20	 add	 rax, 32			; 00000020H
  00496	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax
  0049d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  004a4	48 83 c0 40	 add	 rax, 64			; 00000040H
  004a8	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax
$LN13@convert_yv:
  004af	8b 85 5c 01 00
	00		 mov	 eax, DWORD PTR x_fin$19[rbp]
  004b5	39 85 e0 01 00
	00		 cmp	 DWORD PTR x$26[rbp], eax
  004bb	0f 8d 5a 01 00
	00		 jge	 $LN12@convert_yv

; 668  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  004c1	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  004c8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004cc	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004d4	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004dc	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 669  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  004e4	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  004eb	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004ef	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004f7	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004ff	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 670  : 
; 671  :             if (in_bit_depth < 16) {

  00507	33 c0		 xor	 eax, eax
  00509	83 f8 01	 cmp	 eax, 1
  0050c	74 4a		 je	 SHORT $LN17@convert_yv

; 672  :                 y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0050e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  00516	c5 fd 71 f0 02	 vpsllw	 ymm0, ymm0, 2
  0051b	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  00523	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  0052b	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 673  :                 y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00533	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$24[rbp]
  0053b	c5 fd 71 f0 02	 vpsllw	 ymm0, ymm0, 2
  00540	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00548	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  00550	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0
$LN17@convert_yv:

; 674  :             }
; 675  : 
; 676  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00558	c4 e3 fd 00 85
	80 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$23[rbp], 216 ; 000000d8H
  00562	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0056a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00572	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 677  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  0057a	c4 e3 fd 00 85
	a0 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$24[rbp], 216 ; 000000d8H
  00584	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0058c	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00594	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 678  : 
; 679  :             y2 = _mm256_unpackhi_epi16(y0, y1);

  0059c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005a4	c5 fd 69 85 a0
	01 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005ac	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  005b4	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  005bc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$25[rbp], ymm0

; 680  :             y0 = _mm256_unpacklo_epi16(y0, y1);

  005c4	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005cc	c5 fd 61 85 a0
	01 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  005dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005e4	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 681  : 
; 682  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  005ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  005f3	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 683  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y2);

  005ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  00606	48 83 c0 20	 add	 rax, 32			; 00000020H
  0060a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$25[rbp]
  00612	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 684  :         }

  00616	e9 4f fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 685  :     }

  0061b	e9 99 fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 686  : }

  00620	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0062b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00630	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00637	48 33 cc	 xor	 rcx, rsp
  0063a	e8 00 00 00 00	 call	 __security_check_cookie
  0063f	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  00646	5f		 pop	 rdi
  00647	5e		 pop	 rsi
  00648	5d		 pop	 rbp
  00649	c3		 ret	 0
??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_p010_avx2_base<14,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_to_p010_avx2

; 693  : void convert_yv12_14_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 694  :     convert_yv12_high_to_p010_avx2_base<14, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_p010_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_p010_avx2_base<14,0>

; 695  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
dst_y_pitch$ = 20
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
src_ptr$11 = 112
dst_ptr$12 = 120
x$13 = 128
y0$14 = 160
$T15 = 192
$T16 = 224
uv_range$ = 264
$T17 = 296
src_uv_pitch$ = 312
srcULine$ = 320
srcVLine$ = 328
dstLine$ = 336
y$18 = 344
x_fin$19 = 348
src_u_ptr$20 = 352
src_v_ptr$21 = 360
dst_ptr$22 = 368
y0$23 = 384
y1$24 = 416
y2$25 = 448
x$26 = 480
$T27 = 512
$T28 = 544
$T29 = 576
$T30 = 608
$T31 = 640
$T32 = 672
$T33 = 704
$T34 = 736
$T35 = 776
$T36 = 792
__$ArrayPad$ = 808
dst$ = 928
src$ = 936
width$ = 944
src_y_pitch_byte$ = 952
src_uv_pitch_byte$ = 960
dst_y_pitch_byte$ = 968
height$ = 976
dst_height$ = 984
thread_id$ = 992
thread_n$ = 1000
crop$ = 1008
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_p010_avx2_base<16,0>

; 627  : static void __forceinline convert_yv12_high_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+928]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 628  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 629  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 630  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 631  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 632  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 633  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 b8 03
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 634  :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000b7	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000be	d1 f8		 sar	 eax, 1
  000c0	89 45 14	 mov	 DWORD PTR dst_y_pitch$[rbp], eax

; 635  :     //Y成分のコピー
; 636  :     if (!uv_only) {

  000c3	33 c0		 xor	 eax, eax
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	0f 84 ce 01 00
	00		 je	 $LN14@convert_yv

; 637  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ce	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000d1	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000e3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000e7	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000ef	44 8b c0	 mov	 r8d, eax
  000f2	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000f5	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T35[rbp]
  000fc	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00101	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00105	48 8b f9	 mov	 rdi, rcx
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 0c 00 00 00	 mov	 ecx, 12
  00110	f3 a4		 rep movsb
  00112	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  00116	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0011a	48 8b f8	 mov	 rdi, rax
  0011d	48 8b f1	 mov	 rsi, rcx
  00120	b9 0c 00 00 00	 mov	 ecx, 12
  00125	f3 a4		 rep movsb

; 638  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 00	 imul	 rax, rax, 0
  00130	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00133	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00137	48 63 c9	 movsxd	 rcx, ecx
  0013a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00142	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00146	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014a	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  0014e	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00152	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 639  :         uint16_t *dstLine = (uint16_t *)dst[0] + dst_y_pitch * y_range.start_dst;

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 00	 imul	 rax, rax, 0
  0015f	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  00162	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00166	48 63 c9	 movsxd	 rcx, ecx
  00169	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00171	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00175	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00179	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 640  :         const int y_width = width - crop_right - crop_left;

  0017d	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00180	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00187	2b c8		 sub	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018e	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 641  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch) {

  00191	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00198	eb 28		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  0019a	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  0019d	ff c0		 inc	 eax
  0019f	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  001a2	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  001a6	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001aa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001ae	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b2	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  001b6	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001ba	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001be	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001c2	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c5	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c8	0f 8d ce 00 00
	00		 jge	 $LN3@convert_yv

; 642  :             if (in_bit_depth == 16) {

  001ce	33 c0		 xor	 eax, eax
  001d0	83 f8 01	 cmp	 eax, 1
  001d3	74 1a		 je	 SHORT $LN15@convert_yv

; 643  :                 avx2_memcpy<true>((uint8_t *)dstLine, (uint8_t *)srcYLine, y_width * (int)sizeof(uint16_t));

  001d5	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  001d8	d1 e0		 shl	 eax, 1
  001da	44 8b c0	 mov	 r8d, eax
  001dd	48 8b 55 58	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001e1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e5	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 644  :             } else {

  001ea	e9 a8 00 00 00	 jmp	 $LN16@convert_yv
$LN15@convert_yv:

; 645  :                 uint16_t *src_ptr = srcYLine;

  001ef	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001f3	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax

; 646  :                 uint16_t *dst_ptr = dstLine;

  001f7	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001fb	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax

; 647  :                 for (int x = 0; x < y_width; x += 16, dst_ptr += 16, src_ptr += 16) {

  001ff	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR x$13[rbp], 0
  00209	eb 27		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  0020b	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR x$13[rbp]
  00211	83 c0 10	 add	 eax, 16
  00214	89 85 80 00 00
	00		 mov	 DWORD PTR x$13[rbp], eax
  0021a	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  0021e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00222	48 89 45 78	 mov	 QWORD PTR dst_ptr$12[rbp], rax
  00226	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  0022a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0022e	48 89 45 70	 mov	 QWORD PTR src_ptr$11[rbp], rax
$LN7@convert_yv:
  00232	8b 45 68	 mov	 eax, DWORD PTR y_width$9[rbp]
  00235	39 85 80 00 00
	00		 cmp	 DWORD PTR x$13[rbp], eax
  0023b	7d 5a		 jge	 SHORT $LN6@convert_yv

; 648  :                     __m256i y0 = _mm256_loadu_si256((const __m256i *)src_ptr);

  0023d	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr$11[rbp]
  00241	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00245	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T15[rbp], ymm0
  0024d	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T15[rbp]
  00255	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 649  :                     y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0025d	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00265	c5 fd 71 f0 00	 vpsllw	 ymm0, ymm0, 0
  0026a	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  00272	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  0027a	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 650  :                     _mm256_storeu_si256((__m256i *)dst_ptr, y0);

  00282	48 8b 45 78	 mov	 rax, QWORD PTR dst_ptr$12[rbp]
  00286	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0028e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 651  :                 }

  00292	e9 74 ff ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:
$LN16@convert_yv:

; 652  :             }
; 653  :         }

  00297	e9 fe fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 654  :     }
; 655  :     //UV成分のコピー
; 656  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0029c	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0029f	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  002a6	2b c8		 sub	 ecx, eax
  002a8	8b c1		 mov	 eax, ecx
  002aa	d1 f8		 sar	 eax, 1
  002ac	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  002af	d1 f9		 sar	 ecx, 1
  002b1	8b 94 24 e8 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  002b8	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  002bc	44 8b 8c 24 e0
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  002c4	44 8b c0	 mov	 r8d, eax
  002c7	8b d1		 mov	 edx, ecx
  002c9	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T36[rbp]
  002d0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  002d5	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002dc	48 8b f9	 mov	 rdi, rcx
  002df	48 8b f0	 mov	 rsi, rax
  002e2	b9 0c 00 00 00	 mov	 ecx, 12
  002e7	f3 a4		 rep movsb
  002e9	48 8d 85 08 01
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  002f0	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  002f7	48 8b f8	 mov	 rdi, rax
  002fa	48 8b f1	 mov	 rsi, rcx
  002fd	b9 0c 00 00 00	 mov	 ecx, 12
  00302	f3 a4		 rep movsb

; 657  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  00304	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  0030b	d1 f8		 sar	 eax, 1
  0030d	89 85 38 01 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 658  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00313	b8 08 00 00 00	 mov	 eax, 8
  00318	48 6b c0 01	 imul	 rax, rax, 1
  0031c	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00322	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00329	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0032c	d1 fa		 sar	 edx, 1
  0032e	03 ca		 add	 ecx, edx
  00330	48 63 c9	 movsxd	 rcx, ecx
  00333	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0033b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0033f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00343	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 659  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  0034a	b8 08 00 00 00	 mov	 eax, 8
  0034f	48 6b c0 02	 imul	 rax, rax, 2
  00353	8b 8d 38 01 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00359	0f af 8d 08 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00360	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00363	d1 fa		 sar	 edx, 1
  00365	03 ca		 add	 ecx, edx
  00367	48 63 c9	 movsxd	 rcx, ecx
  0036a	48 8b 94 24 a8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00372	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00376	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0037a	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 660  :     uint16_t *dstLine = (uint16_t *)dst[1] + dst_y_pitch * uv_range.start_dst;;

  00381	b8 08 00 00 00	 mov	 eax, 8
  00386	48 6b c0 01	 imul	 rax, rax, 1
  0038a	8b 4d 14	 mov	 ecx, DWORD PTR dst_y_pitch$[rbp]
  0038d	0f af 8d 0c 01
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00394	48 63 c9	 movsxd	 rcx, ecx
  00397	48 8b 94 24 a0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0039f	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003a3	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  003a7	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 661  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch) {

  003ae	c7 85 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$18[rbp], 0
  003b8	eb 56		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003ba	8b 85 58 01 00
	00		 mov	 eax, DWORD PTR y$18[rbp]
  003c0	ff c0		 inc	 eax
  003c2	89 85 58 01 00
	00		 mov	 DWORD PTR y$18[rbp], eax
  003c8	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003cf	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  003d6	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003da	48 89 85 40 01
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  003e1	48 63 85 38 01
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  003e8	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  003ef	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003f3	48 89 85 48 01
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  003fa	48 63 45 14	 movsxd	 rax, DWORD PTR dst_y_pitch$[rbp]
  003fe	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00405	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00409	48 89 85 50 01
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  00410	8b 85 10 01 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00416	39 85 58 01 00
	00		 cmp	 DWORD PTR y$18[rbp], eax
  0041c	0f 8d fe 01 00
	00		 jge	 $LN9@convert_yv

; 662  :         const int x_fin = width - crop_right;

  00422	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00425	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0042c	2b c8		 sub	 ecx, eax
  0042e	8b c1		 mov	 eax, ecx
  00430	89 85 5c 01 00
	00		 mov	 DWORD PTR x_fin$19[rbp], eax

; 663  :         uint16_t *src_u_ptr = srcULine;

  00436	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0043d	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax

; 664  :         uint16_t *src_v_ptr = srcVLine;

  00444	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0044b	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax

; 665  :         uint16_t *dst_ptr = dstLine;

  00452	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00459	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax

; 666  :         __m256i y0, y1, y2;
; 667  :         for (int x = crop_left; x < x_fin; x += 32, src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  00460	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00463	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  00469	eb 45		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0046b	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR x$26[rbp]
  00471	83 c0 20	 add	 eax, 32			; 00000020H
  00474	89 85 e0 01 00
	00		 mov	 DWORD PTR x$26[rbp], eax
  0047a	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  00481	48 83 c0 20	 add	 rax, 32			; 00000020H
  00485	48 89 85 60 01
	00 00		 mov	 QWORD PTR src_u_ptr$20[rbp], rax
  0048c	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  00493	48 83 c0 20	 add	 rax, 32			; 00000020H
  00497	48 89 85 68 01
	00 00		 mov	 QWORD PTR src_v_ptr$21[rbp], rax
  0049e	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  004a5	48 83 c0 40	 add	 rax, 64			; 00000040H
  004a9	48 89 85 70 01
	00 00		 mov	 QWORD PTR dst_ptr$22[rbp], rax
$LN13@convert_yv:
  004b0	8b 85 5c 01 00
	00		 mov	 eax, DWORD PTR x_fin$19[rbp]
  004b6	39 85 e0 01 00
	00		 cmp	 DWORD PTR x$26[rbp], eax
  004bc	0f 8d 59 01 00
	00		 jge	 $LN12@convert_yv

; 668  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  004c2	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR src_u_ptr$20[rbp]
  004c9	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004cd	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004d5	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004dd	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 669  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  004e5	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR src_v_ptr$21[rbp]
  004ec	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  004f0	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004f8	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  00500	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 670  : 
; 671  :             if (in_bit_depth < 16) {

  00508	33 c0		 xor	 eax, eax
  0050a	85 c0		 test	 eax, eax
  0050c	74 4a		 je	 SHORT $LN17@convert_yv

; 672  :                 y0 = _mm256_slli_epi16(y0, 16 - in_bit_depth);

  0050e	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  00516	c5 fd 71 f0 00	 vpsllw	 ymm0, ymm0, 0
  0051b	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  00523	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  0052b	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 673  :                 y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00533	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$24[rbp]
  0053b	c5 fd 71 f0 00	 vpsllw	 ymm0, ymm0, 0
  00540	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  00548	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  00550	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0
$LN17@convert_yv:

; 674  :             }
; 675  : 
; 676  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00558	c4 e3 fd 00 85
	80 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$23[rbp], 216 ; 000000d8H
  00562	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  0056a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00572	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 677  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  0057a	c4 e3 fd 00 85
	a0 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$24[rbp], 216 ; 000000d8H
  00584	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0058c	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00594	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR y1$24[rbp], ymm0

; 678  : 
; 679  :             y2 = _mm256_unpackhi_epi16(y0, y1);

  0059c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005a4	c5 fd 69 85 a0
	01 00 00	 vpunpckhwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005ac	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  005b4	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  005bc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y2$25[rbp], ymm0

; 680  :             y0 = _mm256_unpacklo_epi16(y0, y1);

  005c4	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005cc	c5 fd 61 85 a0
	01 00 00	 vpunpcklwd ymm0, ymm0, YMMWORD PTR y1$24[rbp]
  005d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  005dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005e4	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR y0$23[rbp], ymm0

; 681  : 
; 682  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  005ec	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  005f3	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$23[rbp]
  005fb	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 683  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y2);

  005ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR dst_ptr$22[rbp]
  00606	48 83 c0 20	 add	 rax, 32			; 00000020H
  0060a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$25[rbp]
  00612	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 684  :         }

  00616	e9 50 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 685  :     }

  0061b	e9 9a fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 686  : }

  00620	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0062b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00630	48 8b 8d 28 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00637	48 33 cc	 xor	 rcx, rsp
  0063a	e8 00 00 00 00	 call	 __security_check_cookie
  0063f	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  00646	5f		 pop	 rdi
  00647	5e		 pop	 rsi
  00648	5d		 pop	 rbp
  00649	c3		 ret	 0
??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_p010_avx2_base<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_to_p010_avx2

; 689  : void convert_yv12_16_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 690  :     convert_yv12_high_to_p010_avx2_base<16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_p010_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_p010_avx2_base<16,0>

; 691  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
dst_ptr$11 = 112
src_ptr$12 = 120
src_ptr_fin$13 = 128
y0$14 = 160
y1$15 = 192
$T16 = 224
$T17 = 256
$T18 = 288
$T19 = 320
$T20 = 352
$T21 = 384
$T22 = 416
$T23 = 448
$T24 = 480
$T25 = 512
$T26 = 544
uv_range$ = 584
$T27 = 616
src_uv_pitch$ = 632
srcULine$ = 640
srcVLine$ = 648
dstLine$ = 656
y$28 = 664
x_fin$29 = 668
src_u_ptr$30 = 672
src_v_ptr$31 = 680
dst_ptr$32 = 688
dst_ptr_fin$33 = 696
y0$34 = 704
y1$35 = 736
$T36 = 768
$T37 = 800
$T38 = 832
$T39 = 864
xMaskHighByte$40 = 896
$T41 = 928
$T42 = 960
$T43 = 992
$T44 = 1024
$T45 = 1056
$T46 = 1088
$T47 = 1128
$T48 = 1144
__$ArrayPad$ = 1160
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_nv12_avx2_base<9,0>

; 542  : static void convert_yv12_high_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 88 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 543  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 544  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 545  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 546  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 547  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 548  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 18 05
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 549  :     //Y成分のコピー
; 550  :     if (!uv_only) {

  000b7	33 c0		 xor	 eax, eax
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	0f 84 a3 02 00
	00		 je	 $LN14@convert_yv

; 551  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c5	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000db	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e3	44 8b c0	 mov	 r8d, eax
  000e6	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000e9	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  000f0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000f9	48 8b f9	 mov	 rdi, rcx
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 0c 00 00 00	 mov	 ecx, 12
  00104	f3 a4		 rep movsb
  00106	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  0010a	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 552  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 00	 imul	 rax, rax, 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00127	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  0012b	48 63 c9	 movsxd	 rcx, ecx
  0012e	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00136	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0013a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013e	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00142	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00146	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 553  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;;

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  0015e	48 63 c9	 movsxd	 rcx, ecx
  00161	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00169	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016d	48 8b c1	 mov	 rax, rcx
  00170	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 554  :         const int y_width = width - crop_right - crop_left;

  00174	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00177	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00185	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 555  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  00188	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  0018f	eb 2e		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00191	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  00194	ff c0		 inc	 eax
  00196	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  00199	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  0019d	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001a1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a5	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a9	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bf	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c2	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c5	0f 8d 9a 01 00
	00		 jge	 $LN3@convert_yv

; 556  :             uint8_t *dst_ptr = dstLine;

  001cb	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cf	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 557  :             uint16_t *src_ptr = srcYLine;

  001d3	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d7	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 558  :             uint16_t *src_ptr_fin = src_ptr + y_width;

  001db	48 63 45 68	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001df	48 8b 4d 78	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 85 80 00
	00 00		 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 559  :             __m256i y0, y1;
; 560  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001ee	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001f0	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001f8	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001fc	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00200	48 83 c0 40	 add	 rax, 64			; 00000040H
  00204	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00208	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  0020f	48 39 45 78	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  00213	0f 83 47 01 00
	00		 jae	 $LN6@convert_yv

; 561  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 16)), _mm_loadu_si128((__m128i*)(src_ptr +  0)));

  00219	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00225	66 0f 7f 85 20
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0022d	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00231	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00235	66 0f 7f 85 e0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0023d	c5 f8 10 85 e0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00245	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0024d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00255	c4 e3 7d 18 85
	20 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0025f	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 562  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 24)), _mm_loadu_si128((__m128i*)(src_ptr +  8)));

  00277	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0027b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0027f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00283	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  0028b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0028f	48 83 c0 10	 add	 rax, 16
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  0029f	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002a7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002af	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b7	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  002c1	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002c9	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002d1	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 563  : 
; 564  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002d9	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002e1	c5 fd 71 d0 01	 vpsrlw	 ymm0, ymm0, 1
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  002f6	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 565  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  002fe	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00306	c5 fd 71 d0 01	 vpsrlw	 ymm0, ymm0, 1
  0030b	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00313	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0031b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 566  : 
; 567  :                 y0 = _mm256_packus_epi16(y0, y1);

  00323	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0032b	c5 fd 67 85 c0
	00 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$15[rbp]
  00333	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0033b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00343	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 568  : 
; 569  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 0), y0);

  0034b	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0034f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00357	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 570  :             }

  0035b	e9 90 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 571  :         }

  00360	e9 2c fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 572  :     }
; 573  :     //UV成分のコピー
; 574  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00365	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00368	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0036f	2b c8		 sub	 ecx, eax
  00371	8b c1		 mov	 eax, ecx
  00373	d1 f8		 sar	 eax, 1
  00375	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00378	d1 f9		 sar	 ecx, 1
  0037a	8b 94 24 48 05
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00381	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00385	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0038d	44 8b c0	 mov	 r8d, eax
  00390	8b d1		 mov	 edx, ecx
  00392	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00399	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0039e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003a5	48 8b f9	 mov	 rdi, rcx
  003a8	48 8b f0	 mov	 rsi, rax
  003ab	b9 0c 00 00 00	 mov	 ecx, 12
  003b0	f3 a4		 rep movsb
  003b2	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b9	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003c0	48 8b f8	 mov	 rdi, rax
  003c3	48 8b f1	 mov	 rsi, rcx
  003c6	b9 0c 00 00 00	 mov	 ecx, 12
  003cb	f3 a4		 rep movsb

; 575  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  003cd	8b 84 24 20 05
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  003d4	d1 f8		 sar	 eax, 1
  003d6	89 85 78 02 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 576  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  003eb	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003f2	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003f5	d1 fa		 sar	 edx, 1
  003f7	03 ca		 add	 ecx, edx
  003f9	48 63 c9	 movsxd	 rcx, ecx
  003fc	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00404	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00408	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0040c	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 577  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00413	b8 08 00 00 00	 mov	 eax, 8
  00418	48 6b c0 02	 imul	 rax, rax, 2
  0041c	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00422	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00429	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0042c	d1 fa		 sar	 edx, 1
  0042e	03 ca		 add	 ecx, edx
  00430	48 63 c9	 movsxd	 rcx, ecx
  00433	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0043b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0043f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00443	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 578  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 01	 imul	 rax, rax, 1
  00453	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0045a	0f af 8d 4c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00461	48 63 c9	 movsxd	 rcx, ecx
  00464	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0046c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 579  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch_byte) {

  0047a	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$28[rbp], 0
  00484	eb 5c		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00486	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR y$28[rbp]
  0048c	ff c0		 inc	 eax
  0048e	89 85 98 02 00
	00		 mov	 DWORD PTR y$28[rbp], eax
  00494	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  0049b	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  004a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a6	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  004ad	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  004b4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004bf	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004c6	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ce	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004d5	48 03 c8	 add	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004e2	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004e8	39 85 98 02 00
	00		 cmp	 DWORD PTR y$28[rbp], eax
  004ee	0f 8d f7 01 00
	00		 jge	 $LN9@convert_yv

; 580  :         const int x_fin = width - crop_right;

  004f4	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004f7	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	89 85 9c 02 00
	00		 mov	 DWORD PTR x_fin$29[rbp], eax

; 581  :         uint16_t *src_u_ptr = srcULine;

  00508	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0050f	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax

; 582  :         uint16_t *src_v_ptr = srcVLine;

  00516	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0051d	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax

; 583  :         uint8_t *dst_ptr = dstLine;

  00524	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0052b	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax

; 584  :         uint8_t *dst_ptr_fin = dst_ptr + x_fin;

  00532	48 63 85 9c 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$29[rbp]
  00539	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$32[rbp]
  00540	48 03 c8	 add	 rcx, rax
  00543	48 8b c1	 mov	 rax, rcx
  00546	48 89 85 b8 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$33[rbp], rax

; 585  :         __m256i y0, y1;
; 586  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0054d	eb 36		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0054f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  00556	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055a	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax
  00561	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  00568	48 83 c0 20	 add	 rax, 32			; 00000020H
  0056c	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax
  00573	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  0057a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0057e	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax
$LN13@convert_yv:
  00585	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$33[rbp]
  0058c	48 39 85 b0 02
	00 00		 cmp	 QWORD PTR dst_ptr$32[rbp], rax
  00593	0f 83 4d 01 00
	00		 jae	 $LN12@convert_yv

; 587  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00599	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  005a0	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005a4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005ac	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005b4	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 588  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005bc	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  005c3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005c7	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  005cf	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005d7	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 589  : 
; 590  :             y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  005df	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  005e7	c5 fd 71 d0 01	 vpsrlw	 ymm0, ymm0, 1
  005ec	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005f4	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005fc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 591  :             y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00604	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  0060c	c5 fd 71 f0 07	 vpsllw	 ymm0, ymm0, 7
  00611	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  00619	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  00621	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 592  :             const __m256i xMaskHighByte = _mm256_slli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00629	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0062d	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00635	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00639	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00641	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00649	c5 fd 74 85 c0
	03 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T42[rbp]
  00651	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  00659	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00661	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00666	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  0066e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  00676	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR xMaskHighByte$40[rbp], ymm0

; 593  :             y1 = _mm256_and_si256(y1, xMaskHighByte);

  0067e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  00686	c5 fd db 85 80
	03 00 00	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskHighByte$40[rbp]
  0068e	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  00696	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  0069e	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 594  : 
; 595  :             y0 = _mm256_or_si256(y0, y1);

  006a6	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006ae	c5 fd eb 85 e0
	02 00 00	 vpor	 ymm0, ymm0, YMMWORD PTR y1$35[rbp]
  006b6	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006be	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006c6	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 596  : 
; 597  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  006ce	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  006d5	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006dd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 598  :         }

  006e1	e9 69 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 599  :     }

  006e6	e9 9b fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 600  : }

  006eb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006f6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006fb	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00702	48 33 cc	 xor	 rcx, rsp
  00705	e8 00 00 00 00	 call	 __security_check_cookie
  0070a	48 81 c4 e0 04
	00 00		 add	 rsp, 1248		; 000004e0H
  00711	5f		 pop	 rdi
  00712	5e		 pop	 rsi
  00713	5d		 pop	 rbp
  00714	c3		 ret	 0
??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_nv12_avx2_base<9,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_09_to_nv12_avx2

; 619  : void convert_yv12_09_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 620  :     convert_yv12_high_to_nv12_avx2_base<9, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_nv12_avx2_base@$08$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_nv12_avx2_base<9,0>

; 621  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_09_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_09_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
dst_ptr$11 = 112
src_ptr$12 = 120
src_ptr_fin$13 = 128
y0$14 = 160
y1$15 = 192
$T16 = 224
$T17 = 256
$T18 = 288
$T19 = 320
$T20 = 352
$T21 = 384
$T22 = 416
$T23 = 448
$T24 = 480
$T25 = 512
$T26 = 544
uv_range$ = 584
$T27 = 616
src_uv_pitch$ = 632
srcULine$ = 640
srcVLine$ = 648
dstLine$ = 656
y$28 = 664
x_fin$29 = 668
src_u_ptr$30 = 672
src_v_ptr$31 = 680
dst_ptr$32 = 688
dst_ptr_fin$33 = 696
y0$34 = 704
y1$35 = 736
$T36 = 768
$T37 = 800
$T38 = 832
$T39 = 864
xMaskHighByte$40 = 896
$T41 = 928
$T42 = 960
$T43 = 992
$T44 = 1024
$T45 = 1056
$T46 = 1088
$T47 = 1128
$T48 = 1144
__$ArrayPad$ = 1160
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_nv12_avx2_base<10,0>

; 542  : static void convert_yv12_high_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 88 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 543  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 544  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 545  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 546  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 547  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 548  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 18 05
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 549  :     //Y成分のコピー
; 550  :     if (!uv_only) {

  000b7	33 c0		 xor	 eax, eax
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	0f 84 a3 02 00
	00		 je	 $LN14@convert_yv

; 551  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c5	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000db	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e3	44 8b c0	 mov	 r8d, eax
  000e6	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000e9	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  000f0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000f9	48 8b f9	 mov	 rdi, rcx
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 0c 00 00 00	 mov	 ecx, 12
  00104	f3 a4		 rep movsb
  00106	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  0010a	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 552  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 00	 imul	 rax, rax, 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00127	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  0012b	48 63 c9	 movsxd	 rcx, ecx
  0012e	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00136	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0013a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013e	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00142	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00146	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 553  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;;

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  0015e	48 63 c9	 movsxd	 rcx, ecx
  00161	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00169	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016d	48 8b c1	 mov	 rax, rcx
  00170	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 554  :         const int y_width = width - crop_right - crop_left;

  00174	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00177	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00185	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 555  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  00188	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  0018f	eb 2e		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00191	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  00194	ff c0		 inc	 eax
  00196	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  00199	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  0019d	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001a1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a5	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a9	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bf	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c2	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c5	0f 8d 9a 01 00
	00		 jge	 $LN3@convert_yv

; 556  :             uint8_t *dst_ptr = dstLine;

  001cb	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cf	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 557  :             uint16_t *src_ptr = srcYLine;

  001d3	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d7	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 558  :             uint16_t *src_ptr_fin = src_ptr + y_width;

  001db	48 63 45 68	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001df	48 8b 4d 78	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 85 80 00
	00 00		 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 559  :             __m256i y0, y1;
; 560  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001ee	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001f0	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001f8	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001fc	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00200	48 83 c0 40	 add	 rax, 64			; 00000040H
  00204	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00208	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  0020f	48 39 45 78	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  00213	0f 83 47 01 00
	00		 jae	 $LN6@convert_yv

; 561  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 16)), _mm_loadu_si128((__m128i*)(src_ptr +  0)));

  00219	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00225	66 0f 7f 85 20
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0022d	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00231	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00235	66 0f 7f 85 e0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0023d	c5 f8 10 85 e0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00245	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0024d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00255	c4 e3 7d 18 85
	20 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0025f	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 562  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 24)), _mm_loadu_si128((__m128i*)(src_ptr +  8)));

  00277	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0027b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0027f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00283	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  0028b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0028f	48 83 c0 10	 add	 rax, 16
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  0029f	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002a7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002af	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b7	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  002c1	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002c9	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002d1	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 563  : 
; 564  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002d9	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002e1	c5 fd 71 d0 02	 vpsrlw	 ymm0, ymm0, 2
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  002f6	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 565  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  002fe	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00306	c5 fd 71 d0 02	 vpsrlw	 ymm0, ymm0, 2
  0030b	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00313	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0031b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 566  : 
; 567  :                 y0 = _mm256_packus_epi16(y0, y1);

  00323	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0032b	c5 fd 67 85 c0
	00 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$15[rbp]
  00333	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0033b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00343	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 568  : 
; 569  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 0), y0);

  0034b	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0034f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00357	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 570  :             }

  0035b	e9 90 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 571  :         }

  00360	e9 2c fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 572  :     }
; 573  :     //UV成分のコピー
; 574  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00365	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00368	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0036f	2b c8		 sub	 ecx, eax
  00371	8b c1		 mov	 eax, ecx
  00373	d1 f8		 sar	 eax, 1
  00375	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00378	d1 f9		 sar	 ecx, 1
  0037a	8b 94 24 48 05
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00381	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00385	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0038d	44 8b c0	 mov	 r8d, eax
  00390	8b d1		 mov	 edx, ecx
  00392	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00399	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0039e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003a5	48 8b f9	 mov	 rdi, rcx
  003a8	48 8b f0	 mov	 rsi, rax
  003ab	b9 0c 00 00 00	 mov	 ecx, 12
  003b0	f3 a4		 rep movsb
  003b2	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b9	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003c0	48 8b f8	 mov	 rdi, rax
  003c3	48 8b f1	 mov	 rsi, rcx
  003c6	b9 0c 00 00 00	 mov	 ecx, 12
  003cb	f3 a4		 rep movsb

; 575  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  003cd	8b 84 24 20 05
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  003d4	d1 f8		 sar	 eax, 1
  003d6	89 85 78 02 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 576  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  003eb	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003f2	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003f5	d1 fa		 sar	 edx, 1
  003f7	03 ca		 add	 ecx, edx
  003f9	48 63 c9	 movsxd	 rcx, ecx
  003fc	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00404	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00408	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0040c	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 577  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00413	b8 08 00 00 00	 mov	 eax, 8
  00418	48 6b c0 02	 imul	 rax, rax, 2
  0041c	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00422	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00429	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0042c	d1 fa		 sar	 edx, 1
  0042e	03 ca		 add	 ecx, edx
  00430	48 63 c9	 movsxd	 rcx, ecx
  00433	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0043b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0043f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00443	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 578  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 01	 imul	 rax, rax, 1
  00453	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0045a	0f af 8d 4c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00461	48 63 c9	 movsxd	 rcx, ecx
  00464	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0046c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 579  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch_byte) {

  0047a	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$28[rbp], 0
  00484	eb 5c		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00486	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR y$28[rbp]
  0048c	ff c0		 inc	 eax
  0048e	89 85 98 02 00
	00		 mov	 DWORD PTR y$28[rbp], eax
  00494	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  0049b	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  004a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a6	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  004ad	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  004b4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004bf	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004c6	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ce	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004d5	48 03 c8	 add	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004e2	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004e8	39 85 98 02 00
	00		 cmp	 DWORD PTR y$28[rbp], eax
  004ee	0f 8d f7 01 00
	00		 jge	 $LN9@convert_yv

; 580  :         const int x_fin = width - crop_right;

  004f4	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004f7	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	89 85 9c 02 00
	00		 mov	 DWORD PTR x_fin$29[rbp], eax

; 581  :         uint16_t *src_u_ptr = srcULine;

  00508	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0050f	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax

; 582  :         uint16_t *src_v_ptr = srcVLine;

  00516	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0051d	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax

; 583  :         uint8_t *dst_ptr = dstLine;

  00524	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0052b	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax

; 584  :         uint8_t *dst_ptr_fin = dst_ptr + x_fin;

  00532	48 63 85 9c 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$29[rbp]
  00539	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$32[rbp]
  00540	48 03 c8	 add	 rcx, rax
  00543	48 8b c1	 mov	 rax, rcx
  00546	48 89 85 b8 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$33[rbp], rax

; 585  :         __m256i y0, y1;
; 586  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0054d	eb 36		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0054f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  00556	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055a	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax
  00561	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  00568	48 83 c0 20	 add	 rax, 32			; 00000020H
  0056c	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax
  00573	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  0057a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0057e	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax
$LN13@convert_yv:
  00585	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$33[rbp]
  0058c	48 39 85 b0 02
	00 00		 cmp	 QWORD PTR dst_ptr$32[rbp], rax
  00593	0f 83 4d 01 00
	00		 jae	 $LN12@convert_yv

; 587  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00599	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  005a0	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005a4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005ac	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005b4	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 588  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005bc	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  005c3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005c7	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  005cf	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005d7	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 589  : 
; 590  :             y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  005df	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  005e7	c5 fd 71 d0 02	 vpsrlw	 ymm0, ymm0, 2
  005ec	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005f4	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005fc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 591  :             y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00604	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  0060c	c5 fd 71 f0 06	 vpsllw	 ymm0, ymm0, 6
  00611	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  00619	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  00621	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 592  :             const __m256i xMaskHighByte = _mm256_slli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00629	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0062d	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00635	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00639	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00641	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00649	c5 fd 74 85 c0
	03 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T42[rbp]
  00651	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  00659	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00661	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00666	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  0066e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  00676	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR xMaskHighByte$40[rbp], ymm0

; 593  :             y1 = _mm256_and_si256(y1, xMaskHighByte);

  0067e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  00686	c5 fd db 85 80
	03 00 00	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskHighByte$40[rbp]
  0068e	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  00696	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  0069e	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 594  : 
; 595  :             y0 = _mm256_or_si256(y0, y1);

  006a6	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006ae	c5 fd eb 85 e0
	02 00 00	 vpor	 ymm0, ymm0, YMMWORD PTR y1$35[rbp]
  006b6	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006be	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006c6	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 596  : 
; 597  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  006ce	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  006d5	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006dd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 598  :         }

  006e1	e9 69 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 599  :     }

  006e6	e9 9b fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 600  : }

  006eb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006f6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006fb	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00702	48 33 cc	 xor	 rcx, rsp
  00705	e8 00 00 00 00	 call	 __security_check_cookie
  0070a	48 81 c4 e0 04
	00 00		 add	 rsp, 1248		; 000004e0H
  00711	5f		 pop	 rdi
  00712	5e		 pop	 rsi
  00713	5d		 pop	 rbp
  00714	c3		 ret	 0
??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_nv12_avx2_base<10,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_10_to_nv12_avx2

; 615  : void convert_yv12_10_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 616  :     convert_yv12_high_to_nv12_avx2_base<10, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_nv12_avx2_base@$09$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_nv12_avx2_base<10,0>

; 617  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_10_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_10_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
dst_ptr$11 = 112
src_ptr$12 = 120
src_ptr_fin$13 = 128
y0$14 = 160
y1$15 = 192
$T16 = 224
$T17 = 256
$T18 = 288
$T19 = 320
$T20 = 352
$T21 = 384
$T22 = 416
$T23 = 448
$T24 = 480
$T25 = 512
$T26 = 544
uv_range$ = 584
$T27 = 616
src_uv_pitch$ = 632
srcULine$ = 640
srcVLine$ = 648
dstLine$ = 656
y$28 = 664
x_fin$29 = 668
src_u_ptr$30 = 672
src_v_ptr$31 = 680
dst_ptr$32 = 688
dst_ptr_fin$33 = 696
y0$34 = 704
y1$35 = 736
$T36 = 768
$T37 = 800
$T38 = 832
$T39 = 864
xMaskHighByte$40 = 896
$T41 = 928
$T42 = 960
$T43 = 992
$T44 = 1024
$T45 = 1056
$T46 = 1088
$T47 = 1128
$T48 = 1144
__$ArrayPad$ = 1160
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_nv12_avx2_base<12,0>

; 542  : static void convert_yv12_high_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 88 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 543  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 544  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 545  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 546  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 547  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 548  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 18 05
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 549  :     //Y成分のコピー
; 550  :     if (!uv_only) {

  000b7	33 c0		 xor	 eax, eax
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	0f 84 a3 02 00
	00		 je	 $LN14@convert_yv

; 551  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c5	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000db	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e3	44 8b c0	 mov	 r8d, eax
  000e6	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000e9	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  000f0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000f9	48 8b f9	 mov	 rdi, rcx
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 0c 00 00 00	 mov	 ecx, 12
  00104	f3 a4		 rep movsb
  00106	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  0010a	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 552  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 00	 imul	 rax, rax, 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00127	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  0012b	48 63 c9	 movsxd	 rcx, ecx
  0012e	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00136	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0013a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013e	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00142	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00146	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 553  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;;

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  0015e	48 63 c9	 movsxd	 rcx, ecx
  00161	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00169	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016d	48 8b c1	 mov	 rax, rcx
  00170	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 554  :         const int y_width = width - crop_right - crop_left;

  00174	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00177	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00185	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 555  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  00188	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  0018f	eb 2e		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00191	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  00194	ff c0		 inc	 eax
  00196	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  00199	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  0019d	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001a1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a5	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a9	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bf	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c2	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c5	0f 8d 9a 01 00
	00		 jge	 $LN3@convert_yv

; 556  :             uint8_t *dst_ptr = dstLine;

  001cb	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cf	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 557  :             uint16_t *src_ptr = srcYLine;

  001d3	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d7	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 558  :             uint16_t *src_ptr_fin = src_ptr + y_width;

  001db	48 63 45 68	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001df	48 8b 4d 78	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 85 80 00
	00 00		 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 559  :             __m256i y0, y1;
; 560  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001ee	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001f0	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001f8	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001fc	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00200	48 83 c0 40	 add	 rax, 64			; 00000040H
  00204	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00208	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  0020f	48 39 45 78	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  00213	0f 83 47 01 00
	00		 jae	 $LN6@convert_yv

; 561  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 16)), _mm_loadu_si128((__m128i*)(src_ptr +  0)));

  00219	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00225	66 0f 7f 85 20
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0022d	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00231	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00235	66 0f 7f 85 e0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0023d	c5 f8 10 85 e0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00245	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0024d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00255	c4 e3 7d 18 85
	20 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0025f	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 562  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 24)), _mm_loadu_si128((__m128i*)(src_ptr +  8)));

  00277	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0027b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0027f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00283	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  0028b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0028f	48 83 c0 10	 add	 rax, 16
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  0029f	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002a7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002af	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b7	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  002c1	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002c9	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002d1	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 563  : 
; 564  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002d9	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002e1	c5 fd 71 d0 04	 vpsrlw	 ymm0, ymm0, 4
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  002f6	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 565  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  002fe	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00306	c5 fd 71 d0 04	 vpsrlw	 ymm0, ymm0, 4
  0030b	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00313	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0031b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 566  : 
; 567  :                 y0 = _mm256_packus_epi16(y0, y1);

  00323	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0032b	c5 fd 67 85 c0
	00 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$15[rbp]
  00333	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0033b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00343	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 568  : 
; 569  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 0), y0);

  0034b	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0034f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00357	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 570  :             }

  0035b	e9 90 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 571  :         }

  00360	e9 2c fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 572  :     }
; 573  :     //UV成分のコピー
; 574  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00365	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00368	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0036f	2b c8		 sub	 ecx, eax
  00371	8b c1		 mov	 eax, ecx
  00373	d1 f8		 sar	 eax, 1
  00375	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00378	d1 f9		 sar	 ecx, 1
  0037a	8b 94 24 48 05
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00381	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00385	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0038d	44 8b c0	 mov	 r8d, eax
  00390	8b d1		 mov	 edx, ecx
  00392	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00399	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0039e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003a5	48 8b f9	 mov	 rdi, rcx
  003a8	48 8b f0	 mov	 rsi, rax
  003ab	b9 0c 00 00 00	 mov	 ecx, 12
  003b0	f3 a4		 rep movsb
  003b2	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b9	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003c0	48 8b f8	 mov	 rdi, rax
  003c3	48 8b f1	 mov	 rsi, rcx
  003c6	b9 0c 00 00 00	 mov	 ecx, 12
  003cb	f3 a4		 rep movsb

; 575  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  003cd	8b 84 24 20 05
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  003d4	d1 f8		 sar	 eax, 1
  003d6	89 85 78 02 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 576  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  003eb	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003f2	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003f5	d1 fa		 sar	 edx, 1
  003f7	03 ca		 add	 ecx, edx
  003f9	48 63 c9	 movsxd	 rcx, ecx
  003fc	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00404	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00408	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0040c	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 577  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00413	b8 08 00 00 00	 mov	 eax, 8
  00418	48 6b c0 02	 imul	 rax, rax, 2
  0041c	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00422	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00429	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0042c	d1 fa		 sar	 edx, 1
  0042e	03 ca		 add	 ecx, edx
  00430	48 63 c9	 movsxd	 rcx, ecx
  00433	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0043b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0043f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00443	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 578  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 01	 imul	 rax, rax, 1
  00453	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0045a	0f af 8d 4c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00461	48 63 c9	 movsxd	 rcx, ecx
  00464	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0046c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 579  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch_byte) {

  0047a	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$28[rbp], 0
  00484	eb 5c		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00486	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR y$28[rbp]
  0048c	ff c0		 inc	 eax
  0048e	89 85 98 02 00
	00		 mov	 DWORD PTR y$28[rbp], eax
  00494	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  0049b	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  004a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a6	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  004ad	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  004b4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004bf	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004c6	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ce	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004d5	48 03 c8	 add	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004e2	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004e8	39 85 98 02 00
	00		 cmp	 DWORD PTR y$28[rbp], eax
  004ee	0f 8d f7 01 00
	00		 jge	 $LN9@convert_yv

; 580  :         const int x_fin = width - crop_right;

  004f4	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004f7	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	89 85 9c 02 00
	00		 mov	 DWORD PTR x_fin$29[rbp], eax

; 581  :         uint16_t *src_u_ptr = srcULine;

  00508	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0050f	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax

; 582  :         uint16_t *src_v_ptr = srcVLine;

  00516	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0051d	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax

; 583  :         uint8_t *dst_ptr = dstLine;

  00524	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0052b	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax

; 584  :         uint8_t *dst_ptr_fin = dst_ptr + x_fin;

  00532	48 63 85 9c 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$29[rbp]
  00539	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$32[rbp]
  00540	48 03 c8	 add	 rcx, rax
  00543	48 8b c1	 mov	 rax, rcx
  00546	48 89 85 b8 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$33[rbp], rax

; 585  :         __m256i y0, y1;
; 586  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0054d	eb 36		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0054f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  00556	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055a	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax
  00561	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  00568	48 83 c0 20	 add	 rax, 32			; 00000020H
  0056c	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax
  00573	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  0057a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0057e	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax
$LN13@convert_yv:
  00585	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$33[rbp]
  0058c	48 39 85 b0 02
	00 00		 cmp	 QWORD PTR dst_ptr$32[rbp], rax
  00593	0f 83 4d 01 00
	00		 jae	 $LN12@convert_yv

; 587  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00599	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  005a0	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005a4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005ac	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005b4	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 588  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005bc	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  005c3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005c7	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  005cf	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005d7	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 589  : 
; 590  :             y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  005df	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  005e7	c5 fd 71 d0 04	 vpsrlw	 ymm0, ymm0, 4
  005ec	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005f4	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005fc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 591  :             y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00604	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  0060c	c5 fd 71 f0 04	 vpsllw	 ymm0, ymm0, 4
  00611	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  00619	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  00621	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 592  :             const __m256i xMaskHighByte = _mm256_slli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00629	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0062d	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00635	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00639	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00641	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00649	c5 fd 74 85 c0
	03 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T42[rbp]
  00651	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  00659	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00661	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00666	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  0066e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  00676	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR xMaskHighByte$40[rbp], ymm0

; 593  :             y1 = _mm256_and_si256(y1, xMaskHighByte);

  0067e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  00686	c5 fd db 85 80
	03 00 00	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskHighByte$40[rbp]
  0068e	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  00696	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  0069e	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 594  : 
; 595  :             y0 = _mm256_or_si256(y0, y1);

  006a6	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006ae	c5 fd eb 85 e0
	02 00 00	 vpor	 ymm0, ymm0, YMMWORD PTR y1$35[rbp]
  006b6	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006be	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006c6	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 596  : 
; 597  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  006ce	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  006d5	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006dd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 598  :         }

  006e1	e9 69 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 599  :     }

  006e6	e9 9b fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 600  : }

  006eb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006f6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006fb	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00702	48 33 cc	 xor	 rcx, rsp
  00705	e8 00 00 00 00	 call	 __security_check_cookie
  0070a	48 81 c4 e0 04
	00 00		 add	 rsp, 1248		; 000004e0H
  00711	5f		 pop	 rdi
  00712	5e		 pop	 rsi
  00713	5d		 pop	 rbp
  00714	c3		 ret	 0
??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_nv12_avx2_base<12,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_12_to_nv12_avx2

; 611  : void convert_yv12_12_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 612  :     convert_yv12_high_to_nv12_avx2_base<12, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_nv12_avx2_base@$0M@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_nv12_avx2_base<12,0>

; 613  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_12_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
dst_ptr$11 = 112
src_ptr$12 = 120
src_ptr_fin$13 = 128
y0$14 = 160
y1$15 = 192
$T16 = 224
$T17 = 256
$T18 = 288
$T19 = 320
$T20 = 352
$T21 = 384
$T22 = 416
$T23 = 448
$T24 = 480
$T25 = 512
$T26 = 544
uv_range$ = 584
$T27 = 616
src_uv_pitch$ = 632
srcULine$ = 640
srcVLine$ = 648
dstLine$ = 656
y$28 = 664
x_fin$29 = 668
src_u_ptr$30 = 672
src_v_ptr$31 = 680
dst_ptr$32 = 688
dst_ptr_fin$33 = 696
y0$34 = 704
y1$35 = 736
$T36 = 768
$T37 = 800
$T38 = 832
$T39 = 864
xMaskHighByte$40 = 896
$T41 = 928
$T42 = 960
$T43 = 992
$T44 = 1024
$T45 = 1056
$T46 = 1088
$T47 = 1128
$T48 = 1144
__$ArrayPad$ = 1160
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_nv12_avx2_base<14,0>

; 542  : static void convert_yv12_high_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 88 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 543  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 544  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 545  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 546  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 547  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 548  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 18 05
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 549  :     //Y成分のコピー
; 550  :     if (!uv_only) {

  000b7	33 c0		 xor	 eax, eax
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	0f 84 a3 02 00
	00		 je	 $LN14@convert_yv

; 551  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c5	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000db	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e3	44 8b c0	 mov	 r8d, eax
  000e6	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000e9	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  000f0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000f9	48 8b f9	 mov	 rdi, rcx
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 0c 00 00 00	 mov	 ecx, 12
  00104	f3 a4		 rep movsb
  00106	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  0010a	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 552  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 00	 imul	 rax, rax, 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00127	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  0012b	48 63 c9	 movsxd	 rcx, ecx
  0012e	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00136	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0013a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013e	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00142	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00146	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 553  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;;

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  0015e	48 63 c9	 movsxd	 rcx, ecx
  00161	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00169	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016d	48 8b c1	 mov	 rax, rcx
  00170	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 554  :         const int y_width = width - crop_right - crop_left;

  00174	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00177	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00185	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 555  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  00188	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  0018f	eb 2e		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00191	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  00194	ff c0		 inc	 eax
  00196	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  00199	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  0019d	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001a1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a5	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a9	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bf	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c2	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c5	0f 8d 9a 01 00
	00		 jge	 $LN3@convert_yv

; 556  :             uint8_t *dst_ptr = dstLine;

  001cb	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cf	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 557  :             uint16_t *src_ptr = srcYLine;

  001d3	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d7	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 558  :             uint16_t *src_ptr_fin = src_ptr + y_width;

  001db	48 63 45 68	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001df	48 8b 4d 78	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 85 80 00
	00 00		 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 559  :             __m256i y0, y1;
; 560  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001ee	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001f0	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001f8	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001fc	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00200	48 83 c0 40	 add	 rax, 64			; 00000040H
  00204	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00208	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  0020f	48 39 45 78	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  00213	0f 83 47 01 00
	00		 jae	 $LN6@convert_yv

; 561  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 16)), _mm_loadu_si128((__m128i*)(src_ptr +  0)));

  00219	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00225	66 0f 7f 85 20
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0022d	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00231	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00235	66 0f 7f 85 e0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0023d	c5 f8 10 85 e0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00245	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0024d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00255	c4 e3 7d 18 85
	20 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0025f	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 562  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 24)), _mm_loadu_si128((__m128i*)(src_ptr +  8)));

  00277	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0027b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0027f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00283	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  0028b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0028f	48 83 c0 10	 add	 rax, 16
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  0029f	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002a7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002af	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b7	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  002c1	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002c9	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002d1	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 563  : 
; 564  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002d9	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002e1	c5 fd 71 d0 06	 vpsrlw	 ymm0, ymm0, 6
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  002f6	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 565  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  002fe	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00306	c5 fd 71 d0 06	 vpsrlw	 ymm0, ymm0, 6
  0030b	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00313	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0031b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 566  : 
; 567  :                 y0 = _mm256_packus_epi16(y0, y1);

  00323	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0032b	c5 fd 67 85 c0
	00 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$15[rbp]
  00333	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0033b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00343	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 568  : 
; 569  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 0), y0);

  0034b	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0034f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00357	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 570  :             }

  0035b	e9 90 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 571  :         }

  00360	e9 2c fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 572  :     }
; 573  :     //UV成分のコピー
; 574  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00365	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00368	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0036f	2b c8		 sub	 ecx, eax
  00371	8b c1		 mov	 eax, ecx
  00373	d1 f8		 sar	 eax, 1
  00375	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00378	d1 f9		 sar	 ecx, 1
  0037a	8b 94 24 48 05
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00381	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00385	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0038d	44 8b c0	 mov	 r8d, eax
  00390	8b d1		 mov	 edx, ecx
  00392	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00399	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0039e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003a5	48 8b f9	 mov	 rdi, rcx
  003a8	48 8b f0	 mov	 rsi, rax
  003ab	b9 0c 00 00 00	 mov	 ecx, 12
  003b0	f3 a4		 rep movsb
  003b2	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b9	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003c0	48 8b f8	 mov	 rdi, rax
  003c3	48 8b f1	 mov	 rsi, rcx
  003c6	b9 0c 00 00 00	 mov	 ecx, 12
  003cb	f3 a4		 rep movsb

; 575  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  003cd	8b 84 24 20 05
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  003d4	d1 f8		 sar	 eax, 1
  003d6	89 85 78 02 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 576  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  003eb	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003f2	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003f5	d1 fa		 sar	 edx, 1
  003f7	03 ca		 add	 ecx, edx
  003f9	48 63 c9	 movsxd	 rcx, ecx
  003fc	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00404	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00408	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0040c	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 577  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00413	b8 08 00 00 00	 mov	 eax, 8
  00418	48 6b c0 02	 imul	 rax, rax, 2
  0041c	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00422	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00429	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0042c	d1 fa		 sar	 edx, 1
  0042e	03 ca		 add	 ecx, edx
  00430	48 63 c9	 movsxd	 rcx, ecx
  00433	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0043b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0043f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00443	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 578  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 01	 imul	 rax, rax, 1
  00453	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0045a	0f af 8d 4c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00461	48 63 c9	 movsxd	 rcx, ecx
  00464	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0046c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 579  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch_byte) {

  0047a	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$28[rbp], 0
  00484	eb 5c		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00486	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR y$28[rbp]
  0048c	ff c0		 inc	 eax
  0048e	89 85 98 02 00
	00		 mov	 DWORD PTR y$28[rbp], eax
  00494	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  0049b	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  004a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a6	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  004ad	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  004b4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004bf	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004c6	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ce	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004d5	48 03 c8	 add	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004e2	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004e8	39 85 98 02 00
	00		 cmp	 DWORD PTR y$28[rbp], eax
  004ee	0f 8d f7 01 00
	00		 jge	 $LN9@convert_yv

; 580  :         const int x_fin = width - crop_right;

  004f4	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004f7	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	89 85 9c 02 00
	00		 mov	 DWORD PTR x_fin$29[rbp], eax

; 581  :         uint16_t *src_u_ptr = srcULine;

  00508	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0050f	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax

; 582  :         uint16_t *src_v_ptr = srcVLine;

  00516	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0051d	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax

; 583  :         uint8_t *dst_ptr = dstLine;

  00524	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0052b	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax

; 584  :         uint8_t *dst_ptr_fin = dst_ptr + x_fin;

  00532	48 63 85 9c 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$29[rbp]
  00539	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$32[rbp]
  00540	48 03 c8	 add	 rcx, rax
  00543	48 8b c1	 mov	 rax, rcx
  00546	48 89 85 b8 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$33[rbp], rax

; 585  :         __m256i y0, y1;
; 586  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0054d	eb 36		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0054f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  00556	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055a	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax
  00561	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  00568	48 83 c0 20	 add	 rax, 32			; 00000020H
  0056c	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax
  00573	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  0057a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0057e	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax
$LN13@convert_yv:
  00585	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$33[rbp]
  0058c	48 39 85 b0 02
	00 00		 cmp	 QWORD PTR dst_ptr$32[rbp], rax
  00593	0f 83 4d 01 00
	00		 jae	 $LN12@convert_yv

; 587  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00599	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  005a0	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005a4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005ac	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005b4	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 588  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005bc	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  005c3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005c7	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  005cf	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005d7	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 589  : 
; 590  :             y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  005df	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  005e7	c5 fd 71 d0 06	 vpsrlw	 ymm0, ymm0, 6
  005ec	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005f4	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005fc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 591  :             y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00604	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  0060c	c5 fd 71 f0 02	 vpsllw	 ymm0, ymm0, 2
  00611	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  00619	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  00621	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 592  :             const __m256i xMaskHighByte = _mm256_slli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00629	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0062d	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00635	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00639	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00641	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00649	c5 fd 74 85 c0
	03 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T42[rbp]
  00651	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  00659	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00661	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00666	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  0066e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  00676	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR xMaskHighByte$40[rbp], ymm0

; 593  :             y1 = _mm256_and_si256(y1, xMaskHighByte);

  0067e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  00686	c5 fd db 85 80
	03 00 00	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskHighByte$40[rbp]
  0068e	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  00696	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  0069e	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 594  : 
; 595  :             y0 = _mm256_or_si256(y0, y1);

  006a6	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006ae	c5 fd eb 85 e0
	02 00 00	 vpor	 ymm0, ymm0, YMMWORD PTR y1$35[rbp]
  006b6	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006be	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006c6	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 596  : 
; 597  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  006ce	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  006d5	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006dd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 598  :         }

  006e1	e9 69 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 599  :     }

  006e6	e9 9b fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 600  : }

  006eb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006f6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006fb	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00702	48 33 cc	 xor	 rcx, rsp
  00705	e8 00 00 00 00	 call	 __security_check_cookie
  0070a	48 81 c4 e0 04
	00 00		 add	 rsp, 1248		; 000004e0H
  00711	5f		 pop	 rdi
  00712	5e		 pop	 rsi
  00713	5d		 pop	 rbp
  00714	c3		 ret	 0
??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_nv12_avx2_base<14,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_14_to_nv12_avx2

; 607  : void convert_yv12_14_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 608  :     convert_yv12_high_to_nv12_avx2_base<14, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_nv12_avx2_base@$0O@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_nv12_avx2_base<14,0>

; 609  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_14_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_14_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src_y_pitch$ = 16
y_range$5 = 40
$T6 = 72
srcYLine$7 = 88
dstLine$8 = 96
y_width$9 = 104
y$10 = 108
dst_ptr$11 = 112
src_ptr$12 = 120
src_ptr_fin$13 = 128
y0$14 = 160
y1$15 = 192
$T16 = 224
$T17 = 256
$T18 = 288
$T19 = 320
$T20 = 352
$T21 = 384
$T22 = 416
$T23 = 448
$T24 = 480
$T25 = 512
$T26 = 544
uv_range$ = 584
$T27 = 616
src_uv_pitch$ = 632
srcULine$ = 640
srcVLine$ = 648
dstLine$ = 656
y$28 = 664
x_fin$29 = 668
src_u_ptr$30 = 672
src_v_ptr$31 = 680
dst_ptr$32 = 688
dst_ptr_fin$33 = 696
y0$34 = 704
y1$35 = 736
$T36 = 768
$T37 = 800
$T38 = 832
$T39 = 864
xMaskHighByte$40 = 896
$T41 = 928
$T42 = 960
$T43 = 992
$T44 = 1024
$T45 = 1056
$T46 = 1088
$T47 = 1128
$T48 = 1144
__$ArrayPad$ = 1160
dst$ = 1280
src$ = 1288
width$ = 1296
src_y_pitch_byte$ = 1304
src_uv_pitch_byte$ = 1312
dst_y_pitch_byte$ = 1320
height$ = 1328
dst_height$ = 1336
thread_id$ = 1344
thread_n$ = 1352
crop$ = 1360
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_high_to_nv12_avx2_base<16,0>

; 542  : static void convert_yv12_high_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1280]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 88 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 543  :     static_assert(8 < in_bit_depth && in_bit_depth <= 16, "in_bit_depth must be 9-16.");
; 544  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 545  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 546  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 547  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 548  :     const int src_y_pitch = src_y_pitch_byte >> 1;

  000ab	8b 84 24 18 05
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 45 10	 mov	 DWORD PTR src_y_pitch$[rbp], eax

; 549  :     //Y成分のコピー
; 550  :     if (!uv_only) {

  000b7	33 c0		 xor	 eax, eax
  000b9	83 f8 01	 cmp	 eax, 1
  000bc	0f 84 a3 02 00
	00		 je	 $LN14@convert_yv

; 551  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c5	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	8b 8c 24 48 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000db	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e3	44 8b c0	 mov	 r8d, eax
  000e6	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000e9	48 8d 8d 68 04
	00 00		 lea	 rcx, QWORD PTR $T47[rbp]
  000f0	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f5	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000f9	48 8b f9	 mov	 rdi, rcx
  000fc	48 8b f0	 mov	 rsi, rax
  000ff	b9 0c 00 00 00	 mov	 ecx, 12
  00104	f3 a4		 rep movsb
  00106	48 8d 45 28	 lea	 rax, QWORD PTR y_range$5[rbp]
  0010a	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  0010e	48 8b f8	 mov	 rdi, rax
  00111	48 8b f1	 mov	 rsi, rcx
  00114	b9 0c 00 00 00	 mov	 ecx, 12
  00119	f3 a4		 rep movsb

; 552  :         uint16_t *srcYLine = (uint16_t *)src[0] + src_y_pitch * y_range.start_src + crop_left;

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 00	 imul	 rax, rax, 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR src_y_pitch$[rbp]
  00127	0f af 4d 28	 imul	 ecx, DWORD PTR y_range$5[rbp]
  0012b	48 63 c9	 movsxd	 rcx, ecx
  0012e	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00136	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0013a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0013e	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00142	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00146	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 553  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;;

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0015a	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  0015e	48 63 c9	 movsxd	 rcx, ecx
  00161	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00169	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0016d	48 8b c1	 mov	 rax, rcx
  00170	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax

; 554  :         const int y_width = width - crop_right - crop_left;

  00174	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00177	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0017e	2b c8		 sub	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00185	89 45 68	 mov	 DWORD PTR y_width$9[rbp], eax

; 555  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch, dstLine += dst_y_pitch_byte) {

  00188	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  0018f	eb 2e		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00191	8b 45 6c	 mov	 eax, DWORD PTR y$10[rbp]
  00194	ff c0		 inc	 eax
  00196	89 45 6c	 mov	 DWORD PTR y$10[rbp], eax
  00199	48 63 45 10	 movsxd	 rax, DWORD PTR src_y_pitch$[rbp]
  0019d	48 8b 4d 58	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001a1	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a5	48 89 45 58	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a9	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001b1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 45 60	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bf	8b 45 30	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001c2	39 45 6c	 cmp	 DWORD PTR y$10[rbp], eax
  001c5	0f 8d 9a 01 00
	00		 jge	 $LN3@convert_yv

; 556  :             uint8_t *dst_ptr = dstLine;

  001cb	48 8b 45 60	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cf	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 557  :             uint16_t *src_ptr = srcYLine;

  001d3	48 8b 45 58	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d7	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 558  :             uint16_t *src_ptr_fin = src_ptr + y_width;

  001db	48 63 45 68	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001df	48 8b 4d 78	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001e3	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e7	48 89 85 80 00
	00 00		 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 559  :             __m256i y0, y1;
; 560  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001ee	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001f0	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001f8	48 89 45 70	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001fc	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00200	48 83 c0 40	 add	 rax, 64			; 00000040H
  00204	48 89 45 78	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00208	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  0020f	48 39 45 78	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  00213	0f 83 47 01 00
	00		 jae	 $LN6@convert_yv

; 561  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 16)), _mm_loadu_si128((__m128i*)(src_ptr +  0)));

  00219	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0021d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00221	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00225	66 0f 7f 85 20
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0022d	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00231	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00235	66 0f 7f 85 e0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0023d	c5 f8 10 85 e0
	00 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00245	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0024d	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00255	c4 e3 7d 18 85
	20 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0025f	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 562  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(src_ptr + 24)), _mm_loadu_si128((__m128i*)(src_ptr +  8)));

  00277	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0027b	48 83 c0 30	 add	 rax, 48			; 00000030H
  0027f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00283	66 0f 7f 85 a0
	01 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  0028b	48 8b 45 78	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  0028f	48 83 c0 10	 add	 rax, 16
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 85 60
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  0029f	c5 f8 10 85 60
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002a7	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002af	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b7	c4 e3 7d 18 85
	a0 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  002c1	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002c9	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002d1	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 563  : 
; 564  :                 y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  002d9	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002e1	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  002f6	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 565  :                 y1 = _mm256_srli_epi16(y1, in_bit_depth - 8);

  002fe	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00306	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  0030b	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00313	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0031b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 566  : 
; 567  :                 y0 = _mm256_packus_epi16(y0, y1);

  00323	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0032b	c5 fd 67 85 c0
	00 00 00	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$15[rbp]
  00333	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0033b	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00343	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 568  : 
; 569  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 0), y0);

  0034b	48 8b 45 70	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  0034f	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  00357	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 570  :             }

  0035b	e9 90 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 571  :         }

  00360	e9 2c fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 572  :     }
; 573  :     //UV成分のコピー
; 574  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  00365	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00368	8b 8c 24 30 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  0036f	2b c8		 sub	 ecx, eax
  00371	8b c1		 mov	 eax, ecx
  00373	d1 f8		 sar	 eax, 1
  00375	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00378	d1 f9		 sar	 ecx, 1
  0037a	8b 94 24 48 05
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00381	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00385	44 8b 8c 24 40
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0038d	44 8b c0	 mov	 r8d, eax
  00390	8b d1		 mov	 edx, ecx
  00392	48 8d 8d 78 04
	00 00		 lea	 rcx, QWORD PTR $T48[rbp]
  00399	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0039e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003a5	48 8b f9	 mov	 rdi, rcx
  003a8	48 8b f0	 mov	 rsi, rax
  003ab	b9 0c 00 00 00	 mov	 ecx, 12
  003b0	f3 a4		 rep movsb
  003b2	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b9	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  003c0	48 8b f8	 mov	 rdi, rax
  003c3	48 8b f1	 mov	 rsi, rcx
  003c6	b9 0c 00 00 00	 mov	 ecx, 12
  003cb	f3 a4		 rep movsb

; 575  :     const int src_uv_pitch = src_uv_pitch_byte >> 1;

  003cd	8b 84 24 20 05
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  003d4	d1 f8		 sar	 eax, 1
  003d6	89 85 78 02 00
	00		 mov	 DWORD PTR src_uv_pitch$[rbp], eax

; 576  :     uint16_t *srcULine = (uint16_t *)src[1] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  003eb	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003f2	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003f5	d1 fa		 sar	 edx, 1
  003f7	03 ca		 add	 ecx, edx
  003f9	48 63 c9	 movsxd	 rcx, ecx
  003fc	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00404	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00408	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0040c	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 577  :     uint16_t *srcVLine = (uint16_t *)src[2] + ((src_uv_pitch * uv_range.start_src) + (crop_left >> 1));

  00413	b8 08 00 00 00	 mov	 eax, 8
  00418	48 6b c0 02	 imul	 rax, rax, 2
  0041c	8b 8d 78 02 00
	00		 mov	 ecx, DWORD PTR src_uv_pitch$[rbp]
  00422	0f af 8d 48 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00429	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  0042c	d1 fa		 sar	 edx, 1
  0042e	03 ca		 add	 ecx, edx
  00430	48 63 c9	 movsxd	 rcx, ecx
  00433	48 8b 94 24 08
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0043b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0043f	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00443	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 578  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 01	 imul	 rax, rax, 1
  00453	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0045a	0f af 8d 4c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  00461	48 63 c9	 movsxd	 rcx, ecx
  00464	48 8b 94 24 00
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0046c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00470	48 8b c1	 mov	 rax, rcx
  00473	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 579  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch, srcVLine += src_uv_pitch, dstLine += dst_y_pitch_byte) {

  0047a	c7 85 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$28[rbp], 0
  00484	eb 5c		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00486	8b 85 98 02 00
	00		 mov	 eax, DWORD PTR y$28[rbp]
  0048c	ff c0		 inc	 eax
  0048e	89 85 98 02 00
	00		 mov	 DWORD PTR y$28[rbp], eax
  00494	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  0049b	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  004a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004a6	48 89 85 80 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  004ad	48 63 85 78 02
	00 00		 movsxd	 rax, DWORD PTR src_uv_pitch$[rbp]
  004b4	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  004bf	48 89 85 88 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004c6	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ce	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004d5	48 03 c8	 add	 rcx, rax
  004d8	48 8b c1	 mov	 rax, rcx
  004db	48 89 85 90 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004e2	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004e8	39 85 98 02 00
	00		 cmp	 DWORD PTR y$28[rbp], eax
  004ee	0f 8d f7 01 00
	00		 jge	 $LN9@convert_yv

; 580  :         const int x_fin = width - crop_right;

  004f4	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004f7	8b 8c 24 10 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004fe	2b c8		 sub	 ecx, eax
  00500	8b c1		 mov	 eax, ecx
  00502	89 85 9c 02 00
	00		 mov	 DWORD PTR x_fin$29[rbp], eax

; 581  :         uint16_t *src_u_ptr = srcULine;

  00508	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0050f	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax

; 582  :         uint16_t *src_v_ptr = srcVLine;

  00516	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0051d	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax

; 583  :         uint8_t *dst_ptr = dstLine;

  00524	48 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0052b	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax

; 584  :         uint8_t *dst_ptr_fin = dst_ptr + x_fin;

  00532	48 63 85 9c 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$29[rbp]
  00539	48 8b 8d b0 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$32[rbp]
  00540	48 03 c8	 add	 rcx, rax
  00543	48 8b c1	 mov	 rax, rcx
  00546	48 89 85 b8 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$33[rbp], rax

; 585  :         __m256i y0, y1;
; 586  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 16, src_v_ptr += 16, dst_ptr += 32) {

  0054d	eb 36		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0054f	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  00556	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055a	48 89 85 a0 02
	00 00		 mov	 QWORD PTR src_u_ptr$30[rbp], rax
  00561	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  00568	48 83 c0 20	 add	 rax, 32			; 00000020H
  0056c	48 89 85 a8 02
	00 00		 mov	 QWORD PTR src_v_ptr$31[rbp], rax
  00573	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  0057a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0057e	48 89 85 b0 02
	00 00		 mov	 QWORD PTR dst_ptr$32[rbp], rax
$LN13@convert_yv:
  00585	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$33[rbp]
  0058c	48 39 85 b0 02
	00 00		 cmp	 QWORD PTR dst_ptr$32[rbp], rax
  00593	0f 83 4d 01 00
	00		 jae	 $LN12@convert_yv

; 587  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00599	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$30[rbp]
  005a0	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005a4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005ac	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005b4	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 588  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005bc	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$31[rbp]
  005c3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005c7	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  005cf	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005d7	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 589  : 
; 590  :             y0 = _mm256_srli_epi16(y0, in_bit_depth - 8);

  005df	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  005e7	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  005ec	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005f4	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005fc	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 591  :             y1 = _mm256_slli_epi16(y1, 16 - in_bit_depth);

  00604	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  0060c	c5 fd 71 f0 00	 vpsllw	 ymm0, ymm0, 0
  00611	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  00619	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  00621	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 592  :             const __m256i xMaskHighByte = _mm256_slli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00629	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0062d	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00635	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00639	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00641	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00649	c5 fd 74 85 c0
	03 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T42[rbp]
  00651	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  00659	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00661	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00666	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  0066e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  00676	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR xMaskHighByte$40[rbp], ymm0

; 593  :             y1 = _mm256_and_si256(y1, xMaskHighByte);

  0067e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$35[rbp]
  00686	c5 fd db 85 80
	03 00 00	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskHighByte$40[rbp]
  0068e	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  00696	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  0069e	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y1$35[rbp], ymm0

; 594  : 
; 595  :             y0 = _mm256_or_si256(y0, y1);

  006a6	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006ae	c5 fd eb 85 e0
	02 00 00	 vpor	 ymm0, ymm0, YMMWORD PTR y1$35[rbp]
  006b6	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006be	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006c6	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y0$34[rbp], ymm0

; 596  : 
; 597  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  006ce	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$32[rbp]
  006d5	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$34[rbp]
  006dd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 598  :         }

  006e1	e9 69 fe ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 599  :     }

  006e6	e9 9b fd ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 600  : }

  006eb	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006f6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006fb	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00702	48 33 cc	 xor	 rcx, rsp
  00705	e8 00 00 00 00	 call	 __security_check_cookie
  0070a	48 81 c4 e0 04
	00 00		 add	 rsp, 1248		; 000004e0H
  00711	5f		 pop	 rdi
  00712	5e		 pop	 rsi
  00713	5d		 pop	 rbp
  00714	c3		 ret	 0
??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_high_to_nv12_avx2_base<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_16_to_nv12_avx2

; 603  : void convert_yv12_16_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 604  :     convert_yv12_high_to_nv12_avx2_base<16, false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_high_to_nv12_avx2_base@$0BA@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_high_to_nv12_avx2_base<16,0>

; 605  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_16_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_16_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
y_range$5 = 24
$T6 = 56
srcYLine$7 = 72
dstLine$8 = 80
y_width$9 = 88
y$10 = 92
dst_ptr$11 = 96
src_ptr$12 = 104
src_ptr_fin$13 = 112
y0$14 = 128
y1$15 = 160
$T16 = 192
$T17 = 224
$T18 = 256
$T19 = 288
$T20 = 320
$T21 = 352
$T22 = 384
$T23 = 416
$T24 = 448
$T25 = 480
uv_range$ = 520
$T26 = 552
srcULine$ = 568
srcVLine$ = 576
dstLine$ = 584
y$27 = 592
x_fin$28 = 596
src_u_ptr$29 = 600
src_v_ptr$30 = 608
dst_ptr$31 = 616
dst_ptr_fin$32 = 624
y0$33 = 640
y1$34 = 672
y2$35 = 704
y3$36 = 736
$T37 = 768
$T38 = 800
$T39 = 832
$T40 = 864
$T41 = 896
$T42 = 928
$T43 = 960
$T44 = 992
$T45 = 1024
$T46 = 1056
$T47 = 1088
$T48 = 1120
$T49 = 1152
$T50 = 1184
$T51 = 1216
$T52 = 1248
$T53 = 1280
$T54 = 1312
$T55 = 1344
$T56 = 1376
$T57 = 1408
$T58 = 1440
$T59 = 1472
$T60 = 1504
$T61 = 1544
$T62 = 1560
__$ArrayPad$ = 1576
dst$ = 1696
src$ = 1704
width$ = 1712
src_y_pitch_byte$ = 1720
src_uv_pitch_byte$ = 1728
dst_y_pitch_byte$ = 1736
height$ = 1744
dst_height$ = 1752
thread_id$ = 1760
thread_n$ = 1768
crop$ = 1776
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010_avx2_base<0>

; 464  : static void convert_yv12_to_p010_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 06
	00 00		 sub	 rsp, 1664		; 00000680H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 a0 01 00 00	 mov	 ecx, 416		; 000001a0H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 a0
	06 00 00	 mov	 rcx, QWORD PTR [rsp+1696]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 28 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 465  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 466  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 467  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 468  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 469  :     //Y成分のコピー
; 470  :     if (!uv_only) {

  000ab	33 c0		 xor	 eax, eax
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 84 a9 02 00
	00		 je	 $LN14@convert_yv

; 471  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b6	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000b9	8b 8c 24 d0 06
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c0	2b c8		 sub	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	8b 8c 24 e8 06
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cb	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cf	44 8b 8c 24 e0
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d7	44 8b c0	 mov	 r8d, eax
  000da	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000dd	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T61[rbp]
  000e4	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e9	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  000ed	48 8b f9	 mov	 rdi, rcx
  000f0	48 8b f0	 mov	 rsi, rax
  000f3	b9 0c 00 00 00	 mov	 ecx, 12
  000f8	f3 a4		 rep movsb
  000fa	48 8d 45 18	 lea	 rax, QWORD PTR y_range$5[rbp]
  000fe	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  00102	48 8b f8	 mov	 rdi, rax
  00105	48 8b f1	 mov	 rsi, rcx
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb

; 472  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  0010f	b8 08 00 00 00	 mov	 eax, 8
  00114	48 6b c0 00	 imul	 rax, rax, 0
  00118	8b 8c 24 b8 06
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0011f	0f af 4d 18	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00123	48 63 c9	 movsxd	 rcx, ecx
  00126	48 8b 94 24 a8
	06 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0012e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00132	48 03 c1	 add	 rax, rcx
  00135	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00139	48 03 c1	 add	 rax, rcx
  0013c	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 473  :         uint8_t *dstLine  = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00140	b8 08 00 00 00	 mov	 eax, 8
  00145	48 6b c0 00	 imul	 rax, rax, 0
  00149	8b 8c 24 c8 06
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00150	0f af 4d 1c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00154	48 63 c9	 movsxd	 rcx, ecx
  00157	48 8b 94 24 a0
	06 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015f	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00163	48 8b c1	 mov	 rax, rcx
  00166	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax

; 474  :         const int y_width = width - crop_right - crop_left;

  0016a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0016d	8b 8c 24 b0 06
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00174	2b c8		 sub	 ecx, eax
  00176	8b c1		 mov	 eax, ecx
  00178	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0017b	89 45 58	 mov	 DWORD PTR y_width$9[rbp], eax

; 475  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0017e	c7 45 5c 00 00
	00 00		 mov	 DWORD PTR y$10[rbp], 0
  00185	eb 34		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00187	8b 45 5c	 mov	 eax, DWORD PTR y$10[rbp]
  0018a	ff c0		 inc	 eax
  0018c	89 45 5c	 mov	 DWORD PTR y$10[rbp], eax
  0018f	48 63 84 24 b8
	06 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  00197	48 8b 4d 48	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  0019b	48 03 c8	 add	 rcx, rax
  0019e	48 8b c1	 mov	 rax, rcx
  001a1	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001a5	48 63 84 24 c8
	06 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ad	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001b1	48 03 c8	 add	 rcx, rax
  001b4	48 8b c1	 mov	 rax, rcx
  001b7	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001bb	8b 45 20	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001be	39 45 5c	 cmp	 DWORD PTR y$10[rbp], eax
  001c1	0f 8d 98 01 00
	00		 jge	 $LN3@convert_yv

; 476  :             uint16_t *dst_ptr = (uint16_t *)dstLine;

  001c7	48 8b 45 50	 mov	 rax, QWORD PTR dstLine$8[rbp]
  001cb	48 89 45 60	 mov	 QWORD PTR dst_ptr$11[rbp], rax

; 477  :             uint8_t *src_ptr = srcYLine;

  001cf	48 8b 45 48	 mov	 rax, QWORD PTR srcYLine$7[rbp]
  001d3	48 89 45 68	 mov	 QWORD PTR src_ptr$12[rbp], rax

; 478  :             uint8_t *src_ptr_fin = src_ptr + y_width;

  001d7	48 63 45 58	 movsxd	 rax, DWORD PTR y_width$9[rbp]
  001db	48 8b 4d 68	 mov	 rcx, QWORD PTR src_ptr$12[rbp]
  001df	48 03 c8	 add	 rcx, rax
  001e2	48 8b c1	 mov	 rax, rcx
  001e5	48 89 45 70	 mov	 QWORD PTR src_ptr_fin$13[rbp], rax

; 479  :             __m256i y0, y1;
; 480  :             for (; src_ptr < src_ptr_fin; dst_ptr += 32, src_ptr += 32) {

  001e9	eb 18		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  001eb	48 8b 45 60	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  001ef	48 83 c0 40	 add	 rax, 64			; 00000040H
  001f3	48 89 45 60	 mov	 QWORD PTR dst_ptr$11[rbp], rax
  001f7	48 8b 45 68	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  001fb	48 83 c0 20	 add	 rax, 32			; 00000020H
  001ff	48 89 45 68	 mov	 QWORD PTR src_ptr$12[rbp], rax
$LN7@convert_yv:
  00203	48 8b 45 70	 mov	 rax, QWORD PTR src_ptr_fin$13[rbp]
  00207	48 39 45 68	 cmp	 QWORD PTR src_ptr$12[rbp], rax
  0020b	0f 83 49 01 00
	00		 jae	 $LN6@convert_yv

; 481  :                 y0 = _mm256_cvtepu8_epi16(_mm_loadu_si128((const __m128i *)(src_ptr +  0)));

  00211	48 8b 45 68	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00215	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00219	66 0f 7f 85 c0
	00 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  00221	c4 e2 7d 30 85
	c0 00 00 00	 vpmovzxbw ymm0, XMMWORD PTR $T16[rbp]
  0022a	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  00232	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  0023a	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 482  :                 y1 = _mm256_cvtepu8_epi16(_mm_loadu_si128((const __m128i *)(src_ptr + 16)));

  00242	48 8b 45 68	 mov	 rax, QWORD PTR src_ptr$12[rbp]
  00246	48 83 c0 10	 add	 rax, 16
  0024a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0024e	66 0f 7f 85 00
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  00256	c4 e2 7d 30 85
	00 01 00 00	 vpmovzxbw ymm0, XMMWORD PTR $T18[rbp]
  0025f	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  00267	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  0026f	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 483  :                 y0 = _mm256_slli_epi16(y0, 8);

  00277	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0027f	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  00284	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  0028c	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  00294	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 484  :                 y1 = _mm256_slli_epi16(y1, 8);

  0029c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  002a4	c5 fd 71 f0 08	 vpsllw	 ymm0, ymm0, 8
  002a9	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002b1	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002b9	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 485  :                 y0 = _mm256_add_epi16(y0, _mm256_set1_epi16(2 << 6));

  002c1	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  002c9	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002d1	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  002d9	c5 fd fd 85 80
	01 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T22[rbp]
  002e1	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  002e9	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  002f1	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y0$14[rbp], ymm0

; 486  :                 y1 = _mm256_add_epi16(y1, _mm256_set1_epi16(2 << 6));

  002f9	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  00301	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00309	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00311	c5 fd fd 85 c0
	01 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T24[rbp]
  00319	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00321	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00329	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y1$15[rbp], ymm0

; 487  :                 _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  00331	48 8b 45 60	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00335	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$14[rbp]
  0033d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 488  :                 _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y1);

  00341	48 8b 45 60	 mov	 rax, QWORD PTR dst_ptr$11[rbp]
  00345	48 83 c0 20	 add	 rax, 32			; 00000020H
  00349	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$15[rbp]
  00351	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 489  :             }

  00355	e9 91 fe ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 490  :         }

  0035a	e9 28 fe ff ff	 jmp	 $LN2@convert_yv
$LN3@convert_yv:
$LN14@convert_yv:

; 491  :     }
; 492  :     //UV成分のコピー
; 493  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  0035f	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  00362	8b 8c 24 d0 06
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00369	2b c8		 sub	 ecx, eax
  0036b	8b c1		 mov	 eax, ecx
  0036d	d1 f8		 sar	 eax, 1
  0036f	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  00372	d1 f9		 sar	 ecx, 1
  00374	8b 94 24 e8 06
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  0037b	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  0037f	44 8b 8c 24 e0
	06 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00387	44 8b c0	 mov	 r8d, eax
  0038a	8b d1		 mov	 edx, ecx
  0038c	48 8d 8d 18 06
	00 00		 lea	 rcx, QWORD PTR $T62[rbp]
  00393	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00398	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  0039f	48 8b f9	 mov	 rdi, rcx
  003a2	48 8b f0	 mov	 rsi, rax
  003a5	b9 0c 00 00 00	 mov	 ecx, 12
  003aa	f3 a4		 rep movsb
  003ac	48 8d 85 08 02
	00 00		 lea	 rax, QWORD PTR uv_range$[rbp]
  003b3	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  003ba	48 8b f8	 mov	 rdi, rax
  003bd	48 8b f1	 mov	 rsi, rcx
  003c0	b9 0c 00 00 00	 mov	 ecx, 12
  003c5	f3 a4		 rep movsb

; 494  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  003c7	b8 08 00 00 00	 mov	 eax, 8
  003cc	48 6b c0 01	 imul	 rax, rax, 1
  003d0	8b 8c 24 c0 06
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  003d7	0f af 8d 08 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  003de	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  003e1	d1 fa		 sar	 edx, 1
  003e3	03 ca		 add	 ecx, edx
  003e5	48 63 c9	 movsxd	 rcx, ecx
  003e8	48 8b 94 24 a8
	06 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  003f0	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  003f4	48 8b c1	 mov	 rax, rcx
  003f7	48 89 85 38 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 495  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  003fe	b8 08 00 00 00	 mov	 eax, 8
  00403	48 6b c0 02	 imul	 rax, rax, 2
  00407	8b 8c 24 c0 06
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  0040e	0f af 8d 08 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp]
  00415	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00418	d1 fa		 sar	 edx, 1
  0041a	03 ca		 add	 ecx, edx
  0041c	48 63 c9	 movsxd	 rcx, ecx
  0041f	48 8b 94 24 a8
	06 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00427	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0042b	48 8b c1	 mov	 rax, rcx
  0042e	48 89 85 40 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 496  :     uint8_t *dstLine  = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  00435	b8 08 00 00 00	 mov	 eax, 8
  0043a	48 6b c0 01	 imul	 rax, rax, 1
  0043e	8b 8c 24 c8 06
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00445	0f af 8d 0c 02
	00 00		 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  0044c	48 63 c9	 movsxd	 rcx, ecx
  0044f	48 8b 94 24 a0
	06 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00457	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0045b	48 8b c1	 mov	 rax, rcx
  0045e	48 89 85 48 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 497  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  00465	c7 85 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR y$27[rbp], 0
  0046f	eb 62		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  00471	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR y$27[rbp]
  00477	ff c0		 inc	 eax
  00479	89 85 50 02 00
	00		 mov	 DWORD PTR y$27[rbp], eax
  0047f	48 63 84 24 c0
	06 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00487	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  0048e	48 03 c8	 add	 rcx, rax
  00491	48 8b c1	 mov	 rax, rcx
  00494	48 89 85 38 02
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  0049b	48 63 84 24 c0
	06 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  004a3	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  004aa	48 03 c8	 add	 rcx, rax
  004ad	48 8b c1	 mov	 rax, rcx
  004b0	48 89 85 40 02
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  004b7	48 63 84 24 c8
	06 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004bf	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  004c6	48 03 c8	 add	 rcx, rax
  004c9	48 8b c1	 mov	 rax, rcx
  004cc	48 89 85 48 02
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN10@convert_yv:
  004d3	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  004d9	39 85 50 02 00
	00		 cmp	 DWORD PTR y$27[rbp], eax
  004df	0f 8d bf 03 00
	00		 jge	 $LN9@convert_yv

; 498  :         const int x_fin = width - crop_right;

  004e5	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  004e8	8b 8c 24 b0 06
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  004ef	2b c8		 sub	 ecx, eax
  004f1	8b c1		 mov	 eax, ecx
  004f3	89 85 54 02 00
	00		 mov	 DWORD PTR x_fin$28[rbp], eax

; 499  :         uint8_t *src_u_ptr = srcULine;

  004f9	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  00500	48 89 85 58 02
	00 00		 mov	 QWORD PTR src_u_ptr$29[rbp], rax

; 500  :         uint8_t *src_v_ptr = srcVLine;

  00507	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0050e	48 89 85 60 02
	00 00		 mov	 QWORD PTR src_v_ptr$30[rbp], rax

; 501  :         uint16_t *dst_ptr = (uint16_t *)dstLine;

  00515	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  0051c	48 89 85 68 02
	00 00		 mov	 QWORD PTR dst_ptr$31[rbp], rax

; 502  :         uint16_t *dst_ptr_fin = dst_ptr + x_fin;

  00523	48 63 85 54 02
	00 00		 movsxd	 rax, DWORD PTR x_fin$28[rbp]
  0052a	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR dst_ptr$31[rbp]
  00531	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00535	48 89 85 70 02
	00 00		 mov	 QWORD PTR dst_ptr_fin$32[rbp], rax

; 503  :         __m256i y0, y1, y2, y3;
; 504  :         for (; dst_ptr < dst_ptr_fin; src_u_ptr += 32, src_v_ptr += 32, dst_ptr += 64) {

  0053c	eb 38		 jmp	 SHORT $LN13@convert_yv
$LN11@convert_yv:
  0053e	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$29[rbp]
  00545	48 83 c0 20	 add	 rax, 32			; 00000020H
  00549	48 89 85 58 02
	00 00		 mov	 QWORD PTR src_u_ptr$29[rbp], rax
  00550	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$30[rbp]
  00557	48 83 c0 20	 add	 rax, 32			; 00000020H
  0055b	48 89 85 60 02
	00 00		 mov	 QWORD PTR src_v_ptr$30[rbp], rax
  00562	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$31[rbp]
  00569	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0056f	48 89 85 68 02
	00 00		 mov	 QWORD PTR dst_ptr$31[rbp], rax
$LN13@convert_yv:
  00576	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR dst_ptr_fin$32[rbp]
  0057d	48 39 85 68 02
	00 00		 cmp	 QWORD PTR dst_ptr$31[rbp], rax
  00584	0f 83 15 03 00
	00		 jae	 $LN12@convert_yv

; 505  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr); // 31-28  27-24 23-20  19-16 | 15-12  11-8  7-4  3-0

  0058a	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR src_u_ptr$29[rbp]
  00591	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00595	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  0059d	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  005a5	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR y0$33[rbp], ymm0

; 506  :             y2 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  005ad	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR src_v_ptr$30[rbp]
  005b4	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  005b8	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  005c0	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  005c8	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y2$35[rbp], ymm0

; 507  : 
; 508  :             alignas(32) static const int SHUFFLE_MASK[] = { 0, 2, 4, 6, 1, 3, 5, 7 };
; 509  :             y0 = _mm256_permutevar8x32_epi32(y0, _mm256_load_si256((const __m256i *)SHUFFLE_MASK)); // 31-28  23-20  15-12  7-4 | 27-24  19-16  11-8  3-0

  005d0	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?SHUFFLE_MASK@?N@???$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z@4QBHB
  005d8	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T39[rbp], ymm0
  005e0	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T39[rbp]
  005e8	c4 e2 7d 36 85
	80 02 00 00	 vpermd	 ymm0, ymm0, YMMWORD PTR y0$33[rbp]
  005f1	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T40[rbp], ymm0
  005f9	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T40[rbp]
  00601	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR y0$33[rbp], ymm0

; 510  :             y2 = _mm256_permutevar8x32_epi32(y2, _mm256_load_si256((const __m256i *)SHUFFLE_MASK));

  00609	c5 fd 6f 05 00
	00 00 00	 vmovdqa ymm0, YMMWORD PTR ?SHUFFLE_MASK@?N@???$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z@4QBHB
  00611	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T41[rbp], ymm0
  00619	c5 fe 6f 85 80
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T41[rbp]
  00621	c4 e2 7d 36 85
	c0 02 00 00	 vpermd	 ymm0, ymm0, YMMWORD PTR y2$35[rbp]
  0062a	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T42[rbp], ymm0
  00632	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T42[rbp]
  0063a	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y2$35[rbp], ymm0

; 511  : 
; 512  :             y1 = _mm256_unpacklo_epi8(y0, y2); // 15-12    7-4 | 11- 8   3- 0

  00642	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$33[rbp]
  0064a	c5 fd 60 85 c0
	02 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y2$35[rbp]
  00652	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T43[rbp], ymm0
  0065a	c5 fe 6f 85 c0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T43[rbp]
  00662	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR y1$34[rbp], ymm0

; 513  :             y3 = _mm256_unpackhi_epi8(y0, y2); // 31-28  23-20 | 27-24  19-16

  0066a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$33[rbp]
  00672	c5 fd 68 85 c0
	02 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y2$35[rbp]
  0067a	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T44[rbp], ymm0
  00682	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T44[rbp]
  0068a	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y3$36[rbp], ymm0

; 514  : 
; 515  :             y0 = _mm256_unpacklo_epi8(_mm256_setzero_si256(), y1);  //   7-4 |  3- 0

  00692	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00696	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T45[rbp], ymm0
  0069e	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T45[rbp]
  006a6	c5 fd 60 85 a0
	02 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y1$34[rbp]
  006ae	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T46[rbp], ymm0
  006b6	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T46[rbp]
  006be	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR y0$33[rbp], ymm0

; 516  :             y1 = _mm256_unpackhi_epi8(_mm256_setzero_si256(), y1);  // 15-12 | 11- 8

  006c6	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  006ca	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T47[rbp], ymm0
  006d2	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T47[rbp]
  006da	c5 fd 68 85 a0
	02 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y1$34[rbp]
  006e2	c5 fe 7f 85 60
	04 00 00	 vmovdqu YMMWORD PTR $T48[rbp], ymm0
  006ea	c5 fe 6f 85 60
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T48[rbp]
  006f2	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR y1$34[rbp], ymm0

; 517  :             y0 = _mm256_add_epi16(y0, _mm256_set1_epi16(2 << 6));

  006fa	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  00702	c5 fe 7f 85 80
	04 00 00	 vmovdqu YMMWORD PTR $T49[rbp], ymm0
  0070a	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$33[rbp]
  00712	c5 fd fd 85 80
	04 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T49[rbp]
  0071a	c5 fe 7f 85 a0
	04 00 00	 vmovdqu YMMWORD PTR $T50[rbp], ymm0
  00722	c5 fe 6f 85 a0
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T50[rbp]
  0072a	c5 fe 7f 85 80
	02 00 00	 vmovdqu YMMWORD PTR y0$33[rbp], ymm0

; 518  :             y1 = _mm256_add_epi16(y1, _mm256_set1_epi16(2 << 6));

  00732	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  0073a	c5 fe 7f 85 c0
	04 00 00	 vmovdqu YMMWORD PTR $T51[rbp], ymm0
  00742	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$34[rbp]
  0074a	c5 fd fd 85 c0
	04 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T51[rbp]
  00752	c5 fe 7f 85 e0
	04 00 00	 vmovdqu YMMWORD PTR $T52[rbp], ymm0
  0075a	c5 fe 6f 85 e0
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T52[rbp]
  00762	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR y1$34[rbp], ymm0

; 519  : 
; 520  :             y2 = _mm256_unpacklo_epi8(_mm256_setzero_si256(), y3);  // 23-20 | 19-16

  0076a	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  0076e	c5 fe 7f 85 00
	05 00 00	 vmovdqu YMMWORD PTR $T53[rbp], ymm0
  00776	c5 fe 6f 85 00
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T53[rbp]
  0077e	c5 fd 60 85 e0
	02 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y3$36[rbp]
  00786	c5 fe 7f 85 20
	05 00 00	 vmovdqu YMMWORD PTR $T54[rbp], ymm0
  0078e	c5 fe 6f 85 20
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T54[rbp]
  00796	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y2$35[rbp], ymm0

; 521  :             y3 = _mm256_unpackhi_epi8(_mm256_setzero_si256(), y3);  // 31-28 | 27-24

  0079e	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  007a2	c5 fe 7f 85 40
	05 00 00	 vmovdqu YMMWORD PTR $T55[rbp], ymm0
  007aa	c5 fe 6f 85 40
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T55[rbp]
  007b2	c5 fd 68 85 e0
	02 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y3$36[rbp]
  007ba	c5 fe 7f 85 60
	05 00 00	 vmovdqu YMMWORD PTR $T56[rbp], ymm0
  007c2	c5 fe 6f 85 60
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T56[rbp]
  007ca	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y3$36[rbp], ymm0

; 522  :             y2 = _mm256_add_epi16(y2, _mm256_set1_epi16(2 << 6));

  007d2	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  007da	c5 fe 7f 85 80
	05 00 00	 vmovdqu YMMWORD PTR $T57[rbp], ymm0
  007e2	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$35[rbp]
  007ea	c5 fd fd 85 80
	05 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T57[rbp]
  007f2	c5 fe 7f 85 a0
	05 00 00	 vmovdqu YMMWORD PTR $T58[rbp], ymm0
  007fa	c5 fe 6f 85 a0
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T58[rbp]
  00802	c5 fe 7f 85 c0
	02 00 00	 vmovdqu YMMWORD PTR y2$35[rbp], ymm0

; 523  :             y3 = _mm256_add_epi16(y3, _mm256_set1_epi16(2 << 6));

  0080a	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0080008000800080008000800080008000800080008000800080008000800080
  00812	c5 fe 7f 85 c0
	05 00 00	 vmovdqu YMMWORD PTR $T59[rbp], ymm0
  0081a	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$36[rbp]
  00822	c5 fd fd 85 c0
	05 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T59[rbp]
  0082a	c5 fe 7f 85 e0
	05 00 00	 vmovdqu YMMWORD PTR $T60[rbp], ymm0
  00832	c5 fe 6f 85 e0
	05 00 00	 vmovdqu ymm0, YMMWORD PTR $T60[rbp]
  0083a	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR y3$36[rbp], ymm0

; 524  : 
; 525  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  00842	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$31[rbp]
  00849	c5 fe 6f 85 80
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y0$33[rbp]
  00851	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 526  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 16), y1);

  00855	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$31[rbp]
  0085c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00860	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y1$34[rbp]
  00868	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 527  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 32), y2);

  0086c	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$31[rbp]
  00873	48 83 c0 40	 add	 rax, 64			; 00000040H
  00877	c5 fe 6f 85 c0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$35[rbp]
  0087f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 528  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 48), y3);

  00883	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR dst_ptr$31[rbp]
  0088a	48 83 c0 60	 add	 rax, 96			; 00000060H
  0088e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y3$36[rbp]
  00896	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 529  :         }

  0089a	e9 9f fc ff ff	 jmp	 $LN11@convert_yv
$LN12@convert_yv:

; 530  :     }

  0089f	e9 cd fb ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 531  : }

  008a4	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  008a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  008af	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  008b4	48 8b 8d 28 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  008bb	48 33 cc	 xor	 rcx, rsp
  008be	e8 00 00 00 00	 call	 __security_check_cookie
  008c3	48 81 c4 80 06
	00 00		 add	 rsp, 1664		; 00000680H
  008ca	5f		 pop	 rdi
  008cb	5e		 pop	 rsi
  008cc	5d		 pop	 rbp
  008cd	c3		 ret	 0
??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010_avx2_base<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_p010_avx2

; 534  : void convert_yv12_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 535  :     convert_yv12_to_p010_avx2_base<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_p010_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_p010_avx2_base<0>

; 536  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstLine$ = 128
y_width$ = 136
y$5 = 140
$T6 = 152
__$ArrayPad$ = 168
dst$ = 208
src$ = 216
width$ = 224
src_y_pitch_byte$ = 232
src_uv_pitch_byte$ = 240
dst_y_pitch_byte$ = 248
height$ = 256
dst_height$ = 264
thread_id$ = 272
thread_n$ = 280
crop$ = 288
?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb24_avx2

; 448  : void convert_rgb24r_to_rgb24_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 449  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 450  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 451  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 452  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 453  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 10
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 454  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1) + crop_left * 3;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 4c 24 48	 mov	 ecx, DWORD PTR y_range$[rsp]
  00112	8b 54 24 50	 mov	 edx, DWORD PTR y_range$[rsp+8]
  00116	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  0011a	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  00121	0f af d1	 imul	 edx, ecx
  00124	8b ca		 mov	 ecx, edx
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00131	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00135	48 03 c1	 add	 rax, rcx
  00138	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  0013d	48 63 c9	 movsxd	 rcx, ecx
  00140	48 03 c1	 add	 rax, rcx
  00143	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 455  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * (height - (y_range.start_dst + y_range.len));

  00148	b8 08 00 00 00	 mov	 eax, 8
  0014d	48 6b c0 00	 imul	 rax, rax, 0
  00151	8b 4c 24 50	 mov	 ecx, DWORD PTR y_range$[rsp+8]
  00155	8b 54 24 4c	 mov	 edx, DWORD PTR y_range$[rsp+4]
  00159	03 d1		 add	 edx, ecx
  0015b	8b ca		 mov	 ecx, edx
  0015d	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR height$[rsp]
  00164	2b d1		 sub	 edx, ecx
  00166	8b ca		 mov	 ecx, edx
  00168	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0016f	0f af d1	 imul	 edx, ecx
  00172	8b ca		 mov	 ecx, edx
  00174	48 63 c9	 movsxd	 rcx, ecx
  00177	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0017f	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00183	48 8b c1	 mov	 rax, rcx
  00186	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 456  :     const int y_width = width - crop_right - crop_left;

  0018e	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00192	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00199	2b c8		 sub	 ecx, eax
  0019b	8b c1		 mov	 eax, ecx
  0019d	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a1	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 457  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine -= src_y_pitch_byte) {

  001a8	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  001b3	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  001b5	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  001bc	ff c0		 inc	 eax
  001be	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  001c5	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001cd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001d5	48 03 c8	 add	 rcx, rax
  001d8	48 8b c1	 mov	 rax, rcx
  001db	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001e3	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001eb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001f0	48 2b c8	 sub	 rcx, rax
  001f3	48 8b c1	 mov	 rax, rcx
  001f6	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001fb	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001ff	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  00206	7d 1f		 jge	 SHORT $LN3@convert_rg

; 458  :         avx2_memcpy<false>(dstLine, srcLine, y_width * 3);

  00208	6b 84 24 88 00
	00 00 03	 imul	 eax, DWORD PTR y_width$[rsp], 3
  00210	44 8b c0	 mov	 r8d, eax
  00213	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  00218	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00220	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 459  :     }

  00225	eb 8e		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 460  :     _mm256_zeroupper();

  00227	c5 f8 77	 vzeroupper

; 461  : }

  0022a	48 8b cc	 mov	 rcx, rsp
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00234	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00239	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00241	48 33 cc	 xor	 rcx, rsp
  00244	e8 00 00 00 00	 call	 __security_check_cookie
  00249	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00250	5f		 pop	 rdi
  00251	5e		 pop	 rsi
  00252	c3		 ret	 0
?convert_rgb24r_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb24_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstLine$ = 128
y_width$ = 136
y$5 = 140
$T6 = 152
__$ArrayPad$ = 168
dst$ = 208
src$ = 216
width$ = 224
src_y_pitch_byte$ = 232
src_uv_pitch_byte$ = 240
dst_y_pitch_byte$ = 248
height$ = 256
dst_height$ = 264
thread_id$ = 272
thread_n$ = 280
crop$ = 288
?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb24_avx2

; 433  : void convert_rgb24_to_rgb24_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 434  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 435  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 436  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 437  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 438  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 10
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 439  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 3;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	6b 4c 24 30 03	 imul	 ecx, DWORD PTR crop_left$[rsp], 3
  00131	48 63 c9	 movsxd	 rcx, ecx
  00134	48 03 c1	 add	 rax, rcx
  00137	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 440  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 00	 imul	 rax, rax, 0
  00145	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014c	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00151	48 63 c9	 movsxd	 rcx, ecx
  00154	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015c	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00160	48 8b c1	 mov	 rax, rcx
  00163	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 441  :     const int y_width = width - crop_right - crop_left;

  0016b	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0016f	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00176	2b c8		 sub	 ecx, eax
  00178	8b c1		 mov	 eax, ecx
  0017a	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  0017e	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 442  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00185	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  00190	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00192	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  00199	ff c0		 inc	 eax
  0019b	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  001a2	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001aa	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001b2	48 03 c8	 add	 rcx, rax
  001b5	48 8b c1	 mov	 rax, rcx
  001b8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001c0	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001c8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001cd	48 03 c8	 add	 rcx, rax
  001d0	48 8b c1	 mov	 rax, rcx
  001d3	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001d8	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001dc	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  001e3	7d 1f		 jge	 SHORT $LN3@convert_rg

; 443  :         avx2_memcpy<false>(dstLine, srcLine, y_width * 3);

  001e5	6b 84 24 88 00
	00 00 03	 imul	 eax, DWORD PTR y_width$[rsp], 3
  001ed	44 8b c0	 mov	 r8d, eax
  001f0	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  001f5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001fd	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 444  :     }

  00202	eb 8e		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 445  :     _mm256_zeroupper();

  00204	c5 f8 77	 vzeroupper

; 446  : }

  00207	48 8b cc	 mov	 rcx, rsp
  0020a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00211	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00216	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0021e	48 33 cc	 xor	 rcx, rsp
  00221	e8 00 00 00 00	 call	 __security_check_cookie
  00226	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0022d	5f		 pop	 rdi
  0022e	5e		 pop	 rsi
  0022f	c3		 ret	 0
?convert_rgb24_to_rgb24_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb24_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstLine$ = 128
y_width$ = 136
y$5 = 140
$T6 = 152
__$ArrayPad$ = 168
dst$ = 208
src$ = 216
width$ = 224
src_y_pitch_byte$ = 232
src_uv_pitch_byte$ = 240
dst_y_pitch_byte$ = 248
height$ = 256
dst_height$ = 264
thread_id$ = 272
thread_n$ = 280
crop$ = 288
?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32r_to_rgb32_avx2

; 418  : void convert_rgb32r_to_rgb32_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 419  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 420  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 421  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 422  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 423  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 10
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 424  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1) + crop_left * 4;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 4c 24 48	 mov	 ecx, DWORD PTR y_range$[rsp]
  00112	8b 54 24 50	 mov	 edx, DWORD PTR y_range$[rsp+8]
  00116	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  0011a	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  00121	0f af d1	 imul	 edx, ecx
  00124	8b ca		 mov	 ecx, edx
  00126	48 63 c9	 movsxd	 rcx, ecx
  00129	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00131	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00135	48 03 c1	 add	 rax, rcx
  00138	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  0013c	c1 e1 02	 shl	 ecx, 2
  0013f	48 63 c9	 movsxd	 rcx, ecx
  00142	48 03 c1	 add	 rax, rcx
  00145	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 425  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * (height - (y_range.start_dst + y_range.len));

  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 00	 imul	 rax, rax, 0
  00153	8b 4c 24 50	 mov	 ecx, DWORD PTR y_range$[rsp+8]
  00157	8b 54 24 4c	 mov	 edx, DWORD PTR y_range$[rsp+4]
  0015b	03 d1		 add	 edx, ecx
  0015d	8b ca		 mov	 ecx, edx
  0015f	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR height$[rsp]
  00166	2b d1		 sub	 edx, ecx
  00168	8b ca		 mov	 ecx, edx
  0016a	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  00171	0f af d1	 imul	 edx, ecx
  00174	8b ca		 mov	 ecx, edx
  00176	48 63 c9	 movsxd	 rcx, ecx
  00179	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00181	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00185	48 8b c1	 mov	 rax, rcx
  00188	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 426  :     const int y_width = width - crop_right - crop_left;

  00190	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00194	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0019b	2b c8		 sub	 ecx, eax
  0019d	8b c1		 mov	 eax, ecx
  0019f	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001a3	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 427  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine -= src_y_pitch_byte) {

  001aa	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  001b5	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  001b7	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  001be	ff c0		 inc	 eax
  001c0	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  001c7	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001cf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001d7	48 03 c8	 add	 rcx, rax
  001da	48 8b c1	 mov	 rax, rcx
  001dd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001e5	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ed	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001f2	48 2b c8	 sub	 rcx, rax
  001f5	48 8b c1	 mov	 rax, rcx
  001f8	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001fd	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00201	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  00208	7d 21		 jge	 SHORT $LN3@convert_rg

; 428  :         avx2_memcpy<false>(dstLine, srcLine, y_width * 4);

  0020a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR y_width$[rsp]
  00211	c1 e0 02	 shl	 eax, 2
  00214	44 8b c0	 mov	 r8d, eax
  00217	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  0021c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00224	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 429  :     }

  00229	eb 8c		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 430  :     _mm256_zeroupper();

  0022b	c5 f8 77	 vzeroupper

; 431  : }

  0022e	48 8b cc	 mov	 rcx, rsp
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00238	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0023d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00245	48 33 cc	 xor	 rcx, rsp
  00248	e8 00 00 00 00	 call	 __security_check_cookie
  0024d	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00254	5f		 pop	 rdi
  00255	5e		 pop	 rsi
  00256	c3		 ret	 0
?convert_rgb32r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32r_to_rgb32_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
i$1 = 0
dst_fin$ = 8
dst_aligned_fin$ = 16
y0$ = 32
y1$ = 64
y2$ = 96
y3$ = 128
start_align_diff$ = 160
$T2 = 192
$T3 = 224
$T4 = 256
$T5 = 288
$T6 = 320
dst_tmp$ = 352
$T7 = 384
$T8 = 416
$T9 = 448
$T10 = 480
tv142 = 512
tv150 = 516
tv158 = 520
tv166 = 524
dst$ = 592
src$ = 600
size$ = 608
??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z PROC		; avx2_memcpy<0>

; 47   : static void __forceinline avx2_memcpy(uint8_t *dst, const uint8_t *src, int size) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 8e 00 00 00	 mov	 ecx, 142		; 0000008eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR [rsp+592]

; 48   :     if (size < 128) {

  00038	81 bc 24 60 02
	00 00 80 00 00
	00		 cmp	 DWORD PTR size$[rsp], 128 ; 00000080H
  00043	7d 44		 jge	 SHORT $LN8@avx2_memcp

; 49   :         for (int i = 0; i < size; i++)

  00045	c7 45 00 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0004c	eb 08		 jmp	 SHORT $LN4@avx2_memcp
$LN2@avx2_memcp:
  0004e	8b 45 00	 mov	 eax, DWORD PTR i$1[rbp]
  00051	ff c0		 inc	 eax
  00053	89 45 00	 mov	 DWORD PTR i$1[rbp], eax
$LN4@avx2_memcp:
  00056	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR size$[rsp]
  0005d	39 45 00	 cmp	 DWORD PTR i$1[rbp], eax
  00060	7d 22		 jge	 SHORT $LN3@avx2_memcp

; 50   :             dst[i] = src[i];

  00062	48 63 45 00	 movsxd	 rax, DWORD PTR i$1[rbp]
  00066	48 63 4d 00	 movsxd	 rcx, DWORD PTR i$1[rbp]
  0006a	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00072	4c 8b 84 24 58
	02 00 00	 mov	 r8, QWORD PTR src$[rsp]
  0007a	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0007f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00082	eb ca		 jmp	 SHORT $LN2@avx2_memcp
$LN3@avx2_memcp:

; 51   :         return;

  00084	e9 d2 03 00 00	 jmp	 $LN1@avx2_memcp
$LN8@avx2_memcp:

; 52   :     }
; 53   :     uint8_t *dst_fin = dst + size;

  00089	48 63 84 24 60
	02 00 00	 movsxd	 rax, DWORD PTR size$[rsp]
  00091	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 89 45 08	 mov	 QWORD PTR dst_fin$[rbp], rax

; 54   :     uint8_t *dst_aligned_fin = (uint8_t *)(((size_t)(dst_fin + 31) & ~31) - 128);

  000a3	48 8b 45 08	 mov	 rax, QWORD PTR dst_fin$[rbp]
  000a7	48 83 c0 1f	 add	 rax, 31
  000ab	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000af	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  000b5	48 89 45 10	 mov	 QWORD PTR dst_aligned_fin$[rbp], rax

; 55   :     __m256i y0, y1, y2, y3;
; 56   :     const int start_align_diff = (int)((size_t)dst & 31);

  000b9	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000c1	48 83 e0 1f	 and	 rax, 31
  000c5	89 85 a0 00 00
	00		 mov	 DWORD PTR start_align_diff$[rbp], eax

; 57   :     if (start_align_diff) {

  000cb	83 bd a0 00 00
	00 00		 cmp	 DWORD PTR start_align_diff$[rbp], 0
  000d2	74 78		 je	 SHORT $LN9@avx2_memcp

; 58   :         y0 = _mm256_loadu_si256((const __m256i*)src);

  000d4	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  000dc	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000e0	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  000e8	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  000f0	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 59   :         _mm256_storeu_si256((__m256i*)dst, y0);

  000f5	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  000fd	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00102	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 60   :         dst += 32 - start_align_diff;

  00106	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0010b	2b 85 a0 00 00
	00		 sub	 eax, DWORD PTR start_align_diff$[rbp]
  00111	48 98		 cdqe
  00113	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0011b	48 03 c8	 add	 rcx, rax
  0011e	48 8b c1	 mov	 rax, rcx
  00121	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR dst$[rsp], rax

; 61   :         src += 32 - start_align_diff;

  00129	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0012e	2b 85 a0 00 00
	00		 sub	 eax, DWORD PTR start_align_diff$[rbp]
  00134	48 98		 cdqe
  00136	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0013e	48 03 c8	 add	 rcx, rax
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN9@avx2_memcp:

; 62   :     }
; 63   : #define _mm256_stream_switch_si256(x, ymm) ((use_stream) ? _mm256_stream_si256((x), (ymm)) : _mm256_store_si256((x), (ymm)))
; 64   :     for ( ; dst < dst_aligned_fin; dst += 128, src += 128) {

  0014c	eb 2c		 jmp	 SHORT $LN7@avx2_memcp
$LN5@avx2_memcp:
  0014e	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  00156	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0015c	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR dst$[rsp], rax
  00164	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0016c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00172	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax
$LN7@avx2_memcp:
  0017a	48 8b 45 10	 mov	 rax, QWORD PTR dst_aligned_fin$[rbp]
  0017e	48 39 84 24 50
	02 00 00	 cmp	 QWORD PTR dst$[rsp], rax
  00186	0f 83 ae 01 00
	00		 jae	 $LN6@avx2_memcp

; 65   :         y0 = _mm256_loadu_si256((const __m256i*)(src +  0));

  0018c	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  00194	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00198	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  001a0	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  001a8	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 66   :         y1 = _mm256_loadu_si256((const __m256i*)(src + 32));

  001ad	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001b5	48 83 c0 20	 add	 rax, 32			; 00000020H
  001b9	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001bd	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  001c5	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  001cd	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 67   :         y2 = _mm256_loadu_si256((const __m256i*)(src + 64));

  001d2	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001da	48 83 c0 40	 add	 rax, 64			; 00000040H
  001de	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  001e2	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  001ea	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  001f2	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 68   :         y3 = _mm256_loadu_si256((const __m256i*)(src + 96));

  001f7	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  001ff	48 83 c0 60	 add	 rax, 96			; 00000060H
  00203	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00207	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  0020f	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00217	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 69   :         _mm256_stream_switch_si256((__m256i*)(dst +  0), y0);

  0021f	33 c0		 xor	 eax, eax
  00221	85 c0		 test	 eax, eax
  00223	74 1d		 je	 SHORT $LN11@avx2_memcp
  00225	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0022d	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00232	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  00236	c7 85 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
  00240	eb 1b		 jmp	 SHORT $LN12@avx2_memcp
$LN11@avx2_memcp:
  00242	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0024a	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  0024f	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  00253	c7 85 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
$LN12@avx2_memcp:

; 70   :         _mm256_stream_switch_si256((__m256i*)(dst + 32), y1);

  0025d	33 c0		 xor	 eax, eax
  0025f	85 c0		 test	 eax, eax
  00261	74 21		 je	 SHORT $LN13@avx2_memcp
  00263	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0026b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0026f	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00274	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  00278	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv150[rbp], 0
  00282	eb 1f		 jmp	 SHORT $LN14@avx2_memcp
$LN13@avx2_memcp:
  00284	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0028c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00290	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00295	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  00299	c7 85 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv150[rbp], 0
$LN14@avx2_memcp:

; 71   :         _mm256_stream_switch_si256((__m256i*)(dst + 64), y2);

  002a3	33 c0		 xor	 eax, eax
  002a5	85 c0		 test	 eax, eax
  002a7	74 21		 je	 SHORT $LN15@avx2_memcp
  002a9	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002b1	48 83 c0 40	 add	 rax, 64			; 00000040H
  002b5	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002ba	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  002be	c7 85 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv158[rbp], 0
  002c8	eb 1f		 jmp	 SHORT $LN16@avx2_memcp
$LN15@avx2_memcp:
  002ca	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002d2	48 83 c0 40	 add	 rax, 64			; 00000040H
  002d6	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  002db	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  002df	c7 85 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv158[rbp], 0
$LN16@avx2_memcp:

; 72   :         _mm256_stream_switch_si256((__m256i*)(dst + 96), y3);

  002e9	33 c0		 xor	 eax, eax
  002eb	85 c0		 test	 eax, eax
  002ed	74 24		 je	 SHORT $LN17@avx2_memcp
  002ef	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  002f7	48 83 c0 60	 add	 rax, 96			; 00000060H
  002fb	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00303	c5 fd e7 00	 vmovntdq YMMWORD PTR [rax], ymm0
  00307	c7 85 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv166[rbp], 0
  00311	eb 22		 jmp	 SHORT $LN18@avx2_memcp
$LN17@avx2_memcp:
  00313	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR dst$[rsp]
  0031b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0031f	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00327	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0
  0032b	c7 85 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv166[rbp], 0
$LN18@avx2_memcp:

; 73   :     }

  00335	e9 14 fe ff ff	 jmp	 $LN5@avx2_memcp
$LN6@avx2_memcp:

; 74   : #undef _mm256_stream_switch_si256
; 75   :     uint8_t *dst_tmp = dst_fin - 128;

  0033a	48 8b 45 08	 mov	 rax, QWORD PTR dst_fin$[rbp]
  0033e	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00344	48 89 85 60 01
	00 00		 mov	 QWORD PTR dst_tmp$[rbp], rax

; 76   :     src -= (dst - dst_tmp);

  0034b	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00352	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  0035a	48 2b c8	 sub	 rcx, rax
  0035d	48 8b c1	 mov	 rax, rcx
  00360	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  00368	48 2b c8	 sub	 rcx, rax
  0036b	48 8b c1	 mov	 rax, rcx
  0036e	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR src$[rsp], rax

; 77   :     y0 = _mm256_loadu_si256((const __m256i*)(src +  0));

  00376	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0037e	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00382	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  0038a	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  00392	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 78   :     y1 = _mm256_loadu_si256((const __m256i*)(src + 32));

  00397	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  0039f	48 83 c0 20	 add	 rax, 32			; 00000020H
  003a3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003a7	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  003af	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  003b7	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 79   :     y2 = _mm256_loadu_si256((const __m256i*)(src + 64));

  003bc	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003c4	48 83 c0 40	 add	 rax, 64			; 00000040H
  003c8	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003cc	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  003d4	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  003dc	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR y2$[rbp], ymm0

; 80   :     y3 = _mm256_loadu_si256((const __m256i*)(src + 96));

  003e1	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR src$[rsp]
  003e9	48 83 c0 60	 add	 rax, 96			; 00000060H
  003ed	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  003f1	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  003f9	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  00401	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR y3$[rbp], ymm0

; 81   :     _mm256_storeu_si256((__m256i*)(dst_tmp +  0), y0);

  00409	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00410	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  00415	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 82   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 32), y1);

  00419	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00420	48 83 c0 20	 add	 rax, 32			; 00000020H
  00424	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  00429	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 83   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 64), y2);

  0042d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00434	48 83 c0 40	 add	 rax, 64			; 00000040H
  00438	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR y2$[rbp]
  0043d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 84   :     _mm256_storeu_si256((__m256i*)(dst_tmp + 96), y3);

  00441	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR dst_tmp$[rbp]
  00448	48 83 c0 60	 add	 rax, 96			; 00000060H
  0044c	c5 fe 6f 85 80
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y3$[rbp]
  00454	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 85   :     _mm256_zeroupper();

  00458	c5 f8 77	 vzeroupper
$LN1@avx2_memcp:

; 86   : }

  0045b	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00462	5f		 pop	 rdi
  00463	5d		 pop	 rbp
  00464	c3		 ret	 0
??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ENDP		; avx2_memcpy<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
y_range$ = 72
$T4 = 104
srcLine$ = 120
dstLine$ = 128
y_width$ = 136
y$5 = 140
$T6 = 152
__$ArrayPad$ = 168
dst$ = 208
src$ = 216
width$ = 224
src_y_pitch_byte$ = 232
src_uv_pitch_byte$ = 240
dst_y_pitch_byte$ = 248
height$ = 256
dst_height$ = 264
thread_id$ = 272
thread_n$ = 280
crop$ = 288
?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb32_to_rgb32_avx2

; 403  : void convert_rgb32_to_rgb32_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 404  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 405  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 406  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 407  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 408  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000a6	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000aa	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b1	2b c8		 sub	 ecx, eax
  000b3	8b c1		 mov	 eax, ecx
  000b5	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000bc	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c0	44 8b 8c 24 10
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000c8	44 8b c0	 mov	 r8d, eax
  000cb	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000cf	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  000d7	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000dc	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000e1	48 8b f9	 mov	 rdi, rcx
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 0c 00 00 00	 mov	 ecx, 12
  000ec	f3 a4		 rep movsb
  000ee	48 8d 44 24 48	 lea	 rax, QWORD PTR y_range$[rsp]
  000f3	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T4[rsp]
  000f8	48 8b f8	 mov	 rdi, rax
  000fb	48 8b f1	 mov	 rsi, rcx
  000fe	b9 0c 00 00 00	 mov	 ecx, 12
  00103	f3 a4		 rep movsb

; 409  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 4;

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 00	 imul	 rax, rax, 0
  0010e	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00115	0f af 4c 24 48	 imul	 ecx, DWORD PTR y_range$[rsp]
  0011a	48 63 c9	 movsxd	 rcx, ecx
  0011d	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	48 03 c1	 add	 rax, rcx
  0012c	8b 4c 24 30	 mov	 ecx, DWORD PTR crop_left$[rsp]
  00130	c1 e1 02	 shl	 ecx, 2
  00133	48 63 c9	 movsxd	 rcx, ecx
  00136	48 03 c1	 add	 rax, rcx
  00139	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax

; 410  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013e	b8 08 00 00 00	 mov	 eax, 8
  00143	48 6b c0 00	 imul	 rax, rax, 0
  00147	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014e	0f af 4c 24 4c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax

; 411  :     const int y_width = width - crop_right - crop_left;

  0016d	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  00171	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00178	2b c8		 sub	 ecx, eax
  0017a	8b c1		 mov	 eax, ecx
  0017c	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  00180	89 84 24 88 00
	00 00		 mov	 DWORD PTR y_width$[rsp], eax

; 412  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00187	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$5[rsp], 0
  00192	eb 46		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  00194	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR y$5[rsp]
  0019b	ff c0		 inc	 eax
  0019d	89 84 24 8c 00
	00 00		 mov	 DWORD PTR y$5[rsp], eax
  001a4	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ac	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  001b4	48 03 c8	 add	 rcx, rax
  001b7	48 8b c1	 mov	 rax, rcx
  001ba	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dstLine$[rsp], rax
  001c2	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR srcLine$[rsp]
  001cf	48 03 c8	 add	 rcx, rax
  001d2	48 8b c1	 mov	 rax, rcx
  001d5	48 89 44 24 78	 mov	 QWORD PTR srcLine$[rsp], rax
$LN4@convert_rg:
  001da	8b 44 24 50	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001de	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR y$5[rsp], eax
  001e5	7d 21		 jge	 SHORT $LN3@convert_rg

; 413  :         avx2_memcpy<false>(dstLine, srcLine, y_width * 4);

  001e7	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR y_width$[rsp]
  001ee	c1 e0 02	 shl	 eax, 2
  001f1	44 8b c0	 mov	 r8d, eax
  001f4	48 8b 54 24 78	 mov	 rdx, QWORD PTR srcLine$[rsp]
  001f9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dstLine$[rsp]
  00201	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 414  :     }

  00206	eb 8c		 jmp	 SHORT $LN2@convert_rg
$LN3@convert_rg:

; 415  :     _mm256_zeroupper();

  00208	c5 f8 77	 vzeroupper

; 416  : }

  0020b	48 8b cc	 mov	 rcx, rsp
  0020e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00215	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0021a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00222	48 33 cc	 xor	 rcx, rsp
  00225	e8 00 00 00 00	 call	 __security_check_cookie
  0022a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00231	5f		 pop	 rdi
  00232	5e		 pop	 rsi
  00233	c3		 ret	 0
?convert_rgb32_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb32_to_rgb32_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
y_range$ = 24
$T5 = 56
srcLine$ = 72
dstLine$ = 80
MASK_RGB3_TO_RGB4$ = 128
yMask$ = 192
$T6 = 224
y$7 = 256
ptr_src$8 = 264
ptr_dst$9 = 272
x$10 = 280
x_fin$11 = 284
y0$12 = 288
$T13 = 320
$T14 = 352
$T15 = 384
$T16 = 416
y1$17 = 448
$T18 = 480
$T19 = 512
$T20 = 544
$T21 = 576
y2$22 = 608
$T23 = 640
$T24 = 672
$T25 = 704
$T26 = 736
y3$27 = 768
$T28 = 800
$T29 = 832
$T30 = 864
$T31 = 896
$T32 = 928
$T33 = 960
$T34 = 992
$T35 = 1024
$T36 = 1056
$T37 = 1088
$T38 = 1120
$T39 = 1160
__$ArrayPad$ = 1176
dst$ = 1296
src$ = 1304
width$ = 1312
src_y_pitch_byte$ = 1320
src_uv_pitch_byte$ = 1328
dst_y_pitch_byte$ = 1336
height$ = 1344
dst_height$ = 1352
thread_id$ = 1360
thread_n$ = 1368
crop$ = 1376
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24r_to_rgb32_avx2

; 361  : void convert_rgb24r_to_rgb32_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec f0 04
	00 00		 sub	 rsp, 1264		; 000004f0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 3c 01 00 00	 mov	 ecx, 316		; 0000013cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1296]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 98 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 362  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 363  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 364  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 365  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 366  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ab	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ae	8b 8c 24 40 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b5	2b c8		 sub	 ecx, eax
  000b7	8b c1		 mov	 eax, ecx
  000b9	8b 8c 24 58 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c0	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c4	44 8b 8c 24 50
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000cc	44 8b c0	 mov	 r8d, eax
  000cf	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000d2	48 8d 8d 88 04
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  000d9	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000de	48 8d 4d 38	 lea	 rcx, QWORD PTR $T5[rbp]
  000e2	48 8b f9	 mov	 rdi, rcx
  000e5	48 8b f0	 mov	 rsi, rax
  000e8	b9 0c 00 00 00	 mov	 ecx, 12
  000ed	f3 a4		 rep movsb
  000ef	48 8d 45 18	 lea	 rax, QWORD PTR y_range$[rbp]
  000f3	48 8d 4d 38	 lea	 rcx, QWORD PTR $T5[rbp]
  000f7	48 8b f8	 mov	 rdi, rax
  000fa	48 8b f1	 mov	 rsi, rcx
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb

; 367  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * ((y_range.start_src + y_range.len) - 1) + crop_left * 3;

  00104	b8 08 00 00 00	 mov	 eax, 8
  00109	48 6b c0 00	 imul	 rax, rax, 0
  0010d	8b 4d 18	 mov	 ecx, DWORD PTR y_range$[rbp]
  00110	8b 55 20	 mov	 edx, DWORD PTR y_range$[rbp+8]
  00113	8d 4c 11 ff	 lea	 ecx, DWORD PTR [rcx+rdx-1]
  00117	8b 94 24 28 05
	00 00		 mov	 edx, DWORD PTR src_y_pitch_byte$[rsp]
  0011e	0f af d1	 imul	 edx, ecx
  00121	8b ca		 mov	 ecx, edx
  00123	48 63 c9	 movsxd	 rcx, ecx
  00126	48 8b 94 24 18
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0012e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00132	48 03 c1	 add	 rax, rcx
  00135	6b 4d 00 03	 imul	 ecx, DWORD PTR crop_left$[rbp], 3
  00139	48 63 c9	 movsxd	 rcx, ecx
  0013c	48 03 c1	 add	 rax, rcx
  0013f	48 89 45 48	 mov	 QWORD PTR srcLine$[rbp], rax

; 368  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * (height - (y_range.start_dst + y_range.len));

  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	48 6b c0 00	 imul	 rax, rax, 0
  0014c	8b 4d 20	 mov	 ecx, DWORD PTR y_range$[rbp+8]
  0014f	8b 55 1c	 mov	 edx, DWORD PTR y_range$[rbp+4]
  00152	03 d1		 add	 edx, ecx
  00154	8b ca		 mov	 ecx, edx
  00156	8b 94 24 40 05
	00 00		 mov	 edx, DWORD PTR height$[rsp]
  0015d	2b d1		 sub	 edx, ecx
  0015f	8b ca		 mov	 ecx, edx
  00161	8b 94 24 38 05
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  00168	0f af d1	 imul	 edx, ecx
  0016b	8b ca		 mov	 ecx, edx
  0016d	48 63 c9	 movsxd	 rcx, ecx
  00170	48 8b 94 24 10
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00178	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0017c	48 8b c1	 mov	 rax, rcx
  0017f	48 89 45 50	 mov	 QWORD PTR dstLine$[rbp], rax

; 369  :     alignas(32) const char MASK_RGB3_TO_RGB4[] = {
; 370  :         0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1,

  00183	c6 85 80 00 00
	00 00		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp], 0
  0018a	c6 85 81 00 00
	00 01		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+1], 1
  00191	c6 85 82 00 00
	00 02		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+2], 2
  00198	c6 85 83 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+3], -1
  0019f	c6 85 84 00 00
	00 03		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+4], 3
  001a6	c6 85 85 00 00
	00 04		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+5], 4
  001ad	c6 85 86 00 00
	00 05		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+6], 5
  001b4	c6 85 87 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+7], -1
  001bb	c6 85 88 00 00
	00 06		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+8], 6
  001c2	c6 85 89 00 00
	00 07		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+9], 7
  001c9	c6 85 8a 00 00
	00 08		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+10], 8
  001d0	c6 85 8b 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+11], -1
  001d7	c6 85 8c 00 00
	00 09		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+12], 9
  001de	c6 85 8d 00 00
	00 0a		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+13], 10
  001e5	c6 85 8e 00 00
	00 0b		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+14], 11
  001ec	c6 85 8f 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+15], -1

; 371  :         0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1

  001f3	c6 85 90 00 00
	00 00		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+16], 0
  001fa	c6 85 91 00 00
	00 01		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+17], 1
  00201	c6 85 92 00 00
	00 02		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+18], 2
  00208	c6 85 93 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+19], -1
  0020f	c6 85 94 00 00
	00 03		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+20], 3
  00216	c6 85 95 00 00
	00 04		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+21], 4
  0021d	c6 85 96 00 00
	00 05		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+22], 5
  00224	c6 85 97 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+23], -1
  0022b	c6 85 98 00 00
	00 06		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+24], 6
  00232	c6 85 99 00 00
	00 07		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+25], 7
  00239	c6 85 9a 00 00
	00 08		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+26], 8
  00240	c6 85 9b 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+27], -1
  00247	c6 85 9c 00 00
	00 09		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+28], 9
  0024e	c6 85 9d 00 00
	00 0a		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+29], 10
  00255	c6 85 9e 00 00
	00 0b		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+30], 11
  0025c	c6 85 9f 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+31], -1

; 372  :     };
; 373  :     __m256i yMask = _mm256_load_si256((__m256i*)MASK_RGB3_TO_RGB4);

  00263	c5 fd 6f 85 80
	00 00 00	 vmovdqa ymm0, YMMWORD PTR MASK_RGB3_TO_RGB4$[rbp]
  0026b	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00273	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  0027b	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR yMask$[rbp], ymm0

; 374  :     for (int y = 0; y < y_range.len; y++, srcLine -= src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  00283	c7 85 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$7[rbp], 0
  0028d	eb 3a		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0028f	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR y$7[rbp]
  00295	ff c0		 inc	 eax
  00297	89 85 00 01 00
	00		 mov	 DWORD PTR y$7[rbp], eax
  0029d	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  002a5	48 8b 4d 48	 mov	 rcx, QWORD PTR srcLine$[rbp]
  002a9	48 2b c8	 sub	 rcx, rax
  002ac	48 8b c1	 mov	 rax, rcx
  002af	48 89 45 48	 mov	 QWORD PTR srcLine$[rbp], rax
  002b3	48 63 84 24 38
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  002bb	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$[rbp]
  002bf	48 03 c8	 add	 rcx, rax
  002c2	48 8b c1	 mov	 rax, rcx
  002c5	48 89 45 50	 mov	 QWORD PTR dstLine$[rbp], rax
$LN4@convert_rg:
  002c9	8b 45 20	 mov	 eax, DWORD PTR y_range$[rbp+8]
  002cc	39 85 00 01 00
	00		 cmp	 DWORD PTR y$7[rbp], eax
  002d2	0f 8d 1f 04 00
	00		 jge	 $LN3@convert_rg

; 375  :         uint8_t *ptr_src = srcLine;

  002d8	48 8b 45 48	 mov	 rax, QWORD PTR srcLine$[rbp]
  002dc	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax

; 376  :         uint8_t *ptr_dst = dstLine;

  002e3	48 8b 45 50	 mov	 rax, QWORD PTR dstLine$[rbp]
  002e7	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax

; 377  :         int x = 0, x_fin = width - crop_left - crop_right - 32;

  002ee	c7 85 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR x$10[rbp], 0
  002f8	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  002fb	8b 8c 24 20 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00302	2b c8		 sub	 ecx, eax
  00304	8b c1		 mov	 eax, ecx
  00306	2b 45 08	 sub	 eax, DWORD PTR crop_right$[rbp]
  00309	83 e8 20	 sub	 eax, 32			; 00000020H
  0030c	89 85 1c 01 00
	00		 mov	 DWORD PTR x_fin$11[rbp], eax

; 378  :         for ( ; x < x_fin; x += 32, ptr_dst += 128, ptr_src += 96) {

  00312	eb 35		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  00314	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR x$10[rbp]
  0031a	83 c0 20	 add	 eax, 32			; 00000020H
  0031d	89 85 18 01 00
	00		 mov	 DWORD PTR x$10[rbp], eax
  00323	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0032a	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00330	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax
  00337	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  0033e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00342	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax
$LN7@convert_rg:
  00349	8b 85 1c 01 00
	00		 mov	 eax, DWORD PTR x_fin$11[rbp]
  0034f	39 85 18 01 00
	00		 cmp	 DWORD PTR x$10[rbp], eax
  00355	0f 8d 16 03 00
	00		 jge	 $LN6@convert_rg

; 379  :             __m256i y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+48)), _mm_loadu_si128((__m128i*)(ptr_src+ 0))); //384,   0

  0035b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00362	48 83 c0 30	 add	 rax, 48			; 00000030H
  00366	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0036a	66 0f 7f 85 80
	01 00 00	 movdqa	 XMMWORD PTR $T15[rbp], xmm0
  00372	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00379	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0037d	66 0f 7f 85 40
	01 00 00	 movdqa	 XMMWORD PTR $T13[rbp], xmm0
  00385	c5 f8 10 85 40
	01 00 00	 vmovups xmm0, XMMWORD PTR $T13[rbp]
  0038d	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  00395	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  0039d	c4 e3 7d 18 85
	80 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T15[rbp], 1
  003a7	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  003af	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  003b7	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y0$12[rbp], ymm0

; 380  :             __m256i y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+64)), _mm_loadu_si128((__m128i*)(ptr_src+16))); //512, 128

  003bf	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  003c6	48 83 c0 40	 add	 rax, 64			; 00000040H
  003ca	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003ce	66 0f 7f 85 20
	02 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  003d6	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  003dd	48 83 c0 10	 add	 rax, 16
  003e1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003e5	66 0f 7f 85 e0
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  003ed	c5 f8 10 85 e0
	01 00 00	 vmovups xmm0, XMMWORD PTR $T18[rbp]
  003f5	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  003fd	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  00405	c4 e3 7d 18 85
	20 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T20[rbp], 1
  0040f	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  00417	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  0041f	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 381  :             __m256i y2 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+80)), _mm_loadu_si128((__m128i*)(ptr_src+32))); //640, 256

  00427	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  0042e	48 83 c0 50	 add	 rax, 80			; 00000050H
  00432	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00436	66 0f 7f 85 c0
	02 00 00	 movdqa	 XMMWORD PTR $T25[rbp], xmm0
  0043e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00445	48 83 c0 20	 add	 rax, 32			; 00000020H
  00449	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0044d	66 0f 7f 85 80
	02 00 00	 movdqa	 XMMWORD PTR $T23[rbp], xmm0
  00455	c5 f8 10 85 80
	02 00 00	 vmovups xmm0, XMMWORD PTR $T23[rbp]
  0045d	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00465	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0046d	c4 e3 7d 18 85
	c0 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T25[rbp], 1
  00477	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0047f	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00487	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 382  :             __m256i y3 = _mm256_srli_si256(y2, 4);

  0048f	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  00497	c5 fd 73 d8 04	 vpsrldq ymm0, ymm0, 4
  0049c	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  004a4	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  004ac	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR y3$27[rbp], ymm0

; 383  :             y3 = _mm256_shuffle_epi8(y3, yMask); // 896, 384

  004b4	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR y3$27[rbp]
  004bc	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  004c5	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  004cd	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  004d5	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR y3$27[rbp], ymm0

; 384  :             y2 = _mm256_alignr_epi8(y2, y1, 8);

  004dd	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  004e5	c4 e3 7d 0f 85
	c0 01 00 00 08	 vpalignr ymm0, ymm0, YMMWORD PTR y1$17[rbp], 8
  004ef	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  004f7	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  004ff	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 385  :             y2 = _mm256_shuffle_epi8(y2, yMask); // 768, 256

  00507	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  0050f	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  00518	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  00520	c5 fe 6f 85 80
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00528	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 386  :             y1 = _mm256_alignr_epi8(y1, y0, 12);

  00530	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$17[rbp]
  00538	c4 e3 7d 0f 85
	20 01 00 00 0c	 vpalignr ymm0, ymm0, YMMWORD PTR y0$12[rbp], 12
  00542	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  0054a	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00552	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 387  :             y1 = _mm256_shuffle_epi8(y1, yMask); // 640, 128

  0055a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$17[rbp]
  00562	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  0056b	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  00573	c5 fe 6f 85 c0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  0057b	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 388  :             y0 = _mm256_shuffle_epi8(y0, yMask); // 512,   0

  00583	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  0058b	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  00594	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  0059c	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  005a4	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y0$12[rbp], ymm0

; 389  :             _mm256_storeu_si256((__m256i*)(ptr_dst +  0), _mm256_permute2x128_si256(y0, y1, (2<<4) | 0)); // 128,   0

  005ac	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  005b4	c4 e3 7d 46 85
	c0 01 00 00 20	 vperm2i128 ymm0, ymm0, YMMWORD PTR y1$17[rbp], 32 ; 00000020H
  005be	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T35[rbp], ymm0
  005c6	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  005cd	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T35[rbp]
  005d5	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 390  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 32), _mm256_permute2x128_si256(y2, y3, (2<<4) | 0)); // 384, 256

  005d9	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  005e1	c4 e3 7d 46 85
	00 03 00 00 20	 vperm2i128 ymm0, ymm0, YMMWORD PTR y3$27[rbp], 32 ; 00000020H
  005eb	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005f3	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  005fa	48 83 c0 20	 add	 rax, 32			; 00000020H
  005fe	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  00606	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 391  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 64), _mm256_permute2x128_si256(y0, y1, (3<<4) | 1)); // 640, 512

  0060a	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  00612	c4 e3 7d 46 85
	c0 01 00 00 31	 vperm2i128 ymm0, ymm0, YMMWORD PTR y1$17[rbp], 49 ; 00000031H
  0061c	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  00624	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0062b	48 83 c0 40	 add	 rax, 64			; 00000040H
  0062f	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  00637	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 392  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 96), _mm256_permute2x128_si256(y2, y3, (3<<4) | 1)); // 896, 768

  0063b	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  00643	c4 e3 7d 46 85
	00 03 00 00 31	 vperm2i128 ymm0, ymm0, YMMWORD PTR y3$27[rbp], 49 ; 00000031H
  0064d	c5 fe 7f 85 60
	04 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  00655	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0065c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00660	c5 fe 6f 85 60
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  00668	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 393  :         }

  0066c	e9 a3 fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 394  :         x_fin = width - crop_left - crop_right;

  00671	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00674	8b 8c 24 20 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0067b	2b c8		 sub	 ecx, eax
  0067d	8b c1		 mov	 eax, ecx
  0067f	2b 45 08	 sub	 eax, DWORD PTR crop_right$[rbp]
  00682	89 85 1c 01 00
	00		 mov	 DWORD PTR x_fin$11[rbp], eax

; 395  :         for ( ; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  00688	eb 32		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  0068a	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR x$10[rbp]
  00690	ff c0		 inc	 eax
  00692	89 85 18 01 00
	00		 mov	 DWORD PTR x$10[rbp], eax
  00698	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0069f	48 83 c0 04	 add	 rax, 4
  006a3	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax
  006aa	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  006b1	48 83 c0 03	 add	 rax, 3
  006b5	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax
$LN10@convert_rg:
  006bc	8b 85 1c 01 00
	00		 mov	 eax, DWORD PTR x_fin$11[rbp]
  006c2	39 85 18 01 00
	00		 cmp	 DWORD PTR x$10[rbp], eax
  006c8	7d 28		 jge	 SHORT $LN9@convert_rg

; 396  :             *(int *)ptr_dst = *(int *)ptr_src;

  006ca	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  006d1	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ptr_src$8[rbp]
  006d8	8b 09		 mov	 ecx, DWORD PTR [rcx]
  006da	89 08		 mov	 DWORD PTR [rax], ecx

; 397  :             ptr_dst[3] = 0;

  006dc	b8 01 00 00 00	 mov	 eax, 1
  006e1	48 6b c0 03	 imul	 rax, rax, 3
  006e5	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR ptr_dst$9[rbp]
  006ec	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 398  :         }

  006f0	eb 98		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 399  :     }

  006f2	e9 98 fb ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 400  :     _mm256_zeroupper();

  006f7	c5 f8 77	 vzeroupper

; 401  : }

  006fa	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00705	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0070a	48 8b 8d 98 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00711	48 33 cc	 xor	 rcx, rsp
  00714	e8 00 00 00 00	 call	 __security_check_cookie
  00719	48 81 c4 f0 04
	00 00		 add	 rsp, 1264		; 000004f0H
  00720	5f		 pop	 rdi
  00721	5e		 pop	 rsi
  00722	5d		 pop	 rbp
  00723	c3		 ret	 0
?convert_rgb24r_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24r_to_rgb32_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
y_range$ = 24
$T5 = 56
srcLine$ = 72
dstLine$ = 80
MASK_RGB3_TO_RGB4$ = 128
yMask$ = 192
$T6 = 224
y$7 = 256
ptr_src$8 = 264
ptr_dst$9 = 272
x$10 = 280
x_fin$11 = 284
y0$12 = 288
$T13 = 320
$T14 = 352
$T15 = 384
$T16 = 416
y1$17 = 448
$T18 = 480
$T19 = 512
$T20 = 544
$T21 = 576
y2$22 = 608
$T23 = 640
$T24 = 672
$T25 = 704
$T26 = 736
y3$27 = 768
$T28 = 800
$T29 = 832
$T30 = 864
$T31 = 896
$T32 = 928
$T33 = 960
$T34 = 992
$T35 = 1024
$T36 = 1056
$T37 = 1088
$T38 = 1120
$T39 = 1160
__$ArrayPad$ = 1176
dst$ = 1296
src$ = 1304
width$ = 1312
src_y_pitch_byte$ = 1320
src_uv_pitch_byte$ = 1328
dst_y_pitch_byte$ = 1336
height$ = 1344
dst_height$ = 1352
thread_id$ = 1360
thread_n$ = 1368
crop$ = 1376
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_rgb24_to_rgb32_avx2

; 319  : void convert_rgb24_to_rgb32_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec f0 04
	00 00		 sub	 rsp, 1264		; 000004f0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 3c 01 00 00	 mov	 ecx, 316		; 0000013cH
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1296]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 98 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 320  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 321  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 322  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 323  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 324  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000ab	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000ae	8b 8c 24 40 05
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000b5	2b c8		 sub	 ecx, eax
  000b7	8b c1		 mov	 eax, ecx
  000b9	8b 8c 24 58 05
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000c0	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c4	44 8b 8c 24 50
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000cc	44 8b c0	 mov	 r8d, eax
  000cf	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000d2	48 8d 8d 88 04
	00 00		 lea	 rcx, QWORD PTR $T39[rbp]
  000d9	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000de	48 8d 4d 38	 lea	 rcx, QWORD PTR $T5[rbp]
  000e2	48 8b f9	 mov	 rdi, rcx
  000e5	48 8b f0	 mov	 rsi, rax
  000e8	b9 0c 00 00 00	 mov	 ecx, 12
  000ed	f3 a4		 rep movsb
  000ef	48 8d 45 18	 lea	 rax, QWORD PTR y_range$[rbp]
  000f3	48 8d 4d 38	 lea	 rcx, QWORD PTR $T5[rbp]
  000f7	48 8b f8	 mov	 rdi, rax
  000fa	48 8b f1	 mov	 rsi, rcx
  000fd	b9 0c 00 00 00	 mov	 ecx, 12
  00102	f3 a4		 rep movsb

; 325  :     uint8_t *srcLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left * 3;

  00104	b8 08 00 00 00	 mov	 eax, 8
  00109	48 6b c0 00	 imul	 rax, rax, 0
  0010d	8b 8c 24 28 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00114	0f af 4d 18	 imul	 ecx, DWORD PTR y_range$[rbp]
  00118	48 63 c9	 movsxd	 rcx, ecx
  0011b	48 8b 94 24 18
	05 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00123	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00127	48 03 c1	 add	 rax, rcx
  0012a	6b 4d 00 03	 imul	 ecx, DWORD PTR crop_left$[rbp], 3
  0012e	48 63 c9	 movsxd	 rcx, ecx
  00131	48 03 c1	 add	 rax, rcx
  00134	48 89 45 48	 mov	 QWORD PTR srcLine$[rbp], rax

; 326  :     uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00138	b8 08 00 00 00	 mov	 eax, 8
  0013d	48 6b c0 00	 imul	 rax, rax, 0
  00141	8b 8c 24 38 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00148	0f af 4d 1c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  0014c	48 63 c9	 movsxd	 rcx, ecx
  0014f	48 8b 94 24 10
	05 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00157	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0015b	48 8b c1	 mov	 rax, rcx
  0015e	48 89 45 50	 mov	 QWORD PTR dstLine$[rbp], rax

; 327  :     alignas(32) const char MASK_RGB3_TO_RGB4[] ={
; 328  :         0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1,

  00162	c6 85 80 00 00
	00 00		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp], 0
  00169	c6 85 81 00 00
	00 01		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+1], 1
  00170	c6 85 82 00 00
	00 02		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+2], 2
  00177	c6 85 83 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+3], -1
  0017e	c6 85 84 00 00
	00 03		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+4], 3
  00185	c6 85 85 00 00
	00 04		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+5], 4
  0018c	c6 85 86 00 00
	00 05		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+6], 5
  00193	c6 85 87 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+7], -1
  0019a	c6 85 88 00 00
	00 06		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+8], 6
  001a1	c6 85 89 00 00
	00 07		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+9], 7
  001a8	c6 85 8a 00 00
	00 08		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+10], 8
  001af	c6 85 8b 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+11], -1
  001b6	c6 85 8c 00 00
	00 09		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+12], 9
  001bd	c6 85 8d 00 00
	00 0a		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+13], 10
  001c4	c6 85 8e 00 00
	00 0b		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+14], 11
  001cb	c6 85 8f 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+15], -1

; 329  :         0, 1, 2, -1, 3, 4, 5, -1, 6, 7, 8, -1, 9, 10, 11, -1

  001d2	c6 85 90 00 00
	00 00		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+16], 0
  001d9	c6 85 91 00 00
	00 01		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+17], 1
  001e0	c6 85 92 00 00
	00 02		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+18], 2
  001e7	c6 85 93 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+19], -1
  001ee	c6 85 94 00 00
	00 03		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+20], 3
  001f5	c6 85 95 00 00
	00 04		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+21], 4
  001fc	c6 85 96 00 00
	00 05		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+22], 5
  00203	c6 85 97 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+23], -1
  0020a	c6 85 98 00 00
	00 06		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+24], 6
  00211	c6 85 99 00 00
	00 07		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+25], 7
  00218	c6 85 9a 00 00
	00 08		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+26], 8
  0021f	c6 85 9b 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+27], -1
  00226	c6 85 9c 00 00
	00 09		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+28], 9
  0022d	c6 85 9d 00 00
	00 0a		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+29], 10
  00234	c6 85 9e 00 00
	00 0b		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+30], 11
  0023b	c6 85 9f 00 00
	00 ff		 mov	 BYTE PTR MASK_RGB3_TO_RGB4$[rbp+31], -1

; 330  :     };
; 331  :     __m256i yMask = _mm256_load_si256((__m256i*)MASK_RGB3_TO_RGB4);

  00242	c5 fd 6f 85 80
	00 00 00	 vmovdqa ymm0, YMMWORD PTR MASK_RGB3_TO_RGB4$[rbp]
  0024a	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00252	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  0025a	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR yMask$[rbp], ymm0

; 332  :     for (int y = 0; y < y_range.len; y++, dstLine += dst_y_pitch_byte, srcLine += src_y_pitch_byte) {

  00262	c7 85 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR y$7[rbp], 0
  0026c	eb 3a		 jmp	 SHORT $LN4@convert_rg
$LN2@convert_rg:
  0026e	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR y$7[rbp]
  00274	ff c0		 inc	 eax
  00276	89 85 00 01 00
	00		 mov	 DWORD PTR y$7[rbp], eax
  0027c	48 63 84 24 38
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00284	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$[rbp]
  00288	48 03 c8	 add	 rcx, rax
  0028b	48 8b c1	 mov	 rax, rcx
  0028e	48 89 45 50	 mov	 QWORD PTR dstLine$[rbp], rax
  00292	48 63 84 24 28
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0029a	48 8b 4d 48	 mov	 rcx, QWORD PTR srcLine$[rbp]
  0029e	48 03 c8	 add	 rcx, rax
  002a1	48 8b c1	 mov	 rax, rcx
  002a4	48 89 45 48	 mov	 QWORD PTR srcLine$[rbp], rax
$LN4@convert_rg:
  002a8	8b 45 20	 mov	 eax, DWORD PTR y_range$[rbp+8]
  002ab	39 85 00 01 00
	00		 cmp	 DWORD PTR y$7[rbp], eax
  002b1	0f 8d 1f 04 00
	00		 jge	 $LN3@convert_rg

; 333  :         uint8_t *ptr_src = srcLine;

  002b7	48 8b 45 48	 mov	 rax, QWORD PTR srcLine$[rbp]
  002bb	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax

; 334  :         uint8_t *ptr_dst = dstLine;

  002c2	48 8b 45 50	 mov	 rax, QWORD PTR dstLine$[rbp]
  002c6	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax

; 335  :         int x = 0, x_fin = width - crop_left - crop_right - 32;

  002cd	c7 85 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR x$10[rbp], 0
  002d7	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  002da	8b 8c 24 20 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  002e1	2b c8		 sub	 ecx, eax
  002e3	8b c1		 mov	 eax, ecx
  002e5	2b 45 08	 sub	 eax, DWORD PTR crop_right$[rbp]
  002e8	83 e8 20	 sub	 eax, 32			; 00000020H
  002eb	89 85 1c 01 00
	00		 mov	 DWORD PTR x_fin$11[rbp], eax

; 336  :         for (; x < x_fin; x += 32, ptr_dst += 128, ptr_src += 96) {

  002f1	eb 35		 jmp	 SHORT $LN7@convert_rg
$LN5@convert_rg:
  002f3	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR x$10[rbp]
  002f9	83 c0 20	 add	 eax, 32			; 00000020H
  002fc	89 85 18 01 00
	00		 mov	 DWORD PTR x$10[rbp], eax
  00302	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  00309	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0030f	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax
  00316	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  0031d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00321	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax
$LN7@convert_rg:
  00328	8b 85 1c 01 00
	00		 mov	 eax, DWORD PTR x_fin$11[rbp]
  0032e	39 85 18 01 00
	00		 cmp	 DWORD PTR x$10[rbp], eax
  00334	0f 8d 16 03 00
	00		 jge	 $LN6@convert_rg

; 337  :             __m256i y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+48)), _mm_loadu_si128((__m128i*)(ptr_src+ 0))); //384,   0

  0033a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00341	48 83 c0 30	 add	 rax, 48			; 00000030H
  00345	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00349	66 0f 7f 85 80
	01 00 00	 movdqa	 XMMWORD PTR $T15[rbp], xmm0
  00351	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00358	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0035c	66 0f 7f 85 40
	01 00 00	 movdqa	 XMMWORD PTR $T13[rbp], xmm0
  00364	c5 f8 10 85 40
	01 00 00	 vmovups xmm0, XMMWORD PTR $T13[rbp]
  0036c	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T14[rbp], ymm0
  00374	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T14[rbp]
  0037c	c4 e3 7d 18 85
	80 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T15[rbp], 1
  00386	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  0038e	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00396	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y0$12[rbp], ymm0

; 338  :             __m256i y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+64)), _mm_loadu_si128((__m128i*)(ptr_src+16))); //512, 128

  0039e	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  003a5	48 83 c0 40	 add	 rax, 64			; 00000040H
  003a9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003ad	66 0f 7f 85 20
	02 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  003b5	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  003bc	48 83 c0 10	 add	 rax, 16
  003c0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003c4	66 0f 7f 85 e0
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  003cc	c5 f8 10 85 e0
	01 00 00	 vmovups xmm0, XMMWORD PTR $T18[rbp]
  003d4	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  003dc	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  003e4	c4 e3 7d 18 85
	20 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T20[rbp], 1
  003ee	c5 fe 7f 85 40
	02 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  003f6	c5 fe 6f 85 40
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  003fe	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 339  :             __m256i y2 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(ptr_src+80)), _mm_loadu_si128((__m128i*)(ptr_src+32))); //640, 256

  00406	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  0040d	48 83 c0 50	 add	 rax, 80			; 00000050H
  00411	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00415	66 0f 7f 85 c0
	02 00 00	 movdqa	 XMMWORD PTR $T25[rbp], xmm0
  0041d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00424	48 83 c0 20	 add	 rax, 32			; 00000020H
  00428	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0042c	66 0f 7f 85 80
	02 00 00	 movdqa	 XMMWORD PTR $T23[rbp], xmm0
  00434	c5 f8 10 85 80
	02 00 00	 vmovups xmm0, XMMWORD PTR $T23[rbp]
  0043c	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00444	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0044c	c4 e3 7d 18 85
	c0 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T25[rbp], 1
  00456	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0045e	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00466	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 340  :             __m256i y3 = _mm256_srli_si256(y2, 4);

  0046e	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  00476	c5 fd 73 d8 04	 vpsrldq ymm0, ymm0, 4
  0047b	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  00483	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  0048b	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR y3$27[rbp], ymm0

; 341  :             y3 = _mm256_shuffle_epi8(y3, yMask); // 896, 384

  00493	c5 fe 6f 85 00
	03 00 00	 vmovdqu ymm0, YMMWORD PTR y3$27[rbp]
  0049b	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  004a4	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  004ac	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  004b4	c5 fe 7f 85 00
	03 00 00	 vmovdqu YMMWORD PTR y3$27[rbp], ymm0

; 342  :             y2 = _mm256_alignr_epi8(y2, y1, 8);

  004bc	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  004c4	c4 e3 7d 0f 85
	c0 01 00 00 08	 vpalignr ymm0, ymm0, YMMWORD PTR y1$17[rbp], 8
  004ce	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  004d6	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  004de	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 343  :             y2 = _mm256_shuffle_epi8(y2, yMask); // 768, 256

  004e6	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  004ee	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  004f7	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  004ff	c5 fe 6f 85 80
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00507	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR y2$22[rbp], ymm0

; 344  :             y1 = _mm256_alignr_epi8(y1, y0, 12);

  0050f	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$17[rbp]
  00517	c4 e3 7d 0f 85
	20 01 00 00 0c	 vpalignr ymm0, ymm0, YMMWORD PTR y0$12[rbp], 12
  00521	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  00529	c5 fe 6f 85 a0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  00531	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 345  :             y1 = _mm256_shuffle_epi8(y1, yMask); // 640, 128

  00539	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y1$17[rbp]
  00541	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  0054a	c5 fe 7f 85 c0
	03 00 00	 vmovdqu YMMWORD PTR $T33[rbp], ymm0
  00552	c5 fe 6f 85 c0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T33[rbp]
  0055a	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR y1$17[rbp], ymm0

; 346  :             y0 = _mm256_shuffle_epi8(y0, yMask); // 512,   0

  00562	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  0056a	c4 e2 7d 00 85
	c0 00 00 00	 vpshufb ymm0, ymm0, YMMWORD PTR yMask$[rbp]
  00573	c5 fe 7f 85 e0
	03 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  0057b	c5 fe 6f 85 e0
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T34[rbp]
  00583	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y0$12[rbp], ymm0

; 347  :             _mm256_storeu_si256((__m256i*)(ptr_dst +  0), _mm256_permute2x128_si256(y0, y1, (2<<4) | 0)); // 128,   0

  0058b	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  00593	c4 e3 7d 46 85
	c0 01 00 00 20	 vperm2i128 ymm0, ymm0, YMMWORD PTR y1$17[rbp], 32 ; 00000020H
  0059d	c5 fe 7f 85 00
	04 00 00	 vmovdqu YMMWORD PTR $T35[rbp], ymm0
  005a5	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  005ac	c5 fe 6f 85 00
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T35[rbp]
  005b4	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 348  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 32), _mm256_permute2x128_si256(y2, y3, (2<<4) | 0)); // 384, 256

  005b8	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  005c0	c4 e3 7d 46 85
	00 03 00 00 20	 vperm2i128 ymm0, ymm0, YMMWORD PTR y3$27[rbp], 32 ; 00000020H
  005ca	c5 fe 7f 85 20
	04 00 00	 vmovdqu YMMWORD PTR $T36[rbp], ymm0
  005d2	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  005d9	48 83 c0 20	 add	 rax, 32			; 00000020H
  005dd	c5 fe 6f 85 20
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T36[rbp]
  005e5	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 349  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 64), _mm256_permute2x128_si256(y0, y1, (3<<4) | 1)); // 640, 512

  005e9	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y0$12[rbp]
  005f1	c4 e3 7d 46 85
	c0 01 00 00 31	 vperm2i128 ymm0, ymm0, YMMWORD PTR y1$17[rbp], 49 ; 00000031H
  005fb	c5 fe 7f 85 40
	04 00 00	 vmovdqu YMMWORD PTR $T37[rbp], ymm0
  00603	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0060a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0060e	c5 fe 6f 85 40
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T37[rbp]
  00616	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 350  :             _mm256_storeu_si256((__m256i*)(ptr_dst + 96), _mm256_permute2x128_si256(y2, y3, (3<<4) | 1)); // 896, 768

  0061a	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR y2$22[rbp]
  00622	c4 e3 7d 46 85
	00 03 00 00 31	 vperm2i128 ymm0, ymm0, YMMWORD PTR y3$27[rbp], 49 ; 00000031H
  0062c	c5 fe 7f 85 60
	04 00 00	 vmovdqu YMMWORD PTR $T38[rbp], ymm0
  00634	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0063b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0063f	c5 fe 6f 85 60
	04 00 00	 vmovdqu ymm0, YMMWORD PTR $T38[rbp]
  00647	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 351  :         }

  0064b	e9 a3 fc ff ff	 jmp	 $LN5@convert_rg
$LN6@convert_rg:

; 352  :         x_fin = width - crop_left - crop_right;

  00650	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  00653	8b 8c 24 20 05
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0065a	2b c8		 sub	 ecx, eax
  0065c	8b c1		 mov	 eax, ecx
  0065e	2b 45 08	 sub	 eax, DWORD PTR crop_right$[rbp]
  00661	89 85 1c 01 00
	00		 mov	 DWORD PTR x_fin$11[rbp], eax

; 353  :         for (; x < x_fin; x++, ptr_dst += 4, ptr_src += 3) {

  00667	eb 32		 jmp	 SHORT $LN10@convert_rg
$LN8@convert_rg:
  00669	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR x$10[rbp]
  0066f	ff c0		 inc	 eax
  00671	89 85 18 01 00
	00		 mov	 DWORD PTR x$10[rbp], eax
  00677	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  0067e	48 83 c0 04	 add	 rax, 4
  00682	48 89 85 10 01
	00 00		 mov	 QWORD PTR ptr_dst$9[rbp], rax
  00689	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR ptr_src$8[rbp]
  00690	48 83 c0 03	 add	 rax, 3
  00694	48 89 85 08 01
	00 00		 mov	 QWORD PTR ptr_src$8[rbp], rax
$LN10@convert_rg:
  0069b	8b 85 1c 01 00
	00		 mov	 eax, DWORD PTR x_fin$11[rbp]
  006a1	39 85 18 01 00
	00		 cmp	 DWORD PTR x$10[rbp], eax
  006a7	7d 28		 jge	 SHORT $LN9@convert_rg

; 354  :             *(int *)ptr_dst = *(int *)ptr_src;

  006a9	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR ptr_dst$9[rbp]
  006b0	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR ptr_src$8[rbp]
  006b7	8b 09		 mov	 ecx, DWORD PTR [rcx]
  006b9	89 08		 mov	 DWORD PTR [rax], ecx

; 355  :             ptr_dst[3] = 0;

  006bb	b8 01 00 00 00	 mov	 eax, 1
  006c0	48 6b c0 03	 imul	 rax, rax, 3
  006c4	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR ptr_dst$9[rbp]
  006cb	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 356  :         }

  006cf	eb 98		 jmp	 SHORT $LN8@convert_rg
$LN9@convert_rg:

; 357  :     }

  006d1	e9 98 fb ff ff	 jmp	 $LN2@convert_rg
$LN3@convert_rg:

; 358  :     _mm256_zeroupper();

  006d6	c5 f8 77	 vzeroupper

; 359  : }

  006d9	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  006dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  006e4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006e9	48 8b 8d 98 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  006f0	48 33 cc	 xor	 rcx, rsp
  006f3	e8 00 00 00 00	 call	 __security_check_cookie
  006f8	48 81 c4 f0 04
	00 00		 add	 rsp, 1264		; 000004f0H
  006ff	5f		 pop	 rdi
  00700	5e		 pop	 rsi
  00701	5d		 pop	 rbp
  00702	c3		 ret	 0
?convert_rgb24_to_rgb32_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_rgb24_to_rgb32_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
y_range$5 = 24
$T6 = 56
srcYLine$7 = 72
dstLine$8 = 80
y_fin$9 = 88
y_width$10 = 92
y$11 = 96
uv_range$ = 120
$T12 = 152
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$13 = 192
x_fin$14 = 196
src_u_ptr$15 = 200
src_v_ptr$16 = 208
dst_ptr$17 = 216
y0$18 = 224
y1$19 = 256
y2$20 = 288
x$21 = 320
$T22 = 352
$T23 = 384
$T24 = 416
$T25 = 448
$T26 = 480
$T27 = 512
$T28 = 552
$T29 = 568
__$ArrayPad$ = 584
dst$ = 704
src$ = 712
width$ = 720
src_y_pitch_byte$ = 728
src_uv_pitch_byte$ = 736
dst_y_pitch_byte$ = 744
height$ = 752
dst_height$ = 760
thread_id$ = 768
thread_n$ = 776
crop$ = 784
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_avx2_base<1>

; 261  : static void __forceinline convert_yv12_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+704]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 48 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 262  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 263  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 264  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 265  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 266  :     //Y成分のコピー
; 267  :     if (!uv_only) {

  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 31 01 00
	00		 je	 $LN11@convert_yv

; 268  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b5	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000b8	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000bf	2b c8		 sub	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	8b 8c 24 08 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000ca	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ce	44 8b 8c 24 00
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d6	44 8b c0	 mov	 r8d, eax
  000d9	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000dc	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  000e3	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e8	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 0c 00 00 00	 mov	 ecx, 12
  000f7	f3 a4		 rep movsb
  000f9	48 8d 45 18	 lea	 rax, QWORD PTR y_range$5[rbp]
  000fd	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  00101	48 8b f8	 mov	 rdi, rax
  00104	48 8b f1	 mov	 rsi, rcx
  00107	b9 0c 00 00 00	 mov	 ecx, 12
  0010c	f3 a4		 rep movsb

; 269  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  0010e	b8 08 00 00 00	 mov	 eax, 8
  00113	48 6b c0 00	 imul	 rax, rax, 0
  00117	8b 8c 24 d8 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0011e	0f af 4d 18	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00122	48 63 c9	 movsxd	 rcx, ecx
  00125	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0012d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00131	48 03 c1	 add	 rax, rcx
  00134	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00138	48 03 c1	 add	 rax, rcx
  0013b	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 270  :         uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0013f	b8 08 00 00 00	 mov	 eax, 8
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014f	0f af 4d 1c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 c0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax

; 271  :         const int y_fin = height - crop_bottom;

  00169	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0016c	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00173	2b c8		 sub	 ecx, eax
  00175	8b c1		 mov	 eax, ecx
  00177	89 45 58	 mov	 DWORD PTR y_fin$9[rbp], eax

; 272  :         const int y_width = width - crop_right - crop_left;

  0017a	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017d	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00184	2b c8		 sub	 ecx, eax
  00186	8b c1		 mov	 eax, ecx
  00188	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018b	89 45 5c	 mov	 DWORD PTR y_width$10[rbp], eax

; 273  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018e	c7 45 60 00 00
	00 00		 mov	 DWORD PTR y$11[rbp], 0
  00195	eb 34		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00197	8b 45 60	 mov	 eax, DWORD PTR y$11[rbp]
  0019a	ff c0		 inc	 eax
  0019c	89 45 60	 mov	 DWORD PTR y$11[rbp], eax
  0019f	48 63 84 24 d8
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a7	48 8b 4d 48	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001ab	48 03 c8	 add	 rcx, rax
  001ae	48 8b c1	 mov	 rax, rcx
  001b1	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b5	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001bd	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001c1	48 03 c8	 add	 rcx, rax
  001c4	48 8b c1	 mov	 rax, rcx
  001c7	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001cb	8b 45 20	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001ce	39 45 60	 cmp	 DWORD PTR y$11[rbp], eax
  001d1	7d 13		 jge	 SHORT $LN3@convert_yv

; 274  :             avx2_memcpy<false>(dstLine, srcYLine, y_width);

  001d3	44 8b 45 5c	 mov	 r8d, DWORD PTR y_width$10[rbp]
  001d7	48 8b 55 48	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001db	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001df	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 275  :         }

  001e4	eb b1		 jmp	 SHORT $LN2@convert_yv
$LN3@convert_yv:
$LN11@convert_yv:

; 276  :     }
; 277  :     //UV成分のコピー
; 278  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  001e6	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  001e9	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001f0	2b c8		 sub	 ecx, eax
  001f2	8b c1		 mov	 eax, ecx
  001f4	d1 f8		 sar	 eax, 1
  001f6	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  001f9	d1 f9		 sar	 ecx, 1
  001fb	8b 94 24 08 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00202	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00206	44 8b 8c 24 00
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0020e	44 8b c0	 mov	 r8d, eax
  00211	8b d1		 mov	 edx, ecx
  00213	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  0021a	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  0021f	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00226	48 8b f9	 mov	 rdi, rcx
  00229	48 8b f0	 mov	 rsi, rax
  0022c	b9 0c 00 00 00	 mov	 ecx, 12
  00231	f3 a4		 rep movsb
  00233	48 8d 45 78	 lea	 rax, QWORD PTR uv_range$[rbp]
  00237	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0023e	48 8b f8	 mov	 rdi, rax
  00241	48 8b f1	 mov	 rsi, rcx
  00244	b9 0c 00 00 00	 mov	 ecx, 12
  00249	f3 a4		 rep movsb

; 279  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  0024b	b8 08 00 00 00	 mov	 eax, 8
  00250	48 6b c0 01	 imul	 rax, rax, 1
  00254	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  0025b	0f af 4d 78	 imul	 ecx, DWORD PTR uv_range$[rbp]
  0025f	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00262	d1 fa		 sar	 edx, 1
  00264	03 ca		 add	 ecx, edx
  00266	48 63 c9	 movsxd	 rcx, ecx
  00269	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00271	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00275	48 8b c1	 mov	 rax, rcx
  00278	48 89 85 a8 00
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 280  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  0027f	b8 08 00 00 00	 mov	 eax, 8
  00284	48 6b c0 02	 imul	 rax, rax, 2
  00288	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  0028f	0f af 4d 78	 imul	 ecx, DWORD PTR uv_range$[rbp]
  00293	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00296	d1 fa		 sar	 edx, 1
  00298	03 ca		 add	 ecx, edx
  0029a	48 63 c9	 movsxd	 rcx, ecx
  0029d	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002a5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002a9	48 8b c1	 mov	 rax, rcx
  002ac	48 89 85 b0 00
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 281  :     uint8_t *dstLine = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  002b3	b8 08 00 00 00	 mov	 eax, 8
  002b8	48 6b c0 01	 imul	 rax, rax, 1
  002bc	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  002c3	0f af 4d 7c	 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  002c7	48 63 c9	 movsxd	 rcx, ecx
  002ca	48 8b 94 24 c0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  002d2	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002d6	48 8b c1	 mov	 rax, rcx
  002d9	48 89 85 b8 00
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 282  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  002e0	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR y$13[rbp], 0
  002ea	eb 62		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  002ec	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR y$13[rbp]
  002f2	ff c0		 inc	 eax
  002f4	89 85 c0 00 00
	00		 mov	 DWORD PTR y$13[rbp], eax
  002fa	48 63 84 24 e0
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00302	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  00309	48 03 c8	 add	 rcx, rax
  0030c	48 8b c1	 mov	 rax, rcx
  0030f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  00316	48 63 84 24 e0
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0031e	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  00325	48 03 c8	 add	 rcx, rax
  00328	48 8b c1	 mov	 rax, rcx
  0032b	48 89 85 b0 00
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  00332	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0033a	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00341	48 03 c8	 add	 rcx, rax
  00344	48 8b c1	 mov	 rax, rcx
  00347	48 89 85 b8 00
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN7@convert_yv:
  0034e	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00354	39 85 c0 00 00
	00		 cmp	 DWORD PTR y$13[rbp], eax
  0035a	0f 8d ae 01 00
	00		 jge	 $LN6@convert_yv

; 283  :         const int x_fin = width - crop_right;

  00360	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00363	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0036a	2b c8		 sub	 ecx, eax
  0036c	8b c1		 mov	 eax, ecx
  0036e	89 85 c4 00 00
	00		 mov	 DWORD PTR x_fin$14[rbp], eax

; 284  :         uint8_t *src_u_ptr = srcULine;

  00374	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0037b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR src_u_ptr$15[rbp], rax

; 285  :         uint8_t *src_v_ptr = srcVLine;

  00382	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  00389	48 89 85 d0 00
	00 00		 mov	 QWORD PTR src_v_ptr$16[rbp], rax

; 286  :         uint8_t *dst_ptr = dstLine;

  00390	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00397	48 89 85 d8 00
	00 00		 mov	 QWORD PTR dst_ptr$17[rbp], rax

; 287  :         __m256i y0, y1, y2;
; 288  :         for (int x = crop_left; x < x_fin; x += 64, src_u_ptr += 32, src_v_ptr += 32, dst_ptr += 64) {

  0039e	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  003a1	89 85 40 01 00
	00		 mov	 DWORD PTR x$21[rbp], eax
  003a7	eb 45		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003a9	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR x$21[rbp]
  003af	83 c0 40	 add	 eax, 64			; 00000040H
  003b2	89 85 40 01 00
	00		 mov	 DWORD PTR x$21[rbp], eax
  003b8	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR src_u_ptr$15[rbp]
  003bf	48 83 c0 20	 add	 rax, 32			; 00000020H
  003c3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR src_u_ptr$15[rbp], rax
  003ca	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR src_v_ptr$16[rbp]
  003d1	48 83 c0 20	 add	 rax, 32			; 00000020H
  003d5	48 89 85 d0 00
	00 00		 mov	 QWORD PTR src_v_ptr$16[rbp], rax
  003dc	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  003e3	48 83 c0 40	 add	 rax, 64			; 00000040H
  003e7	48 89 85 d8 00
	00 00		 mov	 QWORD PTR dst_ptr$17[rbp], rax
$LN10@convert_yv:
  003ee	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x_fin$14[rbp]
  003f4	39 85 40 01 00
	00		 cmp	 DWORD PTR x$21[rbp], eax
  003fa	0f 8d 09 01 00
	00		 jge	 $LN9@convert_yv

; 289  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00400	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR src_u_ptr$15[rbp]
  00407	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0040b	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  00413	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  0041b	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 290  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  00423	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR src_v_ptr$16[rbp]
  0042a	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0042e	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00436	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  0043e	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y1$19[rbp], ymm0

; 291  : 
; 292  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00446	c4 e3 fd 00 85
	e0 00 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$18[rbp], 216 ; 000000d8H
  00450	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00458	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  00460	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 293  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  00468	c4 e3 fd 00 85
	00 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$19[rbp], 216 ; 000000d8H
  00472	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0047a	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00482	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y1$19[rbp], ymm0

; 294  : 
; 295  :             y2 = _mm256_unpackhi_epi8(y0, y1);

  0048a	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  00492	c5 fd 68 85 00
	01 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y1$19[rbp]
  0049a	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  004a2	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  004aa	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y2$20[rbp], ymm0

; 296  :             y0 = _mm256_unpacklo_epi8(y0, y1);

  004b2	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  004ba	c5 fd 60 85 00
	01 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y1$19[rbp]
  004c2	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004ca	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004d2	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 297  : 
; 298  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  004da	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  004e1	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  004e9	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 299  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 32), y2);

  004ed	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  004f4	48 83 c0 20	 add	 rax, 32			; 00000020H
  004f8	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$20[rbp]
  00500	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 300  :         }

  00504	e9 a0 fe ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 301  :     }

  00509	e9 de fd ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 302  :     _mm256_zeroupper();

  0050e	c5 f8 77	 vzeroupper

; 303  : }

  00511	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00515	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0051c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00521	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00528	48 33 cc	 xor	 rcx, rsp
  0052b	e8 00 00 00 00	 call	 __security_check_cookie
  00530	48 81 c4 a0 02
	00 00		 add	 rsp, 672		; 000002a0H
  00537	5f		 pop	 rdi
  00538	5e		 pop	 rsi
  00539	5d		 pop	 rbp
  0053a	c3		 ret	 0
??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_avx2_base<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_uv_yv12_to_nv12_avx2

; 310  : void convert_uv_yv12_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 311  :     convert_yv12_to_nv12_avx2_base<true>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_nv12_avx2_base@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_avx2_base<1>

; 312  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_uv_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_uv_yv12_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
y_range$5 = 24
$T6 = 56
srcYLine$7 = 72
dstLine$8 = 80
y_fin$9 = 88
y_width$10 = 92
y$11 = 96
uv_range$ = 120
$T12 = 152
srcULine$ = 168
srcVLine$ = 176
dstLine$ = 184
y$13 = 192
x_fin$14 = 196
src_u_ptr$15 = 200
src_v_ptr$16 = 208
dst_ptr$17 = 216
y0$18 = 224
y1$19 = 256
y2$20 = 288
x$21 = 320
$T22 = 352
$T23 = 384
$T24 = 416
$T25 = 448
$T26 = 480
$T27 = 512
$T28 = 552
$T29 = 568
__$ArrayPad$ = 584
dst$ = 704
src$ = 712
width$ = 720
src_y_pitch_byte$ = 728
src_uv_pitch_byte$ = 736
dst_y_pitch_byte$ = 744
height$ = 752
dst_height$ = 760
thread_id$ = 768
thread_n$ = 776
crop$ = 784
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_avx2_base<0>

; 261  : static void __forceinline convert_yv12_to_nv12_avx2_base(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec a0 02
	00 00		 sub	 rsp, 672		; 000002a0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+704]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 48 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 262  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 263  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 264  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 265  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 266  :     //Y成分のコピー
; 267  :     if (!uv_only) {

  000ab	33 c0		 xor	 eax, eax
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 84 31 01 00
	00		 je	 $LN11@convert_yv

; 268  :         const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000b6	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000b9	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000c0	2b c8		 sub	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	8b 8c 24 08 03
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000cb	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cf	44 8b 8c 24 00
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000d7	44 8b c0	 mov	 r8d, eax
  000da	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000dd	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T28[rbp]
  000e4	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000e9	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  000ed	48 8b f9	 mov	 rdi, rcx
  000f0	48 8b f0	 mov	 rsi, rax
  000f3	b9 0c 00 00 00	 mov	 ecx, 12
  000f8	f3 a4		 rep movsb
  000fa	48 8d 45 18	 lea	 rax, QWORD PTR y_range$5[rbp]
  000fe	48 8d 4d 38	 lea	 rcx, QWORD PTR $T6[rbp]
  00102	48 8b f8	 mov	 rdi, rax
  00105	48 8b f1	 mov	 rsi, rcx
  00108	b9 0c 00 00 00	 mov	 ecx, 12
  0010d	f3 a4		 rep movsb

; 269  :         uint8_t *srcYLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src + crop_left;

  0010f	b8 08 00 00 00	 mov	 eax, 8
  00114	48 6b c0 00	 imul	 rax, rax, 0
  00118	8b 8c 24 d8 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0011f	0f af 4d 18	 imul	 ecx, DWORD PTR y_range$5[rbp]
  00123	48 63 c9	 movsxd	 rcx, ecx
  00126	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0012e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00132	48 03 c1	 add	 rax, rcx
  00135	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00139	48 03 c1	 add	 rax, rcx
  0013c	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax

; 270  :         uint8_t *dstLine = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00140	b8 08 00 00 00	 mov	 eax, 8
  00145	48 6b c0 00	 imul	 rax, rax, 0
  00149	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00150	0f af 4d 1c	 imul	 ecx, DWORD PTR y_range$5[rbp+4]
  00154	48 63 c9	 movsxd	 rcx, ecx
  00157	48 8b 94 24 c0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0015f	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00163	48 8b c1	 mov	 rax, rcx
  00166	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax

; 271  :         const int y_fin = height - crop_bottom;

  0016a	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  0016d	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  00174	2b c8		 sub	 ecx, eax
  00176	8b c1		 mov	 eax, ecx
  00178	89 45 58	 mov	 DWORD PTR y_fin$9[rbp], eax

; 272  :         const int y_width = width - crop_right - crop_left;

  0017b	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  0017e	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00185	2b c8		 sub	 ecx, eax
  00187	8b c1		 mov	 eax, ecx
  00189	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  0018c	89 45 5c	 mov	 DWORD PTR y_width$10[rbp], eax

; 273  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  0018f	c7 45 60 00 00
	00 00		 mov	 DWORD PTR y$11[rbp], 0
  00196	eb 34		 jmp	 SHORT $LN4@convert_yv
$LN2@convert_yv:
  00198	8b 45 60	 mov	 eax, DWORD PTR y$11[rbp]
  0019b	ff c0		 inc	 eax
  0019d	89 45 60	 mov	 DWORD PTR y$11[rbp], eax
  001a0	48 63 84 24 d8
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a8	48 8b 4d 48	 mov	 rcx, QWORD PTR srcYLine$7[rbp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 45 48	 mov	 QWORD PTR srcYLine$7[rbp], rax
  001b6	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001be	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001c2	48 03 c8	 add	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 45 50	 mov	 QWORD PTR dstLine$8[rbp], rax
$LN4@convert_yv:
  001cc	8b 45 20	 mov	 eax, DWORD PTR y_range$5[rbp+8]
  001cf	39 45 60	 cmp	 DWORD PTR y$11[rbp], eax
  001d2	7d 13		 jge	 SHORT $LN3@convert_yv

; 274  :             avx2_memcpy<false>(dstLine, srcYLine, y_width);

  001d4	44 8b 45 5c	 mov	 r8d, DWORD PTR y_width$10[rbp]
  001d8	48 8b 55 48	 mov	 rdx, QWORD PTR srcYLine$7[rbp]
  001dc	48 8b 4d 50	 mov	 rcx, QWORD PTR dstLine$8[rbp]
  001e0	e8 00 00 00 00	 call	 ??$avx2_memcpy@$0A@@@YAXPEAEPEBEH@Z ; avx2_memcpy<0>

; 275  :         }

  001e5	eb b1		 jmp	 SHORT $LN2@convert_yv
$LN3@convert_yv:
$LN11@convert_yv:

; 276  :     }
; 277  :     //UV成分のコピー
; 278  :     const auto uv_range = thread_y_range(crop_up >> 1, (height - crop_bottom) >> 1, thread_id, thread_n);

  001e7	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  001ea	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  001f1	2b c8		 sub	 ecx, eax
  001f3	8b c1		 mov	 eax, ecx
  001f5	d1 f8		 sar	 eax, 1
  001f7	8b 4d 04	 mov	 ecx, DWORD PTR crop_up$[rbp]
  001fa	d1 f9		 sar	 ecx, 1
  001fc	8b 94 24 08 03
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  00203	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00207	44 8b 8c 24 00
	03 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  0020f	44 8b c0	 mov	 r8d, eax
  00212	8b d1		 mov	 edx, ecx
  00214	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR $T29[rbp]
  0021b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00220	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00227	48 8b f9	 mov	 rdi, rcx
  0022a	48 8b f0	 mov	 rsi, rax
  0022d	b9 0c 00 00 00	 mov	 ecx, 12
  00232	f3 a4		 rep movsb
  00234	48 8d 45 78	 lea	 rax, QWORD PTR uv_range$[rbp]
  00238	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0023f	48 8b f8	 mov	 rdi, rax
  00242	48 8b f1	 mov	 rsi, rcx
  00245	b9 0c 00 00 00	 mov	 ecx, 12
  0024a	f3 a4		 rep movsb

; 279  :     uint8_t *srcULine = (uint8_t *)src[1] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  0024c	b8 08 00 00 00	 mov	 eax, 8
  00251	48 6b c0 01	 imul	 rax, rax, 1
  00255	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  0025c	0f af 4d 78	 imul	 ecx, DWORD PTR uv_range$[rbp]
  00260	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00263	d1 fa		 sar	 edx, 1
  00265	03 ca		 add	 ecx, edx
  00267	48 63 c9	 movsxd	 rcx, ecx
  0026a	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00272	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00276	48 8b c1	 mov	 rax, rcx
  00279	48 89 85 a8 00
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax

; 280  :     uint8_t *srcVLine = (uint8_t *)src[2] + ((src_uv_pitch_byte * uv_range.start_src) + (crop_left >> 1));

  00280	b8 08 00 00 00	 mov	 eax, 8
  00285	48 6b c0 02	 imul	 rax, rax, 2
  00289	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR src_uv_pitch_byte$[rsp]
  00290	0f af 4d 78	 imul	 ecx, DWORD PTR uv_range$[rbp]
  00294	8b 55 00	 mov	 edx, DWORD PTR crop_left$[rbp]
  00297	d1 fa		 sar	 edx, 1
  00299	03 ca		 add	 ecx, edx
  0029b	48 63 c9	 movsxd	 rcx, ecx
  0029e	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  002a6	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002aa	48 8b c1	 mov	 rax, rcx
  002ad	48 89 85 b0 00
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax

; 281  :     uint8_t *dstLine = (uint8_t *)dst[1] + dst_y_pitch_byte * uv_range.start_dst;

  002b4	b8 08 00 00 00	 mov	 eax, 8
  002b9	48 6b c0 01	 imul	 rax, rax, 1
  002bd	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  002c4	0f af 4d 7c	 imul	 ecx, DWORD PTR uv_range$[rbp+4]
  002c8	48 63 c9	 movsxd	 rcx, ecx
  002cb	48 8b 94 24 c0
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  002d3	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  002d7	48 8b c1	 mov	 rax, rcx
  002da	48 89 85 b8 00
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax

; 282  :     for (int y = 0; y < uv_range.len; y++, srcULine += src_uv_pitch_byte, srcVLine += src_uv_pitch_byte, dstLine += dst_y_pitch_byte) {

  002e1	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR y$13[rbp], 0
  002eb	eb 62		 jmp	 SHORT $LN7@convert_yv
$LN5@convert_yv:
  002ed	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR y$13[rbp]
  002f3	ff c0		 inc	 eax
  002f5	89 85 c0 00 00
	00		 mov	 DWORD PTR y$13[rbp], eax
  002fb	48 63 84 24 e0
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  00303	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR srcULine$[rbp]
  0030a	48 03 c8	 add	 rcx, rax
  0030d	48 8b c1	 mov	 rax, rcx
  00310	48 89 85 a8 00
	00 00		 mov	 QWORD PTR srcULine$[rbp], rax
  00317	48 63 84 24 e0
	02 00 00	 movsxd	 rax, DWORD PTR src_uv_pitch_byte$[rsp]
  0031f	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR srcVLine$[rbp]
  00326	48 03 c8	 add	 rcx, rax
  00329	48 8b c1	 mov	 rax, rcx
  0032c	48 89 85 b0 00
	00 00		 mov	 QWORD PTR srcVLine$[rbp], rax
  00333	48 63 84 24 e8
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  0033b	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR dstLine$[rbp]
  00342	48 03 c8	 add	 rcx, rax
  00345	48 8b c1	 mov	 rax, rcx
  00348	48 89 85 b8 00
	00 00		 mov	 QWORD PTR dstLine$[rbp], rax
$LN7@convert_yv:
  0034f	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR uv_range$[rbp+8]
  00355	39 85 c0 00 00
	00		 cmp	 DWORD PTR y$13[rbp], eax
  0035b	0f 8d ae 01 00
	00		 jge	 $LN6@convert_yv

; 283  :         const int x_fin = width - crop_right;

  00361	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  00364	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  0036b	2b c8		 sub	 ecx, eax
  0036d	8b c1		 mov	 eax, ecx
  0036f	89 85 c4 00 00
	00		 mov	 DWORD PTR x_fin$14[rbp], eax

; 284  :         uint8_t *src_u_ptr = srcULine;

  00375	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR srcULine$[rbp]
  0037c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR src_u_ptr$15[rbp], rax

; 285  :         uint8_t *src_v_ptr = srcVLine;

  00383	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR srcVLine$[rbp]
  0038a	48 89 85 d0 00
	00 00		 mov	 QWORD PTR src_v_ptr$16[rbp], rax

; 286  :         uint8_t *dst_ptr = dstLine;

  00391	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR dstLine$[rbp]
  00398	48 89 85 d8 00
	00 00		 mov	 QWORD PTR dst_ptr$17[rbp], rax

; 287  :         __m256i y0, y1, y2;
; 288  :         for (int x = crop_left; x < x_fin; x += 64, src_u_ptr += 32, src_v_ptr += 32, dst_ptr += 64) {

  0039f	8b 45 00	 mov	 eax, DWORD PTR crop_left$[rbp]
  003a2	89 85 40 01 00
	00		 mov	 DWORD PTR x$21[rbp], eax
  003a8	eb 45		 jmp	 SHORT $LN10@convert_yv
$LN8@convert_yv:
  003aa	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR x$21[rbp]
  003b0	83 c0 40	 add	 eax, 64			; 00000040H
  003b3	89 85 40 01 00
	00		 mov	 DWORD PTR x$21[rbp], eax
  003b9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR src_u_ptr$15[rbp]
  003c0	48 83 c0 20	 add	 rax, 32			; 00000020H
  003c4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR src_u_ptr$15[rbp], rax
  003cb	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR src_v_ptr$16[rbp]
  003d2	48 83 c0 20	 add	 rax, 32			; 00000020H
  003d6	48 89 85 d0 00
	00 00		 mov	 QWORD PTR src_v_ptr$16[rbp], rax
  003dd	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  003e4	48 83 c0 40	 add	 rax, 64			; 00000040H
  003e8	48 89 85 d8 00
	00 00		 mov	 QWORD PTR dst_ptr$17[rbp], rax
$LN10@convert_yv:
  003ef	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR x_fin$14[rbp]
  003f5	39 85 40 01 00
	00		 cmp	 DWORD PTR x$21[rbp], eax
  003fb	0f 8d 09 01 00
	00		 jge	 $LN9@convert_yv

; 289  :             y0 = _mm256_loadu_si256((const __m256i *)src_u_ptr);

  00401	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR src_u_ptr$15[rbp]
  00408	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0040c	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  00414	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  0041c	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 290  :             y1 = _mm256_loadu_si256((const __m256i *)src_v_ptr);

  00424	48 8b 85 d0 00
	00 00		 mov	 rax, QWORD PTR src_v_ptr$16[rbp]
  0042b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0042f	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00437	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  0043f	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y1$19[rbp], ymm0

; 291  : 
; 292  :             y0 = _mm256_permute4x64_epi64(y0, _MM_SHUFFLE(3,1,2,0));

  00447	c4 e3 fd 00 85
	e0 00 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y0$18[rbp], 216 ; 000000d8H
  00451	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00459	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  00461	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 293  :             y1 = _mm256_permute4x64_epi64(y1, _MM_SHUFFLE(3,1,2,0));

  00469	c4 e3 fd 00 85
	00 01 00 00 d8	 vpermq	 ymm0, YMMWORD PTR y1$19[rbp], 216 ; 000000d8H
  00473	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  0047b	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  00483	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR y1$19[rbp], ymm0

; 294  : 
; 295  :             y2 = _mm256_unpackhi_epi8(y0, y1);

  0048b	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  00493	c5 fd 68 85 00
	01 00 00	 vpunpckhbw ymm0, ymm0, YMMWORD PTR y1$19[rbp]
  0049b	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  004a3	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  004ab	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y2$20[rbp], ymm0

; 296  :             y0 = _mm256_unpacklo_epi8(y0, y1);

  004b3	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  004bb	c5 fd 60 85 00
	01 00 00	 vpunpcklbw ymm0, ymm0, YMMWORD PTR y1$19[rbp]
  004c3	c5 fe 7f 85 00
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  004cb	c5 fe 6f 85 00
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  004d3	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y0$18[rbp], ymm0

; 297  : 
; 298  :             _mm256_storeu_si256((__m256i *)(dst_ptr +  0), y0);

  004db	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  004e2	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$18[rbp]
  004ea	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 299  :             _mm256_storeu_si256((__m256i *)(dst_ptr + 32), y2);

  004ee	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR dst_ptr$17[rbp]
  004f5	48 83 c0 20	 add	 rax, 32			; 00000020H
  004f9	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y2$20[rbp]
  00501	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 300  :         }

  00505	e9 a0 fe ff ff	 jmp	 $LN8@convert_yv
$LN9@convert_yv:

; 301  :     }

  0050a	e9 de fd ff ff	 jmp	 $LN5@convert_yv
$LN6@convert_yv:

; 302  :     _mm256_zeroupper();

  0050f	c5 f8 77	 vzeroupper

; 303  : }

  00512	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00516	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0051d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00522	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00529	48 33 cc	 xor	 rcx, rsp
  0052c	e8 00 00 00 00	 call	 __security_check_cookie
  00531	48 81 c4 a0 02
	00 00		 add	 rsp, 672		; 000002a0H
  00538	5f		 pop	 rdi
  00539	5e		 pop	 rsi
  0053a	5d		 pop	 rbp
  0053b	c3		 ret	 0
??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_avx2_base<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yv12_to_nv12_avx2

; 306  : void convert_yv12_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 307  :     convert_yv12_to_nv12_avx2_base<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yv12_to_nv12_avx2_base@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yv12_to_nv12_avx2_base<0>

; 308  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yv12_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src$ = 16
y_range$ = 40
$T6 = 72
srcLine$ = 88
dstYLine$ = 96
dstCLine$ = 104
y$7 = 112
i$8 = 116
p$9 = 120
pw$10 = 128
y0$11 = 160
y1$12 = 224
y3$13 = 288
x_fin$14 = 320
x$15 = 324
$T16 = 336
$T17 = 352
$T18 = 384
$T19 = 416
$T20 = 448
$T21 = 480
$T22 = 512
$T23 = 544
$T24 = 576
$T25 = 608
$T26 = 640
$T27 = 672
$T28 = 704
$T29 = 736
$T30 = 768
$T31 = 800
$T32 = 832
$T33 = 872
$T34 = 896
$T35 = 928
__$ArrayPad$ = 960
dst_array$ = 1088
src_array$ = 1096
width$ = 1104
src_y_pitch_byte$ = 1112
src_uv_pitch_byte$ = 1120
dst_y_pitch_byte$ = 1128
height$ = 1136
dst_height$ = 1144
thread_id$ = 1152
thread_n$ = 1160
crop$ = 1168
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_i_avx2

; 209  : void convert_yuy2_to_nv12_i_avx2(void **dst_array, const void **src_array, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 20 04
	00 00		 sub	 rsp, 1056		; 00000420H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1088]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 c0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 210  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 211  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 212  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 213  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 214  :     const void *src = src_array[0];

  000ab	b8 08 00 00 00	 mov	 eax, 8
  000b0	48 6b c0 00	 imul	 rax, rax, 0
  000b4	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR src_array$[rsp]
  000bc	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000c0	48 89 45 10	 mov	 QWORD PTR src$[rbp], rax

; 215  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c4	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c7	8b 8c 24 70 04
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000ce	2b c8		 sub	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	8b 8c 24 88 04
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d9	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dd	44 8b 8c 24 80
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e5	44 8b c0	 mov	 r8d, eax
  000e8	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000eb	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T33[rbp]
  000f2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f7	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000fb	48 8b f9	 mov	 rdi, rcx
  000fe	48 8b f0	 mov	 rsi, rax
  00101	b9 0c 00 00 00	 mov	 ecx, 12
  00106	f3 a4		 rep movsb
  00108	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010c	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00110	48 8b f8	 mov	 rdi, rax
  00113	48 8b f1	 mov	 rsi, rcx
  00116	b9 0c 00 00 00	 mov	 ecx, 12
  0011b	f3 a4		 rep movsb

; 216  :     uint8_t *srcLine = (uint8_t *)src + src_y_pitch_byte * y_range.start_src + crop_left;

  0011d	8b 84 24 58 04
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00124	0f af 45 28	 imul	 eax, DWORD PTR y_range$[rbp]
  00128	48 98		 cdqe
  0012a	48 8b 4d 10	 mov	 rcx, QWORD PTR src$[rbp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00138	48 03 c1	 add	 rax, rcx
  0013b	48 89 45 58	 mov	 QWORD PTR srcLine$[rbp], rax

; 217  :     uint8_t *dstYLine = (uint8_t *)dst_array[0] + src_y_pitch_byte * y_range.start_dst;

  0013f	b8 08 00 00 00	 mov	 eax, 8
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	8b 8c 24 58 04
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0014f	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 40
	04 00 00	 mov	 rdx, QWORD PTR dst_array$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 45 60	 mov	 QWORD PTR dstYLine$[rbp], rax

; 218  :     uint8_t *dstCLine = (uint8_t *)dst_array[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  00169	b8 08 00 00 00	 mov	 eax, 8
  0016e	48 6b c0 01	 imul	 rax, rax, 1
  00172	8b 4d 2c	 mov	 ecx, DWORD PTR y_range$[rbp+4]
  00175	d1 f9		 sar	 ecx, 1
  00177	8b 94 24 68 04
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017e	0f af d1	 imul	 edx, ecx
  00181	8b ca		 mov	 ecx, edx
  00183	48 63 c9	 movsxd	 rcx, ecx
  00186	48 8b 94 24 40
	04 00 00	 mov	 rdx, QWORD PTR dst_array$[rsp]
  0018e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 45 68	 mov	 QWORD PTR dstCLine$[rbp], rax

; 219  :     for (int y = 0; y < y_range.len; y += 4) {

  00199	c7 45 70 00 00
	00 00		 mov	 DWORD PTR y$7[rbp], 0
  001a0	eb 09		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001a2	8b 45 70	 mov	 eax, DWORD PTR y$7[rbp]
  001a5	83 c0 04	 add	 eax, 4
  001a8	89 45 70	 mov	 DWORD PTR y$7[rbp], eax
$LN4@convert_yu:
  001ab	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001ae	39 45 70	 cmp	 DWORD PTR y$7[rbp], eax
  001b1	0f 8d 9a 03 00
	00		 jge	 $LN3@convert_yu

; 220  :         for (int i = 0; i < 2; i++) {

  001b7	c7 45 74 00 00
	00 00		 mov	 DWORD PTR i$8[rbp], 0
  001be	eb 08		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001c0	8b 45 74	 mov	 eax, DWORD PTR i$8[rbp]
  001c3	ff c0		 inc	 eax
  001c5	89 45 74	 mov	 DWORD PTR i$8[rbp], eax
$LN7@convert_yu:
  001c8	83 7d 74 02	 cmp	 DWORD PTR i$8[rbp], 2
  001cc	0f 8d 48 03 00
	00		 jge	 $LN6@convert_yu

; 221  :             uint8_t *p = srcLine;

  001d2	48 8b 45 58	 mov	 rax, QWORD PTR srcLine$[rbp]
  001d6	48 89 45 78	 mov	 QWORD PTR p$9[rbp], rax

; 222  :             uint8_t *pw = p + (src_y_pitch_byte<<1);

  001da	8b 84 24 58 04
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  001e1	d1 e0		 shl	 eax, 1
  001e3	48 98		 cdqe
  001e5	48 8b 4d 78	 mov	 rcx, QWORD PTR p$9[rbp]
  001e9	48 03 c8	 add	 rcx, rax
  001ec	48 8b c1	 mov	 rax, rcx
  001ef	48 89 85 80 00
	00 00		 mov	 QWORD PTR pw$10[rbp], rax

; 223  :             __m256i y0, y1, y3;
; 224  :             const int x_fin = width - crop_right - crop_left;

  001f6	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  001f9	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  00200	2b c8		 sub	 ecx, eax
  00202	8b c1		 mov	 eax, ecx
  00204	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  00207	89 85 40 01 00
	00		 mov	 DWORD PTR x_fin$14[rbp], eax

; 225  :             for (int x = 0; x < x_fin; x += 32, p += 64, pw += 64) {

  0020d	c7 85 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR x$15[rbp], 0
  00217	eb 2d		 jmp	 SHORT $LN10@convert_yu
$LN8@convert_yu:
  00219	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR x$15[rbp]
  0021f	83 c0 20	 add	 eax, 32			; 00000020H
  00222	89 85 44 01 00
	00		 mov	 DWORD PTR x$15[rbp], eax
  00228	48 8b 45 78	 mov	 rax, QWORD PTR p$9[rbp]
  0022c	48 83 c0 40	 add	 rax, 64			; 00000040H
  00230	48 89 45 78	 mov	 QWORD PTR p$9[rbp], rax
  00234	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$10[rbp]
  0023b	48 83 c0 40	 add	 rax, 64			; 00000040H
  0023f	48 89 85 80 00
	00 00		 mov	 QWORD PTR pw$10[rbp], rax
$LN10@convert_yu:
  00246	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR x_fin$14[rbp]
  0024c	39 85 44 01 00
	00		 cmp	 DWORD PTR x$15[rbp], eax
  00252	0f 8d 7b 02 00
	00		 jge	 $LN9@convert_yu

; 226  :                 //-----------    1+i行目   ---------------
; 227  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(p+32)), _mm_loadu_si128((__m128i*)(p+ 0)));

  00258	48 8b 45 78	 mov	 rax, QWORD PTR p$9[rbp]
  0025c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00260	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00264	66 0f 7f 85 80
	01 00 00	 movdqa	 XMMWORD PTR $T18[rbp], xmm0
  0026c	48 8b 45 78	 mov	 rax, QWORD PTR p$9[rbp]
  00270	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00274	66 0f 7f 85 50
	01 00 00	 movdqa	 XMMWORD PTR $T16[rbp], xmm0
  0027c	c5 f8 10 85 50
	01 00 00	 vmovups xmm0, XMMWORD PTR $T16[rbp]
  00284	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T17[rbp], ymm0
  0028c	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T17[rbp]
  00294	c4 e3 7d 18 85
	80 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T18[rbp], 1
  0029e	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T19[rbp], ymm0
  002a6	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T19[rbp]
  002ae	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$11[rbp], ymm0

; 228  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(p+48)), _mm_loadu_si128((__m128i*)(p+16)));

  002b6	48 8b 45 78	 mov	 rax, QWORD PTR p$9[rbp]
  002ba	48 83 c0 30	 add	 rax, 48			; 00000030H
  002be	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002c2	66 0f 7f 85 00
	02 00 00	 movdqa	 XMMWORD PTR $T22[rbp], xmm0
  002ca	48 8b 45 78	 mov	 rax, QWORD PTR p$9[rbp]
  002ce	48 83 c0 10	 add	 rax, 16
  002d2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002d6	66 0f 7f 85 c0
	01 00 00	 movdqa	 XMMWORD PTR $T20[rbp], xmm0
  002de	c5 f8 10 85 c0
	01 00 00	 vmovups xmm0, XMMWORD PTR $T20[rbp]
  002e6	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T21[rbp], ymm0
  002ee	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T21[rbp]
  002f6	c4 e3 7d 18 85
	00 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T22[rbp], 1
  00300	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T23[rbp], ymm0
  00308	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T23[rbp]
  00310	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$12[rbp], ymm0

; 229  : 
; 230  :                 separate_low_up(y0, y1);

  00318	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR y1$12[rbp]
  0031f	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR y0$11[rbp]
  00326	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m256i@@0@Z ; separate_low_up

; 231  :                 y3 = y1;

  0032b	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$12[rbp]
  00333	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y3$13[rbp], ymm0

; 232  : 
; 233  :                 _mm256_storeu_si256((__m256i *)(dstYLine + x), y0);

  0033b	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR x$15[rbp]
  00342	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  00346	48 03 c8	 add	 rcx, rax
  00349	48 8b c1	 mov	 rax, rcx
  0034c	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$11[rbp]
  00354	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 234  :                 //-----------1+i行目終了---------------
; 235  : 
; 236  :                 //-----------3+i行目---------------
; 237  :                 y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(pw+32)), _mm_loadu_si128((__m128i*)(pw+ 0)));

  00358	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$10[rbp]
  0035f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00363	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00367	66 0f 7f 85 80
	02 00 00	 movdqa	 XMMWORD PTR $T26[rbp], xmm0
  0036f	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$10[rbp]
  00376	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0037a	66 0f 7f 85 40
	02 00 00	 movdqa	 XMMWORD PTR $T24[rbp], xmm0
  00382	c5 f8 10 85 40
	02 00 00	 vmovups xmm0, XMMWORD PTR $T24[rbp]
  0038a	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T25[rbp], ymm0
  00392	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T25[rbp]
  0039a	c4 e3 7d 18 85
	80 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T26[rbp], 1
  003a4	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T27[rbp], ymm0
  003ac	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T27[rbp]
  003b4	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$11[rbp], ymm0

; 238  :                 y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(pw+48)), _mm_loadu_si128((__m128i*)(pw+16)));

  003bc	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$10[rbp]
  003c3	48 83 c0 30	 add	 rax, 48			; 00000030H
  003c7	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003cb	66 0f 7f 85 00
	03 00 00	 movdqa	 XMMWORD PTR $T30[rbp], xmm0
  003d3	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$10[rbp]
  003da	48 83 c0 10	 add	 rax, 16
  003de	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003e2	66 0f 7f 85 c0
	02 00 00	 movdqa	 XMMWORD PTR $T28[rbp], xmm0
  003ea	c5 f8 10 85 c0
	02 00 00	 vmovups xmm0, XMMWORD PTR $T28[rbp]
  003f2	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T29[rbp], ymm0
  003fa	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T29[rbp]
  00402	c4 e3 7d 18 85
	00 03 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T30[rbp], 1
  0040c	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  00414	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  0041c	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$12[rbp], ymm0

; 239  : 
; 240  :                 separate_low_up(y0, y1);

  00424	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR y1$12[rbp]
  0042b	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR y0$11[rbp]
  00432	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m256i@@0@Z ; separate_low_up

; 241  : 
; 242  :                 _mm256_storeu_si256((__m256i *)(dstYLine + (dst_y_pitch_byte<<1) + x), y0);

  00437	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0043e	d1 e0		 shl	 eax, 1
  00440	48 98		 cdqe
  00442	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  00446	48 03 c8	 add	 rcx, rax
  00449	48 8b c1	 mov	 rax, rcx
  0044c	48 63 8d 44 01
	00 00		 movsxd	 rcx, DWORD PTR x$15[rbp]
  00453	48 03 c1	 add	 rax, rcx
  00456	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$11[rbp]
  0045e	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 243  :                 //-----------3+i行目終了---------------
; 244  :                 y0 = yuv422_to_420_i_interpolate(y3, y1, i);

  00462	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$12[rbp]
  0046a	c5 fe 7f 85 a0
	03 00 00	 vmovdqu YMMWORD PTR $T35[rbp], ymm0
  00472	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR y3$13[rbp]
  0047a	c5 fe 7f 85 80
	03 00 00	 vmovdqu YMMWORD PTR $T34[rbp], ymm0
  00482	44 8b 45 74	 mov	 r8d, DWORD PTR i$8[rbp]
  00486	48 8d 95 a0 03
	00 00		 lea	 rdx, QWORD PTR $T35[rbp]
  0048d	48 8d 8d 80 03
	00 00		 lea	 rcx, QWORD PTR $T34[rbp]
  00494	e8 00 00 00 00	 call	 ?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z ; yuv422_to_420_i_interpolate
  00499	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T32[rbp], ymm0
  004a1	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T32[rbp]
  004a9	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$11[rbp], ymm0

; 245  : 
; 246  :                 _mm256_storeu_si256((__m256i *)(dstCLine + x), y0);

  004b1	48 63 85 44 01
	00 00		 movsxd	 rax, DWORD PTR x$15[rbp]
  004b8	48 8b 4d 68	 mov	 rcx, QWORD PTR dstCLine$[rbp]
  004bc	48 03 c8	 add	 rcx, rax
  004bf	48 8b c1	 mov	 rax, rcx
  004c2	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$11[rbp]
  004ca	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 247  :             }

  004ce	e9 46 fd ff ff	 jmp	 $LN8@convert_yu
$LN9@convert_yu:

; 248  :             srcLine  += src_y_pitch_byte;

  004d3	48 63 84 24 58
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  004db	48 8b 4d 58	 mov	 rcx, QWORD PTR srcLine$[rbp]
  004df	48 03 c8	 add	 rcx, rax
  004e2	48 8b c1	 mov	 rax, rcx
  004e5	48 89 45 58	 mov	 QWORD PTR srcLine$[rbp], rax

; 249  :             dstYLine += dst_y_pitch_byte;

  004e9	48 63 84 24 68
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004f1	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  004f5	48 03 c8	 add	 rcx, rax
  004f8	48 8b c1	 mov	 rax, rcx
  004fb	48 89 45 60	 mov	 QWORD PTR dstYLine$[rbp], rax

; 250  :             dstCLine += dst_y_pitch_byte;

  004ff	48 63 84 24 68
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00507	48 8b 4d 68	 mov	 rcx, QWORD PTR dstCLine$[rbp]
  0050b	48 03 c8	 add	 rcx, rax
  0050e	48 8b c1	 mov	 rax, rcx
  00511	48 89 45 68	 mov	 QWORD PTR dstCLine$[rbp], rax

; 251  :         }

  00515	e9 a6 fc ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 252  :         srcLine  += src_y_pitch_byte << 1;

  0051a	8b 84 24 58 04
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00521	d1 e0		 shl	 eax, 1
  00523	48 98		 cdqe
  00525	48 8b 4d 58	 mov	 rcx, QWORD PTR srcLine$[rbp]
  00529	48 03 c8	 add	 rcx, rax
  0052c	48 8b c1	 mov	 rax, rcx
  0052f	48 89 45 58	 mov	 QWORD PTR srcLine$[rbp], rax

; 253  :         dstYLine += dst_y_pitch_byte << 1;

  00533	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0053a	d1 e0		 shl	 eax, 1
  0053c	48 98		 cdqe
  0053e	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  00542	48 03 c8	 add	 rcx, rax
  00545	48 8b c1	 mov	 rax, rcx
  00548	48 89 45 60	 mov	 QWORD PTR dstYLine$[rbp], rax

; 254  :     }

  0054c	e9 51 fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 255  :     _mm256_zeroupper();

  00551	c5 f8 77	 vzeroupper

; 256  : }

  00554	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00558	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0055f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00564	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0056b	48 33 cc	 xor	 rcx, rsp
  0056e	e8 00 00 00 00	 call	 __security_check_cookie
  00573	48 81 c4 20 04
	00 00		 add	 rsp, 1056		; 00000420H
  0057a	5f		 pop	 rdi
  0057b	5e		 pop	 rsi
  0057c	5d		 pop	 rbp
  0057d	c3		 ret	 0
?convert_yuy2_to_nv12_i_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_i_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
y0$ = 0
y1$ = 32
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
$T11 = 384
$T12 = 416
$T13 = 448
y_up$ = 576
y_down$ = 584
i$ = 592
?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z PROC ; yuv422_to_420_i_interpolate

; 192  : static __forceinline __m256i yuv422_to_420_i_interpolate(__m256i y_up, __m256i y_down, int i) {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR [rsp+576]

; 193  :     __m256i y0, y1;
; 194  :     y0 = _mm256_unpacklo_epi8(y_down, y_up);

  00038	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00040	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  00048	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0004c	c5 fd 60 01	 vpunpcklbw ymm0, ymm0, YMMWORD PTR [rcx]
  00050	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00055	c5 fe 6f 45 40	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0005a	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 195  :     y1 = _mm256_unpackhi_epi8(y_down, y_up);

  0005f	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR y_down$[rsp]
  00067	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR y_up$[rsp]
  0006f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00073	c5 fd 68 01	 vpunpckhbw ymm0, ymm0, YMMWORD PTR [rcx]
  00077	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  0007c	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  00081	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 196  :     y0 = _mm256_maddubs_epi16(y0, yC_INTERLACE_WEIGHT(i));

  00086	48 63 84 24 50
	02 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0008e	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000a3	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  000ab	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  000b0	c4 e2 7d 04 85
	80 00 00 00	 vpmaddubsw ymm0, ymm0, YMMWORD PTR $T3[rbp]
  000b9	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000c1	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000c9	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 197  :     y1 = _mm256_maddubs_epi16(y1, yC_INTERLACE_WEIGHT(i));

  000ce	48 63 84 24 50
	02 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  000d6	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA
  000e1	48 03 c8	 add	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000eb	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  000f3	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  000f8	c4 e2 7d 04 85
	c0 00 00 00	 vpmaddubsw ymm0, ymm0, YMMWORD PTR $T5[rbp]
  00101	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  00109	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  00111	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 198  :     y0 = _mm256_add_epi16(y0, _mm256_set1_epi16(2));

  00116	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0002000200020002000200020002000200020002000200020002000200020002
  0011e	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  00126	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  0012b	c5 fd fd 85 00
	01 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T7[rbp]
  00133	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  0013b	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  00143	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 199  :     y1 = _mm256_add_epi16(y1, _mm256_set1_epi16(2));

  00148	c5 fe 6f 05 00
	00 00 00	 vmovdqu ymm0, YMMWORD PTR __ymm@0002000200020002000200020002000200020002000200020002000200020002
  00150	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  00158	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  0015d	c5 fd fd 85 40
	01 00 00	 vpaddw	 ymm0, ymm0, YMMWORD PTR $T9[rbp]
  00165	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  0016d	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  00175	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 200  :     y0 = _mm256_srai_epi16(y0, 2);

  0017a	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  0017f	c5 fd 71 e0 02	 vpsraw	 ymm0, ymm0, 2
  00184	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T11[rbp], ymm0
  0018c	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T11[rbp]
  00194	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 201  :     y1 = _mm256_srai_epi16(y1, 2);

  00199	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR y1$[rbp]
  0019e	c5 fd 71 e0 02	 vpsraw	 ymm0, ymm0, 2
  001a3	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T12[rbp], ymm0
  001ab	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T12[rbp]
  001b3	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR y1$[rbp], ymm0

; 202  :     y0 = _mm256_packus_epi16(y0, y1);

  001b8	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]
  001bd	c5 fd 67 45 20	 vpackuswb ymm0, ymm0, YMMWORD PTR y1$[rbp]
  001c2	c5 fe 7f 85 c0
	01 00 00	 vmovdqu YMMWORD PTR $T13[rbp], ymm0
  001ca	c5 fe 6f 85 c0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T13[rbp]
  001d2	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR y0$[rbp], ymm0

; 203  :     return y0;

  001d7	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR y0$[rbp]

; 204  : }

  001dc	48 81 c4 28 02
	00 00		 add	 rsp, 552		; 00000228H
  001e3	5f		 pop	 rdi
  001e4	5d		 pop	 rbp
  001e5	c3		 ret	 0
?yuv422_to_420_i_interpolate@@YA?AT__m256i@@T1@0H@Z ENDP ; yuv422_to_420_i_interpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
crop_left$ = 0
crop_up$ = 4
crop_right$ = 8
crop_bottom$ = 12
src$ = 16
y_range$ = 40
$T6 = 72
srcLine$ = 88
dstYLine$ = 96
dstCLine$ = 104
y$7 = 112
p$8 = 120
pw$9 = 128
x_fin$10 = 136
y0$11 = 160
y1$12 = 224
y3$13 = 288
x$14 = 320
$T15 = 336
$T16 = 352
$T17 = 384
$T18 = 416
$T19 = 448
$T20 = 480
$T21 = 512
$T22 = 544
$T23 = 576
$T24 = 608
$T25 = 640
$T26 = 672
$T27 = 704
$T28 = 736
$T29 = 768
$T30 = 800
$T31 = 832
$T32 = 872
__$ArrayPad$ = 888
dst_array$ = 1008
src_array$ = 1016
width$ = 1024
src_y_pitch_byte$ = 1032
src_uv_pitch_byte$ = 1040
dst_y_pitch_byte$ = 1048
height$ = 1056
dst_height$ = 1064
thread_id$ = 1072
thread_n$ = 1080
crop$ = 1088
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuy2_to_nv12_avx2

; 146  : void convert_yuy2_to_nv12_avx2(void **dst_array, const void **src_array, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec d0 03
	00 00		 sub	 rsp, 976		; 000003d0H
  0001e	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00023	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00027	48 8b fc	 mov	 rdi, rsp
  0002a	b9 f4 00 00 00	 mov	 ecx, 244		; 000000f4H
  0002f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00034	f3 ab		 rep stosd
  00036	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1008]
  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00045	48 33 c4	 xor	 rax, rsp
  00048	48 89 85 78 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 147  :     const int crop_left   = crop[0];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00060	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00063	89 45 00	 mov	 DWORD PTR crop_left$[rbp], eax

; 148  :     const int crop_up     = crop[1];

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00077	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0007a	89 45 04	 mov	 DWORD PTR crop_up$[rbp], eax

; 149  :     const int crop_right  = crop[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	48 6b c0 02	 imul	 rax, rax, 2
  00086	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0008e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00091	89 45 08	 mov	 DWORD PTR crop_right$[rbp], eax

; 150  :     const int crop_bottom = crop[3];

  00094	b8 04 00 00 00	 mov	 eax, 4
  00099	48 6b c0 03	 imul	 rax, rax, 3
  0009d	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  000a5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a8	89 45 0c	 mov	 DWORD PTR crop_bottom$[rbp], eax

; 151  :     const void *src = src_array[0];

  000ab	b8 08 00 00 00	 mov	 eax, 8
  000b0	48 6b c0 00	 imul	 rax, rax, 0
  000b4	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR src_array$[rsp]
  000bc	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000c0	48 89 45 10	 mov	 QWORD PTR src$[rbp], rax

; 152  :     const auto y_range = thread_y_range(crop_up, height - crop_bottom, thread_id, thread_n);

  000c4	8b 45 0c	 mov	 eax, DWORD PTR crop_bottom$[rbp]
  000c7	8b 8c 24 20 04
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000ce	2b c8		 sub	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	8b 8c 24 38 04
	00 00		 mov	 ecx, DWORD PTR thread_n$[rsp]
  000d9	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000dd	44 8b 8c 24 30
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  000e5	44 8b c0	 mov	 r8d, eax
  000e8	8b 55 04	 mov	 edx, DWORD PTR crop_up$[rbp]
  000eb	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T32[rbp]
  000f2	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000f7	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  000fb	48 8b f9	 mov	 rdi, rcx
  000fe	48 8b f0	 mov	 rsi, rax
  00101	b9 0c 00 00 00	 mov	 ecx, 12
  00106	f3 a4		 rep movsb
  00108	48 8d 45 28	 lea	 rax, QWORD PTR y_range$[rbp]
  0010c	48 8d 4d 48	 lea	 rcx, QWORD PTR $T6[rbp]
  00110	48 8b f8	 mov	 rdi, rax
  00113	48 8b f1	 mov	 rsi, rcx
  00116	b9 0c 00 00 00	 mov	 ecx, 12
  0011b	f3 a4		 rep movsb

; 153  :     uint8_t *srcLine = (uint8_t *)src + src_y_pitch_byte * y_range.start_src + crop_left;

  0011d	8b 84 24 08 04
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00124	0f af 45 28	 imul	 eax, DWORD PTR y_range$[rbp]
  00128	48 98		 cdqe
  0012a	48 8b 4d 10	 mov	 rcx, QWORD PTR src$[rbp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 63 4d 00	 movsxd	 rcx, DWORD PTR crop_left$[rbp]
  00138	48 03 c1	 add	 rax, rcx
  0013b	48 89 45 58	 mov	 QWORD PTR srcLine$[rbp], rax

; 154  :     uint8_t *dstYLine = (uint8_t *)dst_array[0] + dst_y_pitch_byte * y_range.start_dst;

  0013f	b8 08 00 00 00	 mov	 eax, 8
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	8b 8c 24 18 04
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0014f	0f af 4d 2c	 imul	 ecx, DWORD PTR y_range$[rbp+4]
  00153	48 63 c9	 movsxd	 rcx, ecx
  00156	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst_array$[rsp]
  0015e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 45 60	 mov	 QWORD PTR dstYLine$[rbp], rax

; 155  :     uint8_t *dstCLine = (uint8_t *)dst_array[1] + dst_y_pitch_byte * (y_range.start_dst >> 1);

  00169	b8 08 00 00 00	 mov	 eax, 8
  0016e	48 6b c0 01	 imul	 rax, rax, 1
  00172	8b 4d 2c	 mov	 ecx, DWORD PTR y_range$[rbp+4]
  00175	d1 f9		 sar	 ecx, 1
  00177	8b 94 24 18 04
	00 00		 mov	 edx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017e	0f af d1	 imul	 edx, ecx
  00181	8b ca		 mov	 ecx, edx
  00183	48 63 c9	 movsxd	 rcx, ecx
  00186	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst_array$[rsp]
  0018e	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00192	48 8b c1	 mov	 rax, rcx
  00195	48 89 45 68	 mov	 QWORD PTR dstCLine$[rbp], rax

; 156  :     for (int y = 0; y < y_range.len; y += 2) {

  00199	c7 45 70 00 00
	00 00		 mov	 DWORD PTR y$7[rbp], 0
  001a0	eb 09		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  001a2	8b 45 70	 mov	 eax, DWORD PTR y$7[rbp]
  001a5	83 c0 02	 add	 eax, 2
  001a8	89 45 70	 mov	 DWORD PTR y$7[rbp], eax
$LN4@convert_yu:
  001ab	8b 45 30	 mov	 eax, DWORD PTR y_range$[rbp+8]
  001ae	39 45 70	 cmp	 DWORD PTR y$7[rbp], eax
  001b1	0f 8d 21 03 00
	00		 jge	 $LN3@convert_yu

; 157  :         uint8_t *p = srcLine;

  001b7	48 8b 45 58	 mov	 rax, QWORD PTR srcLine$[rbp]
  001bb	48 89 45 78	 mov	 QWORD PTR p$8[rbp], rax

; 158  :         uint8_t *pw = p + src_y_pitch_byte;

  001bf	48 63 84 24 08
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001c7	48 8b 4d 78	 mov	 rcx, QWORD PTR p$8[rbp]
  001cb	48 03 c8	 add	 rcx, rax
  001ce	48 8b c1	 mov	 rax, rcx
  001d1	48 89 85 80 00
	00 00		 mov	 QWORD PTR pw$9[rbp], rax

; 159  :         const int x_fin = width - crop_right - crop_left;

  001d8	8b 45 08	 mov	 eax, DWORD PTR crop_right$[rbp]
  001db	8b 8c 24 00 04
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001e2	2b c8		 sub	 ecx, eax
  001e4	8b c1		 mov	 eax, ecx
  001e6	2b 45 00	 sub	 eax, DWORD PTR crop_left$[rbp]
  001e9	89 85 88 00 00
	00		 mov	 DWORD PTR x_fin$10[rbp], eax

; 160  :         __m256i y0, y1, y3;
; 161  :         for (int x = 0; x < x_fin; x += 32, p += 64, pw += 64) {

  001ef	c7 85 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR x$14[rbp], 0
  001f9	eb 2d		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  001fb	8b 85 40 01 00
	00		 mov	 eax, DWORD PTR x$14[rbp]
  00201	83 c0 20	 add	 eax, 32			; 00000020H
  00204	89 85 40 01 00
	00		 mov	 DWORD PTR x$14[rbp], eax
  0020a	48 8b 45 78	 mov	 rax, QWORD PTR p$8[rbp]
  0020e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00212	48 89 45 78	 mov	 QWORD PTR p$8[rbp], rax
  00216	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$9[rbp]
  0021d	48 83 c0 40	 add	 rax, 64			; 00000040H
  00221	48 89 85 80 00
	00 00		 mov	 QWORD PTR pw$9[rbp], rax
$LN7@convert_yu:
  00228	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR x_fin$10[rbp]
  0022e	39 85 40 01 00
	00		 cmp	 DWORD PTR x$14[rbp], eax
  00234	0f 8d 51 02 00
	00		 jge	 $LN6@convert_yu

; 162  :             //-----------1行目---------------
; 163  :             y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(p+32)), _mm_loadu_si128((__m128i*)(p+ 0)));

  0023a	48 8b 45 78	 mov	 rax, QWORD PTR p$8[rbp]
  0023e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00242	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00246	66 0f 7f 85 80
	01 00 00	 movdqa	 XMMWORD PTR $T17[rbp], xmm0
  0024e	48 8b 45 78	 mov	 rax, QWORD PTR p$8[rbp]
  00252	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00256	66 0f 7f 85 50
	01 00 00	 movdqa	 XMMWORD PTR $T15[rbp], xmm0
  0025e	c5 f8 10 85 50
	01 00 00	 vmovups xmm0, XMMWORD PTR $T15[rbp]
  00266	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T16[rbp], ymm0
  0026e	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T16[rbp]
  00276	c4 e3 7d 18 85
	80 01 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T17[rbp], 1
  00280	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T18[rbp], ymm0
  00288	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T18[rbp]
  00290	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$11[rbp], ymm0

; 164  :             y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(p+48)), _mm_loadu_si128((__m128i*)(p+16)));

  00298	48 8b 45 78	 mov	 rax, QWORD PTR p$8[rbp]
  0029c	48 83 c0 30	 add	 rax, 48			; 00000030H
  002a0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a4	66 0f 7f 85 00
	02 00 00	 movdqa	 XMMWORD PTR $T21[rbp], xmm0
  002ac	48 8b 45 78	 mov	 rax, QWORD PTR p$8[rbp]
  002b0	48 83 c0 10	 add	 rax, 16
  002b4	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002b8	66 0f 7f 85 c0
	01 00 00	 movdqa	 XMMWORD PTR $T19[rbp], xmm0
  002c0	c5 f8 10 85 c0
	01 00 00	 vmovups xmm0, XMMWORD PTR $T19[rbp]
  002c8	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T20[rbp], ymm0
  002d0	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T20[rbp]
  002d8	c4 e3 7d 18 85
	00 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T21[rbp], 1
  002e2	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T22[rbp], ymm0
  002ea	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T22[rbp]
  002f2	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$12[rbp], ymm0

; 165  : 
; 166  :             separate_low_up(y0, y1);

  002fa	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR y1$12[rbp]
  00301	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR y0$11[rbp]
  00308	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m256i@@0@Z ; separate_low_up

; 167  :             y3 = y1;

  0030d	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$12[rbp]
  00315	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR y3$13[rbp], ymm0

; 168  : 
; 169  :             _mm256_storeu_si256((__m256i *)(dstYLine + x), y0);

  0031d	48 63 85 40 01
	00 00		 movsxd	 rax, DWORD PTR x$14[rbp]
  00324	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  00328	48 03 c8	 add	 rcx, rax
  0032b	48 8b c1	 mov	 rax, rcx
  0032e	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$11[rbp]
  00336	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 170  :             //-----------1行目終了---------------
; 171  : 
; 172  :             //-----------2行目---------------
; 173  :             y0 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(pw+32)), _mm_loadu_si128((__m128i*)(pw+ 0)));

  0033a	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$9[rbp]
  00341	48 83 c0 20	 add	 rax, 32			; 00000020H
  00345	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00349	66 0f 7f 85 80
	02 00 00	 movdqa	 XMMWORD PTR $T25[rbp], xmm0
  00351	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$9[rbp]
  00358	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0035c	66 0f 7f 85 40
	02 00 00	 movdqa	 XMMWORD PTR $T23[rbp], xmm0
  00364	c5 f8 10 85 40
	02 00 00	 vmovups xmm0, XMMWORD PTR $T23[rbp]
  0036c	c5 fe 7f 85 60
	02 00 00	 vmovdqu YMMWORD PTR $T24[rbp], ymm0
  00374	c5 fe 6f 85 60
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T24[rbp]
  0037c	c4 e3 7d 18 85
	80 02 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T25[rbp], 1
  00386	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T26[rbp], ymm0
  0038e	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T26[rbp]
  00396	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR y0$11[rbp], ymm0

; 174  :             y1 = _mm256_set_m128i(_mm_loadu_si128((__m128i*)(pw+48)), _mm_loadu_si128((__m128i*)(pw+16)));

  0039e	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$9[rbp]
  003a5	48 83 c0 30	 add	 rax, 48			; 00000030H
  003a9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003ad	66 0f 7f 85 00
	03 00 00	 movdqa	 XMMWORD PTR $T29[rbp], xmm0
  003b5	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR pw$9[rbp]
  003bc	48 83 c0 10	 add	 rax, 16
  003c0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  003c4	66 0f 7f 85 c0
	02 00 00	 movdqa	 XMMWORD PTR $T27[rbp], xmm0
  003cc	c5 f8 10 85 c0
	02 00 00	 vmovups xmm0, XMMWORD PTR $T27[rbp]
  003d4	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T28[rbp], ymm0
  003dc	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T28[rbp]
  003e4	c4 e3 7d 18 85
	00 03 00 00 01	 vinsertf128 ymm0, ymm0, XMMWORD PTR $T29[rbp], 1
  003ee	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T30[rbp], ymm0
  003f6	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T30[rbp]
  003fe	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$12[rbp], ymm0

; 175  : 
; 176  :             separate_low_up(y0, y1);

  00406	48 8d 95 e0 00
	00 00		 lea	 rdx, QWORD PTR y1$12[rbp]
  0040d	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR y0$11[rbp]
  00414	e8 00 00 00 00	 call	 ?separate_low_up@@YAXAEAT__m256i@@0@Z ; separate_low_up

; 177  : 
; 178  :             _mm256_storeu_si256((__m256i *)(dstYLine + dst_y_pitch_byte + x), y0);

  00419	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00421	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  00425	48 03 c8	 add	 rcx, rax
  00428	48 8b c1	 mov	 rax, rcx
  0042b	48 63 8d 40 01
	00 00		 movsxd	 rcx, DWORD PTR x$14[rbp]
  00432	48 03 c1	 add	 rax, rcx
  00435	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y0$11[rbp]
  0043d	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 179  :             //-----------2行目終了---------------
; 180  : 
; 181  :             y1 = _mm256_avg_epu8(y1, y3);  //VUVUVUVUVUVUVUVU

  00441	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$12[rbp]
  00449	c5 fd e0 85 20
	01 00 00	 vpavgb	 ymm0, ymm0, YMMWORD PTR y3$13[rbp]
  00451	c5 fe 7f 85 40
	03 00 00	 vmovdqu YMMWORD PTR $T31[rbp], ymm0
  00459	c5 fe 6f 85 40
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T31[rbp]
  00461	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR y1$12[rbp], ymm0

; 182  :             _mm256_storeu_si256((__m256i *)(dstCLine + x), y1);

  00469	48 63 85 40 01
	00 00		 movsxd	 rax, DWORD PTR x$14[rbp]
  00470	48 8b 4d 68	 mov	 rcx, QWORD PTR dstCLine$[rbp]
  00474	48 03 c8	 add	 rcx, rax
  00477	48 8b c1	 mov	 rax, rcx
  0047a	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR y1$12[rbp]
  00482	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 183  :         }

  00486	e9 70 fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 184  :         srcLine  += src_y_pitch_byte << 1;

  0048b	8b 84 24 08 04
	00 00		 mov	 eax, DWORD PTR src_y_pitch_byte$[rsp]
  00492	d1 e0		 shl	 eax, 1
  00494	48 98		 cdqe
  00496	48 8b 4d 58	 mov	 rcx, QWORD PTR srcLine$[rbp]
  0049a	48 03 c8	 add	 rcx, rax
  0049d	48 8b c1	 mov	 rax, rcx
  004a0	48 89 45 58	 mov	 QWORD PTR srcLine$[rbp], rax

; 185  :         dstYLine += dst_y_pitch_byte << 1;

  004a4	8b 84 24 18 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  004ab	d1 e0		 shl	 eax, 1
  004ad	48 98		 cdqe
  004af	48 8b 4d 60	 mov	 rcx, QWORD PTR dstYLine$[rbp]
  004b3	48 03 c8	 add	 rcx, rax
  004b6	48 8b c1	 mov	 rax, rcx
  004b9	48 89 45 60	 mov	 QWORD PTR dstYLine$[rbp], rax

; 186  :         dstCLine += dst_y_pitch_byte;

  004bd	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  004c5	48 8b 4d 68	 mov	 rcx, QWORD PTR dstCLine$[rbp]
  004c9	48 03 c8	 add	 rcx, rax
  004cc	48 8b c1	 mov	 rax, rcx
  004cf	48 89 45 68	 mov	 QWORD PTR dstCLine$[rbp], rax

; 187  :     }

  004d3	e9 ca fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 188  :     _mm256_zeroupper();

  004d8	c5 f8 77	 vzeroupper

; 189  : }

  004db	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  004df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004e6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004eb	48 8b 8d 78 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004f2	48 33 cc	 xor	 rcx, rsp
  004f5	e8 00 00 00 00	 call	 __security_check_cookie
  004fa	48 81 c4 d0 03
	00 00		 add	 rsp, 976		; 000003d0H
  00501	5f		 pop	 rdi
  00502	5e		 pop	 rsi
  00503	5d		 pop	 rbp
  00504	c3		 ret	 0
?convert_yuy2_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuy2_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
;	COMDAT ??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
pixel_size$ = 64
i$4 = 68
y_range$5 = 88
$T6 = 120
srcYLine$7 = 136
dstLine$8 = 144
y_width$9 = 152
y$10 = 156
$T11 = 168
__$ArrayPad$ = 184
dst$ = 224
src$ = 232
width$ = 240
src_y_pitch_byte$ = 248
src_uv_pitch_byte$ = 256
dst_y_pitch_byte$ = 264
height$ = 272
dst_height$ = 280
thread_id$ = 288
thread_n$ = 296
crop$ = 304
??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; copy_nv12_to_nv12_avx2_internal<1>, COMDAT

; 122  : void copy_nv12_to_nv12_avx2_internal(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 123  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 124  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 125  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 126  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 127  :     const int pixel_size = highbit_depth ? 2 : 1;

  000a6	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR pixel_size$[rsp], 2

; 128  :     for (int i = 0; i < 2; i++) {

  000ae	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$4[rsp], 0
  000b6	eb 0a		 jmp	 SHORT $LN4@copy_nv12_
$LN2@copy_nv12_:
  000b8	8b 44 24 44	 mov	 eax, DWORD PTR i$4[rsp]
  000bc	ff c0		 inc	 eax
  000be	89 44 24 44	 mov	 DWORD PTR i$4[rsp], eax
$LN4@copy_nv12_:
  000c2	83 7c 24 44 02	 cmp	 DWORD PTR i$4[rsp], 2
  000c7	0f 8d 75 01 00
	00		 jge	 $LN3@copy_nv12_

; 129  :         const auto y_range = thread_y_range(crop_up >> i, (height - crop_bottom) >> i, thread_id, thread_n);

  000cd	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d1	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 4c 24 44	 mov	 ecx, DWORD PTR i$4[rsp]
  000e0	d3 f8		 sar	 eax, cl
  000e2	8b 4c 24 44	 mov	 ecx, DWORD PTR i$4[rsp]
  000e6	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000ea	d3 fa		 sar	 edx, cl
  000ec	8b ca		 mov	 ecx, edx
  000ee	8b 94 24 28 01
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  000f5	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  000f9	44 8b 8c 24 20
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00101	44 8b c0	 mov	 r8d, eax
  00104	8b d1		 mov	 edx, ecx
  00106	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0010e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00113	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T6[rsp]
  00118	48 8b f9	 mov	 rdi, rcx
  0011b	48 8b f0	 mov	 rsi, rax
  0011e	b9 0c 00 00 00	 mov	 ecx, 12
  00123	f3 a4		 rep movsb
  00125	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$5[rsp]
  0012a	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T6[rsp]
  0012f	48 8b f8	 mov	 rdi, rax
  00132	48 8b f1	 mov	 rsi, rcx
  00135	b9 0c 00 00 00	 mov	 ecx, 12
  0013a	f3 a4		 rep movsb

; 130  :         const uint8_t *srcYLine = (const uint8_t *)src[i] + src_y_pitch_byte * y_range.start_src + crop_left;

  0013c	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$4[rsp]
  00141	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00148	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$5[rsp]
  0014d	48 63 c9	 movsxd	 rcx, ecx
  00150	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00158	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0015c	48 03 c1	 add	 rax, rcx
  0015f	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00164	48 03 c1	 add	 rax, rcx
  00167	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 131  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  0016f	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$4[rsp]
  00174	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017b	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00180	48 63 c9	 movsxd	 rcx, ecx
  00183	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018b	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  0018f	48 8b c1	 mov	 rax, rcx
  00192	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 132  :         const int y_width = width - crop_right - crop_left;

  0019a	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0019e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001a5	2b c8		 sub	 ecx, eax
  001a7	8b c1		 mov	 eax, ecx
  001a9	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001ad	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 133  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  001b4	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  001bf	eb 4c		 jmp	 SHORT $LN7@copy_nv12_
$LN5@copy_nv12_:
  001c1	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001c8	ff c0		 inc	 eax
  001ca	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001d1	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001d9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001e1	48 03 c8	 add	 rcx, rax
  001e4	48 8b c1	 mov	 rax, rcx
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001ef	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001f7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001ff	48 03 c8	 add	 rcx, rax
  00202	48 8b c1	 mov	 rax, rcx
  00205	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN7@copy_nv12_:
  0020d	8b 44 24 60	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  00211	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  00218	7d 23		 jge	 SHORT $LN6@copy_nv12_

; 134  :             avx2_memcpy<true>(dstLine, srcYLine, y_width * pixel_size);

  0021a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_width$9[rsp]
  00221	d1 e0		 shl	 eax, 1
  00223	44 8b c0	 mov	 r8d, eax
  00226	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$7[rsp]
  0022e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  00236	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 135  :         }

  0023b	eb 84		 jmp	 SHORT $LN5@copy_nv12_
$LN6@copy_nv12_:

; 136  :     }

  0023d	e9 76 fe ff ff	 jmp	 $LN2@copy_nv12_
$LN3@copy_nv12_:

; 137  : }

  00242	48 8b cc	 mov	 rcx, rsp
  00245	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0024c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00251	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00259	48 33 cc	 xor	 rcx, rsp
  0025c	e8 00 00 00 00	 call	 __security_check_cookie
  00261	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00268	5f		 pop	 rdi
  00269	5e		 pop	 rsi
  0026a	c3		 ret	 0
??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; copy_nv12_to_nv12_avx2_internal<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; copy_p010_to_p010_avx2

; 142  : void copy_p010_to_p010_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 143  :     return copy_nv12_to_nv12_avx2_internal<true>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$copy_nv12_to_nv12_avx2_internal@$00@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_nv12_to_nv12_avx2_internal<1>

; 144  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?copy_p010_to_p010_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; copy_p010_to_p010_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
;	COMDAT ??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
_TEXT	SEGMENT
crop_left$ = 48
crop_up$ = 52
crop_right$ = 56
crop_bottom$ = 60
pixel_size$ = 64
i$4 = 68
y_range$5 = 88
$T6 = 120
srcYLine$7 = 136
dstLine$8 = 144
y_width$9 = 152
y$10 = 156
$T11 = 168
__$ArrayPad$ = 184
dst$ = 224
src$ = 232
width$ = 240
src_y_pitch_byte$ = 248
src_uv_pitch_byte$ = 256
dst_y_pitch_byte$ = 264
height$ = 272
dst_height$ = 280
thread_id$ = 288
thread_n$ = 296
crop$ = 304
??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; copy_nv12_to_nv12_avx2_internal<0>, COMDAT

; 122  : void copy_nv12_to_nv12_avx2_internal(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 123  :     const int crop_left   = crop[0];

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00057	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005a	89 44 24 30	 mov	 DWORD PTR crop_left$[rsp], eax

; 124  :     const int crop_up     = crop[1];

  0005e	b8 04 00 00 00	 mov	 eax, 4
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0006f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00072	89 44 24 34	 mov	 DWORD PTR crop_up$[rsp], eax

; 125  :     const int crop_right  = crop[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	48 6b c0 02	 imul	 rax, rax, 2
  0007f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  00087	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0008a	89 44 24 38	 mov	 DWORD PTR crop_right$[rsp], eax

; 126  :     const int crop_bottom = crop[3];

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR crop$[rsp]
  0009f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000a2	89 44 24 3c	 mov	 DWORD PTR crop_bottom$[rsp], eax

; 127  :     const int pixel_size = highbit_depth ? 2 : 1;

  000a6	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR pixel_size$[rsp], 1

; 128  :     for (int i = 0; i < 2; i++) {

  000ae	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$4[rsp], 0
  000b6	eb 0a		 jmp	 SHORT $LN4@copy_nv12_
$LN2@copy_nv12_:
  000b8	8b 44 24 44	 mov	 eax, DWORD PTR i$4[rsp]
  000bc	ff c0		 inc	 eax
  000be	89 44 24 44	 mov	 DWORD PTR i$4[rsp], eax
$LN4@copy_nv12_:
  000c2	83 7c 24 44 02	 cmp	 DWORD PTR i$4[rsp], 2
  000c7	0f 8d 71 01 00
	00		 jge	 $LN3@copy_nv12_

; 129  :         const auto y_range = thread_y_range(crop_up >> i, (height - crop_bottom) >> i, thread_id, thread_n);

  000cd	8b 44 24 3c	 mov	 eax, DWORD PTR crop_bottom$[rsp]
  000d1	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR height$[rsp]
  000d8	2b c8		 sub	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	8b 4c 24 44	 mov	 ecx, DWORD PTR i$4[rsp]
  000e0	d3 f8		 sar	 eax, cl
  000e2	8b 4c 24 44	 mov	 ecx, DWORD PTR i$4[rsp]
  000e6	8b 54 24 34	 mov	 edx, DWORD PTR crop_up$[rsp]
  000ea	d3 fa		 sar	 edx, cl
  000ec	8b ca		 mov	 ecx, edx
  000ee	8b 94 24 28 01
	00 00		 mov	 edx, DWORD PTR thread_n$[rsp]
  000f5	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  000f9	44 8b 8c 24 20
	01 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00101	44 8b c0	 mov	 r8d, eax
  00104	8b d1		 mov	 edx, ecx
  00106	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  0010e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00113	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T6[rsp]
  00118	48 8b f9	 mov	 rdi, rcx
  0011b	48 8b f0	 mov	 rsi, rax
  0011e	b9 0c 00 00 00	 mov	 ecx, 12
  00123	f3 a4		 rep movsb
  00125	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$5[rsp]
  0012a	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T6[rsp]
  0012f	48 8b f8	 mov	 rdi, rax
  00132	48 8b f1	 mov	 rsi, rcx
  00135	b9 0c 00 00 00	 mov	 ecx, 12
  0013a	f3 a4		 rep movsb

; 130  :         const uint8_t *srcYLine = (const uint8_t *)src[i] + src_y_pitch_byte * y_range.start_src + crop_left;

  0013c	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$4[rsp]
  00141	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00148	0f af 4c 24 58	 imul	 ecx, DWORD PTR y_range$5[rsp]
  0014d	48 63 c9	 movsxd	 rcx, ecx
  00150	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00158	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0015c	48 03 c1	 add	 rax, rcx
  0015f	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR crop_left$[rsp]
  00164	48 03 c1	 add	 rax, rcx
  00167	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$7[rsp], rax

; 131  :         uint8_t *dstLine = (uint8_t *)dst[i] + dst_y_pitch_byte * y_range.start_dst;

  0016f	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$4[rsp]
  00174	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0017b	0f af 4c 24 5c	 imul	 ecx, DWORD PTR y_range$5[rsp+4]
  00180	48 63 c9	 movsxd	 rcx, ecx
  00183	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0018b	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  0018f	48 8b c1	 mov	 rax, rcx
  00192	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax

; 132  :         const int y_width = width - crop_right - crop_left;

  0019a	8b 44 24 38	 mov	 eax, DWORD PTR crop_right$[rsp]
  0019e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001a5	2b c8		 sub	 ecx, eax
  001a7	8b c1		 mov	 eax, ecx
  001a9	2b 44 24 30	 sub	 eax, DWORD PTR crop_left$[rsp]
  001ad	89 84 24 98 00
	00 00		 mov	 DWORD PTR y_width$9[rsp], eax

; 133  :         for (int y = 0; y < y_range.len; y++, srcYLine += src_y_pitch_byte, dstLine += dst_y_pitch_byte) {

  001b4	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR y$10[rsp], 0
  001bf	eb 4c		 jmp	 SHORT $LN7@copy_nv12_
$LN5@copy_nv12_:
  001c1	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR y$10[rsp]
  001c8	ff c0		 inc	 eax
  001ca	89 84 24 9c 00
	00 00		 mov	 DWORD PTR y$10[rsp], eax
  001d1	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001d9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR srcYLine$7[rsp]
  001e1	48 03 c8	 add	 rcx, rax
  001e4	48 8b c1	 mov	 rax, rcx
  001e7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR srcYLine$7[rsp], rax
  001ef	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001f7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  001ff	48 03 c8	 add	 rcx, rax
  00202	48 8b c1	 mov	 rax, rcx
  00205	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dstLine$8[rsp], rax
$LN7@copy_nv12_:
  0020d	8b 44 24 60	 mov	 eax, DWORD PTR y_range$5[rsp+8]
  00211	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR y$10[rsp], eax
  00218	7d 1f		 jge	 SHORT $LN6@copy_nv12_

; 134  :             avx2_memcpy<true>(dstLine, srcYLine, y_width * pixel_size);

  0021a	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR y_width$9[rsp]
  00222	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR srcYLine$7[rsp]
  0022a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dstLine$8[rsp]
  00232	e8 00 00 00 00	 call	 ??$avx2_memcpy@$00@@YAXPEAEPEBEH@Z ; avx2_memcpy<1>

; 135  :         }

  00237	eb 88		 jmp	 SHORT $LN5@copy_nv12_
$LN6@copy_nv12_:

; 136  :     }

  00239	e9 7a fe ff ff	 jmp	 $LN2@copy_nv12_
$LN3@copy_nv12_:

; 137  : }

  0023e	48 8b cc	 mov	 rcx, rsp
  00241	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00248	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0024d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00255	48 33 cc	 xor	 rcx, rsp
  00258	e8 00 00 00 00	 call	 __security_check_cookie
  0025d	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00264	5f		 pop	 rdi
  00265	5e		 pop	 rsi
  00266	c3		 ret	 0
??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; copy_nv12_to_nv12_avx2_internal<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; copy_nv12_to_nv12_avx2

; 138  : void copy_nv12_to_nv12_avx2(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 139  :     return copy_nv12_to_nv12_avx2_internal<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$copy_nv12_to_nv12_avx2_internal@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; copy_nv12_to_nv12_avx2_internal<0>

; 140  : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?copy_nv12_to_nv12_avx2@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; copy_nv12_to_nv12_avx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_avx2.cpp
_TEXT	SEGMENT
x4$ = 0
x5$ = 32
xMaskLowByte$ = 64
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
x0_return_lower$ = 480
x1_return_upper$ = 488
?separate_low_up@@YAXAEAT__m256i@@0@Z PROC		; separate_low_up

; 106  : static __forceinline void separate_low_up(__m256i& x0_return_lower, __m256i& x1_return_upper) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+480]

; 107  :     __m256i x4, x5;
; 108  :     const __m256i xMaskLowByte = _mm256_srli_epi16(_mm256_cmpeq_epi8(_mm256_setzero_si256(), _mm256_setzero_si256()), 8);

  00033	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00037	c5 fe 7f 85 80
	00 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  0003f	c5 f9 ef c0	 vpxor	 xmm0, xmm0, xmm0
  00043	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00048	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004d	c5 fd 74 85 80
	00 00 00	 vpcmpeqb ymm0, ymm0, YMMWORD PTR $T2[rbp]
  00055	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  0005d	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  00065	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  0006a	c5 fe 7f 85 c0
	00 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  00072	c5 fe 6f 85 c0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  0007a	c5 fe 7f 45 40	 vmovdqu YMMWORD PTR xMaskLowByte$[rbp], ymm0

; 109  :     x4 = _mm256_srli_epi16(x0_return_lower, 8);

  0007f	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  00087	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0008b	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  00090	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR $T5[rbp], ymm0
  00098	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR $T5[rbp]
  000a0	c5 fe 7f 45 00	 vmovdqu YMMWORD PTR x4$[rbp], ymm0

; 110  :     x5 = _mm256_srli_epi16(x1_return_upper, 8);

  000a5	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  000ad	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000b1	c5 fd 71 d0 08	 vpsrlw	 ymm0, ymm0, 8
  000b6	c5 fe 7f 85 00
	01 00 00	 vmovdqu YMMWORD PTR $T6[rbp], ymm0
  000be	c5 fe 6f 85 00
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T6[rbp]
  000c6	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR x5$[rbp], ymm0

; 111  : 
; 112  :     x0_return_lower = _mm256_and_si256(x0_return_lower, xMaskLowByte);

  000cb	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000d3	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  000d7	c5 fd db 45 40	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskLowByte$[rbp]
  000dc	c5 fe 7f 85 20
	01 00 00	 vmovdqu YMMWORD PTR $T7[rbp], ymm0
  000e4	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  000ec	c5 fe 6f 85 20
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T7[rbp]
  000f4	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 113  :     x1_return_upper = _mm256_and_si256(x1_return_upper, xMaskLowByte);

  000f8	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00100	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00104	c5 fd db 45 40	 vpand	 ymm0, ymm0, YMMWORD PTR xMaskLowByte$[rbp]
  00109	c5 fe 7f 85 40
	01 00 00	 vmovdqu YMMWORD PTR $T8[rbp], ymm0
  00111	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00119	c5 fe 6f 85 40
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T8[rbp]
  00121	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 114  : 
; 115  :     x0_return_lower = _mm256_packus_epi16(x0_return_lower, x1_return_upper);

  00125	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  0012d	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR x1_return_upper$[rsp]
  00135	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  00139	c5 fd 67 01	 vpackuswb ymm0, ymm0, YMMWORD PTR [rcx]
  0013d	c5 fe 7f 85 60
	01 00 00	 vmovdqu YMMWORD PTR $T9[rbp], ymm0
  00145	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR x0_return_lower$[rsp]
  0014d	c5 fe 6f 85 60
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T9[rbp]
  00155	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 116  :     x1_return_upper = _mm256_packus_epi16(x4, x5);

  00159	c5 fe 6f 45 00	 vmovdqu ymm0, YMMWORD PTR x4$[rbp]
  0015e	c5 fd 67 45 20	 vpackuswb ymm0, ymm0, YMMWORD PTR x5$[rbp]
  00163	c5 fe 7f 85 80
	01 00 00	 vmovdqu YMMWORD PTR $T10[rbp], ymm0
  0016b	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR x1_return_upper$[rsp]
  00173	c5 fe 6f 85 80
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T10[rbp]
  0017b	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 117  : }

  0017f	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00186	5f		 pop	 rdi
  00187	5d		 pop	 rbp
  00188	c3		 ret	 0
?separate_low_up@@YAXAEAT__m256i@@0@Z ENDP		; separate_low_up
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
h$ = 32
y_range$ = 56
y0$ = 84
y1$ = 88
__$ArrayPad$ = 104
$T4 = 144
y_start$ = 152
y_end$ = 160
thread_id$ = 168
thread_n$ = 176
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1e 00 00 00	 mov	 ecx, 30
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c4	 xor	 rax, rsp
  0003a	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 376  :     const int h = y_end - y_start;

  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_start$[rsp]
  00046	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y_end$[rsp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00055	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00059	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR thread_id$[rsp]
  00061	99		 cdq
  00062	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  00069	83 c0 03	 add	 eax, 3
  0006c	83 e0 fc	 and	 eax, -4
  0006f	89 44 24 54	 mov	 DWORD PTR y0$[rsp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  00073	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	8b 4c 24 20	 mov	 ecx, DWORD PTR h$[rsp]
  00080	0f af c8	 imul	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  0008d	83 c0 03	 add	 eax, 3
  00090	83 e0 fc	 and	 eax, -4
  00093	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax

; 380  :     if (y1 > h) {

  00097	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0009b	39 44 24 58	 cmp	 DWORD PTR y1$[rsp], eax
  0009f	7e 08		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  000a1	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  000a5	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  000a9	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000ad	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y_start$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR y_range$[rsp], eax

; 384  :     y_range.start_dst = y0;

  000bc	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c0	89 44 24 3c	 mov	 DWORD PTR y_range$[rsp+4], eax

; 385  :     y_range.len = y1 - y0;

  000c4	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c8	8b 4c 24 58	 mov	 ecx, DWORD PTR y1$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR y_range$[rsp+8], eax

; 386  :     return y_range;

  000d4	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  000d9	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 0c 00 00 00	 mov	 ecx, 12
  000e9	f3 a4		 rep movsb
  000eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 387  : }

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8b cc	 mov	 rcx, rsp
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b c7	 mov	 rax, rdi
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010d	48 33 cc	 xor	 rcx, rsp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00119	5f		 pop	 rdi
  0011a	5e		 pop	 rsi
  0011b	c3		 ret	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
