; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	IID_ID3D11Texture2D
PUBLIC	IID_ID3D11Texture3D
PUBLIC	IID_ID3D11View
PUBLIC	GUID_DEVINTERFACE_DISK
PUBLIC	GUID_DEVINTERFACE_CDROM
PUBLIC	GUID_DEVINTERFACE_PARTITION
PUBLIC	GUID_DEVINTERFACE_TAPE
PUBLIC	GUID_DEVINTERFACE_WRITEONCEDISK
PUBLIC	GUID_DEVINTERFACE_VOLUME
PUBLIC	GUID_DEVINTERFACE_MEDIUMCHANGER
PUBLIC	GUID_DEVINTERFACE_FLOPPY
PUBLIC	GUID_DEVINTERFACE_CDCHANGER
PUBLIC	GUID_DEVINTERFACE_STORAGEPORT
PUBLIC	GUID_DEVINTERFACE_VMLUN
PUBLIC	GUID_DEVINTERFACE_SES
PUBLIC	GUID_DEVINTERFACE_SERVICE_VOLUME
PUBLIC	GUID_DEVINTERFACE_HIDDEN_VOLUME
PUBLIC	GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
PUBLIC	GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
PUBLIC	GUID_SCM_PD_HEALTH_NOTIFICATION
PUBLIC	GUID_SCM_PD_PASSTHROUGH_INVDIMM
PUBLIC	GUID_DEVINTERFACE_COMPORT
PUBLIC	GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
PUBLIC	IID_ID3D11ShaderResourceView
PUBLIC	IID_ID3D10InfoQueue
PUBLIC	GUID_DeviceType
PUBLIC	IID_ID3D11RenderTargetView
PUBLIC	IID_ID3D10ShaderReflectionType
PUBLIC	IID_ID3D10ShaderReflectionVariable
PUBLIC	IID_ID3D10ShaderReflectionConstantBuffer
PUBLIC	IID_ID3D10ShaderReflection
PUBLIC	IID_ID3D10StateBlock
PUBLIC	IID_ID3D11DepthStencilView
PUBLIC	IID_ID3D10EffectType
PUBLIC	IID_ID3D10EffectVariable
PUBLIC	GUID_DEVINTERFACE_SMARTCARD_READER
PUBLIC	IID_ID3D10EffectScalarVariable
PUBLIC	IID_ID3D11UnorderedAccessView
PUBLIC	IID_ID3D11VertexShader
PUBLIC	IID_ID3D11HullShader
PUBLIC	IID_ID3D11DomainShader
PUBLIC	IID_ID3D11GeometryShader
PUBLIC	IID_ID3D11PixelShader
PUBLIC	IID_ID3D11ComputeShader
PUBLIC	IID_ID3D10EffectVectorVariable
PUBLIC	IID_ID3D11InputLayout
PUBLIC	IID_ID3D10EffectMatrixVariable
PUBLIC	IID_ID3D11SamplerState
PUBLIC	IID_ID3D10EffectStringVariable
PUBLIC	IID_ID3D11Asynchronous
PUBLIC	IID_ID3D10EffectShaderResourceVariable
PUBLIC	IID_ID3D11Query
PUBLIC	IID_ID3D11Predicate
PUBLIC	GUID_MAX_POWER_SAVINGS
PUBLIC	GUID_MIN_POWER_SAVINGS
PUBLIC	GUID_TYPICAL_POWER_SAVINGS
PUBLIC	NO_SUBGROUP_GUID
PUBLIC	ALL_POWERSCHEMES_GUID
PUBLIC	GUID_POWERSCHEME_PERSONALITY
PUBLIC	GUID_ACTIVE_POWERSCHEME
PUBLIC	GUID_IDLE_RESILIENCY_SUBGROUP
PUBLIC	GUID_IDLE_RESILIENCY_PERIOD
PUBLIC	GUID_DEEP_SLEEP_ENABLED
PUBLIC	GUID_DEEP_SLEEP_PLATFORM_STATE
PUBLIC	GUID_DISK_COALESCING_POWERDOWN_TIMEOUT
PUBLIC	GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT
PUBLIC	GUID_VIDEO_SUBGROUP
PUBLIC	GUID_VIDEO_POWERDOWN_TIMEOUT
PUBLIC	GUID_VIDEO_ANNOYANCE_TIMEOUT
PUBLIC	GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE
PUBLIC	GUID_VIDEO_DIM_TIMEOUT
PUBLIC	GUID_VIDEO_ADAPTIVE_POWERDOWN
PUBLIC	GUID_MONITOR_POWER_ON
PUBLIC	GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS
PUBLIC	GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS
PUBLIC	GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS
PUBLIC	GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS
PUBLIC	GUID_CONSOLE_DISPLAY_STATE
PUBLIC	GUID_ALLOW_DISPLAY_REQUIRED
PUBLIC	GUID_VIDEO_CONSOLE_LOCK_TIMEOUT
PUBLIC	GUID_ADVANCED_COLOR_QUALITY_BIAS
PUBLIC	GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP
PUBLIC	GUID_NON_ADAPTIVE_INPUT_TIMEOUT
PUBLIC	GUID_ADAPTIVE_INPUT_CONTROLLER_STATE
PUBLIC	IID_ID3D10EffectRenderTargetViewVariable
PUBLIC	GUID_DISK_SUBGROUP
PUBLIC	GUID_DISK_MAX_POWER
PUBLIC	GUID_DISK_POWERDOWN_TIMEOUT
PUBLIC	GUID_DISK_IDLE_TIMEOUT
PUBLIC	GUID_DISK_BURST_IGNORE_THRESHOLD
PUBLIC	GUID_DISK_ADAPTIVE_POWERDOWN
PUBLIC	GUID_SLEEP_SUBGROUP
PUBLIC	GUID_SLEEP_IDLE_THRESHOLD
PUBLIC	GUID_STANDBY_TIMEOUT
PUBLIC	GUID_UNATTEND_SLEEP_TIMEOUT
PUBLIC	GUID_HIBERNATE_TIMEOUT
PUBLIC	GUID_HIBERNATE_FASTS4_POLICY
PUBLIC	GUID_CRITICAL_POWER_TRANSITION
PUBLIC	GUID_SYSTEM_AWAYMODE
PUBLIC	GUID_ALLOW_AWAYMODE
PUBLIC	GUID_USER_PRESENCE_PREDICTION
PUBLIC	GUID_STANDBY_BUDGET_GRACE_PERIOD
PUBLIC	GUID_STANDBY_BUDGET_PERCENT
PUBLIC	GUID_STANDBY_RESERVE_GRACE_PERIOD
PUBLIC	GUID_STANDBY_RESERVE_TIME
PUBLIC	GUID_STANDBY_RESET_PERCENT
PUBLIC	GUID_ALLOW_STANDBY_STATES
PUBLIC	GUID_ALLOW_RTC_WAKE
PUBLIC	GUID_LEGACY_RTC_MITIGATION
PUBLIC	GUID_ALLOW_SYSTEM_REQUIRED
PUBLIC	GUID_POWER_SAVING_STATUS
PUBLIC	GUID_ENERGY_SAVER_SUBGROUP
PUBLIC	GUID_ENERGY_SAVER_BATTERY_THRESHOLD
PUBLIC	GUID_ENERGY_SAVER_BRIGHTNESS
PUBLIC	GUID_ENERGY_SAVER_POLICY
PUBLIC	GUID_SYSTEM_BUTTON_SUBGROUP
PUBLIC	GUID_POWERBUTTON_ACTION
PUBLIC	GUID_SLEEPBUTTON_ACTION
PUBLIC	GUID_USERINTERFACEBUTTON_ACTION
PUBLIC	GUID_LIDCLOSE_ACTION
PUBLIC	GUID_LIDOPEN_POWERSTATE
PUBLIC	GUID_BATTERY_SUBGROUP
PUBLIC	GUID_BATTERY_DISCHARGE_ACTION_0
PUBLIC	GUID_BATTERY_DISCHARGE_LEVEL_0
PUBLIC	GUID_BATTERY_DISCHARGE_FLAGS_0
PUBLIC	GUID_BATTERY_DISCHARGE_ACTION_1
PUBLIC	GUID_BATTERY_DISCHARGE_LEVEL_1
PUBLIC	GUID_BATTERY_DISCHARGE_FLAGS_1
PUBLIC	GUID_BATTERY_DISCHARGE_ACTION_2
PUBLIC	GUID_BATTERY_DISCHARGE_LEVEL_2
PUBLIC	GUID_BATTERY_DISCHARGE_FLAGS_2
PUBLIC	GUID_BATTERY_DISCHARGE_ACTION_3
PUBLIC	GUID_BATTERY_DISCHARGE_LEVEL_3
PUBLIC	GUID_BATTERY_DISCHARGE_FLAGS_3
PUBLIC	GUID_PROCESSOR_SETTINGS_SUBGROUP
PUBLIC	GUID_PROCESSOR_THROTTLE_POLICY
PUBLIC	GUID_PROCESSOR_THROTTLE_MAXIMUM
PUBLIC	GUID_PROCESSOR_THROTTLE_MAXIMUM_1
PUBLIC	GUID_PROCESSOR_THROTTLE_MINIMUM
PUBLIC	GUID_PROCESSOR_THROTTLE_MINIMUM_1
PUBLIC	GUID_PROCESSOR_FREQUENCY_LIMIT
PUBLIC	GUID_PROCESSOR_FREQUENCY_LIMIT_1
PUBLIC	GUID_PROCESSOR_ALLOW_THROTTLING
PUBLIC	GUID_PROCESSOR_IDLESTATE_POLICY
PUBLIC	GUID_PROCESSOR_PERFSTATE_POLICY
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
PUBLIC	IID_ID3D11Counter
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_POLICY
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_POLICY_1
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_POLICY
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_POLICY_1
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_TIME
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_TIME_1
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_TIME
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_TIME_1
PUBLIC	GUID_PROCESSOR_PERF_TIME_CHECK
PUBLIC	GUID_PROCESSOR_PERF_BOOST_POLICY
PUBLIC	GUID_PROCESSOR_PERF_BOOST_MODE
PUBLIC	GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
PUBLIC	GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
PUBLIC	GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
PUBLIC	GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
PUBLIC	GUID_PROCESSOR_DUTY_CYCLING
PUBLIC	IID_ID3D10EffectDepthStencilViewVariable
PUBLIC	GUID_PROCESSOR_IDLE_ALLOW_SCALING
PUBLIC	GUID_PROCESSOR_IDLE_DISABLE
PUBLIC	GUID_PROCESSOR_IDLE_STATE_MAXIMUM
PUBLIC	GUID_PROCESSOR_IDLE_TIME_CHECK
PUBLIC	GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
PUBLIC	GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
PUBLIC	GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
PUBLIC	GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
PUBLIC	GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
PUBLIC	GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
PUBLIC	GUID_PROCESSOR_CORE_PARKING_MAX_CORES
PUBLIC	GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
PUBLIC	GUID_PROCESSOR_CORE_PARKING_MIN_CORES
PUBLIC	GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
PUBLIC	GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
PUBLIC	GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
PUBLIC	GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
PUBLIC	GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
PUBLIC	GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
PUBLIC	GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
PUBLIC	GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
PUBLIC	GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
PUBLIC	GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
PUBLIC	GUID_PROCESSOR_PARKING_CORE_OVERRIDE
PUBLIC	IID_ID3D11ClassInstance
PUBLIC	GUID_PROCESSOR_PARKING_PERF_STATE
PUBLIC	GUID_PROCESSOR_PARKING_PERF_STATE_1
PUBLIC	GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
PUBLIC	GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
PUBLIC	GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
PUBLIC	GUID_PROCESSOR_PERF_HISTORY
PUBLIC	GUID_PROCESSOR_PERF_HISTORY_1
PUBLIC	GUID_PROCESSOR_PERF_INCREASE_HISTORY
PUBLIC	GUID_PROCESSOR_PERF_DECREASE_HISTORY
PUBLIC	GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
PUBLIC	GUID_PROCESSOR_PERF_LATENCY_HINT
PUBLIC	GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
PUBLIC	GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
PUBLIC	GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
PUBLIC	GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
PUBLIC	GUID_PROCESSOR_DISTRIBUTE_UTILITY
PUBLIC	GUID_PROCESSOR_HETEROGENEOUS_POLICY
PUBLIC	GUID_PROCESSOR_HETERO_DECREASE_TIME
PUBLIC	GUID_PROCESSOR_HETERO_INCREASE_TIME
PUBLIC	GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
PUBLIC	GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
PUBLIC	GUID_PROCESSOR_CLASS0_FLOOR_PERF
PUBLIC	GUID_PROCESSOR_CLASS1_INITIAL_PERF
PUBLIC	GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
PUBLIC	IID_ID3D11ClassLinkage
PUBLIC	GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
PUBLIC	GUID_SYSTEM_COOLING_POLICY
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
PUBLIC	GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
PUBLIC	GUID_LOCK_CONSOLE_ON_WAKE
PUBLIC	GUID_DEVICE_IDLE_POLICY
PUBLIC	GUID_CONNECTIVITY_IN_STANDBY
PUBLIC	GUID_DISCONNECTED_STANDBY_MODE
PUBLIC	GUID_ACDC_POWER_SOURCE
PUBLIC	GUID_LIDSWITCH_STATE_CHANGE
PUBLIC	GUID_BATTERY_PERCENTAGE_REMAINING
PUBLIC	GUID_BATTERY_COUNT
PUBLIC	GUID_GLOBAL_USER_PRESENCE
PUBLIC	IID_ID3D11CommandList
PUBLIC	GUID_SESSION_DISPLAY_STATUS
PUBLIC	GUID_SESSION_USER_PRESENCE
PUBLIC	GUID_IDLE_BACKGROUND_TASK
PUBLIC	GUID_BACKGROUND_TASK_NOTIFICATION
PUBLIC	GUID_APPLAUNCH_BUTTON
PUBLIC	GUID_PCIEXPRESS_SETTINGS_SUBGROUP
PUBLIC	GUID_PCIEXPRESS_ASPM_POLICY
PUBLIC	GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
PUBLIC	GUID_INTSTEER_SUBGROUP
PUBLIC	IID_ID3D10EffectConstantBuffer
PUBLIC	GUID_INTSTEER_MODE
PUBLIC	GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
PUBLIC	GUID_INTSTEER_TIME_UNPARK_TRIGGER
PUBLIC	GUID_GRAPHICS_SUBGROUP
PUBLIC	GUID_GPU_PREFERENCE_POLICY
PUBLIC	GUID_MIXED_REALITY_MODE
PUBLIC	GUID_SPR_ACTIVE_SESSION_CHANGE
PUBLIC	IID_ID3D10EffectShaderVariable
PUBLIC	IID_ID3D10EffectBlendVariable
PUBLIC	IID_ID3D10EffectDepthStencilVariable
PUBLIC	IID_ID3D11DeviceContext
PUBLIC	IID_ID3D10EffectRasterizerVariable
PUBLIC	IID_ID3D10EffectSamplerVariable
PUBLIC	IID_ID3D10EffectPass
PUBLIC	IID_ID3D10EffectTechnique
PUBLIC	IID_ID3D10Effect
PUBLIC	IID_ID3D10EffectPool
PUBLIC	PPM_PERFSTATE_CHANGE_GUID
PUBLIC	PPM_PERFSTATE_DOMAIN_CHANGE_GUID
PUBLIC	PPM_IDLESTATE_CHANGE_GUID
PUBLIC	PPM_PERFSTATES_DATA_GUID
PUBLIC	PPM_IDLESTATES_DATA_GUID
PUBLIC	PPM_IDLE_ACCOUNTING_GUID
PUBLIC	PPM_IDLE_ACCOUNTING_EX_GUID
PUBLIC	PPM_THERMALCONSTRAINT_GUID
PUBLIC	PPM_PERFMON_PERFSTATE_GUID
PUBLIC	PPM_THERMAL_POLICY_CHANGE_GUID
PUBLIC	IID_ID3D10BlendState1
PUBLIC	D3D11_DECODER_PROFILE_MPEG2_MOCOMP
PUBLIC	D3D11_DECODER_PROFILE_MPEG2_IDCT
PUBLIC	D3D11_DECODER_PROFILE_MPEG2_VLD
PUBLIC	D3D11_DECODER_PROFILE_MPEG1_VLD
PUBLIC	D3D11_DECODER_PROFILE_MPEG2and1_VLD
PUBLIC	D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
PUBLIC	D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_IDCT_FGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_FGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
PUBLIC	D3D11_DECODER_PROFILE_WMV8_POSTPROC
PUBLIC	D3D11_DECODER_PROFILE_WMV8_MOCOMP
PUBLIC	D3D11_DECODER_PROFILE_WMV9_POSTPROC
PUBLIC	D3D11_DECODER_PROFILE_WMV9_MOCOMP
PUBLIC	D3D11_DECODER_PROFILE_WMV9_IDCT
PUBLIC	D3D11_DECODER_PROFILE_VC1_POSTPROC
PUBLIC	D3D11_DECODER_PROFILE_VC1_MOCOMP
PUBLIC	D3D11_DECODER_PROFILE_VC1_IDCT
PUBLIC	D3D11_DECODER_PROFILE_VC1_VLD
PUBLIC	D3D11_DECODER_PROFILE_VC1_D2010
PUBLIC	D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
PUBLIC	D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
PUBLIC	D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
PUBLIC	D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
PUBLIC	D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
PUBLIC	D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0
PUBLIC	D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2
PUBLIC	D3D11_DECODER_PROFILE_VP8_VLD
PUBLIC	IID_ID3D10ShaderResourceView1
PUBLIC	IID_ID3D10Device1
PUBLIC	IID_ID3D11VideoDecoder
PUBLIC	D3D11_CRYPTO_TYPE_AES128_CTR
PUBLIC	D3D11_DECODER_ENCRYPTION_HW_CENC
PUBLIC	D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC
PUBLIC	D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS
PUBLIC	D3D11_KEY_EXCHANGE_HW_PROTECTION
PUBLIC	IID_ID3D10ShaderReflection1
PUBLIC	IID_ID3D11VideoProcessorEnumerator
PUBLIC	IID_ID3D11VideoProcessor
PUBLIC	IID_ID3D11AuthenticatedChannel
PUBLIC	D3D11_AUTHENTICATED_QUERY_PROTECTION
PUBLIC	D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
PUBLIC	D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
PUBLIC	D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
PUBLIC	D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
PUBLIC	D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
PUBLIC	D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
PUBLIC	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
PUBLIC	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
PUBLIC	D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
PUBLIC	D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
PUBLIC	D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
PUBLIC	D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
PUBLIC	D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
PUBLIC	D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
PUBLIC	D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
PUBLIC	D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	D3D11_KEY_EXCHANGE_RSAES_OAEP
PUBLIC	IID_ID3D11CryptoSession
PUBLIC	IID_ID3D11VideoDecoderOutputView
PUBLIC	IID_ID3D11VideoProcessorInputView
PUBLIC	IID_ID3D11VideoProcessorOutputView
PUBLIC	IID_ID3D11VideoContext
PUBLIC	IID_ID3D11VideoDevice
PUBLIC	IID_ID3D11Device
PUBLIC	IID_ID3D11Debug
PUBLIC	IID_ID3D11SwitchToRef
PUBLIC	IID_ID3D11TracingDevice
PUBLIC	IID_ID3D11RefTrackingOptions
PUBLIC	IID_ID3D11RefDefaultTrackingOptions
PUBLIC	DXGI_DEBUG_D3D11
PUBLIC	IID_IDispatchEx
PUBLIC	IID_IDispError
PUBLIC	IID_IVariantChangeType
PUBLIC	SID_VariantConversion
PUBLIC	SID_GetCaller
PUBLIC	SID_ProvideRuntimeContext
PUBLIC	IID_IProvideRuntimeContext
PUBLIC	IID_IObjectIdentity
PUBLIC	IID_ICanHandleException
PUBLIC	IID_IPrintDialogCallback
PUBLIC	IID_IPrintDialogServices
PUBLIC	IID_ID3D11InfoQueue
PUBLIC	IID_IDXGIObject
PUBLIC	IID_ID3D10DeviceChild
PUBLIC	IID_IDXGIDeviceSubObject
PUBLIC	IID_IDXGIResource
PUBLIC	IID_IDXGIKeyedMutex
PUBLIC	IID_IDXGISurface
PUBLIC	IID_ID3D10DepthStencilState
PUBLIC	IID_IDXGISurface1
PUBLIC	IID_IDXGIAdapter
PUBLIC	IID_IDXGIOutput
PUBLIC	IID_ID3D10BlendState
PUBLIC	IID_IDXGISwapChain
PUBLIC	IID_ID3D10RasterizerState
PUBLIC	IID_ID3D10Resource
PUBLIC	IID_IDXGIFactory
PUBLIC	NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
PUBLIC	NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
PUBLIC	DOMAIN_JOIN_GUID
PUBLIC	DOMAIN_LEAVE_GUID
PUBLIC	FIREWALL_PORT_OPEN_GUID
PUBLIC	FIREWALL_PORT_CLOSE_GUID
PUBLIC	MACHINE_POLICY_PRESENT_GUID
PUBLIC	USER_POLICY_PRESENT_GUID
PUBLIC	RPC_INTERFACE_EVENT_GUID
PUBLIC	NAMED_PIPE_EVENT_GUID
PUBLIC	CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
PUBLIC	IID_IDXGIDevice
PUBLIC	IID_ID3D10Buffer
PUBLIC	IID_IDXGIFactory1
PUBLIC	IID_IDXGIAdapter1
PUBLIC	IID_ID3D10Texture1D
PUBLIC	IID_IDXGIDevice1
PUBLIC	IID_ID3D10Texture2D
PUBLIC	IID_ID3D10Texture3D
PUBLIC	IID_ID3D10View
PUBLIC	IID_ID3D10Blob
PUBLIC	IID_ID3D10ShaderResourceView
PUBLIC	IID_ID3D10RenderTargetView
PUBLIC	WKPDID_D3DDebugObjectName
PUBLIC	WKPDID_D3DDebugObjectNameW
PUBLIC	WKPDID_CommentStringW
PUBLIC	D3D_TEXTURE_LAYOUT_ROW_MAJOR
PUBLIC	D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE
PUBLIC	IID_ID3D10DepthStencilView
PUBLIC	IID_ID3D10VertexShader
PUBLIC	IID_ID3D10GeometryShader
PUBLIC	IID_ID3D10PixelShader
PUBLIC	IID_ID3D10InputLayout
PUBLIC	IID_ID3D10SamplerState
PUBLIC	IID_ID3D10Asynchronous
PUBLIC	IID_ID3D10Query
PUBLIC	IID_ID3D10Predicate
PUBLIC	IID_ID3D11DeviceChild
PUBLIC	IID_ID3D10Counter
PUBLIC	IID_ID3D10Device
PUBLIC	IID_ID3D11DepthStencilState
PUBLIC	FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
PUBLIC	FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
PUBLIC	FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
PUBLIC	IID_ID3D11BlendState
PUBLIC	IID_ID3D11RasterizerState
PUBLIC	IID_ID3D11Resource
PUBLIC	IID_ID3D10Multithread
PUBLIC	IID_ID3D11Buffer
PUBLIC	IID_ID3D10Debug
PUBLIC	IID_ID3D10SwitchToRef
PUBLIC	IID_ID3D11Texture1D
PUBLIC	DXGI_DEBUG_D3D10
;	COMDAT DXGI_DEBUG_D3D10
CONST	SEGMENT
DXGI_DEBUG_D3D10 DD 0243b4c52H
	DW	03606H
	DW	04d3aH
	DB	099H
	DB	0d7H
	DB	0a7H
	DB	0e7H
	DB	0b3H
	DB	03eH
	DB	0d7H
	DB	06H
CONST	ENDS
;	COMDAT IID_ID3D11Texture1D
CONST	SEGMENT
IID_ID3D11Texture1D DD 0f8fb5c27H
	DW	0c6b3H
	DW	04f75H
	DB	0a4H
	DB	0c8H
	DB	043H
	DB	09aH
	DB	0f2H
	DB	0efH
	DB	056H
	DB	04cH
CONST	ENDS
;	COMDAT IID_ID3D10SwitchToRef
CONST	SEGMENT
IID_ID3D10SwitchToRef DD 09b7e4e02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Debug
CONST	SEGMENT
IID_ID3D10Debug DD 09b7e4e01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D11Buffer
CONST	SEGMENT
IID_ID3D11Buffer DD 048570b85H
	DW	0d1eeH
	DW	04fcdH
	DB	0a2H
	DB	050H
	DB	0ebH
	DB	035H
	DB	07H
	DB	022H
	DB	0b0H
	DB	037H
CONST	ENDS
;	COMDAT IID_ID3D10Multithread
CONST	SEGMENT
IID_ID3D10Multithread DD 09b7e4e00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D11Resource
CONST	SEGMENT
IID_ID3D11Resource DD 0dc8e63f3H
	DW	0d12bH
	DW	04952H
	DB	0b4H
	DB	07bH
	DB	05eH
	DB	045H
	DB	02H
	DB	06aH
	DB	086H
	DB	02dH
CONST	ENDS
;	COMDAT IID_ID3D11RasterizerState
CONST	SEGMENT
IID_ID3D11RasterizerState DD 09bb4ab81H
	DW	0ab1aH
	DW	04d8fH
	DB	0b5H
	DB	06H
	DB	0fcH
	DB	04H
	DB	020H
	DB	0bH
	DB	06eH
	DB	0e7H
CONST	ENDS
;	COMDAT IID_ID3D11BlendState
CONST	SEGMENT
IID_ID3D11BlendState DD 075b68faaH
	DW	0347dH
	DW	04159H
	DB	08fH
	DB	045H
	DB	0a0H
	DB	064H
	DB	0fH
	DB	01H
	DB	0cdH
	DB	09aH
CONST	ENDS
;	COMDAT FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE
CONST	SEGMENT
FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE DD 09d453eb7H
	DW	0d2a6H
	DW	04dbdH
	DB	0a2H
	DB	0e3H
	DB	0fbH
	DB	0d0H
	DB	0edH
	DB	091H
	DB	09H
	DB	0a9H
CONST	ENDS
;	COMDAT FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE
CONST	SEGMENT
FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE DD 0b7624d64H
	DW	0b9a3H
	DW	04cf8H
	DB	080H
	DB	011H
	DB	05bH
	DB	086H
	DB	0c9H
	DB	040H
	DB	0e7H
	DB	0b7H
CONST	ENDS
;	COMDAT FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE
CONST	SEGMENT
FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE DD 0d0a64a1H
	DW	038fcH
	DW	04db8H
	DB	09fH
	DB	0e7H
	DB	03fH
	DB	043H
	DB	052H
	DB	0cdH
	DB	07cH
	DB	05cH
CONST	ENDS
;	COMDAT IID_ID3D11DepthStencilState
CONST	SEGMENT
IID_ID3D11DepthStencilState DD 03823efbH
	DW	08d8fH
	DW	04e1cH
	DB	09aH
	DB	0a2H
	DB	0f6H
	DB	04bH
	DB	0b2H
	DB	0cbH
	DB	0fdH
	DB	0f1H
CONST	ENDS
;	COMDAT IID_ID3D10Device
CONST	SEGMENT
IID_ID3D10Device DD 09b7e4c0fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Counter
CONST	SEGMENT
IID_ID3D10Counter DD 09b7e4c11H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D11DeviceChild
CONST	SEGMENT
IID_ID3D11DeviceChild DD 01841e5c8H
	DW	016b0H
	DW	0489bH
	DB	0bcH
	DB	0c8H
	DB	044H
	DB	0cfH
	DB	0b0H
	DB	0d5H
	DB	0deH
	DB	0aeH
CONST	ENDS
;	COMDAT IID_ID3D10Predicate
CONST	SEGMENT
IID_ID3D10Predicate DD 09b7e4c10H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Query
CONST	SEGMENT
IID_ID3D10Query DD 09b7e4c0eH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Asynchronous
CONST	SEGMENT
IID_ID3D10Asynchronous DD 09b7e4c0dH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10SamplerState
CONST	SEGMENT
IID_ID3D10SamplerState DD 09b7e4c0cH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10InputLayout
CONST	SEGMENT
IID_ID3D10InputLayout DD 09b7e4c0bH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10PixelShader
CONST	SEGMENT
IID_ID3D10PixelShader DD 04968b601H
	DW	09d00H
	DW	04cdeH
	DB	083H
	DB	046H
	DB	08eH
	DB	07fH
	DB	067H
	DB	058H
	DB	019H
	DB	0b6H
CONST	ENDS
;	COMDAT IID_ID3D10GeometryShader
CONST	SEGMENT
IID_ID3D10GeometryShader DD 06316be88H
	DW	054cdH
	DW	04040H
	DB	0abH
	DB	044H
	DB	020H
	DB	046H
	DB	01bH
	DB	0c8H
	DB	01fH
	DB	068H
CONST	ENDS
;	COMDAT IID_ID3D10VertexShader
CONST	SEGMENT
IID_ID3D10VertexShader DD 09b7e4c0aH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10DepthStencilView
CONST	SEGMENT
IID_ID3D10DepthStencilView DD 09b7e4c09H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE
CONST	SEGMENT
D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE DD 04c0f29e3H
	DW	03f5fH
	DW	04d35H
	DB	084H
	DB	0c9H
	DB	0bcH
	DB	09H
	DB	083H
	DB	0b6H
	DB	02cH
	DB	028H
CONST	ENDS
;	COMDAT D3D_TEXTURE_LAYOUT_ROW_MAJOR
CONST	SEGMENT
D3D_TEXTURE_LAYOUT_ROW_MAJOR DD 0b5dc234fH
	DW	072bbH
	DW	04becH
	DB	097H
	DB	05H
	DB	08cH
	DB	0f2H
	DB	058H
	DB	0dfH
	DB	06bH
	DB	06cH
CONST	ENDS
;	COMDAT WKPDID_CommentStringW
CONST	SEGMENT
WKPDID_CommentStringW DD 0d0149dc0H
	DW	090e8H
	DW	04ec8H
	DB	081H
	DB	044H
	DB	0e9H
	DB	00H
	DB	0adH
	DB	026H
	DB	06bH
	DB	0b2H
CONST	ENDS
;	COMDAT WKPDID_D3DDebugObjectNameW
CONST	SEGMENT
WKPDID_D3DDebugObjectNameW DD 04cca5fd8H
	DW	0921fH
	DW	042c8H
	DB	085H
	DB	066H
	DB	070H
	DB	0caH
	DB	0f2H
	DB	0a9H
	DB	0b7H
	DB	041H
CONST	ENDS
;	COMDAT WKPDID_D3DDebugObjectName
CONST	SEGMENT
WKPDID_D3DDebugObjectName DD 0429b8c22H
	DW	09188H
	DW	04b0cH
	DB	087H
	DB	042H
	DB	0acH
	DB	0b0H
	DB	0bfH
	DB	085H
	DB	0c2H
	DB	00H
CONST	ENDS
;	COMDAT IID_ID3D10RenderTargetView
CONST	SEGMENT
IID_ID3D10RenderTargetView DD 09b7e4c08H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderResourceView
CONST	SEGMENT
IID_ID3D10ShaderResourceView DD 09b7e4c07H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Blob
CONST	SEGMENT
IID_ID3D10Blob DD 08ba5fb08H
	DW	05195H
	DW	040e2H
	DB	0acH
	DB	058H
	DB	0dH
	DB	098H
	DB	09cH
	DB	03aH
	DB	01H
	DB	02H
CONST	ENDS
;	COMDAT IID_ID3D10View
CONST	SEGMENT
IID_ID3D10View DD 0c902b03fH
	DW	060a7H
	DW	049baH
	DB	099H
	DB	036H
	DB	02aH
	DB	03aH
	DB	0b3H
	DB	07aH
	DB	07eH
	DB	033H
CONST	ENDS
;	COMDAT IID_ID3D10Texture3D
CONST	SEGMENT
IID_ID3D10Texture3D DD 09b7e4c05H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10Texture2D
CONST	SEGMENT
IID_ID3D10Texture2D DD 09b7e4c04H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_IDXGIDevice1
CONST	SEGMENT
IID_IDXGIDevice1 DD 077db970fH
	DW	06276H
	DW	048baH
	DB	0baH
	DB	028H
	DB	07H
	DB	01H
	DB	043H
	DB	0b4H
	DB	039H
	DB	02cH
CONST	ENDS
;	COMDAT IID_ID3D10Texture1D
CONST	SEGMENT
IID_ID3D10Texture1D DD 09b7e4c03H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_IDXGIAdapter1
CONST	SEGMENT
IID_IDXGIAdapter1 DD 029038f61H
	DW	03839H
	DW	04626H
	DB	091H
	DB	0fdH
	DB	08H
	DB	068H
	DB	079H
	DB	01H
	DB	01aH
	DB	05H
CONST	ENDS
;	COMDAT IID_IDXGIFactory1
CONST	SEGMENT
IID_IDXGIFactory1 DD 0770aae78H
	DW	0f26fH
	DW	04dbaH
	DB	0a8H
	DB	029H
	DB	025H
	DB	03cH
	DB	083H
	DB	0d1H
	DB	0b3H
	DB	087H
CONST	ENDS
;	COMDAT IID_ID3D10Buffer
CONST	SEGMENT
IID_ID3D10Buffer DD 09b7e4c02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_IDXGIDevice
CONST	SEGMENT
IID_IDXGIDevice DD 054ec77faH
	DW	01377H
	DW	044e6H
	DB	08cH
	DB	032H
	DB	088H
	DB	0fdH
	DB	05fH
	DB	044H
	DB	0c8H
	DB	04cH
CONST	ENDS
CONST	SEGMENT
$SG113068 DB	'd3d9.dll', 00H
	ORG $+7
$SG113070 DB	'Direct3DCreate9Ex', 00H
	ORG $+2
$SG113122 DB	'r', 00H
	ORG $+2
$SG113072 DB	'dxgi.dll', 00H
	ORG $+3
$SG113126 DB	',', 0aH, 00H
	ORG $+1
$SG113074 DB	'CreateDXGIFactory', 00H
	ORG $+2
$SG113127 DB	',', 0aH, 00H
	ORG $+1
$SG113120 DB	'IntelGfx.cfg', 00H
	ORG $+3
$SG113128 DB	',', 0aH, 00H
	ORG $+1
$SG113131 DB	'%x', 00H
	ORG $+1
$SG113132 DB	'%x', 00H
	ORG $+1
$SG113134 DB	'%s', 00H
	ORG $+1
$SG113137 DB	'Low', 00H
$SG113140 DB	'Medium', 00H
	ORG $+5
$SG113143 DB	'Medium+', 00H
$SG113146 DB	'High', 00H
	ORG $+3
$SG113147 DB	'%s not found! Presets undefined.', 0aH, 00H
	ORG $+6
$SG113171 DB	'\', 00H, '\', 00H, '.', 00H, '\', 00H, 'r', 00H, 'o', 00H
	DB	'o', 00H, 't', 00H, '\', 00H, 'c', 00H, 'i', 00H, 'm', 00H, 'v'
	DB	00H, '2', 00H, 00H, 00H
	ORG $+2
$SG113174 DB	'W', 00H, 'i', 00H, 'n', 00H, '3', 00H, '2', 00H, '_', 00H
	DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 'C', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, 00H, 00H
	ORG $+4
$SG113177 DB	'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'R', 00H, 'A', 00H, 'M', 00H, 00H, 00H
	ORG $+2
$SG113242 DB	'D3D11CreateDevice failed', 0aH, 00H
	ORG $+6
$SG113246 DB	'No device dependent counters', 0aH, 00H
	ORG $+2
$SG113250 DB	'Intel Device Information', 00H
	ORG $+7
$SG113251 DB	'Version %d', 00H
	ORG $+5
$SG113254 DB	'Size %d', 00H
$SG113261 DB	'Could not find counter', 0aH, 00H
$SG113266 DB	'CreateCounter failed', 0aH, 00H
	ORG $+2
$SG113272 DB	'Getdata failed ', 0aH, 00H
	ORG $+7
$SG113278 DB	'Getdata failed ', 0aH, 00H
	ORG $+7
?CAPS_EXTENSION_KEY@ID3D10@@3QBDB DB 049H		; ID3D10::CAPS_EXTENSION_KEY
	DB	04eH
	DB	054H
	DB	043H
	DB	045H
	DB	058H
	DB	054H
	DB	04eH
	DB	043H
	DB	041H
	DB	050H
	DB	053H
	DB	046H
	DB	055H
	DB	04eH
	DB	043H
?RESOURCE_EXTENSION_KEY@ID3D10@@3QBDB DB 049H		; ID3D10::RESOURCE_EXTENSION_KEY
	DB	04eH
	DB	054H
	DB	043H
	DB	045H
	DB	058H
	DB	054H
	DB	04eH
	DB	052H
	DB	045H
	DB	053H
	DB	04fH
	DB	055H
	DB	052H
	DB	043H
	DB	045H
$SG113431 DB	'D3D11CreateDevice failed', 0aH, 00H
CONST	ENDS
;	COMDAT CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
CONST	SEGMENT
CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID DD 02d7a2816H
	DW	0c5eH
	DW	045fcH
	DB	09cH
	DB	0e7H
	DB	057H
	DB	0eH
	DB	05eH
	DB	0cdH
	DB	0e9H
	DB	0c9H
CONST	ENDS
;	COMDAT NAMED_PIPE_EVENT_GUID
CONST	SEGMENT
NAMED_PIPE_EVENT_GUID DD 01f81d131H
	DW	03facH
	DW	04537H
	DB	09eH
	DB	0cH
	DB	07eH
	DB	07bH
	DB	0cH
	DB	02fH
	DB	04bH
	DB	055H
CONST	ENDS
;	COMDAT RPC_INTERFACE_EVENT_GUID
CONST	SEGMENT
RPC_INTERFACE_EVENT_GUID DD 0bc90d167H
	DW	09470H
	DW	04139H
	DB	0a9H
	DB	0baH
	DB	0beH
	DB	0bH
	DB	0bbH
	DB	0f5H
	DB	0b7H
	DB	04dH
CONST	ENDS
;	COMDAT USER_POLICY_PRESENT_GUID
CONST	SEGMENT
USER_POLICY_PRESENT_GUID DD 054fb46c8H
	DW	0f089H
	DW	0464cH
	DB	0b1H
	DB	0fdH
	DB	059H
	DB	0d1H
	DB	0b6H
	DB	02cH
	DB	03bH
	DB	050H
CONST	ENDS
;	COMDAT MACHINE_POLICY_PRESENT_GUID
CONST	SEGMENT
MACHINE_POLICY_PRESENT_GUID DD 0659fcae6H
	DW	05bdbH
	DW	04da9H
	DB	0b1H
	DB	0ffH
	DB	0caH
	DB	02aH
	DB	017H
	DB	08dH
	DB	046H
	DB	0e0H
CONST	ENDS
;	COMDAT FIREWALL_PORT_CLOSE_GUID
CONST	SEGMENT
FIREWALL_PORT_CLOSE_GUID DD 0a144ed38H
	DW	08e12H
	DW	04de4H
	DB	09dH
	DB	096H
	DB	0e6H
	DB	047H
	DB	040H
	DB	0b1H
	DB	0a5H
	DB	024H
CONST	ENDS
;	COMDAT FIREWALL_PORT_OPEN_GUID
CONST	SEGMENT
FIREWALL_PORT_OPEN_GUID DD 0b7569e07H
	DW	08421H
	DW	04ee0H
	DB	0adH
	DB	010H
	DB	086H
	DB	091H
	DB	05aH
	DB	0fdH
	DB	0adH
	DB	09H
CONST	ENDS
;	COMDAT DOMAIN_LEAVE_GUID
CONST	SEGMENT
DOMAIN_LEAVE_GUID DD 0ddaf516eH
	DW	058c2H
	DW	04866H
	DB	095H
	DB	074H
	DB	0c3H
	DB	0b6H
	DB	015H
	DB	0d4H
	DB	02eH
	DB	0a1H
CONST	ENDS
;	COMDAT DOMAIN_JOIN_GUID
CONST	SEGMENT
DOMAIN_JOIN_GUID DD 01ce20abaH
	DW	09851H
	DW	04421H
	DB	094H
	DB	030H
	DB	01dH
	DB	0deH
	DB	0b7H
	DB	066H
	DB	0e8H
	DB	09H
CONST	ENDS
;	COMDAT NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
CONST	SEGMENT
NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID DD 0cc4ba62aH
	DW	0162eH
	DW	04648H
	DB	084H
	DB	07aH
	DB	0b6H
	DB	0bdH
	DB	0f9H
	DB	093H
	DB	0e3H
	DB	035H
CONST	ENDS
;	COMDAT NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
CONST	SEGMENT
NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID DD 04f27f2deH
	DW	014e2H
	DW	0430bH
	DB	0a5H
	DB	049H
	DB	07cH
	DB	0d4H
	DB	08cH
	DB	0bcH
	DB	082H
	DB	045H
CONST	ENDS
;	COMDAT IID_IDXGIFactory
CONST	SEGMENT
IID_IDXGIFactory DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT IID_ID3D10Resource
CONST	SEGMENT
IID_ID3D10Resource DD 09b7e4c01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10RasterizerState
CONST	SEGMENT
IID_ID3D10RasterizerState DD 0a2a07292H
	DW	089afH
	DW	04345H
	DB	0beH
	DB	02eH
	DB	0c5H
	DB	03dH
	DB	09fH
	DB	0bbH
	DB	06eH
	DB	09fH
CONST	ENDS
;	COMDAT IID_IDXGISwapChain
CONST	SEGMENT
IID_IDXGISwapChain DD 0310d36a0H
	DW	0d2e7H
	DW	04c0aH
	DB	0aaH
	DB	04H
	DB	06aH
	DB	09dH
	DB	023H
	DB	0b8H
	DB	088H
	DB	06aH
CONST	ENDS
;	COMDAT IID_ID3D10BlendState
CONST	SEGMENT
IID_ID3D10BlendState DD 0edad8d19H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT IID_IDXGIOutput
CONST	SEGMENT
IID_IDXGIOutput DD 0ae02eedbH
	DW	0c735H
	DW	04690H
	DB	08dH
	DB	052H
	DB	05aH
	DB	08dH
	DB	0c2H
	DB	02H
	DB	013H
	DB	0aaH
CONST	ENDS
;	COMDAT IID_IDXGIAdapter
CONST	SEGMENT
IID_IDXGIAdapter DD 02411e7e1H
	DW	012acH
	DW	04ccfH
	DB	0bdH
	DB	014H
	DB	097H
	DB	098H
	DB	0e8H
	DB	053H
	DB	04dH
	DB	0c0H
CONST	ENDS
;	COMDAT IID_IDXGISurface1
CONST	SEGMENT
IID_IDXGISurface1 DD 04ae63092H
	DW	06327H
	DW	04c1bH
	DB	080H
	DB	0aeH
	DB	0bfH
	DB	0e1H
	DB	02eH
	DB	0a3H
	DB	02bH
	DB	086H
CONST	ENDS
;	COMDAT IID_ID3D10DepthStencilState
CONST	SEGMENT
IID_ID3D10DepthStencilState DD 02b4b1cc8H
	DW	0a4adH
	DW	041f8H
	DB	083H
	DB	022H
	DB	0caH
	DB	086H
	DB	0fcH
	DB	03eH
	DB	0c6H
	DB	075H
CONST	ENDS
;	COMDAT IID_IDXGISurface
CONST	SEGMENT
IID_IDXGISurface DD 0cafcb56cH
	DW	06ac3H
	DW	04889H
	DB	0bfH
	DB	047H
	DB	09eH
	DB	023H
	DB	0bbH
	DB	0d2H
	DB	060H
	DB	0ecH
CONST	ENDS
;	COMDAT IID_IDXGIKeyedMutex
CONST	SEGMENT
IID_IDXGIKeyedMutex DD 09d8e1289H
	DW	0d7b3H
	DW	0465fH
	DB	081H
	DB	026H
	DB	025H
	DB	0eH
	DB	034H
	DB	09aH
	DB	0f8H
	DB	05dH
CONST	ENDS
;	COMDAT IID_IDXGIResource
CONST	SEGMENT
IID_IDXGIResource DD 035f3ab4H
	DW	0482eH
	DW	04e50H
	DB	0b4H
	DB	01fH
	DB	08aH
	DB	07fH
	DB	08bH
	DB	0d8H
	DB	096H
	DB	0bH
CONST	ENDS
;	COMDAT IID_IDXGIDeviceSubObject
CONST	SEGMENT
IID_IDXGIDeviceSubObject DD 03d3e0379H
	DW	0f9deH
	DW	04d58H
	DB	0bbH
	DB	06cH
	DB	018H
	DB	0d6H
	DB	029H
	DB	092H
	DB	0f1H
	DB	0a6H
CONST	ENDS
;	COMDAT IID_ID3D10DeviceChild
CONST	SEGMENT
IID_ID3D10DeviceChild DD 09b7e4c00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_IDXGIObject
CONST	SEGMENT
IID_IDXGIObject DD 0aec22fb8H
	DW	076f3H
	DW	04639H
	DB	09bH
	DB	0e0H
	DB	028H
	DB	0ebH
	DB	043H
	DB	0a6H
	DB	07aH
	DB	02eH
CONST	ENDS
;	COMDAT IID_ID3D11InfoQueue
CONST	SEGMENT
IID_ID3D11InfoQueue DD 06543dbb6H
	DW	01b48H
	DW	042f5H
	DB	0abH
	DB	082H
	DB	0e9H
	DB	07eH
	DB	0c7H
	DB	043H
	DB	026H
	DB	0f6H
CONST	ENDS
;	COMDAT IID_IPrintDialogServices
CONST	SEGMENT
IID_IPrintDialogServices DD 0509aaedaH
	DW	05639H
	DW	011d1H
	DB	0b6H
	DB	0a1H
	DB	00H
	DB	00H
	DB	0f8H
	DB	075H
	DB	07bH
	DB	0f9H
CONST	ENDS
;	COMDAT IID_IPrintDialogCallback
CONST	SEGMENT
IID_IPrintDialogCallback DD 05852a2c3H
	DW	06530H
	DW	011d1H
	DB	0b6H
	DB	0a3H
	DB	00H
	DB	00H
	DB	0f8H
	DB	075H
	DB	07bH
	DB	0f9H
CONST	ENDS
;	COMDAT IID_ICanHandleException
CONST	SEGMENT
IID_ICanHandleException DD 0c5598e60H
	DW	0b307H
	DW	011d1H
	DB	0b2H
	DB	07dH
	DB	00H
	DB	060H
	DB	08H
	DB	0c3H
	DB	0fbH
	DB	0fbH
CONST	ENDS
;	COMDAT IID_IObjectIdentity
CONST	SEGMENT
IID_IObjectIdentity DD 0ca04b7e6H
	DW	0d21H
	DW	011d1H
	DB	08cH
	DB	0c5H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0c2H
	DB	0b0H
	DB	085H
CONST	ENDS
;	COMDAT IID_IProvideRuntimeContext
CONST	SEGMENT
IID_IProvideRuntimeContext DD 010e2414aH
	DW	0ec59H
	DW	049d2H
	DB	0bcH
	DB	051H
	DB	05aH
	DB	0ddH
	DB	02cH
	DB	036H
	DB	0feH
	DB	0bcH
CONST	ENDS
;	COMDAT SID_ProvideRuntimeContext
CONST	SEGMENT
SID_ProvideRuntimeContext DD 074a5040cH
	DW	0dd0cH
	DW	048f0H
	DB	0acH
	DB	085H
	DB	019H
	DB	04cH
	DB	032H
	DB	059H
	DB	018H
	DB	0aH
CONST	ENDS
;	COMDAT SID_GetCaller
CONST	SEGMENT
SID_GetCaller DD 04717cc40H
	DW	0bcb9H
	DW	011d0H
	DB	093H
	DB	036H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT SID_VariantConversion
CONST	SEGMENT
SID_VariantConversion DD 01f101481H
	DW	0bccdH
	DW	011d0H
	DB	093H
	DB	036H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT IID_IVariantChangeType
CONST	SEGMENT
IID_IVariantChangeType DD 0a6ef9862H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT IID_IDispError
CONST	SEGMENT
IID_IDispError DD 0a6ef9861H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT IID_IDispatchEx
CONST	SEGMENT
IID_IDispatchEx DD 0a6ef9860H
	DW	0c720H
	DW	011d0H
	DB	093H
	DB	037H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	0dH
	DB	0caH
	DB	0a9H
CONST	ENDS
;	COMDAT DXGI_DEBUG_D3D11
CONST	SEGMENT
DXGI_DEBUG_D3D11 DD 04b99317bH
	DW	0ac39H
	DW	04aa6H
	DB	0bbH
	DB	0bH
	DB	0baH
	DB	0a0H
	DB	047H
	DB	084H
	DB	079H
	DB	08fH
CONST	ENDS
;	COMDAT IID_ID3D11RefDefaultTrackingOptions
CONST	SEGMENT
IID_ID3D11RefDefaultTrackingOptions DD 03916615H
	DW	0c644H
	DW	0418cH
	DB	09bH
	DB	0f4H
	DB	075H
	DB	0dbH
	DB	05bH
	DB	0e6H
	DB	03cH
	DB	0a0H
CONST	ENDS
;	COMDAT IID_ID3D11RefTrackingOptions
CONST	SEGMENT
IID_ID3D11RefTrackingOptions DD 0193dacdfH
	DW	0db2H
	DW	04c05H
	DB	0a5H
	DB	05cH
	DB	0efH
	DB	06H
	DB	0caH
	DB	0c5H
	DB	06fH
	DB	0d9H
CONST	ENDS
;	COMDAT IID_ID3D11TracingDevice
CONST	SEGMENT
IID_ID3D11TracingDevice DD 01911c771H
	DW	01587H
	DW	0413eH
	DB	0a7H
	DB	0e0H
	DB	0fbH
	DB	026H
	DB	0c3H
	DB	0deH
	DB	02H
	DB	068H
CONST	ENDS
;	COMDAT IID_ID3D11SwitchToRef
CONST	SEGMENT
IID_ID3D11SwitchToRef DD 01ef337e3H
	DW	058e7H
	DW	04f83H
	DB	0a6H
	DB	092H
	DB	0dbH
	DB	022H
	DB	01fH
	DB	05eH
	DB	0d4H
	DB	07eH
CONST	ENDS
;	COMDAT IID_ID3D11Debug
CONST	SEGMENT
IID_ID3D11Debug DD 079cf2233H
	DW	07536H
	DW	04948H
	DB	09dH
	DB	036H
	DB	01eH
	DB	046H
	DB	092H
	DB	0dcH
	DB	057H
	DB	060H
CONST	ENDS
;	COMDAT IID_ID3D11Device
CONST	SEGMENT
IID_ID3D11Device DD 0db6f6ddbH
	DW	0ac77H
	DW	04e88H
	DB	082H
	DB	053H
	DB	081H
	DB	09dH
	DB	0f9H
	DB	0bbH
	DB	0f1H
	DB	040H
CONST	ENDS
;	COMDAT IID_ID3D11VideoDevice
CONST	SEGMENT
IID_ID3D11VideoDevice DD 010ec4d5bH
	DW	0975aH
	DW	04689H
	DB	0b9H
	DB	0e4H
	DB	0d0H
	DB	0aaH
	DB	0c3H
	DB	0fH
	DB	0e3H
	DB	033H
CONST	ENDS
;	COMDAT IID_ID3D11VideoContext
CONST	SEGMENT
IID_ID3D11VideoContext DD 061f21c45H
	DW	03c0eH
	DW	04a74H
	DB	09cH
	DB	0eaH
	DB	067H
	DB	010H
	DB	0dH
	DB	09aH
	DB	0d5H
	DB	0e4H
CONST	ENDS
;	COMDAT IID_ID3D11VideoProcessorOutputView
CONST	SEGMENT
IID_ID3D11VideoProcessorOutputView DD 0a048285eH
	DW	025a9H
	DW	04527H
	DB	0bdH
	DB	093H
	DB	0d6H
	DB	08bH
	DB	068H
	DB	0c4H
	DB	042H
	DB	054H
CONST	ENDS
;	COMDAT IID_ID3D11VideoProcessorInputView
CONST	SEGMENT
IID_ID3D11VideoProcessorInputView DD 011ec5a5fH
	DW	051dcH
	DW	04945H
	DB	0abH
	DB	034H
	DB	06eH
	DB	08cH
	DB	021H
	DB	030H
	DB	0eH
	DB	0a5H
CONST	ENDS
;	COMDAT IID_ID3D11VideoDecoderOutputView
CONST	SEGMENT
IID_ID3D11VideoDecoderOutputView DD 0c2931aeaH
	DW	02a85H
	DW	04f20H
	DB	086H
	DB	0fH
	DB	0fbH
	DB	0a1H
	DB	0fdH
	DB	025H
	DB	06eH
	DB	018H
CONST	ENDS
;	COMDAT IID_ID3D11CryptoSession
CONST	SEGMENT
IID_ID3D11CryptoSession DD 09b32f9adH
	DW	0bdccH
	DW	040a6H
	DB	0a3H
	DB	09dH
	DB	0d5H
	DB	0c8H
	DB	065H
	DB	084H
	DB	057H
	DB	020H
CONST	ENDS
;	COMDAT D3D11_KEY_EXCHANGE_RSAES_OAEP
CONST	SEGMENT
D3D11_KEY_EXCHANGE_RSAES_OAEP DD 0c1949895H
	DW	0d72aH
	DW	04a1dH
	DB	08eH
	DB	05dH
	DB	0edH
	DB	085H
	DB	07dH
	DB	017H
	DB	015H
	DB	020H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE DD 041fff286H
	DW	06ae0H
	DW	04d43H
	DB	09dH
	DB	055H
	DB	0a4H
	DB	06eH
	DB	09eH
	DB	0fdH
	DB	015H
	DB	08aH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
CONST	SEGMENT
D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE DD 0772d047H
	DW	01b40H
	DW	048e8H
	DB	09cH
	DB	0a6H
	DB	0b5H
	DB	0f5H
	DB	010H
	DB	0deH
	DB	09fH
	DB	01H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
CONST	SEGMENT
D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION DD 06346cc54H
	DW	02cfcH
	DW	04ad4H
	DB	082H
	DB	024H
	DB	0d1H
	DB	058H
	DB	037H
	DB	0deH
	DB	077H
	DB	00H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
CONST	SEGMENT
D3D11_AUTHENTICATED_CONFIGURE_PROTECTION DD 050455658H
	DW	03f47H
	DW	04362H
	DB	0bfH
	DB	099H
	DB	0bfH
	DB	0dfH
	DB	0cdH
	DB	0e9H
	DB	0edH
	DB	029H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
CONST	SEGMENT
D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE DD 06114bdbH
	DW	03523H
	DW	0470aH
	DB	08dH
	DB	0caH
	DB	0fbH
	DB	0c2H
	DB	084H
	DB	051H
	DB	054H
	DB	0f0H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE DD 0ec1791c7H
	DW	0dad3H
	DW	04f15H
	DB	09eH
	DB	0c3H
	DB	0faH
	DB	0a9H
	DB	03dH
	DB	060H
	DB	0d4H
	DB	0f0H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID DD 0f83a5958H
	DW	0e986H
	DW	04bdaH
	DB	0beH
	DB	0b0H
	DB	041H
	DB	01fH
	DB	06aH
	DB	07aH
	DB	01H
	DB	0b7H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT DD 0b30f7066H
	DW	0203cH
	DW	04b07H
	DB	093H
	DB	0fcH
	DB	0ceH
	DB	0aaH
	DB	0fdH
	DB	061H
	DB	024H
	DB	01eH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES DD 06214d9d2H
	DW	0432cH
	DW	04abbH
	DB	09fH
	DB	0ceH
	DB	021H
	DB	06eH
	DB	0eaH
	DB	026H
	DB	09eH
	DB	03bH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID DD 0839ddca3H
	DW	09b4eH
	DW	041e4H
	DB	0b0H
	DB	053H
	DB	089H
	DB	02bH
	DB	0d2H
	DB	0a1H
	DB	01eH
	DB	0e7H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT DD 02c042b5eH
	DW	08c07H
	DW	046d5H
	DB	0aaH
	DB	0beH
	DB	08fH
	DB	075H
	DB	0cbH
	DB	0adH
	DB	04cH
	DB	031H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT DD 012f0bd6H
	DW	0e662H
	DW	04474H
	DB	0beH
	DB	0fdH
	DB	0aaH
	DB	053H
	DB	0e5H
	DB	014H
	DB	03cH
	DB	06dH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS DD 0649bbadbH
	DW	0f0f4H
	DW	04639H
	DB	0a1H
	DB	05bH
	DB	024H
	DB	039H
	DB	03fH
	DB	0c3H
	DB	0abH
	DB	0acH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT DD 0db207b3H
	DW	09450H
	DW	046a6H
	DB	082H
	DB	0deH
	DB	01bH
	DB	096H
	DB	0d4H
	DB	04fH
	DB	09cH
	DB	0f2H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION DD 02634499eH
	DW	0d018H
	DW	04d74H
	DB	0acH
	DB	017H
	DB	07fH
	DB	072H
	DB	040H
	DB	059H
	DB	052H
	DB	08dH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE DD 0ec1c539dH
	DW	08cffH
	DW	04e2aH
	DB	0bcH
	DB	0c4H
	DB	0f5H
	DB	069H
	DB	02fH
	DB	099H
	DB	0f4H
	DB	080H
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE DD 0bc1b18a5H
	DW	0b1fbH
	DW	042abH
	DB	0bdH
	DB	094H
	DB	0b5H
	DB	082H
	DB	08bH
	DB	04bH
	DB	0f7H
	DB	0beH
CONST	ENDS
;	COMDAT D3D11_AUTHENTICATED_QUERY_PROTECTION
CONST	SEGMENT
D3D11_AUTHENTICATED_QUERY_PROTECTION DD 0a84eb584H
	DW	0c495H
	DW	048aaH
	DB	0b9H
	DB	04dH
	DB	08bH
	DB	0d2H
	DB	0d6H
	DB	0fbH
	DB	0ceH
	DB	05H
CONST	ENDS
;	COMDAT IID_ID3D11AuthenticatedChannel
CONST	SEGMENT
IID_ID3D11AuthenticatedChannel DD 03015a308H
	DW	0dcbdH
	DW	047aaH
	DB	0a7H
	DB	047H
	DB	019H
	DB	024H
	DB	086H
	DB	0d1H
	DB	04dH
	DB	04aH
CONST	ENDS
;	COMDAT IID_ID3D11VideoProcessor
CONST	SEGMENT
IID_ID3D11VideoProcessor DD 01d7b0652H
	DW	0185fH
	DW	041c6H
	DB	085H
	DB	0ceH
	DB	0cH
	DB	05bH
	DB	0e3H
	DB	0d4H
	DB	0aeH
	DB	06cH
CONST	ENDS
;	COMDAT IID_ID3D11VideoProcessorEnumerator
CONST	SEGMENT
IID_ID3D11VideoProcessorEnumerator DD 031627037H
	DW	053abH
	DW	04200H
	DB	090H
	DB	061H
	DB	05H
	DB	0faH
	DB	0a9H
	DB	0abH
	DB	045H
	DB	0f9H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderReflection1
CONST	SEGMENT
IID_ID3D10ShaderReflection1 DD 0c3457783H
	DW	0a846H
	DW	047ceH
	DB	095H
	DB	020H
	DB	0ceH
	DB	0a6H
	DB	0f6H
	DB	06eH
	DB	074H
	DB	047H
CONST	ENDS
;	COMDAT D3D11_KEY_EXCHANGE_HW_PROTECTION
CONST	SEGMENT
D3D11_KEY_EXCHANGE_HW_PROTECTION DD 0b1170d8aH
	DW	0628dH
	DW	04da3H
	DB	0adH
	DB	03bH
	DB	082H
	DB	0ddH
	DB	0b0H
	DB	08bH
	DB	049H
	DB	070H
CONST	ENDS
;	COMDAT D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS
CONST	SEGMENT
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS DD 0422d9319H
	DW	09d21H
	DW	04bb7H
	DB	093H
	DB	071H
	DB	0faH
	DB	0f5H
	DB	0a8H
	DB	02cH
	DB	03eH
	DB	04H
CONST	ENDS
;	COMDAT D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC
CONST	SEGMENT
D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC DD 0b0405235H
	DW	0c13dH
	DW	044f2H
	DB	09aH
	DB	0e5H
	DB	0ddH
	DB	048H
	DB	0e0H
	DB	08eH
	DB	05bH
	DB	067H
CONST	ENDS
;	COMDAT D3D11_DECODER_ENCRYPTION_HW_CENC
CONST	SEGMENT
D3D11_DECODER_ENCRYPTION_HW_CENC DD 089d6ac4fH
	DW	09f2H
	DW	04229H
	DB	0b2H
	DB	0cdH
	DB	037H
	DB	074H
	DB	0aH
	DB	06dH
	DB	0fdH
	DB	081H
CONST	ENDS
;	COMDAT D3D11_CRYPTO_TYPE_AES128_CTR
CONST	SEGMENT
D3D11_CRYPTO_TYPE_AES128_CTR DD 09b6bd711H
	DW	04f74H
	DW	041c9H
	DB	09eH
	DB	07bH
	DB	0bH
	DB	0e2H
	DB	0d7H
	DB	0d9H
	DB	03bH
	DB	04fH
CONST	ENDS
;	COMDAT IID_ID3D11VideoDecoder
CONST	SEGMENT
IID_ID3D11VideoDecoder DD 03c9c5b51H
	DW	0995dH
	DW	048d1H
	DB	09bH
	DB	08dH
	DB	0faH
	DB	05cH
	DB	0aeH
	DB	0deH
	DB	0d6H
	DB	05cH
CONST	ENDS
;	COMDAT IID_ID3D10Device1
CONST	SEGMENT
IID_ID3D10Device1 DD 09b7e4c8fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderResourceView1
CONST	SEGMENT
IID_ID3D10ShaderResourceView1 DD 09b7e4c87H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VP8_VLD
CONST	SEGMENT
D3D11_DECODER_PROFILE_VP8_VLD DD 090b899eaH
	DW	03a62H
	DW	04705H
	DB	088H
	DB	0b3H
	DB	08dH
	DB	0f0H
	DB	04bH
	DB	027H
	DB	044H
	DB	0e7H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2
CONST	SEGMENT
D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 DD 0a4c749efH
	DW	06ecfH
	DW	048aaH
	DB	084H
	DB	048H
	DB	050H
	DB	0a7H
	DB	0a1H
	DB	016H
	DB	05fH
	DB	0f7H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0
CONST	SEGMENT
D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 DD 0463707f8H
	DW	0a1d0H
	DW	04585H
	DB	087H
	DB	06dH
	DB	083H
	DB	0aaH
	DB	06dH
	DB	060H
	DB	0b8H
	DB	09eH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
CONST	SEGMENT
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 DD 0107af0e0H
	DW	0ef1aH
	DW	04d19H
	DB	0abH
	DB	0a8H
	DB	067H
	DB	0a1H
	DB	063H
	DB	07H
	DB	03dH
	DB	013H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
CONST	SEGMENT
D3D11_DECODER_PROFILE_HEVC_VLD_MAIN DD 05b11d51bH
	DW	02f4cH
	DW	04452H
	DB	0bcH
	DB	0c3H
	DB	09H
	DB	0f2H
	DB	0a1H
	DB	016H
	DB	0cH
	DB	0c0H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC DD 0ab998b5bH
	DW	04258H
	DW	044a9H
	DB	09fH
	DB	0ebH
	DB	094H
	DB	0e5H
	DB	097H
	DB	0a6H
	DB	0baH
	DB	0aeH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC DD 0ed418a9fH
	DW	010dH
	DW	04edaH
	DB	09aH
	DB	0e3H
	DB	09aH
	DB	065H
	DB	035H
	DB	08dH
	DB	08dH
	DB	02eH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE DD 0efd64d74H
	DW	0c9e8H
	DW	041d7H
	DB	0a5H
	DB	0e9H
	DB	0e9H
	DB	0b0H
	DB	0e3H
	DB	09fH
	DB	0a3H
	DB	019H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VC1_D2010
CONST	SEGMENT
D3D11_DECODER_PROFILE_VC1_D2010 DD 01b81bea4H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VC1_VLD
CONST	SEGMENT
D3D11_DECODER_PROFILE_VC1_VLD DD 01b81bea3H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VC1_IDCT
CONST	SEGMENT
D3D11_DECODER_PROFILE_VC1_IDCT DD 01b81bea2H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VC1_MOCOMP
CONST	SEGMENT
D3D11_DECODER_PROFILE_VC1_MOCOMP DD 01b81bea1H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_VC1_POSTPROC
CONST	SEGMENT
D3D11_DECODER_PROFILE_VC1_POSTPROC DD 01b81bea0H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_WMV9_IDCT
CONST	SEGMENT
D3D11_DECODER_PROFILE_WMV9_IDCT DD 01b81be94H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_WMV9_MOCOMP
CONST	SEGMENT
D3D11_DECODER_PROFILE_WMV9_MOCOMP DD 01b81be91H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_WMV9_POSTPROC
CONST	SEGMENT
D3D11_DECODER_PROFILE_WMV9_POSTPROC DD 01b81be90H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_WMV8_MOCOMP
CONST	SEGMENT
D3D11_DECODER_PROFILE_WMV8_MOCOMP DD 01b81be81H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_WMV8_POSTPROC
CONST	SEGMENT
D3D11_DECODER_PROFILE_WMV8_POSTPROC DD 01b81be80H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT DD 0705b9d82H
	DW	076cfH
	DW	049d6H
	DB	0b7H
	DB	0e6H
	DB	0acH
	DB	088H
	DB	072H
	DB	0dbH
	DB	01H
	DB	03cH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT DD 0f9aaccbbH
	DW	0c2b6H
	DW	04cfcH
	DB	087H
	DB	079H
	DB	057H
	DB	07H
	DB	0b1H
	DB	076H
	DB	05H
	DB	052H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT DD 0d79be8daH
	DW	0cf1H
	DW	04c81H
	DB	0b8H
	DB	02aH
	DB	069H
	DB	0a4H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	03dH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT DD 0d5f04ff9H
	DW	03418H
	DW	045d8H
	DB	095H
	DB	061H
	DB	032H
	DB	0a7H
	DB	06aH
	DB	0aeH
	DB	02dH
	DB	0ddH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_FGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_FGT DD 01b81be69H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_VLD_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_VLD_NOFGT DD 01b81be68H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_IDCT_FGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_IDCT_FGT DD 01b81be67H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_IDCT_NOFGT DD 01b81be66H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_MOCOMP_FGT DD 01b81be65H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
CONST	SEGMENT
D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT DD 01b81be64H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG2and1_VLD
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG2and1_VLD DD 086695f12H
	DW	0340eH
	DW	04f04H
	DB	09fH
	DB	0d3H
	DB	092H
	DB	053H
	DB	0ddH
	DB	032H
	DB	074H
	DB	060H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG1_VLD
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG1_VLD DD 06f3ec719H
	DW	03735H
	DW	042ccH
	DB	080H
	DB	063H
	DB	065H
	DB	0ccH
	DB	03cH
	DB	0b3H
	DB	066H
	DB	016H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG2_VLD
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG2_VLD DD 0ee27417fH
	DW	05e28H
	DW	04e65H
	DB	0beH
	DB	0eaH
	DB	01dH
	DB	026H
	DB	0b5H
	DB	08H
	DB	0adH
	DB	0c9H
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG2_IDCT
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG2_IDCT DD 0bf22ad00H
	DW	03eaH
	DW	04690H
	DB	080H
	DB	077H
	DB	047H
	DB	033H
	DB	046H
	DB	020H
	DB	09bH
	DB	07eH
CONST	ENDS
;	COMDAT D3D11_DECODER_PROFILE_MPEG2_MOCOMP
CONST	SEGMENT
D3D11_DECODER_PROFILE_MPEG2_MOCOMP DD 0e6a9f44bH
	DW	061b0H
	DW	04563H
	DB	09eH
	DB	0a4H
	DB	063H
	DB	0d2H
	DB	0a3H
	DB	0c6H
	DB	0feH
	DB	066H
CONST	ENDS
;	COMDAT IID_ID3D10BlendState1
CONST	SEGMENT
IID_ID3D10BlendState1 DD 0edad8d99H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT PPM_THERMAL_POLICY_CHANGE_GUID
CONST	SEGMENT
PPM_THERMAL_POLICY_CHANGE_GUID DD 048f377b8H
	DW	06880H
	DW	04c7bH
	DB	08bH
	DB	0dcH
	DB	038H
	DB	01H
	DB	076H
	DB	0c6H
	DB	065H
	DB	04dH
CONST	ENDS
;	COMDAT PPM_PERFMON_PERFSTATE_GUID
CONST	SEGMENT
PPM_PERFMON_PERFSTATE_GUID DD 07fd18652H
	DW	0cfeH
	DW	040d2H
	DB	0b0H
	DB	0a1H
	DB	0bH
	DB	06H
	DB	06aH
	DB	087H
	DB	075H
	DB	09eH
CONST	ENDS
;	COMDAT PPM_THERMALCONSTRAINT_GUID
CONST	SEGMENT
PPM_THERMALCONSTRAINT_GUID DD 0a852c2c8H
	DW	01a4cH
	DW	0423bH
	DB	08cH
	DB	02cH
	DB	0f3H
	DB	0dH
	DB	082H
	DB	093H
	DB	01aH
	DB	088H
CONST	ENDS
;	COMDAT PPM_IDLE_ACCOUNTING_EX_GUID
CONST	SEGMENT
PPM_IDLE_ACCOUNTING_EX_GUID DD 0d67abd39H
	DW	081f8H
	DW	04a5eH
	DB	081H
	DB	052H
	DB	072H
	DB	0e3H
	DB	01eH
	DB	0c9H
	DB	012H
	DB	0eeH
CONST	ENDS
;	COMDAT PPM_IDLE_ACCOUNTING_GUID
CONST	SEGMENT
PPM_IDLE_ACCOUNTING_GUID DD 0e2a26f78H
	DW	0ae07H
	DW	04ee0H
	DB	0a3H
	DB	0fH
	DB	0ceH
	DB	054H
	DB	0f5H
	DB	05aH
	DB	094H
	DB	0cdH
CONST	ENDS
;	COMDAT PPM_IDLESTATES_DATA_GUID
CONST	SEGMENT
PPM_IDLESTATES_DATA_GUID DD 0ba138e10H
	DW	0e250H
	DW	04ad7H
	DB	086H
	DB	016H
	DB	0cfH
	DB	01aH
	DB	07aH
	DB	0d4H
	DB	010H
	DB	0e7H
CONST	ENDS
;	COMDAT PPM_PERFSTATES_DATA_GUID
CONST	SEGMENT
PPM_PERFSTATES_DATA_GUID DD 05708cc20H
	DW	07d40H
	DW	04bf4H
	DB	0b4H
	DB	0aaH
	DB	02bH
	DB	01H
	DB	033H
	DB	08dH
	DB	01H
	DB	026H
CONST	ENDS
;	COMDAT PPM_IDLESTATE_CHANGE_GUID
CONST	SEGMENT
PPM_IDLESTATE_CHANGE_GUID DD 04838fe4fH
	DW	0f71cH
	DW	04e51H
	DB	09eH
	DB	0ccH
	DB	084H
	DB	030H
	DB	0a7H
	DB	0acH
	DB	04cH
	DB	06cH
CONST	ENDS
;	COMDAT PPM_PERFSTATE_DOMAIN_CHANGE_GUID
CONST	SEGMENT
PPM_PERFSTATE_DOMAIN_CHANGE_GUID DD 0995e6b7fH
	DW	0d653H
	DW	0497aH
	DB	0b9H
	DB	078H
	DB	036H
	DB	0a3H
	DB	0cH
	DB	029H
	DB	0bfH
	DB	01H
CONST	ENDS
;	COMDAT PPM_PERFSTATE_CHANGE_GUID
CONST	SEGMENT
PPM_PERFSTATE_CHANGE_GUID DD 0a5b32dddH
	DW	07f39H
	DW	04abcH
	DB	0b8H
	DB	092H
	DB	090H
	DB	0eH
	DB	043H
	DB	0b5H
	DB	09eH
	DB	0bbH
CONST	ENDS
;	COMDAT IID_ID3D10EffectPool
CONST	SEGMENT
IID_ID3D10EffectPool DD 09537ab04H
	DW	03250H
	DW	0412eH
	DB	082H
	DB	013H
	DB	0fcH
	DB	0d2H
	DB	0f8H
	DB	067H
	DB	079H
	DB	033H
CONST	ENDS
;	COMDAT IID_ID3D10Effect
CONST	SEGMENT
IID_ID3D10Effect DD 051b0ca8bH
	DW	0ec0bH
	DW	04519H
	DB	087H
	DB	0dH
	DB	08eH
	DB	0e1H
	DB	0cbH
	DB	050H
	DB	017H
	DB	0c7H
CONST	ENDS
;	COMDAT IID_ID3D10EffectTechnique
CONST	SEGMENT
IID_ID3D10EffectTechnique DD 0db122ce8H
	DW	0d1c9H
	DW	04292H
	DB	0b2H
	DB	037H
	DB	024H
	DB	0edH
	DB	03dH
	DB	0e8H
	DB	0b1H
	DB	075H
CONST	ENDS
;	COMDAT IID_ID3D10EffectPass
CONST	SEGMENT
IID_ID3D10EffectPass DD 05cfbeb89H
	DW	01a06H
	DW	046e0H
	DB	0b2H
	DB	082H
	DB	0e3H
	DB	0f9H
	DB	0bfH
	DB	0a3H
	DB	06aH
	DB	054H
CONST	ENDS
;	COMDAT IID_ID3D10EffectSamplerVariable
CONST	SEGMENT
IID_ID3D10EffectSamplerVariable DD 06530d5c7H
	DW	07e9H
	DW	04271H
	DB	0a4H
	DB	018H
	DB	0e7H
	DB	0ceH
	DB	04bH
	DB	0d1H
	DB	0e4H
	DB	080H
CONST	ENDS
;	COMDAT IID_ID3D10EffectRasterizerVariable
CONST	SEGMENT
IID_ID3D10EffectRasterizerVariable DD 021af9f0eH
	DW	04d94H
	DW	04ea9H
	DB	097H
	DB	085H
	DB	02cH
	DB	0b7H
	DB	06bH
	DB	08cH
	DB	0bH
	DB	034H
CONST	ENDS
;	COMDAT IID_ID3D11DeviceContext
CONST	SEGMENT
IID_ID3D11DeviceContext DD 0c0bfa96cH
	DW	0e089H
	DW	044fbH
	DB	08eH
	DB	0afH
	DB	026H
	DB	0f8H
	DB	079H
	DB	061H
	DB	090H
	DB	0daH
CONST	ENDS
;	COMDAT IID_ID3D10EffectDepthStencilVariable
CONST	SEGMENT
IID_ID3D10EffectDepthStencilVariable DD 0af482368H
	DW	0330aH
	DW	046a5H
	DB	09aH
	DB	05cH
	DB	01H
	DB	0c7H
	DB	01aH
	DB	0f2H
	DB	04cH
	DB	08dH
CONST	ENDS
;	COMDAT IID_ID3D10EffectBlendVariable
CONST	SEGMENT
IID_ID3D10EffectBlendVariable DD 01fcd2294H
	DW	0df6dH
	DW	04eaeH
	DB	086H
	DB	0b3H
	DB	0eH
	DB	091H
	DB	060H
	DB	0cfH
	DB	0b0H
	DB	07bH
CONST	ENDS
;	COMDAT IID_ID3D10EffectShaderVariable
CONST	SEGMENT
IID_ID3D10EffectShaderVariable DD 080849279H
	DW	0c799H
	DW	04797H
	DB	08cH
	DB	033H
	DB	04H
	DB	07H
	DB	0a0H
	DB	07dH
	DB	09eH
	DB	06H
CONST	ENDS
;	COMDAT GUID_SPR_ACTIVE_SESSION_CHANGE
CONST	SEGMENT
GUID_SPR_ACTIVE_SESSION_CHANGE DD 0e24ce38H
	DW	0c393H
	DW	04742H
	DB	0bdH
	DB	0b1H
	DB	074H
	DB	04fH
	DB	04bH
	DB	09eH
	DB	0e0H
	DB	08eH
CONST	ENDS
;	COMDAT GUID_MIXED_REALITY_MODE
CONST	SEGMENT
GUID_MIXED_REALITY_MODE DD 01e626b4eH
	DW	0cf04H
	DW	04f8dH
	DB	09cH
	DB	0c7H
	DB	0c9H
	DB	07cH
	DB	05bH
	DB	0fH
	DB	023H
	DB	091H
CONST	ENDS
;	COMDAT GUID_GPU_PREFERENCE_POLICY
CONST	SEGMENT
GUID_GPU_PREFERENCE_POLICY DD 0dd848b2aH
	DW	08a5dH
	DW	04451H
	DB	09aH
	DB	0e2H
	DB	039H
	DB	0cdH
	DB	041H
	DB	065H
	DB	08fH
	DB	06cH
CONST	ENDS
;	COMDAT GUID_GRAPHICS_SUBGROUP
CONST	SEGMENT
GUID_GRAPHICS_SUBGROUP DD 05fb4938dH
	DW	01ee8H
	DW	04b0fH
	DB	09aH
	DB	03cH
	DB	050H
	DB	036H
	DB	0b0H
	DB	0abH
	DB	099H
	DB	05cH
CONST	ENDS
;	COMDAT GUID_INTSTEER_TIME_UNPARK_TRIGGER
CONST	SEGMENT
GUID_INTSTEER_TIME_UNPARK_TRIGGER DD 0d6ba4903H
	DW	0386fH
	DW	04c2cH
	DB	08aH
	DB	0dbH
	DB	05cH
	DB	021H
	DB	0b3H
	DB	032H
	DB	08dH
	DB	025H
CONST	ENDS
;	COMDAT GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
CONST	SEGMENT
GUID_INTSTEER_LOAD_PER_PROC_TRIGGER DD 073cde64dH
	DW	0d720H
	DW	04bb2H
	DB	0a8H
	DB	060H
	DB	0c7H
	DB	055H
	DB	0afH
	DB	0e7H
	DB	07eH
	DB	0f2H
CONST	ENDS
;	COMDAT GUID_INTSTEER_MODE
CONST	SEGMENT
GUID_INTSTEER_MODE DD 02bfc24f9H
	DW	05ea2H
	DW	04801H
	DB	082H
	DB	013H
	DB	03dH
	DB	0baH
	DB	0e0H
	DB	01aH
	DB	0a3H
	DB	09dH
CONST	ENDS
;	COMDAT IID_ID3D10EffectConstantBuffer
CONST	SEGMENT
IID_ID3D10EffectConstantBuffer DD 056648f4dH
	DW	0cc8bH
	DW	04444H
	DB	0a5H
	DB	0adH
	DB	0b5H
	DB	0a3H
	DB	0d7H
	DB	06eH
	DB	091H
	DB	0b3H
CONST	ENDS
;	COMDAT GUID_INTSTEER_SUBGROUP
CONST	SEGMENT
GUID_INTSTEER_SUBGROUP DD 048672f38H
	DW	07a9aH
	DW	04bb2H
	DB	08bH
	DB	0f8H
	DB	03dH
	DB	085H
	DB	0beH
	DB	019H
	DB	0deH
	DB	04eH
CONST	ENDS
;	COMDAT GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
CONST	SEGMENT
GUID_ENABLE_SWITCH_FORCED_SHUTDOWN DD 0833a6b62H
	DW	0dfa4H
	DW	046d1H
	DB	082H
	DB	0f8H
	DB	0e0H
	DB	09eH
	DB	034H
	DB	0d0H
	DB	029H
	DB	0d6H
CONST	ENDS
;	COMDAT GUID_PCIEXPRESS_ASPM_POLICY
CONST	SEGMENT
GUID_PCIEXPRESS_ASPM_POLICY DD 0ee12f906H
	DW	0d277H
	DW	0404bH
	DB	0b6H
	DB	0daH
	DB	0e5H
	DB	0faH
	DB	01aH
	DB	057H
	DB	06dH
	DB	0f5H
CONST	ENDS
;	COMDAT GUID_PCIEXPRESS_SETTINGS_SUBGROUP
CONST	SEGMENT
GUID_PCIEXPRESS_SETTINGS_SUBGROUP DD 0501a4d13H
	DW	042afH
	DW	04429H
	DB	09fH
	DB	0d1H
	DB	0a8H
	DB	021H
	DB	08cH
	DB	026H
	DB	08eH
	DB	020H
CONST	ENDS
;	COMDAT GUID_APPLAUNCH_BUTTON
CONST	SEGMENT
GUID_APPLAUNCH_BUTTON DD 01a689231H
	DW	07399H
	DW	04e9aH
	DB	08fH
	DB	099H
	DB	0b7H
	DB	01fH
	DB	099H
	DB	09dH
	DB	0b3H
	DB	0faH
CONST	ENDS
;	COMDAT GUID_BACKGROUND_TASK_NOTIFICATION
CONST	SEGMENT
GUID_BACKGROUND_TASK_NOTIFICATION DD 0cf23f240H
	DW	02a54H
	DW	048d8H
	DB	0b1H
	DB	014H
	DB	0deH
	DB	015H
	DB	018H
	DB	0ffH
	DB	05H
	DB	02eH
CONST	ENDS
;	COMDAT GUID_IDLE_BACKGROUND_TASK
CONST	SEGMENT
GUID_IDLE_BACKGROUND_TASK DD 0515c31d8H
	DW	0f734H
	DW	0163dH
	DB	0a0H
	DB	0fdH
	DB	011H
	DB	0a0H
	DB	08cH
	DB	091H
	DB	0e8H
	DB	0f1H
CONST	ENDS
;	COMDAT GUID_SESSION_USER_PRESENCE
CONST	SEGMENT
GUID_SESSION_USER_PRESENCE DD 03c0f4548H
	DW	0c03fH
	DW	04c4dH
	DB	0b9H
	DB	0f2H
	DB	023H
	DB	07eH
	DB	0deH
	DB	068H
	DB	063H
	DB	076H
CONST	ENDS
;	COMDAT GUID_SESSION_DISPLAY_STATUS
CONST	SEGMENT
GUID_SESSION_DISPLAY_STATUS DD 02b84c20eH
	DW	0ad23H
	DW	04ddfH
	DB	093H
	DB	0dbH
	DB	05H
	DB	0ffH
	DB	0bdH
	DB	07eH
	DB	0fcH
	DB	0a5H
CONST	ENDS
;	COMDAT IID_ID3D11CommandList
CONST	SEGMENT
IID_ID3D11CommandList DD 0a24bc4d1H
	DW	0769eH
	DW	043f7H
	DB	080H
	DB	013H
	DB	098H
	DB	0ffH
	DB	056H
	DB	06cH
	DB	018H
	DB	0e2H
CONST	ENDS
;	COMDAT GUID_GLOBAL_USER_PRESENCE
CONST	SEGMENT
GUID_GLOBAL_USER_PRESENCE DD 0786e8a1dH
	DW	0b427H
	DW	04344H
	DB	092H
	DB	07H
	DB	09H
	DB	0e7H
	DB	0bH
	DB	0dcH
	DB	0beH
	DB	0a9H
CONST	ENDS
;	COMDAT GUID_BATTERY_COUNT
CONST	SEGMENT
GUID_BATTERY_COUNT DD 07d263f15H
	DW	0fca4H
	DW	049e5H
	DB	085H
	DB	04bH
	DB	0a9H
	DB	0f2H
	DB	0bfH
	DB	0bdH
	DB	05cH
	DB	024H
CONST	ENDS
;	COMDAT GUID_BATTERY_PERCENTAGE_REMAINING
CONST	SEGMENT
GUID_BATTERY_PERCENTAGE_REMAINING DD 0a7ad8041H
	DW	0b45aH
	DW	04caeH
	DB	087H
	DB	0a3H
	DB	0eeH
	DB	0cbH
	DB	0b4H
	DB	068H
	DB	0a9H
	DB	0e1H
CONST	ENDS
;	COMDAT GUID_LIDSWITCH_STATE_CHANGE
CONST	SEGMENT
GUID_LIDSWITCH_STATE_CHANGE DD 0ba3e0f4dH
	DW	0b817H
	DW	04094H
	DB	0a2H
	DB	0d1H
	DB	0d5H
	DB	063H
	DB	079H
	DB	0e6H
	DB	0a0H
	DB	0f3H
CONST	ENDS
;	COMDAT GUID_ACDC_POWER_SOURCE
CONST	SEGMENT
GUID_ACDC_POWER_SOURCE DD 05d3e9a59H
	DW	0e9d5H
	DW	04b00H
	DB	0a6H
	DB	0bdH
	DB	0ffH
	DB	034H
	DB	0ffH
	DB	051H
	DB	065H
	DB	048H
CONST	ENDS
;	COMDAT GUID_DISCONNECTED_STANDBY_MODE
CONST	SEGMENT
GUID_DISCONNECTED_STANDBY_MODE DD 068afb2d9H
	DW	0ee95H
	DW	047a8H
	DB	08fH
	DB	050H
	DB	041H
	DB	015H
	DB	08H
	DB	080H
	DB	073H
	DB	0b1H
CONST	ENDS
;	COMDAT GUID_CONNECTIVITY_IN_STANDBY
CONST	SEGMENT
GUID_CONNECTIVITY_IN_STANDBY DD 0f15576e8H
	DW	098b7H
	DW	04186H
	DB	0b9H
	DB	044H
	DB	0eaH
	DB	0faH
	DB	066H
	DB	044H
	DB	02H
	DB	0d9H
CONST	ENDS
;	COMDAT GUID_DEVICE_IDLE_POLICY
CONST	SEGMENT
GUID_DEVICE_IDLE_POLICY DD 04faab71aH
	DW	092e5H
	DW	04726H
	DB	0b5H
	DB	031H
	DB	022H
	DB	045H
	DB	059H
	DB	067H
	DB	02dH
	DB	019H
CONST	ENDS
;	COMDAT GUID_LOCK_CONSOLE_ON_WAKE
CONST	SEGMENT
GUID_LOCK_CONSOLE_ON_WAKE DD 0e796bdbH
	DW	0100dH
	DW	047d6H
	DB	0a2H
	DB	0d5H
	DB	0f7H
	DB	0d2H
	DB	0daH
	DB	0a5H
	DB	01fH
	DB	051H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 DD 0ce8e92eeH
	DW	06a86H
	DW	04572H
	DB	0bfH
	DB	0e0H
	DB	020H
	DB	0c2H
	DB	01dH
	DB	03H
	DB	0cdH
	DB	041H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR DD 0ce8e92eeH
	DW	06a86H
	DW	04572H
	DB	0bfH
	DB	0e0H
	DB	020H
	DB	0c2H
	DB	01dH
	DB	03H
	DB	0cdH
	DB	040H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 DD 04427c73bH
	DW	09756H
	DW	04a5cH
	DB	0b8H
	DB	04bH
	DB	0c7H
	DB	0bdH
	DB	0a7H
	DB	09cH
	DB	073H
	DB	021H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING DD 04427c73bH
	DW	09756H
	DW	04a5cH
	DB	0b8H
	DB	04bH
	DB	0c7H
	DB	0bdH
	DB	0a7H
	DB	09cH
	DB	073H
	DB	020H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 DD 03d915188H
	DW	07830H
	DW	049aeH
	DB	0a7H
	DB	09aH
	DB	0fH
	DB	0b0H
	DB	0a1H
	DB	0e5H
	DB	0a2H
	DB	01H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME DD 03d915188H
	DW	07830H
	DW	049aeH
	DB	0a7H
	DB	09aH
	DB	0fH
	DB	0b0H
	DB	0a1H
	DB	0e5H
	DB	0a2H
	DB	00H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 DD 0f565999fH
	DW	03fb0H
	DW	0411aH
	DB	0a2H
	DB	026H
	DB	03fH
	DB	01H
	DB	098H
	DB	0deH
	DB	0c1H
	DB	031H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME DD 0f565999fH
	DW	03fb0H
	DW	0411aH
	DB	0a2H
	DB	026H
	DB	03fH
	DB	01H
	DB	098H
	DB	0deH
	DB	0c1H
	DB	030H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 DD 03d44e256H
	DW	07222H
	DW	04415H
	DB	0a9H
	DB	0edH
	DB	09cH
	DB	045H
	DB	0faH
	DB	03dH
	DB	0d8H
	DB	031H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD DD 03d44e256H
	DW	07222H
	DW	04415H
	DB	0a9H
	DB	0edH
	DB	09cH
	DB	045H
	DB	0faH
	DB	03dH
	DB	0d8H
	DB	030H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 DD 038b8383dH
	DW	0cce0H
	DW	04c79H
	DB	09eH
	DB	03eH
	DB	056H
	DB	0a4H
	DB	0f1H
	DB	07cH
	DB	0c4H
	DB	081H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD DD 038b8383dH
	DW	0cce0H
	DW	04c79H
	DB	09eH
	DB	03eH
	DB	056H
	DB	0a4H
	DB	0f1H
	DB	07cH
	DB	0c4H
	DB	080H
CONST	ENDS
;	COMDAT GUID_SYSTEM_COOLING_POLICY
CONST	SEGMENT
GUID_SYSTEM_COOLING_POLICY DD 094d3a615H
	DW	0a899H
	DW	04ac5H
	DB	0aeH
	DB	02bH
	DB	0e4H
	DB	0d8H
	DB	0f6H
	DB	034H
	DB	036H
	DB	07fH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
CONST	SEGMENT
GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY DD 0bae08b81H
	DW	02d5eH
	DW	04688H
	DB	0adH
	DB	06aH
	DB	013H
	DB	024H
	DB	033H
	DB	056H
	DB	065H
	DB	04bH
CONST	ENDS
;	COMDAT IID_ID3D11ClassLinkage
CONST	SEGMENT
IID_ID3D11ClassLinkage DD 0ddf57cbaH
	DW	09543H
	DW	046e4H
	DB	0a1H
	DB	02bH
	DB	0f2H
	DB	07H
	DB	0a0H
	DB	0feH
	DB	07fH
	DB	0edH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
CONST	SEGMENT
GUID_PROCESSOR_THREAD_SCHEDULING_POLICY DD 093b8b6dcH
	DW	0698H
	DW	04d1cH
	DB	09eH
	DB	0e4H
	DB	06H
	DB	044H
	DB	0e9H
	DB	00H
	DB	0c8H
	DB	05dH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CLASS1_INITIAL_PERF
CONST	SEGMENT
GUID_PROCESSOR_CLASS1_INITIAL_PERF DD 01facfc65H
	DW	0a930H
	DW	04bc5H
	DB	09fH
	DB	038H
	DB	050H
	DB	04eH
	DB	0c0H
	DB	097H
	DB	0bbH
	DB	0c0H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CLASS0_FLOOR_PERF
CONST	SEGMENT
GUID_PROCESSOR_CLASS0_FLOOR_PERF DD 0fddc842bH
	DW	08364H
	DW	04edcH
	DB	094H
	DB	0cfH
	DB	0c1H
	DB	07fH
	DB	060H
	DB	0deH
	DB	01cH
	DB	080H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD DD 0b000397dH
	DW	09b0bH
	DW	0483dH
	DB	098H
	DB	0c9H
	DB	069H
	DB	02aH
	DB	060H
	DB	060H
	DB	0cfH
	DB	0bfH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD DD 0f8861c27H
	DW	095e7H
	DW	0475cH
	DB	086H
	DB	05bH
	DB	013H
	DB	0c0H
	DB	0cbH
	DB	03fH
	DB	09dH
	DB	06bH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_HETERO_INCREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_HETERO_INCREASE_TIME DD 04009efa7H
	DW	0e72dH
	DW	04cbaH
	DB	09eH
	DB	0dfH
	DB	091H
	DB	08H
	DB	04eH
	DB	0a8H
	DB	0cbH
	DB	0c3H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_HETERO_DECREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_HETERO_DECREASE_TIME DD 07f2492b6H
	DW	060b1H
	DW	045e5H
	DB	0aeH
	DB	055H
	DB	077H
	DB	03fH
	DB	08cH
	DB	0d5H
	DB	0caH
	DB	0ecH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_HETEROGENEOUS_POLICY
CONST	SEGMENT
GUID_PROCESSOR_HETEROGENEOUS_POLICY DD 07f2f5cfaH
	DW	0f10cH
	DW	04823H
	DB	0b5H
	DB	0e1H
	DB	0e9H
	DB	03aH
	DB	0e8H
	DB	05fH
	DB	046H
	DB	0b5H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_DISTRIBUTE_UTILITY
CONST	SEGMENT
GUID_PROCESSOR_DISTRIBUTE_UTILITY DD 0e0007330H
	DW	0f589H
	DW	042edH
	DB	0a4H
	DB	01H
	DB	05dH
	DB	0dbH
	DB	010H
	DB	0e7H
	DB	085H
	DB	0d3H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
CONST	SEGMENT
GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 DD 0616cdaa5H
	DW	0695eH
	DW	04545H
	DB	097H
	DB	0adH
	DB	097H
	DB	0dcH
	DB	02dH
	DB	01bH
	DB	0ddH
	DB	089H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
CONST	SEGMENT
GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK DD 0616cdaa5H
	DW	0695eH
	DW	04545H
	DB	097H
	DB	0adH
	DB	097H
	DB	0dcH
	DB	02dH
	DB	01bH
	DB	0ddH
	DB	088H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 DD 0619b7505H
	DW	03bH
	DW	04e82H
	DB	0b7H
	DB	0a6H
	DB	04dH
	DB	0d2H
	DB	09cH
	DB	030H
	DB	09H
	DB	072H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
CONST	SEGMENT
GUID_PROCESSOR_PERF_LATENCY_HINT_PERF DD 0619b7505H
	DW	03bH
	DW	04e82H
	DB	0b7H
	DB	0a6H
	DB	04dH
	DB	0d2H
	DB	09cH
	DB	030H
	DB	09H
	DB	071H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_LATENCY_HINT
CONST	SEGMENT
GUID_PROCESSOR_PERF_LATENCY_HINT DD 0822df31H
	DW	09c83H
	DW	0441cH
	DB	0a0H
	DB	079H
	DB	0dH
	DB	0e4H
	DB	0cfH
	DB	00H
	DB	09cH
	DB	07bH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
CONST	SEGMENT
GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY DD 077d7f282H
	DW	08f1aH
	DW	042cdH
	DB	085H
	DB	037H
	DB	045H
	DB	045H
	DB	0aH
	DB	083H
	DB	09bH
	DB	0e8H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_HISTORY
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_HISTORY DD 0300f6f8H
	DW	0abd6H
	DW	045a9H
	DB	0b7H
	DB	04fH
	DB	049H
	DB	08H
	DB	069H
	DB	01aH
	DB	040H
	DB	0b5H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_HISTORY
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_HISTORY DD 099b3ef01H
	DW	0752fH
	DW	046a1H
	DB	080H
	DB	0fbH
	DB	077H
	DB	030H
	DB	01H
	DB	01fH
	DB	023H
	DB	054H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_HISTORY_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_HISTORY_1 DD 07d24baa7H
	DW	0b84H
	DW	0480fH
	DB	084H
	DB	0cH
	DB	01bH
	DB	07H
	DB	043H
	DB	0c0H
	DB	0fH
	DB	060H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_HISTORY
CONST	SEGMENT
GUID_PROCESSOR_PERF_HISTORY DD 07d24baa7H
	DW	0b84H
	DW	0480fH
	DB	084H
	DB	0cH
	DB	01bH
	DB	07H
	DB	043H
	DB	0c0H
	DB	0fH
	DB	05fH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD DD 04bdaf4e9H
	DW	0d103H
	DW	046d7H
	DB	0a5H
	DB	0f0H
	DB	062H
	DB	080H
	DB	012H
	DB	016H
	DB	016H
	DB	0efH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD DD 0f735a673H
	DW	02066H
	DW	04f80H
	DB	0a0H
	DB	0c5H
	DB	0ddH
	DB	0eeH
	DB	0cH
	DB	0f1H
	DB	0bfH
	DB	05dH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD DD 02430ab6fH
	DW	0a520H
	DW	044a2H
	DB	096H
	DB	01H
	DB	0f7H
	DB	0f2H
	DB	03bH
	DB	051H
	DB	034H
	DB	0b1H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_PERF_STATE_1
CONST	SEGMENT
GUID_PROCESSOR_PARKING_PERF_STATE_1 DD 0447235c7H
	DW	06a8dH
	DW	04cc0H
	DB	08eH
	DB	024H
	DB	09eH
	DB	0afH
	DB	070H
	DB	0b9H
	DB	06eH
	DB	02cH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_PERF_STATE
CONST	SEGMENT
GUID_PROCESSOR_PARKING_PERF_STATE DD 0447235c7H
	DW	06a8dH
	DW	04cc0H
	DB	08eH
	DB	024H
	DB	09eH
	DB	0afH
	DB	070H
	DB	0b9H
	DB	06eH
	DB	02bH
CONST	ENDS
;	COMDAT IID_ID3D11ClassInstance
CONST	SEGMENT
IID_ID3D11ClassInstance DD 0a6cd7faaH
	DW	0b0b7H
	DW	04a2fH
	DB	094H
	DB	036H
	DB	086H
	DB	062H
	DB	0a6H
	DB	057H
	DB	097H
	DB	0cbH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PARKING_CORE_OVERRIDE
CONST	SEGMENT
GUID_PROCESSOR_PARKING_CORE_OVERRIDE DD 0a55612aaH
	DW	0f624H
	DW	042c6H
	DB	0a4H
	DB	043H
	DB	073H
	DB	097H
	DB	0d0H
	DB	064H
	DB	0c0H
	DB	04fH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD DD 0943c8cb6H
	DW	06f93H
	DW	04227H
	DB	0adH
	DB	087H
	DB	0e9H
	DB	0a3H
	DB	0feH
	DB	0ecH
	DB	08H
	DB	0d1H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING DD 08809c2d8H
	DW	0b155H
	DW	042d4H
	DB	0bcH
	DB	0daH
	DB	0dH
	DB	034H
	DB	056H
	DB	051H
	DB	0b1H
	DB	0dbH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD DD 09ac18e92H
	DW	0aa3cH
	DW	04e27H
	DB	0b3H
	DB	07H
	DB	01H
	DB	0aeH
	DB	037H
	DB	030H
	DB	071H
	DB	029H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR DD 01299023cH
	DW	0bc28H
	DW	04f0aH
	DB	081H
	DB	0ecH
	DB	0d3H
	DB	029H
	DB	05aH
	DB	08dH
	DB	081H
	DB	05dH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING DD 0e70867f1H
	DW	0fa2fH
	DW	04f4eH
	DB	0aeH
	DB	0a1H
	DB	04dH
	DB	08aH
	DB	0bH
	DB	0a2H
	DB	03bH
	DB	020H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD DD 05b33697bH
	DW	0e89dH
	DW	04d38H
	DB	0aaH
	DB	046H
	DB	09eH
	DB	07dH
	DB	0fbH
	DB	07cH
	DB	0d2H
	DB	0f9H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR DD 08f7b45e3H
	DW	0c393H
	DW	0480aH
	DB	087H
	DB	08cH
	DB	0f6H
	DB	07aH
	DB	0c3H
	DB	0d0H
	DB	070H
	DB	082H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME DD 0dfd10d17H
	DW	0d5ebH
	DW	045ddH
	DB	087H
	DB	07aH
	DB	09aH
	DB	034H
	DB	0ddH
	DB	0d1H
	DB	05cH
	DB	082H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME DD 02ddd5a84H
	DW	05a71H
	DW	0437eH
	DB	091H
	DB	02aH
	DB	0dbH
	DB	0bH
	DB	08cH
	DB	078H
	DB	087H
	DB	032H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 DD 0cc5b647H
	DW	0c1dfH
	DW	04637H
	DB	089H
	DB	01aH
	DB	0deH
	DB	0c3H
	DB	05cH
	DB	031H
	DB	085H
	DB	084H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_MIN_CORES
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_MIN_CORES DD 0cc5b647H
	DW	0c1dfH
	DW	04637H
	DB	089H
	DB	01aH
	DB	0deH
	DB	0c3H
	DB	05cH
	DB	031H
	DB	085H
	DB	083H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 DD 0ea062031H
	DW	0e34H
	DW	04ff1H
	DB	09bH
	DB	06dH
	DB	0ebH
	DB	010H
	DB	059H
	DB	033H
	DB	040H
	DB	029H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_MAX_CORES
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_MAX_CORES DD 0ea062031H
	DW	0e34H
	DW	04ff1H
	DB	09bH
	DB	06dH
	DB	0ebH
	DB	010H
	DB	059H
	DB	033H
	DB	040H
	DB	028H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY DD 071021b41H
	DW	0c749H
	DW	04d21H
	DB	0beH
	DB	074H
	DB	0a0H
	DB	0fH
	DB	033H
	DB	05dH
	DB	058H
	DB	02bH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY DD 0c7be0679H
	DW	02817H
	DW	04d69H
	DB	09dH
	DB	02H
	DB	051H
	DB	09aH
	DB	053H
	DB	07eH
	DB	0d0H
	DB	0c6H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD DD 068dd2f27H
	DW	0a4ceH
	DW	04e11H
	DB	084H
	DB	087H
	DB	037H
	DB	094H
	DB	0e4H
	DB	013H
	DB	05dH
	DB	0faH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD DD 0df142941H
	DW	020f3H
	DW	04edfH
	DB	09aH
	DB	04aH
	DB	09cH
	DB	083H
	DB	0d3H
	DB	0d7H
	DB	017H
	DB	0d1H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD DD 07b224883H
	DW	0b3ccH
	DW	04d79H
	DB	081H
	DB	09fH
	DB	083H
	DB	074H
	DB	015H
	DB	02cH
	DB	0beH
	DB	07cH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD DD 04b92d758H
	DW	05a24H
	DW	04851H
	DB	0a4H
	DB	070H
	DB	081H
	DB	05dH
	DB	078H
	DB	0aeH
	DB	0e1H
	DB	019H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_TIME_CHECK
CONST	SEGMENT
GUID_PROCESSOR_IDLE_TIME_CHECK DD 0c4581c31H
	DW	089abH
	DW	04597H
	DB	08eH
	DB	02bH
	DB	09cH
	DB	09cH
	DB	0abH
	DB	044H
	DB	0eH
	DB	06bH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_STATE_MAXIMUM
CONST	SEGMENT
GUID_PROCESSOR_IDLE_STATE_MAXIMUM DD 09943e905H
	DW	09a30H
	DW	04ec1H
	DB	09bH
	DB	099H
	DB	044H
	DB	0ddH
	DB	03bH
	DB	076H
	DB	0f7H
	DB	0a2H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_DISABLE
CONST	SEGMENT
GUID_PROCESSOR_IDLE_DISABLE DD 05d76a2caH
	DW	0e8c0H
	DW	0402fH
	DB	0a1H
	DB	033H
	DB	021H
	DB	058H
	DB	049H
	DB	02dH
	DB	058H
	DB	0adH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLE_ALLOW_SCALING
CONST	SEGMENT
GUID_PROCESSOR_IDLE_ALLOW_SCALING DD 06c2993b0H
	DW	08f48H
	DW	0481fH
	DB	0bcH
	DB	0c6H
	DB	00H
	DB	0ddH
	DB	027H
	DB	042H
	DB	0aaH
	DB	06H
CONST	ENDS
;	COMDAT IID_ID3D10EffectDepthStencilViewVariable
CONST	SEGMENT
IID_ID3D10EffectDepthStencilViewVariable DD 03e02c918H
	DW	0cc79H
	DW	04985H
	DB	0b6H
	DB	022H
	DB	02dH
	DB	092H
	DB	0adH
	DB	070H
	DB	016H
	DB	023H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_DUTY_CYCLING
CONST	SEGMENT
GUID_PROCESSOR_DUTY_CYCLING DD 04e4450b3H
	DW	06179H
	DW	04e91H
	DB	0b8H
	DB	0f1H
	DB	05bH
	DB	0b9H
	DB	093H
	DB	08fH
	DB	081H
	DB	0a1H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
CONST	SEGMENT
GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW DD 0cfeda3d0H
	DW	07697H
	DW	04566H
	DB	0a9H
	DB	022H
	DB	0a9H
	DB	08H
	DB	06cH
	DB	0d4H
	DB	09dH
	DB	0faH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 DD 036687f9eH
	DW	0e3a5H
	DW	04dbfH
	DB	0b1H
	DB	0dcH
	DB	015H
	DB	0ebH
	DB	038H
	DB	01cH
	DB	068H
	DB	064H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
CONST	SEGMENT
GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE DD 036687f9eH
	DW	0e3a5H
	DW	04dbfH
	DB	0b1H
	DB	0dcH
	DB	015H
	DB	0ebH
	DB	038H
	DB	01cH
	DB	068H
	DB	063H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
CONST	SEGMENT
GUID_PROCESSOR_PERF_AUTONOMOUS_MODE DD 08baa4a8aH
	DW	014c6H
	DW	04451H
	DB	08eH
	DB	08bH
	DB	014H
	DB	0bdH
	DB	0bdH
	DB	019H
	DB	075H
	DB	037H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_BOOST_MODE
CONST	SEGMENT
GUID_PROCESSOR_PERF_BOOST_MODE DD 0be337238H
	DW	0d82H
	DW	04146H
	DB	0a9H
	DB	060H
	DB	04fH
	DB	037H
	DB	049H
	DB	0d4H
	DB	070H
	DB	0c7H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_BOOST_POLICY
CONST	SEGMENT
GUID_PROCESSOR_PERF_BOOST_POLICY DD 045bcc044H
	DW	0d885H
	DW	043e2H
	DB	086H
	DB	05H
	DB	0eeH
	DB	0eH
	DB	0c6H
	DB	0e9H
	DB	06bH
	DB	059H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_TIME_CHECK
CONST	SEGMENT
GUID_PROCESSOR_PERF_TIME_CHECK DD 04d2b0152H
	DW	07d5cH
	DW	0498bH
	DB	088H
	DB	0e2H
	DB	034H
	DB	034H
	DB	053H
	DB	092H
	DB	0a2H
	DB	0c5H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_TIME_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_TIME_1 DD 0d8edeb9bH
	DW	095cfH
	DW	04f95H
	DB	0a7H
	DB	03cH
	DB	0b0H
	DB	061H
	DB	097H
	DB	036H
	DB	093H
	DB	0c9H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_TIME DD 0d8edeb9bH
	DW	095cfH
	DW	04f95H
	DB	0a7H
	DB	03cH
	DB	0b0H
	DB	061H
	DB	097H
	DB	036H
	DB	093H
	DB	0c8H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_TIME_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_TIME_1 DD 0984cf492H
	DW	03bedH
	DW	04488H
	DB	0a8H
	DB	0f9H
	DB	042H
	DB	086H
	DB	0c9H
	DB	07bH
	DB	0f5H
	DB	0abH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_TIME
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_TIME DD 0984cf492H
	DW	03bedH
	DW	04488H
	DB	0a8H
	DB	0f9H
	DB	042H
	DB	086H
	DB	0c9H
	DB	07bH
	DB	0f5H
	DB	0aaH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_POLICY_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_POLICY_1 DD 040fbefc7H
	DW	02e9dH
	DW	04d25H
	DB	0a1H
	DB	085H
	DB	0cH
	DB	0fdH
	DB	085H
	DB	074H
	DB	0baH
	DB	0c7H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_POLICY DD 040fbefc7H
	DW	02e9dH
	DW	04d25H
	DB	0a1H
	DB	085H
	DB	0cH
	DB	0fdH
	DB	085H
	DB	074H
	DB	0baH
	DB	0c6H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_POLICY_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_POLICY_1 DD 0465e1f50H
	DW	0b610H
	DW	0473aH
	DB	0abH
	DB	058H
	DB	00H
	DB	0d1H
	DB	07H
	DB	07dH
	DB	0c4H
	DB	019H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_POLICY DD 0465e1f50H
	DW	0b610H
	DW	0473aH
	DB	0abH
	DB	058H
	DB	00H
	DB	0d1H
	DB	07H
	DB	07dH
	DB	0c4H
	DB	018H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 DD 012a0ab44H
	DW	0fe28H
	DW	04fa9H
	DB	0b3H
	DB	0bdH
	DB	04bH
	DB	064H
	DB	0f4H
	DB	049H
	DB	060H
	DB	0a7H
CONST	ENDS
;	COMDAT IID_ID3D11Counter
CONST	SEGMENT
IID_ID3D11Counter DD 06e8c49fbH
	DW	0a371H
	DW	04770H
	DB	0b4H
	DB	040H
	DB	029H
	DB	08H
	DB	060H
	DB	022H
	DB	0b7H
	DB	041H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_PERF_DECREASE_THRESHOLD DD 012a0ab44H
	DW	0fe28H
	DW	04fa9H
	DB	0b3H
	DB	0bdH
	DB	04bH
	DB	064H
	DB	0f4H
	DB	049H
	DB	060H
	DB	0a6H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 DD 06cadf0eH
	DW	064edH
	DW	0448aH
	DB	089H
	DB	027H
	DB	0ceH
	DB	07bH
	DB	0f9H
	DB	0eH
	DB	0b3H
	DB	05eH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
CONST	SEGMENT
GUID_PROCESSOR_PERF_INCREASE_THRESHOLD DD 06cadf0eH
	DW	064edH
	DW	0448aH
	DB	089H
	DB	027H
	DB	0ceH
	DB	07bH
	DB	0f9H
	DB	0eH
	DB	0b3H
	DB	05dH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_PERFSTATE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_PERFSTATE_POLICY DD 0bbdc3814H
	DW	018e9H
	DW	04463H
	DB	08aH
	DB	055H
	DB	0d1H
	DB	097H
	DB	032H
	DB	07cH
	DB	045H
	DB	0c0H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_IDLESTATE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_IDLESTATE_POLICY DD 068f262a7H
	DW	0f621H
	DW	04069H
	DB	0b9H
	DB	0a5H
	DB	048H
	DB	074H
	DB	016H
	DB	09bH
	DB	0e2H
	DB	03cH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_ALLOW_THROTTLING
CONST	SEGMENT
GUID_PROCESSOR_ALLOW_THROTTLING DD 03b04d4fdH
	DW	01cc7H
	DW	04f23H
	DB	0abH
	DB	01cH
	DB	0d1H
	DB	033H
	DB	078H
	DB	019H
	DB	0c4H
	DB	0bbH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_FREQUENCY_LIMIT_1
CONST	SEGMENT
GUID_PROCESSOR_FREQUENCY_LIMIT_1 DD 075b0ae3fH
	DW	0bce0H
	DW	045a7H
	DB	08cH
	DB	089H
	DB	0c9H
	DB	061H
	DB	01cH
	DB	025H
	DB	0e1H
	DB	01H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_FREQUENCY_LIMIT
CONST	SEGMENT
GUID_PROCESSOR_FREQUENCY_LIMIT DD 075b0ae3fH
	DW	0bce0H
	DW	045a7H
	DB	08cH
	DB	089H
	DB	0c9H
	DB	061H
	DB	01cH
	DB	025H
	DB	0e1H
	DB	00H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THROTTLE_MINIMUM_1
CONST	SEGMENT
GUID_PROCESSOR_THROTTLE_MINIMUM_1 DD 0893dee8eH
	DW	02befH
	DW	041e0H
	DB	089H
	DB	0c6H
	DB	0b5H
	DB	05dH
	DB	09H
	DB	029H
	DB	096H
	DB	04dH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THROTTLE_MINIMUM
CONST	SEGMENT
GUID_PROCESSOR_THROTTLE_MINIMUM DD 0893dee8eH
	DW	02befH
	DW	041e0H
	DB	089H
	DB	0c6H
	DB	0b5H
	DB	05dH
	DB	09H
	DB	029H
	DB	096H
	DB	04cH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THROTTLE_MAXIMUM_1
CONST	SEGMENT
GUID_PROCESSOR_THROTTLE_MAXIMUM_1 DD 0bc5038f7H
	DW	023e0H
	DW	04960H
	DB	096H
	DB	0daH
	DB	033H
	DB	0abH
	DB	0afH
	DB	059H
	DB	035H
	DB	0edH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THROTTLE_MAXIMUM
CONST	SEGMENT
GUID_PROCESSOR_THROTTLE_MAXIMUM DD 0bc5038f7H
	DW	023e0H
	DW	04960H
	DB	096H
	DB	0daH
	DB	033H
	DB	0abH
	DB	0afH
	DB	059H
	DB	035H
	DB	0ecH
CONST	ENDS
;	COMDAT GUID_PROCESSOR_THROTTLE_POLICY
CONST	SEGMENT
GUID_PROCESSOR_THROTTLE_POLICY DD 057027304H
	DW	04af6H
	DW	04104H
	DB	092H
	DB	060H
	DB	0e3H
	DB	0d9H
	DB	052H
	DB	048H
	DB	0fcH
	DB	036H
CONST	ENDS
;	COMDAT GUID_PROCESSOR_SETTINGS_SUBGROUP
CONST	SEGMENT
GUID_PROCESSOR_SETTINGS_SUBGROUP DD 054533251H
	DW	082beH
	DW	04824H
	DB	096H
	DB	0c1H
	DB	047H
	DB	0b6H
	DB	0bH
	DB	074H
	DB	0dH
	DB	00H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_FLAGS_3
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_FLAGS_3 DD 073613ccfH
	DW	0dbfaH
	DW	04279H
	DB	083H
	DB	056H
	DB	049H
	DB	035H
	DB	0f6H
	DB	0bfH
	DB	062H
	DB	0f3H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_LEVEL_3
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_LEVEL_3 DD 058afd5a6H
	DW	0c2ddH
	DW	047d2H
	DB	09fH
	DB	0bfH
	DB	0efH
	DB	070H
	DB	0ccH
	DB	05cH
	DB	059H
	DB	065H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_ACTION_3
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_ACTION_3 DD 080472613H
	DW	09780H
	DW	0455eH
	DB	0b3H
	DB	08H
	DB	072H
	DB	0d3H
	DB	00H
	DB	03cH
	DB	0f2H
	DB	0f8H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_FLAGS_2
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_FLAGS_2 DD 07fd2f0c4H
	DW	0feb7H
	DW	04da3H
	DB	081H
	DB	017H
	DB	0e3H
	DB	0fbH
	DB	0edH
	DB	0c4H
	DB	065H
	DB	082H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_LEVEL_2
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_LEVEL_2 DD 07a07ca2H
	DW	0adafH
	DW	040d7H
	DB	0b0H
	DB	077H
	DB	053H
	DB	03aH
	DB	0adH
	DB	0edH
	DB	01bH
	DB	0faH
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_ACTION_2
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_ACTION_2 DD 0421cba38H
	DW	01a8eH
	DW	04881H
	DB	0acH
	DB	089H
	DB	0e3H
	DB	03aH
	DB	08bH
	DB	04H
	DB	0ecH
	DB	0e4H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_FLAGS_1
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_FLAGS_1 DD 0bcded951H
	DW	0187bH
	DW	04d05H
	DB	0bcH
	DB	0ccH
	DB	0f7H
	DB	0e5H
	DB	019H
	DB	060H
	DB	0c2H
	DB	058H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_LEVEL_1
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_LEVEL_1 DD 08183ba9aH
	DW	0e910H
	DW	048daH
	DB	087H
	DB	069H
	DB	014H
	DB	0aeH
	DB	06dH
	DB	0c1H
	DB	017H
	DB	0aH
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_ACTION_1
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_ACTION_1 DD 0d8742dcbH
	DW	03e6aH
	DW	04b3cH
	DB	0b3H
	DB	0feH
	DB	037H
	DB	046H
	DB	023H
	DB	0cdH
	DB	0cfH
	DB	06H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_FLAGS_0
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_FLAGS_0 DD 05dbb7c9fH
	DW	038e9H
	DW	040d2H
	DB	097H
	DB	049H
	DB	04fH
	DB	08aH
	DB	0eH
	DB	09fH
	DB	064H
	DB	0fH
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_LEVEL_0
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_LEVEL_0 DD 09a66d8d7H
	DW	04ff7H
	DW	04ef9H
	DB	0b5H
	DB	0a2H
	DB	05aH
	DB	032H
	DB	06cH
	DB	0a2H
	DB	0a4H
	DB	069H
CONST	ENDS
;	COMDAT GUID_BATTERY_DISCHARGE_ACTION_0
CONST	SEGMENT
GUID_BATTERY_DISCHARGE_ACTION_0 DD 0637ea02fH
	DW	0bbcbH
	DW	04015H
	DB	08eH
	DB	02cH
	DB	0a1H
	DB	0c7H
	DB	0b9H
	DB	0c0H
	DB	0b5H
	DB	046H
CONST	ENDS
;	COMDAT GUID_BATTERY_SUBGROUP
CONST	SEGMENT
GUID_BATTERY_SUBGROUP DD 0e73a048dH
	DW	0bf27H
	DW	04f12H
	DB	097H
	DB	031H
	DB	08bH
	DB	020H
	DB	076H
	DB	0e8H
	DB	089H
	DB	01fH
CONST	ENDS
;	COMDAT GUID_LIDOPEN_POWERSTATE
CONST	SEGMENT
GUID_LIDOPEN_POWERSTATE DD 099ff10e7H
	DW	023b1H
	DW	04c07H
	DB	0a9H
	DB	0d1H
	DB	05cH
	DB	032H
	DB	06H
	DB	0d7H
	DB	041H
	DB	0b4H
CONST	ENDS
;	COMDAT GUID_LIDCLOSE_ACTION
CONST	SEGMENT
GUID_LIDCLOSE_ACTION DD 05ca83367H
	DW	06e45H
	DW	0459fH
	DB	0a2H
	DB	07bH
	DB	047H
	DB	06bH
	DB	01dH
	DB	01H
	DB	0c9H
	DB	036H
CONST	ENDS
;	COMDAT GUID_USERINTERFACEBUTTON_ACTION
CONST	SEGMENT
GUID_USERINTERFACEBUTTON_ACTION DD 0a7066653H
	DW	08d6cH
	DW	040a8H
	DB	091H
	DB	0eH
	DB	0a1H
	DB	0f5H
	DB	04bH
	DB	084H
	DB	0c7H
	DB	0e5H
CONST	ENDS
;	COMDAT GUID_SLEEPBUTTON_ACTION
CONST	SEGMENT
GUID_SLEEPBUTTON_ACTION DD 096996bc0H
	DW	0ad50H
	DW	047ecH
	DB	092H
	DB	03bH
	DB	06fH
	DB	041H
	DB	087H
	DB	04dH
	DB	0d9H
	DB	0ebH
CONST	ENDS
;	COMDAT GUID_POWERBUTTON_ACTION
CONST	SEGMENT
GUID_POWERBUTTON_ACTION DD 07648efa3H
	DW	0dd9cH
	DW	04e3eH
	DB	0b5H
	DB	066H
	DB	050H
	DB	0f9H
	DB	029H
	DB	038H
	DB	062H
	DB	080H
CONST	ENDS
;	COMDAT GUID_SYSTEM_BUTTON_SUBGROUP
CONST	SEGMENT
GUID_SYSTEM_BUTTON_SUBGROUP DD 04f971e89H
	DW	0eebdH
	DW	04455H
	DB	0a8H
	DB	0deH
	DB	09eH
	DB	059H
	DB	04H
	DB	0eH
	DB	073H
	DB	047H
CONST	ENDS
;	COMDAT GUID_ENERGY_SAVER_POLICY
CONST	SEGMENT
GUID_ENERGY_SAVER_POLICY DD 05c5bb349H
	DW	0ad29H
	DW	04ee2H
	DB	09dH
	DB	0bH
	DB	02bH
	DB	025H
	DB	027H
	DB	0fH
	DB	07aH
	DB	081H
CONST	ENDS
;	COMDAT GUID_ENERGY_SAVER_BRIGHTNESS
CONST	SEGMENT
GUID_ENERGY_SAVER_BRIGHTNESS DD 013d09884H
	DW	0f74eH
	DW	0474aH
	DB	0a8H
	DB	052H
	DB	0b6H
	DB	0bdH
	DB	0e8H
	DB	0adH
	DB	03H
	DB	0a8H
CONST	ENDS
;	COMDAT GUID_ENERGY_SAVER_BATTERY_THRESHOLD
CONST	SEGMENT
GUID_ENERGY_SAVER_BATTERY_THRESHOLD DD 0e69653caH
	DW	0cf7fH
	DW	04f05H
	DB	0aaH
	DB	073H
	DB	0cbH
	DB	083H
	DB	03fH
	DB	0a9H
	DB	0aH
	DB	0d4H
CONST	ENDS
;	COMDAT GUID_ENERGY_SAVER_SUBGROUP
CONST	SEGMENT
GUID_ENERGY_SAVER_SUBGROUP DD 0de830923H
	DW	0a562H
	DW	041afH
	DB	0a0H
	DB	086H
	DB	0e3H
	DB	0a2H
	DB	0c6H
	DB	0baH
	DB	0d2H
	DB	0daH
CONST	ENDS
;	COMDAT GUID_POWER_SAVING_STATUS
CONST	SEGMENT
GUID_POWER_SAVING_STATUS DD 0e00958c0H
	DW	0c213H
	DW	04aceH
	DB	0acH
	DB	077H
	DB	0feH
	DB	0ccH
	DB	0edH
	DB	02eH
	DB	0eeH
	DB	0a5H
CONST	ENDS
;	COMDAT GUID_ALLOW_SYSTEM_REQUIRED
CONST	SEGMENT
GUID_ALLOW_SYSTEM_REQUIRED DD 0a4b195f5H
	DW	08225H
	DW	047d8H
	DB	080H
	DB	012H
	DB	09dH
	DB	041H
	DB	036H
	DB	097H
	DB	086H
	DB	0e2H
CONST	ENDS
;	COMDAT GUID_LEGACY_RTC_MITIGATION
CONST	SEGMENT
GUID_LEGACY_RTC_MITIGATION DD 01a34bdc3H
	DW	07e6bH
	DW	0442eH
	DB	0a9H
	DB	0d0H
	DB	064H
	DB	0b6H
	DB	0efH
	DB	037H
	DB	08eH
	DB	084H
CONST	ENDS
;	COMDAT GUID_ALLOW_RTC_WAKE
CONST	SEGMENT
GUID_ALLOW_RTC_WAKE DD 0bd3b718aH
	DW	0680H
	DW	04d9dH
	DB	08aH
	DB	0b2H
	DB	0e1H
	DB	0d2H
	DB	0b4H
	DB	0acH
	DB	080H
	DB	06dH
CONST	ENDS
;	COMDAT GUID_ALLOW_STANDBY_STATES
CONST	SEGMENT
GUID_ALLOW_STANDBY_STATES DD 0abfc2519H
	DW	03608H
	DW	04c2aH
	DB	094H
	DB	0eaH
	DB	017H
	DB	01bH
	DB	0eH
	DB	0d5H
	DB	046H
	DB	0abH
CONST	ENDS
;	COMDAT GUID_STANDBY_RESET_PERCENT
CONST	SEGMENT
GUID_STANDBY_RESET_PERCENT DD 049cb11a5H
	DW	056e2H
	DW	04afbH
	DB	09dH
	DB	038H
	DB	03dH
	DB	0f4H
	DB	078H
	DB	072H
	DB	0e2H
	DB	01bH
CONST	ENDS
;	COMDAT GUID_STANDBY_RESERVE_TIME
CONST	SEGMENT
GUID_STANDBY_RESERVE_TIME DD 0468fe7e5H
	DW	01158H
	DW	046ecH
	DB	088H
	DB	0bcH
	DB	05bH
	DB	096H
	DB	0c9H
	DB	0e4H
	DB	04fH
	DB	0d0H
CONST	ENDS
;	COMDAT GUID_STANDBY_RESERVE_GRACE_PERIOD
CONST	SEGMENT
GUID_STANDBY_RESERVE_GRACE_PERIOD DD 0c763ee92H
	DW	071e8H
	DW	04127H
	DB	084H
	DB	0ebH
	DB	0f6H
	DB	0edH
	DB	04H
	DB	03aH
	DB	03eH
	DB	03dH
CONST	ENDS
;	COMDAT GUID_STANDBY_BUDGET_PERCENT
CONST	SEGMENT
GUID_STANDBY_BUDGET_PERCENT DD 09fe527beH
	DW	01b70H
	DW	048daH
	DB	093H
	DB	0dH
	DB	07bH
	DB	0cfH
	DB	017H
	DB	0b4H
	DB	049H
	DB	090H
CONST	ENDS
;	COMDAT GUID_STANDBY_BUDGET_GRACE_PERIOD
CONST	SEGMENT
GUID_STANDBY_BUDGET_GRACE_PERIOD DD 060c07fe1H
	DW	0556H
	DW	045cfH
	DB	099H
	DB	03H
	DB	0d5H
	DB	06eH
	DB	032H
	DB	021H
	DB	02H
	DB	042H
CONST	ENDS
;	COMDAT GUID_USER_PRESENCE_PREDICTION
CONST	SEGMENT
GUID_USER_PRESENCE_PREDICTION DD 082011705H
	DW	0fb95H
	DW	04d46H
	DB	08dH
	DB	035H
	DB	040H
	DB	042H
	DB	0b1H
	DB	0d2H
	DB	0dH
	DB	0efH
CONST	ENDS
;	COMDAT GUID_ALLOW_AWAYMODE
CONST	SEGMENT
GUID_ALLOW_AWAYMODE DD 025dfa149H
	DW	05dd1H
	DW	04736H
	DB	0b5H
	DB	0abH
	DB	0e8H
	DB	0a3H
	DB	07bH
	DB	05bH
	DB	081H
	DB	087H
CONST	ENDS
;	COMDAT GUID_SYSTEM_AWAYMODE
CONST	SEGMENT
GUID_SYSTEM_AWAYMODE DD 098a7f580H
	DW	01f7H
	DW	048aaH
	DB	09cH
	DB	0fH
	DB	044H
	DB	035H
	DB	02cH
	DB	029H
	DB	0e5H
	DB	0c0H
CONST	ENDS
;	COMDAT GUID_CRITICAL_POWER_TRANSITION
CONST	SEGMENT
GUID_CRITICAL_POWER_TRANSITION DD 0b7a27025H
	DW	0e569H
	DW	046c2H
	DB	0a5H
	DB	04H
	DB	02bH
	DB	096H
	DB	0caH
	DB	0d2H
	DB	025H
	DB	0a1H
CONST	ENDS
;	COMDAT GUID_HIBERNATE_FASTS4_POLICY
CONST	SEGMENT
GUID_HIBERNATE_FASTS4_POLICY DD 094ac6d29H
	DW	073ceH
	DW	041a6H
	DB	080H
	DB	09fH
	DB	063H
	DB	063H
	DB	0baH
	DB	021H
	DB	0b4H
	DB	07eH
CONST	ENDS
;	COMDAT GUID_HIBERNATE_TIMEOUT
CONST	SEGMENT
GUID_HIBERNATE_TIMEOUT DD 09d7815a6H
	DW	07ee4H
	DW	0497eH
	DB	088H
	DB	088H
	DB	051H
	DB	05aH
	DB	05H
	DB	0f0H
	DB	023H
	DB	064H
CONST	ENDS
;	COMDAT GUID_UNATTEND_SLEEP_TIMEOUT
CONST	SEGMENT
GUID_UNATTEND_SLEEP_TIMEOUT DD 07bc4a2f9H
	DW	0d8fcH
	DW	04469H
	DB	0b0H
	DB	07bH
	DB	033H
	DB	0ebH
	DB	078H
	DB	05aH
	DB	0acH
	DB	0a0H
CONST	ENDS
;	COMDAT GUID_STANDBY_TIMEOUT
CONST	SEGMENT
GUID_STANDBY_TIMEOUT DD 029f6c1dbH
	DW	086daH
	DW	048c5H
	DB	09fH
	DB	0dbH
	DB	0f2H
	DB	0b6H
	DB	07bH
	DB	01fH
	DB	044H
	DB	0daH
CONST	ENDS
;	COMDAT GUID_SLEEP_IDLE_THRESHOLD
CONST	SEGMENT
GUID_SLEEP_IDLE_THRESHOLD DD 081cd32e0H
	DW	07833H
	DW	044f3H
	DB	087H
	DB	037H
	DB	070H
	DB	081H
	DB	0f3H
	DB	08dH
	DB	01fH
	DB	070H
CONST	ENDS
;	COMDAT GUID_SLEEP_SUBGROUP
CONST	SEGMENT
GUID_SLEEP_SUBGROUP DD 0238c9fa8H
	DW	0aadH
	DW	041edH
	DB	083H
	DB	0f4H
	DB	097H
	DB	0beH
	DB	024H
	DB	02cH
	DB	08fH
	DB	020H
CONST	ENDS
;	COMDAT GUID_DISK_ADAPTIVE_POWERDOWN
CONST	SEGMENT
GUID_DISK_ADAPTIVE_POWERDOWN DD 0396a32e1H
	DW	0499aH
	DW	040b2H
	DB	091H
	DB	024H
	DB	0a9H
	DB	06aH
	DB	0feH
	DB	070H
	DB	076H
	DB	067H
CONST	ENDS
;	COMDAT GUID_DISK_BURST_IGNORE_THRESHOLD
CONST	SEGMENT
GUID_DISK_BURST_IGNORE_THRESHOLD DD 080e3c60eH
	DW	0bb94H
	DW	04ad8H
	DB	0bbH
	DB	0e0H
	DB	0dH
	DB	031H
	DB	095H
	DB	0efH
	DB	0c6H
	DB	063H
CONST	ENDS
;	COMDAT GUID_DISK_IDLE_TIMEOUT
CONST	SEGMENT
GUID_DISK_IDLE_TIMEOUT DD 058e39ba8H
	DW	0b8e6H
	DW	04ef6H
	DB	090H
	DB	0d0H
	DB	089H
	DB	0aeH
	DB	032H
	DB	0b2H
	DB	058H
	DB	0d6H
CONST	ENDS
;	COMDAT GUID_DISK_POWERDOWN_TIMEOUT
CONST	SEGMENT
GUID_DISK_POWERDOWN_TIMEOUT DD 06738e2c4H
	DW	0e8a5H
	DW	04a42H
	DB	0b1H
	DB	06aH
	DB	0e0H
	DB	040H
	DB	0e7H
	DB	069H
	DB	075H
	DB	06eH
CONST	ENDS
;	COMDAT GUID_DISK_MAX_POWER
CONST	SEGMENT
GUID_DISK_MAX_POWER DD 051dea550H
	DW	0bb38H
	DW	04bc4H
	DB	099H
	DB	01bH
	DB	0eaH
	DB	0cfH
	DB	037H
	DB	0beH
	DB	05eH
	DB	0c8H
CONST	ENDS
;	COMDAT GUID_DISK_SUBGROUP
CONST	SEGMENT
GUID_DISK_SUBGROUP DD 012ee47H
	DW	09041H
	DW	04b5dH
	DB	09bH
	DB	077H
	DB	053H
	DB	05fH
	DB	0baH
	DB	08bH
	DB	014H
	DB	042H
CONST	ENDS
;	COMDAT IID_ID3D10EffectRenderTargetViewVariable
CONST	SEGMENT
IID_ID3D10EffectRenderTargetViewVariable DD 028ca0cc3H
	DW	0c2c9H
	DW	040bbH
	DB	0b5H
	DB	07fH
	DB	067H
	DB	0b7H
	DB	037H
	DB	012H
	DB	02bH
	DB	017H
CONST	ENDS
;	COMDAT GUID_ADAPTIVE_INPUT_CONTROLLER_STATE
CONST	SEGMENT
GUID_ADAPTIVE_INPUT_CONTROLLER_STATE DD 0e98fae9H
	DW	0f45aH
	DW	04de1H
	DB	0a7H
	DB	057H
	DB	060H
	DB	031H
	DB	0f1H
	DB	097H
	DB	0f6H
	DB	0eaH
CONST	ENDS
;	COMDAT GUID_NON_ADAPTIVE_INPUT_TIMEOUT
CONST	SEGMENT
GUID_NON_ADAPTIVE_INPUT_TIMEOUT DD 05adbbfbcH
	DW	074eH
	DW	04da1H
	DB	0baH
	DB	038H
	DB	0dbH
	DB	08bH
	DB	036H
	DB	0b2H
	DB	0c8H
	DB	0f3H
CONST	ENDS
;	COMDAT GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP
CONST	SEGMENT
GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP DD 08619b916H
	DW	0e004H
	DW	04dd8H
	DB	09bH
	DB	066H
	DB	0daH
	DB	0e8H
	DB	06fH
	DB	080H
	DB	066H
	DB	098H
CONST	ENDS
;	COMDAT GUID_ADVANCED_COLOR_QUALITY_BIAS
CONST	SEGMENT
GUID_ADVANCED_COLOR_QUALITY_BIAS DD 0684c3e69H
	DW	0a4f7H
	DW	04014H
	DB	087H
	DB	054H
	DB	0d4H
	DB	051H
	DB	079H
	DB	0a5H
	DB	061H
	DB	067H
CONST	ENDS
;	COMDAT GUID_VIDEO_CONSOLE_LOCK_TIMEOUT
CONST	SEGMENT
GUID_VIDEO_CONSOLE_LOCK_TIMEOUT DD 08ec4b3a5H
	DW	06868H
	DW	048c2H
	DB	0beH
	DB	075H
	DB	04fH
	DB	030H
	DB	044H
	DB	0beH
	DB	088H
	DB	0a7H
CONST	ENDS
;	COMDAT GUID_ALLOW_DISPLAY_REQUIRED
CONST	SEGMENT
GUID_ALLOW_DISPLAY_REQUIRED DD 0a9ceb8daH
	DW	0cd46H
	DW	044fbH
	DB	0a9H
	DB	08bH
	DB	02H
	DB	0afH
	DB	069H
	DB	0deH
	DB	046H
	DB	023H
CONST	ENDS
;	COMDAT GUID_CONSOLE_DISPLAY_STATE
CONST	SEGMENT
GUID_CONSOLE_DISPLAY_STATE DD 06fe69556H
	DW	0704aH
	DW	047a0H
	DB	08fH
	DB	024H
	DB	0c2H
	DB	08dH
	DB	093H
	DB	06fH
	DB	0daH
	DB	047H
CONST	ENDS
;	COMDAT GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS
CONST	SEGMENT
GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS DD 0fbd9aa66H
	DW	09553H
	DW	04097H
	DB	0baH
	DB	044H
	DB	0edH
	DB	06eH
	DB	09dH
	DB	065H
	DB	0eaH
	DB	0b8H
CONST	ENDS
;	COMDAT GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS
CONST	SEGMENT
GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS DD 08ffee2c6H
	DW	02d01H
	DW	046beH
	DB	0adH
	DB	0b9H
	DB	039H
	DB	08aH
	DB	0ddH
	DB	0c5H
	DB	0b4H
	DB	0ffH
CONST	ENDS
;	COMDAT GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS
CONST	SEGMENT
GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS DD 0f1fbfde2H
	DW	0a960H
	DW	04165H
	DB	09fH
	DB	088H
	DB	050H
	DB	066H
	DB	079H
	DB	011H
	DB	0ceH
	DB	096H
CONST	ENDS
;	COMDAT GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS
CONST	SEGMENT
GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS DD 0aded5e82H
	DW	0b909H
	DW	04619H
	DB	099H
	DB	049H
	DB	0f5H
	DB	0d7H
	DB	01dH
	DB	0acH
	DB	0bH
	DB	0cbH
CONST	ENDS
;	COMDAT GUID_MONITOR_POWER_ON
CONST	SEGMENT
GUID_MONITOR_POWER_ON DD 02731015H
	DW	04510H
	DW	04526H
	DB	099H
	DB	0e6H
	DB	0e5H
	DB	0a1H
	DB	07eH
	DB	0bdH
	DB	01aH
	DB	0eaH
CONST	ENDS
;	COMDAT GUID_VIDEO_ADAPTIVE_POWERDOWN
CONST	SEGMENT
GUID_VIDEO_ADAPTIVE_POWERDOWN DD 090959d22H
	DW	0d6a1H
	DW	049b9H
	DB	0afH
	DB	093H
	DB	0bcH
	DB	0e8H
	DB	085H
	DB	0adH
	DB	033H
	DB	05bH
CONST	ENDS
;	COMDAT GUID_VIDEO_DIM_TIMEOUT
CONST	SEGMENT
GUID_VIDEO_DIM_TIMEOUT DD 017aaa29bH
	DW	08b43H
	DW	04b94H
	DB	0aaH
	DB	0feH
	DB	035H
	DB	0f6H
	DB	04dH
	DB	0aaH
	DB	0f1H
	DB	0eeH
CONST	ENDS
;	COMDAT GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE
CONST	SEGMENT
GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE DD 0eed904dfH
	DW	0b142H
	DW	04183H
	DB	0b1H
	DB	0bH
	DB	05aH
	DB	011H
	DB	097H
	DB	0a3H
	DB	078H
	DB	064H
CONST	ENDS
;	COMDAT GUID_VIDEO_ANNOYANCE_TIMEOUT
CONST	SEGMENT
GUID_VIDEO_ANNOYANCE_TIMEOUT DD 082dbcf2dH
	DW	0cd67H
	DW	040c5H
	DB	0bfH
	DB	0dcH
	DB	09fH
	DB	01aH
	DB	05cH
	DB	0cdH
	DB	046H
	DB	063H
CONST	ENDS
;	COMDAT GUID_VIDEO_POWERDOWN_TIMEOUT
CONST	SEGMENT
GUID_VIDEO_POWERDOWN_TIMEOUT DD 03c0bc021H
	DW	0c8a8H
	DW	04e07H
	DB	0a9H
	DB	073H
	DB	06bH
	DB	014H
	DB	0cbH
	DB	0cbH
	DB	02bH
	DB	07eH
CONST	ENDS
;	COMDAT GUID_VIDEO_SUBGROUP
CONST	SEGMENT
GUID_VIDEO_SUBGROUP DD 07516b95fH
	DW	0f776H
	DW	04464H
	DB	08cH
	DB	053H
	DB	06H
	DB	016H
	DB	07fH
	DB	040H
	DB	0ccH
	DB	099H
CONST	ENDS
;	COMDAT GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT
CONST	SEGMENT
GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT DD 03166bc41H
	DW	07e98H
	DW	04e03H
	DB	0b3H
	DB	04eH
	DB	0ecH
	DB	0fH
	DB	05fH
	DB	02bH
	DB	021H
	DB	08eH
CONST	ENDS
;	COMDAT GUID_DISK_COALESCING_POWERDOWN_TIMEOUT
CONST	SEGMENT
GUID_DISK_COALESCING_POWERDOWN_TIMEOUT DD 0c36f0eb4H
	DW	02988H
	DW	04a70H
	DB	08eH
	DB	0eeH
	DB	08H
	DB	084H
	DB	0fcH
	DB	02cH
	DB	024H
	DB	033H
CONST	ENDS
;	COMDAT GUID_DEEP_SLEEP_PLATFORM_STATE
CONST	SEGMENT
GUID_DEEP_SLEEP_PLATFORM_STATE DD 0d23f2fb8H
	DW	09536H
	DW	04038H
	DB	09cH
	DB	094H
	DB	01cH
	DB	0e0H
	DB	02eH
	DB	05cH
	DB	021H
	DB	052H
CONST	ENDS
;	COMDAT GUID_DEEP_SLEEP_ENABLED
CONST	SEGMENT
GUID_DEEP_SLEEP_ENABLED DD 0d502f7eeH
	DW	01dc7H
	DW	04efdH
	DB	0a5H
	DB	05dH
	DB	0f0H
	DB	04bH
	DB	06fH
	DB	05cH
	DB	05H
	DB	045H
CONST	ENDS
;	COMDAT GUID_IDLE_RESILIENCY_PERIOD
CONST	SEGMENT
GUID_IDLE_RESILIENCY_PERIOD DD 0c42b79aaH
	DW	0aa3aH
	DW	0484bH
	DB	0a9H
	DB	08fH
	DB	02cH
	DB	0f3H
	DB	02aH
	DB	0a9H
	DB	0aH
	DB	028H
CONST	ENDS
;	COMDAT GUID_IDLE_RESILIENCY_SUBGROUP
CONST	SEGMENT
GUID_IDLE_RESILIENCY_SUBGROUP DD 02e601130H
	DW	05351H
	DW	04d9dH
	DB	08eH
	DB	04H
	DB	025H
	DB	029H
	DB	066H
	DB	0baH
	DB	0d0H
	DB	054H
CONST	ENDS
;	COMDAT GUID_ACTIVE_POWERSCHEME
CONST	SEGMENT
GUID_ACTIVE_POWERSCHEME DD 031f9f286H
	DW	05084H
	DW	042feH
	DB	0b7H
	DB	020H
	DB	02bH
	DB	02H
	DB	064H
	DB	099H
	DB	037H
	DB	063H
CONST	ENDS
;	COMDAT GUID_POWERSCHEME_PERSONALITY
CONST	SEGMENT
GUID_POWERSCHEME_PERSONALITY DD 0245d8541H
	DW	03943H
	DW	04422H
	DB	0b0H
	DB	025H
	DB	013H
	DB	0a7H
	DB	084H
	DB	0f6H
	DB	079H
	DB	0b7H
CONST	ENDS
;	COMDAT ALL_POWERSCHEMES_GUID
CONST	SEGMENT
ALL_POWERSCHEMES_GUID DD 068a1e95eH
	DW	013eaH
	DW	041e1H
	DB	080H
	DB	011H
	DB	0cH
	DB	049H
	DB	06cH
	DB	0a4H
	DB	090H
	DB	0b0H
CONST	ENDS
;	COMDAT NO_SUBGROUP_GUID
CONST	SEGMENT
NO_SUBGROUP_GUID DD 0fea3413eH
	DW	07e05H
	DW	04911H
	DB	09aH
	DB	071H
	DB	070H
	DB	03H
	DB	031H
	DB	0f1H
	DB	0c2H
	DB	094H
CONST	ENDS
;	COMDAT GUID_TYPICAL_POWER_SAVINGS
CONST	SEGMENT
GUID_TYPICAL_POWER_SAVINGS DD 0381b4222H
	DW	0f694H
	DW	041f0H
	DB	096H
	DB	085H
	DB	0ffH
	DB	05bH
	DB	0b2H
	DB	060H
	DB	0dfH
	DB	02eH
CONST	ENDS
;	COMDAT GUID_MIN_POWER_SAVINGS
CONST	SEGMENT
GUID_MIN_POWER_SAVINGS DD 08c5e7fdaH
	DW	0e8bfH
	DW	04a96H
	DB	09aH
	DB	085H
	DB	0a6H
	DB	0e2H
	DB	03aH
	DB	08cH
	DB	063H
	DB	05cH
CONST	ENDS
;	COMDAT GUID_MAX_POWER_SAVINGS
CONST	SEGMENT
GUID_MAX_POWER_SAVINGS DD 0a1841308H
	DW	03541H
	DW	04fabH
	DB	0bcH
	DB	081H
	DB	0f7H
	DB	015H
	DB	056H
	DB	0f2H
	DB	0bH
	DB	04aH
CONST	ENDS
;	COMDAT IID_ID3D11Predicate
CONST	SEGMENT
IID_ID3D11Predicate DD 09eb576ddH
	DW	09f77H
	DW	04d86H
	DB	081H
	DB	0aaH
	DB	08bH
	DB	0abH
	DB	05fH
	DB	0e4H
	DB	090H
	DB	0e2H
CONST	ENDS
;	COMDAT IID_ID3D11Query
CONST	SEGMENT
IID_ID3D11Query DD 0d6c00747H
	DW	087b7H
	DW	0425eH
	DB	0b8H
	DB	04dH
	DB	044H
	DB	0d1H
	DB	08H
	DB	056H
	DB	0aH
	DB	0fdH
CONST	ENDS
;	COMDAT IID_ID3D10EffectShaderResourceVariable
CONST	SEGMENT
IID_ID3D10EffectShaderResourceVariable DD 0c0a7157bH
	DW	0d872H
	DW	04b1dH
	DB	080H
	DB	073H
	DB	0efH
	DB	0c2H
	DB	0acH
	DB	0d4H
	DB	0b1H
	DB	0fcH
CONST	ENDS
;	COMDAT IID_ID3D11Asynchronous
CONST	SEGMENT
IID_ID3D11Asynchronous DD 04b35d0cdH
	DW	01e15H
	DW	04258H
	DB	09cH
	DB	098H
	DB	01bH
	DB	013H
	DB	033H
	DB	0f6H
	DB	0ddH
	DB	03bH
CONST	ENDS
;	COMDAT IID_ID3D10EffectStringVariable
CONST	SEGMENT
IID_ID3D10EffectStringVariable DD 071417501H
	DW	08df9H
	DW	04e0aH
	DB	0a7H
	DB	08aH
	DB	025H
	DB	05fH
	DB	097H
	DB	056H
	DB	0baH
	DB	0ffH
CONST	ENDS
;	COMDAT IID_ID3D11SamplerState
CONST	SEGMENT
IID_ID3D11SamplerState DD 0da6fea51H
	DW	0564cH
	DW	04487H
	DB	098H
	DB	010H
	DB	0f0H
	DB	0d0H
	DB	0f9H
	DB	0b4H
	DB	0e3H
	DB	0a5H
CONST	ENDS
;	COMDAT IID_ID3D10EffectMatrixVariable
CONST	SEGMENT
IID_ID3D10EffectMatrixVariable DD 050666c24H
	DW	0b82fH
	DW	04eedH
	DB	0a1H
	DB	072H
	DB	05bH
	DB	06eH
	DB	07eH
	DB	085H
	DB	022H
	DB	0e0H
CONST	ENDS
;	COMDAT IID_ID3D11InputLayout
CONST	SEGMENT
IID_ID3D11InputLayout DD 0e4819ddcH
	DW	04cf0H
	DW	04025H
	DB	0bdH
	DB	026H
	DB	05dH
	DB	0e8H
	DB	02aH
	DB	03eH
	DB	07H
	DB	0b7H
CONST	ENDS
;	COMDAT IID_ID3D10EffectVectorVariable
CONST	SEGMENT
IID_ID3D10EffectVectorVariable DD 062b98c44H
	DW	01f82H
	DW	04c67H
	DB	0bcH
	DB	0d0H
	DB	072H
	DB	0cfH
	DB	08fH
	DB	021H
	DB	07eH
	DB	081H
CONST	ENDS
;	COMDAT IID_ID3D11ComputeShader
CONST	SEGMENT
IID_ID3D11ComputeShader DD 04f5b196eH
	DW	0c2bdH
	DW	0495eH
	DB	0bdH
	DB	01H
	DB	01fH
	DB	0deH
	DB	0d3H
	DB	08eH
	DB	049H
	DB	069H
CONST	ENDS
;	COMDAT IID_ID3D11PixelShader
CONST	SEGMENT
IID_ID3D11PixelShader DD 0ea82e40dH
	DW	051dcH
	DW	04f33H
	DB	093H
	DB	0d4H
	DB	0dbH
	DB	07cH
	DB	091H
	DB	025H
	DB	0aeH
	DB	08cH
CONST	ENDS
;	COMDAT IID_ID3D11GeometryShader
CONST	SEGMENT
IID_ID3D11GeometryShader DD 038325b96H
	DW	0effbH
	DW	04022H
	DB	0baH
	DB	02H
	DB	02eH
	DB	079H
	DB	05bH
	DB	070H
	DB	027H
	DB	05cH
CONST	ENDS
;	COMDAT IID_ID3D11DomainShader
CONST	SEGMENT
IID_ID3D11DomainShader DD 0f582c508H
	DW	0f36H
	DW	0490cH
	DB	099H
	DB	077H
	DB	031H
	DB	0eeH
	DB	0ceH
	DB	026H
	DB	08cH
	DB	0faH
CONST	ENDS
;	COMDAT IID_ID3D11HullShader
CONST	SEGMENT
IID_ID3D11HullShader DD 08e5c6061H
	DW	0628aH
	DW	04c8eH
	DB	082H
	DB	064H
	DB	0bbH
	DB	0e4H
	DB	05cH
	DB	0b3H
	DB	0d5H
	DB	0ddH
CONST	ENDS
;	COMDAT IID_ID3D11VertexShader
CONST	SEGMENT
IID_ID3D11VertexShader DD 03b301d64H
	DW	0d678H
	DW	04289H
	DB	088H
	DB	097H
	DB	022H
	DB	0f8H
	DB	092H
	DB	08bH
	DB	072H
	DB	0f3H
CONST	ENDS
;	COMDAT IID_ID3D11UnorderedAccessView
CONST	SEGMENT
IID_ID3D11UnorderedAccessView DD 028acf509H
	DW	07f5cH
	DW	048f6H
	DB	086H
	DB	011H
	DB	0f3H
	DB	016H
	DB	01H
	DB	0aH
	DB	063H
	DB	080H
CONST	ENDS
;	COMDAT IID_ID3D10EffectScalarVariable
CONST	SEGMENT
IID_ID3D10EffectScalarVariable DD 0e48f7bH
	DW	0d2c8H
	DW	049e8H
	DB	0a8H
	DB	06cH
	DB	02H
	DB	02dH
	DB	0eeH
	DB	053H
	DB	043H
	DB	01fH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_SMARTCARD_READER
CONST	SEGMENT
GUID_DEVINTERFACE_SMARTCARD_READER DD 050dd5230H
	DW	0ba8aH
	DW	011d1H
	DB	0bfH
	DB	05dH
	DB	00H
	DB	00H
	DB	0f8H
	DB	05H
	DB	0f5H
	DB	030H
CONST	ENDS
;	COMDAT IID_ID3D10EffectVariable
CONST	SEGMENT
IID_ID3D10EffectVariable DD 0ae897105H
	DW	0e6H
	DW	045bfH
	DB	0bbH
	DB	08eH
	DB	028H
	DB	01dH
	DB	0d6H
	DB	0dbH
	DB	08eH
	DB	01bH
CONST	ENDS
;	COMDAT IID_ID3D10EffectType
CONST	SEGMENT
IID_ID3D10EffectType DD 04e9e1ddcH
	DW	0cd9dH
	DW	04772H
	DB	0a8H
	DB	037H
	DB	00H
	DB	018H
	DB	0bH
	DB	09bH
	DB	088H
	DB	0fdH
CONST	ENDS
;	COMDAT IID_ID3D11DepthStencilView
CONST	SEGMENT
IID_ID3D11DepthStencilView DD 09fdac92aH
	DW	01876H
	DW	048c3H
	DB	0afH
	DB	0adH
	DB	025H
	DB	0b9H
	DB	04fH
	DB	084H
	DB	0a9H
	DB	0b6H
CONST	ENDS
;	COMDAT IID_ID3D10StateBlock
CONST	SEGMENT
IID_ID3D10StateBlock DD 0803425aH
	DW	057f5H
	DW	04dd6H
	DB	094H
	DB	065H
	DB	0a8H
	DB	075H
	DB	070H
	DB	083H
	DB	04aH
	DB	08H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderReflection
CONST	SEGMENT
IID_ID3D10ShaderReflection DD 0d40e20b6H
	DW	0f8f7H
	DW	042adH
	DB	0abH
	DB	020H
	DB	04bH
	DB	0afH
	DB	08fH
	DB	015H
	DB	0dfH
	DB	0aaH
CONST	ENDS
;	COMDAT IID_ID3D10ShaderReflectionConstantBuffer
CONST	SEGMENT
IID_ID3D10ShaderReflectionConstantBuffer DD 066c66a94H
	DW	0ddddH
	DW	04b62H
	DB	0a6H
	DB	06aH
	DB	0f0H
	DB	0daH
	DB	033H
	DB	0c2H
	DB	0b4H
	DB	0d0H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderReflectionVariable
CONST	SEGMENT
IID_ID3D10ShaderReflectionVariable DD 01bf63c95H
	DW	02650H
	DW	0405dH
	DB	099H
	DB	0c1H
	DB	036H
	DB	036H
	DB	0bdH
	DB	01dH
	DB	0a0H
	DB	0a1H
CONST	ENDS
;	COMDAT IID_ID3D10ShaderReflectionType
CONST	SEGMENT
IID_ID3D10ShaderReflectionType DD 0c530ad7dH
	DW	09b16H
	DW	04395H
	DB	0a9H
	DB	079H
	DB	0baH
	DB	02eH
	DB	0cfH
	DB	0f8H
	DB	03aH
	DB	0ddH
CONST	ENDS
;	COMDAT IID_ID3D11RenderTargetView
CONST	SEGMENT
IID_ID3D11RenderTargetView DD 0dfdba067H
	DW	0b8dH
	DW	04865H
	DB	087H
	DB	05bH
	DB	0d7H
	DB	0b4H
	DB	051H
	DB	06cH
	DB	0c1H
	DB	064H
CONST	ENDS
;	COMDAT GUID_DeviceType
CONST	SEGMENT
GUID_DeviceType DD 0d722fb4dH
	DW	07a68H
	DW	0437aH
	DB	0b2H
	DB	0cH
	DB	058H
	DB	04H
	DB	0eeH
	DB	024H
	DB	094H
	DB	0a6H
CONST	ENDS
;	COMDAT IID_ID3D10InfoQueue
CONST	SEGMENT
IID_ID3D10InfoQueue DD 01b940b17H
	DW	02642H
	DW	04d1fH
	DB	0abH
	DB	01fH
	DB	0b9H
	DB	09bH
	DB	0adH
	DB	0cH
	DB	039H
	DB	05fH
CONST	ENDS
;	COMDAT IID_ID3D11ShaderResourceView
CONST	SEGMENT
IID_ID3D11ShaderResourceView DD 0b0e06fe0H
	DW	08192H
	DW	04e1aH
	DB	0b1H
	DB	0caH
	DB	036H
	DB	0d7H
	DB	041H
	DB	047H
	DB	010H
	DB	0b2H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
CONST	SEGMENT
GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR DD 04d36e978H
	DW	0e325H
	DW	011ceH
	DB	0bfH
	DB	0c1H
	DB	08H
	DB	00H
	DB	02bH
	DB	0e1H
	DB	03H
	DB	018H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_COMPORT
CONST	SEGMENT
GUID_DEVINTERFACE_COMPORT DD 086e0d1e0H
	DW	08089H
	DW	011d0H
	DB	09cH
	DB	0e4H
	DB	08H
	DB	00H
	DB	03eH
	DB	030H
	DB	01fH
	DB	073H
CONST	ENDS
;	COMDAT GUID_SCM_PD_PASSTHROUGH_INVDIMM
CONST	SEGMENT
GUID_SCM_PD_PASSTHROUGH_INVDIMM DD 04309ac30H
	DW	0d11H
	DW	011e4H
	DB	091H
	DB	091H
	DB	08H
	DB	00H
	DB	020H
	DB	0cH
	DB	09aH
	DB	066H
CONST	ENDS
;	COMDAT GUID_SCM_PD_HEALTH_NOTIFICATION
CONST	SEGMENT
GUID_SCM_PD_HEALTH_NOTIFICATION DD 09da2d386H
	DW	072f5H
	DW	04ee3H
	DB	081H
	DB	055H
	DB	0ecH
	DB	0a0H
	DB	067H
	DB	08eH
	DB	03bH
	DB	06H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE
CONST	SEGMENT
GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE DD 04283609dH
	DW	04dc2H
	DW	043beH
	DB	0bbH
	DB	0b4H
	DB	04fH
	DB	015H
	DB	0dfH
	DB	0ceH
	DB	02cH
	DB	061H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB
CONST	SEGMENT
GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB DD 027447c21H
	DW	0bcc3H
	DW	04d07H
	DB	0a0H
	DB	05bH
	DB	0a3H
	DB	039H
	DB	05bH
	DB	0b4H
	DB	0eeH
	DB	0e7H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_HIDDEN_VOLUME
CONST	SEGMENT
GUID_DEVINTERFACE_HIDDEN_VOLUME DD 07f108a28H
	DW	09833H
	DW	04b3bH
	DB	0b7H
	DB	080H
	DB	02cH
	DB	06bH
	DB	05fH
	DB	0a5H
	DB	0c0H
	DB	062H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_SERVICE_VOLUME
CONST	SEGMENT
GUID_DEVINTERFACE_SERVICE_VOLUME DD 06ead3d82H
	DW	025ecH
	DW	046bcH
	DB	0b7H
	DB	0fdH
	DB	0c1H
	DB	0f0H
	DB	0dfH
	DB	08fH
	DB	050H
	DB	037H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_SES
CONST	SEGMENT
GUID_DEVINTERFACE_SES DD 01790c9ecH
	DW	047d5H
	DW	04df3H
	DB	0b5H
	DB	0afH
	DB	09aH
	DB	0dfH
	DB	03cH
	DB	0f2H
	DB	03eH
	DB	048H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_VMLUN
CONST	SEGMENT
GUID_DEVINTERFACE_VMLUN DD 06f416619H
	DW	09f29H
	DW	042a5H
	DB	0b2H
	DB	0bH
	DB	037H
	DB	0e2H
	DB	019H
	DB	0caH
	DB	02H
	DB	0b0H
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_STORAGEPORT
CONST	SEGMENT
GUID_DEVINTERFACE_STORAGEPORT DD 02accfe60H
	DW	0c130H
	DW	011d2H
	DB	0b0H
	DB	082H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_CDCHANGER
CONST	SEGMENT
GUID_DEVINTERFACE_CDCHANGER DD 053f56312H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_FLOPPY
CONST	SEGMENT
GUID_DEVINTERFACE_FLOPPY DD 053f56311H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_MEDIUMCHANGER
CONST	SEGMENT
GUID_DEVINTERFACE_MEDIUMCHANGER DD 053f56310H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_VOLUME
CONST	SEGMENT
GUID_DEVINTERFACE_VOLUME DD 053f5630dH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_WRITEONCEDISK
CONST	SEGMENT
GUID_DEVINTERFACE_WRITEONCEDISK DD 053f5630cH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_TAPE
CONST	SEGMENT
GUID_DEVINTERFACE_TAPE DD 053f5630bH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_PARTITION
CONST	SEGMENT
GUID_DEVINTERFACE_PARTITION DD 053f5630aH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_CDROM
CONST	SEGMENT
GUID_DEVINTERFACE_CDROM DD 053f56308H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT GUID_DEVINTERFACE_DISK
CONST	SEGMENT
GUID_DEVINTERFACE_DISK DD 053f56307H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT IID_ID3D11View
CONST	SEGMENT
IID_ID3D11View DD 0839d1216H
	DW	0bb2eH
	DW	0412bH
	DB	0b7H
	DB	0f4H
	DB	0a9H
	DB	0dbH
	DB	0ebH
	DB	0e0H
	DB	08eH
	DB	0d1H
CONST	ENDS
;	COMDAT IID_ID3D11Texture3D
CONST	SEGMENT
IID_ID3D11Texture3D DD 037e866eH
	DW	0f56dH
	DW	04357H
	DB	0a8H
	DB	0afH
	DB	09dH
	DB	0abH
	DB	0beH
	DB	06eH
	DB	025H
	DB	0eH
CONST	ENDS
;	COMDAT IID_ID3D11Texture2D
CONST	SEGMENT
IID_ID3D11Texture2D DD 06f15aaf2H
	DW	0d208H
	DW	04e89H
	DB	09aH
	DB	0b4H
	DB	048H
	DB	095H
	DB	035H
	DB	0d3H
	DB	04fH
	DB	09cH
CONST	ENDS
PUBLIC	?getGraphicsDeviceInfo@@YA_NPEAI00@Z		; getGraphicsDeviceInfo
PUBLIC	?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z ; getDefaultFidelityPresets
PUBLIC	?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z ; getIntelDeviceInfo
PUBLIC	?getVideoMemory@@YA_NPEAI@Z			; getVideoMemory
PUBLIC	?checkDxExtensionVersion@@YAIXZ			; checkDxExtensionVersion
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsscanf_s_l
PUBLIC	vsscanf_s
PUBLIC	sscanf_s
PUBLIC	?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z ; getDXGIAdapterDesc
PUBLIC	?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z ; ID3D10::GetExtensionCaps
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	__imp_strtok_s:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_CoUninitialize:PROC
EXTRN	__imp_CoSetProxyBlanket:PROC
EXTRN	__imp_CoCreateInstance:PROC
EXTRN	__imp_CoInitialize:PROC
EXTRN	__imp_SysAllocString:PROC
EXTRN	__imp_SysFreeString:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen_s:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fgets:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	IID_IWbemLocator:BYTE
EXTRN	CLSID_WbemLocator:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
pdata	SEGMENT
$pdata$?getGraphicsDeviceInfo@@YA_NPEAI00@Z DD imagerel $LN7
	DD	imagerel $LN7+246
	DD	imagerel $unwind$?getGraphicsDeviceInfo@@YA_NPEAI00@Z
$pdata$?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z DD imagerel $LN29
	DD	imagerel $LN29+854
	DD	imagerel $unwind$?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z
$pdata$?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z DD imagerel $LN42
	DD	imagerel $LN42+2442
	DD	imagerel $unwind$?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z
$pdata$?getVideoMemory@@YA_NPEAI@Z DD imagerel $LN9
	DD	imagerel $LN9+653
	DD	imagerel $unwind$?getVideoMemory@@YA_NPEAI@Z
$pdata$?checkDxExtensionVersion@@YAIXZ DD imagerel $LN8
	DD	imagerel $LN8+414
	DD	imagerel $unwind$?checkDxExtensionVersion@@YAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_scanf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_scanf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_s_l DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$_vsscanf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsscanf_s DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$vsscanf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf_s DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$sscanf_s
pdata	ENDS
pdata	SEGMENT
$pdata$?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z DD imagerel $LN12
	DD	imagerel $LN12+418
	DD	imagerel $unwind$?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z DD imagerel $LN7
	DD	imagerel $LN7+407
	DD	imagerel $unwind$?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT _GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
CONST	SEGMENT
_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369 DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z DD 033b19H
	DD	0160112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$0 DB 064H ; ID3D10::GetExtensionCaps
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+3
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$1 DB 069H ; ID3D10::GetExtensionCaps
	DB	06eH
	DB	069H
	DB	074H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+7
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$2 DB 070H ; ID3D10::GetExtensionCaps
	DB	042H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcVarDesc DD 088H ; ID3D10::GetExtensionCaps
	DD	08H
	DQ	FLAT:?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcName$0
	ORG $+144
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcFrameData DD 03H ; ID3D10::GetExtensionCaps
	DD	00H
	DQ	FLAT:?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf_s DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sscanf_s$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sscanf_s$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sscanf_s$rtcName$0
	ORG $+48
sscanf_s$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sscanf_s$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsscanf_s DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_s_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_scanf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
xdata	SEGMENT
$unwind$?getGraphicsDeviceInfo@@YA_NPEAI00@Z DD 034019H
	DD	0320117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z DD 033819H
	DD	0360110H
	DD	07009H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z DD 033e19H
	DD	0560116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	02a8H
$unwind$?getVideoMemory@@YA_NPEAI@Z DD 032401H
	DD	026010dH
	DD	07006H
$unwind$?checkDxExtensionVersion@@YAIXZ DD 032a19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z DD 032801H
	DD	0120111H
	DD	0700aH
xdata	ENDS
CONST	SEGMENT
	ORG $+6
?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcName$0 DB 041H	; getGraphicsDeviceInfo
	DB	064H
	DB	061H
	DB	070H
	DB	074H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$0 DB 066H ; getDefaultFidelityPresets
	DB	070H
	DB	00H
	ORG $+1
?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcFrameData DD 01H ; getGraphicsDeviceInfo
	DD	00H
	DQ	FLAT:?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcVarDesc
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$1 DB 06cH ; getDefaultFidelityPresets
	DB	069H
	DB	06eH
	DB	065H
	DB	00H
	ORG $+3
?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcVarDesc DD 040H	; getGraphicsDeviceInfo
	DD	0130H
	DQ	FLAT:?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcName$0
	ORG $+48
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$2 DB 063H ; getDefaultFidelityPresets
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$3 DB 076H ; getDefaultFidelityPresets
	DB	049H
	DB	064H
	DB	00H
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$4 DB 064H ; getDefaultFidelityPresets
	DB	049H
	DB	064H
	DB	00H
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$5 DB 073H ; getDefaultFidelityPresets
	DB	00H
	ORG $+6
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcFrameData DD 06H ; getDefaultFidelityPresets
	DD	00H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcVarDesc
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$0 DB 070H ; getIntelDeviceInfo
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	00H
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcVarDesc DD 0168H ; getDefaultFidelityPresets
	DD	0aH
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$5
	DD	0144H
	DD	04H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$4
	DD	0124H
	DD	04H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$3
	DD	0e8H
	DD	08H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$2
	DD	060H
	DD	064H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcName$0
	ORG $+288
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$1 DB 070H ; getIntelDeviceInfo
	DB	049H
	DB	06dH
	DB	06dH
	DB	065H
	DB	064H
	DB	069H
	DB	061H
	DB	074H
	DB	065H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+2
?getVideoMemory@@YA_NPEAI@Z$rtcName$3 DB 070H		; getVideoMemory
	DB	056H
	DB	069H
	DB	064H
	DB	065H
	DB	06fH
	DB	00H
	ORG $+1
?getVideoMemory@@YA_NPEAI@Z$rtcName$5 DB 076H		; getVideoMemory
	DB	00H
	ORG $+2
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$2 DB 066H ; getIntelDeviceInfo
	DB	065H
	DB	061H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	04cH
	DB	065H
	DB	076H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+3
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$3 DB 063H ; getIntelDeviceInfo
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	049H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+4
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$4 DB 070H ; getIntelDeviceInfo
	DB	049H
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	043H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	00H
	ORG $+6
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$5 DB 075H ; getIntelDeviceInfo
	DB	069H
	DB	053H
	DB	06cH
	DB	06fH
	DB	074H
	DB	073H
	DB	052H
	DB	065H
	DB	071H
	DB	075H
	DB	069H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$6 DB 075H ; getIntelDeviceInfo
	DB	069H
	DB	04eH
	DB	061H
	DB	06dH
	DB	065H
	DB	04cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+3
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$7 DB 075H ; getIntelDeviceInfo
	DB	069H
	DB	055H
	DB	06eH
	DB	069H
	DB	074H
	DB	073H
	DB	04cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+2
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$8 DB 075H ; getIntelDeviceInfo
	DB	069H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	04cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+3
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$9 DB 063H ; getIntelDeviceInfo
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	073H
	DB	063H
	DB	072H
	DB	069H
	DB	070H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+5
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$10 DB 063H ; getIntelDeviceInfo
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	054H
	DB	079H
	DB	070H
	DB	065H
	DB	00H
	ORG $+4
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$11 DB 049H ; getIntelDeviceInfo
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	043H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	04dH
	DB	061H
	DB	06aH
	DB	06fH
	DB	072H
	DB	056H
	DB	065H
	DB	072H
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+3
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$14 DB 070H ; getIntelDeviceInfo
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$12 DB 049H ; getIntelDeviceInfo
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	043H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	053H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$13 DB 070H ; getIntelDeviceInfo
	DB	049H
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	043H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcVarDesc DD 0258H ; getIntelDeviceInfo
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$14
	DD	0238H
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$13
	DD	0214H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$12
	DD	01f4H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$11
	DD	01c4H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$10
	DD	01a8H
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$9
	DD	0164H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$8
	DD	0144H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$7
	DD	0124H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$6
	DD	0104H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$5
	DD	0e8H
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$4
	DD	0b8H
	DD	0cH
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcName$0
	ORG $+720
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcFrameData DD 0fH ; getIntelDeviceInfo
	DD	00H
	DQ	FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcVarDesc
?getVideoMemory@@YA_NPEAI@Z$rtcName$0 DB 070H		; getVideoMemory
	DB	04cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+7
?getVideoMemory@@YA_NPEAI@Z$rtcName$1 DB 070H		; getVideoMemory
	DB	053H
	DB	065H
	DB	072H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	00H
	ORG $+6
?getVideoMemory@@YA_NPEAI@Z$rtcName$2 DB 070H		; getVideoMemory
	DB	045H
	DB	06eH
	DB	075H
	DB	06dH
	DB	056H
	DB	069H
	DB	064H
	DB	065H
	DB	06fH
	DB	00H
	ORG $+5
?getVideoMemory@@YA_NPEAI@Z$rtcName$4 DB 06eH		; getVideoMemory
	DB	075H
	DB	06dH
	DB	052H
	DB	065H
	DB	074H
	DB	075H
	DB	072H
	DB	06eH
	DB	065H
	DB	064H
	DB	00H
	ORG $+4
?getVideoMemory@@YA_NPEAI@Z$rtcVarDesc DD 0108H		; getVideoMemory
	DD	018H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$5
	DD	0e4H
	DD	04H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$4
	DD	0c8H
	DD	08H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcName$0
	ORG $+288
?getVideoMemory@@YA_NPEAI@Z$rtcFrameData DD 06H		; getVideoMemory
	DD	00H
	DQ	FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcVarDesc
?checkDxExtensionVersion@@YAIXZ$rtcName$0 DB 069H	; checkDxExtensionVersion
	DB	06eH
	DB	074H
	DB	065H
	DB	06cH
	DB	045H
	DB	078H
	DB	074H
	DB	043H
	DB	061H
	DB	070H
	DB	073H
	DB	00H
	ORG $+3
?checkDxExtensionVersion@@YAIXZ$rtcName$1 DB 070H	; checkDxExtensionVersion
	DB	044H
	DB	065H
	DB	076H
	DB	069H
	DB	063H
	DB	065H
	DB	00H
?checkDxExtensionVersion@@YAIXZ$rtcName$2 DB 070H	; checkDxExtensionVersion
	DB	049H
	DB	06dH
	DB	06dH
	DB	065H
	DB	064H
	DB	069H
	DB	061H
	DB	074H
	DB	065H
	DB	043H
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+6
?checkDxExtensionVersion@@YAIXZ$rtcName$3 DB 066H	; checkDxExtensionVersion
	DB	065H
	DB	061H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	04cH
	DB	065H
	DB	076H
	DB	065H
	DB	06cH
	DB	00H
	ORG $+3
?checkDxExtensionVersion@@YAIXZ$rtcVarDesc DD 0e4H	; checkDxExtensionVersion
	DD	04H
	DQ	FLAT:?checkDxExtensionVersion@@YAIXZ$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:?checkDxExtensionVersion@@YAIXZ$rtcName$2
	DD	0a8H
	DD	08H
	DQ	FLAT:?checkDxExtensionVersion@@YAIXZ$rtcName$1
	DD	068H
	DD	01cH
	DQ	FLAT:?checkDxExtensionVersion@@YAIXZ$rtcName$0
	ORG $+192
?checkDxExtensionVersion@@YAIXZ$rtcFrameData DD 04H	; checkDxExtensionVersion
	DD	00H
	DQ	FLAT:?checkDxExtensionVersion@@YAIXZ$rtcVarDesc
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcName$0 DB 070H ; getDXGIAdapterDesc
	DB	046H
	DB	061H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	079H
	DB	00H
	ORG $+7
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcName$1 DB 070H ; getDXGIAdapterDesc
	DB	041H
	DB	064H
	DB	061H
	DB	070H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+7
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcVarDesc DD 078H ; getDXGIAdapterDesc
	DD	08H
	DQ	FLAT:?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcName$0
	ORG $+96
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcFrameData DD 02H ; getDXGIAdapterDesc
	DD	00H
	DQ	FLAT:?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\ID3D10Extensions.h
;	COMDAT ?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z
_TEXT	SEGMENT
desc$ = 40
initData$ = 88
pBuffer$ = 136
result$ = 148
tv138 = 160
__$ArrayPad$ = 168
pd3dDevice$ = 192
pCaps$ = 200
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z PROC ; ID3D10::GetExtensionCaps, COMDAT

; 76   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 77   : 	D3D11_BUFFER_DESC desc;
; 78   : 	ZeroMemory( &desc, sizeof(desc) );

  0003b	41 b8 18 00 00
	00		 mov	 r8d, 24
  00041	33 d2		 xor	 edx, edx
  00043	48 8d 4c 24 28	 lea	 rcx, QWORD PTR desc$[rsp]
  00048	e8 00 00 00 00	 call	 memset

; 79   : 	desc.ByteWidth = sizeof(CAPS_EXTENSION);

  0004d	c7 44 24 28 1c
	00 00 00	 mov	 DWORD PTR desc$[rsp], 28

; 80   : 	desc.Usage = D3D11_USAGE_STAGING;

  00055	c7 44 24 2c 03
	00 00 00	 mov	 DWORD PTR desc$[rsp+4], 3

; 81   : 	desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;

  0005d	c7 44 24 34 00
	00 02 00	 mov	 DWORD PTR desc$[rsp+12], 131072 ; 00020000H

; 82   : 
; 83   : 	D3D11_SUBRESOURCE_DATA initData;
; 84   : 	initData.pSysMem = pCaps;

  00065	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pCaps$[rsp]
  0006d	48 89 44 24 58	 mov	 QWORD PTR initData$[rsp], rax

; 85   : 	initData.SysMemPitch = sizeof(CAPS_EXTENSION);

  00072	c7 44 24 60 1c
	00 00 00	 mov	 DWORD PTR initData$[rsp+8], 28

; 86   : 	initData.SysMemSlicePitch = 0;

  0007a	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR initData$[rsp+12], 0

; 87   : 
; 88   : 	ZeroMemory( pCaps, sizeof(CAPS_EXTENSION) );

  00082	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00088	33 d2		 xor	 edx, edx
  0008a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pCaps$[rsp]
  00092	e8 00 00 00 00	 call	 memset

; 89   : 	memcpy( pCaps->Key, CAPS_EXTENSION_KEY,

  00097	41 b8 10 00 00
	00		 mov	 r8d, 16
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CAPS_EXTENSION_KEY@ID3D10@@3QBDB
  000a4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pCaps$[rsp]
  000ac	e8 00 00 00 00	 call	 memcpy

; 90   : 		sizeof(pCaps->Key) );
; 91   : 	pCaps->ApplicationVersion = EXTENSION_INTERFACE_VERSION;

  000b1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pCaps$[rsp]
  000b9	c7 40 10 00 00
	01 00		 mov	 DWORD PTR [rax+16], 65536 ; 00010000H

; 92   : 
; 93   : 	ID3D11Buffer* pBuffer = NULL;

  000c0	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pBuffer$[rsp], 0

; 94   : 	HRESULT result = pd3dDevice->CreateBuffer( 

  000cc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pd3dDevice$[rsp]
  000d4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d7	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR pBuffer$[rsp]
  000df	4c 8d 44 24 58	 lea	 r8, QWORD PTR initData$[rsp]
  000e4	48 8d 54 24 28	 lea	 rdx, QWORD PTR desc$[rsp]
  000e9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pd3dDevice$[rsp]
  000f1	ff 50 18	 call	 QWORD PTR [rax+24]
  000f4	89 84 24 94 00
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 95   : 		&desc,
; 96   : 		&initData,
; 97   : 		&pBuffer );
; 98   : 
; 99   : 	if( pBuffer )

  000fb	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR pBuffer$[rsp], 0
  00104	74 16		 je	 SHORT $LN2@GetExtensi

; 100  : 		pBuffer->Release();

  00106	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pBuffer$[rsp]
  0010e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00111	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pBuffer$[rsp]
  00119	ff 50 10	 call	 QWORD PTR [rax+16]
$LN2@GetExtensi:

; 101  : 
; 102  : 	if( S_OK == result )

  0011c	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR result$[rsp], 0
  00124	75 3e		 jne	 SHORT $LN3@GetExtensi

; 103  : 	{
; 104  : 		result = ( pCaps->ApplicationVersion <= pCaps->DriverVersion ) ? S_OK : S_FALSE;

  00126	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pCaps$[rsp]
  0012e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pCaps$[rsp]
  00136	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00139	39 48 10	 cmp	 DWORD PTR [rax+16], ecx
  0013c	77 0d		 ja	 SHORT $LN5@GetExtensi
  0013e	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
  00149	eb 0b		 jmp	 SHORT $LN6@GetExtensi
$LN5@GetExtensi:
  0014b	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv138[rsp], 1
$LN6@GetExtensi:
  00156	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv138[rsp]
  0015d	89 84 24 94 00
	00 00		 mov	 DWORD PTR result$[rsp], eax
$LN3@GetExtensi:

; 105  : 	}
; 106  : 	return result;

  00164	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR result$[rsp]

; 107  : };

  0016b	8b f8		 mov	 edi, eax
  0016d	48 8b cc	 mov	 rcx, rsp
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z$rtcFrameData
  00177	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0017c	8b c7		 mov	 eax, edi
  0017e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00186	48 33 cc	 xor	 rcx, rsp
  00189	e8 00 00 00 00	 call	 __security_check_cookie
  0018e	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00195	5f		 pop	 rdi
  00196	c3		 ret	 0
?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z ENDP ; ID3D10::GetExtensionCaps
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
retVal$ = 32
bHasWDDMDriver$ = 33
hD3D9$ = 40
pD3D9Create9Ex$ = 48
hDXGI$5 = 56
pCreateDXGIFactory$6 = 64
pFactory$7 = 88
pAdapter$8 = 120
tv72 = 132
AdapterDesc$ = 160
adapterNum$ = 168
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z PROC ; getDXGIAdapterDesc

; 49   : {

$LN12:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]

; 50   :     bool retVal = false;

  00028	c6 44 24 20 00	 mov	 BYTE PTR retVal$[rsp], 0

; 51   :     bool bHasWDDMDriver = false;

  0002d	c6 44 24 21 00	 mov	 BYTE PTR bHasWDDMDriver$[rsp], 0

; 52   :     if(AdapterDesc == NULL)

  00032	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR AdapterDesc$[rsp], 0
  0003b	75 07		 jne	 SHORT $LN2@getDXGIAda

; 53   :         return false;

  0003d	32 c0		 xor	 al, al
  0003f	e9 40 01 00 00	 jmp	 $LN1@getDXGIAda
$LN2@getDXGIAda:

; 54   :     HMODULE hD3D9 = LoadLibrary( _T("d3d9.dll") );

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113068
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00051	48 89 44 24 28	 mov	 QWORD PTR hD3D9$[rsp], rax

; 55   :     if( hD3D9 == NULL )

  00056	48 83 7c 24 28
	00		 cmp	 QWORD PTR hD3D9$[rsp], 0
  0005c	75 07		 jne	 SHORT $LN3@getDXGIAda

; 56   :         return false;

  0005e	32 c0		 xor	 al, al
  00060	e9 1f 01 00 00	 jmp	 $LN1@getDXGIAda
$LN3@getDXGIAda:

; 57   : 
; 58   :     /*
; 59   :         * Try to create IDirect3D9Ex interface (also known as a DX9L interface). 
; 60   :         * This interface can only be created if the driver is a WDDM driver.
; 61   :         */
; 62   : 
; 63   :     // Define a function pointer to the Direct3DCreate9Ex function.
; 64   :     typedef HRESULT ( WINAPI*LPDIRECT3DCREATE9EX )( UINT,
; 65   :                                                     void** );
; 66   : 
; 67   :     // Obtain the address of the Direct3DCreate9Ex function.
; 68   :     LPDIRECT3DCREATE9EX pD3D9Create9Ex = NULL;

  00065	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR pD3D9Create9Ex$[rsp], 0

; 69   :     pD3D9Create9Ex = ( LPDIRECT3DCREATE9EX )GetProcAddress( hD3D9, "Direct3DCreate9Ex" );

  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113070
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hD3D9$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00080	48 89 44 24 30	 mov	 QWORD PTR pD3D9Create9Ex$[rsp], rax

; 70   : 
; 71   :     bHasWDDMDriver = ( pD3D9Create9Ex != NULL );

  00085	48 83 7c 24 30
	00		 cmp	 QWORD PTR pD3D9Create9Ex$[rsp], 0
  0008b	74 0d		 je	 SHORT $LN10@getDXGIAda
  0008d	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv72[rsp], 1
  00098	eb 0b		 jmp	 SHORT $LN11@getDXGIAda
$LN10@getDXGIAda:
  0009a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv72[rsp], 0
$LN11@getDXGIAda:
  000a5	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR tv72[rsp]
  000ad	88 44 24 21	 mov	 BYTE PTR bHasWDDMDriver$[rsp], al

; 72   : 
; 73   :     if( bHasWDDMDriver )

  000b1	0f b6 44 24 21	 movzx	 eax, BYTE PTR bHasWDDMDriver$[rsp]
  000b6	85 c0		 test	 eax, eax
  000b8	0f 84 b6 00 00
	00		 je	 $LN4@getDXGIAda

; 74   :     {
; 75   :         // Has WDDM Driver (Vista, and later)
; 76   :         HMODULE hDXGI = NULL;

  000be	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR hDXGI$5[rsp], 0

; 77   : 
; 78   :         hDXGI = LoadLibrary( _T("dxgi.dll") );

  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113072
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  000d4	48 89 44 24 38	 mov	 QWORD PTR hDXGI$5[rsp], rax

; 79   : 
; 80   :         // DXGI libs should really be present when WDDM driver present.
; 81   :         if( hDXGI )

  000d9	48 83 7c 24 38
	00		 cmp	 QWORD PTR hDXGI$5[rsp], 0
  000df	0f 84 8f 00 00
	00		 je	 $LN5@getDXGIAda

; 82   :         {
; 83   :             // Define a function pointer to the CreateDXGIFactory1 function.
; 84   :             typedef HRESULT ( WINAPI*LPCREATEDXGIFACTORY )( REFIID riid,
; 85   :                                                             void** ppFactory );
; 86   : 
; 87   :             // Obtain the address of the CreateDXGIFactory1 function.
; 88   :             LPCREATEDXGIFACTORY pCreateDXGIFactory = NULL;

  000e5	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR pCreateDXGIFactory$6[rsp], 0

; 89   :             pCreateDXGIFactory = ( LPCREATEDXGIFACTORY )GetProcAddress( hDXGI, "CreateDXGIFactory" );

  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113074
  000f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hDXGI$5[rsp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00100	48 89 44 24 40	 mov	 QWORD PTR pCreateDXGIFactory$6[rsp], rax

; 90   : 
; 91   :             if( pCreateDXGIFactory )

  00105	48 83 7c 24 40
	00		 cmp	 QWORD PTR pCreateDXGIFactory$6[rsp], 0
  0010b	74 5c		 je	 SHORT $LN6@getDXGIAda

; 92   :             {
; 93   :                 // Got the function hook from the DLL
; 94   :                 // Create an IDXGIFactory object.
; 95   :                 IDXGIFactory* pFactory;
; 96   :                 if( SUCCEEDED( ( *pCreateDXGIFactory )( __uuidof( IDXGIFactory ), ( void** )( &pFactory ) ) ) )

  0010d	48 8d 54 24 58	 lea	 rdx, QWORD PTR pFactory$7[rsp]
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_GUID_7b7166ec_21c7_44ae_b21a_c9ae321ae369
  00119	ff 54 24 40	 call	 QWORD PTR pCreateDXGIFactory$6[rsp]
  0011d	85 c0		 test	 eax, eax
  0011f	7c 48		 jl	 SHORT $LN7@getDXGIAda

; 97   :                 {
; 98   :                     // Enumerate adapters. Code here only gets the info for the first adapter.
; 99   :                     // If secondary or multiple Gfx adapters will be used, the code needs to be 
; 100  :                     // modified to accomodate that.
; 101  :                     IDXGIAdapter* pAdapter;
; 102  :                     if( SUCCEEDED( pFactory->EnumAdapters( FIRST_GFX_ADAPTER, &pAdapter ) ) )

  00121	48 8b 44 24 58	 mov	 rax, QWORD PTR pFactory$7[rsp]
  00126	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00129	4c 8d 44 24 78	 lea	 r8, QWORD PTR pAdapter$8[rsp]
  0012e	33 d2		 xor	 edx, edx
  00130	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pFactory$7[rsp]
  00135	ff 50 38	 call	 QWORD PTR [rax+56]
  00138	85 c0		 test	 eax, eax
  0013a	7c 2d		 jl	 SHORT $LN8@getDXGIAda

; 103  :                     {
; 104  :                         pAdapter->GetDesc( AdapterDesc );

  0013c	48 8b 44 24 78	 mov	 rax, QWORD PTR pAdapter$8[rsp]
  00141	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00144	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR AdapterDesc$[rsp]
  0014c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pAdapter$8[rsp]
  00151	ff 50 40	 call	 QWORD PTR [rax+64]

; 105  :                         pAdapter->Release();

  00154	48 8b 44 24 78	 mov	 rax, QWORD PTR pAdapter$8[rsp]
  00159	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pAdapter$8[rsp]
  00161	ff 50 10	 call	 QWORD PTR [rax+16]

; 106  : 
; 107  :                         retVal = true;

  00164	c6 44 24 20 01	 mov	 BYTE PTR retVal$[rsp], 1
$LN8@getDXGIAda:
$LN7@getDXGIAda:
$LN6@getDXGIAda:

; 108  :                     }
; 109  :                 }
; 110  :             }
; 111  : 
; 112  :             FreeLibrary( hDXGI );

  00169	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hDXGI$5[rsp]
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary
$LN5@getDXGIAda:
$LN4@getDXGIAda:

; 113  :         }
; 114  :     }
; 115  :     FreeLibrary( hD3D9 );

  00174	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hD3D9$[rsp]
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary

; 116  :     return retVal;

  0017f	0f b6 44 24 20	 movzx	 eax, BYTE PTR retVal$[rsp]
$LN1@getDXGIAda:

; 117  : }

  00184	48 8b f8	 mov	 rdi, rax
  00187	48 8b cc	 mov	 rcx, rsp
  0018a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z$rtcFrameData
  00191	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00196	48 8b c7	 mov	 rax, rdi
  00199	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  001a0	5f		 pop	 rdi
  001a1	c3		 ret	 0
?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z ENDP ; getDXGIAdapterDesc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT sscanf_s
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Buffer$ = 96
_Format$ = 104
sscanf_s PROC						; COMDAT

; 2309 :         {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 2310 :             int _Result;
; 2311 :             va_list _ArgList;
; 2312 :             __crt_va_start(_ArgList, _Format);

  0002d	48 8d 44 24 70	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00032	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2313 : 
; 2314 :             #pragma warning(push)
; 2315 :             #pragma warning(disable: 4996) // Deprecation
; 2316 :             _Result = vsscanf_s(_Buffer, _Format, _ArgList);

  00037	4c 8b 44 24 38	 mov	 r8, QWORD PTR _ArgList$[rsp]
  0003c	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Format$[rsp]
  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00046	e8 00 00 00 00	 call	 vsscanf_s
  0004b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2317 :             #pragma warning(pop)
; 2318 : 
; 2319 :             __crt_va_end(_ArgList);

  0004f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2320 :             return _Result;

  00058	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2321 :         }

  0005c	8b f8		 mov	 edi, eax
  0005e	48 8b cc	 mov	 rcx, rsp
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sscanf_s$rtcFrameData
  00068	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006d	8b c7		 mov	 eax, edi
  0006f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
sscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT vsscanf_s
_TEXT	SEGMENT
_Buffer$ = 48
_Format$ = 56
_ArgList$ = 64
vsscanf_s PROC						; COMDAT

; 2227 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 2228 :             return _vsscanf_s_l(_Buffer, _Format, NULL, _ArgList);

  00028	4c 8b 4c 24 40	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0002d	45 33 c0	 xor	 r8d, r8d
  00030	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Format$[rsp]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003a	e8 00 00 00 00	 call	 _vsscanf_s_l

; 2229 :         }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
vsscanf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsscanf_s_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_s_l PROC					; COMDAT

; 2206 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 2207 :         return __stdio_common_vsscanf(

  0002d	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 83 c8 01	 or	 rax, 1
  00039	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0003e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00048	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00052	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  00059	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2208 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS | _CRT_INTERNAL_SCANF_SECURECRT,
; 2209 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2210 :     }

  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
_vsscanf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 954  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 14 00 00 00	 mov	 ecx, 20
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  0002d	48 8d 44 24 68	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00032	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00037	b9 01 00 00 00	 mov	 ecx, 1
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00042	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00047	45 33 c0	 xor	 r8d, r8d
  0004a	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Format$[rsp]
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 _vfprintf_l
  00057	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 959  :         __crt_va_end(_ArgList);

  0005b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 960  :         return _Result;

  00064	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 961  :     }

  00068	8b f8		 mov	 edi, eax
  0006a	48 8b cc	 mov	 rcx, rsp
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00074	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00079	8b c7		 mov	 eax, edi
  0007b	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00041	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00046	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

$LN3:
  00000	40 57		 push	 rdi

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
  00000	40 57		 push	 rdi

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
extensionVersion$ = 80
intelExtCaps$ = 104
pDevice$ = 168
pImmediateContext$ = 200
featureLevel$ = 228
hr$ = 244
__$ArrayPad$ = 256
?checkDxExtensionVersion@@YAIXZ PROC			; checkDxExtensionVersion

; 532  : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 533  :     UINT extensionVersion = 0;

  0002a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR extensionVersion$[rsp], 0

; 534  :     ID3D10::CAPS_EXTENSION intelExtCaps;
; 535  :     ID3D11Device *pDevice = NULL;

  00032	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pDevice$[rsp], 0

; 536  :     ID3D11DeviceContext *pImmediateContext = NULL;

  0003e	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pImmediateContext$[rsp], 0

; 537  :     D3D_FEATURE_LEVEL featureLevel;
; 538  :     HRESULT hr = NULL;

  0004a	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR hr$[rsp], 0

; 539  : 
; 540  :     ZeroMemory( &featureLevel, sizeof(D3D_FEATURE_LEVEL) );

  00055	41 b8 04 00 00
	00		 mov	 r8d, 4
  0005b	33 d2		 xor	 edx, edx
  0005d	48 8d 8c 24 e4
	00 00 00	 lea	 rcx, QWORD PTR featureLevel$[rsp]
  00065	e8 00 00 00 00	 call	 memset

; 541  : 
; 542  :     // First create the Device
; 543  :     hr = D3D11CreateDevice( NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, NULL, NULL, NULL,

  0006a	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR pImmediateContext$[rsp]
  00072	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00077	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR featureLevel$[rsp]
  0007f	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00084	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR pDevice$[rsp]
  0008c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00091	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR [rsp+48], 7
  00099	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000a1	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000aa	45 33 c9	 xor	 r9d, r9d
  000ad	45 33 c0	 xor	 r8d, r8d
  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	33 c9		 xor	 ecx, ecx
  000b7	e8 00 00 00 00	 call	 D3D11CreateDevice
  000bc	89 84 24 f4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax

; 544  :                             D3D11_SDK_VERSION, &pDevice, &featureLevel, &pImmediateContext);
; 545  : 
; 546  :     if ( FAILED(hr) )

  000c3	83 bc 24 f4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  000cb	7d 66		 jge	 SHORT $LN2@checkDxExt

; 547  :     {
; 548  :         SAFE_RELEASE( pImmediateContext );

  000cd	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  000d6	74 22		 je	 SHORT $LN3@checkDxExt
  000d8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  000e0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  000eb	ff 50 10	 call	 QWORD PTR [rax+16]
  000ee	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN3@checkDxExt:

; 549  :         SAFE_RELEASE( pDevice );

  000fa	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pDevice$[rsp], 0
  00103	74 22		 je	 SHORT $LN4@checkDxExt
  00105	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pDevice$[rsp]
  0010d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00110	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pDevice$[rsp]
  00118	ff 50 10	 call	 QWORD PTR [rax+16]
  0011b	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pDevice$[rsp], 0
$LN4@checkDxExt:

; 550  : 
; 551  :         printf("D3D11CreateDevice failed\n");

  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113431
  0012e	e8 00 00 00 00	 call	 printf
$LN2@checkDxExt:

; 552  :     }
; 553  :     ZeroMemory( &intelExtCaps, sizeof(ID3D10::CAPS_EXTENSION) );

  00133	41 b8 1c 00 00
	00		 mov	 r8d, 28
  00139	33 d2		 xor	 edx, edx
  0013b	48 8d 4c 24 68	 lea	 rcx, QWORD PTR intelExtCaps$[rsp]
  00140	e8 00 00 00 00	 call	 memset

; 554  : 
; 555  :     if ( pDevice )

  00145	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pDevice$[rsp], 0
  0014e	74 1e		 je	 SHORT $LN5@checkDxExt

; 556  :     {
; 557  :         if( S_OK == GetExtensionCaps( pDevice, &intelExtCaps ) )

  00150	48 8d 54 24 68	 lea	 rdx, QWORD PTR intelExtCaps$[rsp]
  00155	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0015d	e8 00 00 00 00	 call	 ?GetExtensionCaps@ID3D10@@YAJPEAUID3D11Device@@PEAUCAPS_EXTENSION_1_0@1@@Z ; ID3D10::GetExtensionCaps
  00162	85 c0		 test	 eax, eax
  00164	75 08		 jne	 SHORT $LN6@checkDxExt

; 558  :         {
; 559  :             extensionVersion = intelExtCaps.DriverVersion;

  00166	8b 44 24 7c	 mov	 eax, DWORD PTR intelExtCaps$[rsp+20]
  0016a	89 44 24 50	 mov	 DWORD PTR extensionVersion$[rsp], eax
$LN6@checkDxExt:
$LN5@checkDxExt:

; 560  :         }
; 561  :     }
; 562  : 
; 563  :     return extensionVersion;

  0016e	8b 44 24 50	 mov	 eax, DWORD PTR extensionVersion$[rsp]

; 564  : }

  00172	8b f8		 mov	 edi, eax
  00174	48 8b cc	 mov	 rcx, rsp
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?checkDxExtensionVersion@@YAIXZ$rtcFrameData
  0017e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00183	8b c7		 mov	 eax, edi
  00185	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0018d	48 33 cc	 xor	 rcx, rsp
  00190	e8 00 00 00 00	 call	 __security_check_cookie
  00195	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0019c	5f		 pop	 rdi
  0019d	c3		 ret	 0
?checkDxExtensionVersion@@YAIXZ ENDP			; checkDxExtensionVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
mem$ = 80
success$ = 84
pLocator$ = 104
hr$ = 116
pServices$9 = 136
nameSpace$10 = 152
pEnumVideo$11 = 168
pVideo$12 = 200
numReturned$13 = 228
v$14 = 264
pVideoMemory$ = 320
?getVideoMemory@@YA_NPEAI@Z PROC			; getVideoMemory

; 286  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR [rsp+320]

; 287  :     ULONG mem = 0;

  00024	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR mem$[rsp], 0

; 288  :     bool success = false;

  0002c	c6 44 24 54 00	 mov	 BYTE PTR success$[rsp], 0

; 289  :     IWbemLocator* pLocator = NULL;

  00031	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR pLocator$[rsp], 0

; 290  :     HRESULT hr = S_OK;

  0003a	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR hr$[rsp], 0

; 291  :     CoInitialize( 0 );

  00042	33 c9		 xor	 ecx, ecx
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoInitialize

; 292  :     hr = CoCreateInstance( CLSID_WbemLocator, NULL, CLSCTX_INPROC_SERVER, IID_IWbemLocator, ( LPVOID* )&pLocator );

  0004a	48 8d 44 24 68	 lea	 rax, QWORD PTR pLocator$[rsp]
  0004f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00054	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:IID_IWbemLocator
  0005b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:CLSID_WbemLocator
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoCreateInstance
  00070	89 44 24 74	 mov	 DWORD PTR hr$[rsp], eax

; 293  :     if( S_OK == hr )

  00074	83 7c 24 74 00	 cmp	 DWORD PTR hr$[rsp], 0
  00079	0f 85 df 01 00
	00		 jne	 $LN2@getVideoMe

; 294  :     {
; 295  :         if( pLocator != NULL )

  0007f	48 83 7c 24 68
	00		 cmp	 QWORD PTR pLocator$[rsp], 0
  00085	0f 84 c8 01 00
	00		 je	 $LN3@getVideoMe

; 296  :         {
; 297  :             IWbemServices* pServices = NULL;

  0008b	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pServices$9[rsp], 0

; 298  :             BSTR nameSpace = SysAllocString( L"\\\\.\\root\\cimv2" );

  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113171
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysAllocString
  000a4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR nameSpace$10[rsp], rax

; 299  :             if( S_OK == pLocator->ConnectServer( nameSpace, NULL, NULL, 0, 0, NULL, NULL, &pServices )
; 300  :                 && pServices != NULL )

  000ac	48 8b 44 24 68	 mov	 rax, QWORD PTR pLocator$[rsp]
  000b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR pServices$9[rsp]
  000bc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000c1	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  000ca	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  000d3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000db	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000e4	45 33 c9	 xor	 r9d, r9d
  000e7	45 33 c0	 xor	 r8d, r8d
  000ea	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR nameSpace$10[rsp]
  000f2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pLocator$[rsp]
  000f7	ff 50 18	 call	 QWORD PTR [rax+24]
  000fa	85 c0		 test	 eax, eax
  000fc	0f 85 43 01 00
	00		 jne	 $LN4@getVideoMe
  00102	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR pServices$9[rsp], 0
  0010b	0f 84 34 01 00
	00		 je	 $LN4@getVideoMe

; 301  :             {
; 302  :                 CoSetProxyBlanket( pServices, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL, RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, 0 );

  00111	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00119	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00122	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR [rsp+40], 3
  0012a	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00132	45 33 c9	 xor	 r9d, r9d
  00135	45 33 c0	 xor	 r8d, r8d
  00138	ba 0a 00 00 00	 mov	 edx, 10
  0013d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pServices$9[rsp]
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoSetProxyBlanket

; 303  :                 IEnumWbemClassObject* pEnumVideo = NULL;

  0014b	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pEnumVideo$11[rsp], 0

; 304  :                 if( S_OK  == pServices->CreateInstanceEnum( L"Win32_VideoController", 0, NULL, &pEnumVideo )
; 305  :                     && pEnumVideo != NULL )

  00157	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pServices$9[rsp]
  0015f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00162	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR pEnumVideo$11[rsp]
  0016a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0016f	45 33 c9	 xor	 r9d, r9d
  00172	45 33 c0	 xor	 r8d, r8d
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113174
  0017c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pServices$9[rsp]
  00184	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  0018a	85 c0		 test	 eax, eax
  0018c	0f 85 b3 00 00
	00		 jne	 $LN5@getVideoMe
  00192	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pEnumVideo$11[rsp], 0
  0019b	0f 84 a4 00 00
	00		 je	 $LN5@getVideoMe

; 306  :                 {
; 307  :                     IWbemClassObject* pVideo = NULL;

  001a1	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pVideo$12[rsp], 0

; 308  :                     DWORD numReturned = 0;

  001ad	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR numReturned$13[rsp], 0

; 309  :                     if( S_OK == pEnumVideo->Next( 1000, 1, &pVideo, &numReturned ) && numReturned == 1 )

  001b8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pEnumVideo$11[rsp]
  001c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c3	48 8d 8c 24 e4
	00 00 00	 lea	 rcx, QWORD PTR numReturned$13[rsp]
  001cb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001d0	4c 8d 8c 24 c8
	00 00 00	 lea	 r9, QWORD PTR pVideo$12[rsp]
  001d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  001de	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  001e3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pEnumVideo$11[rsp]
  001eb	ff 50 20	 call	 QWORD PTR [rax+32]
  001ee	85 c0		 test	 eax, eax
  001f0	75 53		 jne	 SHORT $LN6@getVideoMe
  001f2	83 bc 24 e4 00
	00 00 01	 cmp	 DWORD PTR numReturned$13[rsp], 1
  001fa	75 49		 jne	 SHORT $LN6@getVideoMe

; 310  :                     {
; 311  :                         VARIANT v;
; 312  :                         if( S_OK == pVideo->Get( L"AdapterRAM", 0, &v, NULL, NULL ) )

  001fc	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pVideo$12[rsp]
  00204	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00207	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00210	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00219	4c 8d 8c 24 08
	01 00 00	 lea	 r9, QWORD PTR v$14[rsp]
  00221	45 33 c0	 xor	 r8d, r8d
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113177
  0022b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pVideo$12[rsp]
  00233	ff 50 20	 call	 QWORD PTR [rax+32]
  00236	85 c0		 test	 eax, eax
  00238	75 0b		 jne	 SHORT $LN7@getVideoMe

; 313  :                         {
; 314  :                             mem = v.uintVal;

  0023a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR v$14[rsp+8]
  00241	89 44 24 50	 mov	 DWORD PTR mem$[rsp], eax
$LN7@getVideoMe:
$LN6@getVideoMe:
$LN5@getVideoMe:
$LN4@getVideoMe:

; 315  :                         }
; 316  :                     }
; 317  :                 }
; 318  :             }
; 319  :             SysFreeString( nameSpace );

  00245	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR nameSpace$10[rsp]
  0024d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SysFreeString
$LN3@getVideoMe:

; 320  :         }
; 321  :         CoUninitialize();

  00253	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoUninitialize

; 322  :         success = true;

  00259	c6 44 24 54 01	 mov	 BYTE PTR success$[rsp], 1
$LN2@getVideoMe:

; 323  :     }
; 324  :     *pVideoMemory = mem;

  0025e	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR pVideoMemory$[rsp]
  00266	8b 4c 24 50	 mov	 ecx, DWORD PTR mem$[rsp]
  0026a	89 08		 mov	 DWORD PTR [rax], ecx

; 325  :     return success;

  0026c	0f b6 44 24 54	 movzx	 eax, BYTE PTR success$[rsp]

; 326  : }

  00271	8b f8		 mov	 edi, eax
  00273	48 8b cc	 mov	 rcx, rsp
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getVideoMemory@@YA_NPEAI@Z$rtcFrameData
  0027d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00282	8b c7		 mov	 eax, edi
  00284	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0028b	5f		 pop	 rdi
  0028c	c3		 ret	 0
?getVideoMemory@@YA_NPEAI@Z ENDP			; getVideoMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
pDevice$ = 88
pImmediateContext$ = 120
featureLevel$ = 148
hr$ = 164
counterInfo$ = 184
pIntelCounterDesc$ = 232
numDependentCounters$ = 244
uiSlotsRequired$ = 260
uiNameLength$ = 292
uiUnitsLength$ = 324
uiDescLength$ = 356
sName$ = 376
sUnits$ = 384
sDesc$ = 392
i$18 = 400
counterDescription$19 = 424
counterType$20 = 452
sName$21 = 472
sUnits$22 = 480
sDesc$23 = 488
IntelCounterMajorVersion$24 = 500
IntelCounterSize$25 = 532
argsFilled$26 = 548
pIntelCounter$ = 568
pData$ = 600
pDeviceInfoBuffer$ = 616
$T27 = 632
$T28 = 640
$T29 = 648
$T30 = 656
$T31 = 664
$T32 = 672
__$ArrayPad$ = 680
VendorId$ = 704
pIntelDeviceInfoHeader$ = 712
pIntelDeviceInfoBuffer$ = 720
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z PROC ; getIntelDeviceInfo

; 348  : {

$LN42:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec b0 02
	00 00		 sub	 rsp, 688		; 000002b0H
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 ac 00 00 00	 mov	 ecx, 172		; 000000acH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	8b 8c 24 c0 02
	00 00		 mov	 ecx, DWORD PTR [rsp+704]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c4	 xor	 rax, rsp
  00036	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 349  :     // The device information is stored in a D3D counter.
; 350  :     // We must create a D3D device, find the Intel counter 
; 351  :     // and query the counter info
; 352  :     ID3D11Device *pDevice = NULL;

  0003e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0

; 353  :     ID3D11DeviceContext *pImmediateContext = NULL;

  00047	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0

; 354  :     D3D_FEATURE_LEVEL featureLevel;
; 355  :     HRESULT hr = NULL;

  00050	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR hr$[rsp], 0

; 356  : 
; 357  :     if ( pIntelDeviceInfoBuffer == NULL )

  0005b	48 83 bc 24 d0
	02 00 00 00	 cmp	 QWORD PTR pIntelDeviceInfoBuffer$[rsp], 0
  00064	75 0a		 jne	 SHORT $LN5@getIntelDe

; 358  :         return GGF_ERROR;

  00066	b8 ff ff ff ff	 mov	 eax, -1
  0006b	e9 ec 08 00 00	 jmp	 $LN1@getIntelDe
$LN5@getIntelDe:

; 359  : 
; 360  :     if ( VendorId != INTEL_VENDOR_ID )

  00070	81 bc 24 c0 02
	00 00 86 80 00
	00		 cmp	 DWORD PTR VendorId$[rsp], 32902 ; 00008086H
  0007b	74 0a		 je	 SHORT $LN6@getIntelDe

; 361  :         return GGF_E_UNSUPPORTED_HARDWARE;

  0007d	b8 fe ff ff ff	 mov	 eax, -2
  00082	e9 d5 08 00 00	 jmp	 $LN1@getIntelDe
$LN6@getIntelDe:

; 362  : 
; 363  :     ZeroMemory( &featureLevel, sizeof(D3D_FEATURE_LEVEL) );

  00087	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008d	33 d2		 xor	 edx, edx
  0008f	48 8d 8c 24 94
	00 00 00	 lea	 rcx, QWORD PTR featureLevel$[rsp]
  00097	e8 00 00 00 00	 call	 memset

; 364  : 
; 365  :     // First create the Device, must be SandyBridge or later to create D3D11 device
; 366  :     hr = D3D11CreateDevice( NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, NULL, NULL, NULL,

  0009c	48 8d 44 24 78	 lea	 rax, QWORD PTR pImmediateContext$[rsp]
  000a1	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000a6	48 8d 84 24 94
	00 00 00	 lea	 rax, QWORD PTR featureLevel$[rsp]
  000ae	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000b3	48 8d 44 24 58	 lea	 rax, QWORD PTR pDevice$[rsp]
  000b8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000bd	c7 44 24 30 07
	00 00 00	 mov	 DWORD PTR [rsp+48], 7
  000c5	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000cd	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	45 33 c0	 xor	 r8d, r8d
  000dc	ba 01 00 00 00	 mov	 edx, 1
  000e1	33 c9		 xor	 ecx, ecx
  000e3	e8 00 00 00 00	 call	 D3D11CreateDevice
  000e8	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax

; 367  :                             D3D11_SDK_VERSION, &pDevice, &featureLevel, &pImmediateContext);
; 368  : 
; 369  :     if ( FAILED(hr) )

  000ef	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  000f7	7d 55		 jge	 SHORT $LN7@getIntelDe

; 370  :     {
; 371  :         SAFE_RELEASE( pImmediateContext );

  000f9	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  000ff	74 19		 je	 SHORT $LN8@getIntelDe
  00101	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  00106	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  0010e	ff 50 10	 call	 QWORD PTR [rax+16]
  00111	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN8@getIntelDe:

; 372  :         SAFE_RELEASE( pDevice );

  0011a	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  00120	74 19		 je	 SHORT $LN9@getIntelDe
  00122	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  00127	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0012f	ff 50 10	 call	 QWORD PTR [rax+16]
  00132	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN9@getIntelDe:

; 373  : 
; 374  :         printf("D3D11CreateDevice failed\n");

  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113242
  00142	e8 00 00 00 00	 call	 printf

; 375  : 
; 376  :         return FALSE;

  00147	33 c0		 xor	 eax, eax
  00149	e9 0e 08 00 00	 jmp	 $LN1@getIntelDe
$LN7@getIntelDe:

; 377  :     }
; 378  :     
; 379  :     // The counter is in a device dependent counter
; 380  :     D3D11_COUNTER_INFO counterInfo;
; 381  :     D3D11_COUNTER_DESC pIntelCounterDesc;
; 382  :     
; 383  :     int numDependentCounters;
; 384  :     UINT uiSlotsRequired, uiNameLength, uiUnitsLength, uiDescLength;
; 385  :     LPSTR sName, sUnits, sDesc;
; 386  : 
; 387  :     ZeroMemory( &counterInfo, sizeof(D3D11_COUNTER_INFO) );

  0014e	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00154	33 d2		 xor	 edx, edx
  00156	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR counterInfo$[rsp]
  0015e	e8 00 00 00 00	 call	 memset

; 388  :     ZeroMemory( &pIntelCounterDesc, sizeof(D3D11_COUNTER_DESC) );

  00163	41 b8 08 00 00
	00		 mov	 r8d, 8
  00169	33 d2		 xor	 edx, edx
  0016b	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR pIntelCounterDesc$[rsp]
  00173	e8 00 00 00 00	 call	 memset

; 389  : 
; 390  :     // Query the device to find the number of device dependent counters.
; 391  :     pDevice->CheckCounterInfo( &counterInfo );

  00178	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  0017d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00180	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR counterInfo$[rsp]
  00188	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0018d	ff 90 f8 00 00
	00		 call	 QWORD PTR [rax+248]

; 392  : 
; 393  :     if ( counterInfo.LastDeviceDependentCounter == 0 )

  00193	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR counterInfo$[rsp], 0
  0019b	75 58		 jne	 SHORT $LN10@getIntelDe

; 394  :     {
; 395  :         SAFE_RELEASE( pImmediateContext );

  0019d	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  001a3	74 19		 je	 SHORT $LN11@getIntelDe
  001a5	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  001aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ad	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  001b2	ff 50 10	 call	 QWORD PTR [rax+16]
  001b5	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN11@getIntelDe:

; 396  :         SAFE_RELEASE( pDevice );

  001be	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  001c4	74 19		 je	 SHORT $LN12@getIntelDe
  001c6	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  001cb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ce	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  001d3	ff 50 10	 call	 QWORD PTR [rax+16]
  001d6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN12@getIntelDe:

; 397  : 
; 398  :         printf("No device dependent counters\n");

  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113246
  001e6	e8 00 00 00 00	 call	 printf

; 399  : 
; 400  :         // The driver does not support the Device Info Counter.
; 401  :         return GGF_E_UNSUPPORTED_DRIVER;

  001eb	b8 fd ff ff ff	 mov	 eax, -3
  001f0	e9 67 07 00 00	 jmp	 $LN1@getIntelDe
$LN10@getIntelDe:

; 402  :     }
; 403  : 
; 404  :     numDependentCounters = counterInfo.LastDeviceDependentCounter - D3D11_COUNTER_DEVICE_DEPENDENT_0 + 1;

  001f5	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR counterInfo$[rsp]
  001fc	2d ff ff ff 3f	 sub	 eax, 1073741823		; 3fffffffH
  00201	89 84 24 f4 00
	00 00		 mov	 DWORD PTR numDependentCounters$[rsp], eax

; 405  : 
; 406  :     // Search for the apporpriate counter - INTEL_DEVICE_INFO_COUNTERS
; 407  :     for ( int i = 0; i < numDependentCounters; ++i )

  00208	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$18[rsp], 0
  00213	eb 10		 jmp	 SHORT $LN4@getIntelDe
$LN2@getIntelDe:
  00215	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR i$18[rsp]
  0021c	ff c0		 inc	 eax
  0021e	89 84 24 90 01
	00 00		 mov	 DWORD PTR i$18[rsp], eax
$LN4@getIntelDe:
  00225	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR numDependentCounters$[rsp]
  0022c	39 84 24 90 01
	00 00		 cmp	 DWORD PTR i$18[rsp], eax
  00233	0f 8d 69 03 00
	00		 jge	 $LN3@getIntelDe

; 408  :     {
; 409  :         D3D11_COUNTER_DESC counterDescription;
; 410  :         D3D11_COUNTER_TYPE counterType;
; 411  : 
; 412  :         counterDescription.Counter = static_cast<D3D11_COUNTER>(i+D3D11_COUNTER_DEVICE_DEPENDENT_0);

  00239	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR i$18[rsp]
  00240	05 00 00 00 40	 add	 eax, 1073741824		; 40000000H
  00245	89 84 24 a8 01
	00 00		 mov	 DWORD PTR counterDescription$19[rsp], eax

; 413  :         counterDescription.MiscFlags = 0;

  0024c	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR counterDescription$19[rsp+4], 0

; 414  :         counterType = static_cast<D3D11_COUNTER_TYPE>(0);

  00257	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR counterType$20[rsp], 0

; 415  :         uiSlotsRequired = uiNameLength = uiUnitsLength = uiDescLength = 0;

  00262	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR uiDescLength$[rsp], 0
  0026d	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR uiDescLength$[rsp]
  00274	89 84 24 44 01
	00 00		 mov	 DWORD PTR uiUnitsLength$[rsp], eax
  0027b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR uiUnitsLength$[rsp]
  00282	89 84 24 24 01
	00 00		 mov	 DWORD PTR uiNameLength$[rsp], eax
  00289	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR uiNameLength$[rsp]
  00290	89 84 24 04 01
	00 00		 mov	 DWORD PTR uiSlotsRequired$[rsp], eax

; 416  :         sName = sUnits = sDesc = NULL;

  00297	48 c7 84 24 88
	01 00 00 00 00
	00 00		 mov	 QWORD PTR sDesc$[rsp], 0
  002a3	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR sDesc$[rsp]
  002ab	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR sUnits$[rsp], rax
  002b3	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR sUnits$[rsp]
  002bb	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR sName$[rsp], rax

; 417  : 
; 418  :         if( SUCCEEDED( hr = pDevice->CheckCounter( &counterDescription, &counterType, &uiSlotsRequired, NULL, &uiNameLength, NULL, &uiUnitsLength, NULL, &uiDescLength ) ) )

  002c3	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  002c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002cb	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR uiDescLength$[rsp]
  002d3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002d8	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  002e1	48 8d 8c 24 44
	01 00 00	 lea	 rcx, QWORD PTR uiUnitsLength$[rsp]
  002e9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ee	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  002f7	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR uiNameLength$[rsp]
  002ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00304	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0030d	4c 8d 8c 24 04
	01 00 00	 lea	 r9, QWORD PTR uiSlotsRequired$[rsp]
  00315	4c 8d 84 24 c4
	01 00 00	 lea	 r8, QWORD PTR counterType$20[rsp]
  0031d	48 8d 94 24 a8
	01 00 00	 lea	 rdx, QWORD PTR counterDescription$19[rsp]
  00325	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0032a	ff 90 00 01 00
	00		 call	 QWORD PTR [rax+256]
  00330	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax
  00337	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  0033f	0f 8c 58 02 00
	00		 jl	 $LN13@getIntelDe

; 419  :         {
; 420  :             LPSTR sName  = new char[uiNameLength];

  00345	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR uiNameLength$[rsp]
  0034c	8b c8		 mov	 ecx, eax
  0034e	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  00353	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR $T27[rsp], rax
  0035b	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR $T27[rsp]
  00363	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR sName$21[rsp], rax

; 421  :             LPSTR sUnits = new char[uiUnitsLength];

  0036b	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR uiUnitsLength$[rsp]
  00372	8b c8		 mov	 ecx, eax
  00374	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  00379	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR $T28[rsp], rax
  00381	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR $T28[rsp]
  00389	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR sUnits$22[rsp], rax

; 422  :             LPSTR sDesc  = new char[uiDescLength];

  00391	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR uiDescLength$[rsp]
  00398	8b c8		 mov	 ecx, eax
  0039a	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  0039f	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR $T29[rsp], rax
  003a7	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR $T29[rsp]
  003af	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR sDesc$23[rsp], rax

; 423  :             
; 424  :             if( SUCCEEDED( hr = pDevice->CheckCounter( &counterDescription, &counterType, &uiSlotsRequired, sName, &uiNameLength, sUnits, &uiUnitsLength, sDesc, &uiDescLength ) ) )

  003b7	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  003bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003bf	48 8d 8c 24 64
	01 00 00	 lea	 rcx, QWORD PTR uiDescLength$[rsp]
  003c7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003cc	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR sDesc$23[rsp]
  003d4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003d9	48 8d 8c 24 44
	01 00 00	 lea	 rcx, QWORD PTR uiUnitsLength$[rsp]
  003e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003e6	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR sUnits$22[rsp]
  003ee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003f3	48 8d 8c 24 24
	01 00 00	 lea	 rcx, QWORD PTR uiNameLength$[rsp]
  003fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00400	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR sName$21[rsp]
  00408	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0040d	4c 8d 8c 24 04
	01 00 00	 lea	 r9, QWORD PTR uiSlotsRequired$[rsp]
  00415	4c 8d 84 24 c4
	01 00 00	 lea	 r8, QWORD PTR counterType$20[rsp]
  0041d	48 8d 94 24 a8
	01 00 00	 lea	 rdx, QWORD PTR counterDescription$19[rsp]
  00425	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0042a	ff 90 00 01 00
	00		 call	 QWORD PTR [rax+256]
  00430	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax
  00437	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  0043f	0f 8c bc 00 00
	00		 jl	 $LN14@getIntelDe

; 425  :             {
; 426  :                 if ( strcmp( sName, INTEL_DEVICE_INFO_COUNTERS ) == 0 )

  00445	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113250
  0044c	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR sName$21[rsp]
  00454	e8 00 00 00 00	 call	 strcmp
  00459	85 c0		 test	 eax, eax
  0045b	0f 85 a0 00 00
	00		 jne	 $LN15@getIntelDe

; 427  :                 {
; 428  :                     int IntelCounterMajorVersion;
; 429  :                     int IntelCounterSize;
; 430  :                     int argsFilled = 0;

  00461	c7 84 24 24 02
	00 00 00 00 00
	00		 mov	 DWORD PTR argsFilled$26[rsp], 0

; 431  : 
; 432  :                     pIntelCounterDesc.Counter = counterDescription.Counter;

  0046c	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR counterDescription$19[rsp]
  00473	89 84 24 e8 00
	00 00		 mov	 DWORD PTR pIntelCounterDesc$[rsp], eax

; 433  : 
; 434  :                     argsFilled = sscanf_s( sDesc, "Version %d", &IntelCounterMajorVersion);

  0047a	4c 8d 84 24 f4
	01 00 00	 lea	 r8, QWORD PTR IntelCounterMajorVersion$24[rsp]
  00482	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113251
  00489	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR sDesc$23[rsp]
  00491	e8 00 00 00 00	 call	 sscanf_s
  00496	89 84 24 24 02
	00 00		 mov	 DWORD PTR argsFilled$26[rsp], eax

; 435  :                     
; 436  :                     if ( argsFilled != 1 || 1 != sscanf_s( sUnits, "Size %d", &IntelCounterSize))

  0049d	83 bc 24 24 02
	00 00 01	 cmp	 DWORD PTR argsFilled$26[rsp], 1
  004a5	75 21		 jne	 SHORT $LN17@getIntelDe
  004a7	4c 8d 84 24 14
	02 00 00	 lea	 r8, QWORD PTR IntelCounterSize$25[rsp]
  004af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113254
  004b6	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR sUnits$22[rsp]
  004be	e8 00 00 00 00	 call	 sscanf_s
  004c3	83 f8 01	 cmp	 eax, 1
  004c6	74 16		 je	 SHORT $LN16@getIntelDe
$LN17@getIntelDe:

; 437  :                     {
; 438  :                         // Fall back to version 1.0
; 439  :                         IntelCounterMajorVersion = 1;

  004c8	c7 84 24 f4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR IntelCounterMajorVersion$24[rsp], 1

; 440  :                         IntelCounterSize = sizeof( IntelDeviceInfoV1 );

  004d3	c7 84 24 14 02
	00 00 08 00 00
	00		 mov	 DWORD PTR IntelCounterSize$25[rsp], 8
$LN16@getIntelDe:

; 441  :                     }
; 442  : 
; 443  :                     pIntelDeviceInfoHeader->Version = IntelCounterMajorVersion;

  004de	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR pIntelDeviceInfoHeader$[rsp]
  004e6	8b 8c 24 f4 01
	00 00		 mov	 ecx, DWORD PTR IntelCounterMajorVersion$24[rsp]
  004ed	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 444  :                     pIntelDeviceInfoHeader->Size = IntelCounterSize;

  004f0	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR pIntelDeviceInfoHeader$[rsp]
  004f8	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR IntelCounterSize$25[rsp]
  004ff	89 08		 mov	 DWORD PTR [rax], ecx
$LN15@getIntelDe:
$LN14@getIntelDe:

; 445  :                 }
; 446  :             }
; 447  :             
; 448  :             SAFE_DELETE_ARRAY( sName );

  00501	48 83 bc 24 d8
	01 00 00 00	 cmp	 QWORD PTR sName$21[rsp], 0
  0050a	74 29		 je	 SHORT $LN18@getIntelDe
  0050c	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR sName$21[rsp]
  00514	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR $T30[rsp], rax
  0051c	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR $T30[rsp]
  00524	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00529	48 c7 84 24 d8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR sName$21[rsp], 0
$LN18@getIntelDe:

; 449  :             SAFE_DELETE_ARRAY( sUnits );

  00535	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR sUnits$22[rsp], 0
  0053e	74 29		 je	 SHORT $LN19@getIntelDe
  00540	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR sUnits$22[rsp]
  00548	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR $T31[rsp], rax
  00550	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR $T31[rsp]
  00558	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  0055d	48 c7 84 24 e0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR sUnits$22[rsp], 0
$LN19@getIntelDe:

; 450  :             SAFE_DELETE_ARRAY( sDesc );

  00569	48 83 bc 24 e8
	01 00 00 00	 cmp	 QWORD PTR sDesc$23[rsp], 0
  00572	74 29		 je	 SHORT $LN20@getIntelDe
  00574	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR sDesc$23[rsp]
  0057c	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR $T32[rsp], rax
  00584	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR $T32[rsp]
  0058c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00591	48 c7 84 24 e8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR sDesc$23[rsp], 0
$LN20@getIntelDe:
$LN13@getIntelDe:

; 451  :         }
; 452  :     }

  0059d	e9 73 fc ff ff	 jmp	 $LN2@getIntelDe
$LN3@getIntelDe:

; 453  : 
; 454  :     // Check if device info counter was found
; 455  :     if ( pIntelCounterDesc.Counter == NULL )

  005a2	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR pIntelCounterDesc$[rsp], 0
  005aa	75 58		 jne	 SHORT $LN21@getIntelDe

; 456  :     {
; 457  :         SAFE_RELEASE( pImmediateContext );

  005ac	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  005b2	74 19		 je	 SHORT $LN22@getIntelDe
  005b4	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  005b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  005c1	ff 50 10	 call	 QWORD PTR [rax+16]
  005c4	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN22@getIntelDe:

; 458  :         SAFE_RELEASE( pDevice );

  005cd	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  005d3	74 19		 je	 SHORT $LN23@getIntelDe
  005d5	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  005da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005dd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  005e2	ff 50 10	 call	 QWORD PTR [rax+16]
  005e5	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN23@getIntelDe:

; 459  : 
; 460  :         printf("Could not find counter\n");

  005ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113261
  005f5	e8 00 00 00 00	 call	 printf

; 461  : 
; 462  :         // The driver does not support the Device Info Counter.
; 463  :         return GGF_E_UNSUPPORTED_DRIVER;

  005fa	b8 fd ff ff ff	 mov	 eax, -3
  005ff	e9 58 03 00 00	 jmp	 $LN1@getIntelDe
$LN21@getIntelDe:

; 464  :     }
; 465  :     
; 466  :     // Intel Device Counter //
; 467  :     ID3D11Counter *pIntelCounter = NULL;

  00604	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR pIntelCounter$[rsp], 0

; 468  : 
; 469  :     // Create the appropriate counter
; 470  :     hr = pDevice->CreateCounter(&pIntelCounterDesc, &pIntelCounter);

  00610	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  00615	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00618	4c 8d 84 24 38
	02 00 00	 lea	 r8, QWORD PTR pIntelCounter$[rsp]
  00620	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR pIntelCounterDesc$[rsp]
  00628	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0062d	ff 90 d0 00 00
	00		 call	 QWORD PTR [rax+208]
  00633	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax

; 471  :     if ( FAILED(hr) )

  0063a	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  00642	0f 8d 85 00 00
	00		 jge	 $LN24@getIntelDe

; 472  :     {
; 473  :         SAFE_RELEASE( pIntelCounter );

  00648	48 83 bc 24 38
	02 00 00 00	 cmp	 QWORD PTR pIntelCounter$[rsp], 0
  00651	74 22		 je	 SHORT $LN25@getIntelDe
  00653	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR pIntelCounter$[rsp]
  0065b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0065e	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR pIntelCounter$[rsp]
  00666	ff 50 10	 call	 QWORD PTR [rax+16]
  00669	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR pIntelCounter$[rsp], 0
$LN25@getIntelDe:

; 474  :         SAFE_RELEASE( pImmediateContext );

  00675	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  0067b	74 19		 je	 SHORT $LN26@getIntelDe
  0067d	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  00682	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00685	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  0068a	ff 50 10	 call	 QWORD PTR [rax+16]
  0068d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN26@getIntelDe:

; 475  :         SAFE_RELEASE( pDevice );

  00696	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  0069c	74 19		 je	 SHORT $LN27@getIntelDe
  0069e	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  006a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  006ab	ff 50 10	 call	 QWORD PTR [rax+16]
  006ae	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN27@getIntelDe:

; 476  : 
; 477  :         printf("CreateCounter failed\n");

  006b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113266
  006be	e8 00 00 00 00	 call	 printf

; 478  : 
; 479  :         return GGF_E_D3D_ERROR;

  006c3	b8 fc ff ff ff	 mov	 eax, -4
  006c8	e9 8f 02 00 00	 jmp	 $LN1@getIntelDe
$LN24@getIntelDe:

; 480  :     }
; 481  : 
; 482  :     // Begin and end counter capture
; 483  :     pImmediateContext->Begin(pIntelCounter);

  006cd	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  006d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006d5	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR pIntelCounter$[rsp]
  006dd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  006e2	ff 90 d8 00 00
	00		 call	 QWORD PTR [rax+216]

; 484  :     pImmediateContext->End(pIntelCounter);

  006e8	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  006ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006f0	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR pIntelCounter$[rsp]
  006f8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  006fd	ff 90 e0 00 00
	00		 call	 QWORD PTR [rax+224]

; 485  : 
; 486  :     // Check for available data
; 487  :     hr = pImmediateContext->GetData( pIntelCounter, NULL, NULL, NULL );

  00703	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  00708	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0070b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00713	45 33 c9	 xor	 r9d, r9d
  00716	45 33 c0	 xor	 r8d, r8d
  00719	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR pIntelCounter$[rsp]
  00721	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  00726	ff 90 e8 00 00
	00		 call	 QWORD PTR [rax+232]
  0072c	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax

; 488  :     if ( FAILED(hr) || hr == S_FALSE )

  00733	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  0073b	7c 0e		 jl	 SHORT $LN29@getIntelDe
  0073d	83 bc 24 a4 00
	00 00 01	 cmp	 DWORD PTR hr$[rsp], 1
  00745	0f 85 85 00 00
	00		 jne	 $LN28@getIntelDe
$LN29@getIntelDe:

; 489  :     {
; 490  :         SAFE_RELEASE( pIntelCounter );

  0074b	48 83 bc 24 38
	02 00 00 00	 cmp	 QWORD PTR pIntelCounter$[rsp], 0
  00754	74 22		 je	 SHORT $LN30@getIntelDe
  00756	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR pIntelCounter$[rsp]
  0075e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00761	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR pIntelCounter$[rsp]
  00769	ff 50 10	 call	 QWORD PTR [rax+16]
  0076c	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR pIntelCounter$[rsp], 0
$LN30@getIntelDe:

; 491  :         SAFE_RELEASE( pImmediateContext );

  00778	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  0077e	74 19		 je	 SHORT $LN31@getIntelDe
  00780	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  00785	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00788	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  0078d	ff 50 10	 call	 QWORD PTR [rax+16]
  00790	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN31@getIntelDe:

; 492  :         SAFE_RELEASE( pDevice );

  00799	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  0079f	74 19		 je	 SHORT $LN32@getIntelDe
  007a1	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  007a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  007ae	ff 50 10	 call	 QWORD PTR [rax+16]
  007b1	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN32@getIntelDe:

; 493  : 
; 494  :         printf("Getdata failed \n");

  007ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113272
  007c1	e8 00 00 00 00	 call	 printf

; 495  :         return GGF_E_D3D_ERROR;

  007c6	b8 fc ff ff ff	 mov	 eax, -4
  007cb	e9 8c 01 00 00	 jmp	 $LN1@getIntelDe
$LN28@getIntelDe:

; 496  :     }
; 497  :     
; 498  :     DWORD pData[2] = {0};

  007d0	48 8d 84 24 58
	02 00 00	 lea	 rax, QWORD PTR pData$[rsp]
  007d8	48 8b f8	 mov	 rdi, rax
  007db	33 c0		 xor	 eax, eax
  007dd	b9 08 00 00 00	 mov	 ecx, 8
  007e2	f3 aa		 rep stosb

; 499  :     // Get pointer to structure
; 500  :     hr = pImmediateContext->GetData(pIntelCounter, pData, 2*sizeof(DWORD), NULL);

  007e4	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  007e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007ec	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  007f4	41 b9 08 00 00
	00		 mov	 r9d, 8
  007fa	4c 8d 84 24 58
	02 00 00	 lea	 r8, QWORD PTR pData$[rsp]
  00802	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR pIntelCounter$[rsp]
  0080a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  0080f	ff 90 e8 00 00
	00		 call	 QWORD PTR [rax+232]
  00815	89 84 24 a4 00
	00 00		 mov	 DWORD PTR hr$[rsp], eax

; 501  : 
; 502  :     if ( FAILED(hr) || hr == S_FALSE )

  0081c	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR hr$[rsp], 0
  00824	7c 0e		 jl	 SHORT $LN34@getIntelDe
  00826	83 bc 24 a4 00
	00 00 01	 cmp	 DWORD PTR hr$[rsp], 1
  0082e	0f 85 85 00 00
	00		 jne	 $LN33@getIntelDe
$LN34@getIntelDe:

; 503  :     {
; 504  :         SAFE_RELEASE( pIntelCounter );

  00834	48 83 bc 24 38
	02 00 00 00	 cmp	 QWORD PTR pIntelCounter$[rsp], 0
  0083d	74 22		 je	 SHORT $LN35@getIntelDe
  0083f	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR pIntelCounter$[rsp]
  00847	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0084a	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR pIntelCounter$[rsp]
  00852	ff 50 10	 call	 QWORD PTR [rax+16]
  00855	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR pIntelCounter$[rsp], 0
$LN35@getIntelDe:

; 505  :         SAFE_RELEASE( pImmediateContext );

  00861	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  00867	74 19		 je	 SHORT $LN36@getIntelDe
  00869	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  0086e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00871	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  00876	ff 50 10	 call	 QWORD PTR [rax+16]
  00879	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN36@getIntelDe:

; 506  :         SAFE_RELEASE( pDevice );

  00882	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  00888	74 19		 je	 SHORT $LN37@getIntelDe
  0088a	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  0088f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00892	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  00897	ff 50 10	 call	 QWORD PTR [rax+16]
  0089a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN37@getIntelDe:

; 507  : 
; 508  :         printf("Getdata failed \n");

  008a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113278
  008aa	e8 00 00 00 00	 call	 printf

; 509  :         return GGF_E_D3D_ERROR;

  008af	b8 fc ff ff ff	 mov	 eax, -4
  008b4	e9 a3 00 00 00	 jmp	 $LN1@getIntelDe
$LN33@getIntelDe:

; 510  :     }
; 511  : 
; 512  :     //
; 513  :     // Prepare data to be returned //
; 514  :     //
; 515  :     // Copy data to passed in parameter
; 516  :     void *pDeviceInfoBuffer = *(void**)pData;

  008b9	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR pData$[rsp]
  008c1	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR pDeviceInfoBuffer$[rsp], rax

; 517  : 
; 518  :     memcpy( pIntelDeviceInfoBuffer, pDeviceInfoBuffer, pIntelDeviceInfoHeader->Size );

  008c9	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR pIntelDeviceInfoHeader$[rsp]
  008d1	8b 00		 mov	 eax, DWORD PTR [rax]
  008d3	44 8b c0	 mov	 r8d, eax
  008d6	48 8b 94 24 68
	02 00 00	 mov	 rdx, QWORD PTR pDeviceInfoBuffer$[rsp]
  008de	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR pIntelDeviceInfoBuffer$[rsp]
  008e6	e8 00 00 00 00	 call	 memcpy

; 519  : 
; 520  :     //
; 521  :     // Clean up //
; 522  :     //
; 523  :     SAFE_RELEASE( pIntelCounter );

  008eb	48 83 bc 24 38
	02 00 00 00	 cmp	 QWORD PTR pIntelCounter$[rsp], 0
  008f4	74 22		 je	 SHORT $LN38@getIntelDe
  008f6	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR pIntelCounter$[rsp]
  008fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00901	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR pIntelCounter$[rsp]
  00909	ff 50 10	 call	 QWORD PTR [rax+16]
  0090c	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR pIntelCounter$[rsp], 0
$LN38@getIntelDe:

; 524  :     SAFE_RELEASE( pImmediateContext );

  00918	48 83 7c 24 78
	00		 cmp	 QWORD PTR pImmediateContext$[rsp], 0
  0091e	74 19		 je	 SHORT $LN39@getIntelDe
  00920	48 8b 44 24 78	 mov	 rax, QWORD PTR pImmediateContext$[rsp]
  00925	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00928	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pImmediateContext$[rsp]
  0092d	ff 50 10	 call	 QWORD PTR [rax+16]
  00930	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pImmediateContext$[rsp], 0
$LN39@getIntelDe:

; 525  :     SAFE_RELEASE( pDevice );

  00939	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDevice$[rsp], 0
  0093f	74 19		 je	 SHORT $LN40@getIntelDe
  00941	48 8b 44 24 58	 mov	 rax, QWORD PTR pDevice$[rsp]
  00946	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00949	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDevice$[rsp]
  0094e	ff 50 10	 call	 QWORD PTR [rax+16]
  00951	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pDevice$[rsp], 0
$LN40@getIntelDe:

; 526  : 
; 527  :     return GGF_SUCCESS;

  0095a	33 c0		 xor	 eax, eax
$LN1@getIntelDe:

; 528  : }

  0095c	48 8b f8	 mov	 rdi, rax
  0095f	48 8b cc	 mov	 rcx, rsp
  00962	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z$rtcFrameData
  00969	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0096e	48 8b c7	 mov	 rax, rdi
  00971	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00979	48 33 cc	 xor	 rcx, rsp
  0097c	e8 00 00 00 00	 call	 __security_check_cookie
  00981	48 81 c4 b0 02
	00 00		 add	 rsp, 688		; 000002b0H
  00988	5f		 pop	 rdi
  00989	c3		 ret	 0
?getIntelDeviceInfo@@YAJIPEAUIntelDeviceInfoHeader@@PEAX@Z ENDP ; getIntelDeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
presets$ = 32
fp$ = 56
cfgFileName$ = 72
line$9 = 96
context$10 = 232
szVendorId$11 = 248
szDeviceId$12 = 256
szPresetLevel$13 = 264
i$14 = 272
vId$15 = 292
dId$16 = 324
s$17 = 360
$T18 = 400
tv64 = 408
__$ArrayPad$ = 416
VendorId$ = 448
DeviceId$ = 456
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z PROC ; getDefaultFidelityPresets

; 172  : {

$LN29:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00010	48 8b fc	 mov	 rdi, rsp
  00013	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR [rsp+448]
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 173  :     PresetLevel presets = Undefined;

  00038	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR presets$[rsp], 5

; 174  : 
; 175  :     //
; 176  :     // Look for a config file that qualifies devices from any vendor
; 177  :     // The code here looks for a file with one line per recognized graphics
; 178  :     // device in the following format:
; 179  :     //
; 180  :     // VendorIDHex, DeviceIDHex, CapabilityEnum      ;Commented name of card
; 181  :     //
; 182  : 
; 183  :     FILE *fp = NULL;

  00040	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR fp$[rsp], 0

; 184  :     const char *cfgFileName = "IntelGfx.cfg";

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG113120
  00050	48 89 44 24 48	 mov	 QWORD PTR cfgFileName$[rsp], rax

; 185  : 
; 186  :     switch( VendorId )

  00055	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR VendorId$[rsp]
  0005c	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv64[rsp], eax
  00063	81 bc 24 98 01
	00 00 86 80 00
	00		 cmp	 DWORD PTR tv64[rsp], 32902 ; 00008086H
  0006e	74 02		 je	 SHORT $LN9@getDefault
  00070	eb 17		 jmp	 SHORT $LN10@getDefault
$LN9@getDefault:

; 187  :     {
; 188  :     case 0x8086:
; 189  :         fopen_s( &fp, cfgFileName, "r" );

  00072	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG113122
  00079	48 8b 54 24 48	 mov	 rdx, QWORD PTR cfgFileName$[rsp]
  0007e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR fp$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen_s
$LN10@getDefault:

; 190  :         break;
; 191  : 
; 192  :         // Add cases to handle other graphics vendors. 
; 193  :         // The following commented out code is an example case.
; 194  :         //case 0x1002:
; 195  :         //    fopen_s ( &fp, "ATI.cfg", "r" );
; 196  :         //    break;
; 197  : 
; 198  :         //case 0x10DE:
; 199  :         //    fopen_s ( &fp, "Nvidia.cfg", "r" );
; 200  :         //    break;
; 201  : 
; 202  :     default:
; 203  :         break;
; 204  :     }
; 205  : 
; 206  : 
; 207  :     if( fp )

  00089	48 83 7c 24 38
	00		 cmp	 QWORD PTR fp$[rsp], 0
  0008f	0f 84 6f 02 00
	00		 je	 $LN11@getDefault

; 208  :     {
; 209  :         char line[100];
; 210  :         char* context = NULL;

  00095	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR context$10[rsp], 0

; 211  : 
; 212  :         char* szVendorId = NULL;

  000a1	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR szVendorId$11[rsp], 0

; 213  :         char* szDeviceId = NULL;

  000ad	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR szDeviceId$12[rsp], 0

; 214  :         char* szPresetLevel = NULL;

  000b9	48 c7 84 24 08
	01 00 00 00 00
	00 00		 mov	 QWORD PTR szPresetLevel$13[rsp], 0
$LN28@getDefault:
$LN4@getDefault:

; 215  : 
; 216  :         while( fgets( line, 100, fp ) )   // read one line at a time till EOF

  000c5	4c 8b 44 24 38	 mov	 r8, QWORD PTR fp$[rsp]
  000ca	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  000cf	48 8d 4c 24 60	 lea	 rcx, QWORD PTR line$9[rsp]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  000da	48 85 c0	 test	 rax, rax
  000dd	0f 84 14 02 00
	00		 je	 $LN5@getDefault

; 217  :         {
; 218  :             // Parse and remove the comment part of any line
; 219  :             int i; for( i = 0; line[i] && line[i] != ';'; i++ ); line[i] = '\0';

  000e3	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$14[rsp], 0
  000ee	eb 10		 jmp	 SHORT $LN8@getDefault
$LN6@getDefault:
  000f0	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR i$14[rsp]
  000f7	ff c0		 inc	 eax
  000f9	89 84 24 10 01
	00 00		 mov	 DWORD PTR i$14[rsp], eax
$LN8@getDefault:
  00100	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR i$14[rsp]
  00108	0f be 44 04 60	 movsx	 eax, BYTE PTR line$9[rsp+rax]
  0010d	85 c0		 test	 eax, eax
  0010f	74 14		 je	 SHORT $LN7@getDefault
  00111	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR i$14[rsp]
  00119	0f be 44 04 60	 movsx	 eax, BYTE PTR line$9[rsp+rax]
  0011e	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  00121	74 02		 je	 SHORT $LN7@getDefault
  00123	eb cb		 jmp	 SHORT $LN6@getDefault
$LN7@getDefault:
  00125	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR i$14[rsp]
  0012d	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR $T18[rsp], rax
  00135	48 83 bc 24 90
	01 00 00 64	 cmp	 QWORD PTR $T18[rsp], 100 ; 00000064H
  0013e	73 02		 jae	 SHORT $LN26@getDefault
  00140	eb 05		 jmp	 SHORT $LN27@getDefault
$LN26@getDefault:
  00142	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN27@getDefault:
  00147	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR $T18[rsp]
  0014f	c6 44 04 60 00	 mov	 BYTE PTR line$9[rsp+rax], 0

; 220  : 
; 221  :             // Try to extract VendorId, DeviceId and recommended Default Preset Level
; 222  :             szVendorId    = strtok_s( line, ",\n", &context );

  00154	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR context$10[rsp]
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113126
  00163	48 8d 4c 24 60	 lea	 rcx, QWORD PTR line$9[rsp]
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_s
  0016e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR szVendorId$11[rsp], rax

; 223  :             szDeviceId    = strtok_s( NULL, ",\n", &context );

  00176	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR context$10[rsp]
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113127
  00185	33 c9		 xor	 ecx, ecx
  00187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_s
  0018d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR szDeviceId$12[rsp], rax

; 224  :             szPresetLevel = strtok_s( NULL, ",\n", &context );

  00195	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR context$10[rsp]
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113128
  001a4	33 c9		 xor	 ecx, ecx
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_s
  001ac	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR szPresetLevel$13[rsp], rax

; 225  : 
; 226  :             if( ( szVendorId == NULL ) ||
; 227  :                 ( szDeviceId == NULL ) ||

  001b4	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR szVendorId$11[rsp], 0
  001bd	74 16		 je	 SHORT $LN14@getDefault
  001bf	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR szDeviceId$12[rsp], 0
  001c8	74 0b		 je	 SHORT $LN14@getDefault
  001ca	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR szPresetLevel$13[rsp], 0
  001d3	75 05		 jne	 SHORT $LN13@getDefault
$LN14@getDefault:

; 228  :                 ( szPresetLevel == NULL ) )
; 229  :             {
; 230  :                 continue;  // blank or improper line in cfg file - skip to next line

  001d5	e9 eb fe ff ff	 jmp	 $LN4@getDefault
$LN13@getDefault:

; 231  :             }
; 232  : 
; 233  :             unsigned int vId, dId;
; 234  :             sscanf_s( szVendorId, "%x", &vId );

  001da	4c 8d 84 24 24
	01 00 00	 lea	 r8, QWORD PTR vId$15[rsp]
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113131
  001e9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR szVendorId$11[rsp]
  001f1	e8 00 00 00 00	 call	 sscanf_s

; 235  :             sscanf_s( szDeviceId, "%x", &dId );

  001f6	4c 8d 84 24 44
	01 00 00	 lea	 r8, QWORD PTR dId$16[rsp]
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113132
  00205	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR szDeviceId$12[rsp]
  0020d	e8 00 00 00 00	 call	 sscanf_s

; 236  : 
; 237  :             // If current graphics device is found in the cfg file, use the 
; 238  :             // pre-configured default Graphics Presets setting.
; 239  :             if( ( vId == VendorId ) && ( dId == DeviceId ) )

  00212	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR VendorId$[rsp]
  00219	39 84 24 24 01
	00 00		 cmp	 DWORD PTR vId$15[rsp], eax
  00220	0f 85 cc 00 00
	00		 jne	 $LN15@getDefault
  00226	8b 84 24 c8 01
	00 00		 mov	 eax, DWORD PTR DeviceId$[rsp]
  0022d	39 84 24 44 01
	00 00		 cmp	 DWORD PTR dId$16[rsp], eax
  00234	0f 85 b8 00 00
	00		 jne	 $LN15@getDefault

; 240  :             {
; 241  :                 // Found the device
; 242  :                 char s[10];
; 243  :                 sscanf_s( szPresetLevel, "%s", s, (int)_countof( s ) );

  0023a	41 b9 0a 00 00
	00		 mov	 r9d, 10
  00240	4c 8d 84 24 68
	01 00 00	 lea	 r8, QWORD PTR s$17[rsp]
  00248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113134
  0024f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR szPresetLevel$13[rsp]
  00257	e8 00 00 00 00	 call	 sscanf_s

; 244  : 
; 245  :                 if( !_stricmp( s, "Low" ) )

  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113137
  00263	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR s$17[rsp]
  0026b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00271	85 c0		 test	 eax, eax
  00273	75 0a		 jne	 SHORT $LN16@getDefault

; 246  :                     presets = Low;

  00275	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR presets$[rsp], 1
  0027d	eb 71		 jmp	 SHORT $LN17@getDefault
$LN16@getDefault:

; 247  :                 else if( !_stricmp( s, "Medium" ) )

  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113140
  00286	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR s$17[rsp]
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00294	85 c0		 test	 eax, eax
  00296	75 0a		 jne	 SHORT $LN18@getDefault

; 248  :                     presets = Medium;

  00298	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR presets$[rsp], 2
  002a0	eb 4e		 jmp	 SHORT $LN19@getDefault
$LN18@getDefault:

; 249  :                 else if( !_stricmp( s, "Medium+" ) )

  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113143
  002a9	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR s$17[rsp]
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002b7	85 c0		 test	 eax, eax
  002b9	75 0a		 jne	 SHORT $LN20@getDefault

; 250  :                     presets = MediumPlus;

  002bb	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR presets$[rsp], 3
  002c3	eb 2b		 jmp	 SHORT $LN21@getDefault
$LN20@getDefault:

; 251  :                 else if( !_stricmp( s, "High" ) )

  002c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG113146
  002cc	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR s$17[rsp]
  002d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002da	85 c0		 test	 eax, eax
  002dc	75 0a		 jne	 SHORT $LN22@getDefault

; 252  :                     presets = High;

  002de	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR presets$[rsp], 4
  002e6	eb 08		 jmp	 SHORT $LN23@getDefault
$LN22@getDefault:

; 253  :                 else
; 254  :                     presets = NotCompatible;

  002e8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR presets$[rsp], 0
$LN23@getDefault:
$LN21@getDefault:
$LN19@getDefault:
$LN17@getDefault:

; 255  : 
; 256  :                 break; // Done reading file.

  002f0	eb 05		 jmp	 SHORT $LN5@getDefault
$LN15@getDefault:

; 257  :             }
; 258  :         }

  002f2	e9 ce fd ff ff	 jmp	 $LN28@getDefault
$LN5@getDefault:

; 259  : 
; 260  :         fclose( fp );  // Close open file handle

  002f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR fp$[rsp]
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 261  :     }

  00302	eb 11		 jmp	 SHORT $LN12@getDefault
$LN11@getDefault:

; 262  :     else
; 263  :     {
; 264  :         printf("%s not found! Presets undefined.\n", cfgFileName);

  00304	48 8b 54 24 48	 mov	 rdx, QWORD PTR cfgFileName$[rsp]
  00309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG113147
  00310	e8 00 00 00 00	 call	 printf
$LN12@getDefault:

; 265  :     }
; 266  : 
; 267  :     // If the current graphics device was not listed in any of the config
; 268  :     // files, or if config file not found, use Low settings as default.
; 269  :     // This should be changed to reflect the desired behavior for unknown
; 270  :     // graphics devices.
; 271  :     if( presets == Undefined )

  00315	83 7c 24 20 05	 cmp	 DWORD PTR presets$[rsp], 5
  0031a	75 08		 jne	 SHORT $LN24@getDefault

; 272  :         presets = Low;

  0031c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR presets$[rsp], 1
$LN24@getDefault:

; 273  : 
; 274  :     return presets;

  00324	8b 44 24 20	 mov	 eax, DWORD PTR presets$[rsp]
$LN25@getDefault:

; 275  : }

  00328	48 8b f8	 mov	 rdi, rax
  0032b	48 8b cc	 mov	 rcx, rsp
  0032e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z$rtcFrameData
  00335	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0033a	48 8b c7	 mov	 rax, rdi
  0033d	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00345	48 33 cc	 xor	 rcx, rsp
  00348	e8 00 00 00 00	 call	 __security_check_cookie
  0034d	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  00354	5f		 pop	 rdi
  00355	c3		 ret	 0
?getDefaultFidelityPresets@@YA?AW4PresetLevel@@II@Z ENDP ; getDefaultFidelityPresets
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\DeviceId.cpp
_TEXT	SEGMENT
retVal$ = 32
AdapterDesc$ = 64
__$ArrayPad$ = 384
VendorId$ = 416
DeviceId$ = 424
VideoMemory$ = 432
?getGraphicsDeviceInfo@@YA_NPEAI00@Z PROC		; getGraphicsDeviceInfo

; 134  : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 90 01
	00 00		 sub	 rsp, 400		; 00000190H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+416]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 135  :     bool retVal = false;

  00040	c6 44 24 20 00	 mov	 BYTE PTR retVal$[rsp], 0

; 136  :     if( ( VendorId == NULL ) || ( DeviceId == NULL ) )

  00045	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR VendorId$[rsp], 0
  0004e	74 0b		 je	 SHORT $LN3@getGraphic
  00050	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR DeviceId$[rsp], 0
  00059	75 07		 jne	 SHORT $LN2@getGraphic
$LN3@getGraphic:

; 137  :         return retVal;

  0005b	0f b6 44 24 20	 movzx	 eax, BYTE PTR retVal$[rsp]
  00060	eb 66		 jmp	 SHORT $LN1@getGraphic
$LN2@getGraphic:

; 138  :     
; 139  :     DXGI_ADAPTER_DESC AdapterDesc;
; 140  :     if(getDXGIAdapterDesc(&AdapterDesc))

  00062	33 d2		 xor	 edx, edx
  00064	48 8d 4c 24 40	 lea	 rcx, QWORD PTR AdapterDesc$[rsp]
  00069	e8 00 00 00 00	 call	 ?getDXGIAdapterDesc@@YA_NPEAUDXGI_ADAPTER_DESC@@I@Z ; getDXGIAdapterDesc
  0006e	0f b6 c0	 movzx	 eax, al
  00071	85 c0		 test	 eax, eax
  00073	74 49		 je	 SHORT $LN4@getGraphic

; 141  :     {
; 142  :         *VendorId = AdapterDesc.VendorId;

  00075	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR VendorId$[rsp]
  0007d	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR AdapterDesc$[rsp+256]
  00084	89 08		 mov	 DWORD PTR [rax], ecx

; 143  :         *DeviceId = AdapterDesc.DeviceId;

  00086	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR DeviceId$[rsp]
  0008e	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR AdapterDesc$[rsp+260]
  00095	89 08		 mov	 DWORD PTR [rax], ecx

; 144  :         *VideoMemory = (unsigned int)(AdapterDesc.DedicatedVideoMemory + AdapterDesc.SharedSystemMemory);

  00097	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR AdapterDesc$[rsp+288]
  0009f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR AdapterDesc$[rsp+272]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR VideoMemory$[rsp]
  000b5	89 01		 mov	 DWORD PTR [rcx], eax

; 145  :         retVal = true;

  000b7	c6 44 24 20 01	 mov	 BYTE PTR retVal$[rsp], 1

; 146  :     }

  000bc	eb 05		 jmp	 SHORT $LN5@getGraphic
$LN4@getGraphic:

; 147  :     else
; 148  :     {
; 149  :    //     if(getDeviceIdD3D9(VendorId, DeviceId) && getVideoMemory(VideoMemory))
; 150  :             //retVal = true;
; 151  :         retVal = false;

  000be	c6 44 24 20 00	 mov	 BYTE PTR retVal$[rsp], 0
$LN5@getGraphic:

; 152  :     }
; 153  :         
; 154  :     return retVal;

  000c3	0f b6 44 24 20	 movzx	 eax, BYTE PTR retVal$[rsp]
$LN1@getGraphic:

; 155  : }

  000c8	48 8b f8	 mov	 rdi, rax
  000cb	48 8b cc	 mov	 rcx, rsp
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getGraphicsDeviceInfo@@YA_NPEAI00@Z$rtcFrameData
  000d5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000da	48 8b c7	 mov	 rax, rdi
  000dd	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e5	48 33 cc	 xor	 rcx, rsp
  000e8	e8 00 00 00 00	 call	 __security_check_cookie
  000ed	48 81 c4 90 01
	00 00		 add	 rsp, 400		; 00000190H
  000f4	5f		 pop	 rdi
  000f5	c3		 ret	 0
?getGraphicsDeviceInfo@@YA_NPEAI00@Z ENDP		; getGraphicsDeviceInfo
_TEXT	ENDS
END
