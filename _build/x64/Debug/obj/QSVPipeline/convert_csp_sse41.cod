; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
$SG6927	DB	'Invalid', 00H
$SG6928	DB	'nv12', 00H
	ORG $+3
$SG6929	DB	'yv12', 00H
	ORG $+3
$SG6930	DB	'yuy2', 00H
	ORG $+3
$SG6931	DB	'yuv422', 00H
	ORG $+1
$SG6932	DB	'nv16', 00H
	ORG $+3
$SG6933	DB	'yuv444', 00H
	ORG $+1
$SG6934	DB	'yv12(9bit)', 00H
	ORG $+1
$SG6959	DB	'rgb', 00H
$SG6935	DB	'yv12(10bit)', 00H
$SG6961	DB	'gbr', 00H
$SG6936	DB	'yv12(12bit)', 00H
$SG6964	DB	'y8', 00H
	ORG $+1
$SG6937	DB	'yv12(14bit)', 00H
	ORG $+4
$SG6938	DB	'yv12(16bit)', 00H
$SG6939	DB	'p010', 00H
	ORG $+7
$SG6940	DB	'yuv422(9bit)', 00H
	ORG $+3
$SG6941	DB	'yuv422(10bit)', 00H
	ORG $+2
$SG6942	DB	'yuv422(12bit)', 00H
	ORG $+2
$SG6943	DB	'yuv422(14bit)', 00H
	ORG $+2
$SG6944	DB	'yuv422(16bit)', 00H
	ORG $+2
$SG6945	DB	'p210', 00H
	ORG $+3
$SG6946	DB	'yuv444(9bit)', 00H
	ORG $+3
$SG6947	DB	'yuv444(10bit)', 00H
	ORG $+2
$SG6948	DB	'yuv444(12bit)', 00H
	ORG $+2
$SG6949	DB	'yuv444(14bit)', 00H
	ORG $+2
$SG6950	DB	'yuv444(16bit)', 00H
	ORG $+2
$SG6951	DB	'yuva444', 00H
$SG6952	DB	'yuva444(16bit)', 00H
	ORG $+1
$SG6953	DB	'rgb24r', 00H
	ORG $+1
$SG6954	DB	'rgb32r', 00H
	ORG $+1
$SG6955	DB	'rgb24', 00H
	ORG $+2
$SG6956	DB	'rgb32', 00H
	ORG $+2
$SG6957	DB	'bgr24', 00H
	ORG $+2
$SG6958	DB	'bgr32', 00H
	ORG $+2
$SG6960	DB	'rgba', 00H
	ORG $+3
$SG6962	DB	'gbra', 00H
	ORG $+3
$SG6963	DB	'yc48', 00H
	ORG $+3
$SG6965	DB	'yc16', 00H
	ORG $+3
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_sse41
PUBLIC	?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_sse41
PUBLIC	?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_sse41
PUBLIC	?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_sse41
PUBLIC	?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16bit_to_yc48_sse41
PUBLIC	__xmm@00001000000010000000100000001000
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@08000800080008000800080008000800
PUBLIC	__xmm@082f082f082f082f082f082f082f082f
PUBLIC	__xmm@10001000100010001000100010001000
PUBLIC	__xmm@124a124a124a124a124a124a124a124a
PUBLIC	__xmm@12b412b412b412b412b412b412b412b4
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
	DD	imagerel ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z+284
	DD	imagerel $unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z
$pdata$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
	DD	imagerel ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z+72
	DD	imagerel $unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z
$pdata$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
	DD	imagerel ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z+403
	DD	imagerel $unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z
$pdata$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
	DD	imagerel ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z+535
	DD	imagerel $unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z
$pdata$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
	DD	imagerel ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z+179
	DD	imagerel $unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z
$pdata$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z+233
	DD	imagerel $unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z
$pdata$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
	DD	imagerel ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z+901
	DD	imagerel $unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z
$pdata$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z DD imagerel ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z
	DD	imagerel ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z+276
	DD	imagerel $unwind$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z
$pdata$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z DD imagerel ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z
	DD	imagerel ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z+544
	DD	imagerel $unwind$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z
$pdata$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
	DD	imagerel ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z+598
	DD	imagerel $unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z
$pdata$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z DD imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z
	DD	imagerel ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z+582
	DD	imagerel $unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z
$pdata$?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1879
	DD	imagerel $unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2185
	DD	imagerel $unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+2539
	DD	imagerel $unwind$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1909
	DD	imagerel $unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
$pdata$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD imagerel ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
	DD	imagerel ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z+1272
	DD	imagerel $unwind$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z
pdata	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@12b412b412b412b412b412b412b412b4
CONST	SEGMENT
__xmm@12b412b412b412b412b412b412b412b4 DB 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
	DB	0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
CONST	ENDS
;	COMDAT __xmm@124a124a124a124a124a124a124a124a
CONST	SEGMENT
__xmm@124a124a124a124a124a124a124a124a DB 'J', 012H, 'J', 012H, 'J', 012H
	DB	'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H
CONST	ENDS
;	COMDAT __xmm@10001000100010001000100010001000
CONST	SEGMENT
__xmm@10001000100010001000100010001000 DB 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __xmm@082f082f082f082f082f082f082f082f
CONST	SEGMENT
__xmm@082f082f082f082f082f082f082f082f DB '/', 08H, '/', 08H, '/', 08H, '/'
	DB	08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H
CONST	ENDS
;	COMDAT __xmm@08000800080008000800080008000800
CONST	SEGMENT
__xmm@08000800080008000800080008000800 DB 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00001000000010000000100000001000
CONST	SEGMENT
__xmm@00001000000010000000100000001000 DB 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB
CONST	SEGMENT
?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB DB 00H ; `gather_y_u_v_to_yc48'::`2'::shuffle_yc48
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
xdata	SEGMENT
$unwind$?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z DD 033f19H
	DD	07015e219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z DD 022301H
	DD	0700b320fH
$unwind$?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z DD 032e01H
	DD	0140117H
	DD	07010H
$unwind$?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z DD 033301H
	DD	01e011cH
	DD	07015H
$unwind$?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z DD 023001H
	DD	07015d219H
$unwind$?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z DD 023301H
	DD	07015f21cH
$unwind$?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z DD 033301H
	DD	034011cH
	DD	07015H
$unwind$?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z DD 032401H
	DD	012010dH
	DD	07006H
$unwind$?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z DD 032401H
	DD	022010dH
	DD	07006H
$unwind$?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z DD 032e01H
	DD	0280117H
	DD	07010H
$unwind$?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z DD 032e01H
	DD	01c0117H
	DD	07010H
$unwind$?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	075011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0390H
$unwind$?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	085011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0410H
$unwind$?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	09b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	04c0H
$unwind$?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	07b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
$unwind$?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 022d01H
	DD	07015b219H
$unwind$??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z DD 044619H
	DD	043011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
CONST	SEGMENT
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0 DB 079H ; thread_y_range
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_p010_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc DD 038H ; thread_y_range
	DD	0cH
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcName$0
	ORG $+48
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData DD 01H ; thread_y_range
	DD	00H
	DQ	FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcVarDesc
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01a0H ; convert_yc48_to_p010_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0170H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0110H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0d0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	058H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 079H ; convert_yc48_to_p010_i_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_p010_i_simd<0>
	DB	032H
	DB	00H
	ORG $+5
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 05H ; convert_yc48_to_p010_i_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 01b0H ; convert_yc48_to_p010_i_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0180H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0128H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+240
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 078H ; convert_yc48_to_yuv444_simd<0>
	DB	033H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0180H ; convert_yc48_to_yuv444_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	0150H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0120H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	070H
	DB	077H
	DB	05fH
	DB	06fH
	DB	06eH
	DB	065H
	DB	00H
	ORG $+2
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	043H
	DB	05fH
	DB	059H
	DB	043H
	DB	043H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5 DB 078H ; convert_yc48_to_yuv444_16bit_simd<0>
	DB	033H
	DB	00H
	ORG $+1
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 06H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0 DB 079H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	05fH
	DB	072H
	DB	061H
	DB	06eH
	DB	067H
	DB	065H
	DB	00H
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0180H ; convert_yc48_to_yuv444_16bit_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$5
	DD	0150H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$4
	DD	0120H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0e0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+288
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	031H
	DB	00H
	ORG $+1
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	032H
	DB	00H
	ORG $+1
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3 DB 078H ; convert_yuv444_16bit_to_yc48_simd<0>
	DB	033H
	DB	00H
	ORG $+5
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc DD 0100H ; convert_yuv444_16bit_to_yc48_simd<0>
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$3
	DD	0d0H
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$2
	DD	0a0H
	DD	010H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcName$0
	ORG $+192
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData DD 04H ; convert_yuv444_16bit_to_yc48_simd<0>
	DD	00H
	DQ	FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T7 = 88
Y_line$ = 104
U_line$ = 112
V_line$ = 120
pixel$ = 128
x1$ = 160
x2$ = 208
x3$ = 256
y$8 = 276
Y$9 = 280
U$10 = 288
V$11 = 296
ycp_fin$12 = 304
ycp$13 = 312
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
$T20 = 424
$T21 = 448
$T22 = 464
$T23 = 480
tv194 = 496
tv202 = 500
tv210 = 504
__$ArrayPad$ = 512
dst$ = 560
src$ = 568
width$ = 576
src_y_pitch_byte$ = 584
src_uv_pitch_byte$ = 592
dst_y_pitch_byte$ = 600
height$ = 608
dst_height$ = 616
thread_id$ = 624
thread_n$ = 632
crop$ = 640
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16bit_to_yc48_simd<0>

; 1751 : static __forceinline void convert_yuv444_16bit_to_yc48_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 86 00 00 00	 mov	 ecx, 134		; 00000086H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR [rsp+560]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1752 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 78 02
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 70
	02 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 60
	02 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 a8
	01 00 00	 lea	 rcx, QWORD PTR $T20[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T7[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T7[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1753 :     char *Y_line = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000a9	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  000ae	48 63 c9	 movsxd	 rcx, ecx
  000b1	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000b9	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax

; 1754 :     char *U_line = (char *)src[1] + src_y_pitch_byte * y_range.start_src;

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 01	 imul	 rax, rax, 1
  000ce	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  000d5	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  000da	48 63 c9	 movsxd	 rcx, ecx
  000dd	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  000e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000e9	48 8b c1	 mov	 rax, rcx
  000ec	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax

; 1755 :     char *V_line = (char *)src[2] + src_y_pitch_byte * y_range.start_src;

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 02	 imul	 rax, rax, 2
  000fa	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00101	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax

; 1756 :     char *pixel = (char *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  0011d	b8 08 00 00 00	 mov	 eax, 8
  00122	48 6b c0 00	 imul	 rax, rax, 0
  00126	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  0012d	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00132	48 63 c9	 movsxd	 rcx, ecx
  00135	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0013d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1757 :     __m128i x1, x2, x3;
; 1758 :     for (int y = 0; y < y_range.len; y++, pixel += dst_y_pitch_byte, Y_line += src_y_pitch_byte, U_line += src_y_pitch_byte, V_line += src_y_pitch_byte) {

  0014c	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$8[rsp], 0
  00157	eb 76		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  00159	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR y$8[rsp]
  00160	ff c0		 inc	 eax
  00162	89 84 24 14 01
	00 00		 mov	 DWORD PTR y$8[rsp], eax
  00169	48 63 84 24 58
	02 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00171	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00179	48 03 c8	 add	 rcx, rax
  0017c	48 8b c1	 mov	 rax, rcx
  0017f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax
  00187	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  0018f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Y_line$[rsp]
  00194	48 03 c8	 add	 rcx, rax
  00197	48 8b c1	 mov	 rax, rcx
  0019a	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax
  0019f	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR U_line$[rsp]
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax
  001b7	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001bf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR V_line$[rsp]
  001c4	48 03 c8	 add	 rcx, rax
  001c7	48 8b c1	 mov	 rax, rcx
  001ca	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax
$LN4@convert_yu:
  001cf	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  001d3	39 84 24 14 01
	00 00		 cmp	 DWORD PTR y$8[rsp], eax
  001da	0f 8d ef 02 00
	00		 jge	 $LN3@convert_yu

; 1759 :         short *Y = (short *)Y_line;

  001e0	48 8b 44 24 68	 mov	 rax, QWORD PTR Y_line$[rsp]
  001e5	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Y$9[rsp], rax

; 1760 :         short *U = (short *)U_line;

  001ed	48 8b 44 24 70	 mov	 rax, QWORD PTR U_line$[rsp]
  001f2	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR U$10[rsp], rax

; 1761 :         short *V = (short *)V_line;

  001fa	48 8b 44 24 78	 mov	 rax, QWORD PTR V_line$[rsp]
  001ff	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR V$11[rsp], rax

; 1762 :         short *const ycp_fin = (short *)pixel + width * 3;

  00207	6b 84 24 40 02
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  0020f	48 98		 cdqe
  00211	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00219	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0021d	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR ycp_fin$12[rsp], rax

; 1763 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  00225	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pixel$[rsp]
  0022d	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR ycp$13[rsp], rax
  00235	eb 50		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  00237	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  0023f	48 83 c0 30	 add	 rax, 48			; 00000030H
  00243	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR ycp$13[rsp], rax
  0024b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR Y$9[rsp]
  00253	48 83 c0 10	 add	 rax, 16
  00257	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR Y$9[rsp], rax
  0025f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR U$10[rsp]
  00267	48 83 c0 10	 add	 rax, 16
  0026b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR U$10[rsp], rax
  00273	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR V$11[rsp]
  0027b	48 83 c0 10	 add	 rax, 16
  0027f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR V$11[rsp], rax
$LN7@convert_yu:
  00287	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$12[rsp]
  0028f	48 39 84 24 38
	01 00 00	 cmp	 QWORD PTR ycp$13[rsp], rax
  00297	0f 83 2d 02 00
	00		 jae	 $LN6@convert_yu

; 1764 :             x1 = _mm_loadu_si128((__m128i *)(Y));

  0029d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR Y$9[rsp]
  002a5	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002a9	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002b2	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002bb	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1765 :             x2 = _mm_loadu_si128((__m128i *)(U));

  002c4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR U$10[rsp]
  002cc	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002d0	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002d9	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002e2	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1766 :             x3 = _mm_loadu_si128((__m128i *)(V));

  002eb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR V$11[rsp]
  002f3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002f7	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00300	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00309	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1767 :             x1 = convert_y_range_to_yc48(x1);

  00312	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0031b	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00324	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  0032c	e8 00 00 00 00	 call	 ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_y_range_to_yc48
  00331	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0033a	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00343	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1768 :             x2 = convert_uv_range_to_yc48(x2);

  0034c	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00355	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  0035e	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR $T22[rsp]
  00366	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  0036b	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00374	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  0037d	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1769 :             x3 = convert_uv_range_to_yc48(x3);

  00386	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0038f	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00398	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR $T23[rsp]
  003a0	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  003a5	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  003ae	66 0f 6f 84 24
	90 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  003b7	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1770 :             gather_y_u_v_to_yc48(x1, x2, x3);

  003c0	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  003c8	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  003d0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  003d8	e8 00 00 00 00	 call	 ?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_to_yc48

; 1771 :             _mm_store_switch_si128((__m128i *)(ycp +  0), x1);

  003dd	33 c0		 xor	 eax, eax
  003df	85 c0		 test	 eax, eax
  003e1	74 22		 je	 SHORT $LN9@convert_yu
  003e3	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  003eb	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003f4	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003f8	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
  00403	eb 20		 jmp	 SHORT $LN10@convert_yu
$LN9@convert_yu:
  00405	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  0040d	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00416	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0041a	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN10@convert_yu:

; 1772 :             _mm_store_switch_si128((__m128i *)(ycp +  8), x2);

  00425	33 c0		 xor	 eax, eax
  00427	85 c0		 test	 eax, eax
  00429	74 26		 je	 SHORT $LN11@convert_yu
  0042b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00433	48 83 c0 10	 add	 rax, 16
  00437	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00440	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00444	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
  0044f	eb 24		 jmp	 SHORT $LN12@convert_yu
$LN11@convert_yu:
  00451	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00459	48 83 c0 10	 add	 rax, 16
  0045d	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00466	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0046a	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
$LN12@convert_yu:

; 1773 :             _mm_store_switch_si128((__m128i *)(ycp + 16), x3);

  00475	33 c0		 xor	 eax, eax
  00477	85 c0		 test	 eax, eax
  00479	74 26		 je	 SHORT $LN13@convert_yu
  0047b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  00483	48 83 c0 20	 add	 rax, 32			; 00000020H
  00487	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00490	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00494	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
  0049f	eb 24		 jmp	 SHORT $LN14@convert_yu
$LN13@convert_yu:
  004a1	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR ycp$13[rsp]
  004a9	48 83 c0 20	 add	 rax, 32			; 00000020H
  004ad	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004b6	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  004ba	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN14@convert_yu:

; 1774 :         }

  004c5	e9 6d fd ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 1775 :     }

  004ca	e9 8a fc ff ff	 jmp	 $LN2@convert_yu
$LN3@convert_yu:

; 1776 : }

  004cf	48 8b cc	 mov	 rcx, rsp
  004d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  004d9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  004de	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004e6	48 33 cc	 xor	 rcx, rsp
  004e9	e8 00 00 00 00	 call	 __security_check_cookie
  004ee	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  004f5	5f		 pop	 rdi
  004f6	5e		 pop	 rsi
  004f7	c3		 ret	 0
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16bit_to_yc48_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yuv444_16bit_to_yc48_sse41

; 55   : void convert_yuv444_16bit_to_yc48_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 56   :     convert_yuv444_16bit_to_yc48_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yuv444_16bit_to_yc48_simd<0>

; 57   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yuv444_16bit_to_yc48_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yuv444_16bit_to_yc48_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T9 = 88
Y_line$ = 104
U_line$ = 112
V_line$ = 120
pixel$ = 128
xC_pw_one$ = 160
$T10 = 192
xC_YCC$ = 224
$T11 = 256
x1$ = 288
x2$ = 336
x3$ = 384
y$12 = 404
Y$13 = 408
U$14 = 416
V$15 = 424
ycp_fin$16 = 432
ycp$17 = 440
$T18 = 448
$T19 = 464
$T20 = 480
$T21 = 496
$T22 = 512
$T23 = 528
$T24 = 544
$T25 = 560
$T26 = 576
$T27 = 592
$T28 = 608
$T29 = 624
$T30 = 640
$T31 = 656
$T32 = 672
$T33 = 688
$T34 = 704
$T35 = 720
$T36 = 736
$T37 = 760
$T38 = 784
$T39 = 800
$T40 = 816
$T41 = 832
$T42 = 848
$T43 = 864
$T44 = 880
$T45 = 896
$T46 = 912
$T47 = 928
tv213 = 944
tv241 = 948
tv269 = 952
__$ArrayPad$ = 960
dst$ = 1008
src$ = 1016
width$ = 1024
src_y_pitch_byte$ = 1032
src_uv_pitch_byte$ = 1040
dst_y_pitch_byte$ = 1048
height$ = 1056
dst_height$ = 1064
thread_id$ = 1072
thread_n$ = 1080
crop$ = 1088
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_simd<0>

; 1724 : static __forceinline void convert_yc48_to_yuv444_16bit_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1008]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1725 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 38 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 30
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 20
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 f8
	02 00 00	 lea	 rcx, QWORD PTR $T37[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1726 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte + y_range.start_dst;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000aa	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000b2	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000b6	48 03 c1	 add	 rax, rcx
  000b9	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000be	48 03 c1	 add	 rax, rcx
  000c1	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax

; 1727 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte + y_range.start_dst;

  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 01	 imul	 rax, rax, 1
  000cf	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d7	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000df	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  000e3	48 03 c1	 add	 rax, rcx
  000e6	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  000eb	48 03 c1	 add	 rax, rcx
  000ee	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax

; 1728 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte + y_range.start_dst;

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 02	 imul	 rax, rax, 2
  000fc	48 63 8c 24 18
	04 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch_byte$[rsp]
  00104	48 8b 94 24 f0
	03 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  0010c	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00110	48 03 c1	 add	 rax, rcx
  00113	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR y_range$[rsp+4]
  00118	48 03 c1	 add	 rax, rcx
  0011b	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax

; 1729 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00120	b8 08 00 00 00	 mov	 eax, 8
  00125	48 6b c0 00	 imul	 rax, rax, 0
  00129	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  00130	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00135	48 63 c9	 movsxd	 rcx, ecx
  00138	48 8b 94 24 f8
	03 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  00140	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00144	48 8b c1	 mov	 rax, rcx
  00147	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1730 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0014f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00157	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00160	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00169	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1731 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  00172	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  0017a	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00183	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  0018c	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1732 :     __m128i x1, x2, x3;
; 1733 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00195	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  001a0	eb 76		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  001a2	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  001a9	ff c0		 inc	 eax
  001ab	89 84 24 94 01
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  001b2	48 63 84 24 08
	04 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001ba	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001c2	48 03 c8	 add	 rcx, rax
  001c5	48 8b c1	 mov	 rax, rcx
  001c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax
  001d0	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Y_line$[rsp]
  001dd	48 03 c8	 add	 rcx, rax
  001e0	48 8b c1	 mov	 rax, rcx
  001e3	48 89 44 24 68	 mov	 QWORD PTR Y_line$[rsp], rax
  001e8	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR U_line$[rsp]
  001f5	48 03 c8	 add	 rcx, rax
  001f8	48 8b c1	 mov	 rax, rcx
  001fb	48 89 44 24 70	 mov	 QWORD PTR U_line$[rsp], rax
  00200	48 63 84 24 18
	04 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00208	48 8b 4c 24 78	 mov	 rcx, QWORD PTR V_line$[rsp]
  0020d	48 03 c8	 add	 rcx, rax
  00210	48 8b c1	 mov	 rax, rcx
  00213	48 89 44 24 78	 mov	 QWORD PTR V_line$[rsp], rax
$LN4@convert_yc:
  00218	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  0021c	39 84 24 94 01
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00223	0f 8d 23 05 00
	00		 jge	 $LN3@convert_yc

; 1734 :         short *Y = (short *)Y_line;

  00229	48 8b 44 24 68	 mov	 rax, QWORD PTR Y_line$[rsp]
  0022e	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax

; 1735 :         short *U = (short *)U_line;

  00236	48 8b 44 24 70	 mov	 rax, QWORD PTR U_line$[rsp]
  0023b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax

; 1736 :         short *V = (short *)V_line;

  00243	48 8b 44 24 78	 mov	 rax, QWORD PTR V_line$[rsp]
  00248	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax

; 1737 :         short *const ycp_fin = (short *)pixel + width * 3;

  00250	6b 84 24 00 04
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00258	48 98		 cdqe
  0025a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  00262	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00266	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR ycp_fin$16[rsp], rax

; 1738 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  0026e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pixel$[rsp]
  00276	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  0027e	eb 50		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00280	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00288	48 83 c0 30	 add	 rax, 48			; 00000030H
  0028c	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  00294	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  0029c	48 83 c0 10	 add	 rax, 16
  002a0	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax
  002a8	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  002b0	48 83 c0 10	 add	 rax, 16
  002b4	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax
  002bc	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  002c4	48 83 c0 10	 add	 rax, 16
  002c8	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax
$LN7@convert_yc:
  002d0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$16[rsp]
  002d8	48 39 84 24 b8
	01 00 00	 cmp	 QWORD PTR ycp$17[rsp], rax
  002e0	0f 83 61 04 00
	00		 jae	 $LN6@convert_yc

; 1739 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  002e6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  002ee	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002f2	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002fb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00304	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1740 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0030d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00315	48 83 c0 10	 add	 rax, 16
  00319	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031d	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00326	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0032f	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1741 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00338	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00340	48 83 c0 20	 add	 rax, 32			; 00000020H
  00344	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00348	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  00351	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  0035a	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1742 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00363	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  0036b	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  00373	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  0037b	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1743 :             _mm_store_switch_si128((__m128i *)Y, convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00380	33 c0		 xor	 eax, eax
  00382	85 c0		 test	 eax, eax
  00384	74 7e		 je	 SHORT $LN9@convert_yc
  00386	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0038e	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  00397	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003a0	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  003a9	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b6	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003be	41 b8 04 00 00
	00		 mov	 r8d, 4
  003c4	48 8d 94 24 f0
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  003cc	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  003d4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003d9	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003e2	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  003ea	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  003f3	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003f7	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
  00402	eb 7c		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00404	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0040c	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  00415	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0041e	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00427	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  0042f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00434	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0043c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00442	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0044a	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  00452	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00457	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  00460	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00468	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00471	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00475	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv213[rsp], 0
$LN10@convert_yc:

; 1744 :             _mm_store_switch_si128((__m128i *)U, convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  00480	33 c0		 xor	 eax, eax
  00482	85 c0		 test	 eax, eax
  00484	0f 84 ae 00 00
	00		 je	 $LN11@convert_yc
  0048a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00492	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0049b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  004a3	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  004ac	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  004b5	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  004be	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  004c7	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  004d0	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  004d8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004dd	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR $T41[rsp]
  004e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ea	45 33 c9	 xor	 r9d, r9d
  004ed	4c 8d 84 24 40
	02 00 00	 lea	 r8, QWORD PTR $T26[rsp]
  004f5	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  004fd	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  00505	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0050a	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00513	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  0051b	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  00524	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00528	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
  00533	e9 a9 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00538	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00540	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  00549	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00551	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0055a	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00563	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  0056c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00575	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  0057e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00586	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0058b	48 8d 84 24 60
	03 00 00	 lea	 rax, QWORD PTR $T43[rsp]
  00593	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00598	45 33 c9	 xor	 r9d, r9d
  0059b	4c 8d 84 24 70
	02 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  005a3	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR $T28[rsp]
  005ab	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  005b3	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  005b8	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  005c1	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  005c9	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  005d2	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  005d6	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv241[rsp], 0
$LN12@convert_yc:

; 1745 :             _mm_store_switch_si128((__m128i *)V, convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  005e1	33 c0		 xor	 eax, eax
  005e3	85 c0		 test	 eax, eax
  005e5	0f 84 ae 00 00
	00		 je	 $LN13@convert_yc
  005eb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  005f3	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  005fc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00604	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0060d	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00616	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  0061f	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00628	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  00631	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00639	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0063e	48 8d 84 24 80
	03 00 00	 lea	 rax, QWORD PTR $T45[rsp]
  00646	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0064b	45 33 c9	 xor	 r9d, r9d
  0064e	4c 8d 84 24 a0
	02 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  00656	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  0065e	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  00666	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0066b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  00674	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0067c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  00685	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00689	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
  00694	e9 a9 00 00 00	 jmp	 $LN14@convert_yc
$LN13@convert_yc:
  00699	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  006a1	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  006aa	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  006b2	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  006bb	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  006c4	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  006cd	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  006d6	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  006df	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006e7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006ec	48 8d 84 24 a0
	03 00 00	 lea	 rax, QWORD PTR $T47[rsp]
  006f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f9	45 33 c9	 xor	 r9d, r9d
  006fc	4c 8d 84 24 d0
	02 00 00	 lea	 r8, QWORD PTR $T35[rsp]
  00704	48 8d 94 24 c0
	02 00 00	 lea	 rdx, QWORD PTR $T34[rsp]
  0070c	48 8d 8c 24 90
	03 00 00	 lea	 rcx, QWORD PTR $T46[rsp]
  00714	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00719	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00722	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0072a	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  00733	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00737	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
$LN14@convert_yc:

; 1746 :         }

  00742	e9 39 fb ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1747 :     }

  00747	e9 56 fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1748 : }

  0074c	48 8b cc	 mov	 rcx, rsp
  0074f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00756	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0075b	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00763	48 33 cc	 xor	 rcx, rsp
  00766	e8 00 00 00 00	 call	 __security_check_cookie
  0076b	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  00772	5f		 pop	 rdi
  00773	5e		 pop	 rsi
  00774	c3		 ret	 0
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_16bit_sse41

; 51   : void convert_yc48_to_yuv444_16bit_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 52   :     convert_yc48_to_yuv444_16bit_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_16bit_simd<0>

; 53   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_16bit_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
y_range$ = 56
$T9 = 88
YLine$ = 104
ULine$ = 112
VLine$ = 120
ycpLine$ = 128
xC_pw_one$ = 160
$T10 = 192
xC_YCC$ = 224
$T11 = 256
x1$ = 288
x2$ = 336
x3$ = 384
xY$ = 416
xU$ = 432
xV$ = 448
y$12 = 464
Y$13 = 472
U$14 = 480
V$15 = 488
ycp_fin$16 = 496
ycp$17 = 504
$T18 = 512
$T19 = 528
$T20 = 544
$T21 = 560
$T22 = 576
$T23 = 592
$T24 = 608
$T25 = 624
$T26 = 640
$T27 = 656
$T28 = 672
$T29 = 688
$T30 = 704
$T31 = 720
$T32 = 736
$T33 = 752
$T34 = 768
$T35 = 784
$T36 = 800
$T37 = 816
$T38 = 832
$T39 = 848
$T40 = 864
$T41 = 880
$T42 = 896
$T43 = 912
$T44 = 928
$T45 = 944
$T46 = 960
$T47 = 976
$T48 = 992
$T49 = 1016
$T50 = 1040
$T51 = 1056
$T52 = 1072
$T53 = 1088
$T54 = 1104
$T55 = 1120
$T56 = 1136
$T57 = 1152
$T58 = 1168
$T59 = 1184
tv325 = 1200
tv331 = 1204
tv337 = 1208
__$ArrayPad$ = 1216
dst$ = 1264
src$ = 1272
width$ = 1280
src_y_pitch_byte$ = 1288
src_uv_pitch_byte$ = 1296
dst_y_pitch_byte$ = 1304
height$ = 1312
dst_height$ = 1320
thread_id$ = 1328
thread_n$ = 1336
crop$ = 1344
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_simd<0>

; 1673 : static void __forceinline convert_yc48_to_yuv444_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 04
	00 00		 sub	 rsp, 1240		; 000004d8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 36 01 00 00	 mov	 ecx, 310		; 00000136H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1264]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1674 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 38 05
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 30
	05 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 20
	05 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 f8
	03 00 00	 lea	 rcx, QWORD PTR $T49[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T9[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1675 :     uint8_t *YLine   = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000a9	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  000ae	48 63 c9	 movsxd	 rcx, ecx
  000b1	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000b9	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 44 24 68	 mov	 QWORD PTR YLine$[rsp], rax

; 1676 :     uint8_t *ULine   = (uint8_t *)dst[1] + dst_y_pitch_byte * y_range.start_dst;

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 01	 imul	 rax, rax, 1
  000ce	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  000d5	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  000da	48 63 c9	 movsxd	 rcx, ecx
  000dd	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  000e5	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  000e9	48 8b c1	 mov	 rax, rcx
  000ec	48 89 44 24 70	 mov	 QWORD PTR ULine$[rsp], rax

; 1677 :     uint8_t *VLine   = (uint8_t *)dst[2] + dst_y_pitch_byte * y_range.start_dst;

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 02	 imul	 rax, rax, 2
  000fa	8b 8c 24 18 05
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch_byte$[rsp]
  00101	0f af 4c 24 3c	 imul	 ecx, DWORD PTR y_range$[rsp+4]
  00106	48 63 c9	 movsxd	 rcx, ecx
  00109	48 8b 94 24 f0
	04 00 00	 mov	 rdx, QWORD PTR dst$[rsp]
  00111	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 89 44 24 78	 mov	 QWORD PTR VLine$[rsp], rax

; 1678 :     uint8_t *ycpLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src;

  0011d	b8 08 00 00 00	 mov	 eax, 8
  00122	48 6b c0 00	 imul	 rax, rax, 0
  00126	8b 8c 24 08 05
	00 00		 mov	 ecx, DWORD PTR src_y_pitch_byte$[rsp]
  0012d	0f af 4c 24 38	 imul	 ecx, DWORD PTR y_range$[rsp]
  00132	48 63 c9	 movsxd	 rcx, ecx
  00135	48 8b 94 24 f8
	04 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0013d	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00141	48 8b c1	 mov	 rax, rcx
  00144	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ycpLine$[rsp], rax

; 1679 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0014c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00154	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0015d	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00166	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1680 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0016f	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00177	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00180	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00189	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1681 :     __m128i x1, x2, x3, xY, xU, xV;
; 1682 :     for (int y = 0; y < y_range.len; y++, ycpLine += src_y_pitch_byte, YLine += dst_y_pitch_byte, ULine += dst_y_pitch_byte, VLine += dst_y_pitch_byte) {

  00192	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR y$12[rsp], 0
  0019d	eb 76		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  0019f	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR y$12[rsp]
  001a6	ff c0		 inc	 eax
  001a8	89 84 24 d0 01
	00 00		 mov	 DWORD PTR y$12[rsp], eax
  001af	48 63 84 24 08
	05 00 00	 movsxd	 rax, DWORD PTR src_y_pitch_byte$[rsp]
  001b7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ycpLine$[rsp]
  001bf	48 03 c8	 add	 rcx, rax
  001c2	48 8b c1	 mov	 rax, rcx
  001c5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR ycpLine$[rsp], rax
  001cd	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001d5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR YLine$[rsp]
  001da	48 03 c8	 add	 rcx, rax
  001dd	48 8b c1	 mov	 rax, rcx
  001e0	48 89 44 24 68	 mov	 QWORD PTR YLine$[rsp], rax
  001e5	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  001ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ULine$[rsp]
  001f2	48 03 c8	 add	 rcx, rax
  001f5	48 8b c1	 mov	 rax, rcx
  001f8	48 89 44 24 70	 mov	 QWORD PTR ULine$[rsp], rax
  001fd	48 63 84 24 18
	05 00 00	 movsxd	 rax, DWORD PTR dst_y_pitch_byte$[rsp]
  00205	48 8b 4c 24 78	 mov	 rcx, QWORD PTR VLine$[rsp]
  0020a	48 03 c8	 add	 rcx, rax
  0020d	48 8b c1	 mov	 rax, rcx
  00210	48 89 44 24 78	 mov	 QWORD PTR VLine$[rsp], rax
$LN4@convert_yc:
  00215	8b 44 24 40	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00219	39 84 24 d0 01
	00 00		 cmp	 DWORD PTR y$12[rsp], eax
  00220	0f 8d 9c 07 00
	00		 jge	 $LN3@convert_yc

; 1683 :         uint8_t *Y = YLine;

  00226	48 8b 44 24 68	 mov	 rax, QWORD PTR YLine$[rsp]
  0022b	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax

; 1684 :         uint8_t *U = ULine;

  00233	48 8b 44 24 70	 mov	 rax, QWORD PTR ULine$[rsp]
  00238	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax

; 1685 :         uint8_t *V = VLine;

  00240	48 8b 44 24 78	 mov	 rax, QWORD PTR VLine$[rsp]
  00245	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax

; 1686 :         int16_t *const ycp_fin = (int16_t *)ycpLine + width * 3;

  0024d	6b 84 24 00 05
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  00255	48 98		 cdqe
  00257	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ycpLine$[rsp]
  0025f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00263	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR ycp_fin$16[rsp], rax

; 1687 :         for (int16_t *ycp = (int16_t *)ycpLine; ycp < ycp_fin; ycp += 48, Y += 16, U += 16, V += 16) {

  0026b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ycpLine$[rsp]
  00273	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  0027b	eb 50		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0027d	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00285	48 83 c0 60	 add	 rax, 96			; 00000060H
  00289	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR ycp$17[rsp], rax
  00291	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00299	48 83 c0 10	 add	 rax, 16
  0029d	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR Y$13[rsp], rax
  002a5	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  002ad	48 83 c0 10	 add	 rax, 16
  002b1	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR U$14[rsp], rax
  002b9	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  002c1	48 83 c0 10	 add	 rax, 16
  002c5	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR V$15[rsp], rax
$LN7@convert_yc:
  002cd	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR ycp_fin$16[rsp]
  002d5	48 39 84 24 f8
	01 00 00	 cmp	 QWORD PTR ycp$17[rsp], rax
  002dd	0f 83 da 06 00
	00		 jae	 $LN6@convert_yc

; 1688 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  002e3	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  002eb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002ef	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  002f8	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00301	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1689 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0030a	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  00312	48 83 c0 10	 add	 rax, 16
  00316	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0031a	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00323	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0032c	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1690 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00335	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  0033d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00341	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00345	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  0034e	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  00357	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1691 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00360	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  00368	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  00370	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00378	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1692 : 
; 1693 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  0037d	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00385	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0038e	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00397	66 0f 7f 84 24
	10 04 00 00	 movdqa	 XMMWORD PTR $T50[rsp], xmm0
  003a0	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ad	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003b5	41 b8 04 00 00
	00		 mov	 r8d, 4
  003bb	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  003c3	48 8d 8c 24 10
	04 00 00	 lea	 rcx, QWORD PTR $T50[rsp]
  003cb	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003d0	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  003d9	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  003e2	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1694 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  003eb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  003f3	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  003fc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00404	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  0040d	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  00416	66 0f 7f 84 24
	30 04 00 00	 movdqa	 XMMWORD PTR $T52[rsp], xmm0
  0041f	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00428	66 0f 7f 84 24
	20 04 00 00	 movdqa	 XMMWORD PTR $T51[rsp], xmm0
  00431	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00439	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0043e	48 8d 84 24 30
	04 00 00	 lea	 rax, QWORD PTR $T52[rsp]
  00446	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0044b	45 33 c9	 xor	 r9d, r9d
  0044e	4c 8d 84 24 60
	02 00 00	 lea	 r8, QWORD PTR $T24[rsp]
  00456	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  0045e	48 8d 8c 24 20
	04 00 00	 lea	 rcx, QWORD PTR $T51[rsp]
  00466	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  0046b	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00474	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T25[rsp]
  0047d	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1695 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  00486	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  0048e	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00497	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0049f	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  004a8	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  004b1	66 0f 7f 84 24
	50 04 00 00	 movdqa	 XMMWORD PTR $T54[rsp], xmm0
  004ba	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004c3	66 0f 7f 84 24
	40 04 00 00	 movdqa	 XMMWORD PTR $T53[rsp], xmm0
  004cc	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  004d4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004d9	48 8d 84 24 50
	04 00 00	 lea	 rax, QWORD PTR $T54[rsp]
  004e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004e6	45 33 c9	 xor	 r9d, r9d
  004e9	4c 8d 84 24 90
	02 00 00	 lea	 r8, QWORD PTR $T27[rsp]
  004f1	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR $T26[rsp]
  004f9	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR $T53[rsp]
  00501	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00506	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0050f	66 0f 6f 84 24
	a0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  00518	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1696 :             xY = _mm_srli_epi16(x1, 8);

  00521	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0052a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0052f	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  00538	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T29[rsp]
  00541	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xY$[rsp], xmm0

; 1697 :             xU = _mm_srli_epi16(x2, 8);

  0054a	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00553	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00558	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00561	66 0f 6f 84 24
	c0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T30[rsp]
  0056a	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR xU$[rsp], xmm0

; 1698 :             xV = _mm_srli_epi16(x3, 8);

  00573	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0057c	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00581	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  0058a	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T31[rsp]
  00593	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xV$[rsp], xmm0

; 1699 : 
; 1700 :             x1 = _mm_loadu_si128((__m128i *)(ycp + 24));

  0059c	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005a4	48 83 c0 30	 add	 rax, 48			; 00000030H
  005a8	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005ac	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  005b5	66 0f 6f 84 24
	e0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T32[rsp]
  005be	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1701 :             x2 = _mm_loadu_si128((__m128i *)(ycp + 32));

  005c7	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005cf	48 83 c0 40	 add	 rax, 64			; 00000040H
  005d3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  005d7	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  005e0	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T33[rsp]
  005e9	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1702 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 40));

  005f2	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR ycp$17[rsp]
  005fa	48 83 c0 50	 add	 rax, 80			; 00000050H
  005fe	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00602	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  0060b	66 0f 6f 84 24
	00 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T34[rsp]
  00614	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1703 :             gather_y_u_v_from_yc48(x1, x2, x3);

  0061d	4c 8d 84 24 80
	01 00 00	 lea	 r8, QWORD PTR x3$[rsp]
  00625	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0062d	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00635	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ; gather_y_u_v_from_yc48

; 1704 : 
; 1705 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  0063a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00642	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  0064b	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00654	66 0f 7f 84 24
	60 04 00 00	 movdqa	 XMMWORD PTR $T55[rsp], xmm0
  0065d	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00665	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066a	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00672	41 b8 04 00 00
	00		 mov	 r8d, 4
  00678	48 8d 94 24 10
	03 00 00	 lea	 rdx, QWORD PTR $T35[rsp]
  00680	48 8d 8c 24 60
	04 00 00	 lea	 rcx, QWORD PTR $T55[rsp]
  00688	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0068d	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00696	66 0f 6f 84 24
	20 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T36[rsp]
  0069f	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1706 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  006a8	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  006b0	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  006b9	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  006c1	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  006ca	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  006d3	66 0f 7f 84 24
	80 04 00 00	 movdqa	 XMMWORD PTR $T57[rsp], xmm0
  006dc	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  006e5	66 0f 7f 84 24
	70 04 00 00	 movdqa	 XMMWORD PTR $T56[rsp], xmm0
  006ee	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  006fb	48 8d 84 24 80
	04 00 00	 lea	 rax, QWORD PTR $T57[rsp]
  00703	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00708	45 33 c9	 xor	 r9d, r9d
  0070b	4c 8d 84 24 40
	03 00 00	 lea	 r8, QWORD PTR $T38[rsp]
  00713	48 8d 94 24 30
	03 00 00	 lea	 rdx, QWORD PTR $T37[rsp]
  0071b	48 8d 8c 24 70
	04 00 00	 lea	 rcx, QWORD PTR $T56[rsp]
  00723	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  00728	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  00731	66 0f 6f 84 24
	50 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T39[rsp]
  0073a	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1707 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  00743	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  0074b	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  00754	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0075c	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  00765	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR xC_YCC$[rsp]
  0076e	66 0f 7f 84 24
	a0 04 00 00	 movdqa	 XMMWORD PTR $T59[rsp], xmm0
  00777	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00780	66 0f 7f 84 24
	90 04 00 00	 movdqa	 XMMWORD PTR $T58[rsp], xmm0
  00789	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00791	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00796	48 8d 84 24 a0
	04 00 00	 lea	 rax, QWORD PTR $T59[rsp]
  0079e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a3	45 33 c9	 xor	 r9d, r9d
  007a6	4c 8d 84 24 70
	03 00 00	 lea	 r8, QWORD PTR $T41[rsp]
  007ae	48 8d 94 24 60
	03 00 00	 lea	 rdx, QWORD PTR $T40[rsp]
  007b6	48 8d 8c 24 90
	04 00 00	 lea	 rcx, QWORD PTR $T58[rsp]
  007be	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ; convert_uv_range_from_yc48
  007c3	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007cc	66 0f 6f 84 24
	80 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T42[rsp]
  007d5	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1708 :             x1 = _mm_srli_epi16(x1, 8);

  007de	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  007e7	66 0f 71 d0 08	 psrlw	 xmm0, 8
  007ec	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  007f5	66 0f 6f 84 24
	90 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T43[rsp]
  007fe	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1709 :             x2 = _mm_srli_epi16(x2, 8);

  00807	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00810	66 0f 71 d0 08	 psrlw	 xmm0, 8
  00815	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T44[rsp], xmm0
  0081e	66 0f 6f 84 24
	a0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T44[rsp]
  00827	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1710 :             x3 = _mm_srli_epi16(x3, 8);

  00830	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00839	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0083e	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T45[rsp], xmm0
  00847	66 0f 6f 84 24
	b0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T45[rsp]
  00850	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1711 : 
; 1712 :             xY = _mm_packus_epi16(xY, x1);

  00859	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  00862	66 0f 67 84 24
	20 01 00 00	 packuswb xmm0, XMMWORD PTR x1$[rsp]
  0086b	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T46[rsp], xmm0
  00874	66 0f 6f 84 24
	c0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T46[rsp]
  0087d	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR xY$[rsp], xmm0

; 1713 :             xU = _mm_packus_epi16(xU, x2);

  00886	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  0088f	66 0f 67 84 24
	50 01 00 00	 packuswb xmm0, XMMWORD PTR x2$[rsp]
  00898	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T47[rsp], xmm0
  008a1	66 0f 6f 84 24
	d0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T47[rsp]
  008aa	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR xU$[rsp], xmm0

; 1714 :             xV = _mm_packus_epi16(xV, x3);

  008b3	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  008bc	66 0f 67 84 24
	80 01 00 00	 packuswb xmm0, XMMWORD PTR x3$[rsp]
  008c5	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T48[rsp], xmm0
  008ce	66 0f 6f 84 24
	e0 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T48[rsp]
  008d7	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR xV$[rsp], xmm0

; 1715 : 
; 1716 :             _mm_store_switch_si128((__m128i*)Y, xY);

  008e0	33 c0		 xor	 eax, eax
  008e2	85 c0		 test	 eax, eax
  008e4	74 22		 je	 SHORT $LN9@convert_yc
  008e6	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  008ee	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  008f7	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  008fb	c7 84 24 b0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
  00906	eb 20		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00908	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR Y$13[rsp]
  00910	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xY$[rsp]
  00919	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0091d	c7 84 24 b0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN10@convert_yc:

; 1717 :             _mm_store_switch_si128((__m128i*)U, xU);

  00928	33 c0		 xor	 eax, eax
  0092a	85 c0		 test	 eax, eax
  0092c	74 22		 je	 SHORT $LN11@convert_yc
  0092e	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  00936	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  0093f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00943	c7 84 24 b4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
  0094e	eb 20		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  00950	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR U$14[rsp]
  00958	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xU$[rsp]
  00961	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00965	c7 84 24 b4 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN12@convert_yc:

; 1718 :             _mm_store_switch_si128((__m128i*)V, xV);

  00970	33 c0		 xor	 eax, eax
  00972	85 c0		 test	 eax, eax
  00974	74 22		 je	 SHORT $LN13@convert_yc
  00976	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  0097e	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  00987	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0098b	c7 84 24 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
  00996	eb 20		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  00998	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR V$15[rsp]
  009a0	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR xV$[rsp]
  009a9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  009ad	c7 84 24 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
$LN14@convert_yc:

; 1719 :         }

  009b8	e9 c0 f8 ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1720 :     }

  009bd	e9 dd f7 ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1721 : }

  009c2	48 8b cc	 mov	 rcx, rsp
  009c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  009cc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  009d1	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  009d9	48 33 cc	 xor	 rcx, rsp
  009dc	e8 00 00 00 00	 call	 __security_check_cookie
  009e1	48 81 c4 d8 04
	00 00		 add	 rsp, 1240		; 000004d8H
  009e8	5f		 pop	 rdi
  009e9	5e		 pop	 rsi
  009ea	c3		 ret	 0
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_yuv444_sse41

; 47   : void convert_yc48_to_yuv444_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 48   :     convert_yc48_to_yuv444_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_yuv444_simd<0>

; 49   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_yuv444_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_yuv444_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
i$ = 72
dst_Y$ = 80
dst_C$ = 88
pixel$ = 96
ycp$ = 104
ycpw$ = 112
Y$ = 120
C$ = 128
xC_pw_one$ = 160
$T8 = 192
xC_YCC$ = 224
$T9 = 256
dst_y_pitch$ = 272
y_range$ = 296
$T10 = 328
x0$ = 352
x1$ = 384
x2$ = 432
x3$ = 464
$T11 = 480
$T12 = 496
$T13 = 512
$T14 = 528
$T15 = 544
$T16 = 560
$T17 = 576
$T18 = 592
$T19 = 608
$T20 = 624
$T21 = 640
$T22 = 656
$T23 = 672
$T24 = 688
$T25 = 704
$T26 = 720
$T27 = 736
$T28 = 752
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 840
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
$T40 = 960
$T41 = 976
$T42 = 992
$T43 = 1008
tv218 = 1024
tv265 = 1028
tv323 = 1032
__$ArrayPad$ = 1040
dst$ = 1088
src$ = 1096
width$ = 1104
src_y_pitch_byte$ = 1112
src_uv_pitch_byte$ = 1120
dst_y_pitch_byte$ = 1128
height$ = 1136
dst_height$ = 1144
thread_id$ = 1152
thread_n$ = 1160
crop$ = 1168
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_simd<0>

; 1633 : static __forceinline void convert_yc48_to_p010_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 28 04
	00 00		 sub	 rsp, 1064		; 00000428H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1088]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1634 :     int x, y, i;
; 1635 :     short *dst_Y = (short *)dst[0];

  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 44 24 50	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1636 :     short *dst_C = (short *)dst[1];

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  00071	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00075	48 89 44 24 58	 mov	 QWORD PTR dst_C$[rsp], rax

; 1637 :     const void  *pixel = src[0];

  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  0008b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0008f	48 89 44 24 60	 mov	 QWORD PTR pixel$[rsp], rax

; 1638 :     const short *ycp, *ycpw;
; 1639 :     short *Y = nullptr, *C = nullptr;

  00094	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR Y$[rsp], 0
  0009d	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1640 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000a9	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000b1	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  000ba	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  000c3	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1641 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000cc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000d4	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  000dd	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  000e6	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1642 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000ef	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  000f6	d1 f8		 sar	 eax, 1
  000f8	89 84 24 10 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1643 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000ff	8b 84 24 88 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00106	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0010a	44 8b 8c 24 80
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00112	44 8b 84 24 70
	04 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  0011a	33 d2		 xor	 edx, edx
  0011c	48 8d 8c 24 48
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00124	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00129	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  00131	48 8b f9	 mov	 rdi, rcx
  00134	48 8b f0	 mov	 rsi, rax
  00137	b9 0c 00 00 00	 mov	 ecx, 12
  0013c	f3 a4		 rep movsb
  0013e	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR y_range$[rsp]
  00146	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  0014e	48 8b f8	 mov	 rdi, rax
  00151	48 8b f1	 mov	 rsi, rcx
  00154	b9 0c 00 00 00	 mov	 ecx, 12
  00159	f3 a4		 rep movsb

; 1644 :     __m128i x0, x1, x2, x3;
; 1645 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0015b	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 04	 add	 eax, 4
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR y_range$[rsp+8]
  0017a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR y_range$[rsp]
  00181	03 c8		 add	 ecx, eax
  00183	8b c1		 mov	 eax, ecx
  00185	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00189	0f 8d d1 06 00
	00		 jge	 $LN3@convert_yc

; 1646 :         for (i = 0; i < 2; i++) {

  0018f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00197	eb 0a		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00199	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0019d	ff c0		 inc	 eax
  0019f	89 44 24 48	 mov	 DWORD PTR i$[rsp], eax
$LN7@convert_yc:
  001a3	83 7c 24 48 02	 cmp	 DWORD PTR i$[rsp], 2
  001a8	0f 8d ad 06 00
	00		 jge	 $LN6@convert_yc

; 1647 :             ycp = (short*)pixel + width * (y + i) * 3;

  001ae	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001b2	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001b6	03 c8		 add	 ecx, eax
  001b8	8b c1		 mov	 eax, ecx
  001ba	8b 8c 24 50 04
	00 00		 mov	 ecx, DWORD PTR width$[rsp]
  001c1	0f af c8	 imul	 ecx, eax
  001c4	8b c1		 mov	 eax, ecx
  001c6	6b c0 03	 imul	 eax, eax, 3
  001c9	48 98		 cdqe
  001cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pixel$[rsp]
  001d0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001d4	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax

; 1648 :             ycpw= ycp + width*2*3;

  001d9	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  001e0	d1 e0		 shl	 eax, 1
  001e2	6b c0 03	 imul	 eax, eax, 3
  001e5	48 98		 cdqe
  001e7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ycp$[rsp]
  001ec	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001f0	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax

; 1649 :             Y   = dst_Y + dst_y_pitch * (y + i);

  001f5	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  001f9	8b 4c 24 44	 mov	 ecx, DWORD PTR y$[rsp]
  001fd	03 c8		 add	 ecx, eax
  001ff	8b c1		 mov	 eax, ecx
  00201	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00208	0f af c8	 imul	 ecx, eax
  0020b	8b c1		 mov	 eax, ecx
  0020d	48 98		 cdqe
  0020f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  00214	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00218	48 89 44 24 78	 mov	 QWORD PTR Y$[rsp], rax

; 1650 :             C   = dst_C + dst_y_pitch * (y + i*2) / 2;

  0021d	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  00221	8b 4c 24 48	 mov	 ecx, DWORD PTR i$[rsp]
  00225	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00228	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0022f	0f af c8	 imul	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	99		 cdq
  00235	2b c2		 sub	 eax, edx
  00237	d1 f8		 sar	 eax, 1
  00239	48 98		 cdqe
  0023b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00240	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00244	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1651 :             for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  0024c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  00254	eb 27		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  00256	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  0025a	83 c0 08	 add	 eax, 8
  0025d	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  00261	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00266	48 83 c0 30	 add	 rax, 48			; 00000030H
  0026a	48 89 44 24 68	 mov	 QWORD PTR ycp$[rsp], rax
  0026f	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00274	48 83 c0 30	 add	 rax, 48			; 00000030H
  00278	48 89 44 24 70	 mov	 QWORD PTR ycpw$[rsp], rax
$LN10@convert_yc:
  0027d	8b 84 24 50 04
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00284	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  00288	0f 8d c8 05 00
	00		 jge	 $LN9@convert_yc

; 1652 :                 x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  0028e	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  00293	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00297	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  002a0	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  002a9	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1653 :                 x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  002b2	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002b7	48 83 c0 10	 add	 rax, 16
  002bb	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002bf	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002c8	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002d1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1654 :                 x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002da	48 8b 44 24 68	 mov	 rax, QWORD PTR ycp$[rsp]
  002df	48 83 c0 20	 add	 rax, 32			; 00000020H
  002e3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002e7	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002f0	66 0f 6f 84 24
	00 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002f9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1655 :                 _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  00302	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00307	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1656 :                 gather_y_uv_from_yc48(x1, x2, x3);

  0030a	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00313	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  0031c	4c 8d 84 24 60
	03 00 00	 lea	 r8, QWORD PTR $T34[rsp]
  00324	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0032c	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00334	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1657 :                 x0 = x2;

  00339	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00342	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1658 :                 _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0034b	33 c0		 xor	 eax, eax
  0034d	85 c0		 test	 eax, eax
  0034f	0f 84 87 00 00
	00		 je	 $LN12@convert_yc
  00355	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0035d	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00366	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0036f	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00378	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00380	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00385	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0038d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00393	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0039b	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  003a3	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  003a8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  003b1	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  003b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  003bb	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003bf	66 0f 6f 84 24
	20 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003c8	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003cc	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
  003d7	e9 82 00 00 00	 jmp	 $LN13@convert_yc
$LN12@convert_yc:
  003dc	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003e4	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003ed	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003f6	66 0f 7f 84 24
	80 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  003ff	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00407	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040c	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00414	41 b8 04 00 00
	00		 mov	 r8d, 4
  0041a	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00422	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR $T36[rsp]
  0042a	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0042f	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  00438	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0043d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00442	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00446	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0044f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00453	c7 84 24 00 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
$LN13@convert_yc:

; 1659 : 
; 1660 :                 x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  0045e	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00463	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00467	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  00470	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00479	66 0f 7f 84 24
	80 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1661 :                 x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  00482	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  00487	48 83 c0 10	 add	 rax, 16
  0048b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0048f	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00498	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  004a1	66 0f 7f 84 24
	b0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1662 :                 x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  004aa	48 8b 44 24 70	 mov	 rax, QWORD PTR ycpw$[rsp]
  004af	48 83 c0 20	 add	 rax, 32			; 00000020H
  004b3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004b7	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004c0	66 0f 6f 84 24
	70 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004c9	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1663 :                 gather_y_uv_from_yc48(x1, x2, x3);

  004d2	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004db	66 0f 7f 84 24
	90 03 00 00	 movdqa	 XMMWORD PTR $T37[rsp], xmm0
  004e4	4c 8d 84 24 90
	03 00 00	 lea	 r8, QWORD PTR $T37[rsp]
  004ec	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004f4	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004fc	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1664 :                 _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00501	33 c0		 xor	 eax, eax
  00503	85 c0		 test	 eax, eax
  00505	0f 84 97 00 00
	00		 je	 $LN14@convert_yc
  0050b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00513	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0051c	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00525	66 0f 7f 84 24
	a0 03 00 00	 movdqa	 XMMWORD PTR $T38[rsp], xmm0
  0052e	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00536	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053b	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00543	41 b8 04 00 00
	00		 mov	 r8d, 4
  00549	48 8d 94 24 80
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00551	48 8d 8c 24 a0
	03 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  00559	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0055e	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00567	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0056c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00571	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00575	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  0057c	d1 e1		 shl	 ecx, 1
  0057e	48 63 c9	 movsxd	 rcx, ecx
  00581	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00585	66 0f 6f 84 24
	90 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0058e	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00592	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
  0059d	e9 92 00 00 00	 jmp	 $LN15@convert_yc
$LN14@convert_yc:
  005a2	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  005aa	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005b3	66 0f 6f 84 24
	80 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005bc	66 0f 7f 84 24
	b0 03 00 00	 movdqa	 XMMWORD PTR $T39[rsp], xmm0
  005c5	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d2	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005da	41 b8 04 00 00
	00		 mov	 r8d, 4
  005e0	48 8d 94 24 a0
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005e8	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  005f0	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005f5	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005fe	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00603	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Y$[rsp]
  00608	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0060c	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR dst_y_pitch$[rsp]
  00613	d1 e1		 shl	 ecx, 1
  00615	48 63 c9	 movsxd	 rcx, ecx
  00618	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0061c	66 0f 6f 84 24
	b0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00625	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00629	c7 84 24 04 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN15@convert_yc:

; 1665 : 
; 1666 :                 _mm_store_switch_si128((__m128i *)(C + x), convert_uv_range_from_yc48_420i(x0, x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_420I(i), xC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, xC_YCC, xC_pw_one));

  00634	33 c0		 xor	 eax, eax
  00636	85 c0		 test	 eax, eax
  00638	0f 84 0c 01 00
	00		 je	 $LN16@convert_yc
  0063e	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00642	ff c0		 inc	 eax
  00644	83 e0 01	 and	 eax, 1
  00647	48 98		 cdqe
  00649	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00654	48 03 c8	 add	 rcx, rax
  00657	48 8b c1	 mov	 rax, rcx
  0065a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0065e	66 0f 7f 84 24
	e0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  00667	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  0066c	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00670	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00677	48 03 c8	 add	 rcx, rax
  0067a	48 8b c1	 mov	 rax, rcx
  0067d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00681	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  0068a	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00692	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  0069b	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  006a4	66 0f 7f 84 24
	d0 03 00 00	 movdqa	 XMMWORD PTR $T41[rsp], xmm0
  006ad	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006b6	66 0f 7f 84 24
	c0 03 00 00	 movdqa	 XMMWORD PTR $T40[rsp], xmm0
  006bf	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  006c7	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  006cc	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  006d4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006d9	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  006e1	48 8d 84 24 e0
	02 00 00	 lea	 rax, QWORD PTR $T27[rsp]
  006e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ee	4c 8d 8c 24 d0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  006f6	4c 8d 84 24 c0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  006fe	48 8d 94 24 d0
	03 00 00	 lea	 rdx, QWORD PTR $T41[rsp]
  00706	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  0070e	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  00713	66 0f 7f 84 24
	f0 02 00 00	 movdqa	 XMMWORD PTR $T28[rsp], xmm0
  0071c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00721	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00729	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0072d	66 0f 6f 84 24
	f0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T28[rsp]
  00736	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0073a	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
  00745	e9 07 01 00 00	 jmp	 $LN17@convert_yc
$LN16@convert_yc:
  0074a	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  0074e	ff c0		 inc	 eax
  00750	83 e0 01	 and	 eax, 1
  00753	48 98		 cdqe
  00755	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00759	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00760	48 03 c8	 add	 rcx, rax
  00763	48 8b c1	 mov	 rax, rcx
  00766	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0076a	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  00773	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00778	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0077c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00783	48 03 c8	 add	 rcx, rax
  00786	48 8b c1	 mov	 rax, rcx
  00789	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0078d	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00796	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0079e	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  007a7	66 0f 6f 84 24
	b0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  007b0	66 0f 7f 84 24
	f0 03 00 00	 movdqa	 XMMWORD PTR $T43[rsp], xmm0
  007b9	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  007c2	66 0f 7f 84 24
	e0 03 00 00	 movdqa	 XMMWORD PTR $T42[rsp], xmm0
  007cb	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  007d3	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  007d8	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  007e0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007e5	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR [rsp+40], 2
  007ed	48 8d 84 24 20
	03 00 00	 lea	 rax, QWORD PTR $T31[rsp]
  007f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007fa	4c 8d 8c 24 10
	03 00 00	 lea	 r9, QWORD PTR $T30[rsp]
  00802	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  0080a	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR $T43[rsp]
  00812	48 8d 8c 24 e0
	03 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  0081a	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ; convert_uv_range_from_yc48_420i
  0081f	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  00828	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0082d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00835	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00839	66 0f 6f 84 24
	30 03 00 00	 movdqa	 xmm0, XMMWORD PTR $T32[rsp]
  00842	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00846	c7 84 24 08 04
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
$LN17@convert_yc:

; 1667 :             }

  00851	e9 00 fa ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1668 :         }

  00856	e9 3e f9 ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1669 :     }

  0085b	e9 08 f9 ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1670 : }

  00860	48 8b cc	 mov	 rcx, rsp
  00863	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  0086a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0086f	48 8b 8c 24 10
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00877	48 33 cc	 xor	 rcx, rsp
  0087a	e8 00 00 00 00	 call	 __security_check_cookie
  0087f	48 81 c4 28 04
	00 00		 add	 rsp, 1064		; 00000428H
  00886	5f		 pop	 rdi
  00887	5e		 pop	 rsi
  00888	c3		 ret	 0
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_i_sse41

; 43   : void convert_yc48_to_p010_i_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 44   :     convert_yc48_to_p010_i_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_i_simd<0>

; 45   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_i_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_i_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x$ = 64
y$ = 68
y_range$ = 88
$T8 = 120
dst_Y$ = 136
dst_C$ = 144
pixel$ = 152
ycp$ = 160
ycpw$ = 168
Y$ = 176
C$ = 184
xC_pw_one$ = 208
$T9 = 240
xC_YCC$ = 272
$T10 = 304
dst_y_pitch$ = 320
x0$ = 336
x1$ = 368
x2$ = 416
x3$ = 448
$T11 = 464
$T12 = 480
$T13 = 496
$T14 = 512
$T15 = 528
$T16 = 544
$T17 = 560
$T18 = 576
$T19 = 592
$T20 = 608
$T21 = 624
$T22 = 640
$T23 = 656
$T24 = 672
$T25 = 688
$T26 = 704
$T27 = 720
$T28 = 744
$T29 = 768
$T30 = 784
$T31 = 800
$T32 = 816
$T33 = 832
$T34 = 848
$T35 = 864
$T36 = 880
tv211 = 896
tv256 = 900
tv280 = 904
__$ArrayPad$ = 912
dst$ = 960
src$ = 968
width$ = 976
src_y_pitch_byte$ = 984
src_uv_pitch_byte$ = 992
dst_y_pitch_byte$ = 1000
height$ = 1008
dst_height$ = 1016
thread_id$ = 1024
thread_n$ = 1032
crop$ = 1040
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_simd<0>

; 1591 : static __forceinline void convert_yc48_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 03
	00 00		 sub	 rsp, 936		; 000003a8H
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 ea 00 00 00	 mov	 ecx, 234		; 000000eaH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR [rsp+960]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c4	 xor	 rax, rsp
  0003e	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1592 :     int x, y;
; 1593 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00046	8b 84 24 08 04
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  0004d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00051	44 8b 8c 24 00
	04 00 00	 mov	 r9d, DWORD PTR thread_id$[rsp]
  00059	44 8b 84 24 f0
	03 00 00	 mov	 r8d, DWORD PTR height$[rsp]
  00061	33 d2		 xor	 edx, edx
  00063	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  0006b	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00070	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  00075	48 8b f9	 mov	 rdi, rcx
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 0c 00 00 00	 mov	 ecx, 12
  00080	f3 a4		 rep movsb
  00082	48 8d 44 24 58	 lea	 rax, QWORD PTR y_range$[rsp]
  00087	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T8[rsp]
  0008c	48 8b f8	 mov	 rdi, rax
  0008f	48 8b f1	 mov	 rsi, rcx
  00092	b9 0c 00 00 00	 mov	 ecx, 12
  00097	f3 a4		 rep movsb

; 1594 :     short *dst_Y = (short *)dst[0];

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000aa	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000ae	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dst_Y$[rsp], rax

; 1595 :     short *dst_C = (short *)dst[1];

  000b6	b8 08 00 00 00	 mov	 eax, 8
  000bb	48 6b c0 01	 imul	 rax, rax, 1
  000bf	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR dst$[rsp]
  000c7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000cb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dst_C$[rsp], rax

; 1596 :     const void  *pixel = src[0];

  000d3	b8 08 00 00 00	 mov	 eax, 8
  000d8	48 6b c0 00	 imul	 rax, rax, 0
  000dc	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR src$[rsp]
  000e4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pixel$[rsp], rax

; 1597 :     const short *ycp, *ycpw;
; 1598 :     short *Y = NULL, *C = NULL;

  000f0	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR Y$[rsp], 0
  000fc	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR C$[rsp], 0

; 1599 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  00108	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00110	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00119	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00122	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR xC_pw_one$[rsp], xmm0

; 1600 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0012b	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00133	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0013c	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00145	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR xC_YCC$[rsp], xmm0

; 1601 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  0014e	8b 84 24 e8 03
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  00155	d1 f8		 sar	 eax, 1
  00157	89 84 24 40 01
	00 00		 mov	 DWORD PTR dst_y_pitch$[rsp], eax

; 1602 :     __m128i x0, x1, x2, x3;
; 1603 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  0015e	8b 44 24 58	 mov	 eax, DWORD PTR y_range$[rsp]
  00162	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
  00166	eb 0b		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00168	8b 44 24 44	 mov	 eax, DWORD PTR y$[rsp]
  0016c	83 c0 02	 add	 eax, 2
  0016f	89 44 24 44	 mov	 DWORD PTR y$[rsp], eax
$LN4@convert_yc:
  00173	8b 44 24 60	 mov	 eax, DWORD PTR y_range$[rsp+8]
  00177	8b 4c 24 58	 mov	 ecx, DWORD PTR y_range$[rsp]
  0017b	03 c8		 add	 ecx, eax
  0017d	8b c1		 mov	 eax, ecx
  0017f	39 44 24 44	 cmp	 DWORD PTR y$[rsp], eax
  00183	0f 8d a5 05 00
	00		 jge	 $LN3@convert_yc

; 1604 :         ycp = (short*)pixel + width * y * 3;

  00189	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00190	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  00195	6b c0 03	 imul	 eax, eax, 3
  00198	48 98		 cdqe
  0019a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pixel$[rsp]
  001a2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001a6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax

; 1605 :         ycpw= ycp + width*3;

  001ae	6b 84 24 d0 03
	00 00 03	 imul	 eax, DWORD PTR width$[rsp], 3
  001b6	48 98		 cdqe
  001b8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR ycp$[rsp]
  001c0	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001c4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax

; 1606 :         Y   = dst_Y + dst_y_pitch * y;

  001cc	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001d3	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001d8	48 98		 cdqe
  001da	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dst_Y$[rsp]
  001e2	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  001e6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR Y$[rsp], rax

; 1607 :         C   = dst_C + dst_y_pitch * y / 2;

  001ee	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR dst_y_pitch$[rsp]
  001f5	0f af 44 24 44	 imul	 eax, DWORD PTR y$[rsp]
  001fa	99		 cdq
  001fb	2b c2		 sub	 eax, edx
  001fd	d1 f8		 sar	 eax, 1
  001ff	48 98		 cdqe
  00201	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dst_C$[rsp]
  00209	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0020d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR C$[rsp], rax

; 1608 :         for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  00215	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  0021d	eb 33		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0021f	8b 44 24 40	 mov	 eax, DWORD PTR x$[rsp]
  00223	83 c0 08	 add	 eax, 8
  00226	89 44 24 40	 mov	 DWORD PTR x$[rsp], eax
  0022a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00232	48 83 c0 30	 add	 rax, 48			; 00000030H
  00236	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ycp$[rsp], rax
  0023e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00246	48 83 c0 30	 add	 rax, 48			; 00000030H
  0024a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ycpw$[rsp], rax
$LN7@convert_yc:
  00252	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR width$[rsp]
  00259	39 44 24 40	 cmp	 DWORD PTR x$[rsp], eax
  0025d	0f 8d c6 04 00
	00		 jge	 $LN6@convert_yc

; 1609 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  00263	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  0026b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0026f	66 0f 7f 84 24
	d0 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00278	66 0f 6f 84 24
	d0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00281	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1610 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  0028a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  00292	48 83 c0 10	 add	 rax, 16
  00296	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0029a	66 0f 7f 84 24
	e0 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  002a3	66 0f 6f 84 24
	e0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  002ac	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1611 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  002b5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR ycp$[rsp]
  002bd	48 83 c0 20	 add	 rax, 32			; 00000020H
  002c1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002c5	66 0f 7f 84 24
	f0 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  002ce	66 0f 6f 84 24
	f0 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  002d7	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1612 :             _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  002e0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  002e8	0f 18 10	 prefetcht1 BYTE PTR [rax]

; 1613 :             gather_y_uv_from_yc48(x1, x2, x3);

  002eb	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  002f4	66 0f 7f 84 24
	00 03 00 00	 movdqa	 XMMWORD PTR $T29[rsp], xmm0
  002fd	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR $T29[rsp]
  00305	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  0030d	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  00315	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1614 :             x0 = x2;

  0031a	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  00323	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1615 : 
; 1616 :             _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0032c	33 c0		 xor	 eax, eax
  0032e	85 c0		 test	 eax, eax
  00330	0f 84 8a 00 00
	00		 je	 $LN9@convert_yc
  00336	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0033e	66 0f 7f 84 24
	00 02 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  00347	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00350	66 0f 7f 84 24
	10 03 00 00	 movdqa	 XMMWORD PTR $T30[rsp], xmm0
  00359	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00361	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00366	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  0036e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00374	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0037c	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  00384	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00389	66 0f 7f 84 24
	10 02 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  00392	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00397	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  0039f	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003a3	66 0f 6f 84 24
	10 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  003ac	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  003b0	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
  003bb	e9 85 00 00 00	 jmp	 $LN10@convert_yc
$LN9@convert_yc:
  003c0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003c8	66 0f 7f 84 24
	20 02 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  003d1	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  003da	66 0f 7f 84 24
	20 03 00 00	 movdqa	 XMMWORD PTR $T31[rsp], xmm0
  003e3	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  003eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f0	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  003f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  003fe	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00406	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  0040e	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  00413	66 0f 7f 84 24
	30 02 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0041c	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00421	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00429	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0042d	66 0f 6f 84 24
	30 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  00436	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  0043a	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv211[rsp], 0
$LN10@convert_yc:

; 1617 : 
; 1618 :             x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  00445	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0044d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00451	66 0f 7f 84 24
	40 02 00 00	 movdqa	 XMMWORD PTR $T18[rsp], xmm0
  0045a	66 0f 6f 84 24
	40 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T18[rsp]
  00463	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1619 :             x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  0046c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  00474	48 83 c0 10	 add	 rax, 16
  00478	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0047c	66 0f 7f 84 24
	50 02 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00485	66 0f 6f 84 24
	50 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T19[rsp]
  0048e	66 0f 7f 84 24
	a0 01 00 00	 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1620 :             x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  00497	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ycpw$[rsp]
  0049f	48 83 c0 20	 add	 rax, 32			; 00000020H
  004a3	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  004a7	66 0f 7f 84 24
	60 02 00 00	 movdqa	 XMMWORD PTR $T20[rsp], xmm0
  004b0	66 0f 6f 84 24
	60 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T20[rsp]
  004b9	66 0f 7f 84 24
	c0 01 00 00	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1621 :             gather_y_uv_from_yc48(x1, x2, x3);

  004c2	66 0f 6f 84 24
	c0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  004cb	66 0f 7f 84 24
	30 03 00 00	 movdqa	 XMMWORD PTR $T32[rsp], xmm0
  004d4	4c 8d 84 24 30
	03 00 00	 lea	 r8, QWORD PTR $T32[rsp]
  004dc	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR x2$[rsp]
  004e4	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR x1$[rsp]
  004ec	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48

; 1622 : 
; 1623 :             _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  004f1	33 c0		 xor	 eax, eax
  004f3	85 c0		 test	 eax, eax
  004f5	0f 84 96 00 00
	00		 je	 $LN11@convert_yc
  004fb	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00503	66 0f 7f 84 24
	70 02 00 00	 movdqa	 XMMWORD PTR $T21[rsp], xmm0
  0050c	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  00515	66 0f 7f 84 24
	40 03 00 00	 movdqa	 XMMWORD PTR $T33[rsp], xmm0
  0051e	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00526	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052b	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  00533	41 b8 04 00 00
	00		 mov	 r8d, 4
  00539	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00541	48 8d 8c 24 40
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00549	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  0054e	66 0f 7f 84 24
	80 02 00 00	 movdqa	 XMMWORD PTR $T22[rsp], xmm0
  00557	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  0055c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  00564	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00568	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00570	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  00574	66 0f 6f 84 24
	80 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T22[rsp]
  0057d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00581	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
  0058c	e9 91 00 00 00	 jmp	 $LN12@convert_yc
$LN11@convert_yc:
  00591	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00599	66 0f 7f 84 24
	90 02 00 00	 movdqa	 XMMWORD PTR $T23[rsp], xmm0
  005a2	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  005ab	66 0f 7f 84 24
	50 03 00 00	 movdqa	 XMMWORD PTR $T34[rsp], xmm0
  005b4	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR xC_YCC$[rsp]
  005c9	41 b8 04 00 00
	00		 mov	 r8d, 4
  005cf	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  005d7	48 8d 8c 24 50
	03 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  005df	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_y_range_from_yc48
  005e4	66 0f 7f 84 24
	a0 02 00 00	 movdqa	 XMMWORD PTR $T24[rsp], xmm0
  005ed	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  005f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR Y$[rsp]
  005fa	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  005fe	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR dst_y_pitch$[rsp]
  00606	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0060a	66 0f 6f 84 24
	a0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T24[rsp]
  00613	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00617	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv256[rsp], 0
$LN12@convert_yc:

; 1624 : 
; 1625 :             x0 = convert_uv_range_from_yc48_yuv420p(x0, x2, _mm_set1_epi16(UV_OFFSET_x2), xC_UV_L_MA_16_420P, UV_L_RSH_16_420P, xC_YCC, xC_pw_one);

  00622	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  0062a	66 0f 7f 84 24
	c0 02 00 00	 movdqa	 XMMWORD PTR $T26[rsp], xmm0
  00633	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@10001000100010001000100010001000
  0063b	66 0f 7f 84 24
	b0 02 00 00	 movdqa	 XMMWORD PTR $T25[rsp], xmm0
  00644	66 0f 6f 84 24
	a0 01 00 00	 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  0064d	66 0f 7f 84 24
	70 03 00 00	 movdqa	 XMMWORD PTR $T36[rsp], xmm0
  00656	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  0065f	66 0f 7f 84 24
	60 03 00 00	 movdqa	 XMMWORD PTR $T35[rsp], xmm0
  00668	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR xC_pw_one$[rsp]
  00670	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00675	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR xC_YCC$[rsp]
  0067d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00682	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0068a	4c 8d 8c 24 c0
	02 00 00	 lea	 r9, QWORD PTR $T26[rsp]
  00692	4c 8d 84 24 b0
	02 00 00	 lea	 r8, QWORD PTR $T25[rsp]
  0069a	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR $T36[rsp]
  006a2	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  006aa	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ; convert_uv_range_from_yc48_yuv420p
  006af	66 0f 7f 84 24
	d0 02 00 00	 movdqa	 XMMWORD PTR $T27[rsp], xmm0
  006b8	66 0f 6f 84 24
	d0 02 00 00	 movdqa	 xmm0, XMMWORD PTR $T27[rsp]
  006c1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR x0$[rsp], xmm0

; 1626 : 
; 1627 :             _mm_store_switch_si128((__m128i *)(C + x), x0);

  006ca	33 c0		 xor	 eax, eax
  006cc	85 c0		 test	 eax, eax
  006ce	74 2b		 je	 SHORT $LN13@convert_yc
  006d0	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  006d5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  006dd	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  006e1	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  006ea	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  006ee	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
  006f9	eb 29		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  006fb	48 63 44 24 40	 movsxd	 rax, DWORD PTR x$[rsp]
  00700	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR C$[rsp]
  00708	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0070c	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR x0$[rsp]
  00715	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0
  00719	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
$LN14@convert_yc:

; 1628 :         }

  00724	e9 f6 fa ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1629 :     }

  00729	e9 3a fa ff ff	 jmp	 $LN2@convert_yc
$LN3@convert_yc:

; 1630 : }

  0072e	48 8b cc	 mov	 rcx, rsp
  00731	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z$rtcFrameData
  00738	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0073d	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00745	48 33 cc	 xor	 rcx, rsp
  00748	e8 00 00 00 00	 call	 __security_check_cookie
  0074d	48 81 c4 a8 03
	00 00		 add	 rsp, 936		; 000003a8H
  00754	5f		 pop	 rdi
  00755	5e		 pop	 rsi
  00756	c3		 ret	 0
??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
dst$ = 112
src$ = 120
width$ = 128
src_y_pitch_byte$ = 136
src_uv_pitch_byte$ = 144
dst_y_pitch_byte$ = 152
height$ = 160
dst_height$ = 168
thread_id$ = 176
thread_n$ = 184
crop$ = 192
?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z PROC ; convert_yc48_to_p010_sse41

; 39   : void convert_yc48_to_p010_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 40   :     convert_yc48_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  0002d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR crop$[rsp]
  00035	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003a	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR thread_n$[rsp]
  00041	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00045	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0004c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00050	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR dst_height$[rsp]
  00057	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0005b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR height$[rsp]
  00062	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00066	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR dst_y_pitch_byte$[rsp]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR src_uv_pitch_byte$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR src_y_pitch_byte$[rsp]
  00084	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR width$[rsp]
  0008c	48 8b 54 24 78	 mov	 rdx, QWORD PTR src$[rsp]
  00091	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dst$[rsp]
  00096	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_simd@$0A@@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ; convert_yc48_to_p010_simd<0>

; 41   : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?convert_yc48_to_p010_sse41@@YAXPEAPEAXPEAPEBXHHHHHHHHPEAH@Z ENDP ; convert_yc48_to_p010_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
x4$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
$T9 = 160
$T10 = 176
$T11 = 192
$T12 = 208
x0$ = 240
x1$ = 248
x2$ = 256
?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z PROC	; gather_y_u_v_to_yc48

; 1528 : static __forceinline void gather_y_u_v_to_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]

; 1529 :     __m128i x3, x4;
; 1530 : #if USE_SSE41
; 1531 :     alignas(16) static const uint8_t shuffle_yc48[16] = {
; 1532 :         0x00, 0x01, 0x06, 0x07, 0x0C, 0x0D, 0x02, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x04, 0x05, 0x0A, 0x0B
; 1533 :     };
; 1534 :     x4 = _mm_load_si128((__m128i *)shuffle_yc48);

  0002e	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z@4QBEB
  00036	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003c	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00042	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1535 :     x0 = _mm_shuffle_epi8(x0, x4);                          //5,2,7,4,1,6,3,0

  00048	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00050	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00054	66 0f 38 00 44
	24 10		 pshufb	 xmm0, XMMWORD PTR x4$[rsp]
  0005b	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00061	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00069	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0006f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1536 :     x1 = _mm_shuffle_epi8(x1, _mm_alignr_epi8(x4, x4, 14)); //2,7,4,1,6,3,0,5

  00073	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00079	66 0f 3a 0f 44
	24 10 0e	 palignr xmm0, XMMWORD PTR x4$[rsp], 14
  00081	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00087	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0008f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00093	66 0f 38 00 44
	24 40		 pshufb	 xmm0, XMMWORD PTR $T3[rsp]
  0009a	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000a0	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000a8	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000ae	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1537 :     x2 = _mm_shuffle_epi8(x2, _mm_alignr_epi8(x4, x4, 12)); //7,4,1,6,3,0,5,2

  000b2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  000b8	66 0f 3a 0f 44
	24 10 0c	 palignr xmm0, XMMWORD PTR x4$[rsp], 12
  000c0	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000c6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  000ce	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d2	66 0f 38 00 44
	24 60		 pshufb	 xmm0, XMMWORD PTR $T5[rsp]
  000d9	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000df	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  000e7	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000ed	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1538 : 
; 1539 :     x3 = _mm_blend_epi16(x0, x1, 0x80 + 0x10 + 0x02);

  000f1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00101	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00105	66 0f 3a 0e 01
	92		 pblendw xmm0, XMMWORD PTR [rcx], 146 ; 00000092H
  0010b	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00114	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0011d	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1540 :     x3 = _mm_blend_epi16(x3, x2, 0x20 + 0x04);

  00122	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0012a	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0012f	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [rax], 36 ; 00000024H
  00135	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0013e	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00147	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1541 : 
; 1542 :     x4 = _mm_blend_epi16(x2, x1, 0x20 + 0x04);

  0014c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00154	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0015c	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00160	66 0f 3a 0e 01
	24		 pblendw xmm0, XMMWORD PTR [rcx], 36 ; 00000024H
  00166	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  0016f	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00178	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1543 :     x4 = _mm_blend_epi16(x4, x0, 0x80 + 0x10 + 0x02);

  0017e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00186	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  0018c	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  00192	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0019b	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  001a4	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1544 : 
; 1545 :     x2 = _mm_blend_epi16(x2, x0, 0x20 + 0x04);

  001aa	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001b2	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  001ba	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001be	66 0f 3a 0e 01
	24		 pblendw xmm0, XMMWORD PTR [rcx], 36 ; 00000024H
  001c4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001cd	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001d5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  001de	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1546 :     x2 = _mm_blend_epi16(x2, x1, 0x40 + 0x08 + 0x01);

  001e2	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  001ea	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  001f2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001f6	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  001fc	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00205	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0020d	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00216	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1547 : 
; 1548 :     x0 = x3;

  0021a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00222	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00227	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1549 :     x1 = x4;

  0022b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00233	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  00239	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1550 : #else
; 1551 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,6,5,4,3,1,2,0
; 1552 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,6,4,3,1,2,0
; 1553 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,4,2,0
; 1554 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,2,4,0
; 1555 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,3,5,1,6,2,4,0
; 1556 : 
; 1557 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1558 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1559 :     x1 = _mm_shuffle_epi32(  x1, _MM_SHUFFLE(3,1,2,0));
; 1560 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1561 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1562 : 
; 1563 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1564 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1565 :     x2 = _mm_shuffle_epi32(  x2, _MM_SHUFFLE(3,1,2,0));
; 1566 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1567 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1568 : 
; 1569 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1570 :     x0 = _mm_unpacklo_epi16(x0, x1);
; 1571 :     x1 = _mm_unpackhi_epi16(x1, x2);
; 1572 :     x2 = _mm_unpacklo_epi16(x2, x3);
; 1573 : 
; 1574 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1575 :     x0 = _mm_unpacklo_epi32(x0, x2);
; 1576 :     x2 = _mm_unpackhi_epi32(x2, x1);
; 1577 :     x1 = _mm_unpacklo_epi32(x1, x3);
; 1578 : 
; 1579 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1580 :     x0 = _mm_unpacklo_epi64(x0, x1);
; 1581 :     x1 = _mm_unpackhi_epi64(x1, x2);
; 1582 :     x2 = _mm_unpacklo_epi64(x2, x3);
; 1583 : 
; 1584 :     x4 = x2;
; 1585 :     x2 = x1;
; 1586 :     x1 = x4;
; 1587 : #endif
; 1588 : }

  0023d	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00244	5f		 pop	 rdi
  00245	c3		 ret	 0
?gather_y_u_v_to_yc48@@YAXAEAT__m128i@@00@Z ENDP	; gather_y_u_v_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
x4$ = 16
x5$ = 32
MASK_INT$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$T13 = 256
$T14 = 272
$T15 = 288
$T16 = 304
x0$ = 336
x1$ = 344
x2$ = 352
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z PROC	; gather_y_u_v_from_yc48

; 1464 : static __forceinline void gather_y_u_v_from_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR [rsp+336]

; 1465 : #if USE_SSE41
; 1466 :     __m128i x3, x4, x5;
; 1467 :     const int MASK_INT = 0x40 + 0x08 + 0x01;

  0002e	c7 44 24 30 49
	00 00 00	 mov	 DWORD PTR MASK_INT$[rsp], 73 ; 00000049H

; 1468 :     x3 = _mm_blend_epi16(x2, x0, MASK_INT);

  00036	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  0003e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  00046	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0004a	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  00050	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00056	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005c	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1469 :     x4 = _mm_blend_epi16(x1, x2, MASK_INT);

  00061	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00069	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR x2$[rsp]
  00071	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00075	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  0007b	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00081	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00087	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1470 :     x5 = _mm_blend_epi16(x0, x1, MASK_INT);

  0008d	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [rcx], 73 ; 00000049H
  000a7	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ad	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b3	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1471 : 
; 1472 :     x3 = _mm_blend_epi16(x3, x1, MASK_INT<<1);

  000b9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000c1	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  000c6	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  000cc	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d2	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000d8	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1473 :     x4 = _mm_blend_epi16(x4, x0, MASK_INT<<1);

  000dd	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000e5	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  000eb	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  000f1	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000fa	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00103	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR x4$[rsp], xmm0

; 1474 :     x5 = _mm_blend_epi16(x5, x2, MASK_INT<<1);

  00109	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00111	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00117	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [rax], 146 ; 00000092H
  0011d	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  00126	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  0012f	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR x5$[rsp], xmm0

; 1475 : 
; 1476 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  00135	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0013d	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00146	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  0014b	66 0f 38 00 84
	24 a0 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T7[rsp]
  00155	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0015e	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00166	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  0016f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1477 :     x1 = _mm_shuffle_epi8(x4, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 6));

  00173	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0017b	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  00184	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  0018c	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00195	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  0019e	66 0f 3a 0f 84
	24 d0 00 00 00
	06		 palignr xmm0, XMMWORD PTR $T10[rsp], 6
  001a9	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001b2	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR x4$[rsp]
  001b8	66 0f 38 00 84
	24 e0 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T11[rsp]
  001c2	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001cb	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  001d3	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001dc	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1478 :     x2 = _mm_shuffle_epi8(x5, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 12));

  001e0	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  001e8	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  001f1	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  001f9	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00202	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  0020b	66 0f 3a 0f 84
	24 10 01 00 00
	0c		 palignr xmm0, XMMWORD PTR $T14[rsp], 12
  00216	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  0021f	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR x5$[rsp]
  00225	66 0f 38 00 84
	24 20 01 00 00	 pshufb	 xmm0, XMMWORD PTR $T15[rsp]
  0022f	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  00238	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00240	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00249	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1479 : #else
; 1480 :     //code from afs v7.5a+10
; 1481 :     __m128i x5, x6, x7, xMask;
; 1482 :     //select y
; 1483 :     alignas(16) static const uint16_t maskY_select[8] = { 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000 };
; 1484 :     xMask = _mm_load_si128((__m128i*)maskY_select);
; 1485 : 
; 1486 :     x5 = select_by_mask(x2, x0, xMask);
; 1487 :     xMask = _mm_slli_si128(xMask, 2);
; 1488 :     x5 = select_by_mask(x5, x1, xMask); //52741630
; 1489 : 
; 1490 :     x6 = _mm_unpacklo_epi16(x5, x5);    //11663300
; 1491 :     x7 = _mm_unpackhi_epi16(x5, x5);    //55227744
; 1492 : 
; 1493 :     alignas(16) static const uint16_t maskY_shuffle[8] = { 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000 };
; 1494 :     xMask = _mm_load_si128((__m128i*)maskY_shuffle);
; 1495 :     x5 = select_by_mask(x7, x6, xMask);                 //51627340
; 1496 :     x5 = _mm_shuffle_epi32(x5, _MM_SHUFFLE(1, 2, 3, 0));   //73625140
; 1497 : 
; 1498 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //75316420
; 1499 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //76543210
; 1500 : 
; 1501 :                                                         //select uv
; 1502 :     xMask = _mm_srli_si128(_mm_cmpeq_epi8(xMask, xMask), 8); //0x00000000, 0x00000000, 0xffffffff, 0xffffffff
; 1503 :     x6 = select_by_mask(_mm_srli_si128(x1, 2), _mm_srli_si128(x2, 2), xMask); //x  x v4 u4 v6 u6 x  x
; 1504 :     x7 = select_by_mask(x0, x1, xMask);               //x  x  v1 u1 v3 u3 x  x
; 1505 :     xMask = _mm_slli_si128(xMask, 4);                 //0x00000000, 0xffffffff, 0xffffffff, 0x00000000
; 1506 :     x0 = _mm_alignr_epi8_simd(x1, x0, 2);             //v2 u2  x  x  x  x v0 u0
; 1507 :     x6 = select_by_mask(x0, x6, xMask);               //v2 u2 v4 u4 v6 u6 v0 u0
; 1508 :     x7 = select_by_mask(x2, x7, xMask);               //v7 u7 v1 u1 v3 u3 v5 u5
; 1509 :     x0 = _mm_shuffle_epi32(x6, _MM_SHUFFLE(1, 2, 3, 0)); //v6 u6 v4 u4 v2 u2 v0 u0
; 1510 :     x1 = _mm_shuffle_epi32(x7, _MM_SHUFFLE(3, 0, 1, 2)); //v7 u7 v5 u5 v3 u3 v1 u1
; 1511 : 
; 1512 :     x6 = _mm_unpacklo_epi16(x0, x1); //v3 v2 u3 u2 v1 v0 u1 u0
; 1513 :     x7 = _mm_unpackhi_epi16(x0, x1); //v7 v6 u7 u6 v5 v4 u5 u4
; 1514 : 
; 1515 :     x0 = _mm_unpacklo_epi32(x6, x7); //v5 v4 v1 v0 u5 u4 u1 u0
; 1516 :     x1 = _mm_unpackhi_epi32(x6, x7); //v7 v6 v3 v2 u7 u6 u3 u2
; 1517 : 
; 1518 :     x6 = _mm_unpacklo_epi32(x0, x1); //u7 u6 u5 u4 u3 u2 u1 u0
; 1519 :     x7 = _mm_unpackhi_epi32(x0, x1); //v7 v6 v5 v4 v3 v2 v1 v0
; 1520 : 
; 1521 :     x0 = x5;
; 1522 :     x1 = x6;
; 1523 :     x2 = x7;
; 1524 : #endif //USE_SSE41
; 1525 : }

  0024d	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  00254	5f		 pop	 rdi
  00255	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAEAT__m128i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
xC_coeff$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
xC_0x8000$ = 80
$T4 = 96
$T5 = 112
x1$ = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$T13 = 256
x0$ = 288
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_uv_range_to_yc48

; 1447 : static __forceinline __m128i convert_uv_range_to_yc48(__m128i x0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]

; 1448 :     //coeff = 4682
; 1449 :     //UV = (( uv - 32768 ) * coef + (1<<15) ) >> 16
; 1450 :     const __m128i xC_coeff = _mm_unpacklo_epi16(_mm_set1_epi16(4682), _mm_set1_epi16(-1));

  00024	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0002c	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00032	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@124a124a124a124a124a124a124a124a
  0003a	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00040	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00046	66 0f 61 44 24
	30		 punpcklwd xmm0, XMMWORD PTR $T2[rsp]
  0004c	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00052	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00058	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR xC_coeff$[rsp], xmm0

; 1451 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  0005e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00066	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  0006e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00072	66 0f 76 01	 pcmpeqd xmm0, XMMWORD PTR [rcx]
  00076	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  0007c	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  00082	66 0f 71 f0 0f	 psllw	 xmm0, 15
  00087	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  0008d	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00093	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR xC_0x8000$[rsp], xmm0

; 1452 :     __m128i x1;
; 1453 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  00099	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000a1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a5	66 0f fd 44 24
	50		 paddw	 xmm0, XMMWORD PTR xC_0x8000$[rsp]
  000ab	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000b4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000bc	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  000c5	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1454 :     x1 = _mm_unpackhi_epi16(x0, xC_0x8000);

  000c9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d1	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d5	66 0f 69 44 24
	50		 punpckhwd xmm0, XMMWORD PTR xC_0x8000$[rsp]
  000db	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000e4	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000ed	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1455 :     x0 = _mm_unpacklo_epi16(x0, xC_0x8000);

  000f6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000fe	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00102	66 0f 61 44 24
	50		 punpcklwd xmm0, XMMWORD PTR xC_0x8000$[rsp]
  00108	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00111	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00119	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00122	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1456 :     x0 = _mm_madd_epi16(x0, xC_coeff);

  00126	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0012e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00132	66 0f f5 44 24
	10		 pmaddwd xmm0, XMMWORD PTR xC_coeff$[rsp]
  00138	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  00141	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00149	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  00152	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1457 :     x1 = _mm_madd_epi16(x1, xC_coeff);

  00156	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0015f	66 0f f5 44 24
	10		 pmaddwd xmm0, XMMWORD PTR xC_coeff$[rsp]
  00165	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  0016e	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  00177	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1458 :     x0 = _mm_srai_epi32(x0, 16);

  00180	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00188	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0018c	66 0f 72 e0 10	 psrad	 xmm0, 16
  00191	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  0019a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001a2	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  001ab	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1459 :     x1 = _mm_srai_epi32(x1, 16);

  001af	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001b8	66 0f 72 e0 10	 psrad	 xmm0, 16
  001bd	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  001c6	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  001cf	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1460 :     x0 = _mm_packs_epi32(x0, x1);

  001d8	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001e0	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001e4	66 0f 6b 84 24
	80 00 00 00	 packssdw xmm0, XMMWORD PTR x1$[rsp]
  001ed	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  001f6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001fe	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00207	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1461 :     return x0;

  0020b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00213	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1462 : }

  00217	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0021e	5f		 pop	 rdi
  0021f	c3		 ret	 0
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_uv_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
xC_0x8000$ = 16
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
x0$ = 160
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_y_range_to_yc48

; 1437 : static __forceinline __m128i convert_y_range_to_yc48(__m128i x0) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]

; 1438 :     //coef = 4788
; 1439 :     //((( y - 32768 ) * coef) >> 16 ) + (coef/2 - 299)
; 1440 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  00024	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0002c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR x0$[rsp]
  00034	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00038	66 0f 76 01	 pcmpeqd xmm0, XMMWORD PTR [rcx]
  0003c	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00042	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00048	66 0f 71 f0 0f	 psllw	 xmm0, 15
  0004d	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00053	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00059	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR xC_0x8000$[rsp], xmm0

; 1441 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  0005f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00067	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006b	66 0f fd 44 24
	10		 paddw	 xmm0, XMMWORD PTR xC_0x8000$[rsp]
  00071	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  00077	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0007f	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  00085	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1442 :     x0 = _mm_mulhi_epi16(x0, _mm_set1_epi16(4788));

  00089	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@12b412b412b412b412b412b412b412b4
  00091	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  00097	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0009f	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a3	66 0f e5 44 24
	50		 pmulhw	 xmm0, XMMWORD PTR $T4[rsp]
  000a9	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  000af	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b7	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  000bd	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1443 :     x0 = _mm_adds_epi16(x0, _mm_set1_epi16(4788/2 - 299));

  000c1	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@082f082f082f082f082f082f082f082f
  000c9	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  000cf	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d7	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000db	66 0f ed 44 24
	70		 paddsw	 xmm0, XMMWORD PTR $T6[rsp]
  000e1	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  000ea	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  000fb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1444 :     return x0;

  000ff	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00107	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1445 : }

  0010b	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_y_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x2$ = 48
x3$ = 64
x6$ = 80
x7$ = 96
$T1 = 112
$T2 = 128
$T3 = 144
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
$T17 = 368
$T18 = 384
$T19 = 400
x0$ = 432
x1$ = 440
xC_UV_OFFSET_x1$ = 448
xC_UV_MA_16_0$ = 456
xC_UV_MA_16_1$ = 464
UV_RSH_16$ = 472
xC_YCC$ = 480
xC_pw_one$ = 488
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i

; 1411 : static __forceinline __m128i convert_uv_range_from_yc48_420i(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16_0, const __m128i& xC_UV_MA_16_1, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR [rsp+432]

; 1412 :     __m128i x2, x3, x6, x7;
; 1413 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00033	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1414 :     x1 = _mm_add_epi16(x1, xC_UV_OFFSET_x1);

  00063	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0006b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00084	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0008c	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00095	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1415 : 
; 1416 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00099	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000a1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000a9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000ad	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  000b1	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ba	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000c3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1417 :     x6 = _mm_unpacklo_epi16(x0, xC_pw_one);

  000c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000d1	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  000d9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000dd	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  000e1	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000ea	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000f3	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1418 :     x3 = _mm_unpackhi_epi16(x1, xC_pw_one);

  000f9	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00101	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00109	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0010d	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  00111	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  0011a	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00123	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1419 :     x2 = _mm_unpacklo_epi16(x1, xC_pw_one);

  00129	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00131	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00139	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0013d	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00141	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0014a	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00153	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1420 : 
; 1421 :     x6 = _mm_madd_epi16(x6, xC_UV_MA_16_0);

  00159	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  00161	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00167	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  0016b	66 0f 7f 84 24
	d0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  00174	66 0f 6f 84 24
	d0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR x6$[rsp], xmm0

; 1422 :     x7 = _mm_madd_epi16(x7, xC_UV_MA_16_0);

  00183	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_0$[rsp]
  0018b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00191	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  00195	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019e	66 0f 6f 84 24
	e0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a7	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1423 :     x2 = _mm_madd_epi16(x2, xC_UV_MA_16_1);

  001ad	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001b5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x2$[rsp]
  001bb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001bf	66 0f 7f 84 24
	f0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001c8	66 0f 6f 84 24
	f0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001d1	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x2$[rsp], xmm0

; 1424 :     x3 = _mm_madd_epi16(x3, xC_UV_MA_16_1);

  001d7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16_1$[rsp]
  001df	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  001e5	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  001e9	66 0f 7f 84 24
	00 01 00 00	 movdqa	 XMMWORD PTR $T10[rsp], xmm0
  001f2	66 0f 6f 84 24
	00 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T10[rsp]
  001fb	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1425 :     x0 = _mm_add_epi32(x6, x2);

  00201	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR x6$[rsp]
  00207	66 0f fe 44 24
	30		 paddd	 xmm0, XMMWORD PTR x2$[rsp]
  0020d	66 0f 7f 84 24
	10 01 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  00216	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0021e	66 0f 6f 84 24
	10 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T11[rsp]
  00227	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1426 :     x7 = _mm_add_epi32(x7, x3);

  0022b	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  00231	66 0f fe 44 24
	40		 paddd	 xmm0, XMMWORD PTR x3$[rsp]
  00237	66 0f 7f 84 24
	20 01 00 00	 movdqa	 XMMWORD PTR $T12[rsp], xmm0
  00240	66 0f 6f 84 24
	20 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T12[rsp]
  00249	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1427 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  0024f	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00258	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00260	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  00264	66 0f e2 c8	 psrad	 xmm1, xmm0
  00268	66 0f 6f c1	 movdqa	 xmm0, xmm1
  0026c	66 0f 7f 84 24
	30 01 00 00	 movdqa	 XMMWORD PTR $T13[rsp], xmm0
  00275	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0027d	66 0f 6f 84 24
	30 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T13[rsp]
  00286	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1428 :     x7 = _mm_srai_epi32(x7, UV_RSH_16);

  0028a	66 0f 6e 84 24
	d8 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00293	66 0f 6f 4c 24
	60		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  00299	66 0f e2 c8	 psrad	 xmm1, xmm0
  0029d	66 0f 6f c1	 movdqa	 xmm0, xmm1
  002a1	66 0f 7f 84 24
	40 01 00 00	 movdqa	 XMMWORD PTR $T14[rsp], xmm0
  002aa	66 0f 6f 84 24
	40 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T14[rsp]
  002b3	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1429 :     x0 = _mm_add_epi32(x0, xC_YCC);

  002b9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002c1	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  002c9	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  002cd	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  002d1	66 0f 7f 84 24
	50 01 00 00	 movdqa	 XMMWORD PTR $T15[rsp], xmm0
  002da	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  002e2	66 0f 6f 84 24
	50 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T15[rsp]
  002eb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1430 :     x7 = _mm_add_epi32(x7, xC_YCC);

  002ef	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  002f7	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  002fd	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00301	66 0f 7f 84 24
	60 01 00 00	 movdqa	 XMMWORD PTR $T16[rsp], xmm0
  0030a	66 0f 6f 84 24
	60 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T16[rsp]
  00313	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1431 : 
; 1432 :     x0 = _mm_packus_epi32_simd(x0, x7);

  00319	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0031f	66 0f 7f 84 24
	90 01 00 00	 movdqa	 XMMWORD PTR $T19[rsp], xmm0
  00328	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00330	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00334	f3 0f 7f 84 24
	80 01 00 00	 movdqu	 XMMWORD PTR $T18[rsp], xmm0
  0033d	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  00345	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR $T18[rsp]
  0034d	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  00352	66 0f 7f 84 24
	70 01 00 00	 movdqa	 XMMWORD PTR $T17[rsp], xmm0
  0035b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00363	66 0f 6f 84 24
	70 01 00 00	 movdqa	 xmm0, XMMWORD PTR $T17[rsp]
  0036c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1433 : 
; 1434 :     return x0;

  00370	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00378	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1435 : }

  0037c	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  00383	5f		 pop	 rdi
  00384	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0AEBT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
x0$ = 144
x1$ = 152
xC_UV_OFFSET_x2$ = 160
xC_UV_MA_16$ = 168
UV_RSH_16$ = 176
xC_YCC$ = 184
xC_pw_one$ = 192
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z PROC ; convert_uv_range_from_yc48_yuv420p

; 1405 : static __forceinline __m128i convert_uv_range_from_yc48_yuv420p(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x2, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]

; 1406 :     x0 = _mm_add_epi16(x0, x1);

  00033	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00059	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1407 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x2);

  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0006b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x2$[rsp]
  00073	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00077	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  0007b	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00081	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00089	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  0008f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1408 : 
; 1409 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00093	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0009b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0009f	f3 0f 7f 44 24
	70		 movdqu	 XMMWORD PTR $T4[rsp], xmm0
  000a5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  000ba	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  000c2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  000ca	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp]
  000cf	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000d4	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000da	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]

; 1410 : }

  000e0	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000e7	5f		 pop	 rdi
  000e8	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0AEBT1@1H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
$T3 = 96
x0$ = 128
xC_UV_OFFSET_x1$ = 136
xC_UV_MA_16$ = 144
UV_RSH_16$ = 152
xC_YCC$ = 160
xC_pw_one$ = 168
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z PROC ; convert_uv_range_from_yc48

; 1400 : static __forceinline __m128i convert_uv_range_from_yc48(__m128i x0, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16, int UV_RSH_16, __m128i xC_YCC, const __m128i& xC_pw_one) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1c 00 00 00	 mov	 ecx, 28
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1401 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00030	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00038	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR xC_UV_OFFSET_x1$[rsp]
  00040	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00044	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [rcx]
  00048	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00056	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  0005c	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1402 : 
; 1403 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00068	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0006c	f3 0f 7f 44 24
	60		 movdqu	 XMMWORD PTR $T3[rsp], xmm0
  00072	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR xC_pw_one$[rsp]
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR xC_YCC$[rsp]
  00087	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR UV_RSH_16$[rsp]
  0008f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR xC_UV_MA_16$[rsp]
  00097	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T3[rsp]
  0009c	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ; convert_uv_range_after_adding_offset
  000a1	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  000a7	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]

; 1404 : }

  000ad	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@1H01@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x1$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_UV_MA_16$ = 264
UV_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_uv_range_after_adding_offset

; 1383 : static __forceinline __m128i convert_uv_range_after_adding_offset(__m128i x0, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1384 :     __m128i x1;
; 1385 :     x1 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1386 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1387 : 
; 1388 :     x0 = _mm_madd_epi16(x0, xC_UV_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_UV_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1389 :     x1 = _mm_madd_epi16(x1, xC_UV_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_UV_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1390 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1391 :     x1 = _mm_srai_epi32(x1, UV_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR UV_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x1$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1392 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1393 :     x1 = _mm_add_epi32(x1, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x1$[rsp], xmm0

; 1394 : 
; 1395 :     x0 = _mm_packus_epi32_simd(x0, x1);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x1$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1396 : 
; 1397 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1398 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x7$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
x0$ = 256
xC_Y_MA_16$ = 264
Y_RSH_16$ = 272
xC_YCC$ = 280
xC_pw_one$ = 288
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z PROC ; convert_y_range_from_yc48

; 1366 : static __forceinline __m128i convert_y_range_from_yc48(__m128i x0, const __m128i& xC_Y_MA_16, int Y_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR [rsp+256]

; 1367 :     __m128i x7;
; 1368 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0003b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  00043	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00047	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [rcx]
  0004b	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  00051	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00057	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1369 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0005d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00065	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR xC_pw_one$[rsp]
  0006d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00071	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [rcx]
  00075	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  0007b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00083	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00089	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1370 : 
; 1371 :     x0 = _mm_madd_epi16(x0, xC_Y_MA_16);

  0008d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR xC_Y_MA_16$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [rcx]
  000a5	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ab	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000b3	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000b9	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1372 :     x7 = _mm_madd_epi16(x7, xC_Y_MA_16);

  000bd	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR xC_Y_MA_16$[rsp]
  000c5	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  000cb	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [rax]
  000cf	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000d5	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000db	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1373 :     x0 = _mm_srai_epi32(x0, Y_RSH_16);

  000e1	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  000ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  000f2	f3 0f 6f 08	 movdqu	 xmm1, XMMWORD PTR [rax]
  000f6	66 0f e2 c8	 psrad	 xmm1, xmm0
  000fa	66 0f 6f c1	 movdqa	 xmm0, xmm1
  000fe	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00107	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0010f	66 0f 6f 84 24
	80 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  00118	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1374 :     x7 = _mm_srai_epi32(x7, Y_RSH_16);

  0011c	66 0f 6e 84 24
	10 01 00 00	 movd	 xmm0, DWORD PTR Y_RSH_16$[rsp]
  00125	66 0f 6f 4c 24
	30		 movdqa	 xmm1, XMMWORD PTR x7$[rsp]
  0012b	66 0f e2 c8	 psrad	 xmm1, xmm0
  0012f	66 0f 6f c1	 movdqa	 xmm0, xmm1
  00133	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013c	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00145	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1375 :     x0 = _mm_add_epi32(x0, xC_YCC);

  0014b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00153	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR xC_YCC$[rsp]
  0015b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0015f	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [rcx]
  00163	66 0f 7f 84 24
	a0 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0016c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00174	66 0f 6f 84 24
	a0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T7[rsp]
  0017d	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1376 :     x7 = _mm_add_epi32(x7, xC_YCC);

  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR xC_YCC$[rsp]
  00189	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  0018f	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [rax]
  00193	66 0f 7f 84 24
	b0 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  0019c	66 0f 6f 84 24
	b0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  001a5	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR x7$[rsp], xmm0

; 1377 : 
; 1378 :     x0 = _mm_packus_epi32_simd(x0, x7);

  001ab	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR x7$[rsp]
  001b1	66 0f 7f 84 24
	e0 00 00 00	 movdqa	 XMMWORD PTR $T11[rsp], xmm0
  001ba	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001c2	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  001c6	f3 0f 7f 84 24
	d0 00 00 00	 movdqu	 XMMWORD PTR $T10[rsp], xmm0
  001cf	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  001d7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  001df	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  001e4	66 0f 7f 84 24
	c0 00 00 00	 movdqa	 XMMWORD PTR $T9[rsp], xmm0
  001ed	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  001f5	66 0f 6f 84 24
	c0 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T9[rsp]
  001fe	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1379 : 
; 1380 :     return x0;

  00202	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0020a	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]

; 1381 : }

  0020e	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@AEBT1@H11@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
x3$ = 0
MASK_INT_Y$ = 16
MASK_INT_UV$ = 20
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$T6 = 112
$T7 = 128
$T8 = 144
x0$ = 176
x1$ = 184
x2$ = 192
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z PROC	; gather_y_uv_from_yc48

; 1331 : static __forceinline void gather_y_uv_from_yc48(__m128i& x0, __m128i& x1, __m128i x2) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 1332 : #if USE_SSE41
; 1333 :     __m128i x3;
; 1334 :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;

  0002e	c7 44 24 10 92
	00 00 00	 mov	 DWORD PTR MASK_INT_Y$[rsp], 146 ; 00000092H

; 1335 :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;

  00036	c7 44 24 14 61
	00 00 00	 mov	 DWORD PTR MASK_INT_UV$[rsp], 97 ; 00000061H

; 1336 :     x3 = _mm_blend_epi16(x0, x1, MASK_INT_Y);

  0003e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00046	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0004e	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00052	66 0f 3a 0e 01
	92		 pblendw xmm0, XMMWORD PTR [rcx], 146 ; 00000092H
  00058	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0005e	66 0f 6f 44 24
	20		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]
  00064	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1337 :     x3 = _mm_blend_epi16(x3, x2, MASK_INT_Y>>2);

  00069	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR x2$[rsp]
  00071	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00076	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [rax], 36 ; 00000024H
  0007c	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T2[rsp], xmm0
  00082	66 0f 6f 44 24
	30		 movdqa	 xmm0, XMMWORD PTR $T2[rsp]
  00088	66 0f 7f 04 24	 movdqa	 XMMWORD PTR x3$[rsp], xmm0

; 1338 : 
; 1339 :     x1 = _mm_blend_epi16(x0, x1, MASK_INT_UV);

  0008d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  00095	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  0009d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000a1	66 0f 3a 0e 01
	61		 pblendw xmm0, XMMWORD PTR [rcx], 97 ; 00000061H
  000a7	66 0f 7f 44 24
	40		 movdqa	 XMMWORD PTR $T3[rsp], xmm0
  000ad	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000b5	66 0f 6f 44 24
	40		 movdqa	 xmm0, XMMWORD PTR $T3[rsp]
  000bb	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1340 :     x1 = _mm_blend_epi16(x1, x2, MASK_INT_UV>>2);

  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000c7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR x2$[rsp]
  000cf	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  000d3	66 0f 3a 0e 01
	18		 pblendw xmm0, XMMWORD PTR [rcx], 24
  000d9	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000df	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000e7	66 0f 6f 44 24
	50		 movdqa	 xmm0, XMMWORD PTR $T4[rsp]
  000ed	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1341 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);

  000f1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  000f9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR x1$[rsp]
  00101	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00105	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [rcx], 2
  0010b	66 0f 7f 44 24
	60		 movdqa	 XMMWORD PTR $T5[rsp], xmm0
  00111	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00119	66 0f 6f 44 24
	60		 movdqa	 xmm0, XMMWORD PTR $T5[rsp]
  0011f	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1342 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));//UV1行目

  00123	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  0012b	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  0012f	66 0f 70 c0 6c	 pshufd	 xmm0, xmm0, 108		; 0000006cH
  00134	66 0f 7f 44 24
	70		 movdqa	 XMMWORD PTR $T6[rsp], xmm0
  0013a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR x1$[rsp]
  00142	66 0f 6f 44 24
	70		 movdqa	 xmm0, XMMWORD PTR $T6[rsp]
  00148	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1343 : 
; 1344 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  0014c	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00154	66 0f 7f 84 24
	80 00 00 00	 movdqa	 XMMWORD PTR $T7[rsp], xmm0
  0015d	66 0f 6f 04 24	 movdqa	 xmm0, XMMWORD PTR x3$[rsp]
  00162	66 0f 38 00 84
	24 80 00 00 00	 pshufb	 xmm0, XMMWORD PTR $T7[rsp]
  0016c	66 0f 7f 84 24
	90 00 00 00	 movdqa	 XMMWORD PTR $T8[rsp], xmm0
  00175	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR x0$[rsp]
  0017d	66 0f 6f 84 24
	90 00 00 00	 movdqa	 xmm0, XMMWORD PTR $T8[rsp]
  00186	f3 0f 7f 00	 movdqu	 XMMWORD PTR [rax], xmm0

; 1345 : #else
; 1346 :     __m128i x3;
; 1347 :     x3 = select_by_mask(x0, x1, xC_MASK_YCP2Y(0));
; 1348 :     x3 = select_by_mask(x3, x2, xC_MASK_YCP2Y(1));
; 1349 : 
; 1350 :     x1 = select_by_mask(x0, x1, xC_MASK_YCP2UV(0));
; 1351 :     x1 = select_by_mask(x1, x2, xC_MASK_YCP2UV(1));
; 1352 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);
; 1353 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));
; 1354 : #if USE_SSSE3
; 1355 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1356 : #else
; 1357 :     x0 = _mm_shuffle_epi32(  x3, _MM_SHUFFLE(3,1,2,0));
; 1358 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1359 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(1,2,3,0));
; 1360 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1361 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,0,1,2));
; 1362 : #endif //USE_SSSE3
; 1363 : #endif //USE_SSE41
; 1364 : }

  0018a	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00191	5f		 pop	 rdi
  00192	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAEAT__m128i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = 16
a$ = 48
b$ = 56
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z PROC	; _mm_packus_epi32_simd

; 98   : static __forceinline __m128i _mm_packus_epi32_simd(__m128i a, __m128i b) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 99   : #if USE_SSE41
; 100  :     return _mm_packus_epi32(a, b);

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$[rsp]
  0002d	f3 0f 6f 00	 movdqu	 xmm0, XMMWORD PTR [rax]
  00031	66 0f 38 2b 01	 packusdw xmm0, XMMWORD PTR [rcx]
  00036	66 0f 7f 44 24
	10		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
  0003c	66 0f 6f 44 24
	10		 movdqa	 xmm0, XMMWORD PTR $T1[rsp]

; 101  : #else
; 102  :     alignas(64) static const uint32_t VAL[2][4] = {
; 103  :         { 0x00008000, 0x00008000, 0x00008000, 0x00008000 },
; 104  :         { 0x80008000, 0x80008000, 0x80008000, 0x80008000 }
; 105  :     };
; 106  : #define LOAD_32BIT_0x8000 _mm_load_si128((__m128i *)VAL[0])
; 107  : #define LOAD_16BIT_0x8000 _mm_load_si128((__m128i *)VAL[1])
; 108  :     a = _mm_sub_epi32(a, LOAD_32BIT_0x8000);
; 109  :     b = _mm_sub_epi32(b, LOAD_32BIT_0x8000);
; 110  :     a = _mm_packs_epi32(a, b);
; 111  :     return _mm_add_epi16(a, LOAD_16BIT_0x8000);
; 112  : #undef LOAD_32BIT_0x8000
; 113  : #undef LOAD_16BIT_0x8000
; 114  : #endif
; 115  : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ENDP	; _mm_packus_epi32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
h$ = 32
y_range$ = 56
y0$ = 84
y1$ = 88
__$ArrayPad$ = 104
$T4 = 144
y_start$ = 152
y_end$ = 160
thread_id$ = 168
thread_n$ = 176
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 1e 00 00 00	 mov	 ecx, 30
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c4	 xor	 rax, rsp
  0003a	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 376  :     const int h = y_end - y_start;

  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR y_start$[rsp]
  00046	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR y_end$[rsp]
  0004d	2b c8		 sub	 ecx, eax
  0004f	8b c1		 mov	 eax, ecx
  00051	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00055	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00059	0f af 84 24 a8
	00 00 00	 imul	 eax, DWORD PTR thread_id$[rsp]
  00061	99		 cdq
  00062	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  00069	83 c0 03	 add	 eax, 3
  0006c	83 e0 fc	 and	 eax, -4
  0006f	89 44 24 54	 mov	 DWORD PTR y0$[rsp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  00073	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR thread_id$[rsp]
  0007a	ff c0		 inc	 eax
  0007c	8b 4c 24 20	 mov	 ecx, DWORD PTR h$[rsp]
  00080	0f af c8	 imul	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	99		 cdq
  00086	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR thread_n$[rsp]
  0008d	83 c0 03	 add	 eax, 3
  00090	83 e0 fc	 and	 eax, -4
  00093	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax

; 380  :     if (y1 > h) {

  00097	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0009b	39 44 24 58	 cmp	 DWORD PTR y1$[rsp], eax
  0009f	7e 08		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  000a1	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  000a5	89 44 24 58	 mov	 DWORD PTR y1$[rsp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  000a9	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000ad	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y_start$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR y_range$[rsp], eax

; 384  :     y_range.start_dst = y0;

  000bc	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c0	89 44 24 3c	 mov	 DWORD PTR y_range$[rsp+4], eax

; 385  :     y_range.len = y1 - y0;

  000c4	8b 44 24 54	 mov	 eax, DWORD PTR y0$[rsp]
  000c8	8b 4c 24 58	 mov	 ecx, DWORD PTR y1$[rsp]
  000cc	2b c8		 sub	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 40	 mov	 DWORD PTR y_range$[rsp+8], eax

; 386  :     return y_range;

  000d4	48 8d 44 24 38	 lea	 rax, QWORD PTR y_range$[rsp]
  000d9	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR $T4[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 0c 00 00 00	 mov	 ecx, 12
  000e9	f3 a4		 rep movsb
  000eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]

; 387  : }

  000f3	48 8b f8	 mov	 rdi, rax
  000f6	48 8b cc	 mov	 rcx, rsp
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z$rtcFrameData
  00100	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00105	48 8b c7	 mov	 rax, rdi
  00108	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010d	48 33 cc	 xor	 rcx, rsp
  00110	e8 00 00 00 00	 call	 __security_check_cookie
  00115	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00119	5f		 pop	 rdi
  0011a	5e		 pop	 rsi
  0011b	c3		 ret	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
