; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG91827 DB	'GPUZShMem', 00H
	ORG $+6
$SG91838 DB	'C', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG91839 DB	'C', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
	ORG $+4
$SG91848 DB	'G', 00H, 'P', 00H, 'U', 00H, ' ', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG91858 DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z		; get_gpuz_info
PUBLIC	?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z		; gpu_core_clock
PUBLIC	?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z		; gpu_load
PUBLIC	?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z	; video_engine_load
EXTRN	__imp_tolower:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	__imp__wcsnicmp:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_MapViewOfFile:PROC
EXTRN	__imp_UnmapViewOfFile:PROC
EXTRN	__imp_OpenFileMappingA:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
pdata	SEGMENT
$pdata$?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z DD imagerel $LN5
	DD	imagerel $LN5+183
	DD	imagerel $unwind$?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z
$pdata$?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z DD imagerel $LN7
	DD	imagerel $LN7+192
	DD	imagerel $unwind$?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z
$pdata$?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z DD imagerel $LN7
	DD	imagerel $LN7+144
	DD	imagerel $unwind$?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z
$pdata$?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z DD imagerel $LN9
	DD	imagerel $LN9+181
	DD	imagerel $unwind$?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z
$pdata$?wcsichr@@YAPEB_WPEB_WH@Z DD imagerel ?wcsichr@@YAPEB_WPEB_WH@Z
	DD	imagerel ?wcsichr@@YAPEB_WPEB_WH@Z+115
	DD	imagerel $unwind$?wcsichr@@YAPEB_WPEB_WH@Z
$pdata$?wcsistr@@YAPEB_WPEB_W0@Z DD imagerel ?wcsistr@@YAPEB_WPEB_W0@Z
	DD	imagerel ?wcsistr@@YAPEB_WPEB_W0@Z+177
	DD	imagerel $unwind$?wcsistr@@YAPEB_WPEB_W0@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z DD 021e01H
	DD	07006720aH
$unwind$?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z DD 021e01H
	DD	07006720aH
$unwind$?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z DD 021e01H
	DD	07006720aH
$unwind$?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z DD 022301H
	DD	0700b720fH
$unwind$?wcsichr@@YAPEB_WPEB_WH@Z DD 022201H
	DD	0700a320eH
$unwind$?wcsistr@@YAPEB_WPEB_W0@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
len$ = 32
str$ = 64
substr$ = 72
?wcsistr@@YAPEB_WPEB_W0@Z PROC				; wcsistr

; 42   : static inline const WCHAR *wcsistr(const WCHAR *str, const WCHAR *substr) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 43   :     size_t len = 0;

  00023	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR len$[rsp], 0

; 44   :     if (substr && (len = wcslen(substr)) != NULL)

  0002c	48 83 7c 24 48
	00		 cmp	 QWORD PTR substr$[rsp], 0
  00032	74 75		 je	 SHORT $LN5@wcsistr
  00034	48 8b 4c 24 48	 mov	 rcx, QWORD PTR substr$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0003f	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax
  00044	48 83 7c 24 20
	00		 cmp	 QWORD PTR len$[rsp], 0
  0004a	74 5d		 je	 SHORT $LN5@wcsistr

; 45   :         for (; (str = wcsichr(str, substr[0])) != NULL; str++)

  0004c	eb 0e		 jmp	 SHORT $LN4@wcsistr
$LN2@wcsistr:
  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR str$[rsp]
  00053	48 83 c0 02	 add	 rax, 2
  00057	48 89 44 24 40	 mov	 QWORD PTR str$[rsp], rax
$LN4@wcsistr:
  0005c	b8 02 00 00 00	 mov	 eax, 2
  00061	48 6b c0 00	 imul	 rax, rax, 0
  00065	48 8b 4c 24 48	 mov	 rcx, QWORD PTR substr$[rsp]
  0006a	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0006e	8b d0		 mov	 edx, eax
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  00075	e8 00 00 00 00	 call	 ?wcsichr@@YAPEB_WPEB_WH@Z ; wcsichr
  0007a	48 89 44 24 40	 mov	 QWORD PTR str$[rsp], rax
  0007f	48 83 7c 24 40
	00		 cmp	 QWORD PTR str$[rsp], 0
  00085	74 22		 je	 SHORT $LN3@wcsistr

; 46   :             if (_wcsnicmp(str, substr, len) == NULL)

  00087	4c 8b 44 24 20	 mov	 r8, QWORD PTR len$[rsp]
  0008c	48 8b 54 24 48	 mov	 rdx, QWORD PTR substr$[rsp]
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR str$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wcsnicmp
  0009c	85 c0		 test	 eax, eax
  0009e	75 07		 jne	 SHORT $LN6@wcsistr

; 47   :                 return str;

  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR str$[rsp]
  000a5	eb 04		 jmp	 SHORT $LN1@wcsistr
$LN6@wcsistr:
  000a7	eb a5		 jmp	 SHORT $LN2@wcsistr
$LN3@wcsistr:
$LN5@wcsistr:

; 48   :     return NULL;

  000a9	33 c0		 xor	 eax, eax
$LN1@wcsistr:

; 49   : }

  000ab	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
?wcsistr@@YAPEB_WPEB_W0@Z ENDP				; wcsistr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
str$ = 48
c$ = 56
?wcsichr@@YAPEB_WPEB_WH@Z PROC				; wcsichr

; 33   : static inline const WCHAR *wcsichr(const WCHAR *str, int c) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 34   :     c = tolower(c);

  00022	8b 4c 24 38	 mov	 ecx, DWORD PTR c$[rsp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0002c	89 44 24 38	 mov	 DWORD PTR c$[rsp], eax

; 35   :     for (; *str; str++)

  00030	eb 0e		 jmp	 SHORT $LN4@wcsichr
$LN2@wcsichr:
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00037	48 83 c0 02	 add	 rax, 2
  0003b	48 89 44 24 30	 mov	 QWORD PTR str$[rsp], rax
$LN4@wcsichr:
  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00045	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00048	85 c0		 test	 eax, eax
  0004a	74 1f		 je	 SHORT $LN3@wcsichr

; 36   :         if (c == tolower(*str))

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00051	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00054	8b c8		 mov	 ecx, eax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0005c	39 44 24 38	 cmp	 DWORD PTR c$[rsp], eax
  00060	75 07		 jne	 SHORT $LN5@wcsichr

; 37   :             return str;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR str$[rsp]
  00067	eb 04		 jmp	 SHORT $LN1@wcsichr
$LN5@wcsichr:
  00069	eb c7		 jmp	 SHORT $LN2@wcsichr
$LN3@wcsichr:

; 38   :     return NULL;

  0006b	33 c0		 xor	 eax, eax
$LN1@wcsichr:

; 39   : }

  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi
  00072	c3		 ret	 0
?wcsichr@@YAPEB_WPEB_WH@Z ENDP				; wcsichr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
i$1 = 48
data$ = 80
pbVideoEngineUsage$ = 88
?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z PROC	; video_engine_load

; 87   : double video_engine_load(GPUZ_SH_MEM *data, bool *pbVideoEngineUsage) {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 88   :     for (int i = 0; i < MAX_RECORDS; i++) {

  00023	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  0002b	eb 0a		 jmp	 SHORT $LN4@video_engi
$LN2@video_engi:
  0002d	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  00031	ff c0		 inc	 eax
  00033	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@video_engi:
  00037	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR i$1[rsp], 128	; 00000080H
  0003f	7d 5b		 jge	 SHORT $LN3@video_engi

; 89   :         if (wcsistr(data->sensors[i].name, L"Video Engine Load")) {

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00046	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  00052	48 8d 84 01 0c
	00 02 00	 lea	 rax, QWORD PTR [rcx+rax+131084]
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG91858
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ?wcsistr@@YAPEB_WPEB_W0@Z ; wcsistr
  00069	48 85 c0	 test	 rax, rax
  0006c	74 2c		 je	 SHORT $LN5@video_engi

; 90   :             if (pbVideoEngineUsage) *pbVideoEngineUsage = true;

  0006e	48 83 7c 24 58
	00		 cmp	 QWORD PTR pbVideoEngineUsage$[rsp], 0
  00074	74 08		 je	 SHORT $LN6@video_engi
  00076	48 8b 44 24 58	 mov	 rax, QWORD PTR pbVideoEngineUsage$[rsp]
  0007b	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN6@video_engi:

; 91   :             return data->sensors[i].value;

  0007e	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00083	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  0008a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  0008f	f2 0f 10 84 01
	20 02 02 00	 movsd	 xmm0, QWORD PTR [rcx+rax+131616]
  00098	eb 15		 jmp	 SHORT $LN1@video_engi
$LN5@video_engi:

; 92   :         }
; 93   :     }

  0009a	eb 91		 jmp	 SHORT $LN2@video_engi
$LN3@video_engi:

; 94   :     if (pbVideoEngineUsage) *pbVideoEngineUsage = false;

  0009c	48 83 7c 24 58
	00		 cmp	 QWORD PTR pbVideoEngineUsage$[rsp], 0
  000a2	74 08		 je	 SHORT $LN7@video_engi
  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR pbVideoEngineUsage$[rsp]
  000a9	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN7@video_engi:

; 95   :     return 0.0;

  000ac	0f 57 c0	 xorps	 xmm0, xmm0
$LN1@video_engi:

; 96   : }

  000af	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
?video_engine_load@@YANPEAUGPUZ_SH_MEM@@PEA_N@Z ENDP	; video_engine_load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
i$1 = 48
data$ = 80
?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z PROC			; gpu_load

; 78   : double gpu_load(GPUZ_SH_MEM *data) {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 79   :     for (int i = 0; i < MAX_RECORDS; i++) {

  0001e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00026	eb 0a		 jmp	 SHORT $LN4@gpu_load
$LN2@gpu_load:
  00028	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0002c	ff c0		 inc	 eax
  0002e	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@gpu_load:
  00032	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR i$1[rsp], 128	; 00000080H
  0003a	7d 4b		 jge	 SHORT $LN3@gpu_load

; 80   :         if (wcsistr(data->sensors[i].name, L"GPU Load")) {

  0003c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00041	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  0004d	48 8d 84 01 0c
	00 02 00	 lea	 rax, QWORD PTR [rcx+rax+131084]
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG91848
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?wcsistr@@YAPEB_WPEB_W0@Z ; wcsistr
  00064	48 85 c0	 test	 rax, rax
  00067	74 1c		 je	 SHORT $LN5@gpu_load

; 81   :             return data->sensors[i].value;

  00069	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  0006e	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  00075	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  0007a	f2 0f 10 84 01
	20 02 02 00	 movsd	 xmm0, QWORD PTR [rcx+rax+131616]
  00083	eb 05		 jmp	 SHORT $LN1@gpu_load
$LN5@gpu_load:

; 82   :         }
; 83   :     }

  00085	eb a1		 jmp	 SHORT $LN2@gpu_load
$LN3@gpu_load:

; 84   :     return 0.0;

  00087	0f 57 c0	 xorps	 xmm0, xmm0
$LN1@gpu_load:

; 85   : }

  0008a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
?gpu_load@@YANPEAUGPUZ_SH_MEM@@@Z ENDP			; gpu_load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
i$1 = 48
data$ = 80
?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z PROC		; gpu_core_clock

; 68   : double gpu_core_clock(GPUZ_SH_MEM *data) {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 69   :     for (int i = 0; i < MAX_RECORDS; i++) {

  0001e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00026	eb 0a		 jmp	 SHORT $LN4@gpu_core_c
$LN2@gpu_core_c:
  00028	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  0002c	ff c0		 inc	 eax
  0002e	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@gpu_core_c:
  00032	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR i$1[rsp], 128	; 00000080H
  0003a	7d 7b		 jge	 SHORT $LN3@gpu_core_c

; 70   :         if (   wcsistr(data->sensors[i].name, L"Core")
; 71   :             && wcsistr(data->sensors[i].name, L"Clock")) {

  0003c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  00041	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  0004d	48 8d 84 01 0c
	00 02 00	 lea	 rax, QWORD PTR [rcx+rax+131084]
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG91838
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?wcsistr@@YAPEB_WPEB_W0@Z ; wcsistr
  00064	48 85 c0	 test	 rax, rax
  00067	74 49		 je	 SHORT $LN5@gpu_core_c
  00069	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  0006e	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  00075	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  0007a	48 8d 84 01 0c
	00 02 00	 lea	 rax, QWORD PTR [rcx+rax+131084]
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG91839
  00089	48 8b c8	 mov	 rcx, rax
  0008c	e8 00 00 00 00	 call	 ?wcsistr@@YAPEB_WPEB_W0@Z ; wcsistr
  00091	48 85 c0	 test	 rax, rax
  00094	74 1c		 je	 SHORT $LN5@gpu_core_c

; 72   :             return data->sensors[i].value;

  00096	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$1[rsp]
  0009b	48 69 c0 1c 02
	00 00		 imul	 rax, rax, 540		; 0000021cH
  000a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  000a7	f2 0f 10 84 01
	20 02 02 00	 movsd	 xmm0, QWORD PTR [rcx+rax+131616]
  000b0	eb 08		 jmp	 SHORT $LN1@gpu_core_c
$LN5@gpu_core_c:

; 73   :         }
; 74   :     }

  000b2	e9 71 ff ff ff	 jmp	 $LN2@gpu_core_c
$LN3@gpu_core_c:

; 75   :     return 0.0;

  000b7	0f 57 c0	 xorps	 xmm0, xmm0
$LN1@gpu_core_c:

; 76   : }

  000ba	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
?gpu_core_clock@@YANPEAUGPUZ_SH_MEM@@@Z ENDP		; gpu_core_clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
memmap$ = 48
ptr$ = 56
data$ = 80
?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z PROC		; get_gpuz_info

; 51   : int get_gpuz_info(GPUZ_SH_MEM *data) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 52   :     HANDLE memmap = OpenFileMapping(FILE_MAP_READ, FALSE, SHMEM_NAME);

  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG91827
  00025	33 d2		 xor	 edx, edx
  00027	b9 04 00 00 00	 mov	 ecx, 4
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OpenFileMappingA
  00032	48 89 44 24 30	 mov	 QWORD PTR memmap$[rsp], rax

; 53   :     if (NULL == memmap) {

  00037	48 83 7c 24 30
	00		 cmp	 QWORD PTR memmap$[rsp], 0
  0003d	75 07		 jne	 SHORT $LN2@get_gpuz_i

; 54   :         return 1;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	eb 6b		 jmp	 SHORT $LN1@get_gpuz_i
$LN2@get_gpuz_i:

; 55   :     }
; 56   : 
; 57   :     GPUZ_SH_MEM *ptr = (GPUZ_SH_MEM *)MapViewOfFile(memmap, FILE_MAP_READ, 0, 0, 0);

  00046	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	45 33 c0	 xor	 r8d, r8d
  00055	ba 04 00 00 00	 mov	 edx, 4
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR memmap$[rsp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MapViewOfFile
  00065	48 89 44 24 38	 mov	 QWORD PTR ptr$[rsp], rax

; 58   :     if (ptr == nullptr) {

  0006a	48 83 7c 24 38
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  00070	75 12		 jne	 SHORT $LN3@get_gpuz_i

; 59   :         CloseHandle(memmap);

  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR memmap$[rsp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 60   :         return 1;

  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	eb 2d		 jmp	 SHORT $LN1@get_gpuz_i
$LN3@get_gpuz_i:

; 61   :     }
; 62   :     memcpy(data, ptr, sizeof(data[0]));

  00084	41 b8 0c 0e 03
	00		 mov	 r8d, 200204		; 00030e0cH
  0008a	48 8b 54 24 38	 mov	 rdx, QWORD PTR ptr$[rsp]
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$[rsp]
  00094	e8 00 00 00 00	 call	 memcpy

; 63   :     UnmapViewOfFile(ptr);

  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ptr$[rsp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UnmapViewOfFile

; 64   :     CloseHandle(memmap);

  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR memmap$[rsp]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 65   :     return 0;

  000af	33 c0		 xor	 eax, eax
$LN1@get_gpuz_i:

; 66   : }

  000b1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
?get_gpuz_info@@YAHPEAUGPUZ_SH_MEM@@@Z ENDP		; get_gpuz_info
_TEXT	ENDS
END
