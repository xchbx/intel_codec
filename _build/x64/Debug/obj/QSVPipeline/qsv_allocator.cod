; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG125785 DB	'h264', 00H
	ORG $+3
$SG125786 DB	'hevc', 00H
	ORG $+3
$SG125787 DB	'mpeg2', 00H
	ORG $+2
$SG125788 DB	'vc-1', 00H
	ORG $+3
$SG125789 DB	'vp8', 00H
$SG125790 DB	'raw', 00H
$SG125792 DB	'CBR', 00H
$SG125793 DB	'VBR', 00H
$SG125794 DB	'CQP', 00H
$SG125795 DB	'AVBR', 00H
	ORG $+3
$SG125796 DB	'LA', 00H
	ORG $+1
$SG125797 DB	'LA-EXT', 00H
	ORG $+1
$SG125798 DB	'LA-HRD', 00H
	ORG $+1
$SG125799 DB	'LA-ICQ', 00H
	ORG $+1
$SG125800 DB	'ICQ', 00H
$SG125801 DB	'QVBR', 00H
	ORG $+3
$SG125802 DB	'VCM', 00H
$SG125804 DB	'auto', 00H
	ORG $+3
?list_avc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125804	; list_avc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125805
	DD	042H
	ORG $+4
	DQ	FLAT:$SG125806
	DD	04dH
	ORG $+4
	DQ	FLAT:$SG125807
	DD	064H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125805 DB	'Baseline', 00H
	ORG $+3
$SG125806 DB	'Main', 00H
	ORG $+3
$SG125807 DB	'High', 00H
	ORG $+7
?list_hevc_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125809	; list_hevc_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125810
	DD	01H
	ORG $+4
	DQ	FLAT:$SG125811
	DD	02H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125809 DB	'auto', 00H
	ORG $+3
$SG125810 DB	'main', 00H
	ORG $+3
$SG125811 DB	'main10', 00H
	ORG $+1
$SG125813 DB	'main', 00H
	ORG $+3
$SG125814 DB	'high', 00H
	ORG $+3
$SG125816 DB	'auto', 00H
	ORG $+3
?list_mpeg2_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125816	; list_mpeg2_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125817
	DD	050H
	ORG $+4
	DQ	FLAT:$SG125818
	DD	040H
	ORG $+4
	DQ	FLAT:$SG125819
	DD	010H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125817 DB	'Simple', 00H
	ORG $+1
$SG125818 DB	'Main', 00H
	ORG $+3
$SG125819 DB	'High', 00H
	ORG $+3
$SG125821 DB	'auto', 00H
	ORG $+3
?list_vc1_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125821	; list_vc1_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125822
	DD	01H
	ORG $+4
	DQ	FLAT:$SG125823
	DD	05H
	ORG $+4
	DQ	FLAT:$SG125824
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125822 DB	'Simple', 00H
	ORG $+1
$SG125823 DB	'Main', 00H
	ORG $+3
$SG125824 DB	'Advanced', 00H
	ORG $+7
?list_vp8_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125826	; list_vp8_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125827
	DD	01H
	ORG $+4
	DQ	FLAT:$SG125828
	DD	02H
	ORG $+4
	DQ	FLAT:$SG125829
	DD	03H
	ORG $+4
	DQ	FLAT:$SG125830
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125826 DB	'auto', 00H
	ORG $+3
$SG125827 DB	'0', 00H
	ORG $+2
$SG125828 DB	'1', 00H
	ORG $+2
$SG125829 DB	'2', 00H
	ORG $+2
$SG125830 DB	'3', 00H
	ORG $+2
$SG125832 DB	'auto', 00H
	ORG $+3
?list_vp9_profile@@3QBUCX_DESC@@B DQ FLAT:$SG125832	; list_vp9_profile
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125833
	DD	01H
	ORG $+4
	DQ	FLAT:$SG125834
	DD	02H
	ORG $+4
	DQ	FLAT:$SG125835
	DD	03H
	ORG $+4
	DQ	FLAT:$SG125836
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125833 DB	'0', 00H
	ORG $+2
$SG125834 DB	'1', 00H
	ORG $+2
$SG125835 DB	'2', 00H
	ORG $+2
$SG125836 DB	'3', 00H
	ORG $+2
$SG125838 DB	'8', 00H
	ORG $+2
$SG125839 DB	'10', 00H
	ORG $+1
$SG125841 DB	'progressive', 00H
$SG125847 DB	'it', 00H
	ORG $+1
$SG125842 DB	'interlaced(tff)', 00H
$SG125843 DB	'interlaced(bff)', 00H
$SG125845 DB	'none', 00H
	ORG $+3
$SG125846 DB	'normal', 00H
	ORG $+1
$SG125848 DB	'bob', 00H
$SG125850 DB	'32', 00H
	ORG $+1
$SG125851 DB	'2332', 00H
	ORG $+3
$SG125852 DB	'repeat', 00H
	ORG $+1
$SG125853 DB	'41', 00H
	ORG $+1
$SG125855 DB	'auto', 00H
	ORG $+7
?list_avc_level@@3QBUCX_DESC@@B DQ FLAT:$SG125855	; list_avc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125856
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG125857
	DD	09H
	ORG $+4
	DQ	FLAT:$SG125858
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG125859
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG125860
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG125861
	DD	014H
	ORG $+4
	DQ	FLAT:$SG125862
	DD	015H
	ORG $+4
	DQ	FLAT:$SG125863
	DD	016H
	ORG $+4
	DQ	FLAT:$SG125864
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG125865
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG125866
	DD	020H
	ORG $+4
	DQ	FLAT:$SG125867
	DD	028H
	ORG $+4
	DQ	FLAT:$SG125868
	DD	029H
	ORG $+4
	DQ	FLAT:$SG125869
	DD	02aH
	ORG $+4
	DQ	FLAT:$SG125870
	DD	032H
	ORG $+4
	DQ	FLAT:$SG125871
	DD	033H
	ORG $+4
	DQ	FLAT:$SG125872
	DD	034H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125856 DB	'1', 00H
	ORG $+2
$SG125857 DB	'1b', 00H
	ORG $+1
$SG125858 DB	'1.1', 00H
$SG125859 DB	'1.2', 00H
$SG125860 DB	'1.3', 00H
$SG125861 DB	'2', 00H
	ORG $+2
$SG125862 DB	'2.1', 00H
$SG125863 DB	'2.2', 00H
$SG125864 DB	'3', 00H
	ORG $+2
$SG125865 DB	'3.1', 00H
$SG125866 DB	'3.2', 00H
$SG125867 DB	'4', 00H
	ORG $+2
$SG125868 DB	'4.1', 00H
$SG125869 DB	'4.2', 00H
$SG125870 DB	'5', 00H
	ORG $+2
$SG125871 DB	'5.1', 00H
$SG125872 DB	'5.2', 00H
$SG125874 DB	'auto', 00H
	ORG $+7
?list_hevc_level@@3QBUCX_DESC@@B DQ FLAT:$SG125874	; list_hevc_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125875
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG125876
	DD	014H
	ORG $+4
	DQ	FLAT:$SG125877
	DD	015H
	ORG $+4
	DQ	FLAT:$SG125878
	DD	01eH
	ORG $+4
	DQ	FLAT:$SG125879
	DD	01fH
	ORG $+4
	DQ	FLAT:$SG125880
	DD	028H
	ORG $+4
	DQ	FLAT:$SG125881
	DD	029H
	ORG $+4
	DQ	FLAT:$SG125882
	DD	032H
	ORG $+4
	DQ	FLAT:$SG125883
	DD	033H
	ORG $+4
	DQ	FLAT:$SG125884
	DD	034H
	ORG $+4
	DQ	FLAT:$SG125885
	DD	03cH
	ORG $+4
	DQ	FLAT:$SG125886
	DD	03dH
	ORG $+4
	DQ	FLAT:$SG125887
	DD	03eH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125875 DB	'1', 00H
	ORG $+2
$SG125876 DB	'2', 00H
	ORG $+2
$SG125877 DB	'2.1', 00H
$SG125878 DB	'3', 00H
	ORG $+2
$SG125879 DB	'3.1', 00H
$SG125880 DB	'4', 00H
	ORG $+2
$SG125881 DB	'4.1', 00H
$SG125882 DB	'5', 00H
	ORG $+2
$SG125883 DB	'5.1', 00H
$SG125884 DB	'5.2', 00H
$SG125885 DB	'6', 00H
	ORG $+2
$SG125886 DB	'6.1', 00H
$SG125887 DB	'6.2', 00H
$SG125889 DB	'auto', 00H
	ORG $+7
?list_mpeg2_level@@3QBUCX_DESC@@B DQ FLAT:$SG125889	; list_mpeg2_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125890
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG125891
	DD	08H
	ORG $+4
	DQ	FLAT:$SG125892
	DD	04H
	ORG $+4
	DQ	FLAT:$SG125893
	DD	06H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125890 DB	'low', 00H
$SG125891 DB	'main', 00H
	ORG $+3
$SG125892 DB	'high', 00H
	ORG $+3
$SG125896 DB	'low', 00H
$SG125893 DB	'high1440', 00H
	ORG $+3
$SG125895 DB	'auto', 00H
	ORG $+7
?list_vc1_level@@3QBUCX_DESC@@B DQ FLAT:$SG125895	; list_vc1_level
	DD	00H
	ORG $+4
	DQ	FLAT:$SG125896
	DD	01H
	ORG $+4
	DQ	FLAT:$SG125897
	DD	03H
	ORG $+4
	DQ	FLAT:$SG125898
	DD	05H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125897 DB	'median', 00H
	ORG $+1
$SG125898 DB	'high', 00H
	ORG $+3
$SG125900 DB	'auto', 00H
	ORG $+3
$SG125901 DB	'0', 00H
	ORG $+2
$SG125902 DB	'1', 00H
	ORG $+2
$SG125903 DB	'2', 00H
	ORG $+2
$SG125904 DB	'3', 00H
	ORG $+2
$SG125905 DB	'4', 00H
	ORG $+2
$SG125912 DB	'off', 00H
?list_vp8_level@@3QBUCX_DESC@@B DQ FLAT:$SG125907	; list_vp8_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125907 DB	'auto', 00H
	ORG $+3
?list_vp9_level@@3QBUCX_DESC@@B DQ FLAT:$SG125909	; list_vp9_level
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG125909 DB	'auto', 00H
	ORG $+3
$SG125911 DB	'Auto', 00H
	ORG $+3
$SG125913 DB	'for I frames', 00H
	ORG $+3
$SG125914 DB	'for I,P frames', 00H
	ORG $+1
$SG125915 DB	'for All frames', 00H
	ORG $+1
$SG125917 DB	'auto', 00H
	ORG $+3
$SG125918 DB	'off', 00H
$SG125919 DB	'i', 00H
	ORG $+2
$SG125920 DB	'ip', 00H
	ORG $+1
$SG125921 DB	'all', 00H
$SG125922 DB	'ipb', 00H
$SG125923 DB	'ib', 00H
	ORG $+1
$SG125924 DB	'p', 00H
	ORG $+2
$SG125925 DB	'pb', 00H
	ORG $+1
$SG125926 DB	'b', 00H
	ORG $+2
$SG125928 DB	'auto', 00H
	ORG $+3
$SG125929 DB	'slow', 00H
	ORG $+3
$SG125930 DB	'medium', 00H
	ORG $+1
$SG125931 DB	'fast', 00H
	ORG $+3
$SG125934 DB	'0', 00H
	ORG $+2
$SG125933 DB	'default', 00H
$SG125935 DB	'1', 00H
	ORG $+2
$SG125936 DB	'2', 00H
	ORG $+2
$SG125937 DB	'3', 00H
	ORG $+2
$SG125938 DB	'4', 00H
	ORG $+2
$SG125940 DB	'low', 00H
$SG125941 DB	'normal', 00H
	ORG $+1
$SG125942 DB	'high', 00H
	ORG $+3
$SG125954 DB	'none', 00H
	ORG $+3
$SG125955 DB	'copy', 00H
	ORG $+3
$SG125956 DB	'aac', 00H
$SG125957 DB	'libmp3lame', 00H
	ORG $+1
$SG125962 DB	'ac3', 00H
$SG125958 DB	'libtwolame', 00H
	ORG $+1
$SG125993 DB	'tff', 00H
$SG125959 DB	'libvorbis', 00H
	ORG $+2
$SG125994 DB	'bff', 00H
$SG125960 DB	'pcm_s16le', 00H
	ORG $+2
$SG126005 DB	'higher', 00H
	ORG $+1
$SG126019 DB	'8x8', 00H
$SG125961 DB	'libopus', 00H
$SG125992 DB	'none', 00H
	ORG $+3
$SG125996 DB	' 1 - best quality', 00H
	ORG $+2
$SG126009 DB	'faster', 00H
	ORG $+1
$SG126020 DB	'4x4', 00H
$SG125997 DB	' 2 - higher', 00H
$SG126023 DB	'16', 00H
	ORG $+1
$SG125998 DB	' 3 - high quality', 00H
	ORG $+2
$SG126024 DB	'32', 00H
	ORG $+1
$SG125999 DB	' 4 - balanced', 00H
	ORG $+2
$SG126000 DB	' 5 - fast', 00H
	ORG $+2
$SG126025 DB	'64', 00H
	ORG $+1
$SG126001 DB	' 6 - faster', 00H
$SG126033 DB	'all', 00H
$SG126002 DB	' 7 - fastest', 00H
	ORG $+3
$SG126004 DB	'best', 00H
	ORG $+3
$SG126006 DB	'high', 00H
	ORG $+3
$SG126007 DB	'balanced', 00H
	ORG $+3
$SG126008 DB	'fast', 00H
	ORG $+3
$SG126015 DB	'Q-pel', 00H
	ORG $+2
$SG126032 DB	'chroma', 00H
	ORG $+1
$SG126037 DB	'box', 00H
$SG126010 DB	'fastest', 00H
$SG126012 DB	'Auto', 00H
	ORG $+3
$SG126013 DB	'full-pel', 00H
	ORG $+3
$SG126018 DB	'16x16', 00H
	ORG $+2
$SG126039 DB	'off', 00H
$SG126014 DB	'half-pel', 00H
	ORG $+3
$SG126017 DB	'Auto', 00H
	ORG $+3
$SG126022 DB	'auto', 00H
	ORG $+3
$SG126029 DB	'auto', 00H
	ORG $+3
$SG126030 DB	'none', 00H
	ORG $+3
$SG126031 DB	'luma', 00H
	ORG $+3
$SG126035 DB	'none', 00H
	ORG $+3
$SG126040 DB	'x2', 00H
	ORG $+1
$SG126036 DB	'upscale', 00H
$SG126041 DB	'x2.5', 00H
	ORG $+3
$SG126043 DB	'simple', 00H
	ORG $+1
$SG126044 DB	'complex', 00H
$SG126046 DB	'0', 00H
	ORG $+2
$SG126047 DB	'90', 00H
	ORG $+1
$SG126048 DB	'180', 00H
$SG126049 DB	'270', 00H
$SG126051 DB	'n', 00H
	ORG $+2
$SG126052 DB	'h', 00H
	ORG $+2
$SG126053 DB	'v', 00H
	ORG $+2
$SG126055 DB	'auto', 00H
	ORG $+3
$SG126056 DB	'simple', 00H
	ORG $+1
$SG126057 DB	'fine', 00H
	ORG $+3
$SG126059 DB	'auto', 00H
	ORG $+3
$SG126060 DB	'none', 00H
	ORG $+3
$SG126061 DB	'sse2', 00H
	ORG $+3
$SG126062 DB	'sse3', 00H
	ORG $+3
$SG126063 DB	'ssse3', 00H
	ORG $+2
$SG126064 DB	'sse41', 00H
	ORG $+2
$SG126065 DB	'avx', 00H
$SG126066 DB	'avx2', 00H
	ORG $+3
$SG126458 DB	'%s', 00H
	ORG $+1
$SG110664 DB	'rgb', 00H
$SG126780 DB	'QSVAllocator: FrameAlloc: %s, %d frames.', 0aH, 00H
	ORG $+2
$SG110636 DB	'yuv422', 00H
	ORG $+1
$SG110666 DB	'gbr', 00H
$SG126782 DB	'QSVAllocator: Failed CheckRequestType: %s', 0aH, 00H
	ORG $+1
$SG110669 DB	'y8', 00H
	ORG $+1
$SG126785 DB	'QSVAllocator: Allocate type external.', 0aH, 00H
	ORG $+1
$SG126790 DB	'QSVAllocator: NumFrameSuggested > it->NumFrameActual', 0aH
	DB	00H
	ORG $+2
$SG126794 DB	'QSVAllocator: Failed Allocate type external: %s', 0aH, 00H
	ORG $+3
$SG110638 DB	'yuv444', 00H
	ORG $+1
$SG111614 DB	'VP8', 00H
$SG126796 DB	'QSVAllocator: Allocate type internal.', 0aH, 00H
	ORG $+1
$SG126799 DB	'QSVAllocator: Failed Allocate type internal: %s', 0aH, 00H
	ORG $+3
$SG110658 DB	'rgb24r', 00H
	ORG $+1
$SG111616 DB	'VP9', 00H
$SG126800 DB	'QSVAllocator: FrameAlloc success.', 0aH, 00H
	ORG $+1
$SG112227 DB	'fcc', 00H
$SG110632 DB	'Invalid', 00H
$SG110633 DB	'nv12', 00H
	ORG $+3
$SG110634 DB	'yv12', 00H
	ORG $+3
$SG110635 DB	'yuy2', 00H
	ORG $+3
$SG110637 DB	'nv16', 00H
	ORG $+3
$SG110639 DB	'yv12(9bit)', 00H
	ORG $+1
$SG112228 DB	'GBR', 00H
$SG110640 DB	'yv12(10bit)', 00H
$SG112541 DB	'pal', 00H
$SG110641 DB	'yv12(12bit)', 00H
$SG112543 DB	'mac', 00H
$SG110642 DB	'yv12(14bit)', 00H
$SG112545 DB	'0', 00H
	ORG $+2
$SG110643 DB	'yv12(16bit)', 00H
$SG110644 DB	'p010', 00H
	ORG $+3
$SG110659 DB	'rgb32r', 00H
	ORG $+1
$SG112546 DB	'1', 00H
	ORG $+2
$SG110645 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG110646 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG110647 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG110648 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG110649 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG110650 DB	'p210', 00H
	ORG $+3
$SG110651 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG110652 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG110653 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG110654 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG127039 DB	'QSVAllocator: FrameFree...', 0aH, 00H
$SG112547 DB	'2', 00H
	ORG $+2
$SG110655 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG110656 DB	'yuva444', 00H
$SG110657 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG127044 DB	'QSVAllocator: FrameFree external success.', 0aH, 00H
	ORG $+1
$SG110660 DB	'rgb24', 00H
	ORG $+2
$SG110661 DB	'rgb32', 00H
	ORG $+2
$SG110662 DB	'bgr24', 00H
	ORG $+2
$SG110663 DB	'bgr32', 00H
	ORG $+2
$SG112379 DB	'bt470m', 00H
	ORG $+1
$SG112548 DB	'3', 00H
	ORG $+2
$SG127048 DB	'QSVAllocator: FrameFree internal success.', 0aH, 00H
	ORG $+1
$SG110665 DB	'rgba', 00H
	ORG $+3
$SG110667 DB	'gbra', 00H
	ORG $+3
$SG110668 DB	'yc48', 00H
	ORG $+3
$SG110670 DB	'yc16', 00H
	ORG $+3
$SG111606 DB	'MPEG2', 00H
	ORG $+2
$SG112382 DB	'linear', 00H
	ORG $+1
$SG112549 DB	'4', 00H
	ORG $+2
$SG127087 DB	'QSVAllocator: Closed.', 0aH, 00H
	ORG $+1
$SG111602 DB	'H.264/AVC', 00H
	ORG $+2
$SG112383 DB	'log100', 00H
	ORG $+1
$SG112550 DB	'5', 00H
	ORG $+2
$SG111604 DB	'H.265/HEVC', 00H
	ORG $+1
$SG111608 DB	'MPEG1', 00H
	ORG $+2
$SG111610 DB	'VC-1', 00H
	ORG $+3
$SG111612 DB	'MPEG4', 00H
	ORG $+2
$SG112384 DB	'log316', 00H
	ORG $+1
$SG112554 DB	'tv', 00H
	ORG $+1
$SG111618 DB	'unknown', 00H
$SG111725 DB	'unknown', 00H
$SG112220 DB	'undef', 00H
	ORG $+2
?list_colormatrix@@3QBUCX_DESC@@B DQ FLAT:$SG112220	; list_colormatrix
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112221
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112222
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112223
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112224
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112225
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112226
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112227
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112228
	DD	00H
	ORG $+4
	DQ	FLAT:$SG112229
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112230
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112231
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112232
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG112233
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG112234
	DD	0fH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112221 DB	'auto', 00H
	ORG $+3
$SG112222 DB	'bt709', 00H
	ORG $+2
$SG112223 DB	'smpte170m', 00H
	ORG $+2
$SG112528 DB	'bt470m', 00H
	ORG $+1
$SG112555 DB	'pc', 00H
	ORG $+1
$SG112224 DB	'bt470bg', 00H
$SG112225 DB	'smpte240m', 00H
	ORG $+2
$SG112226 DB	'YCgCo', 00H
	ORG $+2
$SG112532 DB	'bt2020', 00H
	ORG $+1
$SG137323 DB	'%s', 00H
	ORG $+1
$SG112229 DB	'bt2020nc', 00H
	ORG $+3
$SG112233 DB	'ictco', 00H
	ORG $+2
$SG121504 DB	'.', 0aH, 00H
	ORG $+1
$SG112230 DB	'bt2020c', 00H
$SG112231 DB	'derived-ncl', 00H
$SG121584 DB	'srt', 00H
$SG112232 DB	'derived-cl', 00H
	ORG $+1
$SG121585 DB	'ass', 00H
$SG112234 DB	'2100-lms', 00H
	ORG $+7
?list_transfer@@3QBUCX_DESC@@B DQ FLAT:$SG112375	; list_transfer
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112376
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112377
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112378
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112379
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112380
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112381
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112382
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112383
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112384
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112385
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG112386
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112387
	DD	0dH
	ORG $+4
	DQ	FLAT:$SG112388
	DD	0eH
	ORG $+4
	DQ	FLAT:$SG112389
	DD	0fH
	ORG $+4
	DQ	FLAT:$SG112390
	DD	010H
	ORG $+4
	DQ	FLAT:$SG112391
	DD	011H
	ORG $+4
	DQ	FLAT:$SG112392
	DD	012H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112375 DB	'undef', 00H
	ORG $+2
$SG112376 DB	'auto', 00H
	ORG $+3
$SG112377 DB	'bt709', 00H
	ORG $+2
$SG112378 DB	'smpte170m', 00H
	ORG $+2
$SG121594 DB	'box', 00H
$SG112380 DB	'bt470bg', 00H
$SG112381 DB	'smpte240m', 00H
	ORG $+2
$SG113644 DB	'cfr', 00H
$SG112385 DB	'iec61966-2-4', 00H
	ORG $+3
$SG112386 DB	'bt1361e', 00H
$SG112387 DB	'iec61966-2-1', 00H
	ORG $+3
$SG112388 DB	'bt2020-10', 00H
	ORG $+2
$SG113645 DB	'vfr', 00H
$SG112389 DB	'bt2020-12', 00H
	ORG $+2
$SG113648 DB	'swr', 00H
$SG112390 DB	'smpte2084', 00H
	ORG $+6
$SG112391 DB	'smpte428', 00H
	ORG $+7
$SG112392 DB	'arib-srd-b67', 00H
	ORG $+3
$SG112524 DB	'undef', 00H
	ORG $+2
?list_colorprim@@3QBUCX_DESC@@B DQ FLAT:$SG112524	; list_colorprim
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112525
	DD	07fffffffH
	ORG $+4
	DQ	FLAT:$SG112526
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112527
	DD	06H
	ORG $+4
	DQ	FLAT:$SG112528
	DD	04H
	ORG $+4
	DQ	FLAT:$SG112529
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112530
	DD	07H
	ORG $+4
	DQ	FLAT:$SG112531
	DD	08H
	ORG $+4
	DQ	FLAT:$SG112532
	DD	09H
	ORG $+4
	DQ	FLAT:$SG112533
	DD	0aH
	ORG $+4
	DQ	FLAT:$SG112534
	DD	0bH
	ORG $+4
	DQ	FLAT:$SG112535
	DD	0cH
	ORG $+4
	DQ	FLAT:$SG112536
	DD	0dH
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112525 DB	'auto', 00H
	ORG $+3
$SG112526 DB	'bt709', 00H
	ORG $+2
$SG112527 DB	'smpte170m', 00H
	ORG $+6
$SG112529 DB	'bt470bg', 00H
$SG112530 DB	'smpte240m', 00H
	ORG $+2
$SG112531 DB	'film', 00H
	ORG $+3
$SG112533 DB	'st428', 00H
	ORG $+6
$SG112534 DB	'st431-2', 00H
$SG112535 DB	'st432-1', 00H
$SG112536 DB	'ebu3213-e', 00H
	ORG $+2
$SG112538 DB	'undef', 00H
	ORG $+6
?list_videoformat@@3QBUCX_DESC@@B DQ FLAT:$SG112538	; list_videoformat
	DD	05H
	ORG $+4
	DQ	FLAT:$SG112539
	DD	02H
	ORG $+4
	DQ	FLAT:$SG112540
	DD	00H
	ORG $+4
	DQ	FLAT:$SG112541
	DD	01H
	ORG $+4
	DQ	FLAT:$SG112542
	DD	03H
	ORG $+4
	DQ	FLAT:$SG112543
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG112539 DB	'ntsc', 00H
	ORG $+3
$SG112540 DB	'component', 00H
	ORG $+2
$SG112542 DB	'secam', 00H
	ORG $+6
$SG112552 DB	'limited', 00H
$SG112553 DB	'full', 00H
	ORG $+3
$SG137322 DB	'invalid argument', 00H
	ORG $+7
$SG137327 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG137324 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG121377 DB	'auto', 00H
	ORG $+3
$SG137325 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG137326 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG137418 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
?HW_DECODE_LIST@@3QBUCodecMap@@B DD 01bH		; HW_DECODE_LIST
	DD	01H
	DD	0adH
	DD	02H
	DD	02H
	DD	04H
	DD	08bH
	DD	06H
	DD	0a7H
	DD	07H
	DD	046H
	DD	08H
$SG121379 DB	'copy', 00H
	ORG $+3
$SG121505 DB	' for ', 00H
	ORG $+2
$SG121508 DB	'avcodec-58.dll', 00H
	ORG $+1
$SG121509 DB	'avformat-58.dll', 00H
$SG121510 DB	'avutil-56.dll', 00H
	ORG $+2
$SG121511 DB	'avfilter-7.dll', 00H
	ORG $+1
$SG121512 DB	'swresample-3.dll', 00H
	ORG $+7
$SG121583 DB	'invalid', 00H
$SG121592 DB	'invalid', 00H
$SG121593 DB	'kigou', 00H
	ORG $+2
$SG121595 DB	'draw', 00H
	ORG $+3
?list_empty@@3QBUCX_DESC@@B DQ 0000000000000000H	; list_empty
	DD	00H
	ORG $+4
$SG113637 DB	'trace', 00H
	ORG $+2
$SG113638 DB	'debug', 00H
	ORG $+2
$SG113639 DB	'more', 00H
	ORG $+3
$SG113640 DB	'info', 00H
	ORG $+3
$SG113641 DB	'warn', 00H
	ORG $+3
$SG113642 DB	'error', 00H
	ORG $+2
$SG113646 DB	'forcecfr', 00H
	ORG $+3
$SG113649 DB	'soxr', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z	; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QEAA@AEBU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QEAA@XZ		; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QEAAXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?_Decref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decref
PUBLIC	?_Decwref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decwref
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	??0QSVBufferAllocator@@QEAA@XZ			; QSVBufferAllocator::QSVBufferAllocator
PUBLIC	??1QSVBufferAllocator@@UEAA@XZ			; QSVBufferAllocator::~QSVBufferAllocator
PUBLIC	?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z ; QSVBufferAllocator::Alloc_
PUBLIC	?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z ; QSVBufferAllocator::Lock_
PUBLIC	?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ; QSVBufferAllocator::Unlock_
PUBLIC	?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ; QSVBufferAllocator::Free_
PUBLIC	??_GQSVBufferAllocator@@UEAAPEAXI@Z		; QSVBufferAllocator::`scalar deleting destructor'
PUBLIC	??0QSVAllocator@@QEAA@XZ			; QSVAllocator::QSVAllocator
PUBLIC	??1QSVAllocator@@UEAA@XZ			; QSVAllocator::~QSVAllocator
PUBLIC	?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ	; QSVAllocator::Close
PUBLIC	?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::FrameAlloc
PUBLIC	?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::FrameFree
PUBLIC	?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::Alloc_
PUBLIC	?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ; QSVAllocator::Lock_
PUBLIC	?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ; QSVAllocator::Unlock_
PUBLIC	?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z ; QSVAllocator::GetHDL_
PUBLIC	?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::Free_
PUBLIC	?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z ; QSVAllocator::CheckRequestType
PUBLIC	??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z ; QSVAllocator::UniqueResponse::UniqueResponse
PUBLIC	??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z	; QSVAllocator::UniqueResponse::operator()
PUBLIC	??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocator<std::_List_node<mfxFrameAllocResponse,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::max_size
PUBLIC	??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
PUBLIC	?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::push_back
PUBLIC	??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
PUBLIC	?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin
PUBLIC	?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
PUBLIC	?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter
PUBLIC	?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::max_size
PUBLIC	?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back
PUBLIC	?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::pop_back
PUBLIC	?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase
PUBLIC	?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Unchecked_erase
PUBLIC	?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Tidy
PUBLIC	?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
PUBLIC	?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
PUBLIC	??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >
PUBLIC	?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2
PUBLIC	?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Unlinknode
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first
PUBLIC	??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::max_size
PUBLIC	??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
PUBLIC	?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::push_back
PUBLIC	??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
PUBLIC	?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin
PUBLIC	?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
PUBLIC	?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter
PUBLIC	?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::max_size
PUBLIC	?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase
PUBLIC	?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::clear
PUBLIC	?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Tidy
PUBLIC	?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
PUBLIC	?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
PUBLIC	??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >
PUBLIC	?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2
PUBLIC	?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end
PUBLIC	?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Unlinknode
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first
PUBLIC	?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get
PUBLIC	??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
PUBLIC	?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ	; std::_Ptr_base<RGYLog>::_Decref
PUBLIC	?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<RGYLog>::_Swap
PUBLIC	??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
PUBLIC	??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
PUBLIC	?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<RGYLog>::swap
PUBLIC	?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ	; std::shared_ptr<RGYLog>::reset
PUBLIC	??_GQSVAllocator@@UEAAPEAXI@Z			; QSVAllocator::`scalar deleting destructor'
PUBLIC	??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
PUBLIC	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=
PUBLIC	?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z ; std::_Verify_range
PUBLIC	?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Seek_to
PUBLIC	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
PUBLIC	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
PUBLIC	?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Unwrapped
PUBLIC	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
PUBLIC	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
PUBLIC	??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator!=
PUBLIC	?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z ; std::_Verify_range
PUBLIC	?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Seek_to
PUBLIC	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
PUBLIC	??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--
PUBLIC	?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Unwrapped
PUBLIC	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z ; std::pointer_traits<QSVAllocator::UniqueResponse *>::pointer_to
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Free_non_head<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<QSVAllocator::UniqueResponse,void *> >
PUBLIC	??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::move<QSVAllocator::UniqueResponse &>
PUBLIC	??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1><>
PUBLIC	??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<mfxFrameAllocResponse,void *> >
PUBLIC	??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::move<mfxFrameAllocResponse &>
PUBLIC	??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1><>
PUBLIC	??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z		; std::_Min_value<unsigned __int64>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::addressof<QSVAllocator::UniqueResponse>
PUBLIC	??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * &>
PUBLIC	??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode0<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > const >
PUBLIC	??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * &>
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Free_non_head<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode0<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > const >
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ; std::swap<RGYLog *,void>
PUBLIC	??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>
PUBLIC	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z		; std::_Get_size_of_n<64>
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z		; std::_Get_size_of_n<48>
PUBLIC	??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>
PUBLIC	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator++
PUBLIC	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator==
PUBLIC	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator!=
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
PUBLIC	??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
PUBLIC	??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
PUBLIC	??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>
PUBLIC	??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >
PUBLIC	??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>
PUBLIC	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator++
PUBLIC	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator==
PUBLIC	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator!=
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
PUBLIC	??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
PUBLIC	??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
PUBLIC	??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,0>
PUBLIC	??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::destroy<QSVAllocator::UniqueResponse>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
PUBLIC	?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
PUBLIC	??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::forward<QSVAllocator::UniqueResponse>
PUBLIC	??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>
PUBLIC	??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::addressof<mfxFrameAllocResponse>
PUBLIC	??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::destroy<mfxFrameAllocResponse>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
PUBLIC	?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
PUBLIC	??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::forward<mfxFrameAllocResponse>
PUBLIC	??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
PUBLIC	??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * &>
PUBLIC	??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
PUBLIC	??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<mfxFrameAllocResponse,void *> *>
PUBLIC	??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * &>
PUBLIC	??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<mfxFrameAllocResponse,void *> *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
PUBLIC	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
PUBLIC	??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * const &>
PUBLIC	??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::construct<QSVAllocator::UniqueResponse,QSVAllocator::UniqueResponse>
PUBLIC	??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::construct<mfxFrameAllocResponse,mfxFrameAllocResponse>
PUBLIC	??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * const &>
PUBLIC	??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_7QSVBufferAllocator@@6B@			; QSVBufferAllocator::`vftable'
PUBLIC	??_7QSVAllocator@@6B@				; QSVAllocator::`vftable'
PUBLIC	??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@ ; `string'
PUBLIC	??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1OC@FPLGCEPB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ ; `string'
PUBLIC	??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1MG@IGJAEKKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ ; `string'
PUBLIC	??_C@_0CB@EKEMEMC@pop_back?5called?5on?5empty?5list?$DMT@ ; `string'
PUBLIC	??_C@_1MM@EBAHMKGK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ ; `string'
PUBLIC	??_C@_1EG@IHNNOGFN@?$AA?$CC?$AAp?$AAo?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1PK@BDINIFNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ ; `string'
PUBLIC	??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_1PK@LDHAGMBI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@ ; `string'
PUBLIC	??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1PI@LEDFCHND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@ ; `string'
PUBLIC	??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1BAI@PDOPGBHP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1BAI@FDBCIILK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1BAG@ENFBGKN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_0DB@MCPEHPCC@cannot?5decrement?5value?9initiali@ ; `string'
PUBLIC	??_C@_1PK@EAECNANJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GG@FLDKPFOH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CF@BAAFPBMN@cannot?5decrement?5begin?5list?5ite@ ; `string'
PUBLIC	??_C@_1EO@PPPLIDNC@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0DG@GAGDEJEE@list?5iterators?5in?5range?5are?5fro@ ; `string'
PUBLIC	??_C@_1HA@KAMKPLHN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4QSVBufferAllocator@@6B@			; QSVBufferAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVQSVBufferAllocator@@@8			; QSVBufferAllocator `RTTI Type Descriptor'
PUBLIC	??_R3QSVBufferAllocator@@8			; QSVBufferAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVBufferAllocator@@8			; QSVBufferAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@QSVBufferAllocator@@8		; QSVBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@mfxBufferAllocator@@8		; mfxBufferAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUmfxBufferAllocator@@@8			; mfxBufferAllocator `RTTI Type Descriptor'
PUBLIC	??_R3mfxBufferAllocator@@8			; mfxBufferAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mfxBufferAllocator@@8			; mfxBufferAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mfxBufferAllocator@@8		; mfxBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4QSVAllocator@@6B@				; QSVAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVQSVAllocator@@@8			; QSVAllocator `RTTI Type Descriptor'
PUBLIC	??_R3QSVAllocator@@8				; QSVAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QSVAllocator@@8				; QSVAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@QSVAllocator@@8			; QSVAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@mfxFrameAllocator@@8		; mfxFrameAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUmfxFrameAllocator@@@8			; mfxFrameAllocator `RTTI Type Descriptor'
PUBLIC	??_R3mfxFrameAllocator@@8			; mfxFrameAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2mfxFrameAllocator@@8			; mfxFrameAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@mfxFrameAllocator@@8		; mfxFrameAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	_purecall:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	??_EQSVBufferAllocator@@UEAAPEAXI@Z:PROC	; QSVBufferAllocator::`vector deleting destructor'
EXTRN	??_EQSVAllocator@@UEAAPEAXI@Z:PROC		; QSVAllocator::`vector deleting destructor'
EXTRN	?qsv_memtype_str@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@G@Z:PROC ; qsv_memtype_str
EXTRN	?get_err_mes@@YAPEBDH@Z:PROC			; get_err_mes
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+78
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+424
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+175
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iterator_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iterator_base12@std@@QEAA@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??0_Iterator_base12@std@@QEAA@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN7
	DD	imagerel $LN7+161
	DD	imagerel $unwind$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA DD imagerel ?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA
	DD	imagerel ?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Iterator_base12@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$??1_Iterator_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD imagerel $LN8
	DD	imagerel $LN8+251
	DD	imagerel $unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA DD imagerel ?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA DD imagerel ?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
	DD	imagerel ?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD imagerel $LN15
	DD	imagerel $LN15+270
	DD	imagerel $unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+91
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+214
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspMatrixList@@YAXXZ DD imagerel ??__ECspMatrixList@@YAXXZ
	DD	imagerel ??__ECspMatrixList@@YAXXZ+452
	DD	imagerel $unwind$??__ECspMatrixList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+311
	DD	imagerel $unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspTransferList@@YAXXZ DD imagerel ??__ECspTransferList@@YAXXZ
	DD	imagerel ??__ECspTransferList@@YAXXZ+476
	DD	imagerel $unwind$??__ECspTransferList@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+263
	DD	imagerel $unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ECspColorprimList@@YAXXZ DD imagerel ??__ECspColorprimList@@YAXXZ
	DD	imagerel ??__ECspColorprimList@@YAXXZ+398
	DD	imagerel $unwind$??__ECspColorprimList@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0QSVBufferAllocator@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??0QSVBufferAllocator@@QEAA@XZ
$pdata$??1QSVBufferAllocator@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$??1QSVBufferAllocator@@UEAA@XZ
$pdata$?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z
$pdata$?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z
$pdata$?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z
$pdata$?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GQSVBufferAllocator@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_GQSVBufferAllocator@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0QSVAllocator@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+204
	DD	imagerel $unwind$??0QSVAllocator@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA
$pdata$?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA
$pdata$?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1QSVAllocator@@UEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$??1QSVAllocator@@UEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA
$pdata$?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA DD imagerel ?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA
$pdata$?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA DD imagerel ?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ DD imagerel $LN15
	DD	imagerel $LN15+622
	DD	imagerel $unwind$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD imagerel ?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DD	imagerel ?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
$pdata$?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD imagerel ?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DD	imagerel ?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
$pdata$?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD imagerel ?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DD	imagerel ?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA+35
	DD	imagerel $unwind$?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
$pdata$?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD imagerel ?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DD	imagerel ?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD imagerel $LN20
	DD	imagerel $LN20+1807
	DD	imagerel $unwind$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DD imagerel $LN19
	DD	imagerel $LN19+1323
	DD	imagerel $unwind$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$pdata$?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
$pdata$?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z
$pdata$?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z
$pdata$?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z
$pdata$?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z
$pdata$?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z DD imagerel $LN6
	DD	imagerel $LN6+57
	DD	imagerel $unwind$?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA DD imagerel ?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA DD imagerel ?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA DD imagerel ?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA DD imagerel ?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA
	DD	imagerel ?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ DD imagerel $LN12
	DD	imagerel $LN12+186
	DD	imagerel $unwind$?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z DD imagerel $LN15
	DD	imagerel $LN15+325
	DD	imagerel $unwind$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA DD imagerel ?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA DD imagerel ?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
	DD	imagerel ?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA+49
	DD	imagerel $unwind$?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+257
	DD	imagerel $unwind$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA DD imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DD imagerel $LN9
	DD	imagerel $LN9+231
	DD	imagerel $unwind$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA DD imagerel ?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA DD imagerel ?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA DD imagerel ?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA+49
	DD	imagerel $unwind$?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z DD imagerel $LN15
	DD	imagerel $LN15+325
	DD	imagerel $unwind$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA DD imagerel ?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA DD imagerel ?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
	DD	imagerel ?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA+49
	DD	imagerel $unwind$?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+257
	DD	imagerel $unwind$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA DD imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DD imagerel $LN9
	DD	imagerel $LN9+231
	DD	imagerel $unwind$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+204
	DD	imagerel $unwind$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GQSVAllocator@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_GQSVAllocator@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ DD imagerel $LN21
	DD	imagerel $LN21+326
	DD	imagerel $unwind$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN21
	DD	imagerel $LN21+339
	DD	imagerel $unwind$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD imagerel $LN14
	DD	imagerel $LN14+238
	DD	imagerel $unwind$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z DD imagerel $LN12
	DD	imagerel $LN12+195
	DD	imagerel $unwind$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DD	imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DD	imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA+49
	DD	imagerel $unwind$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z DD imagerel $LN11
	DD	imagerel $LN11+273
	DD	imagerel $unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA+49
	DD	imagerel $unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z DD imagerel ??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z
	DD	imagerel ??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z+163
	DD	imagerel $unwind$??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z DD imagerel ??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z
	DD	imagerel ??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z+34
	DD	imagerel $unwind$??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DD imagerel ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
	DD	imagerel ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z+273
	DD	imagerel $unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+49
	DD	imagerel $unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ DD imagerel $LN21
	DD	imagerel $LN21+326
	DD	imagerel $unwind$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN21
	DD	imagerel $LN21+339
	DD	imagerel $unwind$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN21
	DD	imagerel $LN21+346
	DD	imagerel $unwind$??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD imagerel $LN14
	DD	imagerel $LN14+238
	DD	imagerel $unwind$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z DD imagerel $LN12
	DD	imagerel $LN12+195
	DD	imagerel $unwind$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DD	imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DD	imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA+49
	DD	imagerel $unwind$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DD imagerel ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
	DD	imagerel ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z+273
	DD	imagerel $unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA+49
	DD	imagerel $unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z DD imagerel $LN6
	DD	imagerel $LN6+236
	DD	imagerel $unwind$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA DD imagerel ?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z DD imagerel $LN6
	DD	imagerel $LN6+236
	DD	imagerel $unwind$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+98
	DD	imagerel $unwind$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z DD imagerel $LN4
	DD	imagerel $LN4+135
	DD	imagerel $unwind$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA DD imagerel ?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+98
	DD	imagerel $unwind$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z DD imagerel $LN4
	DD	imagerel $LN4+135
	DD	imagerel $unwind$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA DD imagerel ?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+279
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mfxFrameAllocator@@8 DD imagerel ??_R0?AUmfxFrameAllocator@@@8 ; mfxFrameAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R2mfxFrameAllocator@@8 DD imagerel ??_R1A@?0A@EA@mfxFrameAllocator@@8 ; mfxFrameAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R3mfxFrameAllocator@@8 DD 00H			; mfxFrameAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUmfxFrameAllocator@@@8
data$r	SEGMENT
??_R0?AUmfxFrameAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; mfxFrameAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUmfxFrameAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@mfxFrameAllocator@@8
rdata$r	SEGMENT
??_R17?0A@EA@mfxFrameAllocator@@8 DD imagerel ??_R0?AUmfxFrameAllocator@@@8 ; mfxFrameAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxFrameAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVAllocator@@8 DD imagerel ??_R0?AVQSVAllocator@@@8 ; QSVAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVAllocator@@8
rdata$r	SEGMENT
??_R2QSVAllocator@@8 DD imagerel ??_R1A@?0A@EA@QSVAllocator@@8 ; QSVAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@mfxFrameAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVAllocator@@8
rdata$r	SEGMENT
??_R3QSVAllocator@@8 DD 00H				; QSVAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2QSVAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVAllocator@@@8
data$r	SEGMENT
??_R0?AVQSVAllocator@@@8 DQ FLAT:??_7type_info@@6B@	; QSVAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R4QSVAllocator@@6B@
rdata$r	SEGMENT
??_R4QSVAllocator@@6B@ DD 01H				; QSVAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVQSVAllocator@@@8
	DD	imagerel ??_R3QSVAllocator@@8
	DD	imagerel ??_R4QSVAllocator@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@mfxBufferAllocator@@8 DD imagerel ??_R0?AUmfxBufferAllocator@@@8 ; mfxBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R2mfxBufferAllocator@@8 DD imagerel ??_R1A@?0A@EA@mfxBufferAllocator@@8 ; mfxBufferAllocator::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R3mfxBufferAllocator@@8 DD 00H			; mfxBufferAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUmfxBufferAllocator@@@8
data$r	SEGMENT
??_R0?AUmfxBufferAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; mfxBufferAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUmfxBufferAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@mfxBufferAllocator@@8
rdata$r	SEGMENT
??_R17?0A@EA@mfxBufferAllocator@@8 DD imagerel ??_R0?AUmfxBufferAllocator@@@8 ; mfxBufferAllocator::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3mfxBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QSVBufferAllocator@@8 DD imagerel ??_R0?AVQSVBufferAllocator@@@8 ; QSVBufferAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QSVBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R2QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R2QSVBufferAllocator@@8 DD imagerel ??_R1A@?0A@EA@QSVBufferAllocator@@8 ; QSVBufferAllocator::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@mfxBufferAllocator@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3QSVBufferAllocator@@8
rdata$r	SEGMENT
??_R3QSVBufferAllocator@@8 DD 00H			; QSVBufferAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2QSVBufferAllocator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVQSVBufferAllocator@@@8
data$r	SEGMENT
??_R0?AVQSVBufferAllocator@@@8 DQ FLAT:??_7type_info@@6B@ ; QSVBufferAllocator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQSVBufferAllocator@@', 00H
data$r	ENDS
;	COMDAT ??_R4QSVBufferAllocator@@6B@
rdata$r	SEGMENT
??_R4QSVBufferAllocator@@6B@ DD 01H			; QSVBufferAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVQSVBufferAllocator@@@8
	DD	imagerel ??_R3QSVBufferAllocator@@8
	DD	imagerel ??_R4QSVBufferAllocator@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1HA@KAMKPLHN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
CONST	SEGMENT
??_C@_1HA@KAMKPLHN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H
	DB	' ', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GAGDEJEE@list?5iterators?5in?5range?5are?5fro@
CONST	SEGMENT
??_C@_0DG@GAGDEJEE@list?5iterators?5in?5range?5are?5fro@ DB 'list iterato'
	DB	'rs in range are from different containers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@PPPLIDNC@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EO@PPPLIDNC@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BAAFPBMN@cannot?5decrement?5begin?5list?5ite@
CONST	SEGMENT
??_C@_0CF@BAAFPBMN@cannot?5decrement?5begin?5list?5ite@ DB 'cannot decrem'
	DB	'ent begin list iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@FLDKPFOH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GG@FLDKPFOH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PK@EAECNANJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1PK@EAECNANJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '-', 00H, '-', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MCPEHPCC@cannot?5decrement?5value?9initiali@
CONST	SEGMENT
??_C@_0DB@MCPEHPCC@cannot?5decrement?5value?9initiali@ DB 'cannot decreme'
	DB	'nt value-initialized list iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAG@ENFBGKN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAG@ENFBGKN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'Q', 00H, 'S', 00H, 'V', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H
	DB	':', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAI@FDBCIILK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAI@FDBCIILK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'Q', 00H, 'S', 00H, 'V', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H
	DB	':', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAI@PDOPGBHP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAI@PDOPGBHP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'Q', 00H, 'S', 00H, 'V', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H
	DB	':', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'q', 00H, 'u', 00H, 'e'
	DB	00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@
CONST	SEGMENT
??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@ DB 'cannot derefe'
	DB	'rence end list iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1PI@LEDFCHND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1PI@LEDFCHND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized list iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@
CONST	SEGMENT
??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@ DB 'cannot increme'
	DB	'nt end list iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PK@LDHAGMBI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1PK@LDHAGMBI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized list iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
CONST	SEGMENT
??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1PK@BDINIFNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1PK@BDINIFNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@ DB 'list iterators inco'
	DB	'mpatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@IHNNOGFN@?$AA?$CC?$AAp?$AAo?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe@
CONST	SEGMENT
??_C@_1EG@IHNNOGFN@?$AA?$CC?$AAp?$AAo?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe@ DB '"'
	DB	00H, 'p', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '<', 00H, 'T', 00H, '>', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@EBAHMKGK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
CONST	SEGMENT
??_C@_1MM@EBAHMKGK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'm', 00H, 'f', 00H, 'x', 00H
	DB	'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'R', 00H, 'e', 00H, 's', 00H
	DB	'p', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'e', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ':'
	DB	00H, ':', 00H, 'p', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'b', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EKEMEMC@pop_back?5called?5on?5empty?5list?$DMT@
CONST	SEGMENT
??_C@_0CB@EKEMEMC@pop_back?5called?5on?5empty?5list?$DMT@ DB 'pop_back ca'
	DB	'lled on empty list<T>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@IGJAEKKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
CONST	SEGMENT
??_C@_1MG@IGJAEKKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'm', 00H, 'f', 00H, 'x', 00H
	DB	'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'R', 00H, 'e', 00H, 's', 00H
	DB	'p', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'e', 00H, ',', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 'm', 00H, 'f', 00H, 'x', 00H, 'F', 00H, 'r', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>', 00H, ':'
	DB	00H, ':', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@
CONST	SEGMENT
??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H
	DB	'e', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@FPLGCEPB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
CONST	SEGMENT
??_C@_1OC@FPLGCEPB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'Q', 00H, 'S', 00H, 'V', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ':', 00H, ':', 00H, 'U', 00H, 'n', 00H
	DB	'i', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'p', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'e', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 'Q', 00H, 'S', 00H, 'V', 00H, 'A', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ':', 00H, ':', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'q'
	DB	00H, 'u', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 'n', 00H, 's', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@
CONST	SEGMENT
??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@ DB 'list erase it'
	DB	'erator outside range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7QSVAllocator@@6B@
CONST	SEGMENT
??_7QSVAllocator@@6B@ DQ FLAT:??_R4QSVAllocator@@6B@	; QSVAllocator::`vftable'
	DQ	FLAT:??_EQSVAllocator@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ
	DQ	FLAT:?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
	DQ	FLAT:?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_7QSVBufferAllocator@@6B@
CONST	SEGMENT
??_7QSVBufferAllocator@@6B@ DQ FLAT:??_R4QSVBufferAllocator@@6B@ ; QSVBufferAllocator::`vftable'
	DQ	FLAT:??_EQSVBufferAllocator@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z DD 032901H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z DD 032901H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 021e01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	088H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z
	DD	imagerel $ip2state$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z DD 022811H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcName$0 DB 05fH ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
	DB	049H
	DB	06eH
	DB	073H
	DB	065H
	DB	072H
	DB	074H
	DB	05fH
	DB	061H
	DB	066H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcVarDesc DD 028H ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
	DD	08H
	DQ	FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcName$0
	ORG $+48
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcFrameData DD 01H ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
	DD	00H
	DQ	FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'<'
	DB	02H
	DB	'f'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DB 040H
	DD	imagerel $ip2state$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	088H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z
	DD	imagerel $ip2state$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z DD 022811H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcName$0 DB 05fH ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
	DB	049H
	DB	06eH
	DB	073H
	DB	065H
	DB	072H
	DB	074H
	DB	05fH
	DB	061H
	DB	066H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcVarDesc DD 028H ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
	DD	08H
	DQ	FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcName$0
	ORG $+48
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcFrameData DD 01H ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
	DD	00H
	DQ	FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'<'
	DB	02H
	DB	'f'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DB 040H
	DD	imagerel $ip2state$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 040H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0 DB 05fH ; std::swap<std::_Ref_count_base *,void>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc DD 028H ; std::swap<std::_Ref_count_base *,void>
	DD	08H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0
	ORG $+48
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData DD 01H ; std::swap<std::_Ref_count_base *,void>
	DD	00H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcName$0 DB 05fH ; std::swap<RGYLog *,void>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcVarDesc DD 028H ; std::swap<RGYLog *,void>
	DD	08H
	DQ	FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcName$0
	ORG $+48
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcFrameData DD 01H ; std::swap<RGYLog *,void>
	DD	00H
	DQ	FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 040H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DB 040H
	DD	imagerel $ip2state$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DB 040H
	DD	imagerel $ip2state$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z DB 06H
	DB	00H
	DB	00H
	DB	'a', 02H
	DB	02H
	DB	'T'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z
	DD	imagerel $ip2state$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z DD 022b11H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcName$0 DB 05fH ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>
	DB	04fH
	DB	070H
	DB	00H
	ORG $+12
??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcVarDesc DD 038H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>
	DD	010H
	DQ	FLAT:??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcName$0
	ORG $+48
??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcFrameData DD 01H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>
	DD	00H
	DQ	FLAT:??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DB 040H
	DD	imagerel $ip2state$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 06H
	DB	00H
	DB	00H
	DB	'a', 02H
	DB	02H
	DB	'T'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z
	DD	imagerel $ip2state$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z DD 022b11H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcName$0 DB 05fH ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>
	DB	04fH
	DB	070H
	DB	00H
	ORG $+12
??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcVarDesc DD 038H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>
	DD	010H
	DQ	FLAT:??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcName$0
	ORG $+48
??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcFrameData DD 01H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>
	DD	00H
	DQ	FLAT:??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DB 040H
	DD	imagerel $ip2state$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 08H
	DB	00H
	DB	00H
	DB	'j'
	DB	06H
	DB	08dH, 02H
	DB	04H
	DB	016H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
	DD	imagerel $ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DD 022d11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$0 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DB	055H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$1 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DB	055H
	DB	04cH
	DB	061H
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcVarDesc DD 048H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$0
	ORG $+96
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcFrameData DD 02H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DD	00H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 06H
	DB	00H
	DB	00H
	DB	080H
	DB	04H
	DB	'H'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 08H
	DD	imagerel $stateUnwindMap$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z
	DD	imagerel $ip2state$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z DD 022811H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcName$0 DB 05fH ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcVarDesc DD 028H ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
	DD	018H
	DQ	FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcName$0
	ORG $+48
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcFrameData DD 01H ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
	DD	00H
	DQ	FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'$'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'$'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'<'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 08H
	DB	00H
	DB	00H
	DB	'j'
	DB	06H
	DB	08dH, 02H
	DB	04H
	DB	016H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
	DD	imagerel $ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z DD 022d11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$0 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DB	055H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$1 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DB	055H
	DB	04cH
	DB	061H
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcVarDesc DD 048H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcName$0
	ORG $+96
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcFrameData DD 02H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
	DD	00H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z DB 08H
	DB	00H
	DB	00H
	DB	'j'
	DB	06H
	DB	08dH, 02H
	DB	04H
	DB	016H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z DB 08H
	DD	imagerel $stateUnwindMap$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z
	DD	imagerel $ip2state$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z DD 022d11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcName$0 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
	DB	055H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcName$1 DB 05fH ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
	DB	055H
	DB	04cH
	DB	061H
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcVarDesc DD 048H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcName$0
	ORG $+96
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcFrameData DD 02H ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
	DD	00H
	DQ	FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 06H
	DB	00H
	DB	00H
	DB	080H
	DB	04H
	DB	'H'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z DB 08H
	DD	imagerel $stateUnwindMap$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z
	DD	imagerel $ip2state$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z DD 022811H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcName$0 DB 05fH ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcVarDesc DD 028H ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
	DD	018H
	DQ	FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcName$0
	ORG $+48
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcFrameData DD 01H ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
	DD	00H
	DQ	FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z DD 022301H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'$'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'$'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	'<'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DB 08H
	DD	imagerel $stateUnwindMap$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
	DD	imagerel $ip2state$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z DD 022811H
	DD	070103214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GQSVAllocator@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	' '
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ DB 048H
	DD	imagerel $stateUnwindMap$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ
	DD	imagerel $ip2state$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ DD 021e11H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	'^'
	DB	02H
	DB	0f6H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DB 048H
	DD	imagerel $stateUnwindMap$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
	DD	imagerel $ip2state$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DD 021e19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end
	DD	04H
	DQ	FLAT:?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end
	DD	00H
	DQ	FLAT:?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 06H
	DB	00H
	DB	00H
	DB	'h'
	DB	02H
	DB	'E', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 048H
	DD	imagerel $stateUnwindMap$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
	DD	imagerel $ip2state$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DD 022319H
	DD	0700bb20fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcName$0 DB 05fH ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcVarDesc DD 024H ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2
	DD	04H
	DQ	FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcName$0
	ORG $+48
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcFrameData DD 01H ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2
	DD	00H
	DQ	FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	0c6H
	DB	02H
	DB	0f8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DB 08H
	DD	imagerel $stateUnwindMap$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
	DD	imagerel $ip2state$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DD 032411H
	DD	014010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$0 DB 024H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
	DB	053H
	DB	031H
	DB	037H
	DB	00H
	ORG $+3
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$1 DB 05fH ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$2 DB 05fH ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
	DB	04eH
	DB	065H
	DB	077H
	DB	068H
	DB	065H
	DB	061H
	DB	064H
	DB	00H
	ORG $+7
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcVarDesc DD 088H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
	DD	08H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcName$0
	ORG $+144
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcFrameData DD 03H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
	DD	00H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z DB 06H
	DB	00H
	DB	00H
	DB	'`'
	DB	04H
	DB	0fdH, 03H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z DB 08H
	DD	imagerel $stateUnwindMap$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z
	DD	imagerel $ip2state$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z DD 022811H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 04H
	DB	00H
	DB	00H
	DB	0a0H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DB 08H
	DD	imagerel $stateUnwindMap$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
	DD	imagerel $ip2state$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z DD 022811H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 04H
	DB	00H
	DB	00H
	DB	0a0H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 048H
	DD	imagerel $stateUnwindMap$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
	DD	imagerel $ip2state$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 04H
	DB	00H
	DB	00H
	DB	0a6H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DB 048H
	DD	imagerel $stateUnwindMap$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
	DD	imagerel $ip2state$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
	DB	053H
	DB	032H
	DB	00H
	ORG $+12
??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
	DD	01H
	DQ	FLAT:??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
	DD	00H
	DQ	FLAT:??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 06H
	DB	00H
	DB	00H
	DB	'h'
	DB	02H
	DB	'E', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 048H
	DD	imagerel $stateUnwindMap$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
	DD	imagerel $ip2state$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DD 022319H
	DD	0700bb20fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcName$0 DB 05fH ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcVarDesc DD 024H ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2
	DD	04H
	DQ	FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcName$0
	ORG $+48
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcFrameData DD 01H ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2
	DD	00H
	DQ	FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	0c6H
	DB	02H
	DB	0f8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DB 08H
	DD	imagerel $stateUnwindMap$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
	DD	imagerel $ip2state$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DD 032411H
	DD	014010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$0 DB 024H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
	DB	053H
	DB	031H
	DB	038H
	DB	00H
	ORG $+3
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$1 DB 05fH ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$2 DB 05fH ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
	DB	04eH
	DB	065H
	DB	077H
	DB	068H
	DB	065H
	DB	061H
	DB	064H
	DB	00H
	ORG $+7
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcVarDesc DD 088H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
	DD	08H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcName$0
	ORG $+144
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcFrameData DD 03H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
	DD	00H
	DQ	FLAT:?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z DB 06H
	DB	00H
	DB	00H
	DB	'`'
	DB	04H
	DB	0fdH, 03H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z DB 08H
	DD	imagerel $stateUnwindMap$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z
	DD	imagerel $ip2state$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z DD 022811H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ DB 06H
	DB	00H
	DB	00H
	DB	'x'
	DB	02H
	DB	'.'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ DB 08H
	DD	imagerel $stateUnwindMap$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ
	DD	imagerel $ip2state$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ DD 021e11H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 04H
	DB	00H
	DB	00H
	DB	0a0H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DB 08H
	DD	imagerel $stateUnwindMap$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
	DD	imagerel $ip2state$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z DD 022811H
	DD	070105214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 04H
	DB	00H
	DB	00H
	DB	0a0H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 048H
	DD	imagerel $stateUnwindMap$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
	DD	imagerel $ip2state$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 04H
	DB	00H
	DB	00H
	DB	0a6H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DB 048H
	DD	imagerel $stateUnwindMap$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
	DD	imagerel $ip2state$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ DD 022319H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
	DB	053H
	DB	033H
	DB	00H
	ORG $+12
??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
	DD	01H
	DQ	FLAT:??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
	DD	00H
	DQ	FLAT:??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z DD 021801H
	DD	060177018H
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcName$0 DB 069H ; QSVAllocator::Close
	DB	074H
	DB	00H
	ORG $+1
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcName$1 DB 069H ; QSVAllocator::Close
	DB	074H
	DB	032H
	DB	00H
	ORG $+4
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcVarDesc DD 058H ; QSVAllocator::Close
	DD	018H
	DQ	FLAT:?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcName$0
	ORG $+96
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcFrameData DD 02H ; QSVAllocator::Close
	DD	00H
	DQ	FLAT:?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcVarDesc
?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0 DB 069H ; QSVAllocator::FrameAlloc
	DB	074H
	DB	00H
	ORG $+5
?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData DD 01H ; QSVAllocator::FrameAlloc
	DD	00H
	DQ	FLAT:?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0 DB 063H ; QSVAllocator::FrameFree
	DB	06fH
	DB	06dH
	DB	070H
	DB	061H
	DB	072H
	DB	065H
	DB	05fH
	DB	072H
	DB	065H
	DB	073H
	DB	070H
	DB	06fH
	DB	06eH
	DB	073H
	DB	065H
	DB	00H
	ORG $+7
?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc DD 068H ; QSVAllocator::FrameAlloc
	DD	018H
	DQ	FLAT:?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0
	ORG $+48
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$1 DB 069H ; QSVAllocator::FrameFree
	DB	074H
	DB	00H
	ORG $+1
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$2 DB 069H ; QSVAllocator::FrameFree
	DB	074H
	DB	032H
	DB	00H
	ORG $+8
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc DD 088H ; QSVAllocator::FrameFree
	DD	018H
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$2
	DD	058H
	DD	018H
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcName$0
	ORG $+144
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData DD 03H ; QSVAllocator::FrameFree
	DD	00H
	DQ	FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GQSVBufferAllocator@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
xdata	SEGMENT
$unwind$??0QSVBufferAllocator@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$??1QSVBufferAllocator@@UEAA@XZ DD 010601H
	DD	07006H
$unwind$?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z DD 022d01H
	DD	070153219H
$unwind$?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z DD 022801H
	DD	070103214H
$unwind$?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z DD 022301H
	DD	0700b320fH
$unwind$?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z DD 022301H
	DD	0700b320fH
$unwind$??0QSVAllocator@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0QSVAllocator@@QEAA@XZ
$cppxdata$??0QSVAllocator@@QEAA@XZ DB 08H
	DD	imagerel $stateUnwindMap$??0QSVAllocator@@QEAA@XZ
	DD	imagerel $ip2state$??0QSVAllocator@@QEAA@XZ
$stateUnwindMap$??0QSVAllocator@@QEAA@XZ DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA
$ip2state$??0QSVAllocator@@QEAA@XZ DB 0aH
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'$'
	DB	04H
	DB	'$'
	DB	06H
	DB	0bcH
	DB	00H
$unwind$?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1QSVAllocator@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1QSVAllocator@@UEAA@XZ
$cppxdata$??1QSVAllocator@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1QSVAllocator@@UEAA@XZ
	DD	imagerel $ip2state$??1QSVAllocator@@UEAA@XZ
$stateUnwindMap$??1QSVAllocator@@UEAA@XZ DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA
$ip2state$??1QSVAllocator@@UEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	'Z'
	DB	04H
	DB	'$'
	DB	02H
	DB	'$'
	DB	00H
$cppxdata$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ DB 08H
	DD	imagerel $stateUnwindMap$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ
	DD	imagerel $ip2state$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ
$stateUnwindMap$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DB	05eH
	DD	imagerel ?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA
$unwind$?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ DD 032411H
	DD	024010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ
$ip2state$?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ DB 012H
	DB	00H
	DB	00H
	DB	'|'
	DB	02H
	DB	0a4H
	DB	04H
	DB	'2'
	DB	02H
	DB	0a2H
	DB	00H
	DB	'p'
	DB	06H
	DB	0b0H
	DB	08H
	DB	'2'
	DB	06H
	DB	0a2H
	DB	00H
$cppxdata$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 08H
	DD	imagerel $stateUnwindMap$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
	DD	imagerel $ip2state$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
$unwind$?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD 044119H
	DD	04f0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z
	DD	026aH
$stateUnwindMap$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 0aH
	DB	0eH
	DD	imagerel ?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA
$ip2state$?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DB 016H
	DB	00H
	DB	00H
	DB	'Y', 03H
	DB	02H
	DB	09cH
	DB	00H
	DB	'A', 06H
	DB	04H
	DB	'h'
	DB	00H
	DB	'F'
	DB	08H
	DB	'h'
	DB	0aH
	DB	'2'
	DB	08H
	DB	'I', 02H
	DB	00H
	DB	','
	DB	08H
	DB	0f9H, 04H
	DB	00H
$cppxdata$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DB 08H
	DD	imagerel $stateUnwindMap$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
	DD	imagerel $ip2state$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
	ORG $+2
$unwind$?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DD 032911H
	DD	0520112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z
$stateUnwindMap$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DB 014H
	DB	0eH
	DD	imagerel ?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	056H
	DD	imagerel ?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	07eH
	DD	imagerel ?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	0ceH
	DD	imagerel ?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
	DB	056H
	DD	imagerel ?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA
$ip2state$?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z DB ','
	DB	00H
	DB	00H
	DB	0a9H, 03H
	DB	02H
	DB	'h'
	DB	00H
	DB	'@'
	DB	06H
	DB	'h'
	DB	08H
	DB	'2'
	DB	06H
	DB	0d9H, 02H
	DB	0aH
	DB	018H
	DB	06H
	DB	'`'
	DB	00H
	DB	','
	DB	06H
	DB	'I', 02H
	DB	0cH
	DB	'h'
	DB	06H
	DB	'F'
	DB	010H
	DB	'h'
	DB	012H
	DB	'8'
	DB	010H
	DB	0f8H
	DB	014H
	DB	018H
	DB	010H
	DB	'`'
	DB	06H
	DB	01cH
	DB	00H
	DB	'&'
	DB	010H
	DB	092H
	DB	06H
	DB	01cH
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z DD 022801H
	DD	070103214H
$unwind$?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z DD 022801H
	DD	070103214H
$unwind$?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z DD 022801H
	DD	070103214H
$unwind$?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z DD 022801H
	DD	070103214H
$unwind$?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z DD 022301H
	DD	0700b320fH
$unwind$?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspColorprimList@@YAXXZ DD 042b19H
	DD	023010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z DD 033d19H
	DD	07016821aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspTransferList@@YAXXZ DD 042b19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ECspMatrixList@@YAXXZ DD 042b19H
	DD	029010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z DD 033d19H
	DD	07016a21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 040H
	DD	imagerel $ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 021e19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DB 040H
	DD	imagerel $ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'<'
	DB	02H
	DB	0aeH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 021e11H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+11
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 021e01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 022801H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DB 040H
	DD	imagerel $ip2state$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ DD 021e19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ DD 021e01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DB 0aH
	DB	00H
	DB	00H
	DB	0d0H
	DB	02H
	DB	088H
	DB	00H
	DB	'>'
	DB	04H
	DB	01cH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DB 048H
	DD	imagerel $stateUnwindMap$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
	DD	imagerel $ip2state$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z DD 022619H
	DD	0700bd20fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1 DB 05fH ; std::_Iterator_base12::_Adopt
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+2
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc DD 054H ; std::_Iterator_base12::_Adopt
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcName$0
	ORG $+96
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData DD 02H ; std::_Iterator_base12::_Adopt
	DD	00H
	DQ	FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Iterator_base12@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'^'
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1_Iterator_base12@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Iterator_base12@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1_Iterator_base12@std@@QEAA@XZ
	DD	imagerel $ip2state$??1_Iterator_base12@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Iterator_base12@std@@QEAA@XZ DD 021e19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Iterator_base12@std@@QEAA@XZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1_Iterator_base12@std@@QEAA@XZ$rtcName$0 DB 05fH	; std::_Iterator_base12::~_Iterator_base12
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc DD 024H	; std::_Iterator_base12::~_Iterator_base12
	DD	04H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData DD 01H	; std::_Iterator_base12::~_Iterator_base12
	DD	00H
	DQ	FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DB 06H
	DB	00H
	DB	00H
	DB	0d2H
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
	DD	imagerel $ip2state$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DD 022319H
	DD	0700b720fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcName$0 DB 05fH ; std::_Iterator_base12::operator=
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcVarDesc DD 024H ; std::_Iterator_base12::operator=
	DD	04H
	DQ	FLAT:??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcName$0
	ORG $+48
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcFrameData DD 01H ; std::_Iterator_base12::operator=
	DD	00H
	DQ	FLAT:??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iterator_base12@std@@QEAA@AEBU01@@Z DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iterator_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	't'
	DB	02H
	DB	0a6H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DB 048H
	DD	imagerel $stateUnwindMap$?_Orphan_all@_Container_base12@std@@QEAAXXZ
	DD	imagerel $ip2state$?_Orphan_all@_Container_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 021e19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all
	DD	04H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all
	DD	00H
	DQ	FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 022301H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 021501H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1bad_array_new_length@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1bad_array_new_length@std@@UEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1bad_array_new_length@std@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1bad_array_new_length@std@@UEAA@XZ
	DD	imagerel $ip2state$??1bad_array_new_length@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1bad_array_new_length@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_array_new_length@std@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'`'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_array_new_length@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_array_new_length@std@@QEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??0bad_array_new_length@std@@QEAA@XZ
	DD	imagerel $ip2state$??0bad_array_new_length@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_array_new_length@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 06H
	DB	00H
	DB	00H
	DB	'f'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_alloc@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1bad_alloc@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1bad_alloc@std@@UEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1bad_alloc@std@@UEAA@XZ DB 048H
	DD	imagerel $stateUnwindMap$??1bad_alloc@std@@UEAA@XZ
	DD	imagerel $ip2state$??1bad_alloc@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 021e11H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1bad_alloc@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0bad_alloc@std@@AEAA@QEBD@Z DB 06H
	DB	00H
	DB	00H
	DB	'r'
	DB	02H
	DB	01eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0bad_alloc@std@@AEAA@QEBD@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0bad_alloc@std@@AEAA@QEBD@Z DB 048H
	DD	imagerel $stateUnwindMap$??0bad_alloc@std@@AEAA@QEBD@Z
	DD	imagerel $ip2state$??0bad_alloc@std@@AEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 022311H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0bad_alloc@std@@AEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 021e01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DB 040H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 021e19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@AEBV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0exception@std@@QEAA@AEBV01@@Z DB 040H
	DD	imagerel $ip2state$??0exception@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 022319H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0exception@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZEA DQ FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z PROC ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ENDP ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z PROC ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ENDP ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::construct<mfxFrameAllocResponse,mfxFrameAllocResponse>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 0e 00 00 00	 mov	 ecx, 14
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00029	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0002e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00033	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00042	e8 00 00 00 00	 call	 ??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::forward<mfxFrameAllocResponse>
  00047	48 8b 7c 24 20	 mov	 rdi, QWORD PTR $T1[rsp]
  0004c	48 8b f0	 mov	 rsi, rax
  0004f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00054	f3 a4		 rep movsb

; 759  :     }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	5f		 pop	 rdi
  0005b	5e		 pop	 rsi
  0005c	c3		 ret	 0
??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::construct<mfxFrameAllocResponse,mfxFrameAllocResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::construct<QSVAllocator::UniqueResponse,QSVAllocator::UniqueResponse>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00015	48 8b fc	 mov	 rdi, rsp
  00018	b9 0e 00 00 00	 mov	 ecx, 14
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00029	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0002e	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00033	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00042	e8 00 00 00 00	 call	 ??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::forward<QSVAllocator::UniqueResponse>
  00047	48 8b 7c 24 20	 mov	 rdi, QWORD PTR $T1[rsp]
  0004c	48 8b f0	 mov	 rsi, rax
  0004f	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00054	f3 a4		 rep movsb

; 759  :     }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	5f		 pop	 rdi
  0005b	5e		 pop	 rsi
  0005c	c3		 ret	 0
??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::construct<QSVAllocator::UniqueResponse,QSVAllocator::UniqueResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
__formal$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00028	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 754  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@AEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 01	 mov	 QWORD PTR [rcx], rax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<mfxFrameAllocResponse,void *> *>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@AEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEBQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * const &>
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 01	 mov	 QWORD PTR [rcx], rax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z PROC ; std::move<std::_Ref_count_base * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ENDP ; std::move<std::_Ref_count_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z PROC ; std::move<RGYLog * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ENDP ; std::move<RGYLog * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00023	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00027	48 89 44 24 30	 mov	 QWORD PTR _Block_size$[rsp], rax

; 86   :     if (_Block_size <= _Bytes) {

  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00031	48 39 44 24 30	 cmp	 QWORD PTR _Block_size$[rsp], rax
  00036	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  00038	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Block_size$[rsp]
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00047	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004c	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Ptr_container$[rsp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 6b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG137322
  0005d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG137323
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	45 33 c9	 xor	 r9d, r9d
  00071	41 b8 5b 00 00
	00		 mov	 r8d, 91			; 0000005bH
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG137324
  0007e	b9 02 00 00 00	 mov	 ecx, 2
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 03		 jne	 SHORT $LN12@Allocate_m
  0008e	cc		 int	 3
  0008f	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00091	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009a	41 b9 5b 00 00
	00		 mov	 r9d, 91			; 0000005bH
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG137325
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG137326
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG137327
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 95		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 85		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c7	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr_container$[rsp]
  000cc	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000d0	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d4	48 89 44 24 40	 mov	 QWORD PTR _Ptr$[rsp], rax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 ff	 imul	 rax, rax, -1
  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000e7	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr_container$[rsp]
  000ec	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000f0	b8 08 00 00 00	 mov	 eax, 8
  000f5	48 6b c0 fe	 imul	 rax, rax, -2
  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000fe	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00108	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 99   : }

  00111	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00115	5f		 pop	 rdi
  00116	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<mfxFrameAllocResponse,void *> *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 322  :     _Obj.~_Ty();
; 323  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<mfxFrameAllocResponse,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z PROC ; std::addressof<std::_List_node<mfxFrameAllocResponse,void *> *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ENDP ; std::addressof<std::_List_node<mfxFrameAllocResponse,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 322  :     _Obj.~_Ty();
; 323  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z PROC ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ENDP ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z PROC ; std::addressof<std::_List_node<QSVAllocator::UniqueResponse,void *> *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ENDP ; std::addressof<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>, COMDAT

; 539  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Al_$[rsp]
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  00037	90		 npad	 1

; 540  :         this->_Allocate();

  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	e8 00 00 00 00	 call	 ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Allocate

; 541  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Vals_0>$[rsp]
  00047	e8 00 00 00 00	 call	 ??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::forward<mfxFrameAllocResponse>
  0004c	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 83 c1 10	 add	 rcx, 16
  0005e	e8 00 00 00 00	 call	 ??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::addressof<mfxFrameAllocResponse>
  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv81[rsp]
  00068	4c 8b c1	 mov	 r8, rcx
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00073	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00076	e8 00 00 00 00	 call	 ??$construct@UmfxFrameAllocResponse@@U1@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@$$QEAU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::construct<mfxFrameAllocResponse,mfxFrameAllocResponse>
  0007b	90		 npad	 1

; 542  :     }

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z PROC ; std::forward<mfxFrameAllocResponse>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ENDP ; std::forward<mfxFrameAllocResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z
_TEXT	SEGMENT
_Insert_after$ = 40
_Result$ = 56
this$ = 80
_Insert_before$ = 88
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before, COMDAT

; 553  :     pointer _Transfer_before(const pointer _Insert_before) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 554  :         const pointer _Insert_after = _Insert_before->_Prev;

  00023	48 8b 44 24 58	 mov	 rax, QWORD PTR _Insert_before$[rsp]
  00028	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002c	48 89 44 24 28	 mov	 QWORD PTR _Insert_after$[rsp], rax

; 555  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 8d 54 24 58	 lea	 rdx, QWORD PTR _Insert_before$[rsp]
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * const &>

; 556  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 83 c0 08	 add	 rax, 8
  00054	48 8d 54 24 28	 lea	 rdx, QWORD PTR _Insert_after$[rsp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * const &>

; 557  :         const auto _Result    = this->_Ptr;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006a	48 89 44 24 38	 mov	 QWORD PTR _Result$[rsp], rax

; 558  :         this->_Ptr            = pointer{};

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00074	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 559  :         _Insert_before->_Prev = _Result;

  0007c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Insert_before$[rsp]
  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Result$[rsp]
  00086	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 560  :         _Insert_after->_Next  = _Result;

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Insert_after$[rsp]
  0008f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Result$[rsp]
  00094	48 89 08	 mov	 QWORD PTR [rax], rcx

; 561  :         return _Result;

  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR _Result$[rsp]

; 562  :     }

  0009c	48 8b f8	 mov	 rdi, rax
  0009f	48 8b cc	 mov	 rcx, rsp
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z$rtcFrameData
  000a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ae	48 8b c7	 mov	 rax, rdi
  000b1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 544  :     ~_List_node_emplace_op2() {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 545  :         if (this->_Ptr != pointer{}) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 27		 je	 SHORT $LN2@List_node_

; 546  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::addressof<mfxFrameAllocResponse>
  0003f	90		 npad	 1
  00040	48 8b d0	 mov	 rdx, rax
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004b	e8 00 00 00 00	 call	 ??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::destroy<mfxFrameAllocResponse>
  00050	90		 npad	 1
$LN2@List_node_:

; 547  :         }
; 548  :     }

  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00056	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0005b	90		 npad	 1
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 1134 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1135 :         if (_Ptr) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 1d		 je	 SHORT $LN2@Alloc_cons

; 1136 :             _Al.deallocate(_Ptr, 1);

  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00041	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::deallocate
  00046	90		 npad	 1
$LN2@Alloc_cons:

; 1137 :         }
; 1138 :     }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Allocate, COMDAT

; 1129 :     void _Allocate() { // disengage *this, then allocate a new memory block

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1130 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1131 :         _Ptr = _Al.allocate(1);

  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocate
  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00042	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1132 :     }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Al_$ = 24
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 1123 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
__formal$ = 16
_Ptr$ = 24
??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::destroy<mfxFrameAllocResponse>, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 763  :         _Ptr->~_Uty();
; 764  :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::destroy<mfxFrameAllocResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z PROC ; std::addressof<mfxFrameAllocResponse>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z ENDP ; std::addressof<mfxFrameAllocResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z
_TEXT	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>, COMDAT

; 539  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Al_$[rsp]
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  00037	90		 npad	 1

; 540  :         this->_Allocate();

  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	e8 00 00 00 00	 call	 ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Allocate

; 541  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Vals_0>$[rsp]
  00047	e8 00 00 00 00	 call	 ??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::forward<QSVAllocator::UniqueResponse>
  0004c	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 83 c1 10	 add	 rcx, 16
  0005e	e8 00 00 00 00	 call	 ??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::addressof<QSVAllocator::UniqueResponse>
  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv81[rsp]
  00068	4c 8b c1	 mov	 r8, rcx
  0006b	48 8b d0	 mov	 rdx, rax
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00073	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00076	e8 00 00 00 00	 call	 ??$construct@UUniqueResponse@QSVAllocator@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::construct<QSVAllocator::UniqueResponse,QSVAllocator::UniqueResponse>
  0007b	90		 npad	 1

; 542  :     }

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
this$ = 64
_Al_$ = 72
<_Vals_0>$ = 80
?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z PROC ; std::forward<QSVAllocator::UniqueResponse>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1422 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ENDP ; std::forward<QSVAllocator::UniqueResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z
_TEXT	SEGMENT
_Insert_after$ = 40
_Result$ = 56
this$ = 80
_Insert_before$ = 88
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before, COMDAT

; 553  :     pointer _Transfer_before(const pointer _Insert_before) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 554  :         const pointer _Insert_after = _Insert_before->_Prev;

  00023	48 8b 44 24 58	 mov	 rax, QWORD PTR _Insert_before$[rsp]
  00028	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002c	48 89 44 24 28	 mov	 QWORD PTR _Insert_after$[rsp], rax

; 555  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 8d 54 24 58	 lea	 rdx, QWORD PTR _Insert_before$[rsp]
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>

; 556  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 83 c0 08	 add	 rax, 8
  00054	48 8d 54 24 28	 lea	 rdx, QWORD PTR _Insert_after$[rsp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEBQEAU10@@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * const &>

; 557  :         const auto _Result    = this->_Ptr;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006a	48 89 44 24 38	 mov	 QWORD PTR _Result$[rsp], rax

; 558  :         this->_Ptr            = pointer{};

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00074	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 559  :         _Insert_before->_Prev = _Result;

  0007c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Insert_before$[rsp]
  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Result$[rsp]
  00086	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 560  :         _Insert_after->_Next  = _Result;

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Insert_after$[rsp]
  0008f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Result$[rsp]
  00094	48 89 08	 mov	 QWORD PTR [rax], rcx

; 561  :         return _Result;

  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR _Result$[rsp]

; 562  :     }

  0009c	48 8b f8	 mov	 rdi, rax
  0009f	48 8b cc	 mov	 rcx, rsp
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z$rtcFrameData
  000a9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ae	48 8b c7	 mov	 rax, rdi
  000b1	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b5	5f		 pop	 rdi
  000b6	c3		 ret	 0
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 544  :     ~_List_node_emplace_op2() {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 545  :         if (this->_Ptr != pointer{}) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 27		 je	 SHORT $LN2@List_node_

; 546  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::addressof<QSVAllocator::UniqueResponse>
  0003f	90		 npad	 1
  00040	48 8b d0	 mov	 rdx, rax
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004b	e8 00 00 00 00	 call	 ??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::destroy<QSVAllocator::UniqueResponse>
  00050	90		 npad	 1
$LN2@List_node_:

; 547  :         }
; 548  :     }

  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00056	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0005b	90		 npad	 1
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 1134 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1135 :         if (_Ptr) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 1d		 je	 SHORT $LN2@Alloc_cons

; 1136 :             _Al.deallocate(_Ptr, 1);

  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00041	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::deallocate
  00046	90		 npad	 1
$LN2@Alloc_cons:

; 1137 :         }
; 1138 :     }

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Allocate, COMDAT

; 1129 :     void _Allocate() { // disengage *this, then allocate a new memory block

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1130 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1131 :         _Ptr = _Al.allocate(1);

  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocate
  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00042	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1132 :     }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Al_$ = 24
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 1123 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z
_TEXT	SEGMENT
__formal$ = 16
_Ptr$ = 24
??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::destroy<QSVAllocator::UniqueResponse>, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 763  :         _Ptr->~_Uty();
; 764  :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::destroy<QSVAllocator::UniqueResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00033	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00038	90		 npad	 1

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_It$ = 64
_UIt$ = 72
??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z PROC ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >, COMDAT

; 415  : constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 416  :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 417  :         _It._Seek_to(_UIt);

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _UIt$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 8b 54 24 20	 mov	 rdx, QWORD PTR $T1[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _It$[rsp]
  0003a	e8 00 00 00 00	 call	 ?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Seek_to

; 418  :     } else {
; 419  :         _It = _UIt;
; 420  :     }
; 421  : }

  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ENDP ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_It$ = 56
??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,0>, COMDAT

; 257  : _NODISCARD constexpr auto _Get_unwrapped(const _Iter& _It) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 258  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 259  :     return _It._Unwrapped();

  00023	48 8b 54 24 30	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _It$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Unwrapped
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 260  : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 48
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++, COMDAT

; 110  :     _List_unchecked_iterator& operator++() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 111  :         _Mybase::operator++();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator++

; 112  :         return *this;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 113  :     }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*, COMDAT

; 102  :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 103  :         return const_cast<reference>(_Mybase::operator*());

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator*

; 104  :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT

; 98   :     _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 99   :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>

; 100  :     }

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Right$ = 72
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator!=, COMDAT

; 75   :     _NODISCARD bool operator!=(const _List_unchecked_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 76   :         return !(*this == _Right);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator==
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 0a		 jne	 SHORT $LN3@operator
  00039	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 77   :     }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv67 = 0
this$ = 32
_Right$ = 40
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator==, COMDAT

; 71   :     _NODISCARD bool operator==(const _List_unchecked_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 72   :         return _Ptr == _Right._Ptr;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	75 09		 jne	 SHORT $LN3@operator
  00035	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  0003c	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@operator:
  00045	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 73   :     }

  00049	48 83 c4 10	 add	 rsp, 16
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 16
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator++, COMDAT

; 49   :     _List_unchecked_const_iterator& operator++() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 50   :         _Ptr = _Ptr->_Next;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 01	 mov	 QWORD PTR [rcx], rax

; 51   :         return *this;

  00019	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 52   :     }

  0001e	5f		 pop	 rdi
  0001f	c3		 ret	 0
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ
_TEXT	SEGMENT
this$ = 16
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator*, COMDAT

; 41   :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 42   :         return _Ptr->_Myval;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 83 c0 10	 add	 rax, 16

; 43   :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>, COMDAT

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 38   :         this->_Adopt(_Plist);

  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Plist$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003f	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 39   :     }

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >, COMDAT

; 217  :     const _Iter& _First, const _Sentinel& _Last) { // check that [_First, _Last) forms an iterator range

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 218  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 219  :         _Verify_range(_First, _Last);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z ; std::_Verify_range

; 220  :     } else {
; 221  :         (void) _First; // TRANSITION, VSO#486357
; 222  :         (void) _Last; // TRANSITION, VSO#486357
; 223  :     }
; 224  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_It$ = 64
_UIt$ = 72
??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z PROC ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >, COMDAT

; 415  : constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 416  :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 417  :         _It._Seek_to(_UIt);

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _UIt$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 8b 54 24 20	 mov	 rdx, QWORD PTR $T1[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _It$[rsp]
  0003a	e8 00 00 00 00	 call	 ?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Seek_to

; 418  :     } else {
; 419  :         _It = _UIt;
; 420  :     }
; 421  : }

  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ENDP ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_It$ = 56
??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>, COMDAT

; 257  : _NODISCARD constexpr auto _Get_unwrapped(const _Iter& _It) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 258  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 259  :     return _It._Unwrapped();

  00023	48 8b 54 24 30	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _It$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Unwrapped
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 260  : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 48
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++, COMDAT

; 110  :     _List_unchecked_iterator& operator++() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 111  :         _Mybase::operator++();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator++

; 112  :         return *this;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 113  :     }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*, COMDAT

; 102  :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 103  :         return const_cast<reference>(_Mybase::operator*());

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator*

; 104  :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT

; 98   :     _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 99   :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>

; 100  :     }

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Right$ = 72
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator!=, COMDAT

; 75   :     _NODISCARD bool operator!=(const _List_unchecked_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 76   :         return !(*this == _Right);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator==
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 0a		 jne	 SHORT $LN3@operator
  00039	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 77   :     }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv67 = 0
this$ = 32
_Right$ = 40
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator==, COMDAT

; 71   :     _NODISCARD bool operator==(const _List_unchecked_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 72   :         return _Ptr == _Right._Ptr;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	75 09		 jne	 SHORT $LN3@operator
  00035	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  0003c	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@operator:
  00045	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 73   :     }

  00049	48 83 c4 10	 add	 rsp, 16
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 16
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator++, COMDAT

; 49   :     _List_unchecked_const_iterator& operator++() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 50   :         _Ptr = _Ptr->_Next;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 01	 mov	 QWORD PTR [rcx], rax

; 51   :         return *this;

  00019	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 52   :     }

  0001e	5f		 pop	 rdi
  0001f	c3		 ret	 0
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ
_TEXT	SEGMENT
this$ = 16
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator*, COMDAT

; 41   :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 42   :         return _Ptr->_Myval;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 83 c0 10	 add	 rax, 16

; 43   :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>, COMDAT

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 38   :         this->_Adopt(_Plist);

  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Plist$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003f	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 39   :     }

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >, COMDAT

; 217  :     const _Iter& _First, const _Sentinel& _Last) { // check that [_First, _Last) forms an iterator range

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 218  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 219  :         _Verify_range(_First, _Last);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z ; std::_Verify_range

; 220  :     } else {
; 221  :         (void) _First; // TRANSITION, VSO#486357
; 222  :         (void) _Last; // TRANSITION, VSO#486357
; 223  :     }
; 224  : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H
  0002d	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 30   :             if (_Count > _Max_possible) {

  00032	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H
  0003c	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  00041	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00043	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  00048	48 6b 44 24 40
	30		 imul	 rax, QWORD PTR _Count$[rsp], 48 ; 00000030H
$LN3@Get_size_o:

; 36   : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<64>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH
  0002d	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 30   :             if (_Count > _Max_possible) {

  00032	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH
  0003c	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  00041	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00043	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  00048	48 6b 44 24 40
	40		 imul	 rax, QWORD PTR _Count$[rsp], 64 ; 00000040H
$LN3@Get_size_o:

; 36   : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
_TEXT	SEGMENT
_Tmp$ = 40
_Left$ = 80
_Right$ = 88
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z PROC ; std::swap<std::_Ref_count_base *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 59   :     _Ty _Tmp = _STD move(_Left);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 28	 mov	 QWORD PTR _Tmp$[rsp], rax

; 60   :     _Left    = _STD move(_Right);

  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax

; 61   :     _Right   = _STD move(_Tmp);

  0004a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 62   : }

  0005f	48 8b cc	 mov	 rcx, rsp
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData
  00069	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ENDP ; std::swap<std::_Ref_count_base *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z
_TEXT	SEGMENT
_Tmp$ = 40
_Left$ = 80
_Right$ = 88
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z PROC	; std::swap<RGYLog *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 59   :     _Ty _Tmp = _STD move(_Left);

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 28	 mov	 QWORD PTR _Tmp$[rsp], rax

; 60   :     _Left    = _STD move(_Right);

  00035	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 01	 mov	 QWORD PTR [rcx], rax

; 61   :     _Right   = _STD move(_Tmp);

  0004a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$move@AEAPEAVRGYLog@@@std@@YA$$QEAPEAVRGYLog@@AEAPEAV1@@Z ; std::move<RGYLog * &>
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 62   : }

  0005f	48 8b cc	 mov	 rcx, rsp
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z$rtcFrameData
  00069	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00072	5f		 pop	 rdi
  00073	c3		 ret	 0
??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ENDP	; std::swap<RGYLog *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001e	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0002d	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 30   :             if (_Count > _Max_possible) {

  00032	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0003c	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  00041	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00043	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  00048	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 36   : }

  0004e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00023	48 81 7c 24 38
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  0002c	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002e	48 8d 54 24 38	 lea	 rdx, QWORD PTR _Bytes$[rsp]
  00033	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Ptr$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
  0003d	90		 npad	 1
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Bytes$[rsp]
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00048	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0004d	90		 npad	 1

; 192  : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	48 81 7c 24 30
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00027	72 0c		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0002e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00033	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  00035	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Bytes$[rsp], 0
  0003b	74 0c		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00042	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00047	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  00049	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 322  :     _Obj.~_Ty();
; 323  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode0<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 321  :     static void _Freenode0(_Alnode& _Al, _Nodeptr _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 322  :         // destroy pointer members in _Ptr and deallocate with _Al
; 323  :         static_assert(is_same_v<typename _Alnode::value_type, _List_node>, "Bad _Freenode0 call");
; 324  :         _Destroy_in_place(_Ptr->_Next);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<mfxFrameAllocResponse,void *> *>
  00030	90		 npad	 1

; 325  :         _Destroy_in_place(_Ptr->_Prev);

  00031	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00036	48 83 c0 08	 add	 rax, 8
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<mfxFrameAllocResponse,void *> *>
  00042	90		 npad	 1

; 326  :         allocator_traits<_Alnode>::deallocate(_Al, _Ptr, 1);

  00043	41 b8 01 00 00
	00		 mov	 r8d, 1
  00049	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00053	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::deallocate
  00058	90		 npad	 1

; 327  :     }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode0<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Pnode$ = 32
_Pnext$1 = 40
_Al$ = 64
_Head$ = 72
??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<mfxFrameAllocResponse,void *>::_Free_non_head<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 337  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 338  :         _Head->_Prev->_Next = nullptr;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Head$[rsp]
  00028	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 339  : 
; 340  :         auto _Pnode = _Head->_Next;

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR _Head$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 20	 mov	 QWORD PTR _Pnode$[rsp], rax

; 341  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00040	eb 0a		 jmp	 SHORT $LN4@Free_non_h
$LN2@Free_non_h:
  00042	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR _Pnode$[rsp], rax
$LN4@Free_non_h:
  0004c	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Pnode$[rsp], 0
  00052	74 1e		 je	 SHORT $LN3@Free_non_h

; 342  :             _Pnext = _Pnode->_Next;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 44 24 28	 mov	 QWORD PTR _Pnext$1[rsp], rax

; 343  :             _Freenode(_Al, _Pnode);

  00061	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Al$[rsp]
  0006b	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >

; 344  :         }

  00070	eb d0		 jmp	 SHORT $LN2@Free_non_h
$LN3@Free_non_h:

; 345  :     }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<mfxFrameAllocResponse,void *>::_Free_non_head<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<mfxFrameAllocResponse,void *> *>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@AEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_List_node<mfxFrameAllocResponse,void *> * &>
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 01	 mov	 QWORD PTR [rcx], rax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode0<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 321  :     static void _Freenode0(_Alnode& _Al, _Nodeptr _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 322  :         // destroy pointer members in _Ptr and deallocate with _Al
; 323  :         static_assert(is_same_v<typename _Alnode::value_type, _List_node>, "Bad _Freenode0 call");
; 324  :         _Destroy_in_place(_Ptr->_Next);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
  00030	90		 npad	 1

; 325  :         _Destroy_in_place(_Ptr->_Prev);

  00031	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00036	48 83 c0 08	 add	 rax, 8
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@@Z ; std::_Destroy_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
  00042	90		 npad	 1

; 326  :         allocator_traits<_Alnode>::deallocate(_Al, _Ptr, 1);

  00043	41 b8 01 00 00
	00		 mov	 r8d, 1
  00049	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00053	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::deallocate
  00058	90		 npad	 1

; 327  :     }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode0<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAPEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ; std::addressof<std::_List_node<QSVAllocator::UniqueResponse,void *> *>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@AEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@YAAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@AEAPEAU10@@Z ; std::forward<std::_List_node<QSVAllocator::UniqueResponse,void *> * &>
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 89 01	 mov	 QWORD PTR [rcx], rax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z PROC ; std::addressof<QSVAllocator::UniqueResponse>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ENDP ; std::addressof<QSVAllocator::UniqueResponse>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00028	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  0002d	48 8b d0	 mov	 rdx, rax
  00030	b9 10 00 00 00	 mov	 ecx, 16
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003a	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00044	e8 00 00 00 00	 call	 ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
  00049	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00051	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 294  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 295  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 294  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 295  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1382 :     ~_Container_proxy_ptr12() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1383 :         if (_Ptr) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 16		 je	 SHORT $LN2@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1385 :         }
; 1386 :     }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00032	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00040	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00052	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  0005a	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
  0005f	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00064	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00071	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1372 :         _Mycont._Myproxy = _Ptr;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR _Mycont$[rsp]
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00080	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00083	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1373 :     }

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008f	5f		 pop	 rdi
  00090	c3		 ret	 0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z PROC		; std::_Min_value<unsigned __int64>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 26   :     return _Right < _Left ? _Right : _Left;

  00023	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Left$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	73 0c		 jae	 SHORT $LN3@Min_value
  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
  0003f	eb 0a		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00046	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
$LN4@Min_value:
  0004b	48 8b 44 24 08	 mov	 rax, QWORD PTR tv65[rsp]
  00050	48 89 04 24	 mov	 QWORD PTR $T1[rsp], rax
  00054	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]

; 27   : }

  00058	48 83 c4 10	 add	 rsp, 16
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ENDP		; std::_Min_value<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1><>, COMDAT

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocator<std::_List_node<mfxFrameAllocResponse,void *> >
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>, COMDAT

; 950  :     _Nodeptr _Emplace(const _Nodeptr _Where, _Valty&&... _Val) { // insert element at _Where

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 951  :         size_type& _Mysize = _Mypair._Myval2._Mysize;

  0002b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 89 44 24 20	 mov	 QWORD PTR _Mysize$[rsp], rax

; 952  :         if (_Mysize == max_size()) {

  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::max_size
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mysize$[rsp]
  0004e	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00051	75 0c		 jne	 SHORT $LN2@Emplace

; 953  :             _Xlength_error("list<T> too long");

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@
  0005a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Emplace:

; 954  :         }
; 955  : 
; 956  :         _List_node_emplace_op2<_Alnode> _Op{_Getal(), _STD forward<_Valty>(_Val)...};

  0005f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  0006c	48 89 44 24 60	 mov	 QWORD PTR tv80[rsp], rax
  00071	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR <_Val_0>$[rsp]
  00079	e8 00 00 00 00	 call	 ??$forward@UmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::forward<mfxFrameAllocResponse>
  0007e	48 89 44 24 68	 mov	 QWORD PTR tv82[rsp], rax
  00083	4c 8b 44 24 68	 mov	 r8, QWORD PTR tv82[rsp]
  00088	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv80[rsp]
  0008d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  00092	e8 00 00 00 00	 call	 ??$?0UmfxFrameAllocResponse@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@$$QEAUmfxFrameAllocResponse@@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > ><mfxFrameAllocResponse>
  00097	90		 npad	 1

; 957  :         ++_Mysize;

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR _Mysize$[rsp]
  0009d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a0	48 ff c0	 inc	 rax
  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mysize$[rsp]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 958  :         return _Op._Transfer_before(_Where);

  000ab	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Where$[rsp]
  000b3	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  000b8	e8 00 00 00 00	 call	 ?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::_Transfer_before
  000bd	48 89 44 24 58	 mov	 QWORD PTR $T4[rsp], rax
  000c2	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  000c7	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  000cc	48 8b 44 24 58	 mov	 rax, QWORD PTR $T4[rsp]

; 959  :     }

  000d1	48 8b f8	 mov	 rdi, rax
  000d4	48 8b cc	 mov	 rcx, rsp
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z$rtcFrameData
  000de	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e3	48 8b c7	 mov	 rax, rdi
  000e6	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000ea	5f		 pop	 rdi
  000eb	c3		 ret	 0
$LN5@Emplace:
??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Op$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Op$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z PROC ; std::move<mfxFrameAllocResponse &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ENDP ; std::move<mfxFrameAllocResponse &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<mfxFrameAllocResponse,void *> >, COMDAT

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<mfxFrameAllocResponse,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >, COMDAT

; 330  :     static void _Freenode(_Alnode& _Al, _Nodeptr _Ptr) noexcept { // destroy all members in _Ptr and deallocate with _Al

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 331  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 83 c0 10	 add	 rax, 16
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ??$addressof@UmfxFrameAllocResponse@@@std@@YAPEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::addressof<mfxFrameAllocResponse>
  00034	90		 npad	 1
  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@UmfxFrameAllocResponse@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@QEAUmfxFrameAllocResponse@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::destroy<mfxFrameAllocResponse>
  00042	90		 npad	 1

; 332  :         _Freenode0(_Al, _Ptr);

  00043	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0004d	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode0<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
  00052	90		 npad	 1

; 333  :     }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1><>, COMDAT

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z
_TEXT	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>, COMDAT

; 950  :     _Nodeptr _Emplace(const _Nodeptr _Where, _Valty&&... _Val) { // insert element at _Where

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 951  :         size_type& _Mysize = _Mypair._Myval2._Mysize;

  0002b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 89 44 24 20	 mov	 QWORD PTR _Mysize$[rsp], rax

; 952  :         if (_Mysize == max_size()) {

  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::max_size
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mysize$[rsp]
  0004e	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00051	75 0c		 jne	 SHORT $LN2@Emplace

; 953  :             _Xlength_error("list<T> too long");

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@
  0005a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Emplace:

; 954  :         }
; 955  : 
; 956  :         _List_node_emplace_op2<_Alnode> _Op{_Getal(), _STD forward<_Valty>(_Val)...};

  0005f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  0006c	48 89 44 24 60	 mov	 QWORD PTR tv80[rsp], rax
  00071	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR <_Val_0>$[rsp]
  00079	e8 00 00 00 00	 call	 ??$forward@UUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::forward<QSVAllocator::UniqueResponse>
  0007e	48 89 44 24 68	 mov	 QWORD PTR tv82[rsp], rax
  00083	4c 8b 44 24 68	 mov	 r8, QWORD PTR tv82[rsp]
  00088	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv80[rsp]
  0008d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  00092	e8 00 00 00 00	 call	 ??$?0UUniqueResponse@QSVAllocator@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > ><QSVAllocator::UniqueResponse>
  00097	90		 npad	 1

; 957  :         ++_Mysize;

  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR _Mysize$[rsp]
  0009d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a0	48 ff c0	 inc	 rax
  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mysize$[rsp]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 958  :         return _Op._Transfer_before(_Where);

  000ab	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Where$[rsp]
  000b3	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  000b8	e8 00 00 00 00	 call	 ?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@QEAU32@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::_Transfer_before
  000bd	48 89 44 24 58	 mov	 QWORD PTR $T4[rsp], rax
  000c2	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Op$[rsp]
  000c7	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  000cc	48 8b 44 24 58	 mov	 rax, QWORD PTR $T4[rsp]

; 959  :     }

  000d1	48 8b f8	 mov	 rdi, rax
  000d4	48 8b cc	 mov	 rcx, rsp
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z$rtcFrameData
  000de	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e3	48 8b c7	 mov	 rax, rdi
  000e6	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000ea	5f		 pop	 rdi
  000eb	c3		 ret	 0
$LN5@Emplace:
??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Op$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Mysize$ = 32
_Op$ = 56
$T4 = 88
tv80 = 96
tv82 = 104
this$ = 128
_Where$ = 136
<_Val_0>$ = 144
?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Op$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@QEAA@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z PROC ; std::move<QSVAllocator::UniqueResponse &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1434 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ENDP ; std::move<QSVAllocator::UniqueResponse &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<QSVAllocator::UniqueResponse,void *> >, COMDAT

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<QSVAllocator::UniqueResponse,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 330  :     static void _Freenode(_Alnode& _Al, _Nodeptr _Ptr) noexcept { // destroy all members in _Ptr and deallocate with _Al

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 331  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 83 c0 10	 add	 rax, 16
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::addressof<QSVAllocator::UniqueResponse>
  00034	90		 npad	 1
  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$destroy@UUniqueResponse@QSVAllocator@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@QEAUUniqueResponse@QSVAllocator@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::destroy<QSVAllocator::UniqueResponse>
  00042	90		 npad	 1

; 332  :         _Freenode0(_Al, _Ptr);

  00043	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0004d	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode0<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
  00052	90		 npad	 1

; 333  :     }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 280  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 281  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z
_TEXT	SEGMENT
_Pnode$ = 32
_Pnext$1 = 40
_Al$ = 64
_Head$ = 72
??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z PROC ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Free_non_head<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >, COMDAT

; 337  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 338  :         _Head->_Prev->_Next = nullptr;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Head$[rsp]
  00028	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 339  : 
; 340  :         auto _Pnode = _Head->_Next;

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR _Head$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 20	 mov	 QWORD PTR _Pnode$[rsp], rax

; 341  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00040	eb 0a		 jmp	 SHORT $LN4@Free_non_h
$LN2@Free_non_h:
  00042	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR _Pnode$[rsp], rax
$LN4@Free_non_h:
  0004c	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Pnode$[rsp], 0
  00052	74 1e		 je	 SHORT $LN3@Free_non_h

; 342  :             _Pnext = _Pnode->_Next;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 89 44 24 28	 mov	 QWORD PTR _Pnext$1[rsp], rax

; 343  :             _Freenode(_Al, _Pnode);

  00061	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Al$[rsp]
  0006b	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >

; 344  :         }

  00070	eb d0		 jmp	 SHORT $LN2@Free_non_h
$LN3@Free_non_h:

; 345  :     }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ENDP ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Free_non_head<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 1114 : }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 872  :     }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z
_TEXT	SEGMENT
_Val$ = 48
?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z PROC ; std::pointer_traits<QSVAllocator::UniqueResponse *>::pointer_to, COMDAT

; 299  :     _NODISCARD static pointer pointer_to(_Reftype _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 300  :         return _STD addressof(_Val);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Val$[rsp]
  00023	e8 00 00 00 00	 call	 ??$addressof@UUniqueResponse@QSVAllocator@@@std@@YAPEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::addressof<QSVAllocator::UniqueResponse>

; 301  :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z ENDP ; std::pointer_traits<QSVAllocator::UniqueResponse *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
_TEXT	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z PROC ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >, COMDAT

; 138  : _NODISCARD _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) { // find first satisfying _Pred

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR $T5[rsp], 0

; 139  :     _Adl_verify_range(_First, _Last);

  00035	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0003d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  00042	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >

; 140  :     auto _UFirst      = _Get_unwrapped(_First);

  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  0004c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  00051	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,0>

; 141  :     const auto _ULast = _Get_unwrapped(_Last);

  00056	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0005e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _ULast$[rsp]
  00063	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,0>

; 142  :     for (; _UFirst != _ULast; ++_UFirst) {

  00068	eb 0a		 jmp	 SHORT $LN4@find_if
$LN2@find_if:
  0006a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0006f	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
$LN4@find_if:
  00074	48 8d 54 24 48	 lea	 rdx, QWORD PTR _ULast$[rsp]
  00079	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0007e	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base0>::operator!=
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	74 25		 je	 SHORT $LN3@find_if

; 143  :         if (_Pred(*_UFirst)) {

  0008a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0008f	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Pred$[rsp]
  0009f	e8 00 00 00 00	 call	 ??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::operator()
  000a4	0f b6 c0	 movzx	 eax, al
  000a7	85 c0		 test	 eax, eax
  000a9	74 02		 je	 SHORT $LN5@find_if

; 144  :             break;

  000ab	eb 02		 jmp	 SHORT $LN3@find_if
$LN5@find_if:

; 145  :         }
; 146  :     }

  000ad	eb bb		 jmp	 SHORT $LN2@find_if
$LN3@find_if:

; 147  : 
; 148  :     _Seek_wrapped(_First, _UFirst);

  000af	48 8d 54 24 28	 lea	 rdx, QWORD PTR _UFirst$[rsp]
  000b4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000b9	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@@Z ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > > >

; 149  :     return _First;

  000be	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  000c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000c8	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  000cd	8b 44 24 54	 mov	 eax, DWORD PTR $T5[rsp]
  000d1	83 c8 01	 or	 eax, 1
  000d4	89 44 24 54	 mov	 DWORD PTR $T5[rsp], eax
  000d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000dd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  000e2	90		 npad	 1
  000e3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Last$[rsp]
  000eb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  000f0	48 8b 44 24 70	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 150  : }

  000f5	48 8b f8	 mov	 rdi, rax
  000f8	48 8b cc	 mov	 rcx, rsp
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcFrameData
  00102	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00107	48 8b c7	 mov	 rax, rdi
  0010a	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
  00110	cc		 int	 3
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z ENDP ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Unwrapped, COMDAT

; 284  :     _NODISCARD _List_unchecked_iterator<_Mylist> _Unwrapped() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 285  :         return _List_unchecked_iterator<_Mylist>(this->_Ptr, static_cast<const _Mylist*>(this->_Getcont()));

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	4c 8b c0	 mov	 r8, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00039	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0003e	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 286  :     }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 48
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--, COMDAT

; 271  :     _List_iterator& operator--() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 272  :         _Mybase::operator--();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--

; 273  :         return *this;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 274  :     }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++, COMDAT

; 265  :     _List_iterator operator++(int) {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR $T4[rsp], 0

; 266  :         _List_iterator _Tmp = *this;

  00030	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  00035	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0003a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  0003f	90		 npad	 1

; 267  :         _Mybase::operator++();

  00040	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++

; 268  :         return _Tmp;

  0004a	48 8d 54 24 28	 lea	 rdx, QWORD PTR _Tmp$[rsp]
  0004f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00054	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  00059	8b 44 24 44	 mov	 eax, DWORD PTR $T4[rsp]
  0005d	83 c8 01	 or	 eax, 1
  00060	89 44 24 44	 mov	 DWORD PTR $T4[rsp], eax
  00064	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  00069	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0006e	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 269  :     }

  00073	48 8b f8	 mov	 rdi, rax
  00076	48 8b cc	 mov	 rcx, rsp
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcFrameData
  00080	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00085	48 8b c7	 mov	 rax, rdi
  00088	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
  0008e	cc		 int	 3
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Tmp$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 44	 mov	 eax, DWORD PTR $T4[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN5@dtor$1
  0001d	83 65 44 fe	 and	 DWORD PTR $T4[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN5@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Tmp$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 44	 mov	 eax, DWORD PTR $T4[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN5@dtor$1
  0001d	83 65 44 fe	 and	 DWORD PTR $T4[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN5@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*, COMDAT

; 252  :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 253  :         return const_cast<reference>(_Mybase::operator*());

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*

; 254  :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT

; 248  :     _List_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 249  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  0003c	90		 npad	 1

; 250  :     }

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
this$ = 16
_It$ = 24
?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Seek_to, COMDAT

; 227  :     void _Seek_to(const _List_unchecked_const_iterator<_Mylist> _It) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 228  :         this->_Ptr = _It._Ptr;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _It$[rsp]
  00015	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 229  :     }

  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
tv69 = 48
_First$ = 80
_Last$ = 88
?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z PROC ; std::_Verify_range, COMDAT

; 216  :     friend void _Verify_range(const _List_const_iterator& _First, const _List_const_iterator& _Last) {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
$LN4@Verify_ran:

; 217  :         _STL_VERIFY(_First._Getcont() == _Last._Getcont(), "list iterators in range are from different containers");

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Last$[rsp]
  00037	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv69[rsp]
  00041	48 3b c8	 cmp	 rcx, rax
  00044	75 02		 jne	 SHORT $LN8@Verify_ran
  00046	eb 6b		 jmp	 SHORT $LN9@Verify_ran
$LN8@Verify_ran:
$LN7@Verify_ran:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@GAGDEJEE@list?5iterators?5in?5range?5are?5fro@
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	45 33 c9	 xor	 r9d, r9d
  00063	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 03		 jne	 SHORT $LN11@Verify_ran
  00080	cc		 int	 3
  00081	33 c0		 xor	 eax, eax
$LN11@Verify_ran:
  00083	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008c	41 b9 d9 00 00
	00		 mov	 r9d, 217		; 000000d9H
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@KAMKPLHN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 95		 jne	 SHORT $LN7@Verify_ran
$LN9@Verify_ran:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 66 ff ff
	ff		 jne	 $LN4@Verify_ran

; 218  :     }

  000bd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@1@0@Z ENDP ; std::_Verify_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Right$ = 72
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator!=, COMDAT

; 211  :     _NODISCARD bool operator!=(const _List_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 212  :         return !(*this == _Right);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator==
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 0a		 jne	 SHORT $LN3@operator
  00039	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 213  :     }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 48
tv136 = 56
this$ = 80
_Right$ = 88
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator==, COMDAT

; 203  :     _NODISCARD bool operator==(const _List_const_iterator& _Right) const {

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
$LN4@operator:

; 204  : #if _ITERATOR_DEBUG_LEVEL == 2
; 205  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "list iterators incompatible");

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00037	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv69[rsp]
  00041	48 3b c8	 cmp	 rcx, rax
  00044	75 02		 jne	 SHORT $LN8@operator
  00046	eb 6b		 jmp	 SHORT $LN9@operator
$LN8@operator:
$LN7@operator:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	45 33 c9	 xor	 r9d, r9d
  00063	41 b8 cd 00 00
	00		 mov	 r8d, 205		; 000000cdH
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 03		 jne	 SHORT $LN11@operator
  00080	cc		 int	 3
  00081	33 c0		 xor	 eax, eax
$LN11@operator:
  00083	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008c	41 b9 cd 00 00
	00		 mov	 r9d, 205		; 000000cdH
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@BDINIFNN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 66 ff ff
	ff		 jne	 $LN4@operator

; 206  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 207  : 
; 208  :         return this->_Ptr == _Right._Ptr;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000c2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000c7	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000cb	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000cf	75 0a		 jne	 SHORT $LN12@operator
  000d1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN13@operator
$LN12@operator:
  000db	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN13@operator:
  000e3	0f b6 44 24 38	 movzx	 eax, BYTE PTR tv136[rsp]

; 209  :     }

  000e8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
_New_ptr$ = 48
_Mycont$ = 56
this$ = 80
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--, COMDAT

; 185  :     _List_const_iterator& operator--() {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 186  :         const auto _New_ptr = this->_Ptr->_Prev;

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002b	48 89 44 24 30	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 187  : #if _ITERATOR_DEBUG_LEVEL == 2
; 188  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003a	48 89 44 24 38	 mov	 QWORD PTR _Mycont$[rsp], rax
$LN4@operator:

; 189  :         _STL_ASSERT(_Mycont, "cannot decrement value-initialized list iterator");

  0003f	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Mycont$[rsp], 0
  00045	74 02		 je	 SHORT $LN14@operator
  00047	eb 6b		 jmp	 SHORT $LN15@operator
$LN14@operator:
$LN7@operator:
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DB@MCPEHPCC@cannot?5decrement?5value?9initiali@
  00050	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	45 33 c9	 xor	 r9d, r9d
  00064	41 b8 bd 00 00
	00		 mov	 r8d, 189		; 000000bdH
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00071	b9 02 00 00 00	 mov	 ecx, 2
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	75 03		 jne	 SHORT $LN19@operator
  00081	cc		 int	 3
  00082	33 c0		 xor	 eax, eax
$LN19@operator:
  00084	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008d	41 b9 bd 00 00
	00		 mov	 r9d, 189		; 000000bdH
  00093	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@EAECNANJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GG@FLDKPFOH@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ae	33 c0		 xor	 eax, eax
  000b0	85 c0		 test	 eax, eax
  000b2	75 95		 jne	 SHORT $LN7@operator
$LN15@operator:
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 85		 jne	 SHORT $LN4@operator
$LN10@operator:

; 190  :         _STL_VERIFY(_New_ptr != _Mycont->_Myhead, "cannot decrement begin list iterator");

  000ba	48 8b 44 24 38	 mov	 rax, QWORD PTR _Mycont$[rsp]
  000bf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c3	48 39 44 24 30	 cmp	 QWORD PTR _New_ptr$[rsp], rax
  000c8	74 02		 je	 SHORT $LN16@operator
  000ca	eb 6b		 jmp	 SHORT $LN17@operator
$LN16@operator:
$LN13@operator:
  000cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CF@BAAFPBMN@cannot?5decrement?5begin?5list?5ite@
  000d3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e4	45 33 c9	 xor	 r9d, r9d
  000e7	41 b8 be 00 00
	00		 mov	 r8d, 190		; 000000beH
  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000f4	b9 02 00 00 00	 mov	 ecx, 2
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000ff	83 f8 01	 cmp	 eax, 1
  00102	75 03		 jne	 SHORT $LN20@operator
  00104	cc		 int	 3
  00105	33 c0		 xor	 eax, eax
$LN20@operator:
  00107	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00110	41 b9 be 00 00
	00		 mov	 r9d, 190		; 000000beH
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@EAECNANJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@PPPLIDNC@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe@
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00131	33 c0		 xor	 eax, eax
  00133	85 c0		 test	 eax, eax
  00135	75 95		 jne	 SHORT $LN13@operator
$LN17@operator:
  00137	33 c0		 xor	 eax, eax
  00139	85 c0		 test	 eax, eax
  0013b	0f 85 79 ff ff
	ff		 jne	 $LN10@operator

; 191  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 192  : 
; 193  :         this->_Ptr = _New_ptr;

  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00146	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0014b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 194  :         return *this;

  0014f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 195  :     }

  00154	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00158	5f		 pop	 rdi
  00159	c3		 ret	 0
??F?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
_Mycont$ = 48
this$ = 80
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++, COMDAT

; 168  :     _List_const_iterator& operator++() {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 169  : #if _ITERATOR_DEBUG_LEVEL == 2
; 170  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00028	48 89 44 24 30	 mov	 QWORD PTR _Mycont$[rsp], rax
$LN4@operator:

; 171  :         _STL_ASSERT(_Mycont, "cannot increment value-initialized list iterator");

  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Mycont$[rsp], 0
  00033	74 02		 je	 SHORT $LN14@operator
  00035	eb 6b		 jmp	 SHORT $LN15@operator
$LN14@operator:
$LN7@operator:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@
  0003e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 03		 jne	 SHORT $LN19@operator
  0006f	cc		 int	 3
  00070	33 c0		 xor	 eax, eax
$LN19@operator:
  00072	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0007b	41 b9 ab 00 00
	00		 mov	 r9d, 171		; 000000abH
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@LDHAGMBI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0009c	33 c0		 xor	 eax, eax
  0009e	85 c0		 test	 eax, eax
  000a0	75 95		 jne	 SHORT $LN7@operator
$LN15@operator:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 85		 jne	 SHORT $LN4@operator
$LN10@operator:

; 172  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot increment end list iterator");

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ba	74 02		 je	 SHORT $LN16@operator
  000bc	eb 6b		 jmp	 SHORT $LN17@operator
$LN16@operator:
$LN13@operator:
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@
  000c5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e6	b9 02 00 00 00	 mov	 ecx, 2
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	75 03		 jne	 SHORT $LN20@operator
  000f6	cc		 int	 3
  000f7	33 c0		 xor	 eax, eax
$LN20@operator:
  000f9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00102	41 b9 ac 00 00
	00		 mov	 r9d, 172		; 000000acH
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@LDHAGMBI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 95		 jne	 SHORT $LN13@operator
$LN17@operator:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 75 ff ff
	ff		 jne	 $LN10@operator

; 173  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 174  : 
; 175  :         this->_Ptr = this->_Ptr->_Next;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00138	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00141	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00144	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 176  :         return *this;

  00148	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 177  :     }

  0014d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00151	5f		 pop	 rdi
  00152	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ
_TEXT	SEGMENT
_Mycont$ = 48
this$ = 80
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*, COMDAT

; 154  :     _NODISCARD reference operator*() const {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 155  : #if _ITERATOR_DEBUG_LEVEL == 2
; 156  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00028	48 89 44 24 30	 mov	 QWORD PTR _Mycont$[rsp], rax
$LN4@operator:

; 157  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized list iterator");

  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Mycont$[rsp], 0
  00033	74 02		 je	 SHORT $LN14@operator
  00035	eb 6b		 jmp	 SHORT $LN15@operator
$LN14@operator:
$LN7@operator:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@
  0003e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	41 b8 9d 00 00
	00		 mov	 r8d, 157		; 0000009dH
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 03		 jne	 SHORT $LN19@operator
  0006f	cc		 int	 3
  00070	33 c0		 xor	 eax, eax
$LN19@operator:
  00072	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0007b	41 b9 9d 00 00
	00		 mov	 r9d, 157		; 0000009dH
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PI@LEDFCHND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0009c	33 c0		 xor	 eax, eax
  0009e	85 c0		 test	 eax, eax
  000a0	75 95		 jne	 SHORT $LN7@operator
$LN15@operator:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 85		 jne	 SHORT $LN4@operator
$LN10@operator:

; 158  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end list iterator");

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ba	74 02		 je	 SHORT $LN16@operator
  000bc	eb 6b		 jmp	 SHORT $LN17@operator
$LN16@operator:
$LN13@operator:
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@
  000c5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 9e 00 00
	00		 mov	 r8d, 158		; 0000009eH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e6	b9 02 00 00 00	 mov	 ecx, 2
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	75 03		 jne	 SHORT $LN20@operator
  000f6	cc		 int	 3
  000f7	33 c0		 xor	 eax, eax
$LN20@operator:
  000f9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00102	41 b9 9e 00 00
	00		 mov	 r9d, 158		; 0000009eH
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PI@LEDFCHND@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 95		 jne	 SHORT $LN13@operator
$LN17@operator:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 75 ff ff
	ff		 jne	 $LN10@operator

; 159  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 160  : 
; 161  :         return this->_Ptr->_Myval;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00138	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013c	48 83 c0 10	 add	 rax, 16

; 162  :     }

  00140	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00144	5f		 pop	 rdi
  00145	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEBUmfxFrameAllocResponse@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >, COMDAT

; 150  :     _List_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 151  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
  0003c	90		 npad	 1

; 152  :     }

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@AEBU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00041	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@AEBU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00041	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>, COMDAT

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  0003d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 38   :         this->_Adopt(_Plist);

  00041	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Plist$[rsp]
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
  00050	90		 npad	 1

; 39   :     }

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z
_TEXT	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z PROC ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >, COMDAT

; 138  : _NODISCARD _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) { // find first satisfying _Pred

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR $T5[rsp], 0

; 139  :     _Adl_verify_range(_First, _Last);

  00035	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0003d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  00042	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >

; 140  :     auto _UFirst      = _Get_unwrapped(_First);

  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  0004c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  00051	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>

; 141  :     const auto _ULast = _Get_unwrapped(_Last);

  00056	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0005e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _ULast$[rsp]
  00063	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>

; 142  :     for (; _UFirst != _ULast; ++_UFirst) {

  00068	eb 0a		 jmp	 SHORT $LN4@find_if
$LN2@find_if:
  0006a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0006f	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
$LN4@find_if:
  00074	48 8d 54 24 48	 lea	 rdx, QWORD PTR _ULast$[rsp]
  00079	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0007e	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator!=
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	74 25		 je	 SHORT $LN3@find_if

; 143  :         if (_Pred(*_UFirst)) {

  0008a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0008f	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Pred$[rsp]
  0009f	e8 00 00 00 00	 call	 ??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::operator()
  000a4	0f b6 c0	 movzx	 eax, al
  000a7	85 c0		 test	 eax, eax
  000a9	74 02		 je	 SHORT $LN5@find_if

; 144  :             break;

  000ab	eb 02		 jmp	 SHORT $LN3@find_if
$LN5@find_if:

; 145  :         }
; 146  :     }

  000ad	eb bb		 jmp	 SHORT $LN2@find_if
$LN3@find_if:

; 147  : 
; 148  :     _Seek_wrapped(_First, _UFirst);

  000af	48 8d 54 24 28	 lea	 rdx, QWORD PTR _UFirst$[rsp]
  000b4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000b9	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >

; 149  :     return _First;

  000be	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  000c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000c8	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  000cd	8b 44 24 54	 mov	 eax, DWORD PTR $T5[rsp]
  000d1	83 c8 01	 or	 eax, 1
  000d4	89 44 24 54	 mov	 DWORD PTR $T5[rsp], eax
  000d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000dd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000e2	90		 npad	 1
  000e3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Last$[rsp]
  000eb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000f0	48 8b 44 24 70	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 150  : }

  000f5	48 8b f8	 mov	 rdi, rax
  000f8	48 8b cc	 mov	 rcx, rsp
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z$rtcFrameData
  00102	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00107	48 8b c7	 mov	 rax, rdi
  0010a	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
  00110	cc		 int	 3
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z ENDP ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
;	COMDAT ??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
this$ = 16
<response>$ = 24
??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z PROC ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::<lambda_165c5b987e3af5787a0fe9ef2e83e952>, COMDAT

; 159  :     };

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR <response>$[rsp]
  00015	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z ENDP ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::<lambda_165c5b987e3af5787a0fe9ef2e83e952>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
;	COMDAT ??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
tv83 = 0
this$ = 32
r$ = 40
??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z PROC ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::operator(), COMDAT

; 157  :     auto compare_response = [response](const mfxFrameAllocResponse & r) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 158  :         return r.mids != 0 && response->mids != 0 && r.mids[0] == response->mids[0] && r.NumFrameActual == response->NumFrameActual;

  00023	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00028	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0002d	74 63		 je	 SHORT $LN3@operator
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0003c	74 54		 je	 SHORT $LN3@operator
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  0004c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00050	48 8b 54 24 20	 mov	 rdx, QWORD PTR this$[rsp]
  00055	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00058	41 b8 08 00 00
	00		 mov	 r8d, 8
  0005e	4d 6b c0 00	 imul	 r8, r8, 0
  00062	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00066	49 8b 14 10	 mov	 rdx, QWORD PTR [r8+rdx]
  0006a	48 39 14 08	 cmp	 QWORD PTR [rax+rcx], rdx
  0006e	75 22		 jne	 SHORT $LN3@operator
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00075	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00079	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0007e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00081	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00085	3b c1		 cmp	 eax, ecx
  00087	75 09		 jne	 SHORT $LN3@operator
  00089	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv83[rsp], 1
  00090	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00092	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv83[rsp], 0
$LN4@operator:
  00099	0f b6 04 24	 movzx	 eax, BYTE PTR tv83[rsp]

; 159  :     };

  0009d	48 83 c4 10	 add	 rsp, 16
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
??R<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEBA_NAEBUmfxFrameAllocResponse@@@Z ENDP ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z
_TEXT	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z PROC ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>, COMDAT

; 138  : _NODISCARD _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) { // find first satisfying _Pred

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR $T5[rsp], 0

; 139  :     _Adl_verify_range(_First, _Last);

  00035	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0003d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  00042	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >

; 140  :     auto _UFirst      = _Get_unwrapped(_First);

  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  0004c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  00051	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>

; 141  :     const auto _ULast = _Get_unwrapped(_Last);

  00056	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Last$[rsp]
  0005e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _ULast$[rsp]
  00063	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@$0A@@std@@YA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,0>

; 142  :     for (; _UFirst != _ULast; ++_UFirst) {

  00068	eb 0a		 jmp	 SHORT $LN4@find_if
$LN2@find_if:
  0006a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0006f	e8 00 00 00 00	 call	 ??E?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
$LN4@find_if:
  00074	48 8d 54 24 48	 lea	 rdx, QWORD PTR _ULast$[rsp]
  00079	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0007e	e8 00 00 00 00	 call	 ??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base0>::operator!=
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	74 25		 je	 SHORT $LN3@find_if

; 143  :         if (_Pred(*_UFirst)) {

  0008a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  0008f	e8 00 00 00 00	 call	 ??D?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
  00094	48 8b d0	 mov	 rdx, rax
  00097	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0009f	e8 00 00 00 00	 call	 ??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z ; QSVAllocator::UniqueResponse::operator()
  000a4	0f b6 c0	 movzx	 eax, al
  000a7	85 c0		 test	 eax, eax
  000a9	74 02		 je	 SHORT $LN5@find_if

; 144  :             break;

  000ab	eb 02		 jmp	 SHORT $LN3@find_if
$LN5@find_if:

; 145  :         }
; 146  :     }

  000ad	eb bb		 jmp	 SHORT $LN2@find_if
$LN3@find_if:

; 147  : 
; 148  :     _Seek_wrapped(_First, _UFirst);

  000af	48 8d 54 24 28	 lea	 rdx, QWORD PTR _UFirst$[rsp]
  000b4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000b9	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@std@@YAXAEAV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@AEBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@@Z ; std::_Seek_wrapped<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > > >

; 149  :     return _First;

  000be	48 8b 54 24 78	 mov	 rdx, QWORD PTR _First$[rsp]
  000c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000c8	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  000cd	8b 44 24 54	 mov	 eax, DWORD PTR $T5[rsp]
  000d1	83 c8 01	 or	 eax, 1
  000d4	89 44 24 54	 mov	 DWORD PTR $T5[rsp], eax
  000d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _First$[rsp]
  000dd	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000e2	90		 npad	 1
  000e3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Last$[rsp]
  000eb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000f0	48 8b 44 24 70	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 150  : }

  000f5	48 8b f8	 mov	 rdi, rax
  000f8	48 8b cc	 mov	 rcx, rsp
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z$rtcFrameData
  00102	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00107	48 8b c7	 mov	 rax, rdi
  0010a	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0010e	5f		 pop	 rdi
  0010f	c3		 ret	 0
  00110	cc		 int	 3
??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z ENDP ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Last$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR _First$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 40
_ULast$ = 72
$T5 = 84
__$ReturnUdt$ = 112
_First$ = 120
_Last$ = 128
_Pred$ = 136
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA PROC ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 54	 mov	 eax, DWORD PTR $T5[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN10@dtor$2
  0001d	83 65 54 fe	 and	 DWORD PTR $T5[rbp], -2
  00021	48 8b 4d 70	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN10@dtor$2:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$2@?0???$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z@4HA ENDP ; `std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Unwrapped, COMDAT

; 284  :     _NODISCARD _List_unchecked_iterator<_Mylist> _Unwrapped() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 285  :         return _List_unchecked_iterator<_Mylist>(this->_Ptr, static_cast<const _Mylist*>(this->_Getcont()));

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	4c 8b c0	 mov	 r8, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00039	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0003e	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 286  :     }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?_Unwrapped@?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z
_TEXT	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++, COMDAT

; 265  :     _List_iterator operator++(int) {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR $T4[rsp], 0

; 266  :         _List_iterator _Tmp = *this;

  00030	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  00035	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0003a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  0003f	90		 npad	 1

; 267  :         _Mybase::operator++();

  00040	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++

; 268  :         return _Tmp;

  0004a	48 8d 54 24 28	 lea	 rdx, QWORD PTR _Tmp$[rsp]
  0004f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00054	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
  00059	8b 44 24 44	 mov	 eax, DWORD PTR $T4[rsp]
  0005d	83 c8 01	 or	 eax, 1
  00060	89 44 24 44	 mov	 DWORD PTR $T4[rsp], eax
  00064	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  00069	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0006e	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 269  :     }

  00073	48 8b f8	 mov	 rdi, rax
  00076	48 8b cc	 mov	 rcx, rsp
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z$rtcFrameData
  00080	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00085	48 8b c7	 mov	 rax, rdi
  00088	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0008c	5f		 pop	 rdi
  0008d	c3		 ret	 0
  0008e	cc		 int	 3
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Tmp$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 44	 mov	 eax, DWORD PTR $T4[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN5@dtor$1
  0001d	83 65 44 fe	 and	 DWORD PTR $T4[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN5@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Tmp$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tmp$ = 40
$T4 = 68
this$ = 96
__$ReturnUdt$ = 104
__formal$ = 112
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 44	 mov	 eax, DWORD PTR $T4[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN5@dtor$1
  0001d	83 65 44 fe	 and	 DWORD PTR $T4[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN5@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0???E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ
_TEXT	SEGMENT
this$ = 48
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->, COMDAT

; 256  :     _NODISCARD pointer operator->() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 257  :         return pointer_traits<pointer>::pointer_to(**this);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAUUniqueResponse@QSVAllocator@@@std@@SAPEAUUniqueResponse@QSVAllocator@@AEAU34@@Z ; std::pointer_traits<QSVAllocator::UniqueResponse *>::pointer_to

; 258  :     }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ
_TEXT	SEGMENT
this$ = 48
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*, COMDAT

; 252  :     _NODISCARD reference operator*() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 253  :         return const_cast<reference>(_Mybase::operator*());

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*

; 254  :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT

; 248  :     _List_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 249  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  0003c	90		 npad	 1

; 250  :     }

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
this$ = 16
_It$ = 24
?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Seek_to, COMDAT

; 227  :     void _Seek_to(const _List_unchecked_const_iterator<_Mylist> _It) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 228  :         this->_Ptr = _It._Ptr;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _It$[rsp]
  00015	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 229  :     }

  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
?_Seek_to@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
tv69 = 48
_First$ = 80
_Last$ = 88
?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z PROC ; std::_Verify_range, COMDAT

; 216  :     friend void _Verify_range(const _List_const_iterator& _First, const _List_const_iterator& _Last) {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
$LN4@Verify_ran:

; 217  :         _STL_VERIFY(_First._Getcont() == _Last._Getcont(), "list iterators in range are from different containers");

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Last$[rsp]
  00037	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv69[rsp]
  00041	48 3b c8	 cmp	 rcx, rax
  00044	75 02		 jne	 SHORT $LN8@Verify_ran
  00046	eb 6b		 jmp	 SHORT $LN9@Verify_ran
$LN8@Verify_ran:
$LN7@Verify_ran:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@GAGDEJEE@list?5iterators?5in?5range?5are?5fro@
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	45 33 c9	 xor	 r9d, r9d
  00063	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 03		 jne	 SHORT $LN11@Verify_ran
  00080	cc		 int	 3
  00081	33 c0		 xor	 eax, eax
$LN11@Verify_ran:
  00083	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008c	41 b9 d9 00 00
	00		 mov	 r9d, 217		; 000000d9H
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@KAMKPLHN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 95		 jne	 SHORT $LN7@Verify_ran
$LN9@Verify_ran:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 66 ff ff
	ff		 jne	 $LN4@Verify_ran

; 218  :     }

  000bd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000c1	5f		 pop	 rdi
  000c2	c3		 ret	 0
?_Verify_range@std@@YAXAEBV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@1@0@Z ENDP ; std::_Verify_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Right$ = 72
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=, COMDAT

; 211  :     _NODISCARD bool operator!=(const _List_const_iterator& _Right) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 212  :         return !(*this == _Right);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator==
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 0a		 jne	 SHORT $LN3@operator
  00039	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 213  :     }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 48
tv136 = 56
this$ = 80
_Right$ = 88
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator==, COMDAT

; 203  :     _NODISCARD bool operator==(const _List_const_iterator& _Right) const {

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
$LN4@operator:

; 204  : #if _ITERATOR_DEBUG_LEVEL == 2
; 205  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "list iterators incompatible");

  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0002d	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00037	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv69[rsp]
  00041	48 3b c8	 cmp	 rcx, rax
  00044	75 02		 jne	 SHORT $LN8@operator
  00046	eb 6b		 jmp	 SHORT $LN9@operator
$LN8@operator:
$LN7@operator:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	45 33 c9	 xor	 r9d, r9d
  00063	41 b8 cd 00 00
	00		 mov	 r8d, 205		; 000000cdH
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 03		 jne	 SHORT $LN11@operator
  00080	cc		 int	 3
  00081	33 c0		 xor	 eax, eax
$LN11@operator:
  00083	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008c	41 b9 cd 00 00
	00		 mov	 r9d, 205		; 000000cdH
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BAI@PDOPGBHP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 66 ff ff
	ff		 jne	 $LN4@operator

; 206  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 207  : 
; 208  :         return this->_Ptr == _Right._Ptr;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000c2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000c7	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000cb	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000cf	75 0a		 jne	 SHORT $LN12@operator
  000d1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN13@operator
$LN12@operator:
  000db	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN13@operator:
  000e3	0f b6 44 24 38	 movzx	 eax, BYTE PTR tv136[rsp]

; 209  :     }

  000e8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ec	5f		 pop	 rdi
  000ed	c3		 ret	 0
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
_Mycont$ = 48
this$ = 80
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++, COMDAT

; 168  :     _List_const_iterator& operator++() {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 169  : #if _ITERATOR_DEBUG_LEVEL == 2
; 170  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00028	48 89 44 24 30	 mov	 QWORD PTR _Mycont$[rsp], rax
$LN4@operator:

; 171  :         _STL_ASSERT(_Mycont, "cannot increment value-initialized list iterator");

  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Mycont$[rsp], 0
  00033	74 02		 je	 SHORT $LN14@operator
  00035	eb 6b		 jmp	 SHORT $LN15@operator
$LN14@operator:
$LN7@operator:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@
  0003e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 03		 jne	 SHORT $LN19@operator
  0006f	cc		 int	 3
  00070	33 c0		 xor	 eax, eax
$LN19@operator:
  00072	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0007b	41 b9 ab 00 00
	00		 mov	 r9d, 171		; 000000abH
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BAI@FDBCIILK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0009c	33 c0		 xor	 eax, eax
  0009e	85 c0		 test	 eax, eax
  000a0	75 95		 jne	 SHORT $LN7@operator
$LN15@operator:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 85		 jne	 SHORT $LN4@operator
$LN10@operator:

; 172  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot increment end list iterator");

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ba	74 02		 je	 SHORT $LN16@operator
  000bc	eb 6b		 jmp	 SHORT $LN17@operator
$LN16@operator:
$LN13@operator:
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@
  000c5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e6	b9 02 00 00 00	 mov	 ecx, 2
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	75 03		 jne	 SHORT $LN20@operator
  000f6	cc		 int	 3
  000f7	33 c0		 xor	 eax, eax
$LN20@operator:
  000f9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00102	41 b9 ac 00 00
	00		 mov	 r9d, 172		; 000000acH
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BAI@FDBCIILK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 95		 jne	 SHORT $LN13@operator
$LN17@operator:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 75 ff ff
	ff		 jne	 $LN10@operator

; 173  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 174  : 
; 175  :         this->_Ptr = this->_Ptr->_Next;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00138	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00141	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00144	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 176  :         return *this;

  00148	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 177  :     }

  0014d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00151	5f		 pop	 rdi
  00152	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ
_TEXT	SEGMENT
_Mycont$ = 48
this$ = 80
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*, COMDAT

; 154  :     _NODISCARD reference operator*() const {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 155  : #if _ITERATOR_DEBUG_LEVEL == 2
; 156  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00028	48 89 44 24 30	 mov	 QWORD PTR _Mycont$[rsp], rax
$LN4@operator:

; 157  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized list iterator");

  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Mycont$[rsp], 0
  00033	74 02		 je	 SHORT $LN14@operator
  00035	eb 6b		 jmp	 SHORT $LN15@operator
$LN14@operator:
$LN7@operator:
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@
  0003e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	41 b8 9d 00 00
	00		 mov	 r8d, 157		; 0000009dH
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0006a	83 f8 01	 cmp	 eax, 1
  0006d	75 03		 jne	 SHORT $LN19@operator
  0006f	cc		 int	 3
  00070	33 c0		 xor	 eax, eax
$LN19@operator:
  00072	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0007b	41 b9 9d 00 00
	00		 mov	 r9d, 157		; 0000009dH
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BAG@ENFBGKN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0009c	33 c0		 xor	 eax, eax
  0009e	85 c0		 test	 eax, eax
  000a0	75 95		 jne	 SHORT $LN7@operator
$LN15@operator:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 85		 jne	 SHORT $LN4@operator
$LN10@operator:

; 158  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end list iterator");

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000ba	74 02		 je	 SHORT $LN16@operator
  000bc	eb 6b		 jmp	 SHORT $LN17@operator
$LN16@operator:
$LN13@operator:
  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@
  000c5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  000d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 9e 00 00
	00		 mov	 r8d, 158		; 0000009eH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e6	b9 02 00 00 00	 mov	 ecx, 2
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	75 03		 jne	 SHORT $LN20@operator
  000f6	cc		 int	 3
  000f7	33 c0		 xor	 eax, eax
$LN20@operator:
  000f9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00102	41 b9 9e 00 00
	00		 mov	 r9d, 158		; 0000009eH
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BAG@ENFBGKN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 95		 jne	 SHORT $LN13@operator
$LN17@operator:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	0f 85 75 ff ff
	ff		 jne	 $LN10@operator

; 159  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 160  : 
; 161  :         return this->_Ptr->_Myval;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00138	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013c	48 83 c0 10	 add	 rax, 16

; 162  :     }

  00140	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00144	5f		 pop	 rdi
  00145	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEBUUniqueResponse@QSVAllocator@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >, COMDAT

; 150  :     _List_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 151  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Plist$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
  0003c	90		 npad	 1

; 152  :     }

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@AEBU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00041	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@$$QEAV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@AEBU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00041	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@XZ@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>, COMDAT

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::_Iterator_base12
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  0003d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 38   :         this->_Adopt(_Plist);

  00041	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Plist$[rsp]
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
  00050	90		 npad	 1

; 39   :     }

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Pnode$ = 56
_Plist$ = 64
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA PROC ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QEAA@XZ ; std::_Iterator_base12::~_Iterator_base12
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@U_Iterator_base12@2@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z@4HA ENDP ; `std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,std::_Iterator_base12>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ
_TEXT	SEGMENT
this$ = 48
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ PROC ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>, COMDAT

; 1204 :     _NODISCARD _Ty2* operator->() const noexcept { // return pointer to resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1205 :         return get();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get

; 1206 :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ENDP ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GQSVAllocator@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GQSVAllocator@@UEAAPEAXI@Z PROC			; QSVAllocator::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1QSVAllocator@@UEAA@XZ ; QSVAllocator::~QSVAllocator
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_GQSVAllocator@@UEAAPEAXI@Z ENDP			; QSVAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 32
tv72 = 48
tv71 = 56
this$ = 80
?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ PROC		; std::shared_ptr<RGYLog>::reset, COMDAT

; 1177 :     void reset() noexcept { // release resource and convert to empty shared_ptr object

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1178 :         shared_ptr().swap(*this);

  0001e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00023	e8 00 00 00 00	 call	 ??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
  00028	90		 npad	 1
  00029	48 89 44 24 30	 mov	 QWORD PTR tv72[rsp], rax
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR tv72[rsp]
  00033	48 89 44 24 38	 mov	 QWORD PTR tv71[rsp], rax
  00038	48 8b 54 24 50	 mov	 rdx, QWORD PTR this$[rsp]
  0003d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv71[rsp]
  00042	e8 00 00 00 00	 call	 ?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<RGYLog>::swap
  00047	90		 npad	 1
  00048	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0004d	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  00052	90		 npad	 1

; 1179 :     }

  00053	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ ENDP		; std::shared_ptr<RGYLog>::reset
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv72 = 48
tv71 = 56
this$ = 80
?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA PROC ; `std::shared_ptr<RGYLog>::reset'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 20	 lea	 rcx, QWORD PTR $T1[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA ENDP ; `std::shared_ptr<RGYLog>::reset'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv72 = 48
tv71 = 56
this$ = 80
?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA PROC ; `std::shared_ptr<RGYLog>::reset'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 20	 lea	 rcx, QWORD PTR $T1[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ@4HA ENDP ; `std::shared_ptr<RGYLog>::reset'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z PROC	; std::shared_ptr<RGYLog>::swap, COMDAT

; 1173 :     void swap(shared_ptr& _Other) noexcept { // swap pointers

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1174 :         this->_Swap(_Other);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Other$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<RGYLog>::_Swap

; 1175 :     }

  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
?swap@?$shared_ptr@VRGYLog@@@std@@QEAAXAEAV12@@Z ENDP	; std::shared_ptr<RGYLog>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ PROC		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>, COMDAT

; 1132 :     ~shared_ptr() noexcept { // release resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1133 :         this->_Decref();

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ ; std::_Ptr_base<RGYLog>::_Decref

; 1134 :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ENDP		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ PROC		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>, COMDAT

; 1016 :     constexpr shared_ptr() noexcept {} // construct empty shared_ptr

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ENDP		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z PROC	; std::_Ptr_base<RGYLog>::_Swap, COMDAT

; 887  :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 888  :         _STD swap(_Ptr, _Right._Ptr);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	e8 00 00 00 00	 call	 ??$swap@PEAVRGYLog@@X@std@@YAXAEAPEAVRGYLog@@0@Z ; std::swap<RGYLog *,void>

; 889  :         _STD swap(_Rep, _Right._Rep);

  00035	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 83 c0 08	 add	 rax, 8
  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00043	48 83 c1 08	 add	 rcx, 8
  00047	48 8b d0	 mov	 rdx, rax
  0004a	e8 00 00 00 00	 call	 ??$swap@PEAV_Ref_count_base@std@@X@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>

; 890  :     }

  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IEAAXAEAV12@@Z ENDP	; std::_Ptr_base<RGYLog>::_Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ PROC	; std::_Ptr_base<RGYLog>::_Decref, COMDAT

; 881  :     void _Decref() noexcept { // decrement reference count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 882  :         if (_Rep) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 0e		 je	 SHORT $LN2@Decref

; 883  :             _Rep->_Decref();

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00033	e8 00 00 00 00	 call	 ?_Decref@_Ref_count_base@std@@QEAAXXZ ; std::_Ref_count_base::_Decref
$LN2@Decref:

; 884  :         }
; 885  :     }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IEAAXXZ ENDP	; std::_Ptr_base<RGYLog>::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
;	COMDAT ??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ PROC		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory

; 910  :     element_type* _Ptr{nullptr};

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 911  :     _Ref_count_base* _Rep{nullptr};

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	5f		 pop	 rdi
  00025	c3		 ret	 0
??0?$_Ptr_base@VRGYLog@@@std@@IEAA@XZ ENDP		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ
_TEXT	SEGMENT
this$ = 16
?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ PROC	; std::_Ptr_base<RGYLog>::get, COMDAT

; 816  :     _NODISCARD element_type* get() const noexcept { // return pointer to resource

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 817  :         return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 818  :     }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?get@?$_Ptr_base@VRGYLog@@@std@@IEBAPEAVRGYLog@@XZ ENDP	; std::_Ptr_base<RGYLog>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first, COMDAT

; 1424 :     const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1425 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1426 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z PROC ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Unlinknode, COMDAT

; 409  :     _Nodeptr _Unlinknode(_Nodeptr _Pnode) { // unlink node at _Where from the list

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 410  :         _Orphan_ptr2(_Pnode);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2

; 411  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00037	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 412  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00053	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00057	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 413  :         --_Mysize;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00060	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00064	48 ff c8	 dec	 rax
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 414  :         return _Pnode;

  00070	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]

; 415  :     }

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Unlinknode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
this$ = 96
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ PROC ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end, COMDAT

; 392  :     void _Orphan_non_end() noexcept { // orphan iterators except end()

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 393  : #if _ITERATOR_DEBUG_LEVEL == 2
; 394  :         _Lockit _Lock(_LOCK_DEBUG);

  0001e	ba 03 00 00 00	 mov	 edx, 3
  00023	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  0002e	90		 npad	 1

; 395  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;

  0002f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 396  :         const auto _Head          = _Myhead;

  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00049	48 89 44 24 40	 mov	 QWORD PTR _Head$[rsp], rax
$LN2@Orphan_non:

; 397  :         while (*_Pnext) {

  0004e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00053	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00057	74 51		 je	 SHORT $LN3@Orphan_non

; 398  :             _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;

  00059	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  0005e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00061	48 83 c0 08	 add	 rax, 8
  00065	48 89 44 24 48	 mov	 QWORD PTR _Pnextnext$4[rsp], rax

; 399  :             if (static_cast<_List_const_iterator<_List_val>&>(**_Pnext)._Ptr == _Head) { // iterator is end(), move on

  0006a	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  0006f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Head$[rsp]
  00077	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0007b	75 0c		 jne	 SHORT $LN4@Orphan_non

; 400  :                 _Pnext = _Pnextnext;

  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnextnext$4[rsp]
  00082	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 401  :             } else { // orphan the iterator

  00087	eb 1f		 jmp	 SHORT $LN5@Orphan_non
$LN4@Orphan_non:

; 402  :                 (*_Pnext)->_Myproxy = nullptr;

  00089	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  0008e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00091	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 403  :                 *_Pnext             = *_Pnextnext;

  00098	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  0009d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pnextnext$4[rsp]
  000a2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a5	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@Orphan_non:

; 404  :             }
; 405  :         }

  000a8	eb a4		 jmp	 SHORT $LN2@Orphan_non
$LN3@Orphan_non:

; 406  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 407  :     }

  000aa	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000b5	90		 npad	 1
  000b6	48 8b cc	 mov	 rcx, rsp
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ$rtcFrameData
  000c0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c5	90		 npad	 1
  000c6	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ENDP ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
this$ = 96
?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA PROC ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA ENDP ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
this$ = 96
?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA PROC ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ@4HA ENDP ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
_TEXT	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2, COMDAT

; 371  :     void _Orphan_ptr2(_Nodeptr _Ptr) noexcept { // orphan iterators with specified node pointers

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 18 00 00 00	 mov	 ecx, 24
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 372  : #if _ITERATOR_DEBUG_LEVEL == 2
; 373  :         _Lockit _Lock(_LOCK_DEBUG);

  00023	ba 03 00 00 00	 mov	 edx, 3
  00028	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00033	90		 npad	 1

; 374  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 375  :         const auto _Head          = _Myhead;

  00045	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 89 44 24 40	 mov	 QWORD PTR _Head$[rsp], rax
$LN2@Orphan_ptr:

; 376  :         while (*_Pnext) {

  00053	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	74 67		 je	 SHORT $LN3@Orphan_ptr

; 377  :             _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;

  0005e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 83 c0 08	 add	 rax, 8
  0006a	48 89 44 24 48	 mov	 QWORD PTR _Pnextnext$4[rsp], rax

; 378  :             const auto _Pnextptr          = static_cast<_List_const_iterator<_List_val>&>(**_Pnext)._Ptr;

  0006f	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00074	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00077	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0007b	48 89 44 24 50	 mov	 QWORD PTR _Pnextptr$5[rsp], rax

; 379  :             if (_Pnextptr == _Head || _Pnextptr != _Ptr) {

  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR _Head$[rsp]
  00085	48 39 44 24 50	 cmp	 QWORD PTR _Pnextptr$5[rsp], rax
  0008a	74 0c		 je	 SHORT $LN6@Orphan_ptr
  0008c	48 8b 44 24 78	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00091	48 39 44 24 50	 cmp	 QWORD PTR _Pnextptr$5[rsp], rax
  00096	74 0c		 je	 SHORT $LN4@Orphan_ptr
$LN6@Orphan_ptr:

; 380  :                 // iterator is end() or doesn't point at the one we are orphaning, move on
; 381  :                 _Pnext = _Pnextnext;

  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnextnext$4[rsp]
  0009d	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 382  :             } else { // orphan the iterator

  000a2	eb 1f		 jmp	 SHORT $LN5@Orphan_ptr
$LN4@Orphan_ptr:

; 383  :                 (*_Pnext)->_Myproxy = nullptr;

  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 384  :                 *_Pnext             = *_Pnextnext;

  000b3	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pnextnext$4[rsp]
  000bd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c0	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@Orphan_ptr:

; 385  :             }
; 386  :         }

  000c3	eb 8e		 jmp	 SHORT $LN2@Orphan_ptr
$LN3@Orphan_ptr:

; 387  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 388  :         (void) _Ptr;
; 389  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 390  :     }

  000c5	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000d0	90		 npad	 1
  000d1	48 8b cc	 mov	 rcx, rsp
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z$rtcFrameData
  000db	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e0	90		 npad	 1
  000e1	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA PROC ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA ENDP ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA PROC ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA ENDP ; `std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_ptr2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ PROC ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >, COMDAT

; 368  :     _List_val() : _Myhead(), _Mysize(0) { // initialize data

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 369  :     }

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ENDP ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal, COMDAT

; 1714 :     const _Alnode& _Getal() const noexcept { // return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1715 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first

; 1716 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal, COMDAT

; 1710 :     _Alnode& _Getal() noexcept { // return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1711 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Get_first

; 1712 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S17$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy, COMDAT

; 1691 :     void _Alloc_sentinel_and_proxy() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 1692 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

  00024	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S17$[rsp]
  00039	e8 00 00 00 00	 call	 ??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<QSVAllocator::UniqueResponse,void *> >
  0003e	48 8d 44 24 34	 lea	 rax, QWORD PTR $S17$[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 1693 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00048	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00050	4c 8b c0	 mov	 r8, rax
  00053	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  00058	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0005d	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00062	90		 npad	 1

; 1694 :         auto& _Al     = _Getal();

  00063	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00070	48 89 44 24 78	 mov	 QWORD PTR _Al$[rsp], rax

; 1695 :         auto _Newhead = _Al.allocate(1);

  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Al$[rsp]
  0007f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocate
  00084	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _Newhead$[rsp], rax

; 1696 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0008c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Newhead$[rsp]
  00094	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Newhead$[rsp]
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * &>

; 1697 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Newhead$[rsp]
  000ac	48 83 c0 08	 add	 rax, 8
  000b0	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Newhead$[rsp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<QSVAllocator::UniqueResponse,void *> *,std::_List_node<QSVAllocator::UniqueResponse,void *> * &>

; 1698 :         _Mypair._Myval2._Myhead = _Newhead;

  000c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Newhead$[rsp]
  000d0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1699 :         _Proxy._Release();

  000d4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000d9	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000de	90		 npad	 1

; 1700 :     }

  000df	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000e4	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000e9	48 8b cc	 mov	 rcx, rsp
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ$rtcFrameData
  000f3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f8	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S17$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S17$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
this$ = 64
?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Tidy, COMDAT

; 1309 :     void _Tidy() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1310 :         auto& _Al      = _Getal();

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00028	48 89 44 24 20	 mov	 QWORD PTR _Al$[rsp], rax

; 1311 :         auto& _My_data = _Mypair._Myval2;

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR _My_data$[rsp], rax

; 1312 :         _My_data._Orphan_all();

  00037	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _My_data$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1313 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00041	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00046	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Al$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Free_non_head<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >

; 1314 :         _Node::_Freenode0(_Al, _My_data._Myhead);

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00059	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Al$[rsp]
  00062	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode0<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >

; 1315 :     }

  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
this$ = 64
?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::clear, COMDAT

; 1299 :     void clear() noexcept { // erase all

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1300 :         auto& _My_data = _Mypair._Myval2;

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 89 44 24 20	 mov	 QWORD PTR _My_data$[rsp], rax

; 1301 :         _My_data._Orphan_non_end();

  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_non_end@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Orphan_non_end

; 1302 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00037	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  00041	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Free_non_head<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >

; 1303 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00052	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00056	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  0005b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1304 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00067	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  00070	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00074	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1305 :         _My_data._Mysize        = 0;

  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  0007d	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 1306 :     }

  00085	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase, COMDAT

; 1258 :     iterator erase(const const_iterator _Where) { // erase element at _Where

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0
$LN4@erase:

; 1259 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1260 :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_Mypair._Myval2), "list erase iterator outside range");

  00030	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003a	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  0003f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv70[rsp]
  0004e	48 3b c8	 cmp	 rcx, rax
  00051	75 02		 jne	 SHORT $LN7@erase
  00053	eb 6b		 jmp	 SHORT $LN9@erase
$LN7@erase:
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@
  0005c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00068	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 ec 04 00
	00		 mov	 r8d, 1260		; 000004ecH
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007d	b9 02 00 00 00	 mov	 ecx, 2
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 03		 jne	 SHORT $LN11@erase
  0008d	cc		 int	 3
  0008e	33 c0		 xor	 eax, eax
$LN11@erase:
  00090	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00099	41 b9 ec 04 00
	00		 mov	 r9d, 1260		; 000004ecH
  0009f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1OC@FPLGCEPB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 95		 jne	 SHORT $LN7@erase
$LN9@erase:
  000c0	33 c0		 xor	 eax, eax
  000c2	85 c0		 test	 eax, eax
  000c4	0f 85 66 ff ff
	ff		 jne	 $LN4@erase

; 1261 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1262 :         const auto _Result = _Where._Ptr->_Next;

  000ca	48 8b 44 24 70	 mov	 rax, QWORD PTR _Where$[rsp]
  000cf	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d6	48 89 44 24 30	 mov	 QWORD PTR _Result$[rsp], rax

; 1263 :         _Node::_Freenode(_Getal(), _Mypair._Myval2._Unlinknode(_Where._Ptr));

  000db	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  000e5	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  000e9	48 8b c8	 mov	 rcx, rax
  000ec	e8 00 00 00 00	 call	 ?_Unlinknode@?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@PEAU32@@Z ; std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >::_Unlinknode
  000f1	48 89 44 24 48	 mov	 QWORD PTR tv137[rsp], rax
  000f6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000fb	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00100	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv137[rsp]
  00105	48 8b d1	 mov	 rdx, rcx
  00108	48 8b c8	 mov	 rcx, rax
  0010b	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<QSVAllocator::UniqueResponse,void *>::_Freenode<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >

; 1264 :         return _Make_iter(_Result);

  00110	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Result$[rsp]
  00115	48 8b 54 24 68	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0011a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0011f	e8 00 00 00 00	 call	 ?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter
  00124	8b 44 24 38	 mov	 eax, DWORD PTR $T1[rsp]
  00128	83 c8 01	 or	 eax, 1
  0012b	89 44 24 38	 mov	 DWORD PTR $T1[rsp], eax
  0012f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  00134	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00139	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1265 :     }

  0013e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00142	5f		 pop	 rdi
  00143	c3		 ret	 0
  00144	cc		 int	 3
?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 70	 mov	 rcx, QWORD PTR _Where$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 38	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN14@dtor$1
  0001d	83 65 38 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN14@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 70	 mov	 rcx, QWORD PTR _Where$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 38	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN14@dtor$1
  0001d	83 65 38 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN14@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0??erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::max_size, COMDAT

; 1136 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1137 :         return _Min_value(

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::max_size
  00030	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00035	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  0003a	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0003f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00044	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00049	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1138 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1139 :     }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
?max_size@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA_KXZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter, COMDAT

; 1062 :     iterator _Make_iter(_Nodeptr _Where) const { // make iterator from node pointer

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1063 :         return iterator(_Where, _STD addressof(_Mypair._Myval2));

  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEBV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > const >
  0003d	4c 8b c0	 mov	 r8, rax
  00040	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Where$[rsp]
  00045	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  0004f	90		 npad	 1
  00050	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00054	83 c8 01	 or	 eax, 1
  00057	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1064 :     }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
  00066	cc		 int	 3
?_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??_Make_iter@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@@Z@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Make_iter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end, COMDAT

; 1038 :     _NODISCARD iterator end() noexcept { // return iterator for end of mutable sequence

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1039 :         return iterator(_Mypair._Myval2._Myhead, _STD addressof(_Mypair._Myval2));

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  00038	90		 npad	 1
  00039	4c 8b c0	 mov	 r8, rax
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00045	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  0004f	90		 npad	 1
  00050	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00054	83 c8 01	 or	 eax, 1
  00057	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1040 :     }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
  00066	cc		 int	 3
?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin, COMDAT

; 1030 :     _NODISCARD iterator begin() noexcept { // return iterator for beginning of mutable sequence

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1031 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  00038	90		 npad	 1
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00042	4c 8b c0	 mov	 r8, rax
  00045	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00048	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004d	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >
  00052	90		 npad	 1
  00053	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00057	83 c8 01	 or	 eax, 1
  0005a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1032 :     }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
  00069	cc		 int	 3
?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
this$ = 96
??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >, COMDAT

; 984  :     ~list() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 985  :         _Tidy();

  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Tidy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Tidy

; 986  : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 987  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Getal@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Getal
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S2$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$?0U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<QSVAllocator::UniqueResponse,void *> >
  0003f	48 8d 44 24 34	 lea	 rax, QWORD PTR $S2$[rsp]
  00044	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 988  :         _Delete_plain_internal(_Alproxy, _Mypair._Myval2._Myproxy);

  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Alproxy$[rsp]
  00056	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 989  : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 990  :     }

  0005b	48 8b cc	 mov	 rcx, rsp
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ$rtcFrameData
  00065	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::push_back, COMDAT

; 910  :     void push_back(_Ty&& _Val) { // insert element at end

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 911  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAUUniqueResponse@QSVAllocator@@@std@@YA$$QEAUUniqueResponse@QSVAllocator@@AEAU12@@Z ; std::move<QSVAllocator::UniqueResponse &>
  0002d	4c 8b c0	 mov	 r8, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ??$_Emplace@UUniqueResponse@QSVAllocator@@@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@1@QEAU21@$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Emplace<QSVAllocator::UniqueResponse>

; 912  :     }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ PROC ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >, COMDAT

; 736  :     list() : _Mypair(_Zero_then_variadic_args_t()) { // construct empty list

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >,std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> >,1><>

; 737  :         _Alloc_sentinel_and_proxy();

  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Alloc_sentinel_and_proxy@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@AEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::_Alloc_sentinel_and_proxy

; 738  :     }

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ENDP ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00006	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH

; 768  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
_TEXT	SEGMENT
__formal$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00028	48 6b 44 24 40
	40		 imul	 rax, QWORD PTR _Count$[rsp], 64 ; 00000040H
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 754  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@2@QEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z PROC ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocate, COMDAT

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z ; std::_Get_size_of_n<64>
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 872  :     }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
?allocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ENDP ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z PROC ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::deallocate, COMDAT

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00028	48 6b 44 24 40
	40		 imul	 rax, QWORD PTR _Count$[rsp], 64 ; 00000040H
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 868  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@2@_K@Z ENDP ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ PROC ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >, COMDAT

; 859  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0?$allocator@U?$_List_node@UUniqueResponse@QSVAllocator@@PEAX@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >::allocator<std::_List_node<QSVAllocator::UniqueResponse,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first, COMDAT

; 1424 :     const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1425 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1426 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z
_TEXT	SEGMENT
this$ = 48
_Pnode$ = 56
?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z PROC ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Unlinknode, COMDAT

; 409  :     _Nodeptr _Unlinknode(_Nodeptr _Pnode) { // unlink node at _Where from the list

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 410  :         _Orphan_ptr2(_Pnode);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2

; 411  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00037	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 412  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  00053	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00057	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 413  :         --_Mysize;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00060	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00064	48 ff c8	 dec	 rax
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 414  :         return _Pnode;

  00070	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnode$[rsp]

; 415  :     }

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Unlinknode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
_TEXT	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2, COMDAT

; 371  :     void _Orphan_ptr2(_Nodeptr _Ptr) noexcept { // orphan iterators with specified node pointers

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 18 00 00 00	 mov	 ecx, 24
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 372  : #if _ITERATOR_DEBUG_LEVEL == 2
; 373  :         _Lockit _Lock(_LOCK_DEBUG);

  00023	ba 03 00 00 00	 mov	 edx, 3
  00028	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00033	90		 npad	 1

; 374  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 375  :         const auto _Head          = _Myhead;

  00045	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	48 89 44 24 40	 mov	 QWORD PTR _Head$[rsp], rax
$LN2@Orphan_ptr:

; 376  :         while (*_Pnext) {

  00053	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	74 67		 je	 SHORT $LN3@Orphan_ptr

; 377  :             _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;

  0005e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 83 c0 08	 add	 rax, 8
  0006a	48 89 44 24 48	 mov	 QWORD PTR _Pnextnext$4[rsp], rax

; 378  :             const auto _Pnextptr          = static_cast<_List_const_iterator<_List_val>&>(**_Pnext)._Ptr;

  0006f	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00074	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00077	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0007b	48 89 44 24 50	 mov	 QWORD PTR _Pnextptr$5[rsp], rax

; 379  :             if (_Pnextptr == _Head || _Pnextptr != _Ptr) {

  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR _Head$[rsp]
  00085	48 39 44 24 50	 cmp	 QWORD PTR _Pnextptr$5[rsp], rax
  0008a	74 0c		 je	 SHORT $LN6@Orphan_ptr
  0008c	48 8b 44 24 78	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00091	48 39 44 24 50	 cmp	 QWORD PTR _Pnextptr$5[rsp], rax
  00096	74 0c		 je	 SHORT $LN4@Orphan_ptr
$LN6@Orphan_ptr:

; 380  :                 // iterator is end() or doesn't point at the one we are orphaning, move on
; 381  :                 _Pnext = _Pnextnext;

  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnextnext$4[rsp]
  0009d	48 89 44 24 38	 mov	 QWORD PTR _Pnext$[rsp], rax

; 382  :             } else { // orphan the iterator

  000a2	eb 1f		 jmp	 SHORT $LN5@Orphan_ptr
$LN4@Orphan_ptr:

; 383  :                 (*_Pnext)->_Myproxy = nullptr;

  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 384  :                 *_Pnext             = *_Pnextnext;

  000b3	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pnextnext$4[rsp]
  000bd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c0	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@Orphan_ptr:

; 385  :             }
; 386  :         }

  000c3	eb 8e		 jmp	 SHORT $LN2@Orphan_ptr
$LN3@Orphan_ptr:

; 387  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 388  :         (void) _Ptr;
; 389  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 390  :     }

  000c5	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000d0	90		 npad	 1
  000d1	48 8b cc	 mov	 rcx, rsp
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z$rtcFrameData
  000db	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e0	90		 npad	 1
  000e1	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000e5	5f		 pop	 rdi
  000e6	c3		 ret	 0
?_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA PROC ; `std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA ENDP ; `std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
_Pnext$ = 56
_Head$ = 64
_Pnextnext$4 = 72
_Pnextptr$5 = 80
this$ = 112
_Ptr$ = 120
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA PROC ; `std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_ptr2@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAXPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA ENDP ; `std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Orphan_ptr2'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ PROC ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >, COMDAT

; 368  :     _List_val() : _Myhead(), _Mysize(0) { // initialize data

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 369  :     }

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ENDP ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal, COMDAT

; 1714 :     const _Alnode& _Getal() const noexcept { // return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1715 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first

; 1716 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal, COMDAT

; 1710 :     _Alnode& _Getal() noexcept { // return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1711 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Get_first

; 1712 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S18$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy, COMDAT

; 1691 :     void _Alloc_sentinel_and_proxy() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 1692 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

  00024	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S18$[rsp]
  00039	e8 00 00 00 00	 call	 ??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<mfxFrameAllocResponse,void *> >
  0003e	48 8d 44 24 34	 lea	 rax, QWORD PTR $S18$[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 1693 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00048	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00050	4c 8b c0	 mov	 r8, rax
  00053	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  00058	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0005d	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00062	90		 npad	 1

; 1694 :         auto& _Al     = _Getal();

  00063	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00070	48 89 44 24 78	 mov	 QWORD PTR _Al$[rsp], rax

; 1695 :         auto _Newhead = _Al.allocate(1);

  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Al$[rsp]
  0007f	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocate
  00084	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _Newhead$[rsp], rax

; 1696 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0008c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Newhead$[rsp]
  00094	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Newhead$[rsp]
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * &>

; 1697 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Newhead$[rsp]
  000ac	48 83 c0 08	 add	 rax, 8
  000b0	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Newhead$[rsp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@0@0@Z ; std::_Construct_in_place<std::_List_node<mfxFrameAllocResponse,void *> *,std::_List_node<mfxFrameAllocResponse,void *> * &>

; 1698 :         _Mypair._Myval2._Myhead = _Newhead;

  000c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Newhead$[rsp]
  000d0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1699 :         _Proxy._Release();

  000d4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000d9	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000de	90		 npad	 1

; 1700 :     }

  000df	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000e4	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000e9	48 8b cc	 mov	 rcx, rsp
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ$rtcFrameData
  000f3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f8	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S18$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S18$ = 52
_Proxy$ = 88
_Al$ = 120
_Newhead$ = 136
this$ = 176
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
this$ = 64
?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Tidy, COMDAT

; 1309 :     void _Tidy() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1310 :         auto& _Al      = _Getal();

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00028	48 89 44 24 20	 mov	 QWORD PTR _Al$[rsp], rax

; 1311 :         auto& _My_data = _Mypair._Myval2;

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR _My_data$[rsp], rax

; 1312 :         _My_data._Orphan_all();

  00037	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _My_data$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1313 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00041	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00046	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Al$[rsp]
  0004f	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Free_non_head<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >

; 1314 :         _Node::_Freenode0(_Al, _My_data._Myhead);

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00059	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Al$[rsp]
  00062	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode0<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >

; 1315 :     }

  00067	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
_Pnode$ = 72
?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Unchecked_erase, COMDAT

; 1268 :     _Nodeptr _Unchecked_erase(const _Nodeptr _Pnode) { // erase element at _Pnode

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1269 :         const auto _Result   = _Pnode->_Next;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 1270 :         _Pnode->_Prev->_Next = _Result;

  00030	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnode$[rsp]
  00035	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Result$[rsp]
  0003e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1271 :         _Result->_Prev       = _Pnode->_Prev;

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]
  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pnode$[rsp]
  0004b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0004f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1272 :         _Node::_Freenode(_Getal(), _Pnode);

  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00058	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  0005d	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Pnode$[rsp]
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >

; 1273 :         --_Mypair._Myval2._Mysize;

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00073	48 ff c8	 dec	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 1274 :         return _Result;

  0007f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 1275 :     }

  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Unchecked_erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase, COMDAT

; 1258 :     iterator erase(const const_iterator _Where) { // erase element at _Where

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0
$LN4@erase:

; 1259 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1260 :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_Mypair._Myval2), "list erase iterator outside range");

  00030	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0003a	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  0003f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv70[rsp]
  0004e	48 3b c8	 cmp	 rcx, rax
  00051	75 02		 jne	 SHORT $LN7@erase
  00053	eb 6b		 jmp	 SHORT $LN9@erase
$LN7@erase:
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@
  0005c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00068	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 ec 04 00
	00		 mov	 r8d, 1260		; 000004ecH
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007d	b9 02 00 00 00	 mov	 ecx, 2
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 03		 jne	 SHORT $LN11@erase
  0008d	cc		 int	 3
  0008e	33 c0		 xor	 eax, eax
$LN11@erase:
  00090	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00099	41 b9 ec 04 00
	00		 mov	 r9d, 1260		; 000004ecH
  0009f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MG@IGJAEKKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 95		 jne	 SHORT $LN7@erase
$LN9@erase:
  000c0	33 c0		 xor	 eax, eax
  000c2	85 c0		 test	 eax, eax
  000c4	0f 85 66 ff ff
	ff		 jne	 $LN4@erase

; 1261 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1262 :         const auto _Result = _Where._Ptr->_Next;

  000ca	48 8b 44 24 70	 mov	 rax, QWORD PTR _Where$[rsp]
  000cf	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d6	48 89 44 24 30	 mov	 QWORD PTR _Result$[rsp], rax

; 1263 :         _Node::_Freenode(_Getal(), _Mypair._Myval2._Unlinknode(_Where._Ptr));

  000db	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  000e5	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  000e9	48 8b c8	 mov	 rcx, rax
  000ec	e8 00 00 00 00	 call	 ?_Unlinknode@?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@PEAU32@@Z ; std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >::_Unlinknode
  000f1	48 89 44 24 48	 mov	 QWORD PTR tv137[rsp], rax
  000f6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000fb	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00100	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv137[rsp]
  00105	48 8b d1	 mov	 rdx, rcx
  00108	48 8b c8	 mov	 rcx, rax
  0010b	e8 00 00 00 00	 call	 ??$_Freenode@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@PEAU01@@Z ; std::_List_node<mfxFrameAllocResponse,void *>::_Freenode<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >

; 1264 :         return _Make_iter(_Result);

  00110	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Result$[rsp]
  00115	48 8b 54 24 68	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0011a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0011f	e8 00 00 00 00	 call	 ?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter
  00124	8b 44 24 38	 mov	 eax, DWORD PTR $T1[rsp]
  00128	83 c8 01	 or	 eax, 1
  0012b	89 44 24 38	 mov	 DWORD PTR $T1[rsp], eax
  0012f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Where$[rsp]
  00134	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00139	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1265 :     }

  0013e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00142	5f		 pop	 rdi
  00143	c3		 ret	 0
  00144	cc		 int	 3
?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 70	 mov	 rcx, QWORD PTR _Where$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 38	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN14@dtor$1
  0001d	83 65 38 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN14@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 70	 mov	 rcx, QWORD PTR _Where$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 48
$T1 = 56
tv70 = 64
tv137 = 72
this$ = 96
__$ReturnUdt$ = 104
_Where$ = 112
?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 38	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN14@dtor$1
  0001d	83 65 38 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN14@dtor$1:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$1@?0??erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 64
?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::pop_back, COMDAT

; 1181 :     void pop_back() { // erase element at end

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
$LN4@pop_back:

; 1182 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1183 :         _STL_VERIFY(_Mypair._Myval2._Mysize != 0, "pop_back called on empty list<T>");

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00028	74 02		 je	 SHORT $LN8@pop_back
  0002a	eb 6b		 jmp	 SHORT $LN9@pop_back
$LN8@pop_back:
$LN7@pop_back:
  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CB@EKEMEMC@pop_back?5called?5on?5empty?5list?$DMT@
  00033	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00038	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	45 33 c9	 xor	 r9d, r9d
  00047	41 b8 9f 04 00
	00		 mov	 r8d, 1183		; 0000049fH
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GF@GNCHBLDJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00054	b9 02 00 00 00	 mov	 ecx, 2
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0005f	83 f8 01	 cmp	 eax, 1
  00062	75 03		 jne	 SHORT $LN11@pop_back
  00064	cc		 int	 3
  00065	33 c0		 xor	 eax, eax
$LN11@pop_back:
  00067	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00070	41 b9 9f 04 00
	00		 mov	 r9d, 1183		; 0000049fH
  00076	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MK@DPPFMAIA@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1MM@EBAHMKGK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@IHNNOGFN@?$AA?$CC?$AAp?$AAo?$AAp?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe@
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00091	33 c0		 xor	 eax, eax
  00093	85 c0		 test	 eax, eax
  00095	75 95		 jne	 SHORT $LN7@pop_back
$LN9@pop_back:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 81		 jne	 SHORT $LN4@pop_back

; 1184 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1185 : 
; 1186 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Prev);

  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000a2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a6	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000af	e8 00 00 00 00	 call	 ?_Unchecked_erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@QEAU32@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Unchecked_erase

; 1187 :     }

  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv75 = 64
tv74 = 72
this$ = 96
?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back, COMDAT

; 1157 :     _NODISCARD reference back() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1158 :         return *(--end());

  0001e	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T2[rsp]
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
  0002d	48 89 44 24 40	 mov	 QWORD PTR tv75[rsp], rax
  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR tv75[rsp]
  00037	48 89 44 24 48	 mov	 QWORD PTR tv74[rsp], rax
  0003c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv74[rsp]
  00041	e8 00 00 00 00	 call	 ??F?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator--
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
  0004e	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00053	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00058	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]

; 1159 :     }

  00062	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv75 = 64
tv74 = 72
this$ = 96
?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR $T2[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv75 = 64
tv74 = 72
this$ = 96
?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR $T2[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::max_size, COMDAT

; 1136 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1137 :         return _Min_value(

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEBAAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::max_size
  00030	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00035	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  0003a	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0003f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00044	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00049	e8 00 00 00 00	 call	 ??$_Min_value@_K@std@@YAAEB_KAEB_K0@Z ; std::_Min_value<unsigned __int64>
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1138 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1139 :     }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
?max_size@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA_KXZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter, COMDAT

; 1062 :     iterator _Make_iter(_Nodeptr _Where) const { // make iterator from node pointer

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1063 :         return iterator(_Where, _STD addressof(_Mypair._Myval2));

  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEBV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > const >
  0003d	4c 8b c0	 mov	 r8, rax
  00040	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Where$[rsp]
  00045	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  0004f	90		 npad	 1
  00050	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00054	83 c8 01	 or	 eax, 1
  00057	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1064 :     }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
  00066	cc		 int	 3
?_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??_Make_iter@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEBA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@@Z@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Make_iter'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end, COMDAT

; 1038 :     _NODISCARD iterator end() noexcept { // return iterator for end of mutable sequence

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1039 :         return iterator(_Mypair._Myval2._Myhead, _STD addressof(_Mypair._Myval2));

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  00038	90		 npad	 1
  00039	4c 8b c0	 mov	 r8, rax
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00045	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  0004f	90		 npad	 1
  00050	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00054	83 c8 01	 or	 eax, 1
  00057	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1040 :     }

  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
  00066	cc		 int	 3
?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin, COMDAT

; 1030 :     _NODISCARD iterator begin() noexcept { // return iterator for beginning of mutable sequence

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1031 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$addressof@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@YAPEAV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@0@AEAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  00038	90		 npad	 1
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00042	4c 8b c0	 mov	 r8, rax
  00045	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00048	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0004d	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@PEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >
  00052	90		 npad	 1
  00053	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00057	83 c8 01	 or	 eax, 1
  0005a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1032 :     }

  00063	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
  00069	cc		 int	 3
?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA PROC ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00016	83 e0 01	 and	 eax, 1
  00019	85 c0		 test	 eax, eax
  0001b	74 0d		 je	 SHORT $LN4@dtor$0
  0001d	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00021	48 8b 4d 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN4@dtor$0:
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?dtor$0@?0??begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ@4HA ENDP ; `std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S3$ = 52
this$ = 96
??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >, COMDAT

; 984  :     ~list() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 985  :         _Tidy();

  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Tidy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Tidy

; 986  : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 987  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Getal@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Getal
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S3$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$?0U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<mfxFrameAllocResponse,void *> >
  0003f	48 8d 44 24 34	 lea	 rax, QWORD PTR $S3$[rsp]
  00044	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 988  :         _Delete_plain_internal(_Alproxy, _Mypair._Myval2._Myproxy);

  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Alproxy$[rsp]
  00056	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 989  : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 990  :     }

  0005b	48 8b cc	 mov	 rcx, rsp
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ$rtcFrameData
  00065	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0006a	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0006e	5f		 pop	 rdi
  0006f	c3		 ret	 0
??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::push_back, COMDAT

; 910  :     void push_back(_Ty&& _Val) { // insert element at end

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 911  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val$[rsp]
  00028	e8 00 00 00 00	 call	 ??$move@AEAUmfxFrameAllocResponse@@@std@@YA$$QEAUmfxFrameAllocResponse@@AEAU1@@Z ; std::move<mfxFrameAllocResponse &>
  0002d	4c 8b c0	 mov	 r8, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ??$_Emplace@UmfxFrameAllocResponse@@@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@1@QEAU21@$$QEAUmfxFrameAllocResponse@@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Emplace<mfxFrameAllocResponse>

; 912  :     }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\list
;	COMDAT ??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ PROC ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >, COMDAT

; 736  :     list() : _Mypair(_Zero_then_variadic_args_t()) { // construct empty list

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00028	48 8b c8	 mov	 rcx, rax
  0002b	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1>::_Compressed_pair<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >,std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> >,1><>

; 737  :         _Alloc_sentinel_and_proxy();

  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Alloc_sentinel_and_proxy@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@AEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::_Alloc_sentinel_and_proxy

; 738  :     }

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ENDP ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00006	48 b8 55 55 55
	55 55 55 55 05	 mov	 rax, 384307168202282325	; 0555555555555555H

; 768  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
_TEXT	SEGMENT
__formal$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00028	48 6b 44 24 40
	30		 imul	 rax, QWORD PTR _Count$[rsp], 48 ; 00000030H
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 754  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@2@QEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<mfxFrameAllocResponse,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z PROC ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocate, COMDAT

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0DA@@std@@YA_K_K@Z ; std::_Get_size_of_n<48>
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 872  :     }

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5f		 pop	 rdi
  0003a	c3		 ret	 0
?allocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAPEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ENDP ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z PROC ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::deallocate, COMDAT

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00028	48 6b 44 24 40
	30		 imul	 rax, QWORD PTR _Count$[rsp], 48 ; 00000030H
  0002e	48 8b d0	 mov	 rdx, rax
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00036	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 868  :     }

  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?deallocate@?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAAXQEAU?$_List_node@UmfxFrameAllocResponse@@PEAX@2@_K@Z ENDP ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ PROC ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocator<std::_List_node<mfxFrameAllocResponse,void *> >, COMDAT

; 859  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0?$allocator@U?$_List_node@UmfxFrameAllocResponse@@PEAX@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::_List_node<mfxFrameAllocResponse,void *> >::allocator<std::_List_node<mfxFrameAllocResponse,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.h
;	COMDAT ??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z
_TEXT	SEGMENT
tv74 = 0
this$ = 32
response$ = 40
??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z PROC	; QSVAllocator::UniqueResponse::operator(), COMDAT

; 106  :         bool operator() (const UniqueResponse &response) const {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 107  :             return m_cropw == response.m_cropw && m_croph == response.m_croph;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00028	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  0002c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR response$[rsp]
  00031	0f b7 49 20	 movzx	 ecx, WORD PTR [rcx+32]
  00035	3b c1		 cmp	 eax, ecx
  00037	75 1f		 jne	 SHORT $LN3@operator
  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0003e	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR response$[rsp]
  00047	0f b7 49 22	 movzx	 ecx, WORD PTR [rcx+34]
  0004b	3b c1		 cmp	 eax, ecx
  0004d	75 09		 jne	 SHORT $LN3@operator
  0004f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv74[rsp], 1
  00056	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00058	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv74[rsp], 0
$LN4@operator:
  0005f	0f b6 04 24	 movzx	 eax, BYTE PTR tv74[rsp]

; 108  :         }

  00063	48 83 c4 10	 add	 rsp, 16
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
??RUniqueResponse@QSVAllocator@@QEBA_NAEBU01@@Z ENDP	; QSVAllocator::UniqueResponse::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.h
;	COMDAT ??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z
_TEXT	SEGMENT
this$ = 24
response$ = 32
cropw$ = 40
croph$ = 48
type$ = 56
??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z PROC ; QSVAllocator::UniqueResponse::UniqueResponse, COMDAT

; 104  :             m_type(type) {

$LN3:
  00000	66 44 89 4c 24
	20		 mov	 WORD PTR [rsp+32], r9w
  00006	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	56		 push	 rsi
  00017	57		 push	 rdi

; 100  :             mfxFrameAllocResponse(response),

  00018	48 8b 7c 24 18	 mov	 rdi, QWORD PTR this$[rsp]
  0001d	48 8b 74 24 20	 mov	 rsi, QWORD PTR response$[rsp]
  00022	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00027	f3 a4		 rep movsb

; 101  :             m_cropw(cropw),

  00029	48 8b 44 24 18	 mov	 rax, QWORD PTR this$[rsp]
  0002e	0f b7 4c 24 28	 movzx	 ecx, WORD PTR cropw$[rsp]
  00033	66 89 48 20	 mov	 WORD PTR [rax+32], cx

; 102  :             m_croph(croph),

  00037	48 8b 44 24 18	 mov	 rax, QWORD PTR this$[rsp]
  0003c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR croph$[rsp]
  00041	66 89 48 22	 mov	 WORD PTR [rax+34], cx

; 103  :             m_refCount(1),

  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR this$[rsp]
  0004a	c7 40 24 01 00
	00 00		 mov	 DWORD PTR [rax+36], 1

; 104  :             m_type(type) {

  00051	48 8b 44 24 18	 mov	 rax, QWORD PTR this$[rsp]
  00056	0f b7 4c 24 38	 movzx	 ecx, WORD PTR type$[rsp]
  0005b	66 89 48 28	 mov	 WORD PTR [rax+40], cx

; 105  :         }

  0005f	48 8b 44 24 18	 mov	 rax, QWORD PTR this$[rsp]
  00064	5f		 pop	 rdi
  00065	5e		 pop	 rsi
  00066	c3		 ret	 0
??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z ENDP ; QSVAllocator::UniqueResponse::UniqueResponse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
this$ = 16
request$ = 24
?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z PROC ; QSVAllocator::CheckRequestType

; 92   : mfxStatus QSVAllocator::CheckRequestType(mfxFrameAllocRequest *request) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 93   :     if (0 == request)

  0000b	48 83 7c 24 18
	00		 cmp	 QWORD PTR request$[rsp], 0
  00011	75 07		 jne	 SHORT $LN2@CheckReque

; 94   :         return MFX_ERR_NULL_PTR;

  00013	b8 fe ff ff ff	 mov	 eax, -2
  00018	eb 1d		 jmp	 SHORT $LN1@CheckReque
$LN2@CheckReque:

; 95   : 
; 96   :     if ((request->Type & MEMTYPE_FROM_MASK) != 0)

  0001a	48 8b 44 24 18	 mov	 rax, QWORD PTR request$[rsp]
  0001f	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  00023	25 00 0f 00 00	 and	 eax, 3840		; 00000f00H
  00028	85 c0		 test	 eax, eax
  0002a	74 06		 je	 SHORT $LN3@CheckReque

; 97   :         return MFX_ERR_NONE;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 07		 jmp	 SHORT $LN1@CheckReque
  00030	eb 05		 jmp	 SHORT $LN4@CheckReque
$LN3@CheckReque:

; 98   :     else
; 99   :         return MFX_ERR_UNSUPPORTED;

  00032	b8 fd ff ff ff	 mov	 eax, -3
$LN4@CheckReque:
$LN1@CheckReque:

; 100  : }

  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
?CheckRequestType@QSVAllocator@@MEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@@Z ENDP ; QSVAllocator::CheckRequestType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
response$ = 56
?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocator::Free_

; 84   : mfxStatus QSVAllocator::Free_(mfxHDL pthis, mfxFrameAllocResponse *response) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 85   :     return reinterpret_cast<QSVAllocator *>(pthis)->FrameFree(response);

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR response$[rsp]
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  00035	ff 50 38	 call	 QWORD PTR [rax+56]

; 86   : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocator::Free_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
handle$ = 64
?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z PROC ; QSVAllocator::GetHDL_

; 88   : mfxStatus QSVAllocator::GetHDL_(mfxHDL pthis, mfxMemId mid, mfxHDL *handle) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 89   :     return reinterpret_cast<QSVAllocator *>(pthis)->GetFrameHDL(mid, handle);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	4c 8b 44 24 40	 mov	 r8, QWORD PTR handle$[rsp]
  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  0003f	ff 50 30	 call	 QWORD PTR [rax+48]

; 90   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z ENDP ; QSVAllocator::GetHDL_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
ptr$ = 64
?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z PROC ; QSVAllocator::Unlock_

; 80   : mfxStatus QSVAllocator::Unlock_(mfxHDL pthis, mfxMemId mid, mfxFrameData *ptr) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 81   :     return reinterpret_cast<QSVAllocator *>(pthis)->FrameUnlock(mid, ptr);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	4c 8b 44 24 40	 mov	 r8, QWORD PTR ptr$[rsp]
  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  0003f	ff 50 28	 call	 QWORD PTR [rax+40]

; 82   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ENDP ; QSVAllocator::Unlock_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
ptr$ = 64
?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z PROC ; QSVAllocator::Lock_

; 76   : mfxStatus QSVAllocator::Lock_(mfxHDL pthis, mfxMemId mid, mfxFrameData *ptr) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 77   :     return reinterpret_cast<QSVAllocator *>(pthis)->FrameLock(mid, ptr);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	4c 8b 44 24 40	 mov	 r8, QWORD PTR ptr$[rsp]
  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  0003f	ff 50 20	 call	 QWORD PTR [rax+32]

; 78   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ENDP ; QSVAllocator::Lock_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
request$ = 56
response$ = 64
?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocator::Alloc_

; 72   : mfxStatus QSVAllocator::Alloc_(mfxHDL pthis, mfxFrameAllocRequest *request, mfxFrameAllocResponse *response) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 73   :     return reinterpret_cast<QSVAllocator *>(pthis)->FrameAlloc(request, response);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	4c 8b 44 24 40	 mov	 r8, QWORD PTR response$[rsp]
  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR request$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  0003f	ff 50 18	 call	 QWORD PTR [rax+24]

; 74   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocator::Alloc_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocator::FrameFree

; 150  : mfxStatus QSVAllocator::FrameFree(mfxFrameAllocResponse *response) {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 90 02
	00 00		 sub	 rsp, 656		; 00000290H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 a4 00 00 00	 mov	 ecx, 164		; 000000a4H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR [rsp+672]

; 151  :     if (response == 0)

  00029	48 83 bc 24 a8
	02 00 00 00	 cmp	 QWORD PTR response$[rsp], 0
  00032	75 0a		 jne	 SHORT $LN2@FrameFree

; 152  :         return MFX_ERR_INVALID_HANDLE;

  00034	b8 fa ff ff ff	 mov	 eax, -6
  00039	e9 cf 04 00 00	 jmp	 $LN1@FrameFree
$LN2@FrameFree:

; 153  : 
; 154  :     mfxStatus sts = MFX_ERR_NONE;

  0003e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR sts$[rsp], 0

; 155  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: FrameFree...\n"));

  00046	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  0005a	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv69[rsp], rax
  00062	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR tv69[rsp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG127039
  00074	ba fe ff ff ff	 mov	 edx, -2
  00079	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv69[rsp]
  00081	ff 50 20	 call	 QWORD PTR [rax+32]

; 156  : 
; 157  :     auto compare_response = [response](const mfxFrameAllocResponse & r) {
; 158  :         return r.mids != 0 && response->mids != 0 && r.mids[0] == response->mids[0] && r.NumFrameActual == response->NumFrameActual;
; 159  :     };

  00084	48 8d 94 24 a8
	02 00 00	 lea	 rdx, QWORD PTR response$[rsp]
  0008c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR compare_response$[rsp]
  00091	e8 00 00 00 00	 call	 ??0<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@QEAA@AEBQEAUmfxFrameAllocResponse@@@Z ; <lambda_165c5b987e3af5787a0fe9ef2e83e952>::<lambda_165c5b987e3af5787a0fe9ef2e83e952>

; 160  : 
; 161  :     //external decoder responseを検索
; 162  :     auto it = std::find_if(m_ExtResponses.begin(), m_ExtResponses.end(), compare_response);

  00096	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  0009e	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR $T7[rsp], rax
  000a6	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  000ae	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T9[rsp], rax
  000b6	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000be	48 83 c0 60	 add	 rax, 96			; 00000060H
  000c2	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR $T7[rsp]
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	e8 00 00 00 00	 call	 ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
  000d2	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv242[rsp], rax
  000da	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR tv242[rsp]
  000e2	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv269[rsp], rax
  000ea	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000f2	48 83 c0 60	 add	 rax, 96			; 00000060H
  000f6	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR $T9[rsp]
  000fe	48 8b c8	 mov	 rcx, rax
  00101	e8 00 00 00 00	 call	 ?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin
  00106	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv165[rsp], rax
  0010e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR tv165[rsp]
  00116	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv271[rsp], rax
  0011e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR compare_response$[rsp]
  00123	4c 8b 84 24 f8
	01 00 00	 mov	 r8, QWORD PTR tv269[rsp]
  0012b	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR tv271[rsp]
  00133	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  00138	e8 00 00 00 00	 call	 ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
  0013d	90		 npad	 1

; 163  :     if (it != m_ExtResponses.end()) {

  0013e	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00146	48 83 c0 60	 add	 rax, 96			; 00000060H
  0014a	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  00152	48 8b c8	 mov	 rcx, rax
  00155	e8 00 00 00 00	 call	 ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
  0015a	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv75[rsp], rax
  00162	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR tv75[rsp]
  0016a	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv274[rsp], rax
  00172	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR tv274[rsp]
  0017a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  0017f	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=
  00184	88 84 24 e8 00
	00 00		 mov	 BYTE PTR $T10[rsp], al
  0018b	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  00193	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00198	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR $T10[rsp]
  001a0	85 c0		 test	 eax, eax
  001a2	0f 84 eb 00 00
	00		 je	 $LN3@FrameFree

; 164  :         if ((--it->m_refCount) == 0) {

  001a8	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  001ad	e8 00 00 00 00	 call	 ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->
  001b2	48 83 c0 24	 add	 rax, 36			; 00000024H
  001b6	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv155[rsp], rax
  001be	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR tv155[rsp]
  001c6	8b 00		 mov	 eax, DWORD PTR [rax]
  001c8	ff c8		 dec	 eax
  001ca	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR tv155[rsp]
  001d2	89 01		 mov	 DWORD PTR [rcx], eax
  001d4	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR tv155[rsp]
  001dc	83 38 00	 cmp	 DWORD PTR [rax], 0
  001df	0f 85 8d 00 00
	00		 jne	 $LN4@FrameFree

; 165  :             sts = ReleaseResponse(response);

  001e5	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f0	48 8b 94 24 a8
	02 00 00	 mov	 rdx, QWORD PTR response$[rsp]
  001f8	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00200	ff 50 48	 call	 QWORD PTR [rax+72]
  00203	89 44 24 20	 mov	 DWORD PTR sts$[rsp], eax

; 166  :             m_ExtResponses.erase(it);

  00207	48 8d 84 24 08
	01 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0020f	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR $T13[rsp], rax
  00217	48 8d 54 24 58	 lea	 rdx, QWORD PTR it$[rsp]
  0021c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR $T13[rsp]
  00224	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  00229	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv293[rsp], rax
  00231	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR tv293[rsp]
  00239	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv276[rsp], rax
  00241	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00249	48 83 c0 60	 add	 rax, 96			; 00000060H
  0024d	4c 8b 84 24 30
	02 00 00	 mov	 r8, QWORD PTR tv276[rsp]
  00255	48 8d 94 24 28
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0025d	48 8b c8	 mov	 rcx, rax
  00260	e8 00 00 00 00	 call	 ?erase@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::erase
  00265	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  0026d	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@FrameFree:

; 167  :         }
; 168  :         return sts;

  00272	8b 44 24 20	 mov	 eax, DWORD PTR sts$[rsp]
  00276	89 84 24 40 01
	00 00		 mov	 DWORD PTR $T15[rsp], eax
  0027d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  00282	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00287	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR $T15[rsp]
  0028e	e9 7a 02 00 00	 jmp	 $LN1@FrameFree
$LN3@FrameFree:

; 169  :     }
; 170  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: FrameFree external success.\n"));

  00293	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0029b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0029f	48 8b c8	 mov	 rcx, rax
  002a2	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  002a7	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv186[rsp], rax
  002af	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR tv186[rsp]
  002b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG127044
  002c1	ba fe ff ff ff	 mov	 edx, -2
  002c6	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv186[rsp]
  002ce	ff 50 20	 call	 QWORD PTR [rax+32]

; 171  : 
; 172  :     //internal responsesを検索
; 173  :     auto it2 = std::find_if(m_responses.begin(), m_responses.end(), compare_response);

  002d1	48 8d 84 24 48
	01 00 00	 lea	 rax, QWORD PTR $T16[rsp]
  002d9	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR $T17[rsp], rax
  002e1	48 8d 84 24 68
	01 00 00	 lea	 rax, QWORD PTR $T18[rsp]
  002e9	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR $T19[rsp], rax
  002f1	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002f9	48 83 c0 48	 add	 rax, 72			; 00000048H
  002fd	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR $T17[rsp]
  00305	48 8b c8	 mov	 rcx, rax
  00308	e8 00 00 00 00	 call	 ?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
  0030d	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv294[rsp], rax
  00315	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR tv294[rsp]
  0031d	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv280[rsp], rax
  00325	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0032d	48 83 c0 48	 add	 rax, 72			; 00000048H
  00331	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR $T19[rsp]
  00339	48 8b c8	 mov	 rcx, rax
  0033c	e8 00 00 00 00	 call	 ?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin
  00341	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv295[rsp], rax
  00349	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR tv295[rsp]
  00351	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv282[rsp], rax
  00359	4c 8b 4c 24 38	 mov	 r9, QWORD PTR compare_response$[rsp]
  0035e	4c 8b 84 24 48
	02 00 00	 mov	 r8, QWORD PTR tv280[rsp]
  00366	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR tv282[rsp]
  0036e	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR it2$[rsp]
  00376	e8 00 00 00 00	 call	 ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@0@V10@V10@V<lambda_165c5b987e3af5787a0fe9ef2e83e952>@@@Z ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >,<lambda_165c5b987e3af5787a0fe9ef2e83e952> >
  0037b	90		 npad	 1

; 174  :     if (it2 != m_responses.end()) {

  0037c	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00384	48 83 c0 48	 add	 rax, 72			; 00000048H
  00388	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00390	48 8b c8	 mov	 rcx, rax
  00393	e8 00 00 00 00	 call	 ?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
  00398	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv191[rsp], rax
  003a0	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR tv191[rsp]
  003a8	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv285[rsp], rax
  003b0	48 8b 94 24 68
	02 00 00	 mov	 rdx, QWORD PTR tv285[rsp]
  003b8	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR it2$[rsp]
  003c0	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator!=
  003c5	88 84 24 88 01
	00 00		 mov	 BYTE PTR $T20[rsp], al
  003cc	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR $T21[rsp]
  003d4	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  003d9	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR $T20[rsp]
  003e1	85 c0		 test	 eax, eax
  003e3	0f 84 bc 00 00
	00		 je	 $LN5@FrameFree

; 175  :         sts = ReleaseResponse(response);

  003e9	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003f4	48 8b 94 24 a8
	02 00 00	 mov	 rdx, QWORD PTR response$[rsp]
  003fc	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00404	ff 50 48	 call	 QWORD PTR [rax+72]
  00407	89 44 24 20	 mov	 DWORD PTR sts$[rsp], eax

; 176  :         m_responses.erase(it2);

  0040b	48 8d 84 24 a8
	01 00 00	 lea	 rax, QWORD PTR $T22[rsp]
  00413	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR $T23[rsp], rax
  0041b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR it2$[rsp]
  00423	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR $T23[rsp]
  0042b	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@AEBV01@@Z
  00430	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv296[rsp], rax
  00438	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv296[rsp]
  00440	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv287[rsp], rax
  00448	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00450	48 83 c0 48	 add	 rax, 72			; 00000048H
  00454	4c 8b 84 24 78
	02 00 00	 mov	 r8, QWORD PTR tv287[rsp]
  0045c	48 8d 94 24 c8
	01 00 00	 lea	 rdx, QWORD PTR $T24[rsp]
  00464	48 8b c8	 mov	 rcx, rax
  00467	e8 00 00 00 00	 call	 ?erase@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::erase
  0046c	48 8d 8c 24 c8
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  00474	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ

; 177  :         return sts;

  00479	8b 44 24 20	 mov	 eax, DWORD PTR sts$[rsp]
  0047d	89 84 24 e0 01
	00 00		 mov	 DWORD PTR $T25[rsp], eax
  00484	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR it2$[rsp]
  0048c	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00491	90		 npad	 1
  00492	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  00497	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0049c	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR $T25[rsp]
  004a3	eb 68		 jmp	 SHORT $LN1@FrameFree
$LN5@FrameFree:

; 178  :     }
; 179  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: FrameFree internal success.\n"));

  004a5	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004ad	48 83 c0 78	 add	 rax, 120		; 00000078H
  004b1	48 8b c8	 mov	 rcx, rax
  004b4	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  004b9	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv263[rsp], rax
  004c1	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR tv263[rsp]
  004c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG127048
  004d3	ba fe ff ff ff	 mov	 edx, -2
  004d8	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv263[rsp]
  004e0	ff 50 20	 call	 QWORD PTR [rax+32]

; 180  :     return MFX_ERR_INVALID_HANDLE;

  004e3	c7 84 24 e4 01
	00 00 fa ff ff
	ff		 mov	 DWORD PTR $T26[rsp], -6
  004ee	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR it2$[rsp]
  004f6	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  004fb	90		 npad	 1
  004fc	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it$[rsp]
  00501	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00506	8b 84 24 e4 01
	00 00		 mov	 eax, DWORD PTR $T26[rsp]
$LN1@FrameFree:

; 181  : }

  0050d	48 8b f8	 mov	 rdi, rax
  00510	48 8b cc	 mov	 rcx, rsp
  00513	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData
  0051a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0051f	48 8b c7	 mov	 rax, rdi
  00522	48 81 c4 90 02
	00 00		 add	 rsp, 656		; 00000290H
  00529	5f		 pop	 rdi
  0052a	c3		 ret	 0
?FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocator::FrameFree
_TEXT	ENDS
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$0
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$1
  00026	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00030	55		 push	 rbp
  00031	57		 push	 rdi
  00032	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00036	48 8b ea	 mov	 rbp, rdx
  00039	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR $T9[rbp]
  00040	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$1
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$2
  0004c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00051	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00056	55		 push	 rbp
  00057	57		 push	 rdi
  00058	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005c	48 8b ea	 mov	 rbp, rdx
  0005f	48 8d 4d 58	 lea	 rcx, QWORD PTR it$[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$2
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8b ea	 mov	 rbp, rdx
  00082	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00089	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0008e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$3
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$4
  00095	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0009f	55		 push	 rbp
  000a0	57		 push	 rdi
  000a1	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a5	48 8b ea	 mov	 rbp, rdx
  000a8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR $T13[rbp]
  000af	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000b4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$4
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$6
  000bb	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c0	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c5	55		 push	 rbp
  000c6	57		 push	 rdi
  000c7	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cb	48 8b ea	 mov	 rbp, rdx
  000ce	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR $T17[rbp]
  000d5	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  000da	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000de	5f		 pop	 rdi
  000df	5d		 pop	 rbp
  000e0	c3		 ret	 0
?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$6
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$7
  000e1	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000e6	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000eb	55		 push	 rbp
  000ec	57		 push	 rdi
  000ed	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000f1	48 8b ea	 mov	 rbp, rdx
  000f4	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR $T19[rbp]
  000fb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00100	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00104	5f		 pop	 rdi
  00105	5d		 pop	 rbp
  00106	c3		 ret	 0
?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$7
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$8
  00107	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0010c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00111	55		 push	 rbp
  00112	57		 push	 rdi
  00113	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00117	48 8b ea	 mov	 rbp, rdx
  0011a	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR it2$[rbp]
  00121	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00126	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012a	5f		 pop	 rdi
  0012b	5d		 pop	 rbp
  0012c	c3		 ret	 0
?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$8
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$9
  0012d	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00132	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00137	55		 push	 rbp
  00138	57		 push	 rdi
  00139	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0013d	48 8b ea	 mov	 rbp, rdx
  00140	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00147	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0014c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00150	5f		 pop	 rdi
  00151	5d		 pop	 rbp
  00152	c3		 ret	 0
?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$9
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$10
  00153	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00158	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0015d	55		 push	 rbp
  0015e	57		 push	 rdi
  0015f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00163	48 8b ea	 mov	 rbp, rdx
  00166	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR $T23[rbp]
  0016d	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00172	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00176	5f		 pop	 rdi
  00177	5d		 pop	 rbp
  00178	c3		 ret	 0
?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR $T7[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$1
  00026	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00030	55		 push	 rbp
  00031	57		 push	 rdi
  00032	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00036	48 8b ea	 mov	 rbp, rdx
  00039	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR $T9[rbp]
  00040	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?dtor$1@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$2
  0004c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00051	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00056	55		 push	 rbp
  00057	57		 push	 rdi
  00058	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005c	48 8b ea	 mov	 rbp, rdx
  0005f	48 8d 4d 58	 lea	 rcx, QWORD PTR it$[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8b ea	 mov	 rbp, rdx
  00082	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00089	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0008e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00092	5f		 pop	 rdi
  00093	5d		 pop	 rbp
  00094	c3		 ret	 0
?dtor$3@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$4
  00095	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0009a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0009f	55		 push	 rbp
  000a0	57		 push	 rdi
  000a1	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a5	48 8b ea	 mov	 rbp, rdx
  000a8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR $T13[rbp]
  000af	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000b4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b8	5f		 pop	 rdi
  000b9	5d		 pop	 rbp
  000ba	c3		 ret	 0
?dtor$4@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$6
  000bb	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000c0	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000c5	55		 push	 rbp
  000c6	57		 push	 rdi
  000c7	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000cb	48 8b ea	 mov	 rbp, rdx
  000ce	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR $T17[rbp]
  000d5	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  000da	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000de	5f		 pop	 rdi
  000df	5d		 pop	 rbp
  000e0	c3		 ret	 0
?dtor$6@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$7
  000e1	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000e6	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000eb	55		 push	 rbp
  000ec	57		 push	 rdi
  000ed	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000f1	48 8b ea	 mov	 rbp, rdx
  000f4	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR $T19[rbp]
  000fb	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00100	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00104	5f		 pop	 rdi
  00105	5d		 pop	 rbp
  00106	c3		 ret	 0
?dtor$7@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$8
  00107	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0010c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00111	55		 push	 rbp
  00112	57		 push	 rdi
  00113	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00117	48 8b ea	 mov	 rbp, rdx
  0011a	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR it2$[rbp]
  00121	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00126	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012a	5f		 pop	 rdi
  0012b	5d		 pop	 rbp
  0012c	c3		 ret	 0
?dtor$8@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$8
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$9
  0012d	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00132	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00137	55		 push	 rbp
  00138	57		 push	 rdi
  00139	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0013d	48 8b ea	 mov	 rbp, rdx
  00140	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00147	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0014c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00150	5f		 pop	 rdi
  00151	5d		 pop	 rbp
  00152	c3		 ret	 0
?dtor$9@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$9
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 32
compare_response$ = 56
it$ = 88
it2$ = 136
$T6 = 168
$T7 = 192
$T8 = 200
$T9 = 224
$T10 = 232
$T11 = 240
$T12 = 264
$T13 = 288
$T14 = 296
$T15 = 320
$T16 = 328
$T17 = 352
$T18 = 360
$T19 = 384
$T20 = 392
$T21 = 400
$T22 = 424
$T23 = 448
$T24 = 456
$T25 = 480
$T26 = 484
tv69 = 488
tv242 = 496
tv269 = 504
tv165 = 512
tv271 = 520
tv75 = 528
tv274 = 536
tv155 = 544
tv293 = 552
tv276 = 560
tv186 = 568
tv294 = 576
tv280 = 584
tv295 = 592
tv282 = 600
tv191 = 608
tv285 = 616
tv296 = 624
tv287 = 632
tv263 = 640
this$ = 672
response$ = 680
?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameFree'::`1'::dtor$10
  00153	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00158	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0015d	55		 push	 rbp
  0015e	57		 push	 rdi
  0015f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00163	48 8b ea	 mov	 rbp, rdx
  00166	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR $T23[rbp]
  0016d	e8 00 00 00 00	 call	 ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00172	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00176	5f		 pop	 rdi
  00177	5d		 pop	 rbp
  00178	c3		 ret	 0
?dtor$10@?0??FrameFree@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameFree'::`1'::dtor$10
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z PROC ; QSVAllocator::FrameAlloc

; 102  : mfxStatus QSVAllocator::FrameAlloc(mfxFrameAllocRequest *request, mfxFrameAllocResponse *response) {

$LN20:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR [rsp+656]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c4	 xor	 rax, rsp
  00039	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 103  :     if (0 == request || 0 == response || 0 == request->NumFrameSuggested) {

  00041	48 83 bc 24 98
	02 00 00 00	 cmp	 QWORD PTR request$[rsp], 0
  0004a	74 1b		 je	 SHORT $LN3@FrameAlloc
  0004c	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR response$[rsp], 0
  00055	74 10		 je	 SHORT $LN3@FrameAlloc
  00057	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0005f	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  00063	85 c0		 test	 eax, eax
  00065	75 0a		 jne	 SHORT $LN2@FrameAlloc
$LN3@FrameAlloc:

; 104  :         return MFX_ERR_MEMORY_ALLOC;

  00067	b8 fc ff ff ff	 mov	 eax, -4
  0006c	e9 6f 06 00 00	 jmp	 $LN1@FrameAlloc
$LN2@FrameAlloc:

; 105  :     }
; 106  :     mfxStatus sts = MFX_ERR_NONE;

  00071	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR sts$[rsp], 0

; 107  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: FrameAlloc: %s, %d frames.\n"), qsv_memtype_str(request->Type).c_str(), request->NumFrameSuggested);

  00079	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00081	48 83 c0 78	 add	 rax, 120		; 00000078H
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  0008d	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv73[rsp], rax
  00095	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0009d	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  000a1	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  000a8	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR request$[rsp]
  000b0	0f b7 51 54	 movzx	 edx, WORD PTR [rcx+84]
  000b4	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T4[rsp]
  000b9	e8 00 00 00 00	 call	 ?qsv_memtype_str@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@G@Z ; qsv_memtype_str
  000be	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
  000c6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR tv336[rsp]
  000ce	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv326[rsp], rax
  000d6	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv326[rsp]
  000de	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000e3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv73[rsp]
  000eb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ee	48 89 8c 24 d0
	01 00 00	 mov	 QWORD PTR tv350[rsp], rcx
  000f6	8b 94 24 b8 01
	00 00		 mov	 edx, DWORD PTR tv77[rsp]
  000fd	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00101	4c 8b c8	 mov	 r9, rax
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126780
  0010b	ba fe ff ff ff	 mov	 edx, -2
  00110	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv73[rsp]
  00118	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR tv350[rsp]
  00120	ff 50 20	 call	 QWORD PTR [rax+32]
  00123	90		 npad	 1
  00124	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T4[rsp]
  00129	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 108  :     if (MFX_ERR_NONE != (sts = CheckRequestType(request))) {

  0012e	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00136	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00139	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR request$[rsp]
  00141	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00149	ff 50 40	 call	 QWORD PTR [rax+64]
  0014c	89 44 24 30	 mov	 DWORD PTR sts$[rsp], eax
  00150	83 7c 24 30 00	 cmp	 DWORD PTR sts$[rsp], 0
  00155	74 64		 je	 SHORT $LN4@FrameAlloc

; 109  :         m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocator: Failed CheckRequestType: %s\n"), get_err_mes(sts));

  00157	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0015f	48 83 c0 78	 add	 rax, 120		; 00000078H
  00163	48 8b c8	 mov	 rcx, rax
  00166	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  0016b	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv132[rsp], rax
  00173	8b 4c 24 30	 mov	 ecx, DWORD PTR sts$[rsp]
  00177	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  0017c	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv132[rsp]
  00184	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00187	48 89 8c 24 e0
	01 00 00	 mov	 QWORD PTR tv348[rsp], rcx
  0018f	4c 8b c8	 mov	 r9, rax
  00192	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126782
  00199	ba 02 00 00 00	 mov	 edx, 2
  0019e	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv132[rsp]
  001a6	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR tv348[rsp]
  001ae	ff 50 20	 call	 QWORD PTR [rax+32]

; 110  :         return MFX_ERR_UNSUPPORTED;

  001b1	b8 fd ff ff ff	 mov	 eax, -3
  001b6	e9 25 05 00 00	 jmp	 $LN1@FrameAlloc
$LN4@FrameAlloc:

; 111  :     }
; 112  : 
; 113  : 
; 114  :     if ((request->Type & (MFX_MEMTYPE_EXTERNAL_FRAME | MFX_MEMTYPE_FROM_DECODE)) == (MFX_MEMTYPE_EXTERNAL_FRAME | MFX_MEMTYPE_FROM_DECODE)) {

  001bb	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  001c3	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  001c7	25 02 02 00 00	 and	 eax, 514		; 00000202H
  001cc	3d 02 02 00 00	 cmp	 eax, 514		; 00000202H
  001d1	0f 85 8c 03 00
	00		 jne	 $LN5@FrameAlloc

; 115  :         //external
; 116  :         m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: Allocate type external.\n"));

  001d7	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001df	48 83 c0 78	 add	 rax, 120		; 00000078H
  001e3	48 8b c8	 mov	 rcx, rax
  001e6	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  001eb	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv148[rsp], rax
  001f3	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR tv148[rsp]
  001fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126785
  00205	ba fe ff ff ff	 mov	 edx, -2
  0020a	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv148[rsp]
  00212	ff 50 20	 call	 QWORD PTR [rax+32]

; 117  :         auto it = std::find_if( m_ExtResponses.begin(), m_ExtResponses.end(), UniqueResponse(*response, request->Info.CropW, request->Info.CropH, 0));

  00215	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  0021d	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR $T10[rsp], rax
  00225	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  0022d	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR $T12[rsp], rax
  00235	66 c7 44 24 20
	00 00		 mov	 WORD PTR [rsp+32], 0
  0023c	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00244	44 0f b7 48 3e	 movzx	 r9d, WORD PTR [rax+62]
  00249	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00251	44 0f b7 40 3c	 movzx	 r8d, WORD PTR [rax+60]
  00256	48 8b 94 24 a0
	02 00 00	 mov	 rdx, QWORD PTR response$[rsp]
  0025e	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00266	e8 00 00 00 00	 call	 ??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z ; QSVAllocator::UniqueResponse::UniqueResponse
  0026b	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  00273	48 8b f9	 mov	 rdi, rcx
  00276	48 8b f0	 mov	 rsi, rax
  00279	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0027e	f3 a4		 rep movsb
  00280	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00288	48 83 c0 60	 add	 rax, 96			; 00000060H
  0028c	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR $T10[rsp]
  00294	48 8b c8	 mov	 rcx, rax
  00297	e8 00 00 00 00	 call	 ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
  0029c	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
  002a4	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR tv337[rsp]
  002ac	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv328[rsp], rax
  002b4	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002bc	48 83 c0 60	 add	 rax, 96			; 00000060H
  002c0	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR $T12[rsp]
  002c8	48 8b c8	 mov	 rcx, rax
  002cb	e8 00 00 00 00	 call	 ?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin
  002d0	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv338[rsp], rax
  002d8	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  002e0	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv330[rsp], rax
  002e8	4c 8d 8c 24 80
	01 00 00	 lea	 r9, QWORD PTR $T17[rsp]
  002f0	4c 8b 84 24 f8
	01 00 00	 mov	 r8, QWORD PTR tv328[rsp]
  002f8	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR tv330[rsp]
  00300	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  00305	e8 00 00 00 00	 call	 ??$find_if@V?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@UUniqueResponse@QSVAllocator@@@std@@YA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@0@V10@V10@UUniqueResponse@QSVAllocator@@@Z ; std::find_if<std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >,QSVAllocator::UniqueResponse>
  0030a	90		 npad	 1

; 118  : 
; 119  :         if (it != m_ExtResponses.end()) {

  0030b	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00313	48 83 c0 60	 add	 rax, 96			; 00000060H
  00317	48 8d 94 24 58
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0031f	48 8b c8	 mov	 rcx, rax
  00322	e8 00 00 00 00	 call	 ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
  00327	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv153[rsp], rax
  0032f	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR tv153[rsp]
  00337	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv333[rsp], rax
  0033f	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR tv333[rsp]
  00347	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  0034c	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=
  00351	88 84 24 50 01
	00 00		 mov	 BYTE PTR $T13[rsp], al
  00358	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  00360	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00365	0f b6 84 24 50
	01 00 00	 movzx	 eax, BYTE PTR $T13[rsp]
  0036d	85 c0		 test	 eax, eax
  0036f	0f 84 d8 00 00
	00		 je	 $LN7@FrameAlloc

; 120  :             if (request->NumFrameSuggested > it->NumFrameActual) {

  00375	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0037d	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  00381	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv208[rsp], eax
  00388	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  0038d	e8 00 00 00 00	 call	 ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->
  00392	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00396	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR tv208[rsp]
  0039d	3b c8		 cmp	 ecx, eax
  0039f	7e 5f		 jle	 SHORT $LN9@FrameAlloc

; 121  :                 m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocator: NumFrameSuggested > it->NumFrameActual\n"));

  003a1	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003a9	48 83 c0 78	 add	 rax, 120		; 00000078H
  003ad	48 8b c8	 mov	 rcx, rax
  003b0	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  003b5	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv222[rsp], rax
  003bd	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR tv222[rsp]
  003c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126790
  003cf	ba 02 00 00 00	 mov	 edx, 2
  003d4	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR tv222[rsp]
  003dc	ff 50 20	 call	 QWORD PTR [rax+32]

; 122  :                 return MFX_ERR_MEMORY_ALLOC;

  003df	c7 84 24 70 01
	00 00 fc ff ff
	ff		 mov	 DWORD PTR $T15[rsp], -4
  003ea	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  003ef	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  003f4	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR $T15[rsp]
  003fb	e9 e0 02 00 00	 jmp	 $LN1@FrameAlloc
$LN9@FrameAlloc:

; 123  :             }
; 124  : 
; 125  :             it->m_refCount++;

  00400	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  00405	e8 00 00 00 00	 call	 ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAPEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator->
  0040a	48 83 c0 24	 add	 rax, 36			; 00000024H
  0040e	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv230[rsp], rax
  00416	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR tv230[rsp]
  0041e	8b 00		 mov	 eax, DWORD PTR [rax]
  00420	ff c0		 inc	 eax
  00422	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR tv230[rsp]
  0042a	89 01		 mov	 DWORD PTR [rcx], eax

; 126  :             *response = (mfxFrameAllocResponse&)*it;

  0042c	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  00431	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
  00436	48 8b bc 24 a0
	02 00 00	 mov	 rdi, QWORD PTR response$[rsp]
  0043e	48 8b f0	 mov	 rsi, rax
  00441	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00446	f3 a4		 rep movsb
  00448	e9 07 01 00 00	 jmp	 $LN8@FrameAlloc
$LN7@FrameAlloc:

; 127  :         } else if (MFX_ERR_NONE == (sts = AllocImpl(request, response))) {

  0044d	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00455	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00458	4c 8b 84 24 a0
	02 00 00	 mov	 r8, QWORD PTR response$[rsp]
  00460	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR request$[rsp]
  00468	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00470	ff 50 50	 call	 QWORD PTR [rax+80]
  00473	89 44 24 30	 mov	 DWORD PTR sts$[rsp], eax
  00477	83 7c 24 30 00	 cmp	 DWORD PTR sts$[rsp], 0
  0047c	75 5b		 jne	 SHORT $LN10@FrameAlloc

; 128  :             m_ExtResponses.push_back(UniqueResponse(*response, request->Info.CropW, request->Info.CropH, request->Type & MEMTYPE_FROM_MASK));

  0047e	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  00486	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  0048a	25 00 0f 00 00	 and	 eax, 3840		; 00000f00H
  0048f	66 89 44 24 20	 mov	 WORD PTR [rsp+32], ax
  00494	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  0049c	44 0f b7 48 3e	 movzx	 r9d, WORD PTR [rax+62]
  004a1	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR request$[rsp]
  004a9	44 0f b7 40 3c	 movzx	 r8d, WORD PTR [rax+60]
  004ae	48 8b 94 24 a0
	02 00 00	 mov	 rdx, QWORD PTR response$[rsp]
  004b6	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  004be	e8 00 00 00 00	 call	 ??0UniqueResponse@QSVAllocator@@QEAA@AEBUmfxFrameAllocResponse@@GGG@Z ; QSVAllocator::UniqueResponse::UniqueResponse
  004c3	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004cb	48 83 c1 60	 add	 rcx, 96			; 00000060H
  004cf	48 8b d0	 mov	 rdx, rax
  004d2	e8 00 00 00 00	 call	 ?push_back@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAX$$QEAUUniqueResponse@QSVAllocator@@@Z ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::push_back

; 129  :         } else {

  004d7	eb 7b		 jmp	 SHORT $LN8@FrameAlloc
$LN10@FrameAlloc:

; 130  :             m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocator: Failed Allocate type external: %s\n"), get_err_mes(sts));

  004d9	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004e1	48 83 c0 78	 add	 rax, 120		; 00000078H
  004e5	48 8b c8	 mov	 rcx, rax
  004e8	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  004ed	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv267[rsp], rax
  004f5	8b 4c 24 30	 mov	 ecx, DWORD PTR sts$[rsp]
  004f9	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  004fe	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv267[rsp]
  00506	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00509	48 89 8c 24 40
	02 00 00	 mov	 QWORD PTR tv343[rsp], rcx
  00511	4c 8b c8	 mov	 r9, rax
  00514	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126794
  0051b	ba 02 00 00 00	 mov	 edx, 2
  00520	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv267[rsp]
  00528	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR tv343[rsp]
  00530	ff 50 20	 call	 QWORD PTR [rax+32]

; 131  :             return sts;

  00533	8b 44 24 30	 mov	 eax, DWORD PTR sts$[rsp]
  00537	89 84 24 74 01
	00 00		 mov	 DWORD PTR $T16[rsp], eax
  0053e	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  00543	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00548	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR $T16[rsp]
  0054f	e9 8c 01 00 00	 jmp	 $LN1@FrameAlloc
$LN8@FrameAlloc:

; 132  :         }
; 133  :     } else {

  00554	48 8d 4c 24 68	 lea	 rcx, QWORD PTR it$5[rsp]
  00559	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0055e	e9 3b 01 00 00	 jmp	 $LN6@FrameAlloc
$LN5@FrameAlloc:

; 134  :         //internal
; 135  :         m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: Allocate type internal.\n"));

  00563	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0056b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0056f	48 8b c8	 mov	 rcx, rax
  00572	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00577	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv279[rsp], rax
  0057f	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR tv279[rsp]
  00587	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0058a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126796
  00591	ba fe ff ff ff	 mov	 edx, -2
  00596	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv279[rsp]
  0059e	ff 50 20	 call	 QWORD PTR [rax+32]

; 136  :         m_responses.push_back(mfxFrameAllocResponse());

  005a1	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  005a9	48 8b f8	 mov	 rdi, rax
  005ac	33 c0		 xor	 eax, eax
  005ae	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  005b3	f3 aa		 rep stosb
  005b5	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  005bd	48 83 c0 48	 add	 rax, 72			; 00000048H
  005c1	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR $T8[rsp]
  005c9	48 8b c8	 mov	 rcx, rax
  005cc	e8 00 00 00 00	 call	 ?push_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAX$$QEAUmfxFrameAllocResponse@@@Z ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::push_back

; 137  :         sts = AllocImpl(request, response);

  005d1	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  005d9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005dc	4c 8b 84 24 a0
	02 00 00	 mov	 r8, QWORD PTR response$[rsp]
  005e4	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR request$[rsp]
  005ec	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005f4	ff 50 50	 call	 QWORD PTR [rax+80]
  005f7	89 44 24 30	 mov	 DWORD PTR sts$[rsp], eax

; 138  :         if (sts == MFX_ERR_NONE) {

  005fb	83 7c 24 30 00	 cmp	 DWORD PTR sts$[rsp], 0
  00600	75 28		 jne	 SHORT $LN12@FrameAlloc

; 139  :             m_responses.back() = *response;

  00602	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0060a	48 83 c0 48	 add	 rax, 72			; 00000048H
  0060e	48 8b c8	 mov	 rcx, rax
  00611	e8 00 00 00 00	 call	 ?back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAAEAUmfxFrameAllocResponse@@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::back
  00616	48 8b f8	 mov	 rdi, rax
  00619	48 8b b4 24 a0
	02 00 00	 mov	 rsi, QWORD PTR response$[rsp]
  00621	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00626	f3 a4		 rep movsb

; 140  :         } else {

  00628	eb 74		 jmp	 SHORT $LN6@FrameAlloc
$LN12@FrameAlloc:

; 141  :             m_responses.pop_back();

  0062a	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00632	48 83 c0 48	 add	 rax, 72			; 00000048H
  00636	48 8b c8	 mov	 rcx, rax
  00639	e8 00 00 00 00	 call	 ?pop_back@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAAXXZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::pop_back

; 142  :             m_pQSVLog->write(RGY_LOG_ERROR, _T("QSVAllocator: Failed Allocate type internal: %s\n"), get_err_mes(sts));

  0063e	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00646	48 83 c0 78	 add	 rax, 120		; 00000078H
  0064a	48 8b c8	 mov	 rcx, rax
  0064d	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00652	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv308[rsp], rax
  0065a	8b 4c 24 30	 mov	 ecx, DWORD PTR sts$[rsp]
  0065e	e8 00 00 00 00	 call	 ?get_err_mes@@YAPEBDH@Z	; get_err_mes
  00663	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv308[rsp]
  0066b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0066e	48 89 8c 24 58
	02 00 00	 mov	 QWORD PTR tv340[rsp], rcx
  00676	4c 8b c8	 mov	 r9, rax
  00679	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126799
  00680	ba 02 00 00 00	 mov	 edx, 2
  00685	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv308[rsp]
  0068d	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR tv340[rsp]
  00695	ff 50 20	 call	 QWORD PTR [rax+32]

; 143  :             return sts;

  00698	8b 44 24 30	 mov	 eax, DWORD PTR sts$[rsp]
  0069c	eb 42		 jmp	 SHORT $LN1@FrameAlloc
$LN6@FrameAlloc:

; 144  :         }
; 145  :     }
; 146  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: FrameAlloc success.\n"));

  0069e	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006a6	48 83 c0 78	 add	 rax, 120		; 00000078H
  006aa	48 8b c8	 mov	 rcx, rax
  006ad	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  006b2	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv320[rsp], rax
  006ba	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR tv320[rsp]
  006c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG126800
  006cc	ba fe ff ff ff	 mov	 edx, -2
  006d1	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR tv320[rsp]
  006d9	ff 50 20	 call	 QWORD PTR [rax+32]

; 147  :     return sts;

  006dc	8b 44 24 30	 mov	 eax, DWORD PTR sts$[rsp]
$LN1@FrameAlloc:

; 148  : }

  006e0	48 8b f8	 mov	 rdi, rax
  006e3	48 8b cc	 mov	 rcx, rsp
  006e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z$rtcFrameData
  006ed	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006f2	48 8b c7	 mov	 rax, rdi
  006f5	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006fd	48 33 cc	 xor	 rcx, rsp
  00700	e8 00 00 00 00	 call	 __security_check_cookie
  00705	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  0070c	5f		 pop	 rdi
  0070d	5e		 pop	 rsi
  0070e	c3		 ret	 0
?FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ENDP ; QSVAllocator::FrameAlloc
_TEXT	ENDS
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR $T4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$0
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T10[rbp]
  0003d	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$1
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$2
  00049	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00053	55		 push	 rbp
  00054	57		 push	 rdi
  00055	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00059	48 8b ea	 mov	 rbp, rdx
  0005c	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR $T12[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$2
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8b ea	 mov	 rbp, rdx
  00082	48 8d 4d 68	 lea	 rcx, QWORD PTR it$5[rbp]
  00086	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0008b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$3
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$4
  00092	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00097	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0009c	55		 push	 rbp
  0009d	57		 push	 rdi
  0009e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a2	48 8b ea	 mov	 rbp, rdx
  000a5	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  000ac	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR $T4[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR $T10[rbp]
  0003d	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$1@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$2
  00049	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00053	55		 push	 rbp
  00054	57		 push	 rdi
  00055	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00059	48 8b ea	 mov	 rbp, rdx
  0005c	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR $T12[rbp]
  00063	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?dtor$2@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$3
  0006f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00074	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00079	55		 push	 rbp
  0007a	57		 push	 rdi
  0007b	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007f	48 8b ea	 mov	 rbp, rdx
  00082	48 8d 4d 68	 lea	 rcx, QWORD PTR it$5[rbp]
  00086	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0008b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
?dtor$3@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
sts$ = 48
$T4 = 56
it$5 = 104
$T6 = 136
$T7 = 184
$T8 = 232
$T9 = 272
$T10 = 296
$T11 = 304
$T12 = 328
$T13 = 336
$T14 = 344
$T15 = 368
$T16 = 372
$T17 = 384
tv73 = 432
tv77 = 440
tv336 = 448
tv326 = 456
tv350 = 464
tv132 = 472
tv348 = 480
tv148 = 488
tv337 = 496
tv328 = 504
tv338 = 512
tv330 = 520
tv153 = 528
tv333 = 536
tv208 = 544
tv222 = 552
tv230 = 560
tv267 = 568
tv343 = 576
tv279 = 584
tv308 = 592
tv340 = 600
tv320 = 608
__$ArrayPad$ = 616
this$ = 656
request$ = 664
response$ = 672
?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA PROC ; `QSVAllocator::FrameAlloc'::`1'::dtor$4
  00092	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00097	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0009c	55		 push	 rbp
  0009d	57		 push	 rdi
  0009e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000a2	48 8b ea	 mov	 rbp, rdx
  000a5	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  000ac	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
?dtor$4@?0??FrameAlloc@QSVAllocator@@UEAA?AW4mfxStatus@@PEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z@4HA ENDP ; `QSVAllocator::FrameAlloc'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ PROC		; QSVAllocator::Close

; 183  : mfxStatus QSVAllocator::Close() {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR [rsp+304]

; 184  :     for (auto it = m_ExtResponses.begin(); it != m_ExtResponses.end(); it++) {

  00024	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00030	48 8d 54 24 28	 lea	 rdx, QWORD PTR it$5[rsp]
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ?begin@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::begin
  0003d	90		 npad	 1
  0003e	eb 1c		 jmp	 SHORT $LN4@Close
$LN2@Close:
  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8d 54 24 78	 lea	 rdx, QWORD PTR $T7[rsp]
  00048	48 8d 4c 24 28	 lea	 rcx, QWORD PTR it$5[rsp]
  0004d	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator++
  00052	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T7[rsp]
  00057	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
$LN4@Close:
  0005c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00064	48 83 c0 60	 add	 rax, 96			; 00000060H
  00068	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 ?end@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@2@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::end
  00078	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00080	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv66[rsp]
  00088	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv186[rsp], rax
  00090	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv186[rsp]
  00098	48 8d 4c 24 28	 lea	 rcx, QWORD PTR it$5[rsp]
  0009d	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator!=
  000a2	88 84 24 90 00
	00 00		 mov	 BYTE PTR $T8[rsp], al
  000a9	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  000b1	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  000b6	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR $T8[rsp]
  000be	85 c0		 test	 eax, eax
  000c0	74 38		 je	 SHORT $LN3@Close

; 185  :         ReleaseResponse(&*it);

  000c2	48 8d 4c 24 28	 lea	 rcx, QWORD PTR it$5[rsp]
  000c7	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEBAAEAUUniqueResponse@QSVAllocator@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<QSVAllocator::UniqueResponse> > >::operator*
  000cc	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 8c 24 f8
	00 00 00	 mov	 QWORD PTR tv191[rsp], rcx
  000df	48 8b d0	 mov	 rdx, rax
  000e2	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ea	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv191[rsp]
  000f2	ff 50 48	 call	 QWORD PTR [rax+72]
  000f5	e9 46 ff ff ff	 jmp	 $LN2@Close
$LN3@Close:

; 186  :     }

  000fa	48 8d 4c 24 28	 lea	 rcx, QWORD PTR it$5[rsp]
  000ff	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ

; 187  :     m_ExtResponses.clear();

  00104	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0010c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00110	48 8b c8	 mov	 rcx, rax
  00113	e8 00 00 00 00	 call	 ?clear@?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAAXXZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::clear

; 188  : 
; 189  :     for (auto it2 = m_responses.begin(); it2 != m_responses.end(); it2++) {

  00118	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00120	48 83 c0 48	 add	 rax, 72			; 00000048H
  00124	48 8d 54 24 58	 lea	 rdx, QWORD PTR it2$6[rsp]
  00129	48 8b c8	 mov	 rcx, rax
  0012c	e8 00 00 00 00	 call	 ?begin@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::begin
  00131	90		 npad	 1
  00132	eb 22		 jmp	 SHORT $LN7@Close
$LN5@Close:
  00134	45 33 c0	 xor	 r8d, r8d
  00137	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T10[rsp]
  0013f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it2$6[rsp]
  00144	e8 00 00 00 00	 call	 ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA?AV01@H@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator++
  00149	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  00151	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
$LN7@Close:
  00156	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0015e	48 83 c0 48	 add	 rax, 72			; 00000048H
  00162	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  0016a	48 8b c8	 mov	 rcx, rax
  0016d	e8 00 00 00 00	 call	 ?end@?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@2@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::end
  00172	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv139[rsp], rax
  0017a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv139[rsp]
  00182	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv190[rsp], rax
  0018a	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv190[rsp]
  00192	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it2$6[rsp]
  00197	e8 00 00 00 00	 call	 ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator!=
  0019c	88 84 24 c8 00
	00 00		 mov	 BYTE PTR $T11[rsp], al
  001a3	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T12[rsp]
  001ab	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  001b0	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR $T11[rsp]
  001b8	85 c0		 test	 eax, eax
  001ba	74 38		 je	 SHORT $LN6@Close

; 190  :         ReleaseResponse(&*it2);

  001bc	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it2$6[rsp]
  001c1	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEBAAEAUmfxFrameAllocResponse@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<mfxFrameAllocResponse> > >::operator*
  001c6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ce	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001d1	48 89 8c 24 10
	01 00 00	 mov	 QWORD PTR tv70[rsp], rcx
  001d9	48 8b d0	 mov	 rdx, rax
  001dc	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e4	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv70[rsp]
  001ec	ff 50 48	 call	 QWORD PTR [rax+72]
  001ef	e9 40 ff ff ff	 jmp	 $LN5@Close
$LN6@Close:

; 191  :     }

  001f4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR it2$6[rsp]
  001f9	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ

; 192  :     m_pQSVLog->write(RGY_LOG_DEBUG, _T("QSVAllocator: Closed.\n"));

  001fe	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00206	48 83 c0 78	 add	 rax, 120		; 00000078H
  0020a	48 8b c8	 mov	 rcx, rax
  0020d	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QEBAPEAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00212	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv176[rsp], rax
  0021a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv176[rsp]
  00222	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG127087
  0022c	ba fe ff ff ff	 mov	 edx, -2
  00231	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv176[rsp]
  00239	ff 50 20	 call	 QWORD PTR [rax+32]

; 193  :     m_pQSVLog.reset();

  0023c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00244	48 83 c0 78	 add	 rax, 120		; 00000078H
  00248	48 8b c8	 mov	 rcx, rax
  0024b	e8 00 00 00 00	 call	 ?reset@?$shared_ptr@VRGYLog@@@std@@QEAAXXZ ; std::shared_ptr<RGYLog>::reset

; 194  :     return MFX_ERR_NONE;

  00250	33 c0		 xor	 eax, eax

; 195  : }

  00252	8b f8		 mov	 edi, eax
  00254	48 8b cc	 mov	 rcx, rsp
  00257	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ$rtcFrameData
  0025e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00263	8b c7		 mov	 eax, edi
  00265	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  0026c	5f		 pop	 rdi
  0026d	c3		 ret	 0
?Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ ENDP		; QSVAllocator::Close
_TEXT	ENDS
text$x	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR it$5[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$0
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$2
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0003d	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$2
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$3
  00049	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00053	55		 push	 rbp
  00054	57		 push	 rdi
  00055	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00059	48 8b ea	 mov	 rbp, rdx
  0005c	48 8d 4d 58	 lea	 rcx, QWORD PTR it2$6[rbp]
  00060	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$3
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$5
  0006c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00071	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00076	55		 push	 rbp
  00077	57		 push	 rdi
  00078	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007c	48 8b ea	 mov	 rbp, rdx
  0007f	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00086	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0008b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR it$5[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$2
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0003d	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UUniqueResponse@QSVAllocator@@@std@@@std@@@std@@QEAA@XZ
  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$2@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$3
  00049	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004e	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00053	55		 push	 rbp
  00054	57		 push	 rdi
  00055	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00059	48 8b ea	 mov	 rbp, rdx
  0005c	48 8d 4d 58	 lea	 rcx, QWORD PTR it2$6[rbp]
  00060	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
it$5 = 40
it2$6 = 88
$T7 = 120
$T8 = 144
$T9 = 152
$T10 = 176
$T11 = 200
$T12 = 208
tv66 = 232
tv186 = 240
tv191 = 248
tv139 = 256
tv190 = 264
tv70 = 272
tv176 = 280
this$ = 304
?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA PROC ; `QSVAllocator::Close'::`1'::dtor$5
  0006c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00071	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00076	55		 push	 rbp
  00077	57		 push	 rdi
  00078	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007c	48 8b ea	 mov	 rbp, rdx
  0007f	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00086	e8 00 00 00 00	 call	 ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UmfxFrameAllocResponse@@@std@@@std@@@std@@QEAA@XZ
  0008b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008f	5f		 pop	 rdi
  00090	5d		 pop	 rbp
  00091	c3		 ret	 0
?dtor$5@?0??Close@QSVAllocator@@UEAA?AW4mfxStatus@@XZ@4HA ENDP ; `QSVAllocator::Close'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
this$ = 48
??1QSVAllocator@@UEAA@XZ PROC				; QSVAllocator::~QSVAllocator

; 69   : QSVAllocator::~QSVAllocator() {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVAllocator@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 70   : }

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 78	 add	 rax, 120		; 00000078H
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0003e	90		 npad	 1
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c0 60	 add	 rax, 96			; 00000060H
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00050	90		 npad	 1
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c0 48	 add	 rax, 72			; 00000048H
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  00062	90		 npad	 1
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
??1QSVAllocator@@UEAA@XZ ENDP				; QSVAllocator::~QSVAllocator
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 48	 add	 rcx, 72			; 00000048H
  0001b	e8 00 00 00 00	 call	 ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$0
this$ = 48
?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00042	e8 00 00 00 00	 call	 ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$1
this$ = 48
?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00069	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 48	 add	 rcx, 72			; 00000048H
  0001b	e8 00 00 00 00	 call	 ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00042	e8 00 00 00 00	 call	 ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA PROC		; `QSVAllocator::~QSVAllocator'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00069	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???1QSVAllocator@@UEAA@XZ@4HA ENDP		; `QSVAllocator::~QSVAllocator'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
this$ = 48
??0QSVAllocator@@QEAA@XZ PROC				; QSVAllocator::QSVAllocator

; 60   : QSVAllocator::QSVAllocator() {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVAllocator@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 48	 add	 rax, 72			; 00000048H
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  0003e	90		 npad	 1
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c0 60	 add	 rax, 96			; 00000060H
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??0?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00050	90		 npad	 1
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c0 78	 add	 rax, 120		; 00000078H
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 ??0?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
  00062	90		 npad	 1

; 61   :     pthis = this;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0006d	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 62   :     Alloc = Alloc_;

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Alloc_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocRequest@@PEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::Alloc_
  0007d	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 63   :     Lock  = Lock_;

  00081	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Lock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ; QSVAllocator::Lock_
  0008d	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 64   :     Free  = Free_;

  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Free_@QSVAllocator@@CA?AW4mfxStatus@@PEAXPEAUmfxFrameAllocResponse@@@Z ; QSVAllocator::Free_
  0009d	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 65   :     Unlock = Unlock_;

  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Unlock_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAUmfxFrameData@@@Z ; QSVAllocator::Unlock_
  000ad	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 66   :     GetHDL = GetHDL_;

  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GetHDL_@QSVAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAX@Z ; QSVAllocator::GetHDL_
  000bd	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 67   : }

  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
??0QSVAllocator@@QEAA@XZ ENDP				; QSVAllocator::QSVAllocator
_TEXT	ENDS
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 48	 add	 rcx, 72			; 00000048H
  0001b	e8 00 00 00 00	 call	 ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$0
this$ = 48
?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00042	e8 00 00 00 00	 call	 ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$1
this$ = 48
?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00069	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 48	 add	 rcx, 72			; 00000048H
  0001b	e8 00 00 00 00	 call	 ??1?$list@UmfxFrameAllocResponse@@V?$allocator@UmfxFrameAllocResponse@@@std@@@std@@QEAA@XZ ; std::list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >::~list<mfxFrameAllocResponse,std::allocator<mfxFrameAllocResponse> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00042	e8 00 00 00 00	 call	 ??1?$list@UUniqueResponse@QSVAllocator@@V?$allocator@UUniqueResponse@QSVAllocator@@@std@@@std@@QEAA@XZ ; std::list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >::~list<QSVAllocator::UniqueResponse,std::allocator<QSVAllocator::UniqueResponse> >
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
this$ = 48
?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA PROC		; `QSVAllocator::QSVAllocator'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 78	 add	 rcx, 120		; 00000078H
  00069	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QEAA@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???0QSVAllocator@@QEAA@XZ@4HA ENDP		; `QSVAllocator::QSVAllocator'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GQSVBufferAllocator@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GQSVBufferAllocator@@UEAAPEAXI@Z PROC		; QSVBufferAllocator::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1QSVBufferAllocator@@UEAA@XZ ; QSVBufferAllocator::~QSVBufferAllocator
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_GQSVBufferAllocator@@UEAAPEAXI@Z ENDP		; QSVBufferAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z PROC ; QSVBufferAllocator::Free_

; 56   : mfxStatus QSVBufferAllocator::Free_(mfxHDL pthis, mfxMemId mid) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 57   :     return reinterpret_cast<QSVBufferAllocator *>(pthis)->BufFree(mid);

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  00035	ff 50 20	 call	 QWORD PTR [rax+32]

; 58   : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ENDP ; QSVBufferAllocator::Free_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z PROC ; QSVBufferAllocator::Unlock_

; 52   : mfxStatus QSVBufferAllocator::Unlock_(mfxHDL pthis, mfxMemId mid) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 53   :     return reinterpret_cast<QSVBufferAllocator *>(pthis)->BufUnlock(mid);

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  00035	ff 50 18	 call	 QWORD PTR [rax+24]

; 54   : }

  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ENDP ; QSVBufferAllocator::Unlock_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
mid$ = 56
ptr$ = 64
?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z PROC ; QSVBufferAllocator::Lock_

; 48   : mfxStatus QSVBufferAllocator::Lock_(mfxHDL pthis, mfxMemId mid, mfxU8 **ptr) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 49   :     return reinterpret_cast<QSVBufferAllocator *>(pthis)->BufLock(mid, ptr);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	4c 8b 44 24 40	 mov	 r8, QWORD PTR ptr$[rsp]
  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR mid$[rsp]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  0003f	ff 50 10	 call	 QWORD PTR [rax+16]

; 50   : }

  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z ENDP ; QSVBufferAllocator::Lock_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
pthis$ = 48
nbytes$ = 56
type$ = 64
mid$ = 72
?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z PROC ; QSVBufferAllocator::Alloc_

; 44   : mfxStatus QSVBufferAllocator::Alloc_(mfxHDL pthis, mfxU32 nbytes, mfxU16 type, mfxMemId *mid) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 08 00 00 00	 mov	 ecx, 8
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 45   :     return reinterpret_cast<QSVBufferAllocator *>(pthis)->BufAlloc(nbytes, type, mid);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR pthis$[rsp]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	4c 8b 4c 24 48	 mov	 r9, QWORD PTR mid$[rsp]
  0003a	44 0f b7 44 24
	40		 movzx	 r8d, WORD PTR type$[rsp]
  00040	8b 54 24 38	 mov	 edx, DWORD PTR nbytes$[rsp]
  00044	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pthis$[rsp]
  00049	ff 50 08	 call	 QWORD PTR [rax+8]

; 46   : }

  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z ENDP ; QSVBufferAllocator::Alloc_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
this$ = 16
??1QSVBufferAllocator@@UEAA@XZ PROC			; QSVBufferAllocator::~QSVBufferAllocator

; 41   : QSVBufferAllocator::~QSVBufferAllocator() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVBufferAllocator@@6B@
  00012	48 89 08	 mov	 QWORD PTR [rax], rcx

; 42   : }

  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
??1QSVBufferAllocator@@UEAA@XZ ENDP			; QSVBufferAllocator::~QSVBufferAllocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
_TEXT	SEGMENT
this$ = 16
??0QSVBufferAllocator@@QEAA@XZ PROC			; QSVBufferAllocator::QSVBufferAllocator

; 33   : QSVBufferAllocator::QSVBufferAllocator() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7QSVBufferAllocator@@6B@
  00012	48 89 08	 mov	 QWORD PTR [rax], rcx

; 34   :     pthis = this;

  00015	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 35   :     Alloc = Alloc_;

  00023	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Alloc_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAXIGPEAPEAX@Z ; QSVBufferAllocator::Alloc_
  0002f	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 36   :     Lock  = Lock_;

  00033	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Lock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0PEAPEAE@Z ; QSVBufferAllocator::Lock_
  0003f	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 37   :     Free  = Free_;

  00043	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Free_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ; QSVBufferAllocator::Free_
  0004f	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 38   :     Unlock = Unlock_;

  00053	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Unlock_@QSVBufferAllocator@@CA?AW4mfxStatus@@PEAX0@Z ; QSVBufferAllocator::Unlock_
  0005f	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 39   : }

  00063	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00068	5f		 pop	 rdi
  00069	c3		 ret	 0
??0QSVBufferAllocator@@QEAA@XZ ENDP			; QSVBufferAllocator::QSVBufferAllocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = 112
$T2 = 168
$T3 = 172
$T4 = 176
$T5 = 180
$T6 = 184
$T7 = 188
$T8 = 192
$T9 = 196
$T10 = 200
$T11 = 204
$T12 = 208
$T13 = 212
$T14 = 216
__$ArrayPad$ = 264
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  0002b	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T2[rsp], 13
  00036	c7 84 24 ac 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T3[rsp], 12
  00041	c7 84 24 b0 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T4[rsp], 11
  0004c	c7 84 24 b4 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T5[rsp], 10
  00057	c7 84 24 b8 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T6[rsp], 9
  00062	c7 84 24 bc 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T7[rsp], 8
  0006d	c7 84 24 c0 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T8[rsp], 7
  00078	c7 84 24 c4 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T9[rsp], 6
  00083	c7 84 24 c8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T10[rsp], 5
  0008e	c7 84 24 cc 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T11[rsp], 4
  00099	c7 84 24 d0 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T12[rsp], 2
  000a4	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T13[rsp], 1
  000af	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000b7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000bc	48 8d 84 24 ac
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000c4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000c9	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000d1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000d6	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000de	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000e3	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  000eb	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000f0	48 8d 84 24 bc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  000f8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000fd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00105	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010a	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00117	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  0011f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00124	4c 8d 8c 24 cc
	00 00 00	 lea	 r9, QWORD PTR $T11[rsp]
  0012c	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T12[rsp]
  00134	48 8d 94 24 d4
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  0013c	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T14[rsp]
  00144	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  00149	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  0014e	48 8b f9	 mov	 rdi, rcx
  00151	48 8b f0	 mov	 rsi, rax
  00154	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00159	f3 a4		 rep movsb
  0015b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  00162	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T1[rsp]
  00167	48 8b f8	 mov	 rdi, rax
  0016a	48 8b f1	 mov	 rsi, rcx
  0016d	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00172	f3 a4		 rep movsb
  00174	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017c	48 33 cc	 xor	 rcx, rsp
  0017f	e8 00 00 00 00	 call	 __security_check_cookie
  00184	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0018b	5f		 pop	 rdi
  0018c	5e		 pop	 rsi
  0018d	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 56
$T2 = 96
<args_0>$ = 104
<args_1>$ = 112
<args_2>$ = 120
<args_3>$ = 128
<args_4>$ = 136
<args_5>$ = 144
<args_6>$ = 152
<args_7>$ = 160
<args_8>$ = 168
<args_9>$ = 176
<args_10>$ = 184
<args_11>$ = 192
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 12 00 00 00	 mov	 ecx, 18
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 44 24 70	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00052	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_2>$[rsp]
  00057	8b 00		 mov	 eax, DWORD PTR [rax]
  00059	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  00065	8b 00		 mov	 eax, DWORD PTR [rax]
  00067	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  0006b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00073	8b 00		 mov	 eax, DWORD PTR [rax]
  00075	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00081	8b 00		 mov	 eax, DWORD PTR [rax]
  00083	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  00087	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  0008f	8b 00		 mov	 eax, DWORD PTR [rax]
  00091	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  00095	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  0009d	8b 00		 mov	 eax, DWORD PTR [rax]
  0009f	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000ab	8b 00		 mov	 eax, DWORD PTR [rax]
  000ad	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000b9	8b 00		 mov	 eax, DWORD PTR [rax]
  000bb	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000bf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000c7	8b 00		 mov	 eax, DWORD PTR [rax]
  000c9	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000cd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000d5	8b 00		 mov	 eax, DWORD PTR [rax]
  000d7	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000db	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  000df	48 8b 7c 24 60	 mov	 rdi, QWORD PTR $T2[rsp]
  000e4	48 8b f0	 mov	 rsi, rax
  000e7	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  000ec	f3 a4		 rep movsb
  000ee	48 8b 44 24 60	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  000f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f8	48 33 cc	 xor	 rcx, rsp
  000fb	e8 00 00 00 00	 call	 __security_check_cookie
  00100	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00104	5f		 pop	 rdi
  00105	5e		 pop	 rsi
  00106	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QEAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 200
$T3 = 204
$T4 = 208
$T5 = 212
$T6 = 216
$T7 = 220
$T8 = 224
$T9 = 228
$T10 = 232
$T11 = 236
$T12 = 240
$T13 = 244
$T14 = 248
$T15 = 252
$T16 = 256
$T17 = 264
__$ArrayPad$ = 328
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  0002b	c7 84 24 c8 00
	00 00 12 00 00
	00		 mov	 DWORD PTR $T2[rsp], 18
  00036	c7 84 24 cc 00
	00 00 10 00 00
	00		 mov	 DWORD PTR $T3[rsp], 16
  00041	c7 84 24 d0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T4[rsp], 15
  0004c	c7 84 24 d4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T5[rsp], 14
  00057	c7 84 24 d8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T6[rsp], 13
  00062	c7 84 24 dc 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR $T7[rsp], 11
  0006d	c7 84 24 e0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T8[rsp], 10
  00078	c7 84 24 e4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T9[rsp], 9
  00083	c7 84 24 e8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T10[rsp], 8
  0008e	c7 84 24 ec 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T11[rsp], 7
  00099	c7 84 24 f0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T12[rsp], 6
  000a4	c7 84 24 f4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T13[rsp], 5
  000af	c7 84 24 f8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T14[rsp], 4
  000ba	c7 84 24 fc 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T15[rsp], 2
  000c5	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR $T16[rsp], 1
  000d0	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000d8	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  000dd	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000e5	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000ea	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000f2	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000f7	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000ff	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00104	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  0010c	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00111	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  00119	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0011e	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00126	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0012b	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00133	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00138	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00140	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00145	48 8d 84 24 ec
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  0014d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00152	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0015a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015f	48 8d 84 24 f4
	00 00 00	 lea	 rax, QWORD PTR $T13[rsp]
  00167	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016c	4c 8d 8c 24 f8
	00 00 00	 lea	 r9, QWORD PTR $T14[rsp]
  00174	4c 8d 84 24 fc
	00 00 00	 lea	 r8, QWORD PTR $T15[rsp]
  0017c	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00184	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR $T17[rsp]
  0018c	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  00191	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00199	48 8b f9	 mov	 rdi, rcx
  0019c	48 8b f0	 mov	 rsi, rax
  0019f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001a4	f3 a4		 rep movsb
  001a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  001ad	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  001b5	48 8b f8	 mov	 rdi, rax
  001b8	48 8b f1	 mov	 rsi, rcx
  001bb	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  001c0	f3 a4		 rep movsb
  001c2	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ca	48 33 cc	 xor	 rcx, rsp
  001cd	e8 00 00 00 00	 call	 __security_check_cookie
  001d2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  001d9	5f		 pop	 rdi
  001da	5e		 pop	 rsi
  001db	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 72
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
<args_14>$ = 232
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR <args_14>$[rsp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	89 44 24 38	 mov	 DWORD PTR $T1[rsp+56], eax
  0010b	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  0010f	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00114	48 8b f0	 mov	 rsi, rax
  00117	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0011c	f3 a4		 rep movsb
  0011e	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00123	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00128	48 33 cc	 xor	 rcx, rsp
  0012b	e8 00 00 00 00	 call	 __security_check_cookie
  00130	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QEAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = 128
$T2 = 192
$T3 = 196
$T4 = 200
$T5 = 204
$T6 = 208
$T7 = 212
$T8 = 216
$T9 = 220
$T10 = 224
$T11 = 228
$T12 = 232
$T13 = 236
$T14 = 240
$T15 = 244
$T16 = 248
__$ArrayPad$ = 304
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  0002b	c7 84 24 c0 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR $T2[rsp], 15
  00036	c7 84 24 c4 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR $T3[rsp], 14
  00041	c7 84 24 c8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR $T4[rsp], 13
  0004c	c7 84 24 cc 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR $T5[rsp], 12
  00057	c7 84 24 d0 00
	00 00 0a 00 00
	00		 mov	 DWORD PTR $T6[rsp], 10
  00062	c7 84 24 d4 00
	00 00 09 00 00
	00		 mov	 DWORD PTR $T7[rsp], 9
  0006d	c7 84 24 d8 00
	00 00 08 00 00
	00		 mov	 DWORD PTR $T8[rsp], 8
  00078	c7 84 24 dc 00
	00 00 07 00 00
	00		 mov	 DWORD PTR $T9[rsp], 7
  00083	c7 84 24 e0 00
	00 00 06 00 00
	00		 mov	 DWORD PTR $T10[rsp], 6
  0008e	c7 84 24 e4 00
	00 00 05 00 00
	00		 mov	 DWORD PTR $T11[rsp], 5
  00099	c7 84 24 e8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR $T12[rsp], 4
  000a4	c7 84 24 ec 00
	00 00 02 00 00
	00		 mov	 DWORD PTR $T13[rsp], 2
  000af	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR $T14[rsp], 1
  000ba	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR $T15[rsp], 0
  000c5	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T2[rsp]
  000cd	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  000d2	48 8d 84 24 c4
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  000da	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  000df	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  000e7	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  000ec	48 8d 84 24 cc
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000f4	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f9	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00101	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00106	48 8d 84 24 d4
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  0010e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00113	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0011b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00120	48 8d 84 24 dc
	00 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  00128	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0012d	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0013a	48 8d 84 24 e4
	00 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00142	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00147	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR $T12[rsp]
  0014f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00154	4c 8d 8c 24 ec
	00 00 00	 lea	 r9, QWORD PTR $T13[rsp]
  0015c	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T14[rsp]
  00164	48 8d 94 24 f4
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0016c	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR $T16[rsp]
  00174	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  00179	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  00181	48 8b f9	 mov	 rdi, rcx
  00184	48 8b f0	 mov	 rsi, rax
  00187	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0018c	f3 a4		 rep movsb
  0018e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  00195	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  0019d	48 8b f8	 mov	 rdi, rax
  001a0	48 8b f1	 mov	 rsi, rcx
  001a3	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  001a8	f3 a4		 rep movsb
  001aa	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b2	48 33 cc	 xor	 rcx, rsp
  001b5	e8 00 00 00 00	 call	 __security_check_cookie
  001ba	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  001c1	5f		 pop	 rdi
  001c2	5e		 pop	 rsi
  001c3	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 64
$T2 = 112
<args_0>$ = 120
<args_1>$ = 128
<args_2>$ = 136
<args_3>$ = 144
<args_4>$ = 152
<args_5>$ = 160
<args_6>$ = 168
<args_7>$ = 176
<args_8>$ = 184
<args_9>$ = 192
<args_10>$ = 200
<args_11>$ = 208
<args_12>$ = 216
<args_13>$ = 224
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0001a	48 8b fc	 mov	 rdi, rsp
  0001d	b9 16 00 00 00	 mov	 ecx, 22
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR <args_0>$[rsp]
  00042	8b 00		 mov	 eax, DWORD PTR [rax]
  00044	89 04 24	 mov	 DWORD PTR $T1[rsp], eax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR <args_1>$[rsp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	89 44 24 04	 mov	 DWORD PTR $T1[rsp+4], eax
  00055	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR <args_2>$[rsp]
  0005d	8b 00		 mov	 eax, DWORD PTR [rax]
  0005f	89 44 24 08	 mov	 DWORD PTR $T1[rsp+8], eax
  00063	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR <args_3>$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 0c	 mov	 DWORD PTR $T1[rsp+12], eax
  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR <args_4>$[rsp]
  00079	8b 00		 mov	 eax, DWORD PTR [rax]
  0007b	89 44 24 10	 mov	 DWORD PTR $T1[rsp+16], eax
  0007f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR <args_5>$[rsp]
  00087	8b 00		 mov	 eax, DWORD PTR [rax]
  00089	89 44 24 14	 mov	 DWORD PTR $T1[rsp+20], eax
  0008d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR <args_6>$[rsp]
  00095	8b 00		 mov	 eax, DWORD PTR [rax]
  00097	89 44 24 18	 mov	 DWORD PTR $T1[rsp+24], eax
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR <args_7>$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	89 44 24 1c	 mov	 DWORD PTR $T1[rsp+28], eax
  000a9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR <args_8>$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 44 24 20	 mov	 DWORD PTR $T1[rsp+32], eax
  000b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR <args_9>$[rsp]
  000bf	8b 00		 mov	 eax, DWORD PTR [rax]
  000c1	89 44 24 24	 mov	 DWORD PTR $T1[rsp+36], eax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR <args_10>$[rsp]
  000cd	8b 00		 mov	 eax, DWORD PTR [rax]
  000cf	89 44 24 28	 mov	 DWORD PTR $T1[rsp+40], eax
  000d3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR <args_11>$[rsp]
  000db	8b 00		 mov	 eax, DWORD PTR [rax]
  000dd	89 44 24 2c	 mov	 DWORD PTR $T1[rsp+44], eax
  000e1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR <args_12>$[rsp]
  000e9	8b 00		 mov	 eax, DWORD PTR [rax]
  000eb	89 44 24 30	 mov	 DWORD PTR $T1[rsp+48], eax
  000ef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR <args_13>$[rsp]
  000f7	8b 00		 mov	 eax, DWORD PTR [rax]
  000f9	89 44 24 34	 mov	 DWORD PTR $T1[rsp+52], eax
  000fd	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  00101	48 8b 7c 24 70	 mov	 rdi, QWORD PTR $T2[rsp]
  00106	48 8b f0	 mov	 rsi, rax
  00109	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0010e	f3 a4		 rep movsb
  00110	48 8b 44 24 70	 mov	 rax, QWORD PTR $T2[rsp]

; 131  : }

  00115	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00126	5f		 pop	 rdi
  00127	5e		 pop	 rsi
  00128	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QEAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0002b	90		 npad	 1
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA PROC ; `std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA ENDP ; `std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA PROC ; `std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ@4HA ENDP ; `std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1420 :     _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1421 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1422 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 4195 :         return _Mypair._Get_first();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4196 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_Ptr$1 = 32
_Al$2 = 40
$T3 = 48
this$ = 80
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 4165 :         _Mypair._Myval2._Orphan_all();

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  0002b	90		 npad	 1

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00039	90		 npad	 1
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	74 4f		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00046	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004a	48 89 44 24 20	 mov	 QWORD PTR _Ptr$1[rsp], rax

; 4168 :             auto& _Al          = _Getal();

  0004f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00054	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00059	90		 npad	 1
  0005a	48 89 44 24 28	 mov	 QWORD PTR _Al$2[rsp], rax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  0005f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00064	48 83 c0 08	 add	 rax, 8
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>
  00070	90		 npad	 1

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00071	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007a	48 ff c0	 inc	 rax
  0007d	4c 8b c0	 mov	 r8, rax
  00080	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Ptr$1[rsp]
  00085	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Al$2[rsp]
  0008a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
  0008f	90		 npad	 1
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00095	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a2	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000aa	c6 44 24 30 00	 mov	 BYTE PTR $T3[rsp], 0
  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	48 6b c0 00	 imul	 rax, rax, 0
  000b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000bd	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000c2	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T3[rsp]
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000cf	90		 npad	 1

; 4178 :     }

  000d0	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 3548 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 3549 :         return _Mypair._Myval2._Myptr();

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0002b	90		 npad	 1

; 3550 :     }

  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_To_delete$ = 72
this$ = 96
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2597 :     ~basic_string() noexcept { // destroy the string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 14 00 00 00	 mov	 ecx, 20
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 2598 :         _Tidy_deallocate();

  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00028	90		 npad	 1

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00033	90		 npad	 1
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S12$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00041	90		 npad	 1
  00042	48 8d 44 24 34	 lea	 rax, QWORD PTR $S12$[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  0004c	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 89 44 24 48	 mov	 QWORD PTR _To_delete$[rsp], rax

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  00059	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00065	48 8b 54 24 48	 mov	 rdx, QWORD PTR _To_delete$[rsp]
  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Alproxy$[rsp]
  0006f	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00074	90		 npad	 1

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00075	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00082	90		 npad	 1
  00083	48 8b cc	 mov	 rcx, rsp
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
  0008d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00092	90		 npad	 1
  00093	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00097	5f		 pop	 rdi
  00098	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_To_delete$ = 72
this$ = 96
?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_To_delete$ = 72
this$ = 96
?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0002f	90		 npad	 1
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 08	 add	 rcx, 8
  0001b	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA PROC ; `std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 08	 add	 rcx, 8
  0001b	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ@4HA ENDP ; `std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 2121 :         return _BUF_SIZE <= _Myres;

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  00028	72 09		 jb	 SHORT $LN3@Large_stri
  0002a	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv66[rsp], 1
  00031	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00033	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv66[rsp], 0
$LN4@Large_stri:
  0003a	0f b6 04 24	 movzx	 eax, BYTE PTR tv66[rsp]

; 2122 :     }

  0003e	48 83 c4 10	 add	 rsp, 16
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2111 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 2112 :         const value_type* _Result = _Bx._Buf;

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 2113 :         if (_Large_string_engaged()) {

  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00036	0f b6 c0	 movzx	 eax, al
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@Myptr

; 2114 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00046	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0004b	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2115 :         }
; 2116 : 
; 2117 :         return _Result;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 2118 :     }

  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00028	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00032	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 868  :     }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 16
_Right$ = 24
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 377  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 378  :         _Left = _Right;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR _Left$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Right$[rsp]
  00015	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00018	88 08		 mov	 BYTE PTR [rax], cl

; 379  :     }

  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decwref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decwref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decwref, COMDAT

; 657  :     void _Decwref() noexcept { // decrement weak reference count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 658  :         if (_MT_DECR(_Weaks) == 0) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 0c	 add	 rax, 12
  00027	b9 ff ff ff ff	 mov	 ecx, -1
  0002c	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00030	ff c9		 dec	 ecx
  00032	8b c1		 mov	 eax, ecx
  00034	85 c0		 test	 eax, eax
  00036	75 10		 jne	 SHORT $LN2@Decwref

; 659  :             _Delete_this();

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00045	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Decwref:

; 660  :         }
; 661  :     }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?_Decwref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Decref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decref, COMDAT

; 650  :     void _Decref() noexcept { // decrement use count

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 651  :         if (_MT_DECR(_Uses) == 0) {

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	b9 ff ff ff ff	 mov	 ecx, -1
  0002c	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00030	ff c9		 dec	 ecx
  00032	8b c1		 mov	 eax, ecx
  00034	85 c0		 test	 eax, eax
  00036	75 19		 jne	 SHORT $LN2@Decref

; 652  :             _Destroy();

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00045	ff 10		 call	 QWORD PTR [rax]

; 653  :             _Decwref();

  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?_Decwref@_Ref_count_base@std@@QEAAXXZ ; std::_Ref_count_base::_Decwref
$LN2@Decref:

; 654  :         }
; 655  :     }

  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
?_Decref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1349 :         _Ptr = nullptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1350 :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 48
this$ = 80
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT

; 1267 :     void _Orphan_me() noexcept {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1268 :         if (_Myproxy) { // adopted, remove self from list

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	0f 84 db 00 00
	00		 je	 $LN10@Orphan_me

; 1269 :             _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 83 c0 08	 add	 rax, 8
  00039	48 89 44 24 30	 mov	 QWORD PTR _Pnext$1[rsp], rax
$LN2@Orphan_me:

; 1270 :             while (*_Pnext && *_Pnext != this) {

  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00043	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00047	74 22		 je	 SHORT $LN6@Orphan_me
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00053	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00056	74 13		 je	 SHORT $LN6@Orphan_me

; 1271 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  0005d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00060	48 83 c0 08	 add	 rax, 8
  00064	48 89 44 24 30	 mov	 QWORD PTR _Pnext$1[rsp], rax

; 1272 :             }

  00069	eb d3		 jmp	 SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 1273 : 
; 1274 :             _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00070	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00074	74 02		 je	 SHORT $LN9@Orphan_me
  00076	eb 6d		 jmp	 SHORT $LN12@Orphan_me
$LN9@Orphan_me:
  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  0007f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0008b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00090	45 33 c9	 xor	 r9d, r9d
  00093	41 b8 fa 04 00
	00		 mov	 r8d, 1274		; 000004faH
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a0	b9 02 00 00 00	 mov	 ecx, 2
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000ab	90		 npad	 1
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 03		 jne	 SHORT $LN14@Orphan_me
  000b1	cc		 int	 3
  000b2	33 c0		 xor	 eax, eax
$LN14@Orphan_me:
  000b4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bd	41 b9 fa 04 00
	00		 mov	 r9d, 1274		; 000004faH
  000c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000de	90		 npad	 1
  000df	33 c0		 xor	 eax, eax
  000e1	85 c0		 test	 eax, eax
  000e3	75 93		 jne	 SHORT $LN9@Orphan_me
$LN12@Orphan_me:
  000e5	33 c0		 xor	 eax, eax
  000e7	85 c0		 test	 eax, eax
  000e9	75 80		 jne	 SHORT $LN6@Orphan_me

; 1275 :             *_Pnext  = _Mynextiter;

  000eb	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000f5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1276 :             _Myproxy = nullptr;

  000fc	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00101	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN10@Orphan_me:

; 1277 :         }
; 1278 :     }

  00108	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0010c	5f		 pop	 rdi
  0010d	c3		 ret	 0
?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = 0
this$ = 32
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT

; 1262 :     const _Container_base12* _Getcont() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 1263 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 11		 je	 SHORT $LN3@Getcont
  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 89 04 24	 mov	 QWORD PTR tv68[rsp], rax
  00038	eb 08		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  0003a	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR tv68[rsp], 0
$LN4@Getcont:
  00042	48 8b 04 24	 mov	 rax, QWORD PTR tv68[rsp]

; 1264 :     }

  00046	48 83 c4 10	 add	 rsp, 16
  0004a	5f		 pop	 rdi
  0004b	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QEBAPEBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z
_TEXT	SEGMENT
_Parent_proxy$5 = 32
_Lock$6 = 52
_Lock$7 = 84
this$ = 128
_Parent$ = 136
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT

; 1234 :     void _Adopt(const _Container_base12* _Parent) noexcept {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 1c 00 00 00	 mov	 ecx, 28
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1235 :         if (_Parent) {

  00026	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR _Parent$[rsp], 0
  0002f	0f 84 85 00 00
	00		 je	 $LN2@Adopt

; 1236 :             // have a parent, do adoption
; 1237 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  00035	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Parent$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 44 24 20	 mov	 QWORD PTR _Parent_proxy$5[rsp], rax

; 1238 : 
; 1239 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 :             if (_Myproxy != _Parent_proxy) { // change parentage

  00045	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Parent_proxy$5[rsp]
  00052	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00055	74 61		 je	 SHORT $LN4@Adopt

; 1241 :                 _Lockit _Lock(_LOCK_DEBUG);

  00057	ba 03 00 00 00	 mov	 edx, 3
  0005c	48 8d 4c 24 34	 lea	 rcx, QWORD PTR _Lock$6[rsp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00067	90		 npad	 1

; 1242 :                 _Orphan_me();

  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  00075	90		 npad	 1

; 1243 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;

  00076	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Parent_proxy$5[rsp]
  00083	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00087	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1244 :                 _Parent_proxy->_Myfirstiter = this;

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Parent_proxy$5[rsp]
  00090	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00098	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1245 :                 _Myproxy                    = _Parent_proxy;

  0009c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Parent_proxy$5[rsp]
  000a9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1246 :             }

  000ac	48 8d 4c 24 34	 lea	 rcx, QWORD PTR _Lock$6[rsp]
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000b7	90		 npad	 1
$LN4@Adopt:

; 1247 : 
; 1248 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1249 :             _Myproxy = _Parent_proxy;
; 1250 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1251 :         } else {

  000b8	eb 2b		 jmp	 SHORT $LN3@Adopt
$LN2@Adopt:

; 1252 :             // no future parent, just disown current parent
; 1253 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1254 :             _Lockit _Lock(_LOCK_DEBUG);

  000ba	ba 03 00 00 00	 mov	 edx, 3
  000bf	48 8d 4c 24 54	 lea	 rcx, QWORD PTR _Lock$7[rsp]
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  000ca	90		 npad	 1

; 1255 :             _Orphan_me();

  000cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  000d8	90		 npad	 1

; 1256 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1257 :             _Myproxy = nullptr;
; 1258 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1259 :         }

  000d9	48 8d 4c 24 54	 lea	 rcx, QWORD PTR _Lock$7[rsp]
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  000e4	90		 npad	 1
$LN3@Adopt:

; 1260 :     }

  000e5	48 8b cc	 mov	 rcx, rsp
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	90		 npad	 1
  000f5	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Parent_proxy$5 = 32
_Lock$6 = 52
_Lock$7 = 84
this$ = 128
_Parent$ = 136
?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA PROC ; `std::_Iterator_base12::_Adopt'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 34	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA ENDP ; `std::_Iterator_base12::_Adopt'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Parent_proxy$5 = 32
_Lock$6 = 52
_Lock$7 = 84
this$ = 128
_Parent$ = 136
?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA PROC ; `std::_Iterator_base12::_Adopt'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 54	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA ENDP ; `std::_Iterator_base12::_Adopt'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Parent_proxy$5 = 32
_Lock$6 = 52
_Lock$7 = 84
this$ = 128
_Parent$ = 136
?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA PROC ; `std::_Iterator_base12::_Adopt'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 34	 lea	 rcx, QWORD PTR _Lock$6[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA ENDP ; `std::_Iterator_base12::_Adopt'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Parent_proxy$5 = 32
_Lock$6 = 52
_Lock$7 = 84
this$ = 128
_Parent$ = 136
?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA PROC ; `std::_Iterator_base12::_Adopt'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 54	 lea	 rcx, QWORD PTR _Lock$7[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0??_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z@4HA ENDP ; `std::_Iterator_base12::_Adopt'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
??1_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT

; 1227 :     ~_Iterator_base12() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 :         _Lockit _Lock(_LOCK_DEBUG);

  0001e	ba 03 00 00 00	 mov	 edx, 3
  00023	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  0002e	90		 npad	 1

; 1230 :         _Orphan_me();

  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  00039	90		 npad	 1

; 1231 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1232 :     }

  0003a	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00045	90		 npad	 1
  00046	48 8b cc	 mov	 rcx, rsp
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1_Iterator_base12@std@@QEAA@XZ$rtcFrameData
  00050	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00055	90		 npad	 1
  00056	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??1_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA PROC	; `std::_Iterator_base12::~_Iterator_base12'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA ENDP	; `std::_Iterator_base12::~_Iterator_base12'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA PROC	; `std::_Iterator_base12::~_Iterator_base12'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???1_Iterator_base12@std@@QEAA@XZ@4HA ENDP	; `std::_Iterator_base12::~_Iterator_base12'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
_Lock$4 = 36
this$ = 80
_Right$ = 88
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z PROC	; std::_Iterator_base12::operator=, COMDAT

; 1210 :     _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1211 :         if (_Myproxy != _Right._Myproxy) {

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00030	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00033	74 4b		 je	 SHORT $LN2@operator

; 1212 :             if (_Right._Myproxy) {

  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR _Right$[rsp]
  0003a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003e	74 18		 je	 SHORT $LN3@operator

; 1213 :                 _Adopt(_Right._Myproxy->_Mycont);

  00040	48 8b 44 24 58	 mov	 rax, QWORD PTR _Right$[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QEAAXPEBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
  00055	90		 npad	 1

; 1214 :             } else { // becoming invalid, disown current parent

  00056	eb 28		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 1215 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1216 :                 _Lockit _Lock(_LOCK_DEBUG);

  00058	ba 03 00 00 00	 mov	 edx, 3
  0005d	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00068	90		 npad	 1

; 1217 :                 _Orphan_me();

  00069	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0006e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QEAAXXZ ; std::_Iterator_base12::_Orphan_me
  00073	90		 npad	 1

; 1218 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1219 :                 _Myproxy = nullptr;
; 1220 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1221 :             }

  00074	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0007f	90		 npad	 1
$LN2@operator:

; 1222 :         }
; 1223 : 
; 1224 :         return *this;

  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 1225 :     }

  00085	48 8b f8	 mov	 rdi, rax
  00088	48 8b cc	 mov	 rcx, rsp
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z$rtcFrameData
  00092	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00097	90		 npad	 1
  00098	48 8b c7	 mov	 rax, rdi
  0009b	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z ENDP	; std::_Iterator_base12::operator=
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
this$ = 80
_Right$ = 88
?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA PROC ; `std::_Iterator_base12::operator='::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA ENDP ; `std::_Iterator_base12::operator='::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
this$ = 80
_Right$ = 88
?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA PROC ; `std::_Iterator_base12::operator='::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z@4HA ENDP ; `std::_Iterator_base12::operator='::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QEAA@AEBU01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0_Iterator_base12@std@@QEAA@AEBU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT

; 1206 :     _Iterator_base12(const _Iterator_base12& _Right) noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1207 :         *this = _Right;

  0003c	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z ; std::_Iterator_base12::operator=

; 1208 :     }

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
??0_Iterator_base12@std@@QEAA@AEBU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Iterator_base12@std@@QEAA@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT

; 1204 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	5f		 pop	 rdi
  00025	c3		 ret	 0
??0_Iterator_base12@std@@QEAA@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00027	74 70		 je	 SHORT $LN5@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00029	ba 03 00 00 00	 mov	 edx, 3
  0002e	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00039	90		 npad	 1

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 83 c0 08	 add	 rax, 8
  00046	48 89 44 24 38	 mov	 QWORD PTR _Pnext$5[rsp], rax
  0004b	eb 14		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0004d	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pnext$5[rsp]
  0005a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005e	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  00061	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00066	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006a	74 11		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  0006c	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pnext$5[rsp]
  00071	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00074	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1295 :         }

  0007b	eb d0		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00082	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00085	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1298 :     }

  0008d	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$4[rsp]
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00098	90		 npad	 1
$LN5@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  00099	48 8b cc	 mov	 rcx, rsp
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all@_Container_base12@std@@QEAAXXZ$rtcFrameData
  000a3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a8	90		 npad	 1
  000a9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA PROC ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA ENDP ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$4 = 36
_Pnext$5 = 56
this$ = 80
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA PROC ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 24	 lea	 rcx, QWORD PTR _Lock$4[rbp]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??_Orphan_all@_Container_base12@std@@QEAAXXZ@4HA ENDP ; `std::_Container_base12::_Orphan_all'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Mycont_$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT

; 1155 :     void _Adopt(const void*) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00023	48 8b 44 24 68	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00034	48 89 01	 mov	 QWORD PTR [rcx], rax

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00037	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 44 24 30	 mov	 QWORD PTR _Ptr_user$[rsp], rax

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 ff	 imul	 rax, rax, -1
  0004d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  00052	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00056	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 fe	 imul	 rax, rax, -2
  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  00069	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00073	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  00077	75 02		 jne	 SHORT $LN14@Adjust_man
  00079	eb 6b		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00082	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0008e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00093	45 33 c9	 xor	 r9d, r9d
  00096	41 b8 6f 00 00
	00		 mov	 r8d, 111		; 0000006fH
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a3	b9 02 00 00 00	 mov	 ecx, 2
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000ae	83 f8 01	 cmp	 eax, 1
  000b1	75 03		 jne	 SHORT $LN19@Adjust_man
  000b3	cc		 int	 3
  000b4	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000b6	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bf	41 b9 6f 00 00
	00		 mov	 r9d, 111		; 0000006fH
  000c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000e0	33 c0		 xor	 eax, eax
  000e2	85 c0		 test	 eax, eax
  000e4	75 95		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	0f 85 6b ff ff
	ff		 jne	 $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000f0	48 c7 44 24 40
	10 00 00 00	 mov	 QWORD PTR _Min_back_shift$[rsp], 16

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  00103	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00106	48 2b c1	 sub	 rax, rcx
  00109	48 89 44 24 48	 mov	 QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010e	48 83 7c 24 48
	10		 cmp	 QWORD PTR _Back_shift$[rsp], 16
  00114	72 0a		 jb	 SHORT $LN16@Adjust_man
  00116	48 83 7c 24 48
	2f		 cmp	 QWORD PTR _Back_shift$[rsp], 47 ; 0000002fH
  0011c	77 02		 ja	 SHORT $LN16@Adjust_man
  0011e	eb 6b		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00127	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0012c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00133	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00138	45 33 c9	 xor	 r9d, r9d
  0013b	41 b8 79 00 00
	00		 mov	 r8d, 121		; 00000079H
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00148	b9 02 00 00 00	 mov	 ecx, 2
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00153	83 f8 01	 cmp	 eax, 1
  00156	75 03		 jne	 SHORT $LN20@Adjust_man
  00158	cc		 int	 3
  00159	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0015b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00164	41 b9 79 00 00
	00		 mov	 r9d, 121		; 00000079H
  0016a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00185	33 c0		 xor	 eax, eax
  00187	85 c0		 test	 eax, eax
  00189	75 95		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  0018b	33 c0		 xor	 eax, eax
  0018d	85 c0		 test	 eax, eax
  0018f	0f 85 79 ff ff
	ff		 jne	 $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00195	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0019a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  0019f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 123  : }

  001a2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001a6	5f		 pop	 rdi
  001a7	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 47   :         return ::operator new(_Bytes);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00023	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 48   :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 324  :     _THROW(bad_array_new_length{});

  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00026	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002b	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 325  : }

  00030	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA PROC ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA ENDP ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA PROC ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_array_new_length@std@@UEAA@XZ@4HA ENDP ; `std::bad_array_new_length::~bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 138  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 137  :         : bad_alloc("bad array new length")

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc
  0002f	90		 npad	 1

; 138  :     {

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 139  :     }

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA PROC ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_array_new_length@std@@QEAA@XZ@4HA ENDP ; `std::bad_array_new_length::bad_array_new_length'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  00032	90		 npad	 1
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
__that$ = 56
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@QEAA@AEBV01@@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00028	90		 npad	 1
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA PROC		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA ENDP		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA PROC		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???1bad_alloc@std@@UEAA@XZ@4HA ENDP		; `std::bad_alloc::~bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 127  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 126  :         : exception(_Message, 1)

  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Message$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  00038	90		 npad	 1

; 127  :     {

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx

; 128  :     }

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Message$ = 56
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Message$ = 56
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA PROC	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 30	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0bad_alloc@std@@AEAA@QEBD@Z@4HA ENDP	; `std::bad_alloc::bad_alloc'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 18 00 00 00	 mov	 edx, 24
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 91   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 04 00 00 00	 mov	 ecx, 4
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	74 0f		 je	 SHORT $LN3@what
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00037	eb 0b		 jmp	 SHORT $LN4@what
$LN3@what:
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00040	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@what:
  00044	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 93   :     }

  00048	48 83 c4 10	 add	 rsp, 16
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 86   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 87   :         __std_exception_destroy(&_Data);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 __std_exception_destroy
  0003e	90		 npad	 1

; 88   :     }

  0003f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00043	5f		 pop	 rdi
  00044	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 69   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 68   :         : _Data()

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 10 00 00 00	 mov	 ecx, 16
  00045	f3 aa		 rep stosb

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00055	48 83 c1 08	 add	 rcx, 8
  00059	48 8b d0	 mov	 rdx, rax
  0005c	e8 00 00 00 00	 call	 __std_exception_copy
  00061	90		 npad	 1

; 71   :     }

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5f		 pop	 rdi
  0006c	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 63   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 62   :         : _Data()

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 10 00 00 00	 mov	 ecx, 16
  00032	f3 aa		 rep stosb

; 64   :         _Data._What = _Message;

  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 65   :     }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 644  :     _NODISCARD static constexpr long long(max)() noexcept { // return maximum value

$LN3:
  00000	40 57		 push	 rdi

; 645  :         return LLONG_MAX;

  00002	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 646  :     }

  0000c	5f		 pop	 rdi
  0000d	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 168  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 169  :         (void)_Size;
; 170  :         return _Where;

  0000b	48 8b 44 24 18	 mov	 rax, QWORD PTR _Where$[rsp]

; 171  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_allocator.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
