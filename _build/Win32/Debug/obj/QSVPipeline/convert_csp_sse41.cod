; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?Array_INTERLACE_WEIGHT@@3QAY0CA@$$CBEA DB 01H		; Array_INTERLACE_WEIGHT
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	01H
$SG7310	DB	'Invalid', 00H
$SG7311	DB	'nv12', 00H
	ORG $+3
$SG7312	DB	'yv12', 00H
	ORG $+3
$SG7313	DB	'yuy2', 00H
	ORG $+3
$SG7314	DB	'yuv422', 00H
	ORG $+1
$SG7315	DB	'nv16', 00H
	ORG $+3
$SG7316	DB	'yuv444', 00H
	ORG $+1
$SG7317	DB	'yv12(9bit)', 00H
	ORG $+1
$SG7318	DB	'yv12(10bit)', 00H
$SG7319	DB	'yv12(12bit)', 00H
$SG7320	DB	'yv12(14bit)', 00H
$SG7321	DB	'yv12(16bit)', 00H
$SG7322	DB	'p010', 00H
	ORG $+3
$SG7323	DB	'yuv422(9bit)', 00H
	ORG $+3
$SG7324	DB	'yuv422(10bit)', 00H
	ORG $+2
$SG7325	DB	'yuv422(12bit)', 00H
	ORG $+2
$SG7326	DB	'yuv422(14bit)', 00H
	ORG $+2
$SG7327	DB	'yuv422(16bit)', 00H
	ORG $+2
$SG7328	DB	'p210', 00H
	ORG $+3
$SG7329	DB	'yuv444(9bit)', 00H
	ORG $+3
$SG7330	DB	'yuv444(10bit)', 00H
	ORG $+2
$SG7331	DB	'yuv444(12bit)', 00H
	ORG $+2
$SG7332	DB	'yuv444(14bit)', 00H
	ORG $+2
$SG7333	DB	'yuv444(16bit)', 00H
	ORG $+2
$SG7334	DB	'yuva444', 00H
$SG7335	DB	'yuva444(16bit)', 00H
	ORG $+1
$SG7336	DB	'rgb24r', 00H
	ORG $+1
$SG7337	DB	'rgb32r', 00H
	ORG $+1
$SG7338	DB	'rgb24', 00H
	ORG $+2
$SG7339	DB	'rgb32', 00H
	ORG $+2
$SG7340	DB	'bgr24', 00H
	ORG $+2
$SG7341	DB	'bgr32', 00H
	ORG $+2
$SG7342	DB	'rgb', 00H
$SG7343	DB	'rgba', 00H
	ORG $+3
$SG7344	DB	'gbr', 00H
$SG7345	DB	'gbra', 00H
	ORG $+3
$SG7346	DB	'yc48', 00H
	ORG $+3
$SG7347	DB	'y8', 00H
	ORG $+1
$SG7348	DB	'yc16', 00H
	ORG $+11
?Array_Y_L_MA_16@@3QBFB DW 0dbH				; Array_Y_L_MA_16
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
	DW	0dbH
	DW	01H
?Array_UV_L_MA_16_420P@@3QBFB DW 0eH			; Array_UV_L_MA_16_420P
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA DW 02aH		; Array_UV_L_MA_16_420I
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	02aH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_UV_L_MA_16_444@@3QBFB DW 0eH			; Array_UV_L_MA_16_444
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
	DW	0eH
	DW	00H
?Array_SUFFLE_YCP_Y@@3QBEB DB 00H			; Array_SUFFLE_YCP_Y
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
	DB	00H
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
PUBLIC	?convert_yc48_to_p010_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_sse41
PUBLIC	?convert_yc48_to_p010_i_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_i_sse41
PUBLIC	?convert_yc48_to_yuv444_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_sse41
PUBLIC	?convert_yc48_to_yuv444_16bit_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_16bit_sse41
PUBLIC	?convert_yuv444_16bit_to_yc48_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yuv444_16bit_to_yc48_sse41
PUBLIC	__xmm@00001000000010000000100000001000
PUBLIC	__xmm@00010001000100010001000100010001
PUBLIC	__xmm@08000800080008000800080008000800
PUBLIC	__xmm@082f082f082f082f082f082f082f082f
PUBLIC	__xmm@10001000100010001000100010001000
PUBLIC	__xmm@124a124a124a124a124a124a124a124a
PUBLIC	__xmm@12b412b412b412b412b412b412b412b4
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@12b412b412b412b412b412b412b412b4
CONST	SEGMENT
__xmm@12b412b412b412b412b412b412b412b4 DB 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
	DB	0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H, 0b4H, 012H
CONST	ENDS
;	COMDAT __xmm@124a124a124a124a124a124a124a124a
CONST	SEGMENT
__xmm@124a124a124a124a124a124a124a124a DB 'J', 012H, 'J', 012H, 'J', 012H
	DB	'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H, 'J', 012H
CONST	ENDS
;	COMDAT __xmm@10001000100010001000100010001000
CONST	SEGMENT
__xmm@10001000100010001000100010001000 DB 00H, 010H, 00H, 010H, 00H, 010H
	DB	00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H, 00H, 010H
CONST	ENDS
;	COMDAT __xmm@082f082f082f082f082f082f082f082f
CONST	SEGMENT
__xmm@082f082f082f082f082f082f082f082f DB '/', 08H, '/', 08H, '/', 08H, '/'
	DB	08H, '/', 08H, '/', 08H, '/', 08H, '/', 08H
CONST	ENDS
;	COMDAT __xmm@08000800080008000800080008000800
CONST	SEGMENT
__xmm@08000800080008000800080008000800 DB 00H, 08H, 00H, 08H, 00H, 08H, 00H
	DB	08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H
CONST	ENDS
;	COMDAT __xmm@00010001000100010001000100010001
CONST	SEGMENT
__xmm@00010001000100010001000100010001 DB 01H, 00H, 01H, 00H, 01H, 00H, 01H
	DB	00H, 01H, 00H, 01H, 00H, 01H, 00H, 01H, 00H
CONST	ENDS
;	COMDAT __xmm@00001000000010000000100000001000
CONST	SEGMENT
__xmm@00001000000010000000100000001000 DB 00H, 010H, 00H, 00H, 00H, 010H, 00H
	DB	00H, 00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z@4QBEB
CONST	SEGMENT
?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z@4QBEB DB 00H ; `gather_y_u_v_to_yc48'::`2'::shuffle_yc48
	DB	01H
	DB	06H
	DB	07H
	DB	0cH
	DB	0dH
	DB	02H
	DB	03H
	DB	08H
	DB	09H
	DB	0eH
	DB	0fH
	DB	04H
	DB	05H
	DB	0aH
	DB	0bH
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv201 = -300						; size = 4
tv193 = -296						; size = 4
tv153 = -292						; size = 4
$T1 = -288						; size = 12
$T2 = -272						; size = 16
$T3 = -256						; size = 16
$T4 = -240						; size = 16
$T5 = -224						; size = 16
$T6 = -208						; size = 16
$T7 = -192						; size = 16
_ycp$8 = -172						; size = 4
_ycp_fin$9 = -168					; size = 4
_V$10 = -164						; size = 4
_U$11 = -160						; size = 4
_Y$12 = -156						; size = 4
_y$13 = -152						; size = 4
_x3$ = -144						; size = 16
_x2$ = -112						; size = 16
_x1$ = -80						; size = 16
_pixel$ = -52						; size = 4
_V_line$ = -48						; size = 4
_U_line$ = -44						; size = 4
_Y_line$ = -40						; size = 4
$T14 = -36						; size = 12
_y_range$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yuv444_16bit_to_yc48_simd<0>

; 1751 : static __forceinline void convert_yuv444_16bit_to_yc48_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  0001c	57		 push	 edi
  0001d	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00023	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1752 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d dc	 mov	 DWORD PTR $T14[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 e0	 mov	 DWORD PTR $T14[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 e4	 mov	 DWORD PTR $T14[ebp+8], eax
  00067	8b 4d dc	 mov	 ecx, DWORD PTR $T14[ebp]
  0006a	89 4d ec	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 e0	 mov	 edx, DWORD PTR $T14[ebp+4]
  00070	89 55 f0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 e4	 mov	 eax, DWORD PTR $T14[ebp+8]
  00076	89 45 f4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1753 :     char *Y_line = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  00084	0f af 45 ec	 imul	 eax, DWORD PTR _y_range$[ebp]
  00088	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  0008b	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  0008e	89 45 d8	 mov	 DWORD PTR _Y_line$[ebp], eax

; 1754 :     char *U_line = (char *)src[1] + src_y_pitch_byte * y_range.start_src;

  00091	ba 04 00 00 00	 mov	 edx, 4
  00096	c1 e2 00	 shl	 edx, 0
  00099	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0009c	0f af 45 ec	 imul	 eax, DWORD PTR _y_range$[ebp]
  000a0	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000a3	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000a6	89 45 d4	 mov	 DWORD PTR _U_line$[ebp], eax

; 1755 :     char *V_line = (char *)src[2] + src_y_pitch_byte * y_range.start_src;

  000a9	ba 04 00 00 00	 mov	 edx, 4
  000ae	d1 e2		 shl	 edx, 1
  000b0	8b 43 14	 mov	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  000b3	0f af 45 ec	 imul	 eax, DWORD PTR _y_range$[ebp]
  000b7	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000ba	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000bd	89 45 d0	 mov	 DWORD PTR _V_line$[ebp], eax

; 1756 :     char *pixel = (char *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 00	 imul	 eax, edx, 0
  000c8	8b 4b 1c	 mov	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000cb	0f af 4d f0	 imul	 ecx, DWORD PTR _y_range$[ebp+4]
  000cf	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  000d2	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000d5	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx

; 1757 :     __m128i x1, x2, x3;
; 1758 :     for (int y = 0; y < y_range.len; y++, pixel += dst_y_pitch_byte, Y_line += src_y_pitch_byte, U_line += src_y_pitch_byte, V_line += src_y_pitch_byte) {

  000d8	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$13[ebp], 0
  000e2	eb 33		 jmp	 SHORT $LN4@convert_yu
$LN2@convert_yu:
  000e4	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _y$13[ebp]
  000ea	83 c0 01	 add	 eax, 1
  000ed	89 85 68 ff ff
	ff		 mov	 DWORD PTR _y$13[ebp], eax
  000f3	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  000f6	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000f9	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx
  000fc	8b 55 d8	 mov	 edx, DWORD PTR _Y_line$[ebp]
  000ff	03 53 14	 add	 edx, DWORD PTR _src_y_pitch_byte$[ebx]
  00102	89 55 d8	 mov	 DWORD PTR _Y_line$[ebp], edx
  00105	8b 45 d4	 mov	 eax, DWORD PTR _U_line$[ebp]
  00108	03 43 14	 add	 eax, DWORD PTR _src_y_pitch_byte$[ebx]
  0010b	89 45 d4	 mov	 DWORD PTR _U_line$[ebp], eax
  0010e	8b 4d d0	 mov	 ecx, DWORD PTR _V_line$[ebp]
  00111	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00114	89 4d d0	 mov	 DWORD PTR _V_line$[ebp], ecx
$LN4@convert_yu:
  00117	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _y$13[ebp]
  0011d	3b 55 f4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  00120	0f 8d fe 01 00
	00		 jge	 $LN1@convert_yu

; 1759 :         short *Y = (short *)Y_line;

  00126	8b 45 d8	 mov	 eax, DWORD PTR _Y_line$[ebp]
  00129	89 85 64 ff ff
	ff		 mov	 DWORD PTR _Y$12[ebp], eax

; 1760 :         short *U = (short *)U_line;

  0012f	8b 4d d4	 mov	 ecx, DWORD PTR _U_line$[ebp]
  00132	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _U$11[ebp], ecx

; 1761 :         short *V = (short *)V_line;

  00138	8b 55 d0	 mov	 edx, DWORD PTR _V_line$[ebp]
  0013b	89 95 5c ff ff
	ff		 mov	 DWORD PTR _V$10[ebp], edx

; 1762 :         short *const ycp_fin = (short *)pixel + width * 3;

  00141	6b 43 10 03	 imul	 eax, DWORD PTR _width$[ebx], 3
  00145	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00148	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0014b	89 95 58 ff ff
	ff		 mov	 DWORD PTR _ycp_fin$9[ebp], edx

; 1763 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  00151	8b 45 cc	 mov	 eax, DWORD PTR _pixel$[ebp]
  00154	89 85 54 ff ff
	ff		 mov	 DWORD PTR _ycp$8[ebp], eax
  0015a	eb 3c		 jmp	 SHORT $LN7@convert_yu
$LN5@convert_yu:
  0015c	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _ycp$8[ebp]
  00162	83 c1 30	 add	 ecx, 48			; 00000030H
  00165	89 8d 54 ff ff
	ff		 mov	 DWORD PTR _ycp$8[ebp], ecx
  0016b	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _Y$12[ebp]
  00171	83 c2 10	 add	 edx, 16			; 00000010H
  00174	89 95 64 ff ff
	ff		 mov	 DWORD PTR _Y$12[ebp], edx
  0017a	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _U$11[ebp]
  00180	83 c0 10	 add	 eax, 16			; 00000010H
  00183	89 85 60 ff ff
	ff		 mov	 DWORD PTR _U$11[ebp], eax
  00189	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _V$10[ebp]
  0018f	83 c1 10	 add	 ecx, 16			; 00000010H
  00192	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _V$10[ebp], ecx
$LN7@convert_yu:
  00198	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _ycp$8[ebp]
  0019e	3b 95 58 ff ff
	ff		 cmp	 edx, DWORD PTR _ycp_fin$9[ebp]
  001a4	0f 83 75 01 00
	00		 jae	 $LN6@convert_yu

; 1764 :             x1 = _mm_loadu_si128((__m128i *)(Y));

  001aa	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _Y$12[ebp]
  001b0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b3	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  001ba	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  001c1	0f 29 45 b0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1765 :             x2 = _mm_loadu_si128((__m128i *)(U));

  001c5	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _U$11[ebp]
  001cb	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001ce	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  001d5	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  001dc	0f 29 45 90	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1766 :             x3 = _mm_loadu_si128((__m128i *)(V));

  001e0	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _V$10[ebp]
  001e6	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  001e9	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  001f0	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  001f7	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1767 :             x1 = convert_y_range_to_yc48(x1);

  001fe	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00202	e8 00 00 00 00	 call	 ?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_y_range_to_yc48
  00207	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0020e	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00215	0f 29 45 b0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1768 :             x2 = convert_uv_range_to_yc48(x2);

  00219	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0021d	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  00222	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00229	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00230	0f 29 45 90	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1769 :             x3 = convert_uv_range_to_yc48(x3);

  00234	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0023b	e8 00 00 00 00	 call	 ?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ; convert_uv_range_to_yc48
  00240	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00247	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0024e	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1770 :             gather_y_u_v_to_yc48(x1, x2, x3);

  00255	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _x3$[ebp]
  0025b	50		 push	 eax
  0025c	8d 4d 90	 lea	 ecx, DWORD PTR _x2$[ebp]
  0025f	51		 push	 ecx
  00260	8d 55 b0	 lea	 edx, DWORD PTR _x1$[ebp]
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 ?gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z ; gather_y_u_v_to_yc48
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1771 :             _mm_store_switch_si128((__m128i *)(ycp +  0), x1);

  0026c	33 c0		 xor	 eax, eax
  0026e	74 19		 je	 SHORT $LN9@convert_yu
  00270	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00274	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _ycp$8[ebp]
  0027a	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0027d	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
  00287	eb 17		 jmp	 SHORT $LN10@convert_yu
$LN9@convert_yu:
  00289	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _x1$[ebp]
  0028d	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _ycp$8[ebp]
  00293	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00296	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$LN10@convert_yu:

; 1772 :             _mm_store_switch_si128((__m128i *)(ycp +  8), x2);

  002a0	33 c0		 xor	 eax, eax
  002a2	74 1c		 je	 SHORT $LN11@convert_yu
  002a4	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  002a8	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _ycp$8[ebp]
  002ae	83 c1 10	 add	 ecx, 16			; 00000010H
  002b1	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  002b4	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
  002be	eb 1a		 jmp	 SHORT $LN12@convert_yu
$LN11@convert_yu:
  002c0	0f 10 45 90	 movups	 xmm0, XMMWORD PTR _x2$[ebp]
  002c4	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _ycp$8[ebp]
  002ca	83 c2 10	 add	 edx, 16			; 00000010H
  002cd	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  002d0	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv193[ebp], 0
$LN12@convert_yu:

; 1773 :             _mm_store_switch_si128((__m128i *)(ycp + 16), x3);

  002da	33 c0		 xor	 eax, eax
  002dc	74 1f		 je	 SHORT $LN13@convert_yu
  002de	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  002e5	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _ycp$8[ebp]
  002eb	83 c1 20	 add	 ecx, 32			; 00000020H
  002ee	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  002f1	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
  002fb	eb 1d		 jmp	 SHORT $LN14@convert_yu
$LN13@convert_yu:
  002fd	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x3$[ebp]
  00304	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _ycp$8[ebp]
  0030a	83 c2 20	 add	 edx, 32			; 00000020H
  0030d	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00310	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN14@convert_yu:

; 1774 :         }

  0031a	e9 3d fe ff ff	 jmp	 $LN5@convert_yu
$LN6@convert_yu:

; 1775 :     }

  0031f	e9 c0 fd ff ff	 jmp	 $LN2@convert_yu
$LN1@convert_yu:

; 1776 : }

  00324	52		 push	 edx
  00325	8b cd		 mov	 ecx, ebp
  00327	50		 push	 eax
  00328	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@convert_yu
  0032e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00333	58		 pop	 eax
  00334	5a		 pop	 edx
  00335	5f		 pop	 edi
  00336	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00339	33 cd		 xor	 ecx, ebp
  0033b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00340	8b e5		 mov	 esp, ebp
  00342	5d		 pop	 ebp
  00343	8b e3		 mov	 esp, ebx
  00345	5b		 pop	 ebx
  00346	c3		 ret	 0
  00347	90		 npad	 1
$LN20@convert_yu:
  00348	04 00 00 00	 DD	 4
  0034c	00 00 00 00	 DD	 $LN19@convert_yu
$LN19@convert_yu:
  00350	ec ff ff ff	 DD	 -20			; ffffffecH
  00354	0c 00 00 00	 DD	 12			; 0000000cH
  00358	00 00 00 00	 DD	 $LN15@convert_yu
  0035c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00360	10 00 00 00	 DD	 16			; 00000010H
  00364	00 00 00 00	 DD	 $LN16@convert_yu
  00368	90 ff ff ff	 DD	 -112			; ffffff90H
  0036c	10 00 00 00	 DD	 16			; 00000010H
  00370	00 00 00 00	 DD	 $LN17@convert_yu
  00374	70 ff ff ff	 DD	 -144			; ffffff70H
  00378	10 00 00 00	 DD	 16			; 00000010H
  0037c	00 00 00 00	 DD	 $LN18@convert_yu
$LN18@convert_yu:
  00380	78		 DB	 120			; 00000078H
  00381	33		 DB	 51			; 00000033H
  00382	00		 DB	 0
$LN17@convert_yu:
  00383	78		 DB	 120			; 00000078H
  00384	32		 DB	 50			; 00000032H
  00385	00		 DB	 0
$LN16@convert_yu:
  00386	78		 DB	 120			; 00000078H
  00387	31		 DB	 49			; 00000031H
  00388	00		 DB	 0
$LN15@convert_yu:
  00389	79		 DB	 121			; 00000079H
  0038a	5f		 DB	 95			; 0000005fH
  0038b	72		 DB	 114			; 00000072H
  0038c	61		 DB	 97			; 00000061H
  0038d	6e		 DB	 110			; 0000006eH
  0038e	67		 DB	 103			; 00000067H
  0038f	65		 DB	 101			; 00000065H
  00390	00		 DB	 0
??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yuv444_16bit_to_yc48_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yuv444_16bit_to_yc48_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yuv444_16bit_to_yc48_sse41

; 55   : void convert_yuv444_16bit_to_yc48_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     convert_yuv444_16bit_to_yc48_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yuv444_16bit_to_yc48_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yuv444_16bit_to_yc48_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 57   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yuv444_16bit_to_yc48_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yuv444_16bit_to_yc48_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv263 = -636						; size = 4
tv233 = -632						; size = 4
tv203 = -628						; size = 4
$T1 = -624						; size = 12
$T2 = -608						; size = 16
$T3 = -592						; size = 16
$T4 = -576						; size = 16
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
$T12 = -448						; size = 16
$T13 = -432						; size = 16
$T14 = -416						; size = 16
$T15 = -400						; size = 16
$T16 = -384						; size = 16
$T17 = -368						; size = 16
$T18 = -352						; size = 16
$T19 = -336						; size = 16
$T20 = -320						; size = 16
_ycp$21 = -300						; size = 4
_ycp_fin$22 = -296					; size = 4
_V$23 = -292						; size = 4
_U$24 = -288						; size = 4
_Y$25 = -284						; size = 4
_y$26 = -280						; size = 4
_x3$ = -272						; size = 16
_x2$ = -240						; size = 16
_x1$ = -208						; size = 16
$T27 = -176						; size = 16
_xC_YCC$ = -144						; size = 16
$T28 = -112						; size = 16
_xC_pw_one$ = -80					; size = 16
_pixel$ = -52						; size = 4
_V_line$ = -48						; size = 4
_U_line$ = -44						; size = 4
_Y_line$ = -40						; size = 4
$T29 = -36						; size = 12
_y_range$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_16bit_simd<0>

; 1724 : static __forceinline void convert_yc48_to_yuv444_16bit_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H
  0001c	57		 push	 edi
  0001d	8d bd 80 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-640]
  00023	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1725 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d dc	 mov	 DWORD PTR $T29[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 e0	 mov	 DWORD PTR $T29[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 e4	 mov	 DWORD PTR $T29[ebp+8], eax
  00067	8b 4d dc	 mov	 ecx, DWORD PTR $T29[ebp]
  0006a	89 4d ec	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 e0	 mov	 edx, DWORD PTR $T29[ebp+4]
  00070	89 55 f0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 e4	 mov	 eax, DWORD PTR $T29[ebp+8]
  00076	89 45 f4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1726 :     char *Y_line = (char *)dst[0] + dst_y_pitch_byte + y_range.start_dst;

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00084	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00087	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  0008a	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  0008d	89 4d d8	 mov	 DWORD PTR _Y_line$[ebp], ecx

; 1727 :     char *U_line = (char *)dst[1] + dst_y_pitch_byte + y_range.start_dst;

  00090	ba 04 00 00 00	 mov	 edx, 4
  00095	c1 e2 00	 shl	 edx, 0
  00098	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  0009b	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0009e	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000a1	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  000a4	89 4d d4	 mov	 DWORD PTR _U_line$[ebp], ecx

; 1728 :     char *V_line = (char *)dst[2] + dst_y_pitch_byte + y_range.start_dst;

  000a7	ba 04 00 00 00	 mov	 edx, 4
  000ac	d1 e2		 shl	 edx, 1
  000ae	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  000b1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000b4	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000b7	03 4d f0	 add	 ecx, DWORD PTR _y_range$[ebp+4]
  000ba	89 4d d0	 mov	 DWORD PTR _V_line$[ebp], ecx

; 1729 :     char *pixel = (char *)src[0] + src_y_pitch_byte * y_range.start_src;

  000bd	ba 04 00 00 00	 mov	 edx, 4
  000c2	6b c2 00	 imul	 eax, edx, 0
  000c5	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  000c8	0f af 4d ec	 imul	 ecx, DWORD PTR _y_range$[ebp]
  000cc	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  000cf	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000d2	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx

; 1730 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000d5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000dc	0f 29 45 90	 movaps	 XMMWORD PTR $T28[ebp], xmm0
  000e0	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  000e4	0f 29 45 b0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1731 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000e8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000ef	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  000f6	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  000fd	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1732 :     __m128i x1, x2, x3;
; 1733 :     for (int y = 0; y < y_range.len; y++, pixel += src_y_pitch_byte, Y_line += dst_y_pitch_byte, U_line += dst_y_pitch_byte, V_line += dst_y_pitch_byte) {

  00104	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$26[ebp], 0
  0010e	eb 33		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00110	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _y$26[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _y$26[ebp], eax
  0011f	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00122	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00125	89 4d cc	 mov	 DWORD PTR _pixel$[ebp], ecx
  00128	8b 55 d8	 mov	 edx, DWORD PTR _Y_line$[ebp]
  0012b	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  0012e	89 55 d8	 mov	 DWORD PTR _Y_line$[ebp], edx
  00131	8b 45 d4	 mov	 eax, DWORD PTR _U_line$[ebp]
  00134	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  00137	89 45 d4	 mov	 DWORD PTR _U_line$[ebp], eax
  0013a	8b 4d d0	 mov	 ecx, DWORD PTR _V_line$[ebp]
  0013d	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00140	89 4d d0	 mov	 DWORD PTR _V_line$[ebp], ecx
$LN4@convert_yc:
  00143	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _y$26[ebp]
  00149	3b 55 f4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  0014c	0f 8d 5d 03 00
	00		 jge	 $LN1@convert_yc

; 1734 :         short *Y = (short *)Y_line;

  00152	8b 45 d8	 mov	 eax, DWORD PTR _Y_line$[ebp]
  00155	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _Y$25[ebp], eax

; 1735 :         short *U = (short *)U_line;

  0015b	8b 4d d4	 mov	 ecx, DWORD PTR _U_line$[ebp]
  0015e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _U$24[ebp], ecx

; 1736 :         short *V = (short *)V_line;

  00164	8b 55 d0	 mov	 edx, DWORD PTR _V_line$[ebp]
  00167	89 95 dc fe ff
	ff		 mov	 DWORD PTR _V$23[ebp], edx

; 1737 :         short *const ycp_fin = (short *)pixel + width * 3;

  0016d	6b 43 10 03	 imul	 eax, DWORD PTR _width$[ebx], 3
  00171	8b 4d cc	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00174	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00177	89 95 d8 fe ff
	ff		 mov	 DWORD PTR _ycp_fin$22[ebp], edx

; 1738 :         for (short *ycp = (short *)pixel; ycp < ycp_fin; ycp += 24, Y += 8, U += 8, V += 8) {

  0017d	8b 45 cc	 mov	 eax, DWORD PTR _pixel$[ebp]
  00180	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _ycp$21[ebp], eax
  00186	eb 3c		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00188	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$21[ebp]
  0018e	83 c1 30	 add	 ecx, 48			; 00000030H
  00191	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _ycp$21[ebp], ecx
  00197	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _Y$25[ebp]
  0019d	83 c2 10	 add	 edx, 16			; 00000010H
  001a0	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _Y$25[ebp], edx
  001a6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _U$24[ebp]
  001ac	83 c0 10	 add	 eax, 16			; 00000010H
  001af	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _U$24[ebp], eax
  001b5	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _V$23[ebp]
  001bb	83 c1 10	 add	 ecx, 16			; 00000010H
  001be	89 8d dc fe ff
	ff		 mov	 DWORD PTR _V$23[ebp], ecx
$LN7@convert_yc:
  001c4	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$21[ebp]
  001ca	3b 95 d8 fe ff
	ff		 cmp	 edx, DWORD PTR _ycp_fin$22[ebp]
  001d0	0f 83 d4 02 00
	00		 jae	 $LN6@convert_yc

; 1739 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  001d6	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _ycp$21[ebp]
  001dc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001df	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  001e6	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  001ed	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1740 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001f4	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$21[ebp]
  001fa	83 c1 10	 add	 ecx, 16			; 00000010H
  001fd	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00200	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00207	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  0020e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1741 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00215	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$21[ebp]
  0021b	83 c2 20	 add	 edx, 32			; 00000020H
  0021e	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00221	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00228	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  0022f	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1742 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00236	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _x3$[ebp]
  0023c	50		 push	 eax
  0023d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00243	51		 push	 ecx
  00244	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0024a	52		 push	 edx
  0024b	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ; gather_y_u_v_from_yc48
  00250	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1743 :             _mm_store_switch_si128((__m128i *)Y, convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00253	33 c0		 xor	 eax, eax
  00255	74 54		 je	 SHORT $LN9@convert_yc
  00257	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0025e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00265	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00268	51		 push	 ecx
  00269	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0026f	52		 push	 edx
  00270	6a 04		 push	 4
  00272	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00278	50		 push	 eax
  00279	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00280	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00285	83 c4 10	 add	 esp, 16			; 00000010H
  00288	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0028f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00296	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _Y$25[ebp]
  0029c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0029f	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
  002a9	eb 52		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  002ab	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  002b2	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  002b9	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  002bc	52		 push	 edx
  002bd	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  002c3	50		 push	 eax
  002c4	6a 04		 push	 4
  002c6	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  002cc	51		 push	 ecx
  002cd	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002d4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002d9	83 c4 10	 add	 esp, 16			; 00000010H
  002dc	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  002e3	0f 10 85 60 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T14[ebp]
  002ea	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _Y$25[ebp]
  002f0	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  002f3	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv203[ebp], 0
$LN10@convert_yc:

; 1744 :             _mm_store_switch_si128((__m128i *)U, convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  002fd	33 c0		 xor	 eax, eax
  002ff	74 69		 je	 SHORT $LN11@convert_yc
  00301	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00308	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0030f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00316	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0031d	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00320	51		 push	 ecx
  00321	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00328	6a 00		 push	 0
  0032a	8d 95 40 fe ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  00330	52		 push	 edx
  00331	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00337	50		 push	 eax
  00338	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0033f	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00344	83 c4 10	 add	 esp, 16			; 00000010H
  00347	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0034e	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00355	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _U$24[ebp]
  0035b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0035e	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
  00368	eb 67		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  0036a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00371	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00378	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0037f	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00386	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  00389	52		 push	 edx
  0038a	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00391	6a 00		 push	 0
  00393	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00399	50		 push	 eax
  0039a	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  003a0	51		 push	 ecx
  003a1	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  003a8	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  003ad	83 c4 10	 add	 esp, 16			; 00000010H
  003b0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  003b7	0f 10 85 00 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T8[ebp]
  003be	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _U$24[ebp]
  003c4	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  003c7	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv233[ebp], 0
$LN12@convert_yc:

; 1745 :             _mm_store_switch_si128((__m128i *)V, convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one));

  003d1	33 c0		 xor	 eax, eax
  003d3	74 69		 je	 SHORT $LN13@convert_yc
  003d5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  003dc	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  003e3	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  003ea	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  003f1	8d 4d b0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  003f4	51		 push	 ecx
  003f5	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  003fc	6a 00		 push	 0
  003fe	8d 95 e0 fd ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00404	52		 push	 edx
  00405	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0040b	50		 push	 eax
  0040c	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00413	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00422	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00429	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _V$23[ebp]
  0042f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00432	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv263[ebp], 0
  0043c	eb 67		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  0043e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00445	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0044c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00453	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0045a	8d 55 b0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  0045d	52		 push	 edx
  0045e	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  00465	6a 00		 push	 0
  00467	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0046d	50		 push	 eax
  0046e	8d 8d c0 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00474	51		 push	 ecx
  00475	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0047c	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00481	83 c4 10	 add	 esp, 16			; 00000010H
  00484	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0048b	0f 10 85 a0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00492	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _V$23[ebp]
  00498	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0049b	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv263[ebp], 0
$LN14@convert_yc:

; 1746 :         }

  004a5	e9 de fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1747 :     }

  004aa	e9 61 fc ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1748 : }

  004af	52		 push	 edx
  004b0	8b cd		 mov	 ecx, ebp
  004b2	50		 push	 eax
  004b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@convert_yc
  004b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004be	58		 pop	 eax
  004bf	5a		 pop	 edx
  004c0	5f		 pop	 edi
  004c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c4	33 cd		 xor	 ecx, ebp
  004c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004cb	8b e5		 mov	 esp, ebp
  004cd	5d		 pop	 ebp
  004ce	8b e3		 mov	 esp, ebx
  004d0	5b		 pop	 ebx
  004d1	c3		 ret	 0
  004d2	66 90		 npad	 2
$LN22@convert_yc:
  004d4	06 00 00 00	 DD	 6
  004d8	00 00 00 00	 DD	 $LN21@convert_yc
$LN21@convert_yc:
  004dc	ec ff ff ff	 DD	 -20			; ffffffecH
  004e0	0c 00 00 00	 DD	 12			; 0000000cH
  004e4	00 00 00 00	 DD	 $LN15@convert_yc
  004e8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  004ec	10 00 00 00	 DD	 16			; 00000010H
  004f0	00 00 00 00	 DD	 $LN16@convert_yc
  004f4	70 ff ff ff	 DD	 -144			; ffffff70H
  004f8	10 00 00 00	 DD	 16			; 00000010H
  004fc	00 00 00 00	 DD	 $LN17@convert_yc
  00500	30 ff ff ff	 DD	 -208			; ffffff30H
  00504	10 00 00 00	 DD	 16			; 00000010H
  00508	00 00 00 00	 DD	 $LN18@convert_yc
  0050c	10 ff ff ff	 DD	 -240			; ffffff10H
  00510	10 00 00 00	 DD	 16			; 00000010H
  00514	00 00 00 00	 DD	 $LN19@convert_yc
  00518	f0 fe ff ff	 DD	 -272			; fffffef0H
  0051c	10 00 00 00	 DD	 16			; 00000010H
  00520	00 00 00 00	 DD	 $LN20@convert_yc
$LN20@convert_yc:
  00524	78		 DB	 120			; 00000078H
  00525	33		 DB	 51			; 00000033H
  00526	00		 DB	 0
$LN19@convert_yc:
  00527	78		 DB	 120			; 00000078H
  00528	32		 DB	 50			; 00000032H
  00529	00		 DB	 0
$LN18@convert_yc:
  0052a	78		 DB	 120			; 00000078H
  0052b	31		 DB	 49			; 00000031H
  0052c	00		 DB	 0
$LN17@convert_yc:
  0052d	78		 DB	 120			; 00000078H
  0052e	43		 DB	 67			; 00000043H
  0052f	5f		 DB	 95			; 0000005fH
  00530	59		 DB	 89			; 00000059H
  00531	43		 DB	 67			; 00000043H
  00532	43		 DB	 67			; 00000043H
  00533	00		 DB	 0
$LN16@convert_yc:
  00534	78		 DB	 120			; 00000078H
  00535	43		 DB	 67			; 00000043H
  00536	5f		 DB	 95			; 0000005fH
  00537	70		 DB	 112			; 00000070H
  00538	77		 DB	 119			; 00000077H
  00539	5f		 DB	 95			; 0000005fH
  0053a	6f		 DB	 111			; 0000006fH
  0053b	6e		 DB	 110			; 0000006eH
  0053c	65		 DB	 101			; 00000065H
  0053d	00		 DB	 0
$LN15@convert_yc:
  0053e	79		 DB	 121			; 00000079H
  0053f	5f		 DB	 95			; 0000005fH
  00540	72		 DB	 114			; 00000072H
  00541	61		 DB	 97			; 00000061H
  00542	6e		 DB	 110			; 0000006eH
  00543	67		 DB	 103			; 00000067H
  00544	65		 DB	 101			; 00000065H
  00545	00		 DB	 0
??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_16bit_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_yuv444_16bit_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_16bit_sse41

; 51   : void convert_yc48_to_yuv444_16bit_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   :     convert_yc48_to_yuv444_16bit_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_16bit_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_16bit_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 53   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_yuv444_16bit_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_16bit_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv334 = -892						; size = 4
tv328 = -888						; size = 4
tv322 = -884						; size = 4
$T1 = -880						; size = 12
$T2 = -864						; size = 16
$T3 = -848						; size = 16
$T4 = -832						; size = 16
$T5 = -816						; size = 16
$T6 = -800						; size = 16
$T7 = -784						; size = 16
$T8 = -768						; size = 16
$T9 = -752						; size = 16
$T10 = -736						; size = 16
$T11 = -720						; size = 16
$T12 = -704						; size = 16
$T13 = -688						; size = 16
$T14 = -672						; size = 16
$T15 = -656						; size = 16
$T16 = -640						; size = 16
$T17 = -624						; size = 16
$T18 = -608						; size = 16
$T19 = -592						; size = 16
$T20 = -576						; size = 16
$T21 = -560						; size = 16
$T22 = -544						; size = 16
$T23 = -528						; size = 16
$T24 = -512						; size = 16
$T25 = -496						; size = 16
$T26 = -480						; size = 16
$T27 = -464						; size = 16
$T28 = -448						; size = 16
$T29 = -432						; size = 16
$T30 = -416						; size = 16
$T31 = -400						; size = 16
$T32 = -384						; size = 16
_ycp$33 = -360						; size = 4
_ycp_fin$34 = -356					; size = 4
_V$35 = -352						; size = 4
_U$36 = -348						; size = 4
_Y$37 = -344						; size = 4
_y$38 = -340						; size = 4
_xV$ = -336						; size = 16
_xU$ = -320						; size = 16
_xY$ = -304						; size = 16
_x3$ = -272						; size = 16
_x2$ = -240						; size = 16
_x1$ = -208						; size = 16
$T39 = -176						; size = 16
_xC_YCC$ = -144						; size = 16
$T40 = -112						; size = 16
_xC_pw_one$ = -80					; size = 16
_ycpLine$ = -52						; size = 4
_VLine$ = -48						; size = 4
_ULine$ = -44						; size = 4
_YLine$ = -40						; size = 4
$T41 = -36						; size = 12
_y_range$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_simd<0>

; 1673 : static void __forceinline convert_yc48_to_yuv444_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 03 00
	00		 sub	 esp, 896		; 00000380H
  0001c	57		 push	 edi
  0001d	8d bd 80 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-896]
  00023	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1674 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 90 fc ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d dc	 mov	 DWORD PTR $T41[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 e0	 mov	 DWORD PTR $T41[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 e4	 mov	 DWORD PTR $T41[ebp+8], eax
  00067	8b 4d dc	 mov	 ecx, DWORD PTR $T41[ebp]
  0006a	89 4d ec	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 e0	 mov	 edx, DWORD PTR $T41[ebp+4]
  00070	89 55 f0	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 e4	 mov	 eax, DWORD PTR $T41[ebp+8]
  00076	89 45 f4	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1675 :     uint8_t *YLine   = (uint8_t *)dst[0] + dst_y_pitch_byte * y_range.start_dst;

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  00084	0f af 45 f0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  00088	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  0008b	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  0008e	89 45 d8	 mov	 DWORD PTR _YLine$[ebp], eax

; 1676 :     uint8_t *ULine   = (uint8_t *)dst[1] + dst_y_pitch_byte * y_range.start_dst;

  00091	ba 04 00 00 00	 mov	 edx, 4
  00096	c1 e2 00	 shl	 edx, 0
  00099	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  0009c	0f af 45 f0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000a0	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000a3	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000a6	89 45 d4	 mov	 DWORD PTR _ULine$[ebp], eax

; 1677 :     uint8_t *VLine   = (uint8_t *)dst[2] + dst_y_pitch_byte * y_range.start_dst;

  000a9	ba 04 00 00 00	 mov	 edx, 4
  000ae	d1 e2		 shl	 edx, 1
  000b0	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000b3	0f af 45 f0	 imul	 eax, DWORD PTR _y_range$[ebp+4]
  000b7	8b 4b 08	 mov	 ecx, DWORD PTR _dst$[ebx]
  000ba	03 04 11	 add	 eax, DWORD PTR [ecx+edx]
  000bd	89 45 d0	 mov	 DWORD PTR _VLine$[ebp], eax

; 1678 :     uint8_t *ycpLine = (uint8_t *)src[0] + src_y_pitch_byte * y_range.start_src;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 00	 imul	 eax, edx, 0
  000c8	8b 4b 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  000cb	0f af 4d ec	 imul	 ecx, DWORD PTR _y_range$[ebp]
  000cf	8b 53 0c	 mov	 edx, DWORD PTR _src$[ebx]
  000d2	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  000d5	89 4d cc	 mov	 DWORD PTR _ycpLine$[ebp], ecx

; 1679 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000d8	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000df	0f 29 45 90	 movaps	 XMMWORD PTR $T40[ebp], xmm0
  000e3	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T40[ebp]
  000e7	0f 29 45 b0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1680 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000eb	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000f2	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  000f9	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  00100	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1681 :     __m128i x1, x2, x3, xY, xU, xV;
; 1682 :     for (int y = 0; y < y_range.len; y++, ycpLine += src_y_pitch_byte, YLine += dst_y_pitch_byte, ULine += dst_y_pitch_byte, VLine += dst_y_pitch_byte) {

  00107	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$38[ebp], 0
  00111	eb 33		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00113	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _y$38[ebp]
  00119	83 c0 01	 add	 eax, 1
  0011c	89 85 ac fe ff
	ff		 mov	 DWORD PTR _y$38[ebp], eax
  00122	8b 4d cc	 mov	 ecx, DWORD PTR _ycpLine$[ebp]
  00125	03 4b 14	 add	 ecx, DWORD PTR _src_y_pitch_byte$[ebx]
  00128	89 4d cc	 mov	 DWORD PTR _ycpLine$[ebp], ecx
  0012b	8b 55 d8	 mov	 edx, DWORD PTR _YLine$[ebp]
  0012e	03 53 1c	 add	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00131	89 55 d8	 mov	 DWORD PTR _YLine$[ebp], edx
  00134	8b 45 d4	 mov	 eax, DWORD PTR _ULine$[ebp]
  00137	03 43 1c	 add	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  0013a	89 45 d4	 mov	 DWORD PTR _ULine$[ebp], eax
  0013d	8b 4d d0	 mov	 ecx, DWORD PTR _VLine$[ebp]
  00140	03 4b 1c	 add	 ecx, DWORD PTR _dst_y_pitch_byte$[ebx]
  00143	89 4d d0	 mov	 DWORD PTR _VLine$[ebp], ecx
$LN4@convert_yc:
  00146	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _y$38[ebp]
  0014c	3b 55 f4	 cmp	 edx, DWORD PTR _y_range$[ebp+8]
  0014f	0f 8d 63 05 00
	00		 jge	 $LN1@convert_yc

; 1683 :         uint8_t *Y = YLine;

  00155	8b 45 d8	 mov	 eax, DWORD PTR _YLine$[ebp]
  00158	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _Y$37[ebp], eax

; 1684 :         uint8_t *U = ULine;

  0015e	8b 4d d4	 mov	 ecx, DWORD PTR _ULine$[ebp]
  00161	89 8d a4 fe ff
	ff		 mov	 DWORD PTR _U$36[ebp], ecx

; 1685 :         uint8_t *V = VLine;

  00167	8b 55 d0	 mov	 edx, DWORD PTR _VLine$[ebp]
  0016a	89 95 a0 fe ff
	ff		 mov	 DWORD PTR _V$35[ebp], edx

; 1686 :         int16_t *const ycp_fin = (int16_t *)ycpLine + width * 3;

  00170	6b 43 10 03	 imul	 eax, DWORD PTR _width$[ebx], 3
  00174	8b 4d cc	 mov	 ecx, DWORD PTR _ycpLine$[ebp]
  00177	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0017a	89 95 9c fe ff
	ff		 mov	 DWORD PTR _ycp_fin$34[ebp], edx

; 1687 :         for (int16_t *ycp = (int16_t *)ycpLine; ycp < ycp_fin; ycp += 48, Y += 16, U += 16, V += 16) {

  00180	8b 45 cc	 mov	 eax, DWORD PTR _ycpLine$[ebp]
  00183	89 85 98 fe ff
	ff		 mov	 DWORD PTR _ycp$33[ebp], eax
  00189	eb 3c		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0018b	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$33[ebp]
  00191	83 c1 60	 add	 ecx, 96			; 00000060H
  00194	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _ycp$33[ebp], ecx
  0019a	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _Y$37[ebp]
  001a0	83 c2 10	 add	 edx, 16			; 00000010H
  001a3	89 95 a8 fe ff
	ff		 mov	 DWORD PTR _Y$37[ebp], edx
  001a9	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR _U$36[ebp]
  001af	83 c0 10	 add	 eax, 16			; 00000010H
  001b2	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _U$36[ebp], eax
  001b8	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _V$35[ebp]
  001be	83 c1 10	 add	 ecx, 16			; 00000010H
  001c1	89 8d a0 fe ff
	ff		 mov	 DWORD PTR _V$35[ebp], ecx
$LN7@convert_yc:
  001c7	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$33[ebp]
  001cd	3b 95 9c fe ff
	ff		 cmp	 edx, DWORD PTR _ycp_fin$34[ebp]
  001d3	0f 83 da 04 00
	00		 jae	 $LN6@convert_yc

; 1688 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  001d9	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _ycp$33[ebp]
  001df	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001e2	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  001e9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  001f0	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1689 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001f7	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$33[ebp]
  001fd	83 c1 10	 add	 ecx, 16			; 00000010H
  00200	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00203	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  0020a	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  00211	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1690 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00218	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$33[ebp]
  0021e	83 c2 20	 add	 edx, 32			; 00000020H
  00221	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00224	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  0022b	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  00232	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1691 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00239	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _x3$[ebp]
  0023f	50		 push	 eax
  00240	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00246	51		 push	 ecx
  00247	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ; gather_y_u_v_from_yc48
  00253	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1692 : 
; 1693 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  00256	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0025d	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  00264	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00267	50		 push	 eax
  00268	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  0026e	51		 push	 ecx
  0026f	6a 04		 push	 4
  00271	8d 95 50 fe ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  00277	52		 push	 edx
  00278	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0027f	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00284	83 c4 10	 add	 esp, 16			; 00000010H
  00287	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0028e	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00295	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1694 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  0029c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  002a3	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  002aa	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  002b1	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  002b8	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  002bb	50		 push	 eax
  002bc	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  002c3	6a 00		 push	 0
  002c5	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  002cb	51		 push	 ecx
  002cc	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR $T27[ebp]
  002d2	52		 push	 edx
  002d3	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  002da	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  002df	83 c4 10	 add	 esp, 16			; 00000010H
  002e2	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  002e9	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  002f0	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1695 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  002f7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  002fe	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  00305	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  0030c	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00313	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00316	50		 push	 eax
  00317	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  0031e	6a 00		 push	 0
  00320	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00326	51		 push	 ecx
  00327	8d 95 00 fe ff
	ff		 lea	 edx, DWORD PTR $T24[ebp]
  0032d	52		 push	 edx
  0032e	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00335	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  0033a	83 c4 10	 add	 esp, 16			; 00000010H
  0033d	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00344	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0034b	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1696 :             xY = _mm_srli_epi16(x1, 8);

  00352	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00359	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0035e	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00365	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0036c	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _xY$[ebp], xmm0

; 1697 :             xU = _mm_srli_epi16(x2, 8);

  00373	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0037a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0037f	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00386	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  0038d	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xU$[ebp], xmm0

; 1698 :             xV = _mm_srli_epi16(x3, 8);

  00394	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0039b	66 0f 71 d0 08	 psrlw	 xmm0, 8
  003a0	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  003a7	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  003ae	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _xV$[ebp], xmm0

; 1699 : 
; 1700 :             x1 = _mm_loadu_si128((__m128i *)(ycp + 24));

  003b5	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _ycp$33[ebp]
  003bb	83 c0 30	 add	 eax, 48			; 00000030H
  003be	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  003c1	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  003c8	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  003cf	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1701 :             x2 = _mm_loadu_si128((__m128i *)(ycp + 32));

  003d6	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _ycp$33[ebp]
  003dc	83 c1 40	 add	 ecx, 64			; 00000040H
  003df	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  003e2	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  003e9	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  003f0	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1702 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 40));

  003f7	8b 95 98 fe ff
	ff		 mov	 edx, DWORD PTR _ycp$33[ebp]
  003fd	83 c2 50	 add	 edx, 80			; 00000050H
  00400	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00403	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0040a	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00411	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1703 :             gather_y_u_v_from_yc48(x1, x2, x3);

  00418	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _x3$[ebp]
  0041e	50		 push	 eax
  0041f	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00425	51		 push	 ecx
  00426	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0042c	52		 push	 edx
  0042d	e8 00 00 00 00	 call	 ?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ; gather_y_u_v_from_yc48
  00432	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1704 : 
; 1705 :             x1 = convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one);

  00435	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0043c	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00443	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00446	50		 push	 eax
  00447	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  0044d	51		 push	 ecx
  0044e	6a 04		 push	 4
  00450	8d 95 70 fd ff
	ff		 lea	 edx, DWORD PTR $T15[ebp]
  00456	52		 push	 edx
  00457	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0045e	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00463	83 c4 10	 add	 esp, 16			; 00000010H
  00466	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0046d	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00474	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1706 :             x2 = convert_uv_range_from_yc48(x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  0047b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  00482	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00489	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00490	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00497	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  0049a	50		 push	 eax
  0049b	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  004a2	6a 00		 push	 0
  004a4	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  004aa	51		 push	 ecx
  004ab	8d 95 50 fd ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  004b1	52		 push	 edx
  004b2	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  004b9	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  004be	83 c4 10	 add	 esp, 16			; 00000010H
  004c1	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  004c8	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  004cf	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1707 :             x3 = convert_uv_range_from_yc48(x3, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_444, UV_L_RSH_16_444, xC_YCC, xC_pw_one);

  004d6	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_444@@3QBFB
  004dd	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  004e4	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  004eb	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  004f2	8d 45 b0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  004f5	50		 push	 eax
  004f6	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _xC_YCC$[ebp]
  004fd	6a 00		 push	 0
  004ff	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00505	51		 push	 ecx
  00506	8d 95 20 fd ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  0050c	52		 push	 edx
  0050d	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00514	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ; convert_uv_range_from_yc48
  00519	83 c4 10	 add	 esp, 16			; 00000010H
  0051c	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00523	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0052a	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1708 :             x1 = _mm_srli_epi16(x1, 8);

  00531	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00538	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0053d	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00544	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0054b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1709 :             x2 = _mm_srli_epi16(x2, 8);

  00552	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  00559	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0055e	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00565	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0056c	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1710 :             x3 = _mm_srli_epi16(x3, 8);

  00573	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0057a	66 0f 71 d0 08	 psrlw	 xmm0, 8
  0057f	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00586	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0058d	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1711 : 
; 1712 :             xY = _mm_packus_epi16(xY, x1);

  00594	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xY$[ebp]
  0059b	66 0f 67 85 30
	ff ff ff	 packuswb xmm0, XMMWORD PTR _x1$[ebp]
  005a3	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  005aa	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  005b1	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _xY$[ebp], xmm0

; 1713 :             xU = _mm_packus_epi16(xU, x2);

  005b8	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xU$[ebp]
  005bf	66 0f 67 85 10
	ff ff ff	 packuswb xmm0, XMMWORD PTR _x2$[ebp]
  005c7	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  005ce	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  005d5	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _xU$[ebp], xmm0

; 1714 :             xV = _mm_packus_epi16(xV, x3);

  005dc	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xV$[ebp]
  005e3	66 0f 67 85 f0
	fe ff ff	 packuswb xmm0, XMMWORD PTR _x3$[ebp]
  005eb	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  005f2	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  005f9	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _xV$[ebp], xmm0

; 1715 : 
; 1716 :             _mm_store_switch_si128((__m128i*)Y, xY);

  00600	33 c0		 xor	 eax, eax
  00602	74 1c		 je	 SHORT $LN9@convert_yc
  00604	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xY$[ebp]
  0060b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _Y$37[ebp]
  00611	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00614	c7 85 8c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv322[ebp], 0
  0061e	eb 1a		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  00620	0f 10 85 d0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _xY$[ebp]
  00627	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _Y$37[ebp]
  0062d	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00630	c7 85 8c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv322[ebp], 0
$LN10@convert_yc:

; 1717 :             _mm_store_switch_si128((__m128i*)U, xU);

  0063a	33 c0		 xor	 eax, eax
  0063c	74 1c		 je	 SHORT $LN11@convert_yc
  0063e	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xU$[ebp]
  00645	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _U$36[ebp]
  0064b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0064e	c7 85 88 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv328[ebp], 0
  00658	eb 1a		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  0065a	0f 10 85 c0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _xU$[ebp]
  00661	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _U$36[ebp]
  00667	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0066a	c7 85 88 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv328[ebp], 0
$LN12@convert_yc:

; 1718 :             _mm_store_switch_si128((__m128i*)V, xV);

  00674	33 c0		 xor	 eax, eax
  00676	74 1c		 je	 SHORT $LN13@convert_yc
  00678	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _xV$[ebp]
  0067f	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR _V$35[ebp]
  00685	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00688	c7 85 84 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv334[ebp], 0
  00692	eb 1a		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  00694	0f 10 85 b0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _xV$[ebp]
  0069b	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR _V$35[ebp]
  006a1	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  006a4	c7 85 84 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv334[ebp], 0
$LN14@convert_yc:

; 1719 :         }

  006ae	e9 d8 fa ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1720 :     }

  006b3	e9 5b fa ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1721 : }

  006b8	52		 push	 edx
  006b9	8b cd		 mov	 ecx, ebp
  006bb	50		 push	 eax
  006bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@convert_yc
  006c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  006c7	58		 pop	 eax
  006c8	5a		 pop	 edx
  006c9	5f		 pop	 edi
  006ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006cd	33 cd		 xor	 ecx, ebp
  006cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006d4	8b e5		 mov	 esp, ebp
  006d6	5d		 pop	 ebp
  006d7	8b e3		 mov	 esp, ebx
  006d9	5b		 pop	 ebx
  006da	c3		 ret	 0
  006db	90		 npad	 1
$LN22@convert_yc:
  006dc	06 00 00 00	 DD	 6
  006e0	00 00 00 00	 DD	 $LN21@convert_yc
$LN21@convert_yc:
  006e4	ec ff ff ff	 DD	 -20			; ffffffecH
  006e8	0c 00 00 00	 DD	 12			; 0000000cH
  006ec	00 00 00 00	 DD	 $LN15@convert_yc
  006f0	b0 ff ff ff	 DD	 -80			; ffffffb0H
  006f4	10 00 00 00	 DD	 16			; 00000010H
  006f8	00 00 00 00	 DD	 $LN16@convert_yc
  006fc	70 ff ff ff	 DD	 -144			; ffffff70H
  00700	10 00 00 00	 DD	 16			; 00000010H
  00704	00 00 00 00	 DD	 $LN17@convert_yc
  00708	30 ff ff ff	 DD	 -208			; ffffff30H
  0070c	10 00 00 00	 DD	 16			; 00000010H
  00710	00 00 00 00	 DD	 $LN18@convert_yc
  00714	10 ff ff ff	 DD	 -240			; ffffff10H
  00718	10 00 00 00	 DD	 16			; 00000010H
  0071c	00 00 00 00	 DD	 $LN19@convert_yc
  00720	f0 fe ff ff	 DD	 -272			; fffffef0H
  00724	10 00 00 00	 DD	 16			; 00000010H
  00728	00 00 00 00	 DD	 $LN20@convert_yc
$LN20@convert_yc:
  0072c	78		 DB	 120			; 00000078H
  0072d	33		 DB	 51			; 00000033H
  0072e	00		 DB	 0
$LN19@convert_yc:
  0072f	78		 DB	 120			; 00000078H
  00730	32		 DB	 50			; 00000032H
  00731	00		 DB	 0
$LN18@convert_yc:
  00732	78		 DB	 120			; 00000078H
  00733	31		 DB	 49			; 00000031H
  00734	00		 DB	 0
$LN17@convert_yc:
  00735	78		 DB	 120			; 00000078H
  00736	43		 DB	 67			; 00000043H
  00737	5f		 DB	 95			; 0000005fH
  00738	59		 DB	 89			; 00000059H
  00739	43		 DB	 67			; 00000043H
  0073a	43		 DB	 67			; 00000043H
  0073b	00		 DB	 0
$LN16@convert_yc:
  0073c	78		 DB	 120			; 00000078H
  0073d	43		 DB	 67			; 00000043H
  0073e	5f		 DB	 95			; 0000005fH
  0073f	70		 DB	 112			; 00000070H
  00740	77		 DB	 119			; 00000077H
  00741	5f		 DB	 95			; 0000005fH
  00742	6f		 DB	 111			; 0000006fH
  00743	6e		 DB	 110			; 0000006eH
  00744	65		 DB	 101			; 00000065H
  00745	00		 DB	 0
$LN15@convert_yc:
  00746	79		 DB	 121			; 00000079H
  00747	5f		 DB	 95			; 0000005fH
  00748	72		 DB	 114			; 00000072H
  00749	61		 DB	 97			; 00000061H
  0074a	6e		 DB	 110			; 0000006eH
  0074b	67		 DB	 103			; 00000067H
  0074c	65		 DB	 101			; 00000065H
  0074d	00		 DB	 0
??$convert_yc48_to_yuv444_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_yuv444_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_yuv444_sse41

; 47   : void convert_yc48_to_yuv444_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   :     convert_yc48_to_yuv444_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_yuv444_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_yuv444_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 49   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_yuv444_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_yuv444_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv315 = -704						; size = 4
tv259 = -700						; size = 4
tv214 = -696						; size = 4
tv183 = -692						; size = 4
$T1 = -688						; size = 12
$T2 = -672						; size = 16
$T3 = -656						; size = 16
$T4 = -640						; size = 16
$T5 = -624						; size = 16
$T6 = -608						; size = 16
$T7 = -592						; size = 16
$T8 = -576						; size = 16
$T9 = -560						; size = 16
$T10 = -544						; size = 16
$T11 = -528						; size = 16
$T12 = -512						; size = 16
$T13 = -496						; size = 16
$T14 = -480						; size = 16
$T15 = -464						; size = 16
$T16 = -448						; size = 16
$T17 = -432						; size = 16
$T18 = -416						; size = 16
$T19 = -400						; size = 16
$T20 = -384						; size = 16
$T21 = -368						; size = 16
$T22 = -352						; size = 16
$T23 = -336						; size = 16
_x3$ = -320						; size = 16
_x2$ = -288						; size = 16
_x1$ = -256						; size = 16
_x0$ = -224						; size = 16
$T24 = -196						; size = 12
_y_range$ = -180					; size = 12
_dst_y_pitch$ = -164					; size = 4
$T25 = -160						; size = 16
_xC_YCC$ = -128						; size = 16
$T26 = -96						; size = 16
_xC_pw_one$ = -64					; size = 16
_C$ = -44						; size = 4
_Y$ = -40						; size = 4
_ycpw$ = -36						; size = 4
_ycp$ = -32						; size = 4
_pixel$ = -28						; size = 4
_dst_C$ = -24						; size = 4
_dst_Y$ = -20						; size = 4
_i$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_i_simd<0>

; 1633 : static __forceinline void convert_yc48_to_p010_i_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 02 00
	00		 sub	 esp, 704		; 000002c0H
  0001c	57		 push	 edi
  0001d	8d bd 40 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-704]
  00023	b9 b0 00 00 00	 mov	 ecx, 176		; 000000b0H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1634 :     int x, y, i;
; 1635 :     short *dst_Y = (short *)dst[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00044	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00047	89 45 ec	 mov	 DWORD PTR _dst_Y$[ebp], eax

; 1636 :     short *dst_C = (short *)dst[1];

  0004a	b9 04 00 00 00	 mov	 ecx, 4
  0004f	c1 e1 00	 shl	 ecx, 0
  00052	8b 53 08	 mov	 edx, DWORD PTR _dst$[ebx]
  00055	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00058	89 45 e8	 mov	 DWORD PTR _dst_C$[ebp], eax

; 1637 :     const void  *pixel = src[0];

  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	6b d1 00	 imul	 edx, ecx, 0
  00063	8b 43 0c	 mov	 eax, DWORD PTR _src$[ebx]
  00066	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00069	89 4d e4	 mov	 DWORD PTR _pixel$[ebp], ecx

; 1638 :     const short *ycp, *ycpw;
; 1639 :     short *Y = nullptr, *C = nullptr;

  0006c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0
  00073	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _C$[ebp], 0

; 1640 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  0007a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  00081	0f 29 45 a0	 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00085	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00089	0f 29 45 c0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1641 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  0008d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  00094	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  0009b	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000a2	0f 29 45 80	 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1642 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000a6	8b 53 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebx]
  000a9	d1 fa		 sar	 edx, 1
  000ab	89 95 5c ff ff
	ff		 mov	 DWORD PTR _dst_y_pitch$[ebp], edx

; 1643 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  000b1	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  000b4	50		 push	 eax
  000b5	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  000b8	51		 push	 ecx
  000b9	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  000bc	52		 push	 edx
  000bd	6a 00		 push	 0
  000bf	8d 85 50 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  000cb	83 c4 14	 add	 esp, 20			; 00000014H
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	89 8d 3c ff ff
	ff		 mov	 DWORD PTR $T24[ebp], ecx
  000d6	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d9	89 95 40 ff ff
	ff		 mov	 DWORD PTR $T24[ebp+4], edx
  000df	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e2	89 85 44 ff ff
	ff		 mov	 DWORD PTR $T24[ebp+8], eax
  000e8	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T24[ebp]
  000ee	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp], ecx
  000f4	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T24[ebp+4]
  000fa	89 95 50 ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp+4], edx
  00100	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T24[ebp+8]
  00106	89 85 54 ff ff
	ff		 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1644 :     __m128i x0, x1, x2, x3;
; 1645 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 4) {

  0010c	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _y_range$[ebp]
  00112	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx
  00115	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  00117	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  0011a	83 c2 04	 add	 edx, 4
  0011d	89 55 f4	 mov	 DWORD PTR _y$[ebp], edx
$LN4@convert_yc:
  00120	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _y_range$[ebp]
  00126	03 85 54 ff ff
	ff		 add	 eax, DWORD PTR _y_range$[ebp+8]
  0012c	39 45 f4	 cmp	 DWORD PTR _y$[ebp], eax
  0012f	0f 8d 5b 04 00
	00		 jge	 $LN1@convert_yc

; 1646 :         for (i = 0; i < 2; i++) {

  00135	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013c	eb 09		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  0013e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00141	83 c1 01	 add	 ecx, 1
  00144	89 4d f0	 mov	 DWORD PTR _i$[ebp], ecx
$LN7@convert_yc:
  00147	83 7d f0 02	 cmp	 DWORD PTR _i$[ebp], 2
  0014b	0f 8d 3a 04 00
	00		 jge	 $LN6@convert_yc

; 1647 :             ycp = (short*)pixel + width * (y + i) * 3;

  00151	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  00154	03 55 f0	 add	 edx, DWORD PTR _i$[ebp]
  00157	0f af 53 10	 imul	 edx, DWORD PTR _width$[ebx]
  0015b	6b c2 03	 imul	 eax, edx, 3
  0015e	8b 4d e4	 mov	 ecx, DWORD PTR _pixel$[ebp]
  00161	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00164	89 55 e0	 mov	 DWORD PTR _ycp$[ebp], edx

; 1648 :             ycpw= ycp + width*2*3;

  00167	8b 43 10	 mov	 eax, DWORD PTR _width$[ebx]
  0016a	d1 e0		 shl	 eax, 1
  0016c	6b c8 03	 imul	 ecx, eax, 3
  0016f	8b 55 e0	 mov	 edx, DWORD PTR _ycp$[ebp]
  00172	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00175	89 45 dc	 mov	 DWORD PTR _ycpw$[ebp], eax

; 1649 :             Y   = dst_Y + dst_y_pitch * (y + i);

  00178	8b 4d f4	 mov	 ecx, DWORD PTR _y$[ebp]
  0017b	03 4d f0	 add	 ecx, DWORD PTR _i$[ebp]
  0017e	0f af 8d 5c ff
	ff ff		 imul	 ecx, DWORD PTR _dst_y_pitch$[ebp]
  00185	8b 55 ec	 mov	 edx, DWORD PTR _dst_Y$[ebp]
  00188	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0018b	89 45 d8	 mov	 DWORD PTR _Y$[ebp], eax

; 1650 :             C   = dst_C + dst_y_pitch * (y + i*2) / 2;

  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00191	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  00194	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00197	0f af 85 5c ff
	ff ff		 imul	 eax, DWORD PTR _dst_y_pitch$[ebp]
  0019e	99		 cdq
  0019f	2b c2		 sub	 eax, edx
  001a1	d1 f8		 sar	 eax, 1
  001a3	8b 4d e8	 mov	 ecx, DWORD PTR _dst_C$[ebp]
  001a6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001a9	89 55 d4	 mov	 DWORD PTR _C$[ebp], edx

; 1651 :             for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  001ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  001b3	eb 1b		 jmp	 SHORT $LN10@convert_yc
$LN8@convert_yc:
  001b5	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001b8	83 c0 08	 add	 eax, 8
  001bb	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
  001be	8b 4d e0	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001c1	83 c1 30	 add	 ecx, 48			; 00000030H
  001c4	89 4d e0	 mov	 DWORD PTR _ycp$[ebp], ecx
  001c7	8b 55 dc	 mov	 edx, DWORD PTR _ycpw$[ebp]
  001ca	83 c2 30	 add	 edx, 48			; 00000030H
  001cd	89 55 dc	 mov	 DWORD PTR _ycpw$[ebp], edx
$LN10@convert_yc:
  001d0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  001d3	3b 43 10	 cmp	 eax, DWORD PTR _width$[ebx]
  001d6	0f 8d aa 03 00
	00		 jge	 $LN9@convert_yc

; 1652 :                 x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  001dc	8b 4d e0	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001df	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001e2	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  001e9	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  001f0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1653 :                 x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001f7	8b 55 e0	 mov	 edx, DWORD PTR _ycp$[ebp]
  001fa	83 c2 10	 add	 edx, 16			; 00000010H
  001fd	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00200	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00207	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0020e	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1654 :                 x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  00215	8b 45 e0	 mov	 eax, DWORD PTR _ycp$[ebp]
  00218	83 c0 20	 add	 eax, 32			; 00000020H
  0021b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0021e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00225	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0022c	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1655 :                 _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  00233	8b 4d dc	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  00236	89 8d 4c fd ff
	ff		 mov	 DWORD PTR tv183[ebp], ecx
  0023c	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR tv183[ebp]
  00242	0f 18 12	 prefetcht1 BYTE PTR [edx]

; 1656 :                 gather_y_uv_from_yc48(x1, x2, x3);

  00245	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0024c	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _x2$[ebp]
  00252	50		 push	 eax
  00253	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _x1$[ebp]
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  0025f	83 c4 08	 add	 esp, 8

; 1657 :                 x0 = x2;

  00262	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  00269	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1658 :                 _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00270	33 d2		 xor	 edx, edx
  00272	74 52		 je	 SHORT $LN12@convert_yc
  00274	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0027b	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00282	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00285	50		 push	 eax
  00286	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00289	51		 push	 ecx
  0028a	6a 04		 push	 4
  0028c	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  00292	52		 push	 edx
  00293	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0029a	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  0029f	83 c4 10	 add	 esp, 16			; 00000010H
  002a2	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  002a9	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  002b0	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  002b3	8b 4d d8	 mov	 ecx, DWORD PTR _Y$[ebp]
  002b6	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  002ba	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
  002c4	eb 50		 jmp	 SHORT $LN13@convert_yc
$LN12@convert_yc:
  002c6	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  002cd	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  002d4	8d 55 c0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  002d7	52		 push	 edx
  002d8	8d 45 80	 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  002db	50		 push	 eax
  002dc	6a 04		 push	 4
  002de	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  002e4	51		 push	 ecx
  002e5	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002ec	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002f1	83 c4 10	 add	 esp, 16			; 00000010H
  002f4	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  002fb	0f 10 85 50 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp]
  00302	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00305	8b 45 d8	 mov	 eax, DWORD PTR _Y$[ebp]
  00308	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  0030c	c7 85 48 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv214[ebp], 0
$LN13@convert_yc:

; 1659 : 
; 1660 :                 x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  00316	8b 4d dc	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  00319	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0031c	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00323	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0032a	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1661 :                 x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  00331	8b 55 dc	 mov	 edx, DWORD PTR _ycpw$[ebp]
  00334	83 c2 10	 add	 edx, 16			; 00000010H
  00337	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0033a	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00341	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00348	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1662 :                 x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  0034f	8b 45 dc	 mov	 eax, DWORD PTR _ycpw$[ebp]
  00352	83 c0 20	 add	 eax, 32			; 00000020H
  00355	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00358	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0035f	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00366	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1663 :                 gather_y_uv_from_yc48(x1, x2, x3);

  0036d	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00374	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  0037a	51		 push	 ecx
  0037b	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  00381	52		 push	 edx
  00382	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00387	83 c4 08	 add	 esp, 8

; 1664 :                 _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch*2), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  0038a	33 c0		 xor	 eax, eax
  0038c	74 5d		 je	 SHORT $LN14@convert_yc
  0038e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00395	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0039c	8d 4d c0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  0039f	51		 push	 ecx
  003a0	8d 55 80	 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  003a3	52		 push	 edx
  003a4	6a 04		 push	 4
  003a6	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  003ac	50		 push	 eax
  003ad	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  003b4	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  003b9	83 c4 10	 add	 esp, 16			; 00000010H
  003bc	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  003c3	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  003ca	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  003cd	8b 55 d8	 mov	 edx, DWORD PTR _Y$[ebp]
  003d0	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  003d3	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _dst_y_pitch$[ebp]
  003d9	d1 e1		 shl	 ecx, 1
  003db	0f 11 04 48	 movups	 XMMWORD PTR [eax+ecx*2], xmm0
  003df	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
  003e9	eb 5b		 jmp	 SHORT $LN15@convert_yc
$LN14@convert_yc:
  003eb	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003f2	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  003f9	8d 55 c0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  003fc	52		 push	 edx
  003fd	8d 45 80	 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  00400	50		 push	 eax
  00401	6a 04		 push	 4
  00403	8d 8d f0 fd ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00409	51		 push	 ecx
  0040a	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00411	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00416	83 c4 10	 add	 esp, 16			; 00000010H
  00419	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00420	0f 10 85 e0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T10[ebp]
  00427	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  0042a	8b 45 d8	 mov	 eax, DWORD PTR _Y$[ebp]
  0042d	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00430	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  00436	d1 e2		 shl	 edx, 1
  00438	0f 11 04 51	 movups	 XMMWORD PTR [ecx+edx*2], xmm0
  0043c	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv259[ebp], 0
$LN15@convert_yc:

; 1665 : 
; 1666 :                 _mm_store_switch_si128((__m128i *)(C + x), convert_uv_range_from_yc48_420i(x0, x2, _mm_set1_epi16(UV_OFFSET_x1), xC_UV_L_MA_16_420I(i), xC_UV_L_MA_16_420I((i+1)&0x01), UV_L_RSH_16_420I, xC_YCC, xC_pw_one));

  00446	33 c0		 xor	 eax, eax
  00448	0f 84 9c 00 00
	00		 je	 $LN16@convert_yc
  0044e	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00451	83 c1 01	 add	 ecx, 1
  00454	83 e1 01	 and	 ecx, 1
  00457	c1 e1 05	 shl	 ecx, 5
  0045a	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00460	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00463	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0046a	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  0046d	c1 e2 05	 shl	 edx, 5
  00470	81 c2 00 00 00
	00		 add	 edx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00476	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00479	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00480	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00487	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0048e	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  00491	50		 push	 eax
  00492	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00495	51		 push	 ecx
  00496	6a 02		 push	 2
  00498	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  0049e	52		 push	 edx
  0049f	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  004a5	50		 push	 eax
  004a6	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  004ac	51		 push	 ecx
  004ad	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  004b4	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  004bb	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ; convert_uv_range_from_yc48_420i
  004c0	83 c4 18	 add	 esp, 24			; 00000018H
  004c3	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  004ca	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  004d1	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  004d4	8b 45 d4	 mov	 eax, DWORD PTR _C$[ebp]
  004d7	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  004db	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv315[ebp], 0
  004e5	e9 97 00 00 00	 jmp	 $LN17@convert_yc
$LN16@convert_yc:
  004ea	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  004ed	83 c1 01	 add	 ecx, 1
  004f0	83 e1 01	 and	 ecx, 1
  004f3	c1 e1 05	 shl	 ecx, 5
  004f6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  004fc	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  004ff	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00506	8b 55 f0	 mov	 edx, DWORD PTR _i$[ebp]
  00509	c1 e2 05	 shl	 edx, 5
  0050c	81 c2 00 00 00
	00		 add	 edx, OFFSET ?Array_UV_L_MA_16_420I@@3QAY0BA@$$CBFA
  00512	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00515	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0051c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@08000800080008000800080008000800
  00523	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0052a	8d 45 c0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  0052d	50		 push	 eax
  0052e	8d 4d 80	 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00531	51		 push	 ecx
  00532	6a 02		 push	 2
  00534	8d 95 70 fd ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  0053a	52		 push	 edx
  0053b	8d 85 80 fd ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00541	50		 push	 eax
  00542	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00548	51		 push	 ecx
  00549	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  00550	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00557	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ; convert_uv_range_from_yc48_420i
  0055c	83 c4 18	 add	 esp, 24			; 00000018H
  0055f	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00566	0f 10 85 60 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  0056d	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00570	8b 45 d4	 mov	 eax, DWORD PTR _C$[ebp]
  00573	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  00577	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv315[ebp], 0
$LN17@convert_yc:

; 1667 :             }

  00581	e9 2f fc ff ff	 jmp	 $LN8@convert_yc
$LN9@convert_yc:

; 1668 :         }

  00586	e9 b3 fb ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1669 :     }

  0058b	e9 87 fb ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1670 : }

  00590	52		 push	 edx
  00591	8b cd		 mov	 ecx, ebp
  00593	50		 push	 eax
  00594	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@convert_yc
  0059a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0059f	58		 pop	 eax
  005a0	5a		 pop	 edx
  005a1	5f		 pop	 edi
  005a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a5	33 cd		 xor	 ecx, ebp
  005a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ac	8b e5		 mov	 esp, ebp
  005ae	5d		 pop	 ebp
  005af	8b e3		 mov	 esp, ebx
  005b1	5b		 pop	 ebx
  005b2	c3		 ret	 0
  005b3	90		 npad	 1
$LN24@convert_yc:
  005b4	05 00 00 00	 DD	 5
  005b8	00 00 00 00	 DD	 $LN23@convert_yc
$LN23@convert_yc:
  005bc	c0 ff ff ff	 DD	 -64			; ffffffc0H
  005c0	10 00 00 00	 DD	 16			; 00000010H
  005c4	00 00 00 00	 DD	 $LN18@convert_yc
  005c8	80 ff ff ff	 DD	 -128			; ffffff80H
  005cc	10 00 00 00	 DD	 16			; 00000010H
  005d0	00 00 00 00	 DD	 $LN19@convert_yc
  005d4	4c ff ff ff	 DD	 -180			; ffffff4cH
  005d8	0c 00 00 00	 DD	 12			; 0000000cH
  005dc	00 00 00 00	 DD	 $LN20@convert_yc
  005e0	00 ff ff ff	 DD	 -256			; ffffff00H
  005e4	10 00 00 00	 DD	 16			; 00000010H
  005e8	00 00 00 00	 DD	 $LN21@convert_yc
  005ec	e0 fe ff ff	 DD	 -288			; fffffee0H
  005f0	10 00 00 00	 DD	 16			; 00000010H
  005f4	00 00 00 00	 DD	 $LN22@convert_yc
$LN22@convert_yc:
  005f8	78		 DB	 120			; 00000078H
  005f9	32		 DB	 50			; 00000032H
  005fa	00		 DB	 0
$LN21@convert_yc:
  005fb	78		 DB	 120			; 00000078H
  005fc	31		 DB	 49			; 00000031H
  005fd	00		 DB	 0
$LN20@convert_yc:
  005fe	79		 DB	 121			; 00000079H
  005ff	5f		 DB	 95			; 0000005fH
  00600	72		 DB	 114			; 00000072H
  00601	61		 DB	 97			; 00000061H
  00602	6e		 DB	 110			; 0000006eH
  00603	67		 DB	 103			; 00000067H
  00604	65		 DB	 101			; 00000065H
  00605	00		 DB	 0
$LN19@convert_yc:
  00606	78		 DB	 120			; 00000078H
  00607	43		 DB	 67			; 00000043H
  00608	5f		 DB	 95			; 0000005fH
  00609	59		 DB	 89			; 00000059H
  0060a	43		 DB	 67			; 00000043H
  0060b	43		 DB	 67			; 00000043H
  0060c	00		 DB	 0
$LN18@convert_yc:
  0060d	78		 DB	 120			; 00000078H
  0060e	43		 DB	 67			; 00000043H
  0060f	5f		 DB	 95			; 0000005fH
  00610	70		 DB	 112			; 00000070H
  00611	77		 DB	 119			; 00000077H
  00612	5f		 DB	 95			; 0000005fH
  00613	6f		 DB	 111			; 0000006fH
  00614	6e		 DB	 110			; 0000006eH
  00615	65		 DB	 101			; 00000065H
  00616	00		 DB	 0
??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_i_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_p010_i_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_i_sse41

; 43   : void convert_yc48_to_p010_i_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   :     convert_yc48_to_p010_i_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_i_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_i_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 45   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_p010_i_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_i_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
tv273 = -624						; size = 4
tv250 = -620						; size = 4
tv207 = -616						; size = 4
tv144 = -612						; size = 4
$T1 = -608						; size = 12
$T2 = -592						; size = 16
$T3 = -576						; size = 16
$T4 = -560						; size = 16
$T5 = -544						; size = 16
$T6 = -528						; size = 16
$T7 = -512						; size = 16
$T8 = -496						; size = 16
$T9 = -480						; size = 16
$T10 = -464						; size = 16
$T11 = -448						; size = 16
$T12 = -432						; size = 16
$T13 = -416						; size = 16
$T14 = -400						; size = 16
$T15 = -384						; size = 16
$T16 = -368						; size = 16
$T17 = -352						; size = 16
$T18 = -336						; size = 16
_x3$ = -320						; size = 16
_x2$ = -288						; size = 16
_x1$ = -256						; size = 16
_x0$ = -224						; size = 16
_dst_y_pitch$ = -196					; size = 4
$T19 = -192						; size = 16
_xC_YCC$ = -160						; size = 16
$T20 = -128						; size = 16
_xC_pw_one$ = -96					; size = 16
_C$ = -72						; size = 4
_Y$ = -68						; size = 4
_ycpw$ = -64						; size = 4
_ycp$ = -60						; size = 4
_pixel$ = -56						; size = 4
_dst_C$ = -52						; size = 4
_dst_Y$ = -48						; size = 4
$T21 = -44						; size = 12
_y_range$ = -28						; size = 12
_y$ = -12						; size = 4
_x$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_simd<0>

; 1591 : static __forceinline void convert_yc48_to_p010_simd(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 02 00
	00		 sub	 esp, 624		; 00000270H
  0001c	57		 push	 edi
  0001d	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-624]
  00023	b9 9c 00 00 00	 mov	 ecx, 156		; 0000009cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1592 :     int x, y;
; 1593 :     const auto y_range = thread_y_range(0, height, thread_id, thread_n);

  00039	8b 43 2c	 mov	 eax, DWORD PTR _thread_n$[ebx]
  0003c	50		 push	 eax
  0003d	8b 4b 28	 mov	 ecx, DWORD PTR _thread_id$[ebx]
  00040	51		 push	 ecx
  00041	8b 53 20	 mov	 edx, DWORD PTR _height$[ebx]
  00044	52		 push	 edx
  00045	6a 00		 push	 0
  00047	8d 85 a0 fd ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ; thread_y_range
  00053	83 c4 14	 add	 esp, 20			; 00000014H
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	89 4d d4	 mov	 DWORD PTR $T21[ebp], ecx
  0005b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005e	89 55 d8	 mov	 DWORD PTR $T21[ebp+4], edx
  00061	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00064	89 45 dc	 mov	 DWORD PTR $T21[ebp+8], eax
  00067	8b 4d d4	 mov	 ecx, DWORD PTR $T21[ebp]
  0006a	89 4d e4	 mov	 DWORD PTR _y_range$[ebp], ecx
  0006d	8b 55 d8	 mov	 edx, DWORD PTR $T21[ebp+4]
  00070	89 55 e8	 mov	 DWORD PTR _y_range$[ebp+4], edx
  00073	8b 45 dc	 mov	 eax, DWORD PTR $T21[ebp+8]
  00076	89 45 ec	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 1594 :     short *dst_Y = (short *)dst[0];

  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 00	 imul	 edx, ecx, 0
  00081	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00084	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00087	89 4d d0	 mov	 DWORD PTR _dst_Y$[ebp], ecx

; 1595 :     short *dst_C = (short *)dst[1];

  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	c1 e2 00	 shl	 edx, 0
  00092	8b 43 08	 mov	 eax, DWORD PTR _dst$[ebx]
  00095	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00098	89 4d cc	 mov	 DWORD PTR _dst_C$[ebp], ecx

; 1596 :     const void  *pixel = src[0];

  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	6b c2 00	 imul	 eax, edx, 0
  000a3	8b 4b 0c	 mov	 ecx, DWORD PTR _src$[ebx]
  000a6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000a9	89 55 c8	 mov	 DWORD PTR _pixel$[ebp], edx

; 1597 :     const short *ycp, *ycpw;
; 1598 :     short *Y = NULL, *C = NULL;

  000ac	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _Y$[ebp], 0
  000b3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _C$[ebp], 0

; 1599 :     const __m128i xC_pw_one = _mm_set1_epi16(1);

  000ba	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00010001000100010001000100010001
  000c1	0f 29 45 80	 movaps	 XMMWORD PTR $T20[ebp], xmm0
  000c5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  000c9	0f 29 45 a0	 movaps	 XMMWORD PTR _xC_pw_one$[ebp], xmm0

; 1600 :     const __m128i xC_YCC = _mm_set1_epi32(1<<LSFT_YCC_16);

  000cd	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00001000000010000000100000001000
  000d4	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  000db	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  000e2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm0

; 1601 :     const int dst_y_pitch = dst_y_pitch_byte >> 1;

  000e9	8b 43 1c	 mov	 eax, DWORD PTR _dst_y_pitch_byte$[ebx]
  000ec	d1 f8		 sar	 eax, 1
  000ee	89 85 3c ff ff
	ff		 mov	 DWORD PTR _dst_y_pitch$[ebp], eax

; 1602 :     __m128i x0, x1, x2, x3;
; 1603 :     for (y = y_range.start_src; y < (y_range.start_src + y_range.len); y += 2) {

  000f4	8b 4d e4	 mov	 ecx, DWORD PTR _y_range$[ebp]
  000f7	89 4d f4	 mov	 DWORD PTR _y$[ebp], ecx
  000fa	eb 09		 jmp	 SHORT $LN4@convert_yc
$LN2@convert_yc:
  000fc	8b 55 f4	 mov	 edx, DWORD PTR _y$[ebp]
  000ff	83 c2 02	 add	 edx, 2
  00102	89 55 f4	 mov	 DWORD PTR _y$[ebp], edx
$LN4@convert_yc:
  00105	8b 45 e4	 mov	 eax, DWORD PTR _y_range$[ebp]
  00108	03 45 ec	 add	 eax, DWORD PTR _y_range$[ebp+8]
  0010b	39 45 f4	 cmp	 DWORD PTR _y$[ebp], eax
  0010e	0f 8d 95 03 00
	00		 jge	 $LN1@convert_yc

; 1604 :         ycp = (short*)pixel + width * y * 3;

  00114	8b 4b 10	 mov	 ecx, DWORD PTR _width$[ebx]
  00117	0f af 4d f4	 imul	 ecx, DWORD PTR _y$[ebp]
  0011b	6b d1 03	 imul	 edx, ecx, 3
  0011e	8b 45 c8	 mov	 eax, DWORD PTR _pixel$[ebp]
  00121	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00124	89 4d c4	 mov	 DWORD PTR _ycp$[ebp], ecx

; 1605 :         ycpw= ycp + width*3;

  00127	6b 53 10 03	 imul	 edx, DWORD PTR _width$[ebx], 3
  0012b	8b 45 c4	 mov	 eax, DWORD PTR _ycp$[ebp]
  0012e	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00131	89 4d c0	 mov	 DWORD PTR _ycpw$[ebp], ecx

; 1606 :         Y   = dst_Y + dst_y_pitch * y;

  00134	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  0013a	0f af 55 f4	 imul	 edx, DWORD PTR _y$[ebp]
  0013e	8b 45 d0	 mov	 eax, DWORD PTR _dst_Y$[ebp]
  00141	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00144	89 4d bc	 mov	 DWORD PTR _Y$[ebp], ecx

; 1607 :         C   = dst_C + dst_y_pitch * y / 2;

  00147	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _dst_y_pitch$[ebp]
  0014d	0f af 45 f4	 imul	 eax, DWORD PTR _y$[ebp]
  00151	99		 cdq
  00152	2b c2		 sub	 eax, edx
  00154	d1 f8		 sar	 eax, 1
  00156	8b 55 cc	 mov	 edx, DWORD PTR _dst_C$[ebp]
  00159	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  0015c	89 45 b8	 mov	 DWORD PTR _C$[ebp], eax

; 1608 :         for (x = 0; x < width; x += 8, ycp += 24, ycpw += 24) {

  0015f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
  00166	eb 1b		 jmp	 SHORT $LN7@convert_yc
$LN5@convert_yc:
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0016b	83 c1 08	 add	 ecx, 8
  0016e	89 4d f8	 mov	 DWORD PTR _x$[ebp], ecx
  00171	8b 55 c4	 mov	 edx, DWORD PTR _ycp$[ebp]
  00174	83 c2 30	 add	 edx, 48			; 00000030H
  00177	89 55 c4	 mov	 DWORD PTR _ycp$[ebp], edx
  0017a	8b 45 c0	 mov	 eax, DWORD PTR _ycpw$[ebp]
  0017d	83 c0 30	 add	 eax, 48			; 00000030H
  00180	89 45 c0	 mov	 DWORD PTR _ycpw$[ebp], eax
$LN7@convert_yc:
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00186	3b 4b 10	 cmp	 ecx, DWORD PTR _width$[ebx]
  00189	0f 8d 15 03 00
	00		 jge	 $LN6@convert_yc

; 1609 :             x1 = _mm_loadu_si128((__m128i *)(ycp +  0));

  0018f	8b 55 c4	 mov	 edx, DWORD PTR _ycp$[ebp]
  00192	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00195	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  0019c	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  001a3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1610 :             x2 = _mm_loadu_si128((__m128i *)(ycp +  8));

  001aa	8b 45 c4	 mov	 eax, DWORD PTR _ycp$[ebp]
  001ad	83 c0 10	 add	 eax, 16			; 00000010H
  001b0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001b3	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  001ba	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  001c1	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1611 :             x3 = _mm_loadu_si128((__m128i *)(ycp + 16));

  001c8	8b 4d c4	 mov	 ecx, DWORD PTR _ycp$[ebp]
  001cb	83 c1 20	 add	 ecx, 32			; 00000020H
  001ce	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001d1	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  001d8	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  001df	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1612 :             _mm_prefetch((const char *)ycpw, _MM_HINT_T1);

  001e6	8b 55 c0	 mov	 edx, DWORD PTR _ycpw$[ebp]
  001e9	89 95 9c fd ff
	ff		 mov	 DWORD PTR tv144[ebp], edx
  001ef	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR tv144[ebp]
  001f5	0f 18 10	 prefetcht1 BYTE PTR [eax]

; 1613 :             gather_y_uv_from_yc48(x1, x2, x3);

  001f8	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  001ff	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _x2$[ebp]
  00205	51		 push	 ecx
  00206	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR _x1$[ebp]
  0020c	52		 push	 edx
  0020d	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00212	83 c4 08	 add	 esp, 8

; 1614 :             x0 = x2;

  00215	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0021c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1615 : 
; 1616 :             _mm_store_switch_si128((__m128i *)(Y + x), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00223	33 c0		 xor	 eax, eax
  00225	74 55		 je	 SHORT $LN9@convert_yc
  00227	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0022e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00235	8d 4d a0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00238	51		 push	 ecx
  00239	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0023f	52		 push	 edx
  00240	6a 04		 push	 4
  00242	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00248	50		 push	 eax
  00249	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00250	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00255	83 c4 10	 add	 esp, 16			; 00000010H
  00258	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0025f	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00266	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  00269	8b 55 bc	 mov	 edx, DWORD PTR _Y$[ebp]
  0026c	0f 11 04 4a	 movups	 XMMWORD PTR [edx+ecx*2], xmm0
  00270	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
  0027a	eb 53		 jmp	 SHORT $LN10@convert_yc
$LN9@convert_yc:
  0027c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  00283	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  0028a	8d 45 a0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  0028d	50		 push	 eax
  0028e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  00294	51		 push	 ecx
  00295	6a 04		 push	 4
  00297	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  0029d	52		 push	 edx
  0029e	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  002a5	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  002aa	83 c4 10	 add	 esp, 16			; 00000010H
  002ad	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  002b4	0f 10 85 50 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T12[ebp]
  002bb	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  002be	8b 4d bc	 mov	 ecx, DWORD PTR _Y$[ebp]
  002c1	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  002c5	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv207[ebp], 0
$LN10@convert_yc:

; 1617 : 
; 1618 :             x1 = _mm_loadu_si128((__m128i *)(ycpw +  0));

  002cf	8b 55 c0	 mov	 edx, DWORD PTR _ycpw$[ebp]
  002d2	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  002d5	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  002dc	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  002e3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1619 :             x2 = _mm_loadu_si128((__m128i *)(ycpw +  8));

  002ea	8b 45 c0	 mov	 eax, DWORD PTR _ycpw$[ebp]
  002ed	83 c0 10	 add	 eax, 16			; 00000010H
  002f0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002f3	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  002fa	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00301	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1620 :             x3 = _mm_loadu_si128((__m128i *)(ycpw + 16));

  00308	8b 4d c0	 mov	 ecx, DWORD PTR _ycpw$[ebp]
  0030b	83 c1 20	 add	 ecx, 32			; 00000020H
  0030e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00311	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00318	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0031f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1621 :             gather_y_uv_from_yc48(x1, x2, x3);

  00326	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0032d	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _x2$[ebp]
  00333	52		 push	 edx
  00334	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _x1$[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ; gather_y_uv_from_yc48
  00340	83 c4 08	 add	 esp, 8

; 1622 : 
; 1623 :             _mm_store_switch_si128((__m128i *)(Y + x + dst_y_pitch), convert_y_range_from_yc48(x1, xC_Y_L_MA_16, Y_L_RSH_16, xC_YCC, xC_pw_one));

  00343	33 c9		 xor	 ecx, ecx
  00345	74 5e		 je	 SHORT $LN11@convert_yc
  00347	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  0034e	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00355	8d 55 a0	 lea	 edx, DWORD PTR _xC_pw_one$[ebp]
  00358	52		 push	 edx
  00359	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _xC_YCC$[ebp]
  0035f	50		 push	 eax
  00360	6a 04		 push	 4
  00362	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00368	51		 push	 ecx
  00369	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00370	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  00375	83 c4 10	 add	 esp, 16			; 00000010H
  00378	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0037f	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00386	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  00389	8b 45 bc	 mov	 eax, DWORD PTR _Y$[ebp]
  0038c	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0038f	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _dst_y_pitch$[ebp]
  00395	0f 11 04 51	 movups	 XMMWORD PTR [ecx+edx*2], xmm0
  00399	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
  003a3	eb 5c		 jmp	 SHORT $LN12@convert_yc
$LN11@convert_yc:
  003a5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_Y_L_MA_16@@3QBFB
  003ac	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  003b3	8d 45 a0	 lea	 eax, DWORD PTR _xC_pw_one$[ebp]
  003b6	50		 push	 eax
  003b7	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _xC_YCC$[ebp]
  003bd	51		 push	 ecx
  003be	6a 04		 push	 4
  003c0	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  003c6	52		 push	 edx
  003c7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  003ce	e8 00 00 00 00	 call	 ?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_y_range_from_yc48
  003d3	83 c4 10	 add	 esp, 16			; 00000010H
  003d6	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  003dd	0f 10 85 e0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  003e4	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  003e7	8b 4d bc	 mov	 ecx, DWORD PTR _Y$[ebp]
  003ea	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  003ed	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _dst_y_pitch$[ebp]
  003f3	0f 11 04 42	 movups	 XMMWORD PTR [edx+eax*2], xmm0
  003f7	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv250[ebp], 0
$LN12@convert_yc:

; 1624 : 
; 1625 :             x0 = convert_uv_range_from_yc48_yuv420p(x0, x2, _mm_set1_epi16(UV_OFFSET_x2), xC_UV_L_MA_16_420P, UV_L_RSH_16_420P, xC_YCC, xC_pw_one);

  00401	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_UV_L_MA_16_420P@@3QBFB
  00408	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0040f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@10001000100010001000100010001000
  00416	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0041d	8d 4d a0	 lea	 ecx, DWORD PTR _xC_pw_one$[ebp]
  00420	51		 push	 ecx
  00421	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  00427	52		 push	 edx
  00428	6a 01		 push	 1
  0042a	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00430	50		 push	 eax
  00431	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00437	51		 push	 ecx
  00438	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  0043f	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00446	e8 00 00 00 00	 call	 ?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z ; convert_uv_range_from_yc48_yuv420p
  0044b	83 c4 14	 add	 esp, 20			; 00000014H
  0044e	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00455	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0045c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1626 : 
; 1627 :             _mm_store_switch_si128((__m128i *)(C + x), x0);

  00463	33 d2		 xor	 edx, edx
  00465	74 1d		 je	 SHORT $LN13@convert_yc
  00467	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0046e	8b 45 f8	 mov	 eax, DWORD PTR _x$[ebp]
  00471	8b 4d b8	 mov	 ecx, DWORD PTR _C$[ebp]
  00474	0f 11 04 41	 movups	 XMMWORD PTR [ecx+eax*2], xmm0
  00478	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv273[ebp], 0
  00482	eb 1b		 jmp	 SHORT $LN14@convert_yc
$LN13@convert_yc:
  00484	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  0048b	8b 55 f8	 mov	 edx, DWORD PTR _x$[ebp]
  0048e	8b 45 b8	 mov	 eax, DWORD PTR _C$[ebp]
  00491	0f 11 04 50	 movups	 XMMWORD PTR [eax+edx*2], xmm0
  00495	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv273[ebp], 0
$LN14@convert_yc:

; 1628 :         }

  0049f	e9 c4 fc ff ff	 jmp	 $LN5@convert_yc
$LN6@convert_yc:

; 1629 :     }

  004a4	e9 53 fc ff ff	 jmp	 $LN2@convert_yc
$LN1@convert_yc:

; 1630 : }

  004a9	52		 push	 edx
  004aa	8b cd		 mov	 ecx, ebp
  004ac	50		 push	 eax
  004ad	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@convert_yc
  004b3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004b8	58		 pop	 eax
  004b9	5a		 pop	 edx
  004ba	5f		 pop	 edi
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004be	33 cd		 xor	 ecx, ebp
  004c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	8b e3		 mov	 esp, ebx
  004ca	5b		 pop	 ebx
  004cb	c3		 ret	 0
$LN21@convert_yc:
  004cc	05 00 00 00	 DD	 5
  004d0	00 00 00 00	 DD	 $LN20@convert_yc
$LN20@convert_yc:
  004d4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  004d8	0c 00 00 00	 DD	 12			; 0000000cH
  004dc	00 00 00 00	 DD	 $LN15@convert_yc
  004e0	a0 ff ff ff	 DD	 -96			; ffffffa0H
  004e4	10 00 00 00	 DD	 16			; 00000010H
  004e8	00 00 00 00	 DD	 $LN16@convert_yc
  004ec	60 ff ff ff	 DD	 -160			; ffffff60H
  004f0	10 00 00 00	 DD	 16			; 00000010H
  004f4	00 00 00 00	 DD	 $LN17@convert_yc
  004f8	00 ff ff ff	 DD	 -256			; ffffff00H
  004fc	10 00 00 00	 DD	 16			; 00000010H
  00500	00 00 00 00	 DD	 $LN18@convert_yc
  00504	e0 fe ff ff	 DD	 -288			; fffffee0H
  00508	10 00 00 00	 DD	 16			; 00000010H
  0050c	00 00 00 00	 DD	 $LN19@convert_yc
$LN19@convert_yc:
  00510	78		 DB	 120			; 00000078H
  00511	32		 DB	 50			; 00000032H
  00512	00		 DB	 0
$LN18@convert_yc:
  00513	78		 DB	 120			; 00000078H
  00514	31		 DB	 49			; 00000031H
  00515	00		 DB	 0
$LN17@convert_yc:
  00516	78		 DB	 120			; 00000078H
  00517	43		 DB	 67			; 00000043H
  00518	5f		 DB	 95			; 0000005fH
  00519	59		 DB	 89			; 00000059H
  0051a	43		 DB	 67			; 00000043H
  0051b	43		 DB	 67			; 00000043H
  0051c	00		 DB	 0
$LN16@convert_yc:
  0051d	78		 DB	 120			; 00000078H
  0051e	43		 DB	 67			; 00000043H
  0051f	5f		 DB	 95			; 0000005fH
  00520	70		 DB	 112			; 00000070H
  00521	77		 DB	 119			; 00000077H
  00522	5f		 DB	 95			; 0000005fH
  00523	6f		 DB	 111			; 0000006fH
  00524	6e		 DB	 110			; 0000006eH
  00525	65		 DB	 101			; 00000065H
  00526	00		 DB	 0
$LN15@convert_yc:
  00527	79		 DB	 121			; 00000079H
  00528	5f		 DB	 95			; 0000005fH
  00529	72		 DB	 114			; 00000072H
  0052a	61		 DB	 97			; 00000061H
  0052b	6e		 DB	 110			; 0000006eH
  0052c	67		 DB	 103			; 00000067H
  0052d	65		 DB	 101			; 00000065H
  0052e	00		 DB	 0
??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_simd<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_sse41.cpp
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_width$ = 16						; size = 4
_src_y_pitch_byte$ = 20					; size = 4
_src_uv_pitch_byte$ = 24				; size = 4
_dst_y_pitch_byte$ = 28					; size = 4
_height$ = 32						; size = 4
_dst_height$ = 36					; size = 4
_thread_id$ = 40					; size = 4
_thread_n$ = 44						; size = 4
_crop$ = 48						; size = 4
?convert_yc48_to_p010_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z PROC ; convert_yc48_to_p010_sse41

; 39   : void convert_yc48_to_p010_sse41(void **dst, const void **src, int width, int src_y_pitch_byte, int src_uv_pitch_byte, int dst_y_pitch_byte, int height, int dst_height, int thread_id, int thread_n, int *crop) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   :     convert_yc48_to_p010_simd<false>(dst, src, width, src_y_pitch_byte, src_uv_pitch_byte, dst_y_pitch_byte, height, dst_height, thread_id, thread_n, crop);

  00003	8b 45 30	 mov	 eax, DWORD PTR _crop$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 2c	 mov	 ecx, DWORD PTR _thread_n$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 28	 mov	 edx, DWORD PTR _thread_id$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 24	 mov	 eax, DWORD PTR _dst_height$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 20	 mov	 ecx, DWORD PTR _height$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 1c	 mov	 edx, DWORD PTR _dst_y_pitch_byte$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 18	 mov	 eax, DWORD PTR _src_uv_pitch_byte$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d 14	 mov	 ecx, DWORD PTR _src_y_pitch_byte$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 10	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	8b 45 0c	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _dst$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??$convert_yc48_to_p010_simd@$0A@@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ; convert_yc48_to_p010_simd<0>
  00034	83 c4 2c	 add	 esp, 44			; 0000002cH

; 41   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?convert_yc48_to_p010_sse41@@YAXPAPAXPAPBXHHHHHHHHPAH@Z ENDP ; convert_yc48_to_p010_sse41
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -224						; size = 16
$T2 = -208						; size = 16
$T3 = -192						; size = 16
$T4 = -176						; size = 16
$T5 = -160						; size = 16
$T6 = -144						; size = 16
$T7 = -128						; size = 16
$T8 = -112						; size = 16
$T9 = -96						; size = 16
$T10 = -80						; size = 16
$T11 = -64						; size = 16
$T12 = -48						; size = 16
_x4$ = -32						; size = 16
_x3$ = -16						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
?gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z PROC		; gather_y_u_v_to_yc48

; 1528 : static __forceinline void gather_y_u_v_to_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	57		 push	 edi
  0001d	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00023	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 1529 :     __m128i x3, x4;
; 1530 : #if USE_SSE41
; 1531 :     alignas(16) static const uint8_t shuffle_yc48[16] = {
; 1532 :         0x00, 0x01, 0x06, 0x07, 0x0C, 0x0D, 0x02, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x04, 0x05, 0x0A, 0x0B
; 1533 :     };
; 1534 :     x4 = _mm_load_si128((__m128i *)shuffle_yc48);

  0002f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?shuffle_yc48@?1??gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z@4QBEB
  00036	0f 29 45 d0	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0003a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0003e	0f 29 45 e0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 1535 :     x0 = _mm_shuffle_epi8(x0, x4);                          //5,2,7,4,1,6,3,0

  00042	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00045	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00048	66 0f 38 00 45
	e0		 pshufb	 xmm0, XMMWORD PTR _x4$[ebp]
  0004e	0f 29 45 c0	 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00052	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  00055	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T11[ebp]
  00059	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1536 :     x1 = _mm_shuffle_epi8(x1, _mm_alignr_epi8(x4, x4, 14)); //2,7,4,1,6,3,0,5

  0005c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00060	66 0f 3a 0f 45
	e0 0e		 palignr xmm0, XMMWORD PTR _x4$[ebp], 14 ; 0000000eH
  00067	0f 29 45 b0	 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0006b	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  0006e	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00071	66 0f 38 00 45
	b0		 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  00077	0f 29 45 a0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0007b	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  0007e	0f 10 45 a0	 movups	 xmm0, XMMWORD PTR $T9[ebp]
  00082	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1537 :     x2 = _mm_shuffle_epi8(x2, _mm_alignr_epi8(x4, x4, 12)); //7,4,1,6,3,0,5,2

  00085	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00089	66 0f 3a 0f 45
	e0 0c		 palignr xmm0, XMMWORD PTR _x4$[ebp], 12 ; 0000000cH
  00090	0f 29 45 90	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00094	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  00097	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0009a	66 0f 38 00 45
	90		 pshufb	 xmm0, XMMWORD PTR $T8[ebp]
  000a0	0f 29 45 80	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000a4	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  000a7	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T7[ebp]
  000ab	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1538 : 
; 1539 :     x3 = _mm_blend_epi16(x0, x1, 0x80 + 0x10 + 0x02);

  000ae	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  000b1	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  000b4	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b7	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [eax], 146 ; 00000092H
  000bd	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000c4	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000cb	0f 29 45 f0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1540 :     x3 = _mm_blend_epi16(x3, x2, 0x20 + 0x04);

  000cf	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  000d2	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  000d6	66 0f 3a 0e 02
	24		 pblendw xmm0, XMMWORD PTR [edx], 36 ; 00000024H
  000dc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000e3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000ea	0f 29 45 f0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1541 : 
; 1542 :     x4 = _mm_blend_epi16(x2, x1, 0x20 + 0x04);

  000ee	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  000f1	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  000f4	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000f7	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [eax], 36 ; 00000024H
  000fd	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00104	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0010b	0f 29 45 e0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 1543 :     x4 = _mm_blend_epi16(x4, x0, 0x80 + 0x10 + 0x02);

  0010f	8b 53 08	 mov	 edx, DWORD PTR _x0$[ebx]
  00112	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00116	66 0f 3a 0e 02
	92		 pblendw xmm0, XMMWORD PTR [edx], 146 ; 00000092H
  0011c	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00123	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0012a	0f 29 45 e0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 1544 : 
; 1545 :     x2 = _mm_blend_epi16(x2, x0, 0x20 + 0x04);

  0012e	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00131	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  00134	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00137	66 0f 3a 0e 00
	24		 pblendw xmm0, XMMWORD PTR [eax], 36 ; 00000024H
  0013d	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00144	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  00147	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  0014e	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1546 :     x2 = _mm_blend_epi16(x2, x1, 0x40 + 0x08 + 0x01);

  00151	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  00154	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  00157	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0015a	66 0f 3a 0e 00
	49		 pblendw xmm0, XMMWORD PTR [eax], 73 ; 00000049H
  00160	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00167	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  0016a	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00171	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1547 : 
; 1548 :     x0 = x3;

  00174	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00177	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _x3$[ebp]
  0017b	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1549 :     x1 = x4;

  0017e	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00181	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _x4$[ebp]
  00185	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1550 : #else
; 1551 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,6,5,4,3,1,2,0
; 1552 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,6,4,3,1,2,0
; 1553 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,4,2,0
; 1554 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,5,3,1,6,2,4,0
; 1555 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,1,2,0)); // 7,3,5,1,6,2,4,0
; 1556 : 
; 1557 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1558 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1559 :     x1 = _mm_shuffle_epi32(  x1, _MM_SHUFFLE(3,1,2,0));
; 1560 :     x1 = _mm_shufflelo_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1561 :     x1 = _mm_shufflehi_epi16(x1, _MM_SHUFFLE(3,1,2,0));
; 1562 : 
; 1563 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1564 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1565 :     x2 = _mm_shuffle_epi32(  x2, _MM_SHUFFLE(3,1,2,0));
; 1566 :     x2 = _mm_shufflelo_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1567 :     x2 = _mm_shufflehi_epi16(x2, _MM_SHUFFLE(3,1,2,0));
; 1568 : 
; 1569 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1570 :     x0 = _mm_unpacklo_epi16(x0, x1);
; 1571 :     x1 = _mm_unpackhi_epi16(x1, x2);
; 1572 :     x2 = _mm_unpacklo_epi16(x2, x3);
; 1573 : 
; 1574 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1575 :     x0 = _mm_unpacklo_epi32(x0, x2);
; 1576 :     x2 = _mm_unpackhi_epi32(x2, x1);
; 1577 :     x1 = _mm_unpacklo_epi32(x1, x3);
; 1578 : 
; 1579 :     x3 = _mm_shuffle_epi32(x0, _MM_SHUFFLE(3,2,3,2));
; 1580 :     x0 = _mm_unpacklo_epi64(x0, x1);
; 1581 :     x1 = _mm_unpackhi_epi64(x1, x2);
; 1582 :     x2 = _mm_unpacklo_epi64(x2, x3);
; 1583 : 
; 1584 :     x4 = x2;
; 1585 :     x2 = x1;
; 1586 :     x1 = x4;
; 1587 : #endif
; 1588 : }

  00188	5f		 pop	 edi
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	8b e3		 mov	 esp, ebx
  0018e	5b		 pop	 ebx
  0018f	c3		 ret	 0
?gather_y_u_v_to_yc48@@YAXAAT__m128i@@00@Z ENDP		; gather_y_u_v_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -320						; size = 16
$T2 = -304						; size = 16
$T3 = -288						; size = 16
$T4 = -272						; size = 16
$T5 = -256						; size = 16
$T6 = -240						; size = 16
$T7 = -224						; size = 16
$T8 = -208						; size = 16
$T9 = -192						; size = 16
$T10 = -176						; size = 16
$T11 = -160						; size = 16
$T12 = -144						; size = 16
$T13 = -128						; size = 16
$T14 = -112						; size = 16
$T15 = -96						; size = 16
$T16 = -80						; size = 16
_MASK_INT$ = -52					; size = 4
_x5$ = -48						; size = 16
_x4$ = -32						; size = 16
_x3$ = -16						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z PROC	; gather_y_u_v_from_yc48

; 1464 : static __forceinline void gather_y_u_v_from_yc48(__m128i& x0, __m128i& x1, __m128i& x2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  0001c	57		 push	 edi
  0001d	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-320]
  00023	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 1465 : #if USE_SSE41
; 1466 :     __m128i x3, x4, x5;
; 1467 :     const int MASK_INT = 0x40 + 0x08 + 0x01;

  0002f	c7 45 cc 49 00
	00 00		 mov	 DWORD PTR _MASK_INT$[ebp], 73 ; 00000049H

; 1468 :     x3 = _mm_blend_epi16(x2, x0, MASK_INT);

  00036	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00039	8b 4b 10	 mov	 ecx, DWORD PTR _x2$[ebx]
  0003c	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0003f	66 0f 3a 0e 00
	49		 pblendw xmm0, XMMWORD PTR [eax], 73 ; 00000049H
  00045	0f 29 45 b0	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00049	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0004d	0f 29 45 f0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1469 :     x4 = _mm_blend_epi16(x1, x2, MASK_INT);

  00051	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  00054	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	66 0f 3a 0e 02
	49		 pblendw xmm0, XMMWORD PTR [edx], 73 ; 00000049H
  00060	0f 29 45 a0	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00064	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00068	0f 29 45 e0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 1470 :     x5 = _mm_blend_epi16(x0, x1, MASK_INT);

  0006c	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  0006f	8b 53 08	 mov	 edx, DWORD PTR _x0$[ebx]
  00072	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00075	66 0f 3a 0e 01
	49		 pblendw xmm0, XMMWORD PTR [ecx], 73 ; 00000049H
  0007b	0f 29 45 90	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0007f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00083	0f 29 45 d0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1471 : 
; 1472 :     x3 = _mm_blend_epi16(x3, x1, MASK_INT<<1);

  00087	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  0008a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0008e	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [eax], 146 ; 00000092H
  00094	0f 29 45 80	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00098	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0009c	0f 29 45 f0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1473 :     x4 = _mm_blend_epi16(x4, x0, MASK_INT<<1);

  000a0	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  000a3	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  000a7	66 0f 3a 0e 01
	92		 pblendw xmm0, XMMWORD PTR [ecx], 146 ; 00000092H
  000ad	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000b4	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000bb	0f 29 45 e0	 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 1474 :     x5 = _mm_blend_epi16(x5, x2, MASK_INT<<1);

  000bf	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  000c2	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  000c6	66 0f 3a 0e 02
	92		 pblendw xmm0, XMMWORD PTR [edx], 146 ; 00000092H
  000cc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000d3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  000da	0f 29 45 d0	 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 1475 : 
; 1476 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  000de	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  000e5	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  000ec	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  000f0	66 0f 38 00 85
	50 ff ff ff	 pshufb	 xmm0, XMMWORD PTR $T10[ebp]
  000f9	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00100	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00103	0f 10 85 40 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T9[ebp]
  0010a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1477 :     x1 = _mm_shuffle_epi8(x4, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 6));

  0010d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00114	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0011b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00122	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00129	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00130	66 0f 3a 0f 85
	20 ff ff ff 06	 palignr xmm0, XMMWORD PTR $T7[ebp], 6
  0013a	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00141	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00145	66 0f 38 00 85
	10 ff ff ff	 pshufb	 xmm0, XMMWORD PTR $T6[ebp]
  0014e	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00155	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00158	0f 10 85 00 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  0015f	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1478 :     x2 = _mm_shuffle_epi8(x5, _mm_alignr_epi8_simd(xC_SUFFLE_YCP_Y, xC_SUFFLE_YCP_Y, 12));

  00162	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00169	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00170	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  00177	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0017e	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00185	66 0f 3a 0f 85
	e0 fe ff ff 0c	 palignr xmm0, XMMWORD PTR $T3[ebp], 12 ; 0000000cH
  0018f	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00196	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x5$[ebp]
  0019a	66 0f 38 00 85
	d0 fe ff ff	 pshufb	 xmm0, XMMWORD PTR $T2[ebp]
  001a3	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001aa	8b 53 10	 mov	 edx, DWORD PTR _x2$[ebx]
  001ad	0f 10 85 c0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  001b4	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1479 : #else
; 1480 :     //code from afs v7.5a+10
; 1481 :     __m128i x5, x6, x7, xMask;
; 1482 :     //select y
; 1483 :     alignas(16) static const uint16_t maskY_select[8] = { 0xffff, 0x0000, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0x0000 };
; 1484 :     xMask = _mm_load_si128((__m128i*)maskY_select);
; 1485 : 
; 1486 :     x5 = select_by_mask(x2, x0, xMask);
; 1487 :     xMask = _mm_slli_si128(xMask, 2);
; 1488 :     x5 = select_by_mask(x5, x1, xMask); //52741630
; 1489 : 
; 1490 :     x6 = _mm_unpacklo_epi16(x5, x5);    //11663300
; 1491 :     x7 = _mm_unpackhi_epi16(x5, x5);    //55227744
; 1492 : 
; 1493 :     alignas(16) static const uint16_t maskY_shuffle[8] = { 0xffff, 0x0000, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0x0000 };
; 1494 :     xMask = _mm_load_si128((__m128i*)maskY_shuffle);
; 1495 :     x5 = select_by_mask(x7, x6, xMask);                 //51627340
; 1496 :     x5 = _mm_shuffle_epi32(x5, _MM_SHUFFLE(1, 2, 3, 0));   //73625140
; 1497 : 
; 1498 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //75316420
; 1499 :     x5 = _mm_unpacklo_epi16(x5, _mm_srli_si128(x5, 8)); //76543210
; 1500 : 
; 1501 :                                                         //select uv
; 1502 :     xMask = _mm_srli_si128(_mm_cmpeq_epi8(xMask, xMask), 8); //0x00000000, 0x00000000, 0xffffffff, 0xffffffff
; 1503 :     x6 = select_by_mask(_mm_srli_si128(x1, 2), _mm_srli_si128(x2, 2), xMask); //x  x v4 u4 v6 u6 x  x
; 1504 :     x7 = select_by_mask(x0, x1, xMask);               //x  x  v1 u1 v3 u3 x  x
; 1505 :     xMask = _mm_slli_si128(xMask, 4);                 //0x00000000, 0xffffffff, 0xffffffff, 0x00000000
; 1506 :     x0 = _mm_alignr_epi8_simd(x1, x0, 2);             //v2 u2  x  x  x  x v0 u0
; 1507 :     x6 = select_by_mask(x0, x6, xMask);               //v2 u2 v4 u4 v6 u6 v0 u0
; 1508 :     x7 = select_by_mask(x2, x7, xMask);               //v7 u7 v1 u1 v3 u3 v5 u5
; 1509 :     x0 = _mm_shuffle_epi32(x6, _MM_SHUFFLE(1, 2, 3, 0)); //v6 u6 v4 u4 v2 u2 v0 u0
; 1510 :     x1 = _mm_shuffle_epi32(x7, _MM_SHUFFLE(3, 0, 1, 2)); //v7 u7 v5 u5 v3 u3 v1 u1
; 1511 : 
; 1512 :     x6 = _mm_unpacklo_epi16(x0, x1); //v3 v2 u3 u2 v1 v0 u1 u0
; 1513 :     x7 = _mm_unpackhi_epi16(x0, x1); //v7 v6 u7 u6 v5 v4 u5 u4
; 1514 : 
; 1515 :     x0 = _mm_unpacklo_epi32(x6, x7); //v5 v4 v1 v0 u5 u4 u1 u0
; 1516 :     x1 = _mm_unpackhi_epi32(x6, x7); //v7 v6 v3 v2 u7 u6 u3 u2
; 1517 : 
; 1518 :     x6 = _mm_unpacklo_epi32(x0, x1); //u7 u6 u5 u4 u3 u2 u1 u0
; 1519 :     x7 = _mm_unpackhi_epi32(x0, x1); //v7 v6 v5 v4 v3 v2 v1 v0
; 1520 : 
; 1521 :     x0 = x5;
; 1522 :     x1 = x6;
; 1523 :     x2 = x7;
; 1524 : #endif //USE_SSE41
; 1525 : }

  001b7	5f		 pop	 edi
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	8b e3		 mov	 esp, ebx
  001bd	5b		 pop	 ebx
  001be	c3		 ret	 0
?gather_y_u_v_from_yc48@@YAXAAT__m128i@@00@Z ENDP	; gather_y_u_v_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -272						; size = 16
$T2 = -256						; size = 16
$T3 = -240						; size = 16
$T4 = -224						; size = 16
$T5 = -208						; size = 16
$T6 = -192						; size = 16
$T7 = -176						; size = 16
$T8 = -160						; size = 16
_x1$ = -144						; size = 16
$T9 = -128						; size = 16
$T10 = -112						; size = 16
_xC_0x8000$ = -96					; size = 16
$T11 = -80						; size = 16
$T12 = -64						; size = 16
$T13 = -48						; size = 16
_xC_coeff$ = -32					; size = 16
_x0$ = -16						; size = 16
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_uv_range_to_yc48
; _x0$ = xmm0

; 1447 : static __forceinline __m128i convert_uv_range_to_yc48(__m128i x0) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0001c	57		 push	 edi
  0001d	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00023	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1448 :     //coeff = 4682
; 1449 :     //UV = (( uv - 32768 ) * coef + (1<<15) ) >> 16
; 1450 :     const __m128i xC_coeff = _mm_unpacklo_epi16(_mm_set1_epi16(4682), _mm_set1_epi16(-1));

  00033	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0003a	0f 29 45 c0	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0003e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@124a124a124a124a124a124a124a124a
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0004d	66 0f 61 45 c0	 punpcklwd xmm0, XMMWORD PTR $T12[ebp]
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  0005a	0f 29 45 e0	 movaps	 XMMWORD PTR _xC_coeff$[ebp], xmm0

; 1451 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  0005e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00062	66 0f 76 45 f0	 pcmpeqd xmm0, XMMWORD PTR _x0$[ebp]
  00067	0f 29 45 90	 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0006b	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0006f	66 0f 71 f0 0f	 psllw	 xmm0, 15		; 0000000fH
  00074	0f 29 45 80	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00078	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0007c	0f 29 45 a0	 movaps	 XMMWORD PTR _xC_0x8000$[ebp], xmm0

; 1452 :     __m128i x1;
; 1453 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  00080	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00084	66 0f fd 45 a0	 paddw	 xmm0, XMMWORD PTR _xC_0x8000$[ebp]
  00089	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00090	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00097	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1454 :     x1 = _mm_unpackhi_epi16(x0, xC_0x8000);

  0009b	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0009f	66 0f 69 45 a0	 punpckhwd xmm0, XMMWORD PTR _xC_0x8000$[ebp]
  000a4	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000ab	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  000b2	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1455 :     x0 = _mm_unpacklo_epi16(x0, xC_0x8000);

  000b9	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000bd	66 0f 61 45 a0	 punpcklwd xmm0, XMMWORD PTR _xC_0x8000$[ebp]
  000c2	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000c9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000d0	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1456 :     x0 = _mm_madd_epi16(x0, xC_coeff);

  000d4	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000d8	66 0f f5 45 e0	 pmaddwd xmm0, XMMWORD PTR _xC_coeff$[ebp]
  000dd	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000e4	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000eb	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1457 :     x1 = _mm_madd_epi16(x1, xC_coeff);

  000ef	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000f6	66 0f f5 45 e0	 pmaddwd xmm0, XMMWORD PTR _xC_coeff$[ebp]
  000fb	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00102	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00109	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1458 :     x0 = _mm_srai_epi32(x0, 16);

  00110	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00114	66 0f 72 e0 10	 psrad	 xmm0, 16		; 00000010H
  00119	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00120	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00127	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1459 :     x1 = _mm_srai_epi32(x1, 16);

  0012b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00132	66 0f 72 e0 10	 psrad	 xmm0, 16		; 00000010H
  00137	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0013e	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00145	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1460 :     x0 = _mm_packs_epi32(x0, x1);

  0014c	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00150	66 0f 6b 85 70
	ff ff ff	 packssdw xmm0, XMMWORD PTR _x1$[ebp]
  00158	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0015f	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00166	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1461 :     return x0;

  0016a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1462 : }

  0016e	5f		 pop	 edi
  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	8b e3		 mov	 esp, ebx
  00174	5b		 pop	 ebx
  00175	c3		 ret	 0
?convert_uv_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_uv_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -144						; size = 16
$T2 = -128						; size = 16
$T3 = -112						; size = 16
$T4 = -96						; size = 16
$T5 = -80						; size = 16
$T6 = -64						; size = 16
$T7 = -48						; size = 16
_xC_0x8000$ = -32					; size = 16
_x0$ = -16						; size = 16
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z PROC	; convert_y_range_to_yc48
; _x0$ = xmm0

; 1437 : static __forceinline __m128i convert_y_range_to_yc48(__m128i x0) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0001c	57		 push	 edi
  0001d	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00023	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1438 :     //coef = 4788
; 1439 :     //((( y - 32768 ) * coef) >> 16 ) + (coef/2 - 299)
; 1440 :     const __m128i xC_0x8000 = _mm_slli_epi16(_mm_cmpeq_epi32(x0, x0), 15);

  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00037	66 0f 76 45 f0	 pcmpeqd xmm0, XMMWORD PTR _x0$[ebp]
  0003c	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00040	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00044	66 0f 71 f0 0f	 psllw	 xmm0, 15		; 0000000fH
  00049	0f 29 45 c0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0004d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00051	0f 29 45 e0	 movaps	 XMMWORD PTR _xC_0x8000$[ebp], xmm0

; 1441 :     x0 = _mm_add_epi16(x0, xC_0x8000); // -32768

  00055	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00059	66 0f fd 45 e0	 paddw	 xmm0, XMMWORD PTR _xC_0x8000$[ebp]
  0005e	0f 29 45 b0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00062	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00066	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1442 :     x0 = _mm_mulhi_epi16(x0, _mm_set1_epi16(4788));

  0006a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@12b412b412b412b412b412b412b412b4
  00071	0f 29 45 a0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00075	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00079	66 0f e5 45 a0	 pmulhw	 xmm0, XMMWORD PTR $T4[ebp]
  0007e	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00082	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00086	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1443 :     x0 = _mm_adds_epi16(x0, _mm_set1_epi16(4788/2 - 299));

  0008a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@082f082f082f082f082f082f082f082f
  00091	0f 29 45 80	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00095	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00099	66 0f ed 45 80	 paddsw	 xmm0, XMMWORD PTR $T2[ebp]
  0009e	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000a5	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000ac	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1444 :     return x0;

  000b0	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1445 : }

  000b4	5f		 pop	 edi
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	8b e3		 mov	 esp, ebx
  000ba	5b		 pop	 ebx
  000bb	c3		 ret	 0
?convert_y_range_to_yc48@@YA?AT__m128i@@T1@@Z ENDP	; convert_y_range_to_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -368						; size = 16
$T2 = -352						; size = 16
$T3 = -336						; size = 16
$T4 = -320						; size = 16
$T5 = -304						; size = 16
$T6 = -288						; size = 16
$T7 = -272						; size = 16
$T8 = -256						; size = 16
$T9 = -240						; size = 16
$T10 = -224						; size = 16
$T11 = -208						; size = 16
$T12 = -192						; size = 16
$T13 = -176						; size = 16
$T14 = -160						; size = 16
$T15 = -144						; size = 16
$T16 = -128						; size = 16
$T17 = -112						; size = 16
_x7$ = -96						; size = 16
_x6$ = -80						; size = 16
_x3$ = -64						; size = 16
_x2$ = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x1$ = 8					; size = 4
_xC_UV_MA_16_0$ = 12					; size = 4
_xC_UV_MA_16_1$ = 16					; size = 4
_UV_RSH_16$ = 20					; size = 4
_xC_YCC$ = 24						; size = 4
_xC_pw_one$ = 28					; size = 4
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z PROC ; convert_uv_range_from_yc48_420i
; _x0$ = xmm0
; _x1$ = xmm1

; 1411 : static __forceinline __m128i convert_uv_range_from_yc48_420i(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16_0, const __m128i& xC_UV_MA_16_1, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 70 01 00
	00		 sub	 esp, 368		; 00000170H
  0001c	57		 push	 edi
  0001d	8d bd 90 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-368]
  00023	b9 5c 00 00 00	 mov	 ecx, 92			; 0000005cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1412 :     __m128i x2, x3, x6, x7;
; 1413 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00037	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003e	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  00042	0f 29 45 90	 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00046	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0004a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1414 :     x1 = _mm_add_epi16(x1, xC_UV_OFFSET_x1);

  0004e	8b 4b 08	 mov	 ecx, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  00051	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00055	66 0f fd 01	 paddw	 xmm0, XMMWORD PTR [ecx]
  00059	0f 29 45 80	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0005d	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00061	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1415 : 
; 1416 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00065	8b 53 1c	 mov	 edx, DWORD PTR _xC_pw_one$[ebx]
  00068	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0006c	66 0f 69 02	 punpckhwd xmm0, XMMWORD PTR [edx]
  00070	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00077	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  0007e	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1417 :     x6 = _mm_unpacklo_epi16(x0, xC_pw_one);

  00082	8b 43 1c	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00085	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00089	66 0f 61 00	 punpcklwd xmm0, XMMWORD PTR [eax]
  0008d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00094	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0009b	0f 29 45 b0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1418 :     x3 = _mm_unpackhi_epi16(x1, xC_pw_one);

  0009f	8b 4b 1c	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  000a2	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000a6	66 0f 69 01	 punpckhwd xmm0, XMMWORD PTR [ecx]
  000aa	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  000b1	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  000b8	0f 29 45 c0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1419 :     x2 = _mm_unpacklo_epi16(x1, xC_pw_one);

  000bc	8b 53 1c	 mov	 edx, DWORD PTR _xC_pw_one$[ebx]
  000bf	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000c3	66 0f 61 02	 punpcklwd xmm0, XMMWORD PTR [edx]
  000c7	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000ce	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000d5	0f 29 45 d0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1420 : 
; 1421 :     x6 = _mm_madd_epi16(x6, xC_UV_MA_16_0);

  000d9	8b 43 0c	 mov	 eax, DWORD PTR _xC_UV_MA_16_0$[ebx]
  000dc	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  000e0	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  000e4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000eb	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  000f2	0f 29 45 b0	 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 1422 :     x7 = _mm_madd_epi16(x7, xC_UV_MA_16_0);

  000f6	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16_0$[ebx]
  000f9	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000fd	66 0f f5 01	 pmaddwd xmm0, XMMWORD PTR [ecx]
  00101	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00108	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0010f	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1423 :     x2 = _mm_madd_epi16(x2, xC_UV_MA_16_1);

  00113	8b 53 10	 mov	 edx, DWORD PTR _xC_UV_MA_16_1$[ebx]
  00116	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0011a	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0011e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00125	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0012c	0f 29 45 d0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1424 :     x3 = _mm_madd_epi16(x3, xC_UV_MA_16_1);

  00130	8b 43 10	 mov	 eax, DWORD PTR _xC_UV_MA_16_1$[ebx]
  00133	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00137	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  0013b	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00142	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00149	0f 29 45 c0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1425 :     x0 = _mm_add_epi32(x6, x2);

  0014d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _x6$[ebp]
  00151	66 0f fe 45 d0	 paddd	 xmm0, XMMWORD PTR _x2$[ebp]
  00156	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0015d	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00164	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1426 :     x7 = _mm_add_epi32(x7, x3);

  00168	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  0016c	66 0f fe 45 c0	 paddd	 xmm0, XMMWORD PTR _x3$[ebp]
  00171	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00178	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0017f	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1427 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  00183	8b 4b 14	 mov	 ecx, DWORD PTR _UV_RSH_16$[ebx]
  00186	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0018a	66 0f 6e c9	 movd	 xmm1, ecx
  0018e	66 0f e2 c1	 psrad	 xmm0, xmm1
  00192	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00199	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  001a0	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1428 :     x7 = _mm_srai_epi32(x7, UV_RSH_16);

  001a4	8b 53 14	 mov	 edx, DWORD PTR _UV_RSH_16$[ebx]
  001a7	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001ab	66 0f 6e ca	 movd	 xmm1, edx
  001af	66 0f e2 c1	 psrad	 xmm0, xmm1
  001b3	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  001ba	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  001c1	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1429 :     x0 = _mm_add_epi32(x0, xC_YCC);

  001c5	8b 43 18	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  001c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  001cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  001d0	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001d7	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1430 :     x7 = _mm_add_epi32(x7, xC_YCC);

  001e2	8b 4b 18	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  001e5	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  001ed	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001f4	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001fb	0f 29 45 a0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1431 : 
; 1432 :     x0 = _mm_packus_epi32_simd(x0, x7);

  001ff	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x7$[ebp]
  00203	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00207	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0020c	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00213	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0021a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1433 : 
; 1434 :     return x0;

  0021e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1435 : }

  00222	5f		 pop	 edi
  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	8b e3		 mov	 esp, ebx
  00228	5b		 pop	 ebx
  00229	c3		 ret	 0
?convert_uv_range_from_yc48_420i@@YA?AT__m128i@@T1@0ABT1@11H11@Z ENDP ; convert_uv_range_from_yc48_420i
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
$T3 = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x2$ = 8					; size = 4
_xC_UV_MA_16$ = 12					; size = 4
_UV_RSH_16$ = 16					; size = 4
_xC_YCC$ = 20						; size = 4
_xC_pw_one$ = 24					; size = 4
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z PROC ; convert_uv_range_from_yc48_yuv420p
; _x0$ = xmm0
; _x1$ = xmm1

; 1405 : static __forceinline __m128i convert_uv_range_from_yc48_yuv420p(__m128i x0, __m128i x1, const __m128i& xC_UV_OFFSET_x2, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001d	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1406 :     x0 = _mm_add_epi16(x0, x1);

  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00035	66 0f fd 45 e0	 paddw	 xmm0, XMMWORD PTR _x1$[ebp]
  0003a	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0003e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00042	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1407 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x2);

  00046	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x2$[ebx]
  00049	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0004d	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  00051	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00055	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00059	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1408 : 
; 1409 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  0005d	8b 4b 18	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  00060	51		 push	 ecx
  00061	8b 53 14	 mov	 edx, DWORD PTR _xC_YCC$[ebx]
  00064	52		 push	 edx
  00065	8b 43 10	 mov	 eax, DWORD PTR _UV_RSH_16$[ebx]
  00068	50		 push	 eax
  00069	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16$[ebx]
  0006c	51		 push	 ecx
  0006d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00071	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_uv_range_after_adding_offset
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 1410 : }

  00081	5f		 pop	 edi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	8b e3		 mov	 esp, ebx
  00087	5b		 pop	 ebx
  00088	c3		 ret	 0
?convert_uv_range_from_yc48_yuv420p@@YA?AT__m128i@@T1@0ABT1@1H11@Z ENDP ; convert_uv_range_from_yc48_yuv420p
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_xC_YCC$ = -48						; size = 16
_x0$ = -16						; size = 16
_xC_UV_OFFSET_x1$ = 8					; size = 4
_xC_UV_MA_16$ = 12					; size = 4
_UV_RSH_16$ = 16					; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z PROC ; convert_uv_range_from_yc48
; _x0$ = xmm0
; _xC_YCC$ = xmm1

; 1400 : static __forceinline __m128i convert_uv_range_from_yc48(__m128i x0, const __m128i& xC_UV_OFFSET_x1, const __m128i& xC_UV_MA_16, int UV_RSH_16, __m128i xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d d0	 movaps	 XMMWORD PTR _xC_YCC$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1401 :     x0 = _mm_add_epi16(x0, xC_UV_OFFSET_x1);

  00031	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_OFFSET_x1$[ebx]
  00034	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00038	66 0f fd 00	 paddw	 xmm0, XMMWORD PTR [eax]
  0003c	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00040	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00044	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1402 : 
; 1403 :     return convert_uv_range_after_adding_offset(x0, xC_UV_MA_16, UV_RSH_16, xC_YCC, xC_pw_one);

  00048	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004b	51		 push	 ecx
  0004c	8d 55 d0	 lea	 edx, DWORD PTR _xC_YCC$[ebp]
  0004f	52		 push	 edx
  00050	8b 43 10	 mov	 eax, DWORD PTR _UV_RSH_16$[ebx]
  00053	50		 push	 eax
  00054	8b 4b 0c	 mov	 ecx, DWORD PTR _xC_UV_MA_16$[ebx]
  00057	51		 push	 ecx
  00058	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0005c	e8 00 00 00 00	 call	 ?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ; convert_uv_range_after_adding_offset
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00068	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 1404 : }

  0006c	52		 push	 edx
  0006d	8b cd		 mov	 ecx, ebp
  0006f	50		 push	 eax
  00070	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@convert_uv
  00076	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007b	58		 pop	 eax
  0007c	5a		 pop	 edx
  0007d	5f		 pop	 edi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	8b e3		 mov	 esp, ebx
  00083	5b		 pop	 ebx
  00084	c3		 ret	 0
  00085	0f 1f 00	 npad	 3
$LN5@convert_uv:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@convert_uv
$LN4@convert_uv:
  00090	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00094	10 00 00 00	 DD	 16			; 00000010H
  00098	00 00 00 00	 DD	 $LN3@convert_uv
$LN3@convert_uv:
  0009c	78		 DB	 120			; 00000078H
  0009d	43		 DB	 67			; 00000043H
  0009e	5f		 DB	 95			; 0000005fH
  0009f	59		 DB	 89			; 00000059H
  000a0	43		 DB	 67			; 00000043H
  000a1	43		 DB	 67			; 00000043H
  000a2	00		 DB	 0
?convert_uv_range_from_yc48@@YA?AT__m128i@@T1@ABT1@1H01@Z ENDP ; convert_uv_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
$T8 = -64						; size = 16
$T9 = -48						; size = 16
_x1$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_UV_MA_16$ = 8					; size = 4
_UV_RSH_16$ = 12					; size = 4
_xC_YCC$ = 16						; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z PROC ; convert_uv_range_after_adding_offset
; _x0$ = xmm0

; 1383 : static __forceinline __m128i convert_uv_range_after_adding_offset(__m128i x0, const __m128i& xC_UV_MA_16, int UV_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1384 :     __m128i x1;
; 1385 :     x1 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	8b 43 14	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00036	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003a	66 0f 69 00	 punpckhwd xmm0, XMMWORD PTR [eax]
  0003e	0f 29 45 d0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1386 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0004a	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00051	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [ecx]
  00055	0f 29 45 c0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00059	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0005d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1387 : 
; 1388 :     x0 = _mm_madd_epi16(x0, xC_UV_MA_16);

  00061	8b 53 08	 mov	 edx, DWORD PTR _xC_UV_MA_16$[ebx]
  00064	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00068	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0006c	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00070	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00074	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1389 :     x1 = _mm_madd_epi16(x1, xC_UV_MA_16);

  00078	8b 43 08	 mov	 eax, DWORD PTR _xC_UV_MA_16$[ebx]
  0007b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0007f	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  00083	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00087	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0008b	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1390 :     x0 = _mm_srai_epi32(x0, UV_RSH_16);

  0008f	8b 4b 0c	 mov	 ecx, DWORD PTR _UV_RSH_16$[ebx]
  00092	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00096	66 0f 6e c9	 movd	 xmm1, ecx
  0009a	66 0f e2 c1	 psrad	 xmm0, xmm1
  0009e	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a2	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000a6	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1391 :     x1 = _mm_srai_epi32(x1, UV_RSH_16);

  000aa	8b 53 0c	 mov	 edx, DWORD PTR _UV_RSH_16$[ebx]
  000ad	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000b1	66 0f 6e ca	 movd	 xmm1, edx
  000b5	66 0f e2 c1	 psrad	 xmm0, xmm1
  000b9	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bd	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000c1	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1392 :     x0 = _mm_add_epi32(x0, xC_YCC);

  000c5	8b 43 10	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  000c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  000d0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1393 :     x1 = _mm_add_epi32(x1, xC_YCC);

  000e2	8b 4b 10	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  000e5	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  000ed	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000fb	0f 29 45 e0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 1394 : 
; 1395 :     x0 = _mm_packus_epi32_simd(x0, x1);

  000ff	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  00103	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00107	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0010c	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00113	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0011a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1396 : 
; 1397 :     return x0;

  0011e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1398 : }

  00122	5f		 pop	 edi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	8b e3		 mov	 esp, ebx
  00128	5b		 pop	 ebx
  00129	c3		 ret	 0
?convert_uv_range_after_adding_offset@@YA?AT__m128i@@T1@ABT1@H11@Z ENDP ; convert_uv_range_after_adding_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
$T8 = -64						; size = 16
$T9 = -48						; size = 16
_x7$ = -32						; size = 16
_x0$ = -16						; size = 16
_xC_Y_MA_16$ = 8					; size = 4
_Y_RSH_16$ = 12						; size = 4
_xC_YCC$ = 16						; size = 4
_xC_pw_one$ = 20					; size = 4
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z PROC ; convert_y_range_from_yc48
; _x0$ = xmm0

; 1366 : static __forceinline __m128i convert_y_range_from_yc48(__m128i x0, const __m128i& xC_Y_MA_16, int Y_RSH_16, const __m128i& xC_YCC, const __m128i& xC_pw_one) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1367 :     __m128i x7;
; 1368 :     x7 = _mm_unpackhi_epi16(x0, xC_pw_one);

  00033	8b 43 14	 mov	 eax, DWORD PTR _xC_pw_one$[ebx]
  00036	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0003a	66 0f 69 00	 punpckhwd xmm0, XMMWORD PTR [eax]
  0003e	0f 29 45 d0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1369 :     x0 = _mm_unpacklo_epi16(x0, xC_pw_one);

  0004a	8b 4b 14	 mov	 ecx, DWORD PTR _xC_pw_one$[ebx]
  0004d	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00051	66 0f 61 01	 punpcklwd xmm0, XMMWORD PTR [ecx]
  00055	0f 29 45 c0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00059	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0005d	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1370 : 
; 1371 :     x0 = _mm_madd_epi16(x0, xC_Y_MA_16);

  00061	8b 53 08	 mov	 edx, DWORD PTR _xC_Y_MA_16$[ebx]
  00064	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00068	66 0f f5 02	 pmaddwd xmm0, XMMWORD PTR [edx]
  0006c	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00070	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00074	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1372 :     x7 = _mm_madd_epi16(x7, xC_Y_MA_16);

  00078	8b 43 08	 mov	 eax, DWORD PTR _xC_Y_MA_16$[ebx]
  0007b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  0007f	66 0f f5 00	 pmaddwd xmm0, XMMWORD PTR [eax]
  00083	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00087	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0008b	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1373 :     x0 = _mm_srai_epi32(x0, Y_RSH_16);

  0008f	8b 4b 0c	 mov	 ecx, DWORD PTR _Y_RSH_16$[ebx]
  00092	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00096	66 0f 6e c9	 movd	 xmm1, ecx
  0009a	66 0f e2 c1	 psrad	 xmm0, xmm1
  0009e	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a2	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000a6	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1374 :     x7 = _mm_srai_epi32(x7, Y_RSH_16);

  000aa	8b 53 0c	 mov	 edx, DWORD PTR _Y_RSH_16$[ebx]
  000ad	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000b1	66 0f 6e ca	 movd	 xmm1, edx
  000b5	66 0f e2 c1	 psrad	 xmm0, xmm1
  000b9	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bd	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000c1	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1375 :     x0 = _mm_add_epi32(x0, xC_YCC);

  000c5	8b 43 10	 mov	 eax, DWORD PTR _xC_YCC$[ebx]
  000c8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000cc	66 0f fe 00	 paddd	 xmm0, XMMWORD PTR [eax]
  000d0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000de	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1376 :     x7 = _mm_add_epi32(x7, xC_YCC);

  000e2	8b 4b 10	 mov	 ecx, DWORD PTR _xC_YCC$[ebx]
  000e5	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  000e9	66 0f fe 01	 paddd	 xmm0, XMMWORD PTR [ecx]
  000ed	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000f4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000fb	0f 29 45 e0	 movaps	 XMMWORD PTR _x7$[ebp], xmm0

; 1377 : 
; 1378 :     x0 = _mm_packus_epi32_simd(x0, x7);

  000ff	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x7$[ebp]
  00103	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00107	e8 00 00 00 00	 call	 ?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ; _mm_packus_epi32_simd
  0010c	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00113	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0011a	0f 29 45 f0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 1379 : 
; 1380 :     return x0;

  0011e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]

; 1381 : }

  00122	5f		 pop	 edi
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	8b e3		 mov	 esp, ebx
  00128	5b		 pop	 ebx
  00129	c3		 ret	 0
?convert_y_range_from_yc48@@YA?AT__m128i@@T1@ABT1@H11@Z ENDP ; convert_y_range_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
$T8 = -64						; size = 16
_MASK_INT_UV$ = -40					; size = 4
_MASK_INT_Y$ = -36					; size = 4
_x3$ = -32						; size = 16
_x2$ = -16						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z PROC	; gather_y_uv_from_yc48
; _x2$ = xmm0

; 1331 : static __forceinline void gather_y_uv_from_yc48(__m128i& x0, __m128i& x1, __m128i x2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 1332 : #if USE_SSE41
; 1333 :     __m128i x3;
; 1334 :     const int MASK_INT_Y  = 0x80 + 0x10 + 0x02;

  00033	c7 45 dc 92 00
	00 00		 mov	 DWORD PTR _MASK_INT_Y$[ebp], 146 ; 00000092H

; 1335 :     const int MASK_INT_UV = 0x40 + 0x20 + 0x01;

  0003a	c7 45 d8 61 00
	00 00		 mov	 DWORD PTR _MASK_INT_UV$[ebp], 97 ; 00000061H

; 1336 :     x3 = _mm_blend_epi16(x0, x1, MASK_INT_Y);

  00041	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  00044	8b 4b 08	 mov	 ecx, DWORD PTR _x0$[ebx]
  00047	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0004a	66 0f 3a 0e 00
	92		 pblendw xmm0, XMMWORD PTR [eax], 146 ; 00000092H
  00050	0f 29 45 c0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00054	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00058	0f 29 45 e0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1337 :     x3 = _mm_blend_epi16(x3, x2, MASK_INT_Y>>2);

  0005c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00060	66 0f 3a 0e 45
	f0 24		 pblendw xmm0, XMMWORD PTR _x2$[ebp], 36 ; 00000024H
  00067	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0006b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0006f	0f 29 45 e0	 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 1338 : 
; 1339 :     x1 = _mm_blend_epi16(x0, x1, MASK_INT_UV);

  00073	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  00076	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00079	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007c	66 0f 3a 0e 02
	61		 pblendw xmm0, XMMWORD PTR [edx], 97 ; 00000061H
  00082	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00086	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  00089	0f 10 45 a0	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  0008d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 1340 :     x1 = _mm_blend_epi16(x1, x2, MASK_INT_UV>>2);

  00090	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  00093	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00096	66 0f 3a 0e 45
	f0 18		 pblendw xmm0, XMMWORD PTR _x2$[ebp], 24 ; 00000018H
  0009d	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a1	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  000a4	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T5[ebp]
  000a8	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1341 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);

  000ab	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  000ae	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  000b1	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000b4	66 0f 3a 0f 01
	02		 palignr xmm0, XMMWORD PTR [ecx], 2
  000ba	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000be	8b 43 0c	 mov	 eax, DWORD PTR _x1$[ebx]
  000c1	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T4[ebp]
  000c5	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1342 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));//UV1行目

  000c8	8b 4b 0c	 mov	 ecx, DWORD PTR _x1$[ebx]
  000cb	66 0f 70 01 6c	 pshufd	 xmm0, XMMWORD PTR [ecx], 108 ; 0000006cH
  000d0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d7	8b 53 0c	 mov	 edx, DWORD PTR _x1$[ebx]
  000da	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  000e1	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 1343 : 
; 1344 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);

  000e4	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?Array_SUFFLE_YCP_Y@@3QBEB
  000eb	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000f2	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  000f6	66 0f 38 00 85
	60 ff ff ff	 pshufb	 xmm0, XMMWORD PTR $T2[ebp]
  000ff	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00106	8b 43 08	 mov	 eax, DWORD PTR _x0$[ebx]
  00109	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00110	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 1345 : #else
; 1346 :     __m128i x3;
; 1347 :     x3 = select_by_mask(x0, x1, xC_MASK_YCP2Y(0));
; 1348 :     x3 = select_by_mask(x3, x2, xC_MASK_YCP2Y(1));
; 1349 : 
; 1350 :     x1 = select_by_mask(x0, x1, xC_MASK_YCP2UV(0));
; 1351 :     x1 = select_by_mask(x1, x2, xC_MASK_YCP2UV(1));
; 1352 :     x1 = _mm_alignr_epi8_simd(x1, x1, 2);
; 1353 :     x1 = _mm_shuffle_epi32(x1, _MM_SHUFFLE(1,2,3,0));
; 1354 : #if USE_SSSE3
; 1355 :     x0 = _mm_shuffle_epi8(x3, xC_SUFFLE_YCP_Y);
; 1356 : #else
; 1357 :     x0 = _mm_shuffle_epi32(  x3, _MM_SHUFFLE(3,1,2,0));
; 1358 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1359 :     x0 = _mm_shuffle_epi32(  x0, _MM_SHUFFLE(1,2,3,0));
; 1360 :     x0 = _mm_shufflelo_epi16(x0, _MM_SHUFFLE(1,2,3,0));
; 1361 :     x0 = _mm_shufflehi_epi16(x0, _MM_SHUFFLE(3,0,1,2));
; 1362 : #endif //USE_SSSE3
; 1363 : #endif //USE_SSE41
; 1364 : }

  00113	5f		 pop	 edi
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	8b e3		 mov	 esp, ebx
  00119	5b		 pop	 ebx
  0011a	c3		 ret	 0
?gather_y_uv_from_yc48@@YAXAAT__m128i@@0T1@@Z ENDP	; gather_y_uv_from_yc48
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp_simd.h
_TEXT	SEGMENT
$T1 = -48						; size = 16
_b$ = -32						; size = 16
_a$ = -16						; size = 16
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z PROC	; _mm_packus_epi32_simd
; _a$ = xmm0
; _b$ = xmm1

; 98   : static __forceinline __m128i _mm_packus_epi32_simd(__m128i a, __m128i b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d e0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _a$[ebp], xmm0

; 99   : #if USE_SSE41
; 100  :     return _mm_packus_epi32(a, b);

  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00035	66 0f 38 2b 45
	e0		 packusdw xmm0, XMMWORD PTR _b$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]

; 101  : #else
; 102  :     alignas(64) static const uint32_t VAL[2][4] = {
; 103  :         { 0x00008000, 0x00008000, 0x00008000, 0x00008000 },
; 104  :         { 0x80008000, 0x80008000, 0x80008000, 0x80008000 }
; 105  :     };
; 106  : #define LOAD_32BIT_0x8000 _mm_load_si128((__m128i *)VAL[0])
; 107  : #define LOAD_16BIT_0x8000 _mm_load_si128((__m128i *)VAL[1])
; 108  :     a = _mm_sub_epi32(a, LOAD_32BIT_0x8000);
; 109  :     b = _mm_sub_epi32(b, LOAD_32BIT_0x8000);
; 110  :     a = _mm_packs_epi32(a, b);
; 111  :     return _mm_add_epi16(a, LOAD_16BIT_0x8000);
; 112  : #undef LOAD_32BIT_0x8000
; 113  : #undef LOAD_16BIT_0x8000
; 114  : #endif
; 115  : }

  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?_mm_packus_epi32_simd@@YA?AT__m128i@@T1@0@Z ENDP	; _mm_packus_epi32_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\convert_csp.h
_TEXT	SEGMENT
_y1$ = -36						; size = 4
_y0$ = -32						; size = 4
_y_range$ = -24						; size = 12
_h$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
$T1 = 8							; size = 4
_y_start$ = 12						; size = 4
_y_end$ = 16						; size = 4
_thread_id$ = 20					; size = 4
_thread_n$ = 24						; size = 4
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z PROC	; thread_y_range

; 375  : static inline THREAD_Y_RANGE thread_y_range(int y_start, int y_end, int thread_id, int thread_n) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 376  :     const int h = y_end - y_start;

  00030	8b 45 10	 mov	 eax, DWORD PTR _y_end$[ebp]
  00033	2b 45 0c	 sub	 eax, DWORD PTR _y_start$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 377  :     THREAD_Y_RANGE y_range;
; 378  :     int y0 = ((((h *  thread_id)    / thread_n) + 3) & ~3);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  0003c	0f af 45 14	 imul	 eax, DWORD PTR _thread_id$[ebp]
  00040	99		 cdq
  00041	f7 7d 18	 idiv	 DWORD PTR _thread_n$[ebp]
  00044	83 c0 03	 add	 eax, 3
  00047	83 e0 fc	 and	 eax, -4			; fffffffcH
  0004a	89 45 e0	 mov	 DWORD PTR _y0$[ebp], eax

; 379  :     int y1 = ((((h * (thread_id+1)) / thread_n) + 3) & ~3);

  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _thread_id$[ebp]
  00050	83 c1 01	 add	 ecx, 1
  00053	8b c1		 mov	 eax, ecx
  00055	0f af 45 f8	 imul	 eax, DWORD PTR _h$[ebp]
  00059	99		 cdq
  0005a	f7 7d 18	 idiv	 DWORD PTR _thread_n$[ebp]
  0005d	83 c0 03	 add	 eax, 3
  00060	83 e0 fc	 and	 eax, -4			; fffffffcH
  00063	89 45 dc	 mov	 DWORD PTR _y1$[ebp], eax

; 380  :     if (y1 > h) {

  00066	8b 55 dc	 mov	 edx, DWORD PTR _y1$[ebp]
  00069	3b 55 f8	 cmp	 edx, DWORD PTR _h$[ebp]
  0006c	7e 06		 jle	 SHORT $LN2@thread_y_r

; 381  :         y1 = h;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  00071	89 45 dc	 mov	 DWORD PTR _y1$[ebp], eax
$LN2@thread_y_r:

; 382  :     }
; 383  :     y_range.start_src = y_start + y0;

  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _y_start$[ebp]
  00077	03 4d e0	 add	 ecx, DWORD PTR _y0$[ebp]
  0007a	89 4d e8	 mov	 DWORD PTR _y_range$[ebp], ecx

; 384  :     y_range.start_dst = y0;

  0007d	8b 55 e0	 mov	 edx, DWORD PTR _y0$[ebp]
  00080	89 55 ec	 mov	 DWORD PTR _y_range$[ebp+4], edx

; 385  :     y_range.len = y1 - y0;

  00083	8b 45 dc	 mov	 eax, DWORD PTR _y1$[ebp]
  00086	2b 45 e0	 sub	 eax, DWORD PTR _y0$[ebp]
  00089	89 45 f0	 mov	 DWORD PTR _y_range$[ebp+8], eax

; 386  :     return y_range;

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR $T1[ebp]
  0008f	8b 55 e8	 mov	 edx, DWORD PTR _y_range$[ebp]
  00092	89 11		 mov	 DWORD PTR [ecx], edx
  00094	8b 45 ec	 mov	 eax, DWORD PTR _y_range$[ebp+4]
  00097	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0009a	8b 55 f0	 mov	 edx, DWORD PTR _y_range$[ebp+8]
  0009d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000a0	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]

; 387  : }

  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@thread_y_r
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
  000c2	66 90		 npad	 2
$LN6@thread_y_r:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@thread_y_r
$LN5@thread_y_r:
  000cc	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d0	0c 00 00 00	 DD	 12			; 0000000cH
  000d4	00 00 00 00	 DD	 $LN4@thread_y_r
$LN4@thread_y_r:
  000d8	79		 DB	 121			; 00000079H
  000d9	5f		 DB	 95			; 0000005fH
  000da	72		 DB	 114			; 00000072H
  000db	61		 DB	 97			; 00000061H
  000dc	6e		 DB	 110			; 0000006eH
  000dd	67		 DB	 103			; 00000067H
  000de	65		 DB	 101			; 00000065H
  000df	00		 DB	 0
?thread_y_range@@YA?AUTHREAD_Y_RANGE@@HHHH@Z ENDP	; thread_y_range
_TEXT	ENDS
END
