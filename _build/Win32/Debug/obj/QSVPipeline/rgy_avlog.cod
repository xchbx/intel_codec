; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG131256 DB	'invalid argument', 00H
	ORG $+3
$SG131257 DB	'%s', 00H
	ORG $+1
$SG131258 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG131259 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG131260 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG131261 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG131306 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG115591 DB	'trace', 00H
	ORG $+2
$SG115592 DB	'debug', 00H
	ORG $+2
$SG115593 DB	'more', 00H
	ORG $+3
$SG115594 DB	'info', 00H
	ORG $+3
$SG115595 DB	'warn', 00H
	ORG $+3
$SG115596 DB	'error', 00H
	ORG $+2
$SG115598 DB	'cfr', 00H
$SG115599 DB	'vfr', 00H
$SG115600 DB	'forcecfr', 00H
	ORG $+3
$SG115602 DB	'swr', 00H
$SG115603 DB	'soxr', 00H
	ORG $+3
$SG112586 DB	'Invalid', 00H
$SG112587 DB	'nv12', 00H
	ORG $+3
$SG112588 DB	'yv12', 00H
	ORG $+3
$SG112589 DB	'yuy2', 00H
	ORG $+3
$SG112590 DB	'yuv422', 00H
	ORG $+1
$SG112591 DB	'nv16', 00H
	ORG $+3
$SG112592 DB	'yuv444', 00H
	ORG $+1
$SG112593 DB	'yv12(9bit)', 00H
	ORG $+1
$SG112594 DB	'yv12(10bit)', 00H
$SG112595 DB	'yv12(12bit)', 00H
$SG112596 DB	'yv12(14bit)', 00H
$SG112597 DB	'yv12(16bit)', 00H
$SG112598 DB	'p010', 00H
	ORG $+3
$SG112599 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG112600 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG112601 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG112602 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG112603 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG112604 DB	'p210', 00H
	ORG $+3
$SG112605 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG112606 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG112607 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG112608 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG112609 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG112610 DB	'yuva444', 00H
$SG112611 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG112612 DB	'rgb24r', 00H
	ORG $+1
$SG112613 DB	'rgb32r', 00H
	ORG $+1
$SG112614 DB	'rgb24', 00H
	ORG $+2
$SG112615 DB	'rgb32', 00H
	ORG $+2
$SG112616 DB	'bgr24', 00H
	ORG $+2
$SG112617 DB	'bgr32', 00H
	ORG $+2
$SG112618 DB	'rgb', 00H
$SG112619 DB	'rgba', 00H
	ORG $+3
$SG112620 DB	'gbr', 00H
$SG112621 DB	'gbra', 00H
	ORG $+3
$SG112622 DB	'yc48', 00H
	ORG $+3
$SG112623 DB	'y8', 00H
	ORG $+1
$SG112624 DB	'yc16', 00H
	ORG $+3
?HW_DECODE_LIST@@3QBUCodecMap@@B DD 01bH		; HW_DECODE_LIST
	DD	01H
	DD	0adH
	DD	02H
	DD	02H
	DD	04H
	DD	08bH
	DD	06H
	DD	0a7H
	DD	07H
	DD	046H
	DD	08H
$SG121546 DB	'auto', 00H
	ORG $+3
$SG121548 DB	'copy', 00H
	ORG $+3
$SG121673 DB	'.', 0aH, 00H
	ORG $+1
$SG121674 DB	' for ', 00H
	ORG $+2
$SG121677 DB	'avcodec-58.dll', 00H
	ORG $+1
$SG121678 DB	'avformat-58.dll', 00H
$SG121679 DB	'avutil-56.dll', 00H
	ORG $+2
$SG121680 DB	'avfilter-7.dll', 00H
	ORG $+1
$SG121681 DB	'swresample-3.dll', 00H
	ORG $+3
$SG113556 DB	'H.264/AVC', 00H
	ORG $+2
$SG113558 DB	'H.265/HEVC', 00H
	ORG $+1
$SG113560 DB	'MPEG2', 00H
	ORG $+2
$SG113562 DB	'MPEG1', 00H
	ORG $+2
$SG113564 DB	'VC-1', 00H
	ORG $+3
$SG113566 DB	'MPEG4', 00H
	ORG $+2
$SG113568 DB	'VP8', 00H
$SG113570 DB	'VP9', 00H
$SG113572 DB	'unknown', 00H
$SG113679 DB	'unknown', 00H
?list_colormatrix@@3QBUCX_DESC@@B DD FLAT:$SG114174	; list_colormatrix
	DD	02H
	DD	FLAT:$SG114175
	DD	07fffffffH
	DD	FLAT:$SG114176
	DD	01H
	DD	FLAT:$SG114177
	DD	06H
	DD	FLAT:$SG114178
	DD	05H
	DD	FLAT:$SG114179
	DD	07H
	DD	FLAT:$SG114180
	DD	08H
	DD	FLAT:$SG114181
	DD	04H
	DD	FLAT:$SG114182
	DD	00H
	DD	FLAT:$SG114183
	DD	09H
	DD	FLAT:$SG114184
	DD	0aH
	DD	FLAT:$SG114185
	DD	0cH
	DD	FLAT:$SG114186
	DD	0dH
	DD	FLAT:$SG114187
	DD	0eH
	DD	FLAT:$SG114188
	DD	0fH
	DD	00H
	DD	00H
$SG114174 DB	'undef', 00H
	ORG $+2
$SG114175 DB	'auto', 00H
	ORG $+3
$SG114176 DB	'bt709', 00H
	ORG $+2
$SG114177 DB	'smpte170m', 00H
	ORG $+2
$SG114178 DB	'bt470bg', 00H
$SG114179 DB	'smpte240m', 00H
	ORG $+2
$SG114180 DB	'YCgCo', 00H
	ORG $+2
$SG114181 DB	'fcc', 00H
$SG114182 DB	'GBR', 00H
$SG114183 DB	'bt2020nc', 00H
	ORG $+3
$SG114184 DB	'bt2020c', 00H
$SG114185 DB	'derived-ncl', 00H
$SG114186 DB	'derived-cl', 00H
	ORG $+1
$SG114187 DB	'ictco', 00H
	ORG $+2
$SG114188 DB	'2100-lms', 00H
	ORG $+3
?list_transfer@@3QBUCX_DESC@@B DD FLAT:$SG114329	; list_transfer
	DD	02H
	DD	FLAT:$SG114330
	DD	07fffffffH
	DD	FLAT:$SG114331
	DD	01H
	DD	FLAT:$SG114332
	DD	06H
	DD	FLAT:$SG114333
	DD	04H
	DD	FLAT:$SG114334
	DD	05H
	DD	FLAT:$SG114335
	DD	07H
	DD	FLAT:$SG114336
	DD	08H
	DD	FLAT:$SG114337
	DD	09H
	DD	FLAT:$SG114338
	DD	0aH
	DD	FLAT:$SG114339
	DD	0bH
	DD	FLAT:$SG114340
	DD	0cH
	DD	FLAT:$SG114341
	DD	0dH
	DD	FLAT:$SG114342
	DD	0eH
	DD	FLAT:$SG114343
	DD	0fH
	DD	FLAT:$SG114344
	DD	010H
	DD	FLAT:$SG114345
	DD	011H
	DD	FLAT:$SG114346
	DD	012H
	DD	00H
	DD	00H
$SG114329 DB	'undef', 00H
	ORG $+2
$SG114330 DB	'auto', 00H
	ORG $+3
$SG114331 DB	'bt709', 00H
	ORG $+2
$SG114332 DB	'smpte170m', 00H
	ORG $+2
$SG114333 DB	'bt470m', 00H
	ORG $+1
$SG114334 DB	'bt470bg', 00H
$SG114335 DB	'smpte240m', 00H
	ORG $+2
$SG114336 DB	'linear', 00H
	ORG $+1
$SG114337 DB	'log100', 00H
	ORG $+1
$SG114338 DB	'log316', 00H
	ORG $+1
$SG114339 DB	'iec61966-2-4', 00H
	ORG $+3
$SG114340 DB	'bt1361e', 00H
$SG114341 DB	'iec61966-2-1', 00H
	ORG $+3
$SG114342 DB	'bt2020-10', 00H
	ORG $+2
$SG114343 DB	'bt2020-12', 00H
	ORG $+2
$SG114344 DB	'smpte2084', 00H
	ORG $+2
$SG114345 DB	'smpte428', 00H
	ORG $+3
$SG114346 DB	'arib-srd-b67', 00H
	ORG $+3
?list_colorprim@@3QBUCX_DESC@@B DD FLAT:$SG114478	; list_colorprim
	DD	02H
	DD	FLAT:$SG114479
	DD	07fffffffH
	DD	FLAT:$SG114480
	DD	01H
	DD	FLAT:$SG114481
	DD	06H
	DD	FLAT:$SG114482
	DD	04H
	DD	FLAT:$SG114483
	DD	05H
	DD	FLAT:$SG114484
	DD	07H
	DD	FLAT:$SG114485
	DD	08H
	DD	FLAT:$SG114486
	DD	09H
	DD	FLAT:$SG114487
	DD	0aH
	DD	FLAT:$SG114488
	DD	0bH
	DD	FLAT:$SG114489
	DD	0cH
	DD	FLAT:$SG114490
	DD	0dH
	DD	00H
	DD	00H
$SG114478 DB	'undef', 00H
	ORG $+2
$SG114479 DB	'auto', 00H
	ORG $+3
$SG114480 DB	'bt709', 00H
	ORG $+2
$SG114481 DB	'smpte170m', 00H
	ORG $+2
$SG114482 DB	'bt470m', 00H
	ORG $+1
$SG114483 DB	'bt470bg', 00H
$SG114484 DB	'smpte240m', 00H
	ORG $+2
$SG114485 DB	'film', 00H
	ORG $+3
$SG114486 DB	'bt2020', 00H
	ORG $+1
$SG114487 DB	'st428', 00H
	ORG $+2
$SG114488 DB	'st431-2', 00H
$SG114489 DB	'st432-1', 00H
$SG114490 DB	'ebu3213-e', 00H
	ORG $+2
?list_videoformat@@3QBUCX_DESC@@B DD FLAT:$SG114492	; list_videoformat
	DD	05H
	DD	FLAT:$SG114493
	DD	02H
	DD	FLAT:$SG114494
	DD	00H
	DD	FLAT:$SG114495
	DD	01H
	DD	FLAT:$SG114496
	DD	03H
	DD	FLAT:$SG114497
	DD	04H
	DD	00H
	DD	00H
$SG114492 DB	'undef', 00H
	ORG $+2
$SG114493 DB	'ntsc', 00H
	ORG $+3
$SG114494 DB	'component', 00H
	ORG $+2
$SG114495 DB	'pal', 00H
$SG114496 DB	'secam', 00H
	ORG $+2
$SG114497 DB	'mac', 00H
$SG114499 DB	'0', 00H
	ORG $+2
$SG114500 DB	'1', 00H
	ORG $+2
$SG114501 DB	'2', 00H
	ORG $+2
$SG114502 DB	'3', 00H
	ORG $+2
$SG114503 DB	'4', 00H
	ORG $+2
$SG114504 DB	'5', 00H
	ORG $+2
$SG114506 DB	'limited', 00H
$SG114507 DB	'full', 00H
	ORG $+3
$SG114508 DB	'tv', 00H
	ORG $+1
$SG114509 DB	'pc', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Incref_nz@_Ref_count_base@std@@QAE_NXZ	; std::_Ref_count_base::_Incref_nz
PUBLIC	?_Incwref@_Ref_count_base@std@@QAEXXZ		; std::_Ref_count_base::_Incwref
PUBLIC	?_Decref@_Ref_count_base@std@@QAEXXZ		; std::_Ref_count_base::_Decref
PUBLIC	?_Decwref@_Ref_count_base@std@@QAEXXZ		; std::_Ref_count_base::_Decwref
PUBLIC	??$_Atomic_address_as@$$CBJ$$CCJ@std@@YAPDJACJ@Z ; std::_Atomic_address_as<long const ,long volatile >
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	?getLogLevel@RGYLog@@QAEHXZ			; RGYLog::getLogLevel
PUBLIC	?logFileAvail@RGYLog@@QAE_NXZ			; RGYLog::logFileAvail
PUBLIC	?av_qsv_log_set@@YAXAAV?$shared_ptr@VRGYLog@@@std@@@Z ; av_qsv_log_set
PUBLIC	?av_qsv_log_free@@YAXXZ				; av_qsv_log_free
PUBLIC	?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get
PUBLIC	??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
PUBLIC	?_Decref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ	; std::_Ptr_base<RGYLog>::_Decref
PUBLIC	?_Swap@?$_Ptr_base@VRGYLog@@@std@@IAEXAAV12@@Z	; std::_Ptr_base<RGYLog>::_Swap
PUBLIC	?_Decwref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ	; std::_Ptr_base<RGYLog>::_Decwref
PUBLIC	??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ		; std::weak_ptr<RGYLog>::weak_ptr<RGYLog>
PUBLIC	??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ		; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>
PUBLIC	?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ		; std::weak_ptr<RGYLog>::reset
PUBLIC	?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z	; std::weak_ptr<RGYLog>::swap
PUBLIC	?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ ; std::weak_ptr<RGYLog>::lock
PUBLIC	??0?$_Atomic_storage@_N$00@std@@QAE@_N@Z	; std::_Atomic_storage<bool,1>::_Atomic_storage<bool,1>
PUBLIC	?store@?$_Atomic_storage@_N$00@std@@QAEX_N@Z	; std::_Atomic_storage<bool,1>::store
PUBLIC	?load@?$_Atomic_storage@_N$00@std@@QBE_NXZ	; std::_Atomic_storage<bool,1>::load
PUBLIC	??4?$atomic@_N@std@@QAE_N_N@Z			; std::atomic<bool>::operator=
PUBLIC	??B?$atomic@_N@std@@QBE_NXZ			; std::atomic<bool>::operator bool
PUBLIC	??0?$atomic@_N@std@@QAE@_N@Z			; std::atomic<bool>::atomic<bool>
PUBLIC	??0?$shared_ptr@VRGYLog@@@std@@QAE@XZ		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
PUBLIC	??0?$shared_ptr@VRGYLog@@@std@@QAE@$$QAV01@@Z	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
PUBLIC	??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
PUBLIC	??B?$shared_ptr@VRGYLog@@@std@@QBE_NXZ		; std::shared_ptr<RGYLog>::operator bool
PUBLIC	??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
PUBLIC	??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z ; std::weak_ptr<RGYLog>::operator=<RGYLog>
PUBLIC	??$?0VRGYLog@@$0A@@?$weak_ptr@VRGYLog@@@std@@QAE@ABV?$shared_ptr@VRGYLog@@@1@@Z ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog><RGYLog,0>
PUBLIC	??$_Construct_from_weak@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAE_NABV?$weak_ptr@VRGYLog@@@1@@Z ; std::_Ptr_base<RGYLog>::_Construct_from_weak<RGYLog>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$shared_ptr@VRGYLog@@@std@@@std@@YA$$QAV?$shared_ptr@VRGYLog@@@0@AAV10@@Z ; std::move<std::shared_ptr<RGYLog> &>
PUBLIC	??$_Move_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEX$$QAV01@@Z ; std::_Ptr_base<RGYLog>::_Move_construct_from<RGYLog>
PUBLIC	??$_Atomic_address_as@$$CBD$$CBU?$_Atomic_padded@_N@std@@@std@@YAPDDABU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char const ,std::_Atomic_padded<bool> const >
PUBLIC	??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPCDAAU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
PUBLIC	??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z	; std::_Atomic_reinterpret_as<char,bool>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$swap@PAVRGYLog@@X@std@@YAXAAPAVRGYLog@@0@Z	; std::swap<RGYLog *,void>
PUBLIC	??$swap@PAV_Ref_count_base@std@@X@std@@YAXAAPAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@$$CB_N@std@@YAPB_NAB_N@Z		; std::addressof<bool const >
PUBLIC	??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z ; std::move<RGYLog * &>
PUBLIC	??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z ; std::move<std::_Ref_count_base * &>
PUBLIC	??$_Weakly_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEXABV01@@Z ; std::_Ptr_base<RGYLog>::_Weakly_construct_from<RGYLog>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_memcpy:PROC
EXTRN	?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:PROC ; char_to_tstring
EXTRN	_av_log_set_callback:PROC
EXTRN	_av_log_default_callback:PROC
EXTRN	_av_log_format_line:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A DQ 01H DUP (?) ; g_pQSVLog
?g_bSetCustomLog@@3U?$atomic@_N@std@@A DB 01H DUP (?)	; g_bSetCustomLog
_BSS	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZA DD FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
?print_prefix@@3HA DD 01H				; print_prefix
_DATA	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z$0
__ehfuncinfo$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z$1
__ehfuncinfo$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ$0
__ehfuncinfo$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ$0
__ehfuncinfo$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZA DD FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZA DD FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?g_pQSVLog$initializer$@@3P6AXXZA DD FLAT:??__Eg_pQSVLog@@YAXXZ ; g_pQSVLog$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?g_bSetCustomLog$initializer$@@3P6AXXZA DD FLAT:??__Eg_bSetCustomLog@@YAXXZ ; g_bSetCustomLog$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$_Weakly_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEXABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??$_Weakly_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEXABV01@@Z PROC ; std::_Ptr_base<RGYLog>::_Weakly_construct_from<RGYLog>, COMDAT
; _this$ = ecx

; 893  :     void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other) noexcept { // implement weak_ptr's ctors

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 894  :         if (_Other._Rep) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	74 21		 je	 SHORT $LN1@Weakly_con

; 895  :             _Ptr = _Other._Ptr;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 08	 mov	 edx, DWORD PTR __Other$[ebp]
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax

; 896  :             _Rep = _Other._Rep;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 55 08	 mov	 edx, DWORD PTR __Other$[ebp]
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 897  :             _Rep->_Incwref();

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00033	e8 00 00 00 00	 call	 ?_Incwref@_Ref_count_base@std@@QAEXXZ ; std::_Ref_count_base::_Incwref
$LN1@Weakly_con:

; 898  :         } else {
; 899  :             _STL_INTERNAL_CHECK(!_Ptr && !_Rep);
; 900  :         }
; 901  :     }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??$_Weakly_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEXABV01@@Z ENDP ; std::_Ptr_base<RGYLog>::_Weakly_construct_from<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z PROC ; std::move<std::_Ref_count_base * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z ENDP ; std::move<std::_Ref_count_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z PROC ; std::move<RGYLog * &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z ENDP ; std::move<RGYLog * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CB_N@std@@YAPB_NAB_N@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CB_N@std@@YAPB_NAB_N@Z PROC		; std::addressof<bool const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CB_N@std@@YAPB_NAB_N@Z ENDP		; std::addressof<bool const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PAV_Ref_count_base@std@@X@std@@YAXAAPAV_Ref_count_base@0@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAV_Ref_count_base@std@@X@std@@YAXAAPAV_Ref_count_base@0@0@Z PROC ; std::swap<std::_Ref_count_base *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 59   :     _Ty _Tmp = _STD move(_Left);

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z ; std::move<std::_Ref_count_base * &>
  00024	83 c4 04	 add	 esp, 4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 60   :     _Left    = _STD move(_Right);

  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z ; std::move<std::_Ref_count_base * &>
  00035	83 c4 04	 add	 esp, 4
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx

; 61   :     _Right   = _STD move(_Tmp);

  0003f	8d 45 f8	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$move@AAPAV_Ref_count_base@std@@@std@@YA$$QAPAV_Ref_count_base@0@AAPAV10@@Z ; std::move<std::_Ref_count_base * &>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004e	8b 10		 mov	 edx, DWORD PTR [eax]
  00050	89 11		 mov	 DWORD PTR [ecx], edx

; 62   : }

  00052	52		 push	 edx
  00053	8b cd		 mov	 ecx, ebp
  00055	50		 push	 eax
  00056	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@swap
  0005c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00061	58		 pop	 eax
  00062	5a		 pop	 edx
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
  00071	0f 1f 00	 npad	 3
$LN5@swap:
  00074	01 00 00 00	 DD	 1
  00078	00 00 00 00	 DD	 $LN4@swap
$LN4@swap:
  0007c	f8 ff ff ff	 DD	 -8			; fffffff8H
  00080	04 00 00 00	 DD	 4
  00084	00 00 00 00	 DD	 $LN3@swap
$LN3@swap:
  00088	5f		 DB	 95			; 0000005fH
  00089	54		 DB	 84			; 00000054H
  0008a	6d		 DB	 109			; 0000006dH
  0008b	70		 DB	 112			; 00000070H
  0008c	00		 DB	 0
??$swap@PAV_Ref_count_base@std@@X@std@@YAXAAPAV_Ref_count_base@0@0@Z ENDP ; std::swap<std::_Ref_count_base *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$swap@PAVRGYLog@@X@std@@YAXAAPAVRGYLog@@0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAVRGYLog@@X@std@@YAXAAPAVRGYLog@@0@Z PROC	; std::swap<RGYLog *,void>, COMDAT

; 58   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 59   :     _Ty _Tmp = _STD move(_Left);

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z ; std::move<RGYLog * &>
  00024	83 c4 04	 add	 esp, 4
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 60   :     _Left    = _STD move(_Right);

  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z ; std::move<RGYLog * &>
  00035	83 c4 04	 add	 esp, 4
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx

; 61   :     _Right   = _STD move(_Tmp);

  0003f	8d 45 f8	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$move@AAPAVRGYLog@@@std@@YA$$QAPAVRGYLog@@AAPAV1@@Z ; std::move<RGYLog * &>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004e	8b 10		 mov	 edx, DWORD PTR [eax]
  00050	89 11		 mov	 DWORD PTR [ecx], edx

; 62   : }

  00052	52		 push	 edx
  00053	8b cd		 mov	 ecx, ebp
  00055	50		 push	 eax
  00056	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@swap
  0005c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00061	58		 pop	 eax
  00062	5a		 pop	 edx
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
  00071	0f 1f 00	 npad	 3
$LN5@swap:
  00074	01 00 00 00	 DD	 1
  00078	00 00 00 00	 DD	 $LN4@swap
$LN4@swap:
  0007c	f8 ff ff ff	 DD	 -8			; fffffff8H
  00080	04 00 00 00	 DD	 4
  00084	00 00 00 00	 DD	 $LN3@swap
$LN3@swap:
  00088	5f		 DB	 95			; 0000005fH
  00089	54		 DB	 84			; 00000054H
  0008a	6d		 DB	 109			; 0000006dH
  0008b	70		 DB	 112			; 00000070H
  0008c	00		 DB	 0
??$swap@PAVRGYLog@@X@std@@YAXAAPAVRGYLog@@0@Z ENDP	; std::swap<RGYLog *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  :     _Obj.~_Ty();
; 323  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z
_TEXT	SEGMENT
__Result$ = -17						; size = 1
__$EHRec$ = -12						; size = 12
__Source$ = 8						; size = 4
??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z PROC	; std::_Atomic_reinterpret_as<char,bool>, COMDAT

; 215  : _NODISCARD _Integral _Atomic_reinterpret_as(const _Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 216  :     // interprets _Source as the supplied integral type
; 217  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 218  :     _Integral _Result{}; // zero padding bits

  0003a	c6 45 ef 00	 mov	 BYTE PTR __Result$[ebp], 0

; 219  :     _CSTD memcpy(&_Result, _STD addressof(_Source), sizeof(_Source));

  0003e	6a 01		 push	 1
  00040	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$addressof@$$CB_N@std@@YAPB_NAB_N@Z ; std::addressof<bool const >
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8d 4d ef	 lea	 ecx, DWORD PTR __Result$[ebp]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  :     return _Result;

  00059	8a 45 ef	 mov	 al, BYTE PTR __Result$[ebp]

; 221  : }

  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Atomic_rei
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
  00086	66 90		 npad	 2
$LN6@Atomic_rei:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN5@Atomic_rei
$LN5@Atomic_rei:
  00090	ef ff ff ff	 DD	 -17			; ffffffefH
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN3@Atomic_rei
$LN3@Atomic_rei:
  0009c	5f		 DB	 95			; 0000005fH
  0009d	52		 DB	 82			; 00000052H
  0009e	65		 DB	 101			; 00000065H
  0009f	73		 DB	 115			; 00000073H
  000a0	75		 DB	 117			; 00000075H
  000a1	6c		 DB	 108			; 0000006cH
  000a2	74		 DB	 116			; 00000074H
  000a3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z ENDP	; std::_Atomic_reinterpret_as<char,bool>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPCDAAU?$_Atomic_padded@_N@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPCDAAU?$_Atomic_padded@_N@0@@Z PROC ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >, COMDAT

; 68   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 70   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 71   :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 72   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPCDAAU?$_Atomic_padded@_N@0@@Z ENDP ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@$$CBD$$CBU?$_Atomic_padded@_N@std@@@std@@YAPDDABU?$_Atomic_padded@_N@0@@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@$$CBD$$CBU?$_Atomic_padded@_N@std@@@std@@YAPDDABU?$_Atomic_padded@_N@0@@Z PROC ; std::_Atomic_address_as<char const ,std::_Atomic_padded<bool> const >, COMDAT

; 68   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 70   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 71   :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 72   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@$$CBD$$CBU?$_Atomic_padded@_N@std@@@std@@YAPDDABU?$_Atomic_padded@_N@0@@Z ENDP ; std::_Atomic_address_as<char const ,std::_Atomic_padded<bool> const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$_Move_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEX$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$_Move_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEX$$QAV01@@Z PROC ; std::_Ptr_base<RGYLog>::_Move_construct_from<RGYLog>, COMDAT
; _this$ = ecx

; 825  :     void _Move_construct_from(_Ptr_base<_Ty2>&& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 826  :         // implement shared_ptr's (converting) move ctor and weak_ptr's move ctor
; 827  :         _Ptr = _Right._Ptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx

; 828  :         _Rep = _Right._Rep;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 829  : 
; 830  :         _Right._Ptr = nullptr;

  00024	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 831  :         _Right._Rep = nullptr;

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 832  :     }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??$_Move_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEX$$QAV01@@Z ENDP ; std::_Ptr_base<RGYLog>::_Move_construct_from<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$shared_ptr@VRGYLog@@@std@@@std@@YA$$QAV?$shared_ptr@VRGYLog@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$shared_ptr@VRGYLog@@@std@@@std@@YA$$QAV?$shared_ptr@VRGYLog@@@0@AAV10@@Z PROC ; std::move<std::shared_ptr<RGYLog> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$shared_ptr@VRGYLog@@@std@@@std@@YA$$QAV?$shared_ptr@VRGYLog@@@0@AAV10@@Z ENDP ; std::move<std::shared_ptr<RGYLog> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$_Construct_from_weak@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAE_NABV?$weak_ptr@VRGYLog@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??$_Construct_from_weak@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAE_NABV?$weak_ptr@VRGYLog@@@1@@Z PROC ; std::_Ptr_base<RGYLog>::_Construct_from_weak<RGYLog>, COMDAT
; _this$ = ecx

; 870  :     bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         // implement shared_ptr's ctor from weak_ptr, and weak_ptr::lock()
; 872  :         if (_Other._Rep && _Other._Rep->_Incref_nz()) {

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	74 2c		 je	 SHORT $LN2@Construct_
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	e8 00 00 00 00	 call	 ?_Incref_nz@_Ref_count_base@std@@QAE_NXZ ; std::_Ref_count_base::_Incref_nz
  00022	0f b6 d0	 movzx	 edx, al
  00025	85 d2		 test	 edx, edx
  00027	74 1a		 je	 SHORT $LN2@Construct_

; 873  :             _Ptr = _Other._Ptr;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	89 10		 mov	 DWORD PTR [eax], edx

; 874  :             _Rep = _Other._Rep;

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  00039	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 875  :             return true;

  0003f	b0 01		 mov	 al, 1
  00041	eb 02		 jmp	 SHORT $LN1@Construct_
$LN2@Construct_:

; 876  :         }
; 877  : 
; 878  :         return false;

  00043	32 c0		 xor	 al, al
$LN1@Construct_:

; 879  :     }

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??$_Construct_from_weak@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAE_NABV?$weak_ptr@VRGYLog@@@1@@Z ENDP ; std::_Ptr_base<RGYLog>::_Construct_from_weak<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0VRGYLog@@$0A@@?$weak_ptr@VRGYLog@@@std@@QAE@ABV?$shared_ptr@VRGYLog@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??$?0VRGYLog@@$0A@@?$weak_ptr@VRGYLog@@@std@@QAE@ABV?$shared_ptr@VRGYLog@@@1@@Z PROC ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog><RGYLog,0>, COMDAT
; _this$ = ecx

; 1627 :     weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept { // construct weak_ptr object for resource owned by _Other

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>

; 1628 :         this->_Weakly_construct_from(_Other);

  00016	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??$_Weakly_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEXABV01@@Z ; std::_Ptr_base<RGYLog>::_Weakly_construct_from<RGYLog>

; 1629 :     }

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??$?0VRGYLog@@$0A@@?$weak_ptr@VRGYLog@@@std@@QAE@ABV?$shared_ptr@VRGYLog@@@1@@Z ENDP ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog><RGYLog,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z
_TEXT	SEGMENT
tv72 = -32						; size = 4
tv73 = -28						; size = 4
$T2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z PROC ; std::weak_ptr<RGYLog>::operator=<RGYLog>, COMDAT
; _this$ = ecx

; 1673 :     weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept { // assign from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1674 :         weak_ptr(_Right).swap(*this);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	51		 push	 ecx
  00044	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00047	e8 00 00 00 00	 call	 ??$?0VRGYLog@@$0A@@?$weak_ptr@VRGYLog@@@std@@QAE@ABV?$shared_ptr@VRGYLog@@@1@@Z ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog><RGYLog,0>
  0004c	89 45 e4	 mov	 DWORD PTR tv73[ebp], eax
  0004f	8b 55 e4	 mov	 edx, DWORD PTR tv73[ebp]
  00052	89 55 e0	 mov	 DWORD PTR tv72[ebp], edx
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	8b 4d e0	 mov	 ecx, DWORD PTR tv72[ebp]
  0005f	e8 00 00 00 00	 call	 ?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z ; std::weak_ptr<RGYLog>::swap
  00064	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006b	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006e	e8 00 00 00 00	 call	 ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>

; 1675 :         return *this;

  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 1676 :     }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	83 c4 20	 add	 esp, 32			; 00000020H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>
__ehhandler$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z ENDP ; std::weak_ptr<RGYLog>::operator=<RGYLog>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ PROC ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>, COMDAT
; _this$ = ecx

; 1204 :     _NODISCARD _Ty2* operator->() const noexcept { // return pointer to resource

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1205 :         return get();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get

; 1206 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ ENDP ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??B?$shared_ptr@VRGYLog@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
??B?$shared_ptr@VRGYLog@@@std@@QBE_NXZ PROC		; std::shared_ptr<RGYLog>::operator bool, COMDAT
; _this$ = ecx

; 1218 :     explicit operator bool() const noexcept { // test if shared_ptr object owns a resource

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1219 :         return get() != nullptr;

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ ; std::_Ptr_base<RGYLog>::get
  0001f	85 c0		 test	 eax, eax
  00021	74 09		 je	 SHORT $LN3@operator
  00023	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0002a	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@operator:
  00033	8a 45 f8	 mov	 al, BYTE PTR tv71[ebp]

; 1220 :     }

  00036	83 c4 08	 add	 esp, 8
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??B?$shared_ptr@VRGYLog@@@std@@QBE_NXZ ENDP		; std::shared_ptr<RGYLog>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ PROC		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>, COMDAT
; _this$ = ecx

; 1132 :     ~shared_ptr() noexcept { // release resource

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1133 :         this->_Decref();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ ; std::_Ptr_base<RGYLog>::_Decref

; 1134 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ENDP		; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$shared_ptr@VRGYLog@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$shared_ptr@VRGYLog@@@std@@QAE@$$QAV01@@Z PROC	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>, COMDAT
; _this$ = ecx

; 1088 :     shared_ptr(shared_ptr&& _Right) noexcept { // construct shared_ptr object that takes resource from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>

; 1089 :         this->_Move_construct_from(_STD move(_Right));

  00016	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??$move@AAV?$shared_ptr@VRGYLog@@@std@@@std@@YA$$QAV?$shared_ptr@VRGYLog@@@0@AAV10@@Z ; std::move<std::shared_ptr<RGYLog> &>
  0001f	83 c4 04	 add	 esp, 4
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??$_Move_construct_from@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAEX$$QAV01@@Z ; std::_Ptr_base<RGYLog>::_Move_construct_from<RGYLog>

; 1090 :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
??0?$shared_ptr@VRGYLog@@@std@@QAE@$$QAV01@@Z ENDP	; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$shared_ptr@VRGYLog@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$shared_ptr@VRGYLog@@@std@@QAE@XZ PROC		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>, COMDAT
; _this$ = ecx

; 1016 :     constexpr shared_ptr() noexcept {} // construct empty shared_ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$shared_ptr@VRGYLog@@@std@@QAE@XZ ENDP		; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
_TEXT	SEGMENT
tv147 = -4180						; size = 4
tv65 = -4176						; size = 4
tv95 = -4172						; size = 4
$T2 = -4168						; size = 28
_mes$3 = -4136						; size = 4096
_qsv_log_level$4 = -36					; size = 4
_pQSVLog$5 = -28					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ptr$ = 8						; size = 4
_level$ = 12						; size = 4
_fmt$ = 16						; size = 4
_vl$ = 20						; size = 4
?av_qsv_log_callback@@YAXPAXHPBDPAD@Z PROC		; av_qsv_log_callback

; 40   : static void av_qsv_log_callback(void *ptr, int level, const char *fmt, va_list vl) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 48 10 00 00	 mov	 eax, 4168		; 00001048H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd ac ef ff
	ff		 lea	 edi, DWORD PTR [ebp-4180]
  00023	b9 12 04 00 00	 mov	 ecx, 1042		; 00000412H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 41   :     if (auto pQSVLog = g_pQSVLog.lock()) {

  00043	8d 45 e4	 lea	 eax, DWORD PTR _pQSVLog$5[ebp]
  00046	50		 push	 eax
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A
  0004c	e8 00 00 00 00	 call	 ?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ ; std::weak_ptr<RGYLog>::lock
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  0005b	e8 00 00 00 00	 call	 ??B?$shared_ptr@VRGYLog@@@std@@QBE_NXZ ; std::shared_ptr<RGYLog>::operator bool
  00060	0f b6 c8	 movzx	 ecx, al
  00063	85 c9		 test	 ecx, ecx
  00065	0f 84 e6 00 00
	00		 je	 $LN2@av_qsv_log

; 42   :         const int qsv_log_level = log_level_av2rgy(level);

  0006b	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?log_level_av2rgy@@YAHH@Z ; log_level_av2rgy
  00074	83 c4 04	 add	 esp, 4
  00077	89 45 dc	 mov	 DWORD PTR _qsv_log_level$4[ebp], eax

; 43   :         if (qsv_log_level >= pQSVLog->getLogLevel() && pQSVLog->logFileAvail()) {

  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  0007d	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 ?getLogLevel@RGYLog@@QAEHXZ ; RGYLog::getLogLevel
  00089	39 45 dc	 cmp	 DWORD PTR _qsv_log_level$4[ebp], eax
  0008c	0f 8c bf 00 00
	00		 jl	 $LN2@av_qsv_log
  00092	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  00095	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?logFileAvail@RGYLog@@QAE_NXZ ; RGYLog::logFileAvail
  000a1	0f b6 c0	 movzx	 eax, al
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 a5 00 00
	00		 je	 $LN2@av_qsv_log

; 44   :             char mes[4096];
; 45   :             av_log_format_line(ptr, level, fmt, vl, mes, sizeof(mes), &print_prefix);

  000ac	68 00 00 00 00	 push	 OFFSET ?print_prefix@@3HA
  000b1	68 00 10 00 00	 push	 4096			; 00001000H
  000b6	8d 8d d8 ef ff
	ff		 lea	 ecx, DWORD PTR _mes$3[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 14	 mov	 edx, DWORD PTR _vl$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 10	 mov	 eax, DWORD PTR _fmt$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 08	 mov	 edx, DWORD PTR _ptr$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 _av_log_format_line
  000d2	83 c4 1c	 add	 esp, 28			; 0000001cH

; 46   :             pQSVLog->write_log(qsv_log_level, char_to_tstring(mes, CP_UTF8).c_str(), true);

  000d5	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  000d8	e8 00 00 00 00	 call	 ??$?CVRGYLog@@$0A@@?$shared_ptr@VRGYLog@@@std@@QBEPAVRGYLog@@XZ ; std::shared_ptr<RGYLog>::operator-><RGYLog,0>
  000dd	89 85 b4 ef ff
	ff		 mov	 DWORD PTR tv95[ebp], eax
  000e3	8b f4		 mov	 esi, esp
  000e5	6a 01		 push	 1
  000e7	68 e9 fd 00 00	 push	 65001			; 0000fde9H
  000ec	8d 85 d8 ef ff
	ff		 lea	 eax, DWORD PTR _mes$3[ebp]
  000f2	50		 push	 eax
  000f3	8d 8d b8 ef ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000f9	51		 push	 ecx
  000fa	e8 00 00 00 00	 call	 ?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00102	89 85 b0 ef ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00108	8b 95 b0 ef ff
	ff		 mov	 edx, DWORD PTR tv65[ebp]
  0010e	89 95 ac ef ff
	ff		 mov	 DWORD PTR tv147[ebp], edx
  00114	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00118	8b 8d ac ef ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  0011e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00123	50		 push	 eax
  00124	8b 45 dc	 mov	 eax, DWORD PTR _qsv_log_level$4[ebp]
  00127	50		 push	 eax
  00128	8b 8d b4 ef ff
	ff		 mov	 ecx, DWORD PTR tv95[ebp]
  0012e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00130	8b 8d b4 ef ff
	ff		 mov	 ecx, DWORD PTR tv95[ebp]
  00136	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00139	ff d0		 call	 eax
  0013b	3b f4		 cmp	 esi, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00146	8d 8d b8 ef ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0014c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN2@av_qsv_log:

; 47   :         }
; 48   :     }

  00151	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00158	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  0015b	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>

; 49   :     av_log_default_callback(ptr, level, fmt, vl);

  00160	8b 4d 14	 mov	 ecx, DWORD PTR _vl$[ebp]
  00163	51		 push	 ecx
  00164	8b 55 10	 mov	 edx, DWORD PTR _fmt$[ebp]
  00167	52		 push	 edx
  00168	8b 45 0c	 mov	 eax, DWORD PTR _level$[ebp]
  0016b	50		 push	 eax
  0016c	8b 4d 08	 mov	 ecx, DWORD PTR _ptr$[ebp]
  0016f	51		 push	 ecx
  00170	e8 00 00 00 00	 call	 _av_log_default_callback
  00175	83 c4 10	 add	 esp, 16			; 00000010H

; 50   : }

  00178	52		 push	 edx
  00179	8b cd		 mov	 ecx, ebp
  0017b	50		 push	 eax
  0017c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@av_qsv_log
  00182	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00187	58		 pop	 eax
  00188	5a		 pop	 edx
  00189	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00193	59		 pop	 ecx
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00199	33 cd		 xor	 ecx, ebp
  0019b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a0	81 c4 54 10 00
	00		 add	 esp, 4180		; 00001054H
  001a6	3b ec		 cmp	 ebp, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
  001b1	0f 1f 00	 npad	 3
$LN11@av_qsv_log:
  001b4	02 00 00 00	 DD	 2
  001b8	00 00 00 00	 DD	 $LN10@av_qsv_log
$LN10@av_qsv_log:
  001bc	e4 ff ff ff	 DD	 -28			; ffffffe4H
  001c0	08 00 00 00	 DD	 8
  001c4	00 00 00 00	 DD	 $LN7@av_qsv_log
  001c8	d8 ef ff ff	 DD	 -4136			; ffffefd8H
  001cc	00 10 00 00	 DD	 4096			; 00001000H
  001d0	00 00 00 00	 DD	 $LN8@av_qsv_log
$LN8@av_qsv_log:
  001d4	6d		 DB	 109			; 0000006dH
  001d5	65		 DB	 101			; 00000065H
  001d6	73		 DB	 115			; 00000073H
  001d7	00		 DB	 0
$LN7@av_qsv_log:
  001d8	70		 DB	 112			; 00000070H
  001d9	51		 DB	 81			; 00000051H
  001da	53		 DB	 83			; 00000053H
  001db	56		 DB	 86			; 00000056H
  001dc	4c		 DB	 76			; 0000004cH
  001dd	6f		 DB	 111			; 0000006fH
  001de	67		 DB	 103			; 00000067H
  001df	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _pQSVLog$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
__unwindfunclet$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z$1:
  00008	8d 8d b8 ef ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a ac ef ff
	ff		 mov	 ecx, DWORD PTR [edx-4180]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?av_qsv_log_callback@@YAXPAXHPBDPAD@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?av_qsv_log_callback@@YAXPAXHPBDPAD@Z ENDP		; av_qsv_log_callback
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
;	COMDAT ??__Eg_bSetCustomLog@@YAXXZ
text$di	SEGMENT
??__Eg_bSetCustomLog@@YAXXZ PROC			; `dynamic initializer for 'g_bSetCustomLog'', COMDAT

; 38   : static std::atomic<bool> g_bSetCustomLog(false);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_bSetCustomLog@@3U?$atomic@_N@std@@A
  0000a	e8 00 00 00 00	 call	 ??0?$atomic@_N@std@@QAE@_N@Z
  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??__Eg_bSetCustomLog@@YAXXZ ENDP			; `dynamic initializer for 'g_bSetCustomLog''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$atomic@_N@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___param0$ = 8						; size = 1
??0?$atomic@_N@std@@QAE@_N@Z PROC			; std::atomic<bool>::atomic<bool>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	0f b6 45 08	 movzx	 eax, BYTE PTR ___param0$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0?$_Atomic_storage@_N$00@std@@QAE@_N@Z ; std::_Atomic_storage<bool,1>::_Atomic_storage<bool,1>
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0?$atomic@_N@std@@QAE@_N@Z ENDP			; std::atomic<bool>::atomic<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??B?$atomic@_N@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$atomic@_N@std@@QBE_NXZ PROC			; std::atomic<bool>::operator bool, COMDAT
; _this$ = ecx

; 1595 :     operator _Ty() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1596 :         return this->load();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?load@?$_Atomic_storage@_N$00@std@@QBE_NXZ ; std::_Atomic_storage<bool,1>::load

; 1597 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??B?$atomic@_N@std@@QBE_NXZ ENDP			; std::atomic<bool>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??4?$atomic@_N@std@@QAE_N_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 1
??4?$atomic@_N@std@@QAE_N_N@Z PROC			; std::atomic<bool>::operator=, COMDAT
; _this$ = ecx

; 1508 :     _Ty operator=(const _Ty _Value) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1509 :         this->store(_Value);

  0000e	0f b6 45 08	 movzx	 eax, BYTE PTR __Value$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?store@?$_Atomic_storage@_N$00@std@@QAEX_N@Z ; std::_Atomic_storage<bool,1>::store

; 1510 :         return _Value;

  0001b	8a 45 08	 mov	 al, BYTE PTR __Value$[ebp]

; 1511 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??4?$atomic@_N@std@@QAE_N_N@Z ENDP			; std::atomic<bool>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?load@?$_Atomic_storage@_N$00@std@@QBE_NXZ
_TEXT	SEGMENT
__As_bytes$ = -5					; size = 1
_this$ = -4						; size = 4
?load@?$_Atomic_storage@_N$00@std@@QBE_NXZ PROC		; std::_Atomic_storage<bool,1>::load, COMDAT
; _this$ = ecx

; 428  :     _NODISCARD _Ty load() const noexcept { // load with sequential consistency

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 429  :         char _As_bytes = _ISO_VOLATILE_LOAD8(_Storage);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Atomic_address_as@$$CBD$$CBU?$_Atomic_padded@_N@std@@@std@@YAPDDABU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char const ,std::_Atomic_padded<bool> const >
  00020	83 c4 04	 add	 esp, 4
  00023	8a 08		 mov	 cl, BYTE PTR [eax]
  00025	88 4d fb	 mov	 BYTE PTR __As_bytes$[ebp], cl

; 430  :         _Compiler_or_memory_barrier();
; 431  :         return reinterpret_cast<_Ty&>(_As_bytes);

  00028	8a 45 fb	 mov	 al, BYTE PTR __As_bytes$[ebp]

; 432  :     }

  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?load@?$_Atomic_storage@_N$00@std@@QBE_NXZ ENDP		; std::_Atomic_storage<bool,1>::load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ?store@?$_Atomic_storage@_N$00@std@@QAEX_N@Z
_TEXT	SEGMENT
__As_bytes$ = -9					; size = 1
__Mem$ = -8						; size = 4
_this$ = -4						; size = 4
__Value$ = 8						; size = 1
?store@?$_Atomic_storage@_N$00@std@@QAEX_N@Z PROC	; std::_Atomic_storage<bool,1>::store, COMDAT
; _this$ = ecx

; 394  :     void store(const _Ty _Value) noexcept { // store with sequential consistency

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 395  :         const auto _Mem      = _Atomic_address_as<char>(_Storage);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPCDAAU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 f8	 mov	 DWORD PTR __Mem$[ebp], eax

; 396  :         const char _As_bytes = _Atomic_reinterpret_as<char>(_Value);

  0002d	8d 4d 08	 lea	 ecx, DWORD PTR __Value$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ??$_Atomic_reinterpret_as@D_N@std@@YADAB_N@Z ; std::_Atomic_reinterpret_as<char,bool>
  00036	83 c4 04	 add	 esp, 4
  00039	88 45 f7	 mov	 BYTE PTR __As_bytes$[ebp], al

; 397  : #if defined(_M_ARM) || defined(_M_ARM64)
; 398  :         _Memory_barrier();
; 399  :         __iso_volatile_store8(_Mem, _As_bytes);
; 400  :         _Memory_barrier();
; 401  : #else // ^^^ ARM32/ARM64 hardware / x86/x64 hardware vvv
; 402  :         (void) _InterlockedExchange8(_Mem, _As_bytes);

  0003c	8a 55 f7	 mov	 dl, BYTE PTR __As_bytes$[ebp]
  0003f	8b 45 f8	 mov	 eax, DWORD PTR __Mem$[ebp]
  00042	86 10		 xchg	 BYTE PTR [eax], dl

; 403  : #endif // hardware
; 404  :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?store@?$_Atomic_storage@_N$00@std@@QAEX_N@Z ENDP	; std::_Atomic_storage<bool,1>::store
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\atomic
;	COMDAT ??0?$_Atomic_storage@_N$00@std@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 1
??0?$_Atomic_storage@_N$00@std@@QAE@_N@Z PROC		; std::_Atomic_storage<bool,1>::_Atomic_storage<bool,1>, COMDAT
; _this$ = ecx

; 390  :     /* implicit */ constexpr _Atomic_storage(const _Ty _Value) noexcept : _Storage{_Value} {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 4d 08	 mov	 cl, BYTE PTR __Value$[ebp]
  00014	88 08		 mov	 BYTE PTR [eax], cl

; 391  :         // non-atomically initialize this atomic
; 392  :     }

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0?$_Atomic_storage@_N$00@std@@QAE@_N@Z ENDP		; std::_Atomic_storage<bool,1>::_Atomic_storage<bool,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Fg_pQSVLog@@YAXXZ
text$yd	SEGMENT
??__Fg_pQSVLog@@YAXXZ PROC				; `dynamic atexit destructor for 'g_pQSVLog'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A
  00008	e8 00 00 00 00	 call	 ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__Fg_pQSVLog@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_pQSVLog''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
;	COMDAT ??__Eg_pQSVLog@@YAXXZ
text$di	SEGMENT
??__Eg_pQSVLog@@YAXXZ PROC				; `dynamic initializer for 'g_pQSVLog'', COMDAT

; 36   : static std::weak_ptr<RGYLog> g_pQSVLog;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A
  00008	e8 00 00 00 00	 call	 ??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog>
  0000d	68 00 00 00 00	 push	 OFFSET ??__Fg_pQSVLog@@YAXXZ ; `dynamic atexit destructor for 'g_pQSVLog''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??__Eg_pQSVLog@@YAXXZ ENDP				; `dynamic initializer for 'g_pQSVLog''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Ret$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ PROC ; std::weak_ptr<RGYLog>::lock, COMDAT
; _this$ = ecx

; 1690 :     _NODISCARD shared_ptr<_Ty> lock() const noexcept { // convert to shared_ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1691 :         shared_ptr<_Ty> _Ret;

  00046	8d 4d e4	 lea	 ecx, DWORD PTR __Ret$[ebp]
  00049	e8 00 00 00 00	 call	 ??0?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
  0004e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1692 :         (void) _Ret._Construct_from_weak(*this);

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	50		 push	 eax
  00059	8d 4d e4	 lea	 ecx, DWORD PTR __Ret$[ebp]
  0005c	e8 00 00 00 00	 call	 ??$_Construct_from_weak@VRGYLog@@@?$_Ptr_base@VRGYLog@@@std@@IAE_NABV?$weak_ptr@VRGYLog@@@1@@Z ; std::_Ptr_base<RGYLog>::_Construct_from_weak<RGYLog>

; 1693 :         return _Ret;

  00061	8d 4d e4	 lea	 ecx, DWORD PTR __Ret$[ebp]
  00064	51		 push	 ecx
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$shared_ptr@VRGYLog@@@std@@QAE@$$QAV01@@Z ; std::shared_ptr<RGYLog>::shared_ptr<RGYLog>
  0006d	8b 55 dc	 mov	 edx, DWORD PTR $T2[ebp]
  00070	83 ca 01	 or	 edx, 1
  00073	89 55 dc	 mov	 DWORD PTR $T2[ebp], edx
  00076	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007a	8d 4d e4	 lea	 ecx, DWORD PTR __Ret$[ebp]
  0007d	e8 00 00 00 00	 call	 ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
  00082	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1694 :     }

  00085	52		 push	 edx
  00086	8b cd		 mov	 ecx, ebp
  00088	50		 push	 eax
  00089	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@lock
  0008f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00094	58		 pop	 eax
  00095	5a		 pop	 edx
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	83 c4 24	 add	 esp, 36			; 00000024H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
  000b1	0f 1f 00	 npad	 3
$LN9@lock:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN8@lock
$LN8@lock:
  000bc	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c0	08 00 00 00	 DD	 8
  000c4	00 00 00 00	 DD	 $LN6@lock
$LN6@lock:
  000c8	5f		 DB	 95			; 0000005fH
  000c9	52		 DB	 82			; 00000052H
  000ca	65		 DB	 101			; 00000065H
  000cb	74		 DB	 116			; 00000074H
  000cc	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Ret$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
__unwindfunclet$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ$1:
  00008	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@lock
  00014	83 65 dc fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$shared_ptr@VRGYLog@@@std@@QAE@XZ ; std::shared_ptr<RGYLog>::~shared_ptr<RGYLog>
$LN5@lock:
  00020	c3		 ret	 0
__ehhandler$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lock@?$weak_ptr@VRGYLog@@@std@@QBE?AV?$shared_ptr@VRGYLog@@@2@XZ ENDP ; std::weak_ptr<RGYLog>::lock
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z PROC	; std::weak_ptr<RGYLog>::swap, COMDAT
; _this$ = ecx

; 1682 :     void swap(weak_ptr& _Other) noexcept { // swap pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1683 :         this->_Swap(_Other);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IAEXAAV12@@Z ; std::_Ptr_base<RGYLog>::_Swap

; 1684 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z ENDP	; std::weak_ptr<RGYLog>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
tv72 = -28						; size = 4
$T2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ PROC		; std::weak_ptr<RGYLog>::reset, COMDAT
; _this$ = ecx

; 1678 :     void reset() noexcept { // release resource, convert to null weak_ptr object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1679 :         weak_ptr().swap(*this);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	50		 push	 eax
  00040	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::weak_ptr<RGYLog>
  00048	89 45 e4	 mov	 DWORD PTR tv72[ebp], eax
  0004b	8b 4d e4	 mov	 ecx, DWORD PTR tv72[ebp]
  0004e	89 4d e0	 mov	 DWORD PTR tv71[ebp], ecx
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	8b 4d e0	 mov	 ecx, DWORD PTR tv71[ebp]
  0005b	e8 00 00 00 00	 call	 ?swap@?$weak_ptr@VRGYLog@@@std@@QAEXAAV12@@Z ; std::weak_ptr<RGYLog>::swap
  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>

; 1680 :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	83 c4 20	 add	 esp, 32			; 00000020H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>
__ehhandler$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ ENDP		; std::weak_ptr<RGYLog>::reset
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ PROC		; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>, COMDAT
; _this$ = ecx

; 1646 :     ~weak_ptr() noexcept { // release resource

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1647 :         this->_Decwref();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Decwref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ ; std::_Ptr_base<RGYLog>::_Decwref

; 1648 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$weak_ptr@VRGYLog@@@std@@QAE@XZ ENDP		; std::weak_ptr<RGYLog>::~weak_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ PROC		; std::weak_ptr<RGYLog>::weak_ptr<RGYLog>, COMDAT
; _this$ = ecx

; 1620 :     constexpr weak_ptr() noexcept {} // construct empty weak_ptr object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ ; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$weak_ptr@VRGYLog@@@std@@QAE@XZ ENDP		; std::weak_ptr<RGYLog>::weak_ptr<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decwref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decwref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ PROC	; std::_Ptr_base<RGYLog>::_Decwref, COMDAT
; _this$ = ecx

; 903  :     void _Decwref() noexcept { // decrement weak reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 904  :         if (_Rep) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	74 0b		 je	 SHORT $LN1@Decwref

; 905  :             _Rep->_Decwref();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	e8 00 00 00 00	 call	 ?_Decwref@_Ref_count_base@std@@QAEXXZ ; std::_Ref_count_base::_Decwref
$LN1@Decwref:

; 906  :         }
; 907  :     }

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Decwref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ ENDP	; std::_Ptr_base<RGYLog>::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Swap@?$_Ptr_base@VRGYLog@@@std@@IAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IAEXAAV12@@Z PROC	; std::_Ptr_base<RGYLog>::_Swap, COMDAT
; _this$ = ecx

; 887  :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 888  :         _STD swap(_Ptr, _Right._Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$swap@PAVRGYLog@@X@std@@YAXAAPAVRGYLog@@0@Z ; std::swap<RGYLog *,void>
  0001b	83 c4 08	 add	 esp, 8

; 889  :         _STD swap(_Rep, _Right._Rep);

  0001e	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00021	83 c2 04	 add	 edx, 4
  00024	52		 push	 edx
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	83 c0 04	 add	 eax, 4
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$swap@PAV_Ref_count_base@std@@X@std@@YAXAAPAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,void>
  00031	83 c4 08	 add	 esp, 8

; 890  :     }

  00034	83 c4 04	 add	 esp, 4
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?_Swap@?$_Ptr_base@VRGYLog@@@std@@IAEXAAV12@@Z ENDP	; std::_Ptr_base<RGYLog>::_Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ PROC		; std::_Ptr_base<RGYLog>::_Decref, COMDAT
; _this$ = ecx

; 881  :     void _Decref() noexcept { // decrement reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 882  :         if (_Rep) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00015	74 0b		 je	 SHORT $LN1@Decref

; 883  :             _Rep->_Decref();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	e8 00 00 00 00	 call	 ?_Decref@_Ref_count_base@std@@QAEXXZ ; std::_Ref_count_base::_Decref
$LN1@Decref:

; 884  :         }
; 885  :     }

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Decref@?$_Ptr_base@VRGYLog@@@std@@IAEXXZ ENDP		; std::_Ptr_base<RGYLog>::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
;	COMDAT ??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ PROC		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory

; 910  :     element_type* _Ptr{nullptr};

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 911  :     _Ref_count_base* _Rep{nullptr};

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0?$_Ptr_base@VRGYLog@@@std@@IAE@XZ ENDP		; std::_Ptr_base<RGYLog>::_Ptr_base<RGYLog>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ PROC	; std::_Ptr_base<RGYLog>::get, COMDAT
; _this$ = ecx

; 816  :     _NODISCARD element_type* get() const noexcept { // return pointer to resource

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 817  :         return _Ptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 818  :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?get@?$_Ptr_base@VRGYLog@@@std@@IBEPAVRGYLog@@XZ ENDP	; std::_Ptr_base<RGYLog>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
_TEXT	SEGMENT
?av_qsv_log_free@@YAXXZ PROC				; av_qsv_log_free

; 58   : void av_qsv_log_free() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   :     if (g_bSetCustomLog) {

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_bSetCustomLog@@3U?$atomic@_N@std@@A
  00008	e8 00 00 00 00	 call	 ??B?$atomic@_N@std@@QBE_NXZ ; std::atomic<bool>::operator bool
  0000d	0f b6 c0	 movzx	 eax, al
  00010	85 c0		 test	 eax, eax
  00012	74 23		 je	 SHORT $LN1@av_qsv_log

; 60   :         g_bSetCustomLog = false;

  00014	6a 00		 push	 0
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_bSetCustomLog@@3U?$atomic@_N@std@@A
  0001b	e8 00 00 00 00	 call	 ??4?$atomic@_N@std@@QAE_N_N@Z ; std::atomic<bool>::operator=

; 61   :         av_log_set_callback(av_log_default_callback);

  00020	68 00 00 00 00	 push	 OFFSET _av_log_default_callback
  00025	e8 00 00 00 00	 call	 _av_log_set_callback
  0002a	83 c4 04	 add	 esp, 4

; 62   :         g_pQSVLog.reset();

  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A
  00032	e8 00 00 00 00	 call	 ?reset@?$weak_ptr@VRGYLog@@@std@@QAEXXZ ; std::weak_ptr<RGYLog>::reset
$LN1@av_qsv_log:

; 63   :     }
; 64   : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?av_qsv_log_free@@YAXXZ ENDP				; av_qsv_log_free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
_TEXT	SEGMENT
_pQSVLog$ = 8						; size = 4
?av_qsv_log_set@@YAXAAV?$shared_ptr@VRGYLog@@@std@@@Z PROC ; av_qsv_log_set

; 52   : void av_qsv_log_set(std::shared_ptr<RGYLog>& pQSVLog) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 53   :     g_pQSVLog = pQSVLog;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pQSVLog$[ebp]
  00006	50		 push	 eax
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_pQSVLog@@3V?$weak_ptr@VRGYLog@@@std@@A
  0000c	e8 00 00 00 00	 call	 ??$?4VRGYLog@@@?$weak_ptr@VRGYLog@@@std@@QAEAAV01@ABV?$shared_ptr@VRGYLog@@@1@@Z ; std::weak_ptr<RGYLog>::operator=<RGYLog>

; 54   :     g_bSetCustomLog = true;

  00011	6a 01		 push	 1
  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_bSetCustomLog@@3U?$atomic@_N@std@@A
  00018	e8 00 00 00 00	 call	 ??4?$atomic@_N@std@@QAE_N_N@Z ; std::atomic<bool>::operator=

; 55   :     av_log_set_callback(av_qsv_log_callback);

  0001d	68 00 00 00 00	 push	 OFFSET ?av_qsv_log_callback@@YAXPAXHPBDPAD@Z ; av_qsv_log_callback
  00022	e8 00 00 00 00	 call	 _av_log_set_callback
  00027	83 c4 04	 add	 esp, 4

; 56   : }

  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?av_qsv_log_set@@YAXAAV?$shared_ptr@VRGYLog@@@std@@@Z ENDP ; av_qsv_log_set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avutil.h
_TEXT	SEGMENT
tv73 = -8						; size = 4
tv72 = -4						; size = 4
_level$ = 8						; size = 4
?log_level_av2rgy@@YAHH@Z PROC				; log_level_av2rgy

; 142  : static inline int log_level_av2rgy(int level) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 143  :     return clamp((AV_LOG_INFO / 8) - (level / 8), RGY_LOG_TRACE, RGY_LOG_ERROR);

  00014	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00017	99		 cdq
  00018	83 e2 07	 and	 edx, 7
  0001b	03 c2		 add	 eax, edx
  0001d	c1 f8 03	 sar	 eax, 3
  00020	b9 04 00 00 00	 mov	 ecx, 4
  00025	2b c8		 sub	 ecx, eax
  00027	83 f9 02	 cmp	 ecx, 2
  0002a	7f 3f		 jg	 SHORT $LN5@log_level_
  0002c	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  0002f	99		 cdq
  00030	83 e2 07	 and	 edx, 7
  00033	03 c2		 add	 eax, edx
  00035	c1 f8 03	 sar	 eax, 3
  00038	ba 04 00 00 00	 mov	 edx, 4
  0003d	2b d0		 sub	 edx, eax
  0003f	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00042	7c 18		 jl	 SHORT $LN3@log_level_
  00044	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00047	99		 cdq
  00048	83 e2 07	 and	 edx, 7
  0004b	03 c2		 add	 eax, edx
  0004d	c1 f8 03	 sar	 eax, 3
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	2b c8		 sub	 ecx, eax
  00057	89 4d fc	 mov	 DWORD PTR tv72[ebp], ecx
  0005a	eb 07		 jmp	 SHORT $LN4@log_level_
$LN3@log_level_:
  0005c	c7 45 fc fd ff
	ff ff		 mov	 DWORD PTR tv72[ebp], -3	; fffffffdH
$LN4@log_level_:
  00063	8b 55 fc	 mov	 edx, DWORD PTR tv72[ebp]
  00066	89 55 f8	 mov	 DWORD PTR tv73[ebp], edx
  00069	eb 07		 jmp	 SHORT $LN6@log_level_
$LN5@log_level_:
  0006b	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR tv73[ebp], 2
$LN6@log_level_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 144  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?log_level_av2rgy@@YAHH@Z ENDP				; log_level_av2rgy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.h
;	COMDAT ?logFileAvail@RGYLog@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?logFileAvail@RGYLog@@QAE_NXZ PROC			; RGYLog::logFileAvail, COMDAT
; _this$ = ecx

; 63   :     bool logFileAvail() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   :         return m_pStrLog != nullptr;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001e	74 09		 je	 SHORT $LN3@logFileAva
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@logFileAva
$LN3@logFileAva:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@logFileAva:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 65   :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?logFileAvail@RGYLog@@QAE_NXZ ENDP			; RGYLog::logFileAvail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_log.h
;	COMDAT ?getLogLevel@RGYLog@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLogLevel@RGYLog@@QAEHXZ PROC			; RGYLog::getLogLevel, COMDAT
; _this$ = ecx

; 55   :     int getLogLevel() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   :         return m_nLogLevel;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 57   :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?getLogLevel@RGYLog@@QAEHXZ ENDP			; RGYLog::getLogLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = -148						; size = 48
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
$T9 = -72						; size = 4
$T10 = -68						; size = 4
$T11 = -64						; size = 4
$T12 = -60						; size = 4
$T13 = -56						; size = 4
$T14 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00011	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  00027	c7 45 c8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0002e	c7 45 c4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00035	c7 45 c0 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  0003c	c7 45 bc 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00043	c7 45 b8 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0004a	c7 45 b4 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00051	c7 45 b0 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  00058	c7 45 ac 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  0005f	c7 45 a8 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  00066	c7 45 a4 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  0006d	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00074	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0007b	8d 45 c8	 lea	 eax, DWORD PTR $T13[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d c4	 lea	 ecx, DWORD PTR $T12[ebp]
  00082	51		 push	 ecx
  00083	8d 55 c0	 lea	 edx, DWORD PTR $T11[ebp]
  00086	52		 push	 edx
  00087	8d 45 bc	 lea	 eax, DWORD PTR $T10[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  0008e	51		 push	 ecx
  0008f	8d 55 b4	 lea	 edx, DWORD PTR $T8[ebp]
  00092	52		 push	 edx
  00093	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  00096	50		 push	 eax
  00097	8d 4d ac	 lea	 ecx, DWORD PTR $T6[ebp]
  0009a	51		 push	 ecx
  0009b	8d 55 a8	 lea	 edx, DWORD PTR $T5[ebp]
  0009e	52		 push	 edx
  0009f	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a6	51		 push	 ecx
  000a7	8d 55 9c	 lea	 edx, DWORD PTR $T2[ebp]
  000aa	52		 push	 edx
  000ab	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  000b7	83 c4 34	 add	 esp, 52			; 00000034H
  000ba	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000bf	8b f0		 mov	 esi, eax
  000c1	8d 7d cc	 lea	 edi, DWORD PTR $T14[ebp]
  000c4	f3 a5		 rep movsd
  000c6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000cb	8d 75 cc	 lea	 esi, DWORD PTR $T14[ebp]
  000ce	bf 00 00 00 00	 mov	 edi, OFFSET ?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  000d3	f3 a5		 rep movsd
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d cc	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 d0	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 d4	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d8	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 dc	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 e0	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d e4	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e8	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 ec	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d f0	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 f4	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f8	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00086	8d 75 cc	 lea	 esi, DWORD PTR $T1[ebp]
  00089	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0008c	f3 a5		 rep movsd
  0008e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = -184						; size = 60
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
$T9 = -96						; size = 4
$T10 = -92						; size = 4
$T11 = -88						; size = 4
$T12 = -84						; size = 4
$T13 = -80						; size = 4
$T14 = -76						; size = 4
$T15 = -72						; size = 4
$T16 = -68						; size = 4
$T17 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00011	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  00027	c7 45 bc 12 00
	00 00		 mov	 DWORD PTR $T16[ebp], 18	; 00000012H
  0002e	c7 45 b8 10 00
	00 00		 mov	 DWORD PTR $T15[ebp], 16	; 00000010H
  00035	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp], 15	; 0000000fH
  0003c	c7 45 b0 0e 00
	00 00		 mov	 DWORD PTR $T13[ebp], 14	; 0000000eH
  00043	c7 45 ac 0d 00
	00 00		 mov	 DWORD PTR $T12[ebp], 13	; 0000000dH
  0004a	c7 45 a8 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  00051	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00058	c7 45 a0 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0005f	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00066	c7 45 98 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  0006d	c7 45 94 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  00074	c7 45 90 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  0007b	c7 45 8c 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  00082	c7 45 88 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00089	c7 45 84 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00090	8d 45 bc	 lea	 eax, DWORD PTR $T16[ebp]
  00093	50		 push	 eax
  00094	8d 4d b8	 lea	 ecx, DWORD PTR $T15[ebp]
  00097	51		 push	 ecx
  00098	8d 55 b4	 lea	 edx, DWORD PTR $T14[ebp]
  0009b	52		 push	 edx
  0009c	8d 45 b0	 lea	 eax, DWORD PTR $T13[ebp]
  0009f	50		 push	 eax
  000a0	8d 4d ac	 lea	 ecx, DWORD PTR $T12[ebp]
  000a3	51		 push	 ecx
  000a4	8d 55 a8	 lea	 edx, DWORD PTR $T11[ebp]
  000a7	52		 push	 edx
  000a8	8d 45 a4	 lea	 eax, DWORD PTR $T10[ebp]
  000ab	50		 push	 eax
  000ac	8d 4d a0	 lea	 ecx, DWORD PTR $T9[ebp]
  000af	51		 push	 ecx
  000b0	8d 55 9c	 lea	 edx, DWORD PTR $T8[ebp]
  000b3	52		 push	 edx
  000b4	8d 45 98	 lea	 eax, DWORD PTR $T7[ebp]
  000b7	50		 push	 eax
  000b8	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  000bb	51		 push	 ecx
  000bc	8d 55 90	 lea	 edx, DWORD PTR $T5[ebp]
  000bf	52		 push	 edx
  000c0	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  000c3	50		 push	 eax
  000c4	8d 4d 88	 lea	 ecx, DWORD PTR $T3[ebp]
  000c7	51		 push	 ecx
  000c8	8d 55 84	 lea	 edx, DWORD PTR $T2[ebp]
  000cb	52		 push	 edx
  000cc	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  000d8	83 c4 40	 add	 esp, 64			; 00000040H
  000db	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000e0	8b f0		 mov	 esi, eax
  000e2	8d 7d c0	 lea	 edi, DWORD PTR $T17[ebp]
  000e5	f3 a5		 rep movsd
  000e7	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000ec	8d 75 c0	 lea	 esi, DWORD PTR $T17[ebp]
  000ef	bf 00 00 00 00	 mov	 edi, OFFSET ?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  000f4	f3 a5		 rep movsd
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
_<args_14>$ = 68					; size = 4
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c0	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c4	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 c8	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d cc	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d0	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d4	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d d8	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 dc	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e0	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e4	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 e8	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 ec	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f0	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f4	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	8b 4d 44	 mov	 ecx, DWORD PTR _<args_14>$[ebp]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	89 55 f8	 mov	 DWORD PTR $T1[ebp+56], edx
  00099	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0009e	8d 75 c0	 lea	 esi, DWORD PTR $T1[ebp]
  000a1	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  000a4	f3 a5		 rep movsd
  000a6	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = -172						; size = 56
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
$T13 = -72						; size = 4
$T14 = -68						; size = 4
$T15 = -64						; size = 4
$T16 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00011	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  00027	c7 45 c0 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp], 15	; 0000000fH
  0002e	c7 45 bc 0e 00
	00 00		 mov	 DWORD PTR $T14[ebp], 14	; 0000000eH
  00035	c7 45 b8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0003c	c7 45 b4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00043	c7 45 b0 0a 00
	00 00		 mov	 DWORD PTR $T11[ebp], 10	; 0000000aH
  0004a	c7 45 ac 09 00
	00 00		 mov	 DWORD PTR $T10[ebp], 9
  00051	c7 45 a8 08 00
	00 00		 mov	 DWORD PTR $T9[ebp], 8
  00058	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T8[ebp], 7
  0005f	c7 45 a0 06 00
	00 00		 mov	 DWORD PTR $T7[ebp], 6
  00066	c7 45 9c 05 00
	00 00		 mov	 DWORD PTR $T6[ebp], 5
  0006d	c7 45 98 04 00
	00 00		 mov	 DWORD PTR $T5[ebp], 4
  00074	c7 45 94 02 00
	00 00		 mov	 DWORD PTR $T4[ebp], 2
  0007b	c7 45 90 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00082	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00089	8d 45 c0	 lea	 eax, DWORD PTR $T15[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d bc	 lea	 ecx, DWORD PTR $T14[ebp]
  00090	51		 push	 ecx
  00091	8d 55 b8	 lea	 edx, DWORD PTR $T13[ebp]
  00094	52		 push	 edx
  00095	8d 45 b4	 lea	 eax, DWORD PTR $T12[ebp]
  00098	50		 push	 eax
  00099	8d 4d b0	 lea	 ecx, DWORD PTR $T11[ebp]
  0009c	51		 push	 ecx
  0009d	8d 55 ac	 lea	 edx, DWORD PTR $T10[ebp]
  000a0	52		 push	 edx
  000a1	8d 45 a8	 lea	 eax, DWORD PTR $T9[ebp]
  000a4	50		 push	 eax
  000a5	8d 4d a4	 lea	 ecx, DWORD PTR $T8[ebp]
  000a8	51		 push	 ecx
  000a9	8d 55 a0	 lea	 edx, DWORD PTR $T7[ebp]
  000ac	52		 push	 edx
  000ad	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  000b0	50		 push	 eax
  000b1	8d 4d 98	 lea	 ecx, DWORD PTR $T5[ebp]
  000b4	51		 push	 ecx
  000b5	8d 55 94	 lea	 edx, DWORD PTR $T4[ebp]
  000b8	52		 push	 edx
  000b9	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000c0	51		 push	 ecx
  000c1	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  000cd	83 c4 3c	 add	 esp, 60			; 0000003cH
  000d0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000d5	8b f0		 mov	 esi, eax
  000d7	8d 7d c4	 lea	 edi, DWORD PTR $T16[ebp]
  000da	f3 a5		 rep movsd
  000dc	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000e1	8d 75 c4	 lea	 esi, DWORD PTR $T16[ebp]
  000e4	bf 00 00 00 00	 mov	 edi, OFFSET ?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  000e9	f3 a5		 rep movsd
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  000fd	3b ec		 cmp	 ebp, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c4	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c8	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 cc	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d0	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d4	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d8	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d dc	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e0	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e4	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e8	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 ec	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f0	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f4	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f8	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00096	8d 75 c4	 lea	 esi, DWORD PTR $T1[ebp]
  00099	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0009c	f3 a5		 rep movsd
  0009e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	33 cd		 xor	 ecx, ebp
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4196 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -25						; size = 1
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4165 :         _Mypair._Myval2._Orphan_all();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 55 ec	 mov	 DWORD PTR __Ptr$4[ebp], edx

; 4168 :             auto& _Al          = _Getal();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00061	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 04	 add	 eax, 4
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00070	83 c4 04	 add	 esp, 4

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00079	83 c2 01	 add	 edx, 1
  0007c	52		 push	 edx
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  00080	50		 push	 eax
  00081	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00084	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00093	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00096	c7 42 18 0f 00
	00 00		 mov	 DWORD PTR [edx+24], 15	; 0000000fH

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	c6 45 e7 00	 mov	 BYTE PTR $T2[ebp], 0
  000a1	8d 45 e7	 lea	 eax, DWORD PTR $T2[ebp]
  000a4	50		 push	 eax
  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	6b d1 00	 imul	 edx, ecx, 0
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000ba	83 c4 08	 add	 esp, 8

; 4178 :     }

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3548 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3549 :         return _Mypair._Myval2._Myptr();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3550 :     }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -36					; size = 4
_$S9$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2597 :     ~basic_string() noexcept { // destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2598 :         _Tidy_deallocate();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S9$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005f	8d 45 e7	 lea	 eax, DWORD PTR _$S9$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	89 55 dc	 mov	 DWORD PTR __To_delete$[ebp], edx

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00076	8b 4d dc	 mov	 ecx, DWORD PTR __To_delete$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 ec	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00083	83 c4 08	 add	 esp, 8

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00095	52		 push	 edx
  00096	8b cd		 mov	 ecx, ebp
  00098	50		 push	 eax
  00099	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@basic_stri
  0009f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a4	58		 pop	 eax
  000a5	5a		 pop	 edx
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	83 c4 24	 add	 esp, 36			; 00000024H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@basic_stri:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000c8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000d4	24		 DB	 36			; 00000024H
  000d5	53		 DB	 83			; 00000053H
  000d6	39		 DB	 57			; 00000039H
  000d7	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2121 :         return _BUF_SIZE <= _Myres;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0001e	72 09		 jb	 SHORT $LN3@Large_stri
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2122 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2111 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2112 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2113 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2114 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2115 :         }
; 2116 : 
; 2117 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2118 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8

; 868  :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 377  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 378  :         _Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl

; 379  :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@$$CBJ$$CCJ@std@@YAPDJACJ@Z
_TEXT	SEGMENT
__Source$ = 8						; size = 4
??$_Atomic_address_as@$$CBJ$$CCJ@std@@YAPDJACJ@Z PROC	; std::_Atomic_address_as<long const ,long volatile >, COMDAT

; 68   : _NODISCARD volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 70   :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 71   :     return &reinterpret_cast<volatile _Integral&>(_Source);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Source$[ebp]

; 72   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Atomic_address_as@$$CBJ$$CCJ@std@@YAPDJACJ@Z ENDP	; std::_Atomic_address_as<long const ,long volatile >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decwref@_Ref_count_base@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decwref@_Ref_count_base@std@@QAEXXZ PROC		; std::_Ref_count_base::_Decwref, COMDAT
; _this$ = ecx

; 657  :     void _Decwref() noexcept { // decrement weak reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 658  :         if (_MT_DECR(_Weaks) == 0) {

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 08	 add	 eax, 8
  00015	83 c9 ff	 or	 ecx, -1
  00018	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0001c	49		 dec	 ecx
  0001d	75 16		 jne	 SHORT $LN1@Decwref

; 659  :             _Delete_this();

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8b f4		 mov	 esi, esp
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002c	ff d2		 call	 edx
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Decwref:

; 660  :         }
; 661  :     }

  00035	5e		 pop	 esi
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?_Decwref@_Ref_count_base@std@@QAEXXZ ENDP		; std::_Ref_count_base::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Decref@_Ref_count_base@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@_Ref_count_base@std@@QAEXXZ PROC		; std::_Ref_count_base::_Decref, COMDAT
; _this$ = ecx

; 650  :     void _Decref() noexcept { // decrement use count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 651  :         if (_MT_DECR(_Uses) == 0) {

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	83 c9 ff	 or	 ecx, -1
  00018	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0001c	49		 dec	 ecx
  0001d	75 1d		 jne	 SHORT $LN1@Decref

; 652  :             _Destroy();

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8b f4		 mov	 esi, esp
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	ff d2		 call	 edx
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 653  :             _Decwref();

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Decwref@_Ref_count_base@std@@QAEXXZ ; std::_Ref_count_base::_Decwref
$LN1@Decref:

; 654  :         }
; 655  :     }

  0003c	5e		 pop	 esi
  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?_Decref@_Ref_count_base@std@@QAEXXZ ENDP		; std::_Ref_count_base::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Incwref@_Ref_count_base@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Incwref@_Ref_count_base@std@@QAEXXZ PROC		; std::_Ref_count_base::_Incwref, COMDAT
; _this$ = ecx

; 646  :     void _Incwref() noexcept { // increment weak reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 647  :         _MT_INCR(_Weaks);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 08	 add	 eax, 8
  00014	f0 ff 00	 lock	  inc	 DWORD PTR [eax]

; 648  :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Incwref@_Ref_count_base@std@@QAEXXZ ENDP		; std::_Ref_count_base::_Incwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?_Incref_nz@_Ref_count_base@std@@QAE_NXZ
_TEXT	SEGMENT
__Old_value$1 = -16					; size = 4
__Count$ = -12						; size = 4
__Volatile_uses$ = -8					; size = 4
_this$ = -4						; size = 4
?_Incref_nz@_Ref_count_base@std@@QAE_NXZ PROC		; std::_Ref_count_base::_Incref_nz, COMDAT
; _this$ = ecx

; 626  :     bool _Incref_nz() noexcept { // increment use count if not zero, return true if successful

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 627  :         auto& _Volatile_uses = reinterpret_cast<volatile long&>(_Uses);

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c0 04	 add	 eax, 4
  00020	89 45 f8	 mov	 DWORD PTR __Volatile_uses$[ebp], eax

; 628  :         long _Count          = _ISO_VOLATILE_LOAD32(_Volatile_uses);

  00023	8b 4d f8	 mov	 ecx, DWORD PTR __Volatile_uses$[ebp]
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Atomic_address_as@$$CBJ$$CCJ@std@@YAPDJACJ@Z ; std::_Atomic_address_as<long const ,long volatile >
  0002c	83 c4 04	 add	 esp, 4
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	89 55 f4	 mov	 DWORD PTR __Count$[ebp], edx
$LN2@Incref_nz:

; 629  : 
; 630  :         while (_Count != 0) {

  00034	83 7d f4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00038	74 29		 je	 SHORT $LN3@Incref_nz

; 631  :             const long _Old_value = _INTRIN_RELAXED(_InterlockedCompareExchange)(&_Volatile_uses, _Count + 1, _Count);

  0003a	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  0003d	83 c0 01	 add	 eax, 1
  00040	8b c8		 mov	 ecx, eax
  00042	8b 55 f8	 mov	 edx, DWORD PTR __Volatile_uses$[ebp]
  00045	8b 45 f4	 mov	 eax, DWORD PTR __Count$[ebp]
  00048	f0 0f b1 0a	 lock	  cmpxchg DWORD PTR [edx], ecx
  0004c	89 45 f0	 mov	 DWORD PTR __Old_value$1[ebp], eax

; 632  :             if (_Old_value == _Count) {

  0004f	8b 45 f0	 mov	 eax, DWORD PTR __Old_value$1[ebp]
  00052	3b 45 f4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00055	75 04		 jne	 SHORT $LN4@Incref_nz

; 633  :                 return true;

  00057	b0 01		 mov	 al, 1
  00059	eb 0a		 jmp	 SHORT $LN1@Incref_nz
$LN4@Incref_nz:

; 634  :             }
; 635  : 
; 636  :             _Count = _Old_value;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR __Old_value$1[ebp]
  0005e	89 4d f4	 mov	 DWORD PTR __Count$[ebp], ecx

; 637  :         }

  00061	eb d1		 jmp	 SHORT $LN2@Incref_nz
$LN3@Incref_nz:

; 638  : 
; 639  :         return false;

  00063	32 c0		 xor	 al, al
$LN1@Incref_nz:

; 640  :     }

  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
?_Incref_nz@_Ref_count_base@std@@QAE_NXZ ENDP		; std::_Ref_count_base::_Incref_nz
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_avlog.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
