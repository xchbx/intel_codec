; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG91163 DB	'GPUZShMem', 00H
	ORG $+2
$SG91174 DB	'C', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG91175 DB	'C', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 00H, 00H
$SG91184 DB	'G', 00H, 'P', 00H, 'U', 00H, ' ', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG91194 DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?get_gpuz_info@@YAHPAUGPUZ_SH_MEM@@@Z		; get_gpuz_info
PUBLIC	?gpu_core_clock@@YANPAUGPUZ_SH_MEM@@@Z		; gpu_core_clock
PUBLIC	?gpu_load@@YANPAUGPUZ_SH_MEM@@@Z		; gpu_load
PUBLIC	?video_engine_load@@YANPAUGPUZ_SH_MEM@@PA_N@Z	; video_engine_load
PUBLIC	__real@0000000000000000
EXTRN	__imp__tolower:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp___wcsnicmp:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__OpenFileMappingA@12:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_len$ = -4						; size = 4
_str$ = 8						; size = 4
_substr$ = 12						; size = 4
?wcsistr@@YAPB_WPB_W0@Z PROC				; wcsistr

; 42   : static inline const WCHAR *wcsistr(const WCHAR *str, const WCHAR *substr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 43   :     size_t len = 0;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 44   :     if (substr && (len = wcslen(substr)) != NULL)

  00013	83 7d 0c 00	 cmp	 DWORD PTR _substr$[ebp], 0
  00017	74 78		 je	 SHORT $LN5@wcsistr
  00019	8b f4		 mov	 esi, esp
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _substr$[ebp]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  00025	83 c4 04	 add	 esp, 4
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
  00032	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  00036	74 59		 je	 SHORT $LN5@wcsistr

; 45   :         for (; (str = wcsichr(str, substr[0])) != NULL; str++)

  00038	eb 09		 jmp	 SHORT $LN4@wcsistr
$LN2@wcsistr:
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0003d	83 c1 02	 add	 ecx, 2
  00040	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx
$LN4@wcsistr:
  00043	ba 02 00 00 00	 mov	 edx, 2
  00048	6b c2 00	 imul	 eax, edx, 0
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _substr$[ebp]
  0004e	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00052	52		 push	 edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?wcsichr@@YAPB_WPB_WH@Z	; wcsichr
  0005c	83 c4 08	 add	 esp, 8
  0005f	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
  00062	83 7d 08 00	 cmp	 DWORD PTR _str$[ebp], 0
  00066	74 29		 je	 SHORT $LN5@wcsistr

; 46   :             if (_wcsnicmp(str, substr, len) == NULL)

  00068	8b f4		 mov	 esi, esp
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _substr$[ebp]
  00071	52		 push	 edx
  00072	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00075	50		 push	 eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wcsnicmp
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	85 c0		 test	 eax, eax
  00088	75 05		 jne	 SHORT $LN6@wcsistr

; 47   :                 return str;

  0008a	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0008d	eb 04		 jmp	 SHORT $LN1@wcsistr
$LN6@wcsistr:
  0008f	eb a9		 jmp	 SHORT $LN2@wcsistr
$LN5@wcsistr:

; 48   :     return NULL;

  00091	33 c0		 xor	 eax, eax
$LN1@wcsistr:

; 49   : }

  00093	5e		 pop	 esi
  00094	83 c4 04	 add	 esp, 4
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?wcsistr@@YAPB_WPB_W0@Z ENDP				; wcsistr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_str$ = 8						; size = 4
_c$ = 12						; size = 4
?wcsichr@@YAPB_WPB_WH@Z PROC				; wcsichr

; 33   : static inline const WCHAR *wcsichr(const WCHAR *str, int c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 34   :     c = tolower(c);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	89 45 0c	 mov	 DWORD PTR _c$[ebp], eax

; 35   :     for (; *str; str++)

  0001d	eb 09		 jmp	 SHORT $LN4@wcsichr
$LN2@wcsichr:
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00022	83 c1 02	 add	 ecx, 2
  00025	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx
$LN4@wcsichr:
  00028	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0002b	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0002e	85 c0		 test	 eax, eax
  00030	74 25		 je	 SHORT $LN3@wcsichr

; 36   :         if (c == tolower(*str))

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00035	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tolower
  00041	83 c4 04	 add	 esp, 4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	39 45 0c	 cmp	 DWORD PTR _c$[ebp], eax
  0004e	75 05		 jne	 SHORT $LN5@wcsichr

; 37   :             return str;

  00050	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00053	eb 04		 jmp	 SHORT $LN1@wcsichr
$LN5@wcsichr:
  00055	eb c8		 jmp	 SHORT $LN2@wcsichr
$LN3@wcsichr:

; 38   :     return NULL;

  00057	33 c0		 xor	 eax, eax
$LN1@wcsichr:

; 39   : }

  00059	5e		 pop	 esi
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?wcsichr@@YAPB_WPB_WH@Z ENDP				; wcsichr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_data$ = 8						; size = 4
_pbVideoEngineUsage$ = 12				; size = 4
?video_engine_load@@YANPAUGPUZ_SH_MEM@@PA_N@Z PROC	; video_engine_load

; 87   : double video_engine_load(GPUZ_SH_MEM *data, bool *pbVideoEngineUsage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 88   :     for (int i = 0; i < MAX_RECORDS; i++) {

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00012	eb 09		 jmp	 SHORT $LN4@video_engi
$LN2@video_engi:
  00014	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00017	83 c0 01	 add	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@video_engi:
  0001d	81 7d fc 80 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 128 ; 00000080H
  00024	7d 44		 jge	 SHORT $LN3@video_engi

; 89   :         if (wcsistr(data->sensors[i].name, L"Video Engine Load")) {

  00026	68 00 00 00 00	 push	 OFFSET $SG91194
  0002b	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00032	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00035	8d 84 0a 0c 00
	02 00		 lea	 eax, DWORD PTR [edx+ecx+131084]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?wcsistr@@YAPB_WPB_W0@Z	; wcsistr
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	74 1f		 je	 SHORT $LN5@video_engi

; 90   :             if (pbVideoEngineUsage) *pbVideoEngineUsage = true;

  00049	83 7d 0c 00	 cmp	 DWORD PTR _pbVideoEngineUsage$[ebp], 0
  0004d	74 06		 je	 SHORT $LN6@video_engi
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _pbVideoEngineUsage$[ebp]
  00052	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN6@video_engi:

; 91   :             return data->sensors[i].value;

  00055	69 55 fc 1c 02
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 540
  0005c	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0005f	dd 84 10 20 02
	02 00		 fld	 QWORD PTR [eax+edx+131616]
  00066	eb 10		 jmp	 SHORT $LN1@video_engi
$LN5@video_engi:

; 92   :         }
; 93   :     }

  00068	eb aa		 jmp	 SHORT $LN2@video_engi
$LN3@video_engi:

; 94   :     if (pbVideoEngineUsage) *pbVideoEngineUsage = false;

  0006a	83 7d 0c 00	 cmp	 DWORD PTR _pbVideoEngineUsage$[ebp], 0
  0006e	74 06		 je	 SHORT $LN7@video_engi
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _pbVideoEngineUsage$[ebp]
  00073	c6 01 00	 mov	 BYTE PTR [ecx], 0
$LN7@video_engi:

; 95   :     return 0.0;

  00076	d9 ee		 fldz
$LN1@video_engi:

; 96   : }

  00078	83 c4 04	 add	 esp, 4
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?video_engine_load@@YANPAUGPUZ_SH_MEM@@PA_N@Z ENDP	; video_engine_load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_data$ = 8						; size = 4
?gpu_load@@YANPAUGPUZ_SH_MEM@@@Z PROC			; gpu_load

; 78   : double gpu_load(GPUZ_SH_MEM *data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 79   :     for (int i = 0; i < MAX_RECORDS; i++) {

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00012	eb 09		 jmp	 SHORT $LN4@gpu_load
$LN2@gpu_load:
  00014	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00017	83 c0 01	 add	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@gpu_load:
  0001d	81 7d fc 80 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 128 ; 00000080H
  00024	7d 38		 jge	 SHORT $LN3@gpu_load

; 80   :         if (wcsistr(data->sensors[i].name, L"GPU Load")) {

  00026	68 00 00 00 00	 push	 OFFSET $SG91184
  0002b	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00032	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00035	8d 84 0a 0c 00
	02 00		 lea	 eax, DWORD PTR [edx+ecx+131084]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?wcsistr@@YAPB_WPB_W0@Z	; wcsistr
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	74 13		 je	 SHORT $LN5@gpu_load

; 81   :             return data->sensors[i].value;

  00049	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00050	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00053	dd 84 0a 20 02
	02 00		 fld	 QWORD PTR [edx+ecx+131616]
  0005a	eb 04		 jmp	 SHORT $LN1@gpu_load
$LN5@gpu_load:

; 82   :         }
; 83   :     }

  0005c	eb b6		 jmp	 SHORT $LN2@gpu_load
$LN3@gpu_load:

; 84   :     return 0.0;

  0005e	d9 ee		 fldz
$LN1@gpu_load:

; 85   : }

  00060	83 c4 04	 add	 esp, 4
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?gpu_load@@YANPAUGPUZ_SH_MEM@@@Z ENDP			; gpu_load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_data$ = 8						; size = 4
?gpu_core_clock@@YANPAUGPUZ_SH_MEM@@@Z PROC		; gpu_core_clock

; 68   : double gpu_core_clock(GPUZ_SH_MEM *data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 69   :     for (int i = 0; i < MAX_RECORDS; i++) {

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00012	eb 09		 jmp	 SHORT $LN4@gpu_core_c
$LN2@gpu_core_c:
  00014	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00017	83 c0 01	 add	 eax, 1
  0001a	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@gpu_core_c:
  0001d	81 7d fc 80 00
	00 00		 cmp	 DWORD PTR _i$1[ebp], 128 ; 00000080H
  00024	7d 5b		 jge	 SHORT $LN3@gpu_core_c

; 70   :         if (   wcsistr(data->sensors[i].name, L"Core")
; 71   :             && wcsistr(data->sensors[i].name, L"Clock")) {

  00026	68 00 00 00 00	 push	 OFFSET $SG91174
  0002b	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00032	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00035	8d 84 0a 0c 00
	02 00		 lea	 eax, DWORD PTR [edx+ecx+131084]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?wcsistr@@YAPB_WPB_W0@Z	; wcsistr
  00042	83 c4 08	 add	 esp, 8
  00045	85 c0		 test	 eax, eax
  00047	74 36		 je	 SHORT $LN5@gpu_core_c
  00049	68 00 00 00 00	 push	 OFFSET $SG91175
  0004e	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00055	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00058	8d 84 0a 0c 00
	02 00		 lea	 eax, DWORD PTR [edx+ecx+131084]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ?wcsistr@@YAPB_WPB_W0@Z	; wcsistr
  00065	83 c4 08	 add	 esp, 8
  00068	85 c0		 test	 eax, eax
  0006a	74 13		 je	 SHORT $LN5@gpu_core_c

; 72   :             return data->sensors[i].value;

  0006c	69 4d fc 1c 02
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 540
  00073	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00076	dd 84 0a 20 02
	02 00		 fld	 QWORD PTR [edx+ecx+131616]
  0007d	eb 04		 jmp	 SHORT $LN1@gpu_core_c
$LN5@gpu_core_c:

; 73   :         }
; 74   :     }

  0007f	eb 93		 jmp	 SHORT $LN2@gpu_core_c
$LN3@gpu_core_c:

; 75   :     return 0.0;

  00081	d9 ee		 fldz
$LN1@gpu_core_c:

; 76   : }

  00083	83 c4 04	 add	 esp, 4
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?gpu_core_clock@@YANPAUGPUZ_SH_MEM@@@Z ENDP		; gpu_core_clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\gpuz_info.cpp
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_memmap$ = -4						; size = 4
_data$ = 8						; size = 4
?get_gpuz_info@@YAHPAUGPUZ_SH_MEM@@@Z PROC		; get_gpuz_info

; 51   : int get_gpuz_info(GPUZ_SH_MEM *data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 52   :     HANDLE memmap = OpenFileMapping(FILE_MAP_READ, FALSE, SHMEM_NAME);

  00015	8b f4		 mov	 esi, esp
  00017	68 00 00 00 00	 push	 OFFSET $SG91163
  0001c	6a 00		 push	 0
  0001e	6a 04		 push	 4
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFileMappingA@12
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	89 45 fc	 mov	 DWORD PTR _memmap$[ebp], eax

; 53   :     if (NULL == memmap) {

  00030	83 7d fc 00	 cmp	 DWORD PTR _memmap$[ebp], 0
  00034	75 07		 jne	 SHORT $LN2@get_gpuz_i

; 54   :         return 1;

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	eb 7b		 jmp	 SHORT $LN1@get_gpuz_i
$LN2@get_gpuz_i:

; 55   :     }
; 56   : 
; 57   :     GPUZ_SH_MEM *ptr = (GPUZ_SH_MEM *)MapViewOfFile(memmap, FILE_MAP_READ, 0, 0, 0);

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	6a 04		 push	 4
  00047	8b 45 fc	 mov	 eax, DWORD PTR _memmap$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapViewOfFile@20
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	89 45 f8	 mov	 DWORD PTR _ptr$[ebp], eax

; 58   :     if (ptr == nullptr) {

  0005b	83 7d f8 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0005f	75 1a		 jne	 SHORT $LN3@get_gpuz_i

; 59   :         CloseHandle(memmap);

  00061	8b f4		 mov	 esi, esp
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _memmap$[ebp]
  00066	51		 push	 ecx
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 60   :         return 1;

  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	eb 3d		 jmp	 SHORT $LN1@get_gpuz_i
$LN3@get_gpuz_i:

; 61   :     }
; 62   :     memcpy(data, ptr, sizeof(data[0]));

  0007b	68 0c 0e 03 00	 push	 200204			; 00030e0cH
  00080	8b 55 f8	 mov	 edx, DWORD PTR _ptr$[ebp]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memcpy
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   :     UnmapViewOfFile(ptr);

  00090	8b f4		 mov	 esi, esp
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00095	51		 push	 ecx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnmapViewOfFile@4
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 64   :     CloseHandle(memmap);

  000a3	8b f4		 mov	 esi, esp
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _memmap$[ebp]
  000a8	52		 push	 edx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   :     return 0;

  000b6	33 c0		 xor	 eax, eax
$LN1@get_gpuz_i:

; 66   : }

  000b8	5e		 pop	 esi
  000b9	83 c4 08	 add	 esp, 8
  000bc	3b ec		 cmp	 ebp, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?get_gpuz_info@@YAHPAUGPUZ_SH_MEM@@@Z ENDP		; get_gpuz_info
_TEXT	ENDS
END
