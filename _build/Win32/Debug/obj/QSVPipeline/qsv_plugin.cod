; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG27063 DB	'invalid argument', 00H
	ORG $+3
$SG27064 DB	'%s', 00H
	ORG $+1
$SG27065 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG27066 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG27067 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG27068 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0CMFXPlugin@@QAE@PAU_mfxSession@@@Z		; CMFXPlugin::CMFXPlugin
PUBLIC	??1CMFXPlugin@@QAE@XZ				; CMFXPlugin::~CMFXPlugin
PUBLIC	?LoadPlugin@CMFXPlugin@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z ; CMFXPlugin::LoadPlugin
PUBLIC	?Unload@CMFXPlugin@@QAEXXZ			; CMFXPlugin::Unload
PUBLIC	??_GCMFXPlugin@@QAEPAXI@Z			; CMFXPlugin::`scalar deleting destructor'
PUBLIC	??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z	; CSessionPlugins::CSessionPlugins
PUBLIC	??1CSessionPlugins@@QAE@XZ			; CSessionPlugins::~CSessionPlugins
PUBLIC	?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z ; CSessionPlugins::LoadPlugin
PUBLIC	?UnloadPlugins@CSessionPlugins@@QAEXXZ		; CSessionPlugins::UnloadPlugins
PUBLIC	??0?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAE@XZ ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
PUBLIC	??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	?push_back@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::push_back
PUBLIC	?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::clear
PUBLIC	?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
PUBLIC	?capacity@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::capacity
PUBLIC	?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@II@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Xlength
PUBLIC	?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Orphan_range
PUBLIC	?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
PUBLIC	?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first
PUBLIC	??R?$default_delete@VCMFXPlugin@@@std@@QBEXPAVCMFXPlugin@@@Z ; std::default_delete<CMFXPlugin>::operator()
PUBLIC	??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
PUBLIC	??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
PUBLIC	?get_deleter@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::get_deleter
PUBLIC	??C?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QBEPAVCMFXPlugin@@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::operator->
PUBLIC	?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Get_first
PUBLIC	??_G?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAXI@Z ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::`scalar deleting destructor'
PUBLIC	??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> ><std::default_delete<CMFXPlugin>,0>
PUBLIC	??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>
PUBLIC	??$emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$_Emplace_back_with_unused_capacity@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back_with_unused_capacity<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_reallocate<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$?0AAPAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAVCMFXPlugin@@@Z ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><CMFXPlugin * &>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$destroy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::destroy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z ; std::forward<std::default_delete<CMFXPlugin> >
PUBLIC	??$?0U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$default_delete@VCMFXPlugin@@@1@$$QAPAVCMFXPlugin@@@Z ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><std::default_delete<CMFXPlugin>,CMFXPlugin *>
PUBLIC	??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > *,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$exchange@PAVCMFXPlugin@@PAV1@@std@@YAPAVCMFXPlugin@@AAPAV1@$$QAPAV1@@Z ; std::exchange<CMFXPlugin *,CMFXPlugin *>
PUBLIC	??$forward@AAPAVCMFXPlugin@@@std@@YAAAPAVCMFXPlugin@@AAPAV1@@Z ; std::forward<CMFXPlugin * &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@PAVCMFXPlugin@@@std@@YA$$QAPAVCMFXPlugin@@AAPAV1@@Z ; std::forward<CMFXPlugin *>
PUBLIC	??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Release
PUBLIC	??$_Emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_MFXVideoUSER_Load:PROC
EXTRN	_MFXAudioUSER_Load:PROC
EXTRN	_MFXAudioUSER_UnLoad:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$0
__unwindtable$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??1CSessionPlugins@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSessionPlugins@@QAE@XZ$0
__unwindtable$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z$0
__unwindtable$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z$1
__ehfuncinfo$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??1CSessionPlugins@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSessionPlugins@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
__ehfuncinfo$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??1CMFXPlugin@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 04	 add	 eax, 4
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAVCMFXPlugin@@@std@@YA$$QAPAVCMFXPlugin@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVCMFXPlugin@@@std@@YA$$QAPAVCMFXPlugin@@AAPAV1@@Z PROC ; std::forward<CMFXPlugin *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAVCMFXPlugin@@@std@@YA$$QAPAVCMFXPlugin@@AAPAV1@@Z ENDP ; std::forward<CMFXPlugin *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001f	83 c0 27	 add	 eax, 39			; 00000027H
  00022	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 86   :     if (_Block_size <= _Bytes) {

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00028	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  0002b	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00041	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00045	74 02		 je	 SHORT $LN7@Allocate_m
  00047	eb 56		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00049	8b f4		 mov	 esi, esp
  0004b	68 00 00 00 00	 push	 OFFSET $SG27063
  00050	68 00 00 00 00	 push	 OFFSET $SG27064
  00055	6a 00		 push	 0
  00057	6a 5b		 push	 91			; 0000005bH
  00059	68 00 00 00 00	 push	 OFFSET $SG27065
  0005e	6a 02		 push	 2
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN12@Allocate_m
  00075	cc		 int	 3
$LN12@Allocate_m:
  00076	8b f4		 mov	 esi, esp
  00078	6a 00		 push	 0
  0007a	6a 5b		 push	 91			; 0000005bH
  0007c	68 00 00 00 00	 push	 OFFSET $SG27066
  00081	68 00 00 00 00	 push	 OFFSET $SG27067
  00086	68 00 00 00 00	 push	 OFFSET $SG27068
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	33 c9		 xor	 ecx, ecx
  0009d	75 aa		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0009f	33 d2		 xor	 edx, edx
  000a1	75 9e		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000a3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000a6	83 c0 27	 add	 eax, 39			; 00000027H
  000a9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000ac	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 ff	 imul	 edx, ecx, -1
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 fe	 imul	 eax, edx, -2
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000cb	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 99   : }

  000d5	5e		 pop	 esi
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAPAVCMFXPlugin@@@std@@YAAAPAVCMFXPlugin@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCMFXPlugin@@@std@@YAAAPAVCMFXPlugin@@AAPAV1@@Z PROC ; std::forward<CMFXPlugin * &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAVCMFXPlugin@@@std@@YAAAPAVCMFXPlugin@@AAPAV1@@Z ENDP ; std::forward<CMFXPlugin * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAVCMFXPlugin@@PAV1@@std@@YAPAVCMFXPlugin@@AAPAV1@$$QAPAV1@@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAVCMFXPlugin@@PAV1@@std@@YAPAVCMFXPlugin@@AAPAV1@$$QAPAV1@@Z PROC ; std::exchange<CMFXPlugin *,CMFXPlugin *>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAVCMFXPlugin@@PAV1@@std@@YAPAVCMFXPlugin@@AAPAV1@$$QAPAV1@@Z ENDP ; std::exchange<CMFXPlugin *,CMFXPlugin *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 02	 shl	 eax, 2
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 26   :     return _Right < _Left ? _Right : _Left;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Min_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 27   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$3 = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > *,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT

; 1729 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1730 :     // move [_First, _Last) to raw _Dest, using _Al
; 1731 :     // note: only called internally from elsewhere in the STL
; 1732 :     using _Ptrval     = typename _Alloc::value_type*;
; 1733 :     auto _UFirst      = _Get_unwrapped(_First);

  00042	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1734 :     const auto _ULast = _Get_unwrapped(_Last);

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1735 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1736 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1737 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1738 :         return _Dest + (_ULast - _UFirst);
; 1739 :         (void) _Al;
; 1740 :     } else {
; 1741 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00060	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00063	52		 push	 edx
  00064	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00067	50		 push	 eax
  00068	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1742 :         for (; _UFirst != _ULast; ++_UFirst) {

  00077	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  0007c	83 c1 04	 add	 ecx, 4
  0007f	89 4d f0	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  00082	8b 55 f0	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00085	3b 55 ec	 cmp	 edx, DWORD PTR __ULast$[ebp]
  00088	74 17		 je	 SHORT $LN3@Uninitiali

; 1743 :             _Backout._Emplace_back(_STD move(*_UFirst));

  0008a	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0009a	e8 00 00 00 00	 call	 ??$_Emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >

; 1744 :         }

  0009f	eb d8		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1745 : 
; 1746 :         return _Backout._Release();

  000a1	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Release
  000a9	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000b6	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 1747 :     }
; 1748 : }

  000be	52		 push	 edx
  000bf	8b cd		 mov	 ecx, ebp
  000c1	50		 push	 eax
  000c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cd	58		 pop	 eax
  000ce	5a		 pop	 edx
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	83 c4 2c	 add	 esp, 44			; 0000002cH
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Uninitiali:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	0c 00 00 00	 DD	 12			; 0000000cH
  000f8	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	42		 DB	 66			; 00000042H
  000fe	61		 DB	 97			; 00000061H
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	6f		 DB	 111			; 0000006fH
  00102	75		 DB	 117			; 00000075H
  00103	74		 DB	 116			; 00000074H
  00104	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~_Uninitialized_backout_al<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
__ehhandler$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > *,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$default_delete@VCMFXPlugin@@@1@$$QAPAVCMFXPlugin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$default_delete@VCMFXPlugin@@@1@$$QAPAVCMFXPlugin@@@Z PROC ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><std::default_delete<CMFXPlugin>,CMFXPlugin *>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z ; std::forward<std::default_delete<CMFXPlugin> >
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val2_0>$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??$forward@PAVCMFXPlugin@@@std@@YA$$QAPAVCMFXPlugin@@AAPAV1@@Z ; std::forward<CMFXPlugin *>
  00023	83 c4 04	 add	 esp, 4
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 0c 00	 ret	 12			; 0000000cH
??$?0U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$default_delete@VCMFXPlugin@@@1@$$QAPAVCMFXPlugin@@@Z ENDP ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><std::default_delete<CMFXPlugin>,CMFXPlugin *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z PROC ; std::forward<std::default_delete<CMFXPlugin> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z ENDP ; std::forward<std::default_delete<CMFXPlugin> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::destroy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  :         _Ptr->~_Uty();

  00003	6a 00		 push	 0
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_G?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAXI@Z

; 764  :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$destroy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::destroy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0AAPAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAVCMFXPlugin@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAVCMFXPlugin@@@Z PROC ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><CMFXPlugin * &>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@AAPAVCMFXPlugin@@@std@@YAAAPAVCMFXPlugin@@AAPAV1@@Z ; std::forward<CMFXPlugin * &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
??$?0AAPAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAVCMFXPlugin@@@Z ENDP ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><CMFXPlugin * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {

  00022	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00024	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00030	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00033	74 1b		 je	 SHORT $LN1@Destroy_ra

; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  00035	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$destroy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::destroy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0004b	83 c4 08	 add	 esp, 8

; 1039 :         }

  0004e	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1040 :     }
; 1041 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1184 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0001e	6a 01		 push	 1
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax

; 1186 :         _Construct_in_place(*_New_proxy, this);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00047	83 c4 08	 add	 esp, 8

; 1187 :         _Myproxy            = _New_proxy;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00050	89 08		 mov	 DWORD PTR [eax], ecx

; 1188 :         _New_proxy->_Mycont = this;

  00052	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 1189 :     }

  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAE@XZ ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_reallocate<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	c1 f9 02	 sar	 ecx, 2
  0006e	89 4d d8	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00071	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00074	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00077	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00079	2b 08		 sub	 ecx, DWORD PTR [eax]
  0007b	c1 f9 02	 sar	 ecx, 2
  0007e	89 4d d4	 mov	 DWORD PTR __Oldsize$[ebp], ecx

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  00081	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
  00089	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0008c	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0008e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  00093	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  00096	83 c2 01	 add	 edx, 1
  00099	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  0009c	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009f	50		 push	 eax
  000a0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Calculate_growth
  000a8	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000ab	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000ae	51		 push	 ecx
  000af	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b2	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocate
  000b7	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000ba	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  000bd	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000c0	8d 4c 90 04	 lea	 ecx, DWORD PTR [eax+edx*4+4]
  000c4	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000c7	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000ca	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000cd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d4	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  000dd	83 c4 04	 add	 esp, 4
  000e0	50		 push	 eax
  000e1	8b 4d d8	 mov	 ecx, DWORD PTR __Whereoff$[ebp]
  000e4	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  000e7	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  000f0	83 c4 04	 add	 esp, 4
  000f3	50		 push	 eax
  000f4	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  00100	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  00103	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00106	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00109	89 4d c0	 mov	 DWORD PTR __Constructed_first$[ebp], ecx

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0010c	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0010f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00112	3b 02		 cmp	 eax, DWORD PTR [edx]
  00114	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00116	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00119	51		 push	 ecx
  0011a	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0011d	8b 02		 mov	 eax, DWORD PTR [edx]
  0011f	50		 push	 eax
  00120	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00123	8b 11		 mov	 edx, DWORD PTR [ecx]
  00125	52		 push	 edx
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  0012e	eb 39		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  00130	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00133	50		 push	 eax
  00134	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 e0	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0013b	8b 02		 mov	 eax, DWORD PTR [edx]
  0013d	50		 push	 eax
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00146	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00149	89 4d c0	 mov	 DWORD PTR __Constructed_first$[ebp], ecx

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0014c	8b 55 d8	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  0014f	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00152	8d 4c 90 04	 lea	 ecx, DWORD PTR [eax+edx*4+4]
  00156	51		 push	 ecx
  00157	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0015a	8b 02		 mov	 eax, DWORD PTR [edx]
  0015c	50		 push	 eax
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00160	51		 push	 ecx
  00161	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove
$LN5@Emplace_re:
  00169	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  0016b	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  0016e	52		 push	 edx
  0016f	8b 45 c0	 mov	 eax, DWORD PTR __Constructed_first$[ebp]
  00172	50		 push	 eax
  00173	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  0017b	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  0017e	51		 push	 ecx
  0017f	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00182	52		 push	 edx
  00183	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00186	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate

; 713  :         _RERAISE;

  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  00194	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00199	c3		 ret	 0
$LN7@Emplace_re:
  0019a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001a1	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$1
$LN10@Emplace_re:
  001a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001aa	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d d0	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001b1	51		 push	 ecx
  001b2	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001b5	52		 push	 edx
  001b6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b9	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@II@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001be	8b 45 d8	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  001c1	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c4	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
$LN6@Emplace_re:

; 718  :     }

  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	83 c4 40	 add	 esp, 64			; 00000040H
  001d8	3b ec		 cmp	 ebp, esp
  001da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001df	8b e5		 mov	 esp, ebp
  001e1	5d		 pop	 ebp
  001e2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_reallocate<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 04		 push	 4
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z PROC ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ENDP ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back_with_unused_capacity<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@PAV10@@Z ; std::_Unfancy<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::construct<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 04	 add	 eax, 4
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back_with_unused_capacity<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z PROC ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_back_with_unused_capacity<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::forward<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@QAV21@$$QAV21@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Emplace_reallocate<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z PROC ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ENDP ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> ><std::default_delete<CMFXPlugin>,0>, COMDAT
; _this$ = ecx

; 1820 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Ptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00039	50		 push	 eax
  0003a	0f b6 4d ef	 movzx	 ecx, BYTE PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0AAPAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAVCMFXPlugin@@@Z ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><CMFXPlugin * &>
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	83 c4 14	 add	 esp, 20			; 00000014H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> ><std::default_delete<CMFXPlugin>,0>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAXI@Z PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 04		 push	 4
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAXI@Z ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::release, COMDAT
; _this$ = ecx

; 1903 :     pointer release() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1904 :         return _STD exchange(_Mypair._Myval2, pointer());

  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003d	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  00040	50		 push	 eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ??$exchange@PAVCMFXPlugin@@PAV1@@std@@YAPAVCMFXPlugin@@AAPAV1@$$QAPAV1@@Z ; std::exchange<CMFXPlugin *,CMFXPlugin *>
  0004a	83 c4 08	 add	 esp, 8

; 1905 :     }

  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	83 c4 14	 add	 esp, 20			; 00000014H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::release
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??C?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QBEPAVCMFXPlugin@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QBEPAVCMFXPlugin@@XZ PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::operator->, COMDAT
; _this$ = ecx

; 1891 :     _NODISCARD pointer operator->() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1892 :         return _Mypair._Myval2;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]

; 1893 :     }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??C?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QBEPAVCMFXPlugin@@XZ ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ?get_deleter@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_deleter@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::get_deleter, COMDAT
; _this$ = ecx

; 1879 :     _NODISCARD _Dx& get_deleter() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1880 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Get_first

; 1881 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?get_deleter@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >, COMDAT
; _this$ = ecx

; 1873 :     ~unique_ptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1874 :         if (_Mypair._Myval2) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@unique_ptr

; 1875 :             _Mypair._Get_first()(_Mypair._Myval2);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Get_first
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??R?$default_delete@VCMFXPlugin@@@std@@QBEXPAVCMFXPlugin@@@Z ; std::default_delete<CMFXPlugin>::operator()
$LN1@unique_ptr:

; 1876 :         }
; 1877 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -21						; size = 1
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >, COMDAT
; _this$ = ecx

; 1833 :     unique_ptr(unique_ptr&& _Right) noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1834 :         : _Mypair(_One_then_variadic_args_t(), _STD forward<_Dx>(_Right.get_deleter()), _Right.release()) {}

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00040	e8 00 00 00 00	 call	 ?release@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEPAVCMFXPlugin@@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::release
  00045	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00048	8d 45 ec	 lea	 eax, DWORD PTR $T3[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004f	e8 00 00 00 00	 call	 ?get_deleter@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAEAAU?$default_delete@VCMFXPlugin@@@2@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::get_deleter
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$forward@U?$default_delete@VCMFXPlugin@@@std@@@std@@YA$$QAU?$default_delete@VCMFXPlugin@@@0@AAU10@@Z ; std::forward<std::default_delete<CMFXPlugin> >
  0005a	83 c4 04	 add	 esp, 4
  0005d	50		 push	 eax
  0005e	0f b6 4d eb	 movzx	 ecx, BYTE PTR $T2[ebp]
  00062	51		 push	 ecx
  00063	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ??$?0U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@@?$_Compressed_pair@U?$default_delete@VCMFXPlugin@@@std@@PAVCMFXPlugin@@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$default_delete@VCMFXPlugin@@@1@$$QAPAVCMFXPlugin@@@Z ; std::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1>::_Compressed_pair<std::default_delete<CMFXPlugin>,CMFXPlugin *,1><std::default_delete<CMFXPlugin>,CMFXPlugin *>
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	83 c4 18	 add	 esp, 24			; 00000018H
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\memory
;	COMDAT ??R?$default_delete@VCMFXPlugin@@@std@@QBEXPAVCMFXPlugin@@@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@VCMFXPlugin@@@std@@QBEXPAVCMFXPlugin@@@Z PROC ; std::default_delete<CMFXPlugin>::operator(), COMDAT
; _this$ = ecx

; 1765 :     void operator()(_Ty* _Ptr) const noexcept { // delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1766 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 1767 :         delete _Ptr;

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00024	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00028	74 0f		 je	 SHORT $LN3@operator
  0002a	6a 01		 push	 1
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??_GCMFXPlugin@@QAEPAXI@Z
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 07		 jmp	 SHORT $LN1@operator
$LN3@operator:
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN1@operator:

; 1768 :     }

  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??R?$default_delete@VCMFXPlugin@@@std@@QBEXPAVCMFXPlugin@@@Z ENDP ; std::default_delete<CMFXPlugin>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z
_TEXT	SEGMENT
__Pnextptr$2 = -36					; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1668 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1669 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 :         _Lockit _Lock(_LOCK_DEBUG);

  00040	8b f4		 mov	 esi, esp
  00042	6a 03		 push	 3
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1671 : 
; 1672 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	83 c1 04	 add	 ecx, 4
  00063	89 4d e0	 mov	 DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1673 :         while (*_Pnext) {

  00066	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  00069	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0006c	74 42		 je	 SHORT $LN3@Orphan_ran

; 1674 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

  0006e	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00076	89 55 dc	 mov	 DWORD PTR __Pnextptr$2[ebp], edx

; 1675 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

  00079	8b 45 dc	 mov	 eax, DWORD PTR __Pnextptr$2[ebp]
  0007c	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  0007f	72 08		 jb	 SHORT $LN6@Orphan_ran
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	3b 4d dc	 cmp	 ecx, DWORD PTR __Pnextptr$2[ebp]
  00087	73 0d		 jae	 SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1676 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00089	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	83 c0 04	 add	 eax, 4
  00091	89 45 e0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1677 :             } else { // orphan the iterator

  00094	eb 18		 jmp	 SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1678 :                 (*_Pnext)->_Myproxy = nullptr;

  00096	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1679 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

  000a1	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	89 02		 mov	 DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1680 :             }
; 1681 :         }

  000ae	eb b6		 jmp	 SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1682 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1683 :         (void) _First;
; 1684 :         (void) _Last;
; 1685 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1686 :     }

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b f4		 mov	 esi, esp
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	52		 push	 edx
  000ca	8b cd		 mov	 ecx, ebp
  000cc	50		 push	 eax
  000cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Orphan_ran
  000d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d8	58		 pop	 eax
  000d9	5a		 pop	 edx
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5e		 pop	 esi
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
  000f6	66 90		 npad	 2
$LN12@Orphan_ran:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN11@Orphan_ran
$LN11@Orphan_ran:
  00100	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00104	04 00 00 00	 DD	 4
  00108	00 00 00 00	 DD	 $LN9@Orphan_ran
$LN9@Orphan_ran:
  0010c	5f		 DB	 95			; 0000005fH
  0010d	4c		 DB	 76			; 0000004cH
  0010e	6f		 DB	 111			; 0000006fH
  0010f	63		 DB	 99			; 00000063H
  00110	6b		 DB	 107			; 0000006bH
  00111	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 02	 sar	 edx, 2
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Change_array@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@II@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1623 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1624 :         // orphan all iterators, discard old array, acquire new array
; 1625 :         auto& _My_data    = _Mypair._Myval2;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1626 :         pointer& _Myfirst = _My_data._Myfirst;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1627 :         pointer& _Mylast  = _My_data._Mylast;

  0002c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0002f	83 c2 08	 add	 edx, 8
  00032	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1628 :         pointer& _Myend   = _My_data._Myend;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1629 : 
; 1630 :         _My_data._Orphan_all();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1631 : 
; 1632 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00049	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004c	74 37		 je	 SHORT $LN2@Change_arr

; 1633 :             _Destroy(_Myfirst, _Mylast);

  0004e	8b 55 f0	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy

; 1634 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	8b 10		 mov	 edx, DWORD PTR [eax]
  0006a	2b 11		 sub	 edx, DWORD PTR [ecx]
  0006c	c1 fa 02	 sar	 edx, 2
  0006f	52		 push	 edx
  00070	8b 45 f4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  0007e	8b c8		 mov	 ecx, eax
  00080	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate
$LN2@Change_arr:

; 1635 :         }
; 1636 : 
; 1637 :         _Myfirst = _Newvec;

  00085	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00088	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0008b	89 02		 mov	 DWORD PTR [edx], eax

; 1638 :         _Mylast  = _Newvec + _Newsize;

  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00093	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00096	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00099	89 01		 mov	 DWORD PTR [ecx], eax

; 1639 :         _Myend   = _Newvec + _Newcapacity;

  0009b	8b 55 10	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  0009e	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000a4	8b 55 ec	 mov	 edx, DWORD PTR __Myend$[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx

; 1640 :     }

  000a9	83 c4 14	 add	 esp, 20			; 00000014H
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@II@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1571 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1572 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1573 :         const size_type _Oldcapacity = capacity();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::capacity
  00026	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1574 : 
; 1575 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  0003b	76 05		 jbe	 SHORT $LN2@Calculate_

; 1576 :             return _Newsize; // geometric growth would overflow

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00040	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1577 :         }
; 1578 : 
; 1579 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00042	8b 55 f8	 mov	 edx, DWORD PTR __Oldcapacity$[ebp]
  00045	d1 ea		 shr	 edx, 1
  00047	03 55 f8	 add	 edx, DWORD PTR __Oldcapacity$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR __Geometric$[ebp], edx

; 1580 : 
; 1581 :         if (_Geometric < _Newsize) {

  0004d	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00050	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00053	73 05		 jae	 SHORT $LN3@Calculate_

; 1582 :             return _Newsize; // geometric growth would be insufficient

  00055	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1583 :         }
; 1584 : 
; 1585 :         return _Geometric; // geometric growth is sufficient

  0005a	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1586 :     }

  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@YAXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1561 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1562 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1563 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00024	52		 push	 edx
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept1

; 1564 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1565 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1551 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 :         // move [_First, _Last) to raw _Dest, using allocator
; 1553 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > *,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove, COMDAT
; _this$ = ecx

; 1547 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1548 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@YAPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > *,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1549 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@PAV32@00@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?capacity@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::capacity, COMDAT
; _this$ = ecx

; 1446 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1447 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1448 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	c1 f8 02	 sar	 eax, 2

; 1449 :     }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?capacity@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@ABEABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::clear, COMDAT
; _this$ = ecx

; 1333 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1334 :         auto& _My_data    = _Mypair._Myval2;

  00039	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1335 :         pointer& _Myfirst = _My_data._Myfirst;

  0003f	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00042	83 c1 04	 add	 ecx, 4
  00045	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1336 :         pointer& _Mylast  = _My_data._Mylast;

  00048	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004b	83 c2 08	 add	 edx, 8
  0004e	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1337 : 
; 1338 :         _My_data._Orphan_all();

  00051	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1339 :         _Destroy(_Myfirst, _Mylast);

  00059	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	51		 push	 ecx
  0005f	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	50		 push	 eax
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@0@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Destroy

; 1340 :         _Mylast = _Myfirst;

  0006d	8b 4d e4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00070	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00073	8b 02		 mov	 eax, DWORD PTR [edx]
  00075	89 01		 mov	 DWORD PTR [ecx], eax

; 1341 :     }

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	83 c4 1c	 add	 esp, 28			; 0000001cH
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::clear
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@@Z PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::push_back, COMDAT
; _this$ = ecx

; 671  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  :         emplace_back(_STD move(_Val));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$emplace_back@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@1@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::emplace_back<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >

; 673  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?push_back@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@@Z ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S1$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S1$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	31		 DB	 49			; 00000031H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >, COMDAT
; _this$ = ecx

; 385  :     vector() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :         : _Mypair(_Zero_then_variadic_args_t()) { // construct empty vector

  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1>::_Compressed_pair<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >,std::_Vector_val<std::_Simple_types<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >,1><>

; 387  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@AAEAAV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::_Getal
  0004b	50		 push	 eax
  0004c	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??$?0V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
  00054	50		 push	 eax
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 388  :     }

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z PROC ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YAII@Z ; std::_Get_size_of_n<4>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEPAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ENDP ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z PROC ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 02	 shl	 eax, 2
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAEXQAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@I@Z ENDP ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UnloadPlugins@CSessionPlugins@@QAEXXZ PROC		; CSessionPlugins::UnloadPlugins
; _this$ = ecx

; 79   : void CSessionPlugins::UnloadPlugins() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   :     m_plugins.clear();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ?clear@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEXXZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::clear

; 81   : }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?UnloadPlugins@CSessionPlugins@@QAEXXZ ENDP		; CSessionPlugins::UnloadPlugins
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
tv79 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
_sts$ = -32						; size = 4
_plugin$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_uid$ = 12						; size = 4
_version$ = 16						; size = 4
?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z PROC ; CSessionPlugins::LoadPlugin
; _this$ = ecx

; 71   : mfxStatus CSessionPlugins::LoadPlugin(mfxPluginType type, const mfxPluginUID &uid, mfxU32 version) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001c	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001f	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00022	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00025	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00028	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00031	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00039	33 c5		 xor	 eax, ebp
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :     auto plugin = std::unique_ptr<CMFXPlugin>(new CMFXPlugin(m_session));

  00048	6a 1c		 push	 28			; 0000001cH
  0004a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004f	83 c4 04	 add	 esp, 4
  00052	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005c	83 7d d8 00	 cmp	 DWORD PTR $T3[ebp], 0
  00060	74 13		 je	 SHORT $LN4@LoadPlugin
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]
  00067	51		 push	 ecx
  00068	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0CMFXPlugin@@QAE@PAU_mfxSession@@@Z ; CMFXPlugin::CMFXPlugin
  00070	89 45 d0	 mov	 DWORD PTR tv79[ebp], eax
  00073	eb 07		 jmp	 SHORT $LN5@LoadPlugin
$LN4@LoadPlugin:
  00075	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN5@LoadPlugin:
  0007c	8b 55 d0	 mov	 edx, DWORD PTR tv79[ebp]
  0007f	89 55 dc	 mov	 DWORD PTR $T4[ebp], edx
  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 dc	 mov	 eax, DWORD PTR $T4[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d e8	 lea	 ecx, DWORD PTR _plugin$[ebp]
  00090	e8 00 00 00 00	 call	 ??$?0U?$default_delete@VCMFXPlugin@@@std@@$0A@@?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@PAVCMFXPlugin@@@Z ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> ><std::default_delete<CMFXPlugin>,0>
  00095	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 73   :     mfxStatus sts = plugin->LoadPlugin(type, uid, version);

  0009c	8b 4d 10	 mov	 ecx, DWORD PTR _version$[ebp]
  0009f	51		 push	 ecx
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _uid$[ebp]
  000a3	52		 push	 edx
  000a4	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  000a7	50		 push	 eax
  000a8	8d 4d e8	 lea	 ecx, DWORD PTR _plugin$[ebp]
  000ab	e8 00 00 00 00	 call	 ??C?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QBEPAVCMFXPlugin@@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::operator->
  000b0	8b c8		 mov	 ecx, eax
  000b2	e8 00 00 00 00	 call	 ?LoadPlugin@CMFXPlugin@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z ; CMFXPlugin::LoadPlugin
  000b7	89 45 e0	 mov	 DWORD PTR _sts$[ebp], eax

; 74   :     if (sts == MFX_ERR_NONE) {

  000ba	83 7d e0 00	 cmp	 DWORD PTR _sts$[ebp], 0
  000be	75 18		 jne	 SHORT $LN2@LoadPlugin

; 75   :         m_plugins.push_back(std::move(plugin));

  000c0	8d 4d e8	 lea	 ecx, DWORD PTR _plugin$[ebp]
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$move@AAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > &>
  000c9	83 c4 04	 add	 esp, 4
  000cc	50		 push	 eax
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	83 c1 04	 add	 ecx, 4
  000d3	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAEX$$QAV?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@2@@Z ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::push_back
$LN2@LoadPlugin:

; 76   :     }
; 77   :     return sts;

  000d8	8b 55 e0	 mov	 edx, DWORD PTR _sts$[ebp]
  000db	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  000de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e5	8d 4d e8	 lea	 ecx, DWORD PTR _plugin$[ebp]
  000e8	e8 00 00 00 00	 call	 ??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
  000ed	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 78   : }

  000f0	52		 push	 edx
  000f1	8b cd		 mov	 ecx, ebp
  000f3	50		 push	 eax
  000f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@LoadPlugin
  000fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ff	58		 pop	 eax
  00100	5a		 pop	 edx
  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	83 c4 30	 add	 esp, 48			; 00000030H
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c2 0c 00	 ret	 12			; 0000000cH
$LN11@LoadPlugin:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN10@LoadPlugin
$LN10@LoadPlugin:
  00124	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN8@LoadPlugin
$LN8@LoadPlugin:
  00130	70		 DB	 112			; 00000070H
  00131	6c		 DB	 108			; 0000006cH
  00132	75		 DB	 117			; 00000075H
  00133	67		 DB	 103			; 00000067H
  00134	69		 DB	 105			; 00000069H
  00135	6e		 DB	 110			; 0000006eH
  00136	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z$1:
  0000f	8d 4d e8	 lea	 ecx, DWORD PTR _plugin$[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@QAE@XZ ; std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >::~unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >
__ehhandler$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z:
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadPlugin@CSessionPlugins@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z ENDP ; CSessionPlugins::LoadPlugin
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSessionPlugins@@QAE@XZ PROC				; CSessionPlugins::~CSessionPlugins
; _this$ = ecx

; 68   : CSessionPlugins::~CSessionPlugins() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSessionPlugins@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 69   :     UnloadPlugins();

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?UnloadPlugins@CSessionPlugins@@QAEXXZ ; CSessionPlugins::UnloadPlugins

; 70   : }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 04	 add	 ecx, 4
  00049	e8 00 00 00 00	 call	 ??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CSessionPlugins@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
__ehhandler$??1CSessionPlugins@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSessionPlugins@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSessionPlugins@@QAE@XZ ENDP				; CSessionPlugins::~CSessionPlugins
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_session$ = 8						; size = 4
??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z PROC		; CSessionPlugins::CSessionPlugins
; _this$ = ecx

; 66   : CSessionPlugins::CSessionPlugins(mfxSession session) : m_session(session), m_plugins() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _session$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ??0?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 67   : }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	83 c4 10	 add	 esp, 16			; 00000010H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@V?$allocator@V?$unique_ptr@VCMFXPlugin@@U?$default_delete@VCMFXPlugin@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >::~vector<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> >,std::allocator<std::unique_ptr<CMFXPlugin,std::default_delete<CMFXPlugin> > > >
__ehhandler$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSessionPlugins@@QAE@PAU_mfxSession@@@Z ENDP		; CSessionPlugins::CSessionPlugins
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMFXPlugin@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMFXPlugin@@QAEPAXI@Z PROC				; CMFXPlugin::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CMFXPlugin@@QAE@XZ	; CMFXPlugin::~CMFXPlugin
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 1c		 push	 28			; 0000001cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GCMFXPlugin@@QAEPAXI@Z ENDP				; CMFXPlugin::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unload@CMFXPlugin@@QAEXXZ PROC				; CMFXPlugin::Unload
; _this$ = ecx

; 54   : void CMFXPlugin::Unload() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   :     if (m_status == MFX_ERR_NONE) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00015	75 4a		 jne	 SHORT $LN1@Unload

; 56   :         if (   m_type == MFX_PLUGINTYPE_AUDIO_DECODE
; 57   :             || m_type == MFX_PLUGINTYPE_AUDIO_ENCODE) {

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 39 05	 cmp	 DWORD PTR [ecx], 5
  0001d	74 08		 je	 SHORT $LN5@Unload
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	83 3a 06	 cmp	 DWORD PTR [edx], 6
  00025	75 1e		 jne	 SHORT $LN3@Unload
$LN5@Unload:

; 58   :             m_status = MFXAudioUSER_UnLoad(m_session, &m_uid);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 04	 add	 eax, 4
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 _MFXAudioUSER_UnLoad
  0003a	83 c4 08	 add	 esp, 8
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 59   :         } else {

  00043	eb 1c		 jmp	 SHORT $LN1@Unload
$LN3@Unload:

; 60   :             m_status = MFXAudioUSER_UnLoad(m_session, &m_uid);

  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	83 c2 04	 add	 edx, 4
  0004b	52		 push	 edx
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _MFXAudioUSER_UnLoad
  00058	83 c4 08	 add	 esp, 8
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	89 42 18	 mov	 DWORD PTR [edx+24], eax
$LN1@Unload:

; 61   :         }
; 62   :     }
; 63   : }

  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?Unload@CMFXPlugin@@QAEXXZ ENDP				; CMFXPlugin::Unload
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_uid$ = 12						; size = 4
_version$ = 16						; size = 4
?LoadPlugin@CMFXPlugin@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z PROC ; CMFXPlugin::LoadPlugin
; _this$ = ecx

; 42   : mfxStatus CMFXPlugin::LoadPlugin(mfxPluginType type, const mfxPluginUID &uid, mfxU32 version) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   :     m_type = type;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 44   :     m_uid = uid;

  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	83 c2 04	 add	 edx, 4
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _uid$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	89 0a		 mov	 DWORD PTR [edx], ecx
  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00026	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00029	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0002f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00032	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 45   :     if (   m_type == MFX_PLUGINTYPE_AUDIO_DECODE
; 46   :         || m_type == MFX_PLUGINTYPE_AUDIO_ENCODE) {

  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 39 05	 cmp	 DWORD PTR [ecx], 5
  0003b	74 08		 je	 SHORT $LN4@LoadPlugin
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	83 3a 06	 cmp	 DWORD PTR [edx], 6
  00043	75 22		 jne	 SHORT $LN2@LoadPlugin
$LN4@LoadPlugin:

; 47   :         m_status = MFXAudioUSER_Load(m_session, &m_uid, version);

  00045	8b 45 10	 mov	 eax, DWORD PTR _version$[ebp]
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 04	 add	 ecx, 4
  0004f	51		 push	 ecx
  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _MFXAudioUSER_Load
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 48   :     } else {

  00065	eb 20		 jmp	 SHORT $LN3@LoadPlugin
$LN2@LoadPlugin:

; 49   :         m_status = MFXVideoUSER_Load(m_session, &m_uid, version);

  00067	8b 55 10	 mov	 edx, DWORD PTR _version$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	83 c0 04	 add	 eax, 4
  00071	50		 push	 eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 _MFXVideoUSER_Load
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN3@LoadPlugin:

; 50   :     }
; 51   :     return m_status;

  00087	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]

; 52   : }

  0008d	83 c4 04	 add	 esp, 4
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
?LoadPlugin@CMFXPlugin@@QAE?AW4mfxStatus@@W4mfxPluginType@@ABUmfxPluginUID@@I@Z ENDP ; CMFXPlugin::LoadPlugin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMFXPlugin@@QAE@XZ PROC				; CMFXPlugin::~CMFXPlugin
; _this$ = ecx

; 38   : CMFXPlugin::~CMFXPlugin() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMFXPlugin@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     Unload();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?Unload@CMFXPlugin@@QAEXXZ ; CMFXPlugin::Unload

; 40   : }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1CMFXPlugin@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CMFXPlugin@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CMFXPlugin@@QAE@XZ ENDP				; CMFXPlugin::~CMFXPlugin
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\qsv_plugin.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_session$ = 8						; size = 4
??0CMFXPlugin@@QAE@PAU_mfxSession@@@Z PROC		; CMFXPlugin::CMFXPlugin
; _this$ = ecx

; 34   :     m_status(MFX_ERR_NONE) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   :     m_type(MFX_PLUGINTYPE_VIDEO_GENERAL),

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 32   :     m_uid(),

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00024	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00027	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 33   :     m_session(session),

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _session$[ebp]
  00030	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 34   :     m_status(MFX_ERR_NONE) {

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 35   : 
; 36   : };

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??0CMFXPlugin@@QAE@PAU_mfxSession@@@Z ENDP		; CMFXPlugin::CMFXPlugin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         return ::operator new(_Bytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 48   :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 553  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :         return INT_MAX;

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 555  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00023	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 138  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :         : bad_alloc("bad array new length")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  :     {

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 139  :     }

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@AAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception(_Message, 1)

  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	50		 push	 eax
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  :     {

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 128  :     }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@AAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 0b		 je	 SHORT $LN3@what
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 93   :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 87   :         __std_exception_destroy(&_Data);

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4

; 88   :     }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 69   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 68   :         : _Data()

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ___std_exception_copy
  00056	83 c4 08	 add	 esp, 8

; 71   :     }

  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 62   :         : _Data()

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 64   :         _Data._What = _Message;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 65   :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
