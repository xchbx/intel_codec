; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 

	TITLE	D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG115156 DB	00H
$SG115167 DB	00H
$SG115190 DB	00H
$SG115198 DB	00H
$SG115213 DB	00H, 00H
$SG115227 DB	00H
$SG115235 DB	00H
$SG115602 DB	00H, 00H
$SG115634 DB	00H
$SG115642 DB	00H
$SG115616 DB	00H, 00H
$SG115699 DB	00H
	ORG $+1
$SG115724 DB	00H, 00H
	ORG $+2
$SG116377 DB	' ', 00H, 09H, 00H, 0bH, 00H, 0dH, 00H, 0aH, 00H, 00H, 00H
$SG116381 DB	' ', 00H, 09H, 00H, 0bH, 00H, 0dH, 00H, 0aH, 00H, 00H, 00H
$SG116931 DB	' ', 09H, 0bH, 0dH, 0aH, 00H
	ORG $+2
$SG116935 DB	' ', 09H, 0bH, 0dH, 0aH, 00H
	ORG $+2
$SG118058 DB	'..', 00H
	ORG $+1
$SG118059 DB	'.', 00H
	ORG $+2
$SG118084 DB	'%.3f', 00H
	ORG $+3
$SG118085 DB	'.', 00H
	ORG $+2
$SG118086 DB	'%d:%02d:%02d%s', 00H
	ORG $+1
$SG118104 DB	'%%', 00H
	ORG $+1
$SG118105 DB	'%', 00H
	ORG $+2
$SG118250 DB	'ntdll.dll', 00H
	ORG $+2
$SG118251 DB	'RtlGetVersion', 00H
	ORG $+2
$SG118276 DB	'Unknown', 00H
$SG118280 DB	'Windows 95', 00H
	ORG $+1
$SG118282 DB	'Windows 98', 00H
	ORG $+1
$SG118284 DB	'Windows Me', 00H
	ORG $+1
$SG118294 DB	'Windows NT 3', 00H
	ORG $+3
$SG118296 DB	'Windows NT 3.1', 00H
	ORG $+1
$SG118298 DB	'Windows NT 3.5', 00H
	ORG $+1
$SG118300 DB	'Windows NT 3.51', 00H
$SG118304 DB	'Windows NT 4.0', 00H
	ORG $+1
$SG118307 DB	'Windows 2000', 00H
	ORG $+3
$SG118309 DB	'Windows XP', 00H
	ORG $+1
$SG118311 DB	'Windows Server 2003', 00H
$SG118315 DB	'Windows Vista', 00H
	ORG $+2
$SG118316 DB	'Windows Server 2008', 00H
$SG118318 DB	'Windows 7', 00H
	ORG $+2
$SG118319 DB	'Windows Server 2008 R2', 00H
	ORG $+1
$SG118321 DB	'Windows 8', 00H
	ORG $+2
$SG118322 DB	'Windows Server 2012', 00H
$SG118324 DB	'Windows 8.1', 00H
$SG118325 DB	'Windows Server 2012 R2', 00H
	ORG $+1
$SG118327 DB	'Windows 10', 00H
	ORG $+1
$SG118328 DB	'Windows Server 2016', 00H
$SG118331 DB	'Later than Windows 10', 00H
	ORG $+2
$SG118333 DB	'Windows 10', 00H
	ORG $+1
$SG118334 DB	'Windows Server 2016', 00H
$SG118337 DB	'Later than Windows 10', 00H
	ORG $+2
$SG151419 DB	'invalid argument', 00H
	ORG $+3
$SG151420 DB	'%s', 00H
	ORG $+1
$SG119064 DB	'x64', 00H
$SG151421 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xmemory', 00H
$SG151422 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H
	DB	'1', 00H, '0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG151423 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG151424 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG119062 DB	'Intel', 00H
	ORG $+2
$SG119063 DB	'[DEBUG]--->Environment Info', 0aH, 00H
	ORG $+3
$SG119065 DB	'x86', 00H
$SG119066 DB	'OS : %s %s (%d)', 0aH, 00H
	ORG $+3
$SG119067 DB	'CPU: %s', 0aH, 00H
	ORG $+3
$SG119069 DB	'L1 ', 00H
$SG119070 DB	'L2 ', 00H
$SG119071 DB	'L3 ', 00H
$SG119072 DB	'RAM', 00H
$SG119073 DB	'    ', 00H
	ORG $+3
$SG119074 DB	'RAM:', 00H
	ORG $+3
$SG119075 DB	'%s Used %d MB, Total %d MB', 0aH, 00H
$SG119076 DB	'GPU: %s', 0aH, 00H
	ORG $+3
$SG111457 DB	'Invalid', 00H
$SG111464 DB	'yv12(9bit)', 00H
	ORG $+1
?SAR_LIST@@3QBUsar_option_t@@B DD 00H			; SAR_LIST
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	0cH
	DD	0bH
	DD	03H
	DD	0aH
	DD	0bH
	DD	04H
	DD	010H
	DD	0bH
	DD	05H
	DD	028H
	DD	021H
	DD	06H
	DD	018H
	DD	0bH
	DD	07H
	DD	014H
	DD	0bH
	DD	08H
	DD	020H
	DD	0bH
	DD	09H
	DD	050H
	DD	021H
	DD	0aH
	DD	012H
	DD	0bH
	DD	0bH
	DD	0fH
	DD	0bH
	DD	0cH
	DD	040H
	DD	021H
	DD	0dH
	DD	0a0H
	DD	063H
	DD	0eH
	DD	04H
	DD	03H
	DD	0fH
	DD	03H
	DD	02H
	DD	010H
	DD	02H
	DD	01H
$SG111465 DB	'yv12(10bit)', 00H
$SG151917 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.23.28105\include\xlocale', 00H
$SG111458 DB	'nv12', 00H
	ORG $+3
$SG111459 DB	'yv12', 00H
	ORG $+3
$SG111460 DB	'yuy2', 00H
	ORG $+3
$SG111461 DB	'yuv422', 00H
	ORG $+1
$SG111462 DB	'nv16', 00H
	ORG $+3
$SG111463 DB	'yuv444', 00H
	ORG $+1
$SG111466 DB	'yv12(12bit)', 00H
$SG111467 DB	'yv12(14bit)', 00H
$SG111468 DB	'yv12(16bit)', 00H
$SG111469 DB	'p010', 00H
	ORG $+3
$SG111470 DB	'yuv422(9bit)', 00H
	ORG $+3
$SG111471 DB	'yuv422(10bit)', 00H
	ORG $+2
$SG111472 DB	'yuv422(12bit)', 00H
	ORG $+2
$SG111473 DB	'yuv422(14bit)', 00H
	ORG $+2
$SG111474 DB	'yuv422(16bit)', 00H
	ORG $+2
$SG111475 DB	'p210', 00H
	ORG $+3
$SG111476 DB	'yuv444(9bit)', 00H
	ORG $+3
$SG111477 DB	'yuv444(10bit)', 00H
	ORG $+2
$SG111478 DB	'yuv444(12bit)', 00H
	ORG $+2
$SG111479 DB	'yuv444(14bit)', 00H
	ORG $+2
$SG111480 DB	'yuv444(16bit)', 00H
	ORG $+2
$SG111481 DB	'yuva444', 00H
$SG111482 DB	'yuva444(16bit)', 00H
	ORG $+1
$SG111483 DB	'rgb24r', 00H
	ORG $+1
$SG111484 DB	'rgb32r', 00H
	ORG $+1
$SG111485 DB	'rgb24', 00H
	ORG $+2
$SG111486 DB	'rgb32', 00H
	ORG $+2
$SG111487 DB	'bgr24', 00H
	ORG $+2
$SG111488 DB	'bgr32', 00H
	ORG $+2
$SG111489 DB	'rgb', 00H
$SG111490 DB	'rgba', 00H
	ORG $+3
$SG111491 DB	'gbr', 00H
$SG111492 DB	'gbra', 00H
	ORG $+3
$SG111493 DB	'yc48', 00H
	ORG $+3
$SG111494 DB	'y8', 00H
	ORG $+1
$SG111495 DB	'yc16', 00H
	ORG $+3
$SG112427 DB	'H.264/AVC', 00H
	ORG $+2
$SG112429 DB	'H.265/HEVC', 00H
	ORG $+1
$SG112431 DB	'MPEG2', 00H
	ORG $+2
$SG112433 DB	'MPEG1', 00H
	ORG $+2
$SG112435 DB	'VC-1', 00H
	ORG $+3
$SG112437 DB	'MPEG4', 00H
	ORG $+2
$SG112439 DB	'VP8', 00H
$SG112441 DB	'VP9', 00H
$SG112443 DB	'unknown', 00H
$SG112550 DB	'unknown', 00H
?list_colormatrix@@3QBUCX_DESC@@B DD FLAT:$SG113045	; list_colormatrix
	DD	02H
	DD	FLAT:$SG113046
	DD	07fffffffH
	DD	FLAT:$SG113047
	DD	01H
	DD	FLAT:$SG113048
	DD	06H
	DD	FLAT:$SG113049
	DD	05H
	DD	FLAT:$SG113050
	DD	07H
	DD	FLAT:$SG113051
	DD	08H
	DD	FLAT:$SG113052
	DD	04H
	DD	FLAT:$SG113053
	DD	00H
	DD	FLAT:$SG113054
	DD	09H
	DD	FLAT:$SG113055
	DD	0aH
	DD	FLAT:$SG113056
	DD	0cH
	DD	FLAT:$SG113057
	DD	0dH
	DD	FLAT:$SG113058
	DD	0eH
	DD	FLAT:$SG113059
	DD	0fH
	DD	00H
	DD	00H
$SG113045 DB	'undef', 00H
	ORG $+2
$SG113046 DB	'auto', 00H
	ORG $+3
$SG113047 DB	'bt709', 00H
	ORG $+2
$SG113048 DB	'smpte170m', 00H
	ORG $+2
$SG113049 DB	'bt470bg', 00H
$SG113050 DB	'smpte240m', 00H
	ORG $+2
$SG113051 DB	'YCgCo', 00H
	ORG $+2
$SG113052 DB	'fcc', 00H
$SG113053 DB	'GBR', 00H
$SG113054 DB	'bt2020nc', 00H
	ORG $+3
$SG113055 DB	'bt2020c', 00H
$SG113056 DB	'derived-ncl', 00H
$SG113057 DB	'derived-cl', 00H
	ORG $+1
$SG113058 DB	'ictco', 00H
	ORG $+2
$SG113059 DB	'2100-lms', 00H
	ORG $+3
?list_transfer@@3QBUCX_DESC@@B DD FLAT:$SG113200	; list_transfer
	DD	02H
	DD	FLAT:$SG113201
	DD	07fffffffH
	DD	FLAT:$SG113202
	DD	01H
	DD	FLAT:$SG113203
	DD	06H
	DD	FLAT:$SG113204
	DD	04H
	DD	FLAT:$SG113205
	DD	05H
	DD	FLAT:$SG113206
	DD	07H
	DD	FLAT:$SG113207
	DD	08H
	DD	FLAT:$SG113208
	DD	09H
	DD	FLAT:$SG113209
	DD	0aH
	DD	FLAT:$SG113210
	DD	0bH
	DD	FLAT:$SG113211
	DD	0cH
	DD	FLAT:$SG113212
	DD	0dH
	DD	FLAT:$SG113213
	DD	0eH
	DD	FLAT:$SG113214
	DD	0fH
	DD	FLAT:$SG113215
	DD	010H
	DD	FLAT:$SG113216
	DD	011H
	DD	FLAT:$SG113217
	DD	012H
	DD	00H
	DD	00H
$SG113200 DB	'undef', 00H
	ORG $+2
$SG113201 DB	'auto', 00H
	ORG $+3
$SG113202 DB	'bt709', 00H
	ORG $+2
$SG113203 DB	'smpte170m', 00H
	ORG $+2
$SG113204 DB	'bt470m', 00H
	ORG $+1
$SG113205 DB	'bt470bg', 00H
$SG113206 DB	'smpte240m', 00H
	ORG $+2
$SG113207 DB	'linear', 00H
	ORG $+1
$SG113208 DB	'log100', 00H
	ORG $+1
$SG113209 DB	'log316', 00H
	ORG $+1
$SG113210 DB	'iec61966-2-4', 00H
	ORG $+3
$SG113211 DB	'bt1361e', 00H
$SG113212 DB	'iec61966-2-1', 00H
	ORG $+3
$SG113213 DB	'bt2020-10', 00H
	ORG $+2
$SG113214 DB	'bt2020-12', 00H
	ORG $+2
$SG113215 DB	'smpte2084', 00H
	ORG $+2
$SG113216 DB	'smpte428', 00H
	ORG $+3
$SG113217 DB	'arib-srd-b67', 00H
	ORG $+3
?list_colorprim@@3QBUCX_DESC@@B DD FLAT:$SG113349	; list_colorprim
	DD	02H
	DD	FLAT:$SG113350
	DD	07fffffffH
	DD	FLAT:$SG113351
	DD	01H
	DD	FLAT:$SG113352
	DD	06H
	DD	FLAT:$SG113353
	DD	04H
	DD	FLAT:$SG113354
	DD	05H
	DD	FLAT:$SG113355
	DD	07H
	DD	FLAT:$SG113356
	DD	08H
	DD	FLAT:$SG113357
	DD	09H
	DD	FLAT:$SG113358
	DD	0aH
	DD	FLAT:$SG113359
	DD	0bH
	DD	FLAT:$SG113360
	DD	0cH
	DD	FLAT:$SG113361
	DD	0dH
	DD	00H
	DD	00H
$SG113349 DB	'undef', 00H
	ORG $+2
$SG113350 DB	'auto', 00H
	ORG $+3
$SG113351 DB	'bt709', 00H
	ORG $+2
$SG113352 DB	'smpte170m', 00H
	ORG $+2
$SG113353 DB	'bt470m', 00H
	ORG $+1
$SG113354 DB	'bt470bg', 00H
$SG113355 DB	'smpte240m', 00H
	ORG $+2
$SG113356 DB	'film', 00H
	ORG $+3
$SG113357 DB	'bt2020', 00H
	ORG $+1
$SG113358 DB	'st428', 00H
	ORG $+2
$SG113359 DB	'st431-2', 00H
$SG113360 DB	'st432-1', 00H
$SG113361 DB	'ebu3213-e', 00H
	ORG $+2
?list_videoformat@@3QBUCX_DESC@@B DD FLAT:$SG113363	; list_videoformat
	DD	05H
	DD	FLAT:$SG113364
	DD	02H
	DD	FLAT:$SG113365
	DD	00H
	DD	FLAT:$SG113366
	DD	01H
	DD	FLAT:$SG113367
	DD	03H
	DD	FLAT:$SG113368
	DD	04H
	DD	00H
	DD	00H
$SG113363 DB	'undef', 00H
	ORG $+2
$SG113364 DB	'ntsc', 00H
	ORG $+3
$SG113365 DB	'component', 00H
	ORG $+2
$SG113366 DB	'pal', 00H
$SG113367 DB	'secam', 00H
	ORG $+2
$SG113368 DB	'mac', 00H
$SG113370 DB	'0', 00H
	ORG $+2
$SG113371 DB	'1', 00H
	ORG $+2
$SG113372 DB	'2', 00H
	ORG $+2
$SG113373 DB	'3', 00H
	ORG $+2
$SG113374 DB	'4', 00H
	ORG $+2
$SG113375 DB	'5', 00H
	ORG $+2
$SG113377 DB	'limited', 00H
$SG113378 DB	'full', 00H
	ORG $+3
$SG113379 DB	'tv', 00H
	ORG $+1
$SG113380 DB	'pc', 00H
	ORG $+1
$SG114462 DB	'trace', 00H
	ORG $+2
$SG114463 DB	'debug', 00H
	ORG $+2
$SG114464 DB	'more', 00H
	ORG $+3
$SG114465 DB	'info', 00H
	ORG $+3
$SG114466 DB	'warn', 00H
	ORG $+3
$SG114467 DB	'error', 00H
	ORG $+2
$SG114469 DB	'cfr', 00H
$SG114470 DB	'vfr', 00H
$SG114471 DB	'forcecfr', 00H
	ORG $+3
$SG114473 DB	'swr', 00H
$SG114474 DB	'soxr', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_c_l
PUBLIC	_vswprintf
PUBLIC	__vscwprintf_l
PUBLIC	__vscwprintf
PUBLIC	?vswprintf@@YAHQA_WQB_WPAD@Z			; vswprintf
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	_vsprintf
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_wmemchr
PUBLIC	_wmemcmp
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z	; std::_WChar_traits<wchar_t>::compare
PUBLIC	?length@?$_WChar_traits@_W@std@@SAIPB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::copy
PUBLIC	?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z	; std::_WChar_traits<wchar_t>::find
PUBLIC	?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::move
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
PUBLIC	?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
PUBLIC	?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Move_assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Move_assign
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents
PUBLIC	?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
PUBLIC	?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace
PUBLIC	?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
PUBLIC	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
PUBLIC	?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_first_not_of
PUBLIC	?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_last_not_of
PUBLIC	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
PUBLIC	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
PUBLIC	__tcschr
PUBLIC	__tcscmp
PUBLIC	__tcsicmp
PUBLIC	?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_string
PUBLIC	?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z ; wstring_to_string
PUBLIC	?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; wstring_to_string
PUBLIC	?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; char_to_wstring
PUBLIC	?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; char_to_wstring
PUBLIC	?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; char_to_wstring
PUBLIC	?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ ; strsprintf
PUBLIC	?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ; str_replace
PUBLIC	?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; GetFullPath
PUBLIC	?rgy_get_filesize@@YA_NPB_WPA_K@Z		; rgy_get_filesize
PUBLIC	?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; PathRemoveFileSpecFixed
PUBLIC	?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z ; PathRemoveExtensionS
PUBLIC	?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z ; PathCombineS
PUBLIC	?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z ; PathCombineS
PUBLIC	?CreateDirectoryRecursive@@YA_NPB_W@Z		; CreateDirectoryRecursive
PUBLIC	?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; get_file_list
PUBLIC	?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; getExeDir
PUBLIC	?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; tchar_to_wstring
PUBLIC	?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; tchar_to_wstring
PUBLIC	?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; tchar_to_string
PUBLIC	?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; tchar_to_string
PUBLIC	?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z ; tchar_to_string
PUBLIC	?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
PUBLIC	?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
PUBLIC	?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z ; char_to_tstring
PUBLIC	?wstring_to_tstring@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_tstring
PUBLIC	?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z ; wstring_to_tstring
PUBLIC	?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; wstring_to_tstring
PUBLIC	?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
PUBLIC	?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z ; split
PUBLIC	?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z ; split
PUBLIC	?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ; lstrip
PUBLIC	?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ; rstrip
PUBLIC	?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ; trim
PUBLIC	?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ; lstrip
PUBLIC	?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ; rstrip
PUBLIC	?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ; trim
PUBLIC	?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z ; str_replace
PUBLIC	?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetFullPath
PUBLIC	?rgy_get_filesize@@YA_NPBDPA_K@Z		; rgy_get_filesize
PUBLIC	?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; PathRemoveFileSpecFixed
PUBLIC	?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; PathRemoveExtensionS
PUBLIC	?CreateDirectoryRecursive@@YA_NPBD@Z		; CreateDirectoryRecursive
PUBLIC	?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; print_time
PUBLIC	?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z ; check_ext
PUBLIC	?check_ext@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBDV?$allocator@PBD@std@@@2@@Z ; check_ext
PUBLIC	?rgy_print_stderr@@YAHHPBDPAX@Z			; rgy_print_stderr
PUBLIC	?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z ; getOSVersion
PUBLIC	?rgy_is_64bit_os@@YAHXZ				; rgy_is_64bit_os
PUBLIC	?getPhysicalRamSize@@YA_KPA_K@Z			; getPhysicalRamSize
PUBLIC	?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; getEnviromentInfo
PUBLIC	?check_OS_Win8orLater@@YAHXZ			; check_OS_Win8orLater
PUBLIC	?malloc_degeneracy@@YAIPAPAXII@Z		; malloc_degeneracy
PUBLIC	??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
PUBLIC	??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
PUBLIC	??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
PUBLIC	?get_dar_pixels@@YAXPAI0HH@Z			; get_dar_pixels
PUBLIC	?get_sar@@YA?AU?$pair@HH@std@@IIII@Z		; get_sar
PUBLIC	?adjust_sar@@YAXPAH0HH@Z			; adjust_sar
PUBLIC	?get_h264_sar_idx@@YAHU?$pair@HH@std@@@Z	; get_h264_sar_idx
PUBLIC	?get_h264_sar@@YA?AU?$pair@HH@std@@H@Z		; get_h264_sar
PUBLIC	??0AudioSelect@@QAE@XZ				; AudioSelect::AudioSelect
PUBLIC	??0SubtitleSelect@@QAE@XZ			; SubtitleSelect::SubtitleSelect
PUBLIC	??0DataSelect@@QAE@XZ				; DataSelect::DataSelect
PUBLIC	?rgy_avx_dummy_if_avail@@YAHH@Z			; rgy_avx_dummy_if_avail
PUBLIC	??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
PUBLIC	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
PUBLIC	?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ; std::vector<char,std::allocator<char> >::_Ufill
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
PUBLIC	?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
PUBLIC	?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
PUBLIC	??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
PUBLIC	?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
PUBLIC	?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
PUBLIC	?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
PUBLIC	?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
PUBLIC	?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
PUBLIC	?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
PUBLIC	?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
PUBLIC	?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
PUBLIC	?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
PUBLIC	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?_Move_construct@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Move_construct
PUBLIC	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
PUBLIC	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
PUBLIC	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
PUBLIC	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::capacity
PUBLIC	?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Orphan_range
PUBLIC	?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
PUBLIC	?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
PUBLIC	?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
PUBLIC	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
PUBLIC	?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
PUBLIC	?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iterator_offset
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; PathGetRoot
PUBLIC	?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; PathGetRoot
PUBLIC	??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
PUBLIC	?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
PUBLIC	??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z ; vector_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	?IsWindowsVersionOrGreater@@YA_NGGG@Z		; IsWindowsVersionOrGreater
PUBLIC	?IsWindows8OrGreater@@YA_NXZ			; IsWindows8OrGreater
PUBLIC	?deallocate@?$allocator@N@std@@QAEXQANI@Z	; std::allocator<double>::deallocate
PUBLIC	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
PUBLIC	?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::begin
PUBLIC	?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::end
PUBLIC	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy
PUBLIC	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy
PUBLIC	?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
PUBLIC	?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@1@0@Z ; std::_Verify_range
PUBLIC	?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEXPBN@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Seek_to
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEPANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Unwrapped
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
PUBLIC	??$make_pair@ABHABH@std@@YA?AU?$pair@HH@0@ABH0@Z ; std::make_pair<int const &,int const &>
PUBLIC	??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z	; std::make_pair<int,int>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
PUBLIC	??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
PUBLIC	??$emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Emplace_back_with_unused_capacity@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$emplace_back@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
PUBLIC	??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$move@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
PUBLIC	??$?0V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><>
PUBLIC	??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z	; std::_Unfancy_maybe_null<wchar_t>
PUBLIC	??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
PUBLIC	??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
PUBLIC	??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>
PUBLIC	??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z	; std::_Unfancy_maybe_null<char>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
PUBLIC	??$_Traits_find@U?$char_traits@_W@std@@@std@@YAIQB_WII0I@Z ; std::_Traits_find<std::char_traits<wchar_t> >
PUBLIC	??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::move<std::allocator<wchar_t> &>
PUBLIC	??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_of<std::char_traits<char> >
PUBLIC	??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_of<std::char_traits<char> >
PUBLIC	??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ; std::_Traits_find<std::char_traits<char> >
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@0@Z ; std::_Verify_range
PUBLIC	?_Unwrapped@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Unwrapped
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z	; std::_Destroy_in_place<wchar_t *>
PUBLIC	??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z ; <lambda_150d3e25e2edcb1375af403c31441d08>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_150d3e25e2edcb1375af403c31441d08>,unsigned int,unsigned int,wchar_t const *,unsigned int>
PUBLIC	??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
PUBLIC	??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
PUBLIC	??$_Unfancy@_W@std@@YAPA_WPA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ; std::_Pocma<std::allocator<wchar_t> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
PUBLIC	??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@_W@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > const >
PUBLIC	??$_Get_size_of_n@$01@std@@YAII@Z		; std::_Get_size_of_n<2>
PUBLIC	??$forward@H@std@@YA$$QAHAAH@Z			; std::forward<int>
PUBLIC	??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
PUBLIC	??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,0>
PUBLIC	??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &,0>
PUBLIC	??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
PUBLIC	??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &,0>
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void>
PUBLIC	??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::less<void> >
PUBLIC	??$forward@ABH@std@@YAABHABH@Z			; std::forward<int const &>
PUBLIC	??$?0HH$0A@@?$pair@HH@std@@QAE@ABH0@Z		; std::pair<int,int>::pair<int,int><int,int,0>
PUBLIC	??$?0HH$0A@@?$pair@HH@std@@QAE@$$QAH0@Z		; std::pair<int,int>::pair<int,int><int,int,0>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$forward@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ; std::forward<std::allocator<wchar_t> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
PUBLIC	?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z ; std::_String_bitmap<wchar_t,0>::_Mark
PUBLIC	?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z	; std::_String_bitmap<wchar_t,0>::_Match
PUBLIC	??0?$_String_bitmap@_W$0A@@std@@QAE@XZ		; std::_String_bitmap<wchar_t,0>::_String_bitmap<wchar_t,0>
PUBLIC	??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::forward<std::allocator<wchar_t> >
PUBLIC	?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z	; std::_String_bitmap<char,1>::_Mark
PUBLIC	?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z	; std::_String_bitmap<char,1>::_Match
PUBLIC	??0?$_String_bitmap@D$00@std@@QAE@XZ		; std::_String_bitmap<char,1>::_String_bitmap<char,1>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z		; std::addressof<wchar_t *>
PUBLIC	??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z		; std::forward<wchar_t * const &>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??$_Get_size_of_n@$0BM@@std@@YAII@Z		; std::_Get_size_of_n<28>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
PUBLIC	??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ; std::_Uninitialized_fill_n<std::allocator<char> >
PUBLIC	??$_Adl_verify_range@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,0>
PUBLIC	??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
PUBLIC	??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,0>
PUBLIC	??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z ; std::_Pass_fn<std::less<void>,0>
PUBLIC	??$_Max_element_unchecked@PANU?$less@X@std@@@std@@YAPANPAN0U?$less@X@0@@Z ; std::_Max_element_unchecked<double *,std::less<void> >
PUBLIC	??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@PAN@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@ABQAN@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,double *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
PUBLIC	??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Release
PUBLIC	??$_Emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
PUBLIC	??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>
PUBLIC	??$_Unfancy@N@std@@YAPANPAN@Z			; std::_Unfancy<double>
PUBLIC	??$distance@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
PUBLIC	??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
PUBLIC	??$_Move_backward_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move_backward_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Move_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z ; std::_Debug_lt_pred<std::less<void> &,double &,double &,0>
PUBLIC	??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z		; std::less<void>::operator()<double &,double &>
PUBLIC	??$forward@AB_W@std@@YAAB_WAB_W@Z		; std::forward<wchar_t const &>
PUBLIC	??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
PUBLIC	??$_Refancy@PAN$0A@@std@@YAPANPAN@Z		; std::_Refancy<double *,0>
PUBLIC	??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
PUBLIC	??$_Emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0CF@PAGANAHI@?$CFs?3?5Read?3?$CF7?42fGB?1s?0?5Write?3?$CF7?42f@ ; `string'
PUBLIC	??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_0CF@NNBLLPGF@vector?5insert?5iterator?5outside?5@ ; `string'
PUBLIC	??_C@_1BLK@GBKABDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EO@HCJPCNBE@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5@ ; `string'
PUBLIC	??_C@_0DI@PBEELKIF@vector?5iterators?5in?5range?5are?5f@ ; `string'
PUBLIC	??_C@_1HE@KBMFDAFB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0CB@LIAHLBAO@vector?5iterator?5range?5transpose@ ; `string'
PUBLIC	??_C@_1EG@ODKBEHFN@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f50000000000000
PUBLIC	__real@3fe0000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vswprintf:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	_abs:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___wfullpath:PROC
EXTRN	__imp___fullpath:PROC
EXTRN	_memchr:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	__imp___mbschr:PROC
EXTRN	__imp___mbscmp:PROC
EXTRN	__imp___mbsicmp:PROC
EXTRN	__imp__VerSetConditionMask@16:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__CreateDirectoryW@8:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	__imp__GetFileAttributesExA@12:PROC
EXTRN	__imp__GetFileAttributesExW@12:PROC
EXTRN	__imp__GlobalMemoryStatusEx@4:PROC
EXTRN	__imp__GetVersionExW@4:PROC
EXTRN	__imp__GetNativeSystemInfo@4:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__VerifyVersionInfoW@16:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__GetConsoleScreenBufferInfo@8:PROC
EXTRN	__imp__SetConsoleTextAttribute@8:PROC
EXTRN	__imp__PathCombineA@12:PROC
EXTRN	__imp__PathCombineW@12:PROC
EXTRN	__imp__PathFindExtensionA@4:PROC
EXTRN	__imp__PathFindExtensionW@4:PROC
EXTRN	__imp__PathFindFileNameA@4:PROC
EXTRN	__imp__PathFindFileNameW@4:PROC
EXTRN	__imp__PathIsDirectoryA@4:PROC
EXTRN	__imp__PathIsDirectoryW@4:PROC
EXTRN	__imp__PathIsRelativeA@4:PROC
EXTRN	__imp__PathIsRelativeW@4:PROC
EXTRN	__imp__PathStripToRootA@4:PROC
EXTRN	__imp__PathStripToRootW@4:PROC
EXTRN	?get_cpu_info@@YA_NPAUcpu_info_t@@@Z:PROC	; get_cpu_info
EXTRN	?getCPUInfo@@YAHPADIPAVMFXVideoSession@@@Z:PROC	; getCPUInfo
EXTRN	?getGPUInfo@@YAHPBDPADI_N@Z:PROC		; getGPUInfo
EXTRN	?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z:PROC ; ram_speed_mt_list
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B DB 038H DUP (?) ; CspMatrixList
?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B DB 03cH DUP (?) ; CspTransferList
?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B DB 030H DUP (?) ; CspColorprimList
_BSS	ENDS
CRT$XCU	SEGMENT
?CspMatrixList$initializer$@@3P6AXXZA DD FLAT:??__ECspMatrixList@@YAXXZ ; CspMatrixList$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f50000000000000
CONST	SEGMENT
__real@3f50000000000000 DQ 03f50000000000000r	; 0.000976563
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
CONST	SEGMENT
??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, '_', 00H, 'l', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@ODKBEHFN@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EG@ODKBEHFN@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 's', 00H, 'p', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'd', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LIAHLBAO@vector?5iterator?5range?5transpose@
CONST	SEGMENT
??_C@_0CB@LIAHLBAO@vector?5iterator?5range?5transpose@ DB 'vector iterato'
	DB	'r range transposed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@KBMFDAFB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1HE@KBMFDAFB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' '
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PBEELKIF@vector?5iterators?5in?5range?5are?5f@
CONST	SEGMENT
??_C@_0DI@PBEELKIF@vector?5iterators?5in?5range?5are?5f@ DB 'vector itera'
	DB	'tors in range are from different containers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@HCJPCNBE@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5@
CONST	SEGMENT
??_C@_1EO@HCJPCNBE@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, 's', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BLK@GBKABDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1BLK@GBKABDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i'
	DB	00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '_', 00H, 't', 00H, 'r', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, 's', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'i', 00H
	DB	'n', 00H, 's', 00H, 'e', 00H, 'r', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NNBLLPGF@vector?5insert?5iterator?5outside?5@
CONST	SEGMENT
??_C@_0CF@NNBLLPGF@vector?5insert?5iterator?5outside?5@ DB 'vector insert'
	DB	' iterator outside range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
CONST	SEGMENT
??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@ DB 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'm', 00H, 'a', 00H, 'x'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H
	DB	'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\algorithm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.23.28105\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PAGANAHI@?$CFs?3?5Read?3?$CF7?42fGB?1s?0?5Write?3?$CF7?42f@
CONST	SEGMENT
??_C@_0CF@PAGANAHI@?$CFs?3?5Read?3?$CF7?42fGB?1s?0?5Write?3?$CF7?42f@ DB '%'
	DB	's: Read:%7.2fGB/s, Write:%7.2fGB/s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?LOG_COLOR@?1??rgy_print_stderr@@YAHHPBDPAX@Z@4QBGB
CONST	SEGMENT
?LOG_COLOR@?1??rgy_print_stderr@@YAHHPBDPAX@Z@4QBGB DW 0bH ; `rgy_print_stderr'::`2'::LOG_COLOR
	DW	0aH
	DW	0fH
	DW	0fH
	DW	0eH
	DW	0cH
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '3', 00H, '.', 00H, '2', 00H, '8', 00H, '1', 00H
	DB	'0', 00H, '5', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.23.28105\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$15 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$6
__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$14 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$7
__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$13 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$2
__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$12 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$3
__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$11 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$0
__ehfuncinfo$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
	DD	05H
	DD	FLAT:__tryblocktable$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$10
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	00H
	DD	08H
	DD	00H
__tryblocktable$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$11
	DD	05H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$12
	DD	03H
	DD	03H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$13
	DD	09H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$14
	DD	07H
	DD	07H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$15
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z$0
__ehfuncinfo$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$1
__ehfuncinfo$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z$0
__ehfuncinfo$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z$0
__ehfuncinfo$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0
__ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z$0
__ehfuncinfo$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0
__ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$1
__ehfuncinfo$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$0
__unwindtable$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$2 DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$0
__unwindtable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$max@I@std@@YAABIABI0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0
__ehfuncinfo$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0
__ehfuncinfo$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__ehfuncinfo$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0
__ehfuncinfo$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z$0
__ehfuncinfo$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0
__ehfuncinfo$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?PathRootExists@@YA_NPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRootExists@@YA_NPB_W@Z$0
__unwindtable$?PathRootExists@@YA_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRootExists@@YA_NPBD@Z$0
__unwindtable$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z$0
__unwindtable$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z$0
__unwindtable$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0
__unwindtable$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$0
__unwindtable$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z$0
__unwindtable$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0
__unwindtable$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0
__unwindtable$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
__unwindtable$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__unwindtable$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z$0
__unwindtable$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$0
__unwindtable$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$1
__unwindtable$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$0
__unwindtable$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1
__unwindtable$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1
__unwindtable$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$0
__unwindtable$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1
__unwindtable$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1
__unwindtable$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$1
__unwindtable$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z$0
__unwindtable$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z$0
__unwindtable$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1
__unwindtable$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1
__unwindtable$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z$0
__unwindtable$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$0
__unwindtable$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$1
__unwindtable$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$0
__unwindtable$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$1
__unwindtable$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1
__unwindtable$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__unwindtable$??0SubtitleSelect@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SubtitleSelect@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SubtitleSelect@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SubtitleSelect@@QAE@XZ$2
__unwindtable$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$1
__unwindtable$?CreateDirectoryRecursive@@YA_NPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPBD@Z$1
__unwindtable$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1
__unwindtable$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1
__unwindtable$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1
__unwindtable$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1
__unwindtable$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1
__unwindtable$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1
__unwindtable$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$2
__unwindtable$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__unwindtable$?CreateDirectoryRecursive@@YA_NPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDirectoryRecursive@@YA_NPB_W@Z$1
__unwindtable$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$2
__unwindtable$?rgy_print_stderr@@YAHHPBDPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$3
__ehfuncinfo$?PathRootExists@@YA_NPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PathRootExists@@YA_NPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathRootExists@@YA_NPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PathRootExists@@YA_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??0SubtitleSelect@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0SubtitleSelect@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$??0AudioSelect@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0AudioSelect@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?rgy_print_stderr@@YAHHPBDPAX@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?rgy_print_stderr@@YAHHPBDPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?CreateDirectoryRecursive@@YA_NPBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateDirectoryRecursive@@YA_NPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?CreateDirectoryRecursive@@YA_NPB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateDirectoryRecursive@@YA_NPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__unwindtable$??0AudioSelect@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0AudioSelect@@QAE@XZ$6
__unwindtable$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$5
__unwindtable$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$5
__unwindtable$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$5
__unwindtable$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0
__ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z$0
__ehfuncinfo$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base12@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base12@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0
__ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_array_new_length@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0
__ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_array_new_length@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_array_new_length@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0
__ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_array_new_length@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1bad_alloc@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0
__ehfuncinfo$??1bad_alloc@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1bad_alloc@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0bad_alloc@std@@AAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0
__ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0bad_alloc@std@@AAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
CRT$XCU	SEGMENT
?CspTransferList$initializer$@@3P6AXXZA DD FLAT:??__ECspTransferList@@YAXXZ ; CspTransferList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?CspColorprimList$initializer$@@3P6AXXZA DD FLAT:??__ECspColorprimList@@YAXXZ ; CspColorprimList$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 1c	 add	 eax, 28			; 0000001cH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1600 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1601 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1602 :     // note: only called internally from elsewhere in the STL
; 1603 :     using _Ptrval = typename _Alloc::value_type*;
; 1604 : 
; 1605 :     auto _UFirst      = _Get_unwrapped(_First);

  0003f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
  00048	83 c4 04	 add	 esp, 4
  0004b	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1606 :     const auto _ULast = _Get_unwrapped(_Last);

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??$_Get_unwrapped@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1607 : 
; 1608 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1609 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1610 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1611 :         _Dest += _ULast - _UFirst;
; 1612 :         (void) _Al;
; 1613 :     } else {
; 1614 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  0005d	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00060	52		 push	 edx
  00061	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00064	50		 push	 eax
  00065	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1615 :         for (; _UFirst != _ULast; ++_UFirst) {

  00074	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00076	8b 4d f0	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00079	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0007c	89 4d f0	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  0007f	8b 55 f0	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00082	3b 55 ec	 cmp	 edx, DWORD PTR __ULast$[ebp]
  00085	74 0e		 je	 SHORT $LN3@Uninitiali

; 1616 :             _Backout._Emplace_back(*_UFirst);

  00087	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>

; 1617 :         }

  00093	eb e1		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1618 : 
; 1619 :         _Dest = _Backout._Release();

  00095	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00098	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
  0009d	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax

; 1620 :     }

  000a0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1621 : 
; 1622 :     return _Dest;

  000af	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1623 : }

  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cd	59		 pop	 ecx
  000ce	83 c4 28	 add	 esp, 40			; 00000028H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN10@Uninitiali:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e8	0c 00 00 00	 DD	 12			; 0000000cH
  000ec	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	42		 DB	 66			; 00000042H
  000f2	61		 DB	 97			; 00000061H
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	6f		 DB	 111			; 0000006fH
  000f6	75		 DB	 117			; 00000075H
  000f7	74		 DB	 116			; 00000074H
  000f8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Refancy@PAN$0A@@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAN$0A@@std@@YAPANPAN@Z PROC		; std::_Refancy<double *,0>, COMDAT

; 315  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 316  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 317  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAN$0A@@std@@YAPANPAN@Z ENDP		; std::_Refancy<double *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 02		 push	 2
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@AB_W@std@@YAAB_WAB_W@Z ; std::forward<wchar_t const &>
  00025	83 c4 04	 add	 esp, 4
  00028	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  0002b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0002e	66 89 02	 mov	 WORD PTR [edx], ax

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AB_W@std@@YAAB_WAB_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AB_W@std@@YAAB_WAB_W@Z PROC			; std::forward<wchar_t const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AB_W@std@@YAAB_WAB_W@Z ENDP			; std::forward<wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z PROC		; std::less<void>::operator()<double &,double &>, COMDAT
; _this$ = ecx

; 244  :             static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) { // transparently apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001d	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00021	66 0f 2f 01	 comisd	 xmm0, QWORD PTR [ecx]
  00025	76 09		 jbe	 SHORT $LN3@operator
  00027	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0002e	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00037	8a 45 f8	 mov	 al, BYTE PTR tv65[ebp]

; 246  :     }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z ENDP		; std::less<void>::operator()<double &,double &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z
_TEXT	SEGMENT
__Result$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z PROC ; std::_Debug_lt_pred<std::less<void> &,double &,double &,0>, COMDAT

; 617  :     _NOEXCEPT_COND(noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 618  :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 619  :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00032	51		 push	 ecx
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00036	e8 00 00 00 00	 call	 ??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z ; std::less<void>::operator()<double &,double &>
  0003b	88 45 f3	 mov	 BYTE PTR __Result$[ebp], al

; 620  :     if (_Result) {

  0003e	0f b6 55 f3	 movzx	 edx, BYTE PTR __Result$[ebp]
  00042	85 d2		 test	 edx, edx
  00044	74 79		 je	 SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 621  :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

  00046	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00051	e8 00 00 00 00	 call	 ??$?RAANAAN@?$less@X@std@@QBE_NAAN0@Z ; std::less<void>::operator()<double &,double &>
  00056	0f b6 d0	 movzx	 edx, al
  00059	85 d2		 test	 edx, edx
  0005b	75 02		 jne	 SHORT $LN7@Debug_lt_p
  0005d	eb 5c		 jmp	 SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
  0005f	8b f4		 mov	 esi, esp
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0006b	6a 00		 push	 0
  0006d	68 6d 02 00 00	 push	 621			; 0000026dH
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@GDKIGMBO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00077	6a 02		 push	 2
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0007f	83 c4 18	 add	 esp, 24			; 00000018H
  00082	3b f4		 cmp	 esi, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 01		 jne	 SHORT $LN12@Debug_lt_p
  0008e	cc		 int	 3
$LN12@Debug_lt_p:
  0008f	8b f4		 mov	 esi, esp
  00091	6a 00		 push	 0
  00093	68 6d 02 00 00	 push	 621			; 0000026dH
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_1NC@OIIHGCJJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	33 c9		 xor	 ecx, ecx
  000b9	75 a4		 jne	 SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
  000bb	33 d2		 xor	 edx, edx
  000bd	75 87		 jne	 SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 622  :     }
; 623  : 
; 624  :     return _Result;

  000bf	8a 45 f3	 mov	 al, BYTE PTR __Result$[ebp]

; 625  : }

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5e		 pop	 esi
  000ce	83 c4 10	 add	 esp, 16			; 00000010H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z ENDP ; std::_Debug_lt_pred<std::less<void> &,double &,double &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Move_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z PROC ; std::_Move_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2056 : _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2057 :     // move [_First, _Last) to [_Dest, ...)
; 2058 :     // note: _Move_unchecked is called directly from elsewhere in the STL
; 2059 :     if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
; 2060 :         return _Copy_memmove(_First, _Last, _Dest);
; 2061 :     } else {
; 2062 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00003	eb 12		 jmp	 SHORT $LN4@Move_unche
$LN2@Move_unche:
  00005	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00008	83 c0 1c	 add	 eax, 28			; 0000001cH
  0000b	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00011	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00014	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx
$LN4@Move_unche:
  00017	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001a	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0001d	74 17		 je	 SHORT $LN3@Move_unche

; 2063 :             *_Dest = _STD move(*_First);

  0001f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00028	83 c4 04	 add	 esp, 4
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 2064 :         }

  00034	eb cf		 jmp	 SHORT $LN2@Move_unche
$LN3@Move_unche:

; 2065 : 
; 2066 :         return _Dest;

  00036	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2067 :     }
; 2068 : }

  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??$_Move_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ENDP ; std::_Move_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z PROC ; std::_Move_backward_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 2136 : _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$LN2@Move_backw:

; 2137 :     // move [_First, _Last) backwards to [..., _Dest)
; 2138 :     // note: _Move_backward_unchecked is called directly from elsewhere in the STL
; 2139 :     if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
; 2140 :         return _Copy_backward_memmove(_First, _Last, _Dest);
; 2141 :     } else {
; 2142 :         while (_First != _Last) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00009	74 29		 je	 SHORT $LN3@Move_backw

; 2143 :             *--_Dest = _STD move(*--_Last);

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	83 e9 1c	 sub	 ecx, 28			; 0000001cH
  00011	89 4d 0c	 mov	 DWORD PTR __Last$[ebp], ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00017	83 ea 1c	 sub	 edx, 28			; 0000001cH
  0001a	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0002d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 2144 :         }

  00032	eb cf		 jmp	 SHORT $LN2@Move_backw
$LN3@Move_backw:

; 2145 : 
; 2146 :         return _Dest;

  00034	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2147 :     }
; 2148 : }

  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Move_backward_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ENDP ; std::_Move_backward_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>, COMDAT
; _this$ = ecx

; 1543 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1544 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1545 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$distance@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>, COMDAT

; 781  : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) { // return distance between iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 782  :     if constexpr (_Is_random_iter_v<_InIt>) {
; 783  :         return _Last - _First; // assume the iterator will do debug checking

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00009	99		 cdq
  0000a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0000f	f7 f9		 idiv	 ecx

; 784  :     } else {
; 785  :         _Adl_verify_range(_First, _Last);
; 786  :         auto _UFirst             = _Get_unwrapped(_First);
; 787  :         const auto _ULast        = _Get_unwrapped(_Last);
; 788  :         _Iter_diff_t<_InIt> _Off = 0;
; 789  :         for (; _UFirst != _ULast; ++_UFirst) {
; 790  :             ++_Off;
; 791  :         }
; 792  : 
; 793  :         return _Off;
; 794  :     }
; 795  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$distance@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@N@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@N@std@@YAPANPAN@Z PROC			; std::_Unfancy<double>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@N@std@@YAPANPAN@Z ENDP			; std::_Unfancy<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@AB_W@std@@YAAB_WAB_W@Z ; std::forward<wchar_t const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@_WAB_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QA_WAB_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t,wchar_t const &>
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 02	 add	 eax, 2
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 1c	 add	 eax, 28			; 0000001cH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1580 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1581 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00027	83 c4 04	 add	 esp, 4
  0002a	50		 push	 eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1582 :         ++_Last;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	83 c0 1c	 add	 eax, 28			; 0000001cH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1583 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release, COMDAT
; _this$ = ecx

; 1585 :     pointer _Release() { // suppress any exception handling backout and return _Last

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1586 :         _First = _Last;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	89 10		 mov	 DWORD PTR [eax], edx

; 1587 :         return _Last;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1588 :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1575 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1576 :         _Destroy_range(_First, _Last, _Al);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1577 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1570 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 0c	 mov	 edx, DWORD PTR __Al_$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 275  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 277  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 751  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 752  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 753  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00013	83 c4 08	 add	 esp, 8

; 754  :     }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
_TEXT	SEGMENT
_c$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$rgy_gcd@H@@YAHHH@Z PROC				; rgy_gcd<int>

; 208  : static inline T rgy_gcd(T a, T b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 209  :     static_assert(std::is_integral<T>::value, "rgy_gcd is defined only for integer.");
; 210  :     if (a == 0) return b;

  0000b	83 7d 08 00	 cmp	 DWORD PTR _a$[ebp], 0
  0000f	75 05		 jne	 SHORT $LN4@rgy_gcd
  00011	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00014	eb 2c		 jmp	 SHORT $LN1@rgy_gcd
$LN4@rgy_gcd:

; 211  :     if (b == 0) return a;

  00016	83 7d 0c 00	 cmp	 DWORD PTR _b$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN2@rgy_gcd
  0001c	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0001f	eb 21		 jmp	 SHORT $LN1@rgy_gcd
$LN2@rgy_gcd:

; 212  :     T c;
; 213  :     while ((c = a % b) != 0)

  00021	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00024	99		 cdq
  00025	f7 7d 0c	 idiv	 DWORD PTR _b$[ebp]
  00028	89 55 fc	 mov	 DWORD PTR _c$[ebp], edx
  0002b	83 7d fc 00	 cmp	 DWORD PTR _c$[ebp], 0
  0002f	74 0e		 je	 SHORT $LN3@rgy_gcd

; 214  :         a = b, b = c;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00034	89 45 08	 mov	 DWORD PTR _a$[ebp], eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _c$[ebp]
  0003a	89 4d 0c	 mov	 DWORD PTR _b$[ebp], ecx
  0003d	eb e2		 jmp	 SHORT $LN2@rgy_gcd
$LN3@rgy_gcd:

; 215  :     return b;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
$LN1@rgy_gcd:

; 216  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$rgy_gcd@H@@YAHHH@Z ENDP				; rgy_gcd<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@PAN@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@ABQAN@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@PAN@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@ABQAN@Z PROC ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,double *>, COMDAT

; 415  : constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 417  :         _It._Seek_to(_UIt);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __UIt$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	51		 push	 ecx
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEXPBN@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Seek_to

; 418  :     } else {
; 419  :         _It = _UIt;
; 420  :     }
; 421  : }

  00011	3b ec		 cmp	 ebp, esp
  00013	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@PAN@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@ABQAN@Z ENDP ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$_Max_element_unchecked@PANU?$less@X@std@@@std@@YAPANPAN0U?$less@X@0@@Z
_TEXT	SEGMENT
__Found$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Max_element_unchecked@PANU?$less@X@std@@@std@@YAPANPAN0U?$less@X@0@@Z PROC ; std::_Max_element_unchecked<double *,std::less<void> >, COMDAT

; 4280 : constexpr _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred) { // find largest element, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 4281 :     _FwdIt _Found = _First;

  0000b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000e	89 45 fc	 mov	 DWORD PTR __Found$[ebp], eax

; 4282 :     if (_First != _Last) {

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00014	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00017	74 34		 je	 SHORT $LN4@Max_elemen
$LN2@Max_elemen:

; 4283 :         while (++_First != _Last) {

  00019	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001c	83 c2 08	 add	 edx, 8
  0001f	89 55 08	 mov	 DWORD PTR __First$[ebp], edx
  00022	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00025	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00028	74 23		 je	 SHORT $LN4@Max_elemen

; 4284 :             if (_DEBUG_LT_PRED(_Pred, *_Found, *_First)) {

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 fc	 mov	 edx, DWORD PTR __Found$[ebp]
  00031	52		 push	 edx
  00032	8d 45 10	 lea	 eax, DWORD PTR __Pred$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@AAU?$less@X@std@@AANAAN$0A@@std@@YA_NAAU?$less@X@0@AAN1@Z ; std::_Debug_lt_pred<std::less<void> &,double &,double &,0>
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	0f b6 c8	 movzx	 ecx, al
  00041	85 c9		 test	 ecx, ecx
  00043	74 06		 je	 SHORT $LN5@Max_elemen

; 4285 :                 _Found = _First;

  00045	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00048	89 55 fc	 mov	 DWORD PTR __Found$[ebp], edx
$LN5@Max_elemen:

; 4286 :             }
; 4287 :         }

  0004b	eb cc		 jmp	 SHORT $LN2@Max_elemen
$LN4@Max_elemen:

; 4288 :     }
; 4289 : 
; 4290 :     return _Found;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR __Found$[ebp]

; 4291 : }

  00050	83 c4 04	 add	 esp, 4
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??$_Max_element_unchecked@PANU?$less@X@std@@@std@@YAPANPAN0U?$less@X@0@@Z ENDP ; std::_Max_element_unchecked<double *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z PROC ; std::_Pass_fn<std::less<void>,0>, COMDAT

; 55   : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     return _Val;

  00003	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 57   : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z ENDP ; std::_Pass_fn<std::less<void>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,0>, COMDAT

; 257  : _NODISCARD constexpr auto _Get_unwrapped(const _Iter& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 259  :     return _It._Unwrapped();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00006	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEPANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Unwrapped

; 260  : }

  0000b	3b ec		 cmp	 ebp, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >, COMDAT

; 217  :     const _Iter& _First, const _Sentinel& _Last) { // check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 219  :         _Verify_range(_First, _Last);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@1@0@Z ; std::_Verify_range
  00010	83 c4 08	 add	 esp, 8

; 220  :     } else {
; 221  :         (void) _First; // TRANSITION, VSO#486357
; 222  :         (void) _Last; // TRANSITION, VSO#486357
; 223  :     }
; 224  : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Relocated$2 = -84					; size = 4
__Affected_elements$3 = -80				; size = 4
__Constructed_first$4 = -76				; size = 4
__Constructed_last$5 = -72				; size = 4
__Whereoff$6 = -68					; size = 4
__Newvec$7 = -64					; size = 4
__Newcapacity$8 = -60					; size = 4
__Newsize$9 = -56					; size = 4
__Oldsize$10 = -52					; size = 4
__Unused_capacity$ = -48				; size = 4
__Oldlast$ = -44					; size = 4
__Oldfirst$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__My_data$ = -32					; size = 4
__Count$ = -28						; size = 4
__Whereptr$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 12
__First$ = 20						; size = 4
__Last$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>, COMDAT
; _this$ = ecx

; 859  :     void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 44	 sub	 esp, 68			; 00000044H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0001c	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 860  :         // insert forward range [_First, _Last) at _Where
; 861  :         const pointer _Whereptr = _Where._Ptr;

  00047	8b 45 10	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0004a	89 45 e8	 mov	 DWORD PTR __Whereptr$[ebp], eax

; 862  :         const auto _Count       = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

  0004d	8b 4d 18	 mov	 ecx, DWORD PTR __Last$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 14	 mov	 edx, DWORD PTR __First$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ??$distance@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAHPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
  0005a	83 c4 08	 add	 esp, 8
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00063	83 c4 04	 add	 esp, 4
  00066	89 45 e4	 mov	 DWORD PTR __Count$[ebp], eax

; 863  : 
; 864  :         auto& _My_data   = _Mypair._Myval2;

  00069	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 865  :         pointer& _Mylast = _My_data._Mylast;

  0006f	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00072	83 c1 08	 add	 ecx, 8
  00075	89 4d dc	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 866  : 
; 867  :         const pointer _Oldfirst     = _My_data._Myfirst;

  00078	8b 55 e0	 mov	 edx, DWORD PTR __My_data$[ebp]
  0007b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007e	89 45 d8	 mov	 DWORD PTR __Oldfirst$[ebp], eax

; 868  :         const pointer _Oldlast      = _Mylast;

  00081	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00084	8b 11		 mov	 edx, DWORD PTR [ecx]
  00086	89 55 d4	 mov	 DWORD PTR __Oldlast$[ebp], edx

; 869  :         const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);

  00089	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008c	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0008f	2b 45 d4	 sub	 eax, DWORD PTR __Oldlast$[ebp]
  00092	99		 cdq
  00093	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00098	f7 f9		 idiv	 ecx
  0009a	89 45 d0	 mov	 DWORD PTR __Unused_capacity$[ebp], eax

; 870  : 
; 871  :         if (_Count == 0) { // nothing to do, avoid invalidating iterators

  0009d	83 7d e4 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000a1	75 05		 jne	 SHORT $LN2@Insert_ran
  000a3	e9 c8 03 00 00	 jmp	 $LN3@Insert_ran
$LN2@Insert_ran:

; 872  :         } else if (_Count > _Unused_capacity) { // reallocate

  000a8	8b 55 e4	 mov	 edx, DWORD PTR __Count$[ebp]
  000ab	3b 55 d0	 cmp	 edx, DWORD PTR __Unused_capacity$[ebp]
  000ae	0f 86 5e 01 00
	00		 jbe	 $LN4@Insert_ran

; 873  :             const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

  000b4	8b 45 d4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  000b7	2b 45 d8	 sub	 eax, DWORD PTR __Oldfirst$[ebp]
  000ba	99		 cdq
  000bb	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  000c0	f7 f9		 idiv	 ecx
  000c2	89 45 cc	 mov	 DWORD PTR __Oldsize$10[ebp], eax

; 874  : 
; 875  :             if (_Count > max_size() - _Oldsize) {

  000c5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  000cd	2b 45 cc	 sub	 eax, DWORD PTR __Oldsize$10[ebp]
  000d0	39 45 e4	 cmp	 DWORD PTR __Count$[ebp], eax
  000d3	76 05		 jbe	 SHORT $LN6@Insert_ran

; 876  :                 _Xlength();

  000d5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN6@Insert_ran:

; 877  :             }
; 878  : 
; 879  :             const size_type _Newsize     = _Oldsize + _Count;

  000da	8b 55 cc	 mov	 edx, DWORD PTR __Oldsize$10[ebp]
  000dd	03 55 e4	 add	 edx, DWORD PTR __Count$[ebp]
  000e0	89 55 c8	 mov	 DWORD PTR __Newsize$9[ebp], edx

; 880  :             const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000e3	8b 45 c8	 mov	 eax, DWORD PTR __Newsize$9[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
  000ef	89 45 c4	 mov	 DWORD PTR __Newcapacity$8[ebp], eax

; 881  : 
; 882  :             const pointer _Newvec           = _Getal().allocate(_Newcapacity);

  000f2	8b 4d c4	 mov	 ecx, DWORD PTR __Newcapacity$8[ebp]
  000f5	51		 push	 ecx
  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  000fe	8b c8		 mov	 ecx, eax
  00100	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
  00105	89 45 c0	 mov	 DWORD PTR __Newvec$7[ebp], eax

; 883  :             const auto _Whereoff            = static_cast<size_type>(_Whereptr - _Oldfirst);

  00108	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0010b	2b 45 d8	 sub	 eax, DWORD PTR __Oldfirst$[ebp]
  0010e	99		 cdq
  0010f	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00114	f7 f9		 idiv	 ecx
  00116	89 45 bc	 mov	 DWORD PTR __Whereoff$6[ebp], eax

; 884  :             const pointer _Constructed_last = _Newvec + _Whereoff + _Count;

  00119	6b 55 bc 1c	 imul	 edx, DWORD PTR __Whereoff$6[ebp], 28
  0011d	03 55 c0	 add	 edx, DWORD PTR __Newvec$7[ebp]
  00120	6b 45 e4 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  00124	03 d0		 add	 edx, eax
  00126	89 55 b8	 mov	 DWORD PTR __Constructed_last$5[ebp], edx

; 885  :             pointer _Constructed_first      = _Constructed_last;

  00129	8b 4d b8	 mov	 ecx, DWORD PTR __Constructed_last$5[ebp]
  0012c	89 4d b4	 mov	 DWORD PTR __Constructed_first$4[ebp], ecx

; 886  : 
; 887  :             _TRY_BEGIN

  0012f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 888  :             _Ucopy(_First, _Last, _Newvec + _Whereoff);

  00133	6b 55 bc 1c	 imul	 edx, DWORD PTR __Whereoff$6[ebp], 28
  00137	03 55 c0	 add	 edx, DWORD PTR __Newvec$7[ebp]
  0013a	52		 push	 edx
  0013b	8b 45 18	 mov	 eax, DWORD PTR __Last$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp]
  00142	51		 push	 ecx
  00143	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	e8 00 00 00 00	 call	 ??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>

; 889  :             _Constructed_first = _Newvec + _Whereoff;

  0014b	6b 55 bc 1c	 imul	 edx, DWORD PTR __Whereoff$6[ebp], 28
  0014f	03 55 c0	 add	 edx, DWORD PTR __Newvec$7[ebp]
  00152	89 55 b4	 mov	 DWORD PTR __Constructed_first$4[ebp], edx

; 890  : 
; 891  :             if (_Count == 1 && _Whereptr == _Oldlast) { // one at back, provide strong guarantee

  00155	83 7d e4 01	 cmp	 DWORD PTR __Count$[ebp], 1
  00159	75 1e		 jne	 SHORT $LN8@Insert_ran
  0015b	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0015e	3b 45 d4	 cmp	 eax, DWORD PTR __Oldlast$[ebp]
  00161	75 16		 jne	 SHORT $LN8@Insert_ran

; 892  :                 _Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);

  00163	8b 4d c0	 mov	 ecx, DWORD PTR __Newvec$7[ebp]
  00166	51		 push	 ecx
  00167	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  0016a	52		 push	 edx
  0016b	8b 45 d8	 mov	 eax, DWORD PTR __Oldfirst$[ebp]
  0016e	50		 push	 eax
  0016f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept

; 893  :             } else { // provide basic guarantee

  00177	eb 38		 jmp	 SHORT $LN9@Insert_ran
$LN8@Insert_ran:

; 894  :                 _Umove(_Oldfirst, _Whereptr, _Newvec);

  00179	8b 4d c0	 mov	 ecx, DWORD PTR __Newvec$7[ebp]
  0017c	51		 push	 ecx
  0017d	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00180	52		 push	 edx
  00181	8b 45 d8	 mov	 eax, DWORD PTR __Oldfirst$[ebp]
  00184	50		 push	 eax
  00185	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00188	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove

; 895  :                 _Constructed_first = _Newvec;

  0018d	8b 4d c0	 mov	 ecx, DWORD PTR __Newvec$7[ebp]
  00190	89 4d b4	 mov	 DWORD PTR __Constructed_first$4[ebp], ecx

; 896  :                 _Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);

  00193	6b 55 bc 1c	 imul	 edx, DWORD PTR __Whereoff$6[ebp], 28
  00197	03 55 c0	 add	 edx, DWORD PTR __Newvec$7[ebp]
  0019a	6b 45 e4 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  0019e	03 d0		 add	 edx, eax
  001a0	52		 push	 edx
  001a1	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  001a8	52		 push	 edx
  001a9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
$LN9@Insert_ran:
  001b1	eb 36		 jmp	 SHORT $LN17@Insert_ran
__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$0:

; 897  :             }
; 898  :             _CATCH_ALL
; 899  :             _Destroy(_Constructed_first, _Constructed_last);

  001b3	8b 45 b8	 mov	 eax, DWORD PTR __Constructed_last$5[ebp]
  001b6	50		 push	 eax
  001b7	8b 4d b4	 mov	 ecx, DWORD PTR __Constructed_first$4[ebp]
  001ba	51		 push	 ecx
  001bb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 900  :             _Getal().deallocate(_Newvec, _Newcapacity);

  001c3	8b 55 c4	 mov	 edx, DWORD PTR __Newcapacity$8[ebp]
  001c6	52		 push	 edx
  001c7	8b 45 c0	 mov	 eax, DWORD PTR __Newvec$7[ebp]
  001ca	50		 push	 eax
  001cb	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  001d3	8b c8		 mov	 ecx, eax
  001d5	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 901  :             _RERAISE;

  001da	6a 00		 push	 0
  001dc	6a 00		 push	 0
  001de	e8 00 00 00 00	 call	 __CxxThrowException@8

; 902  :             _CATCH_END

  001e3	b8 00 00 00 00	 mov	 eax, $LN29@Insert_ran
  001e8	c3		 ret	 0
$LN17@Insert_ran:
  001e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001f0	eb 07		 jmp	 SHORT __tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$1
$LN29@Insert_ran:
  001f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$1:

; 903  : 
; 904  :             _Change_array(_Newvec, _Newsize, _Newcapacity);

  001f9	8b 4d c4	 mov	 ecx, DWORD PTR __Newcapacity$8[ebp]
  001fc	51		 push	 ecx
  001fd	8b 55 c8	 mov	 edx, DWORD PTR __Newsize$9[ebp]
  00200	52		 push	 edx
  00201	8b 45 c0	 mov	 eax, DWORD PTR __Newvec$7[ebp]
  00204	50		 push	 eax
  00205	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 905  :         } else { // Attempt to provide the strong guarantee for EmplaceConstructible failure.

  0020d	e9 5e 02 00 00	 jmp	 $LN3@Insert_ran
$LN4@Insert_ran:

; 906  :                  // If we encounter copy/move construction/assignment failure, provide the basic guarantee.
; 907  :                  // (For one-at-back, this provides the strong guarantee.)
; 908  : 
; 909  :             const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);

  00212	8b 45 d4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  00215	2b 45 e8	 sub	 eax, DWORD PTR __Whereptr$[ebp]
  00218	99		 cdq
  00219	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0021e	f7 f9		 idiv	 ecx
  00220	89 45 b0	 mov	 DWORD PTR __Affected_elements$3[ebp], eax

; 910  : 
; 911  :             if (_Count < _Affected_elements) { // some affected elements must be assigned

  00223	8b 55 e4	 mov	 edx, DWORD PTR __Count$[ebp]
  00226	3b 55 b0	 cmp	 edx, DWORD PTR __Affected_elements$3[ebp]
  00229	0f 83 40 01 00
	00		 jae	 $LN10@Insert_ran

; 912  :                 _Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);

  0022f	8b 45 d4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  00232	50		 push	 eax
  00233	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  00236	51		 push	 ecx
  00237	6b 55 e4 1c	 imul	 edx, DWORD PTR __Count$[ebp], 28
  0023b	8b 45 d4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  0023e	2b c2		 sub	 eax, edx
  00240	50		 push	 eax
  00241	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00244	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
  00249	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0024c	89 01		 mov	 DWORD PTR [ecx], eax

; 913  :                 _Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);

  0024e	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  00251	52		 push	 edx
  00252	6b 45 e4 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  00256	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  00259	2b c8		 sub	 ecx, eax
  0025b	51		 push	 ecx
  0025c	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0025f	52		 push	 edx
  00260	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move_backward_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH

; 914  :                 _Destroy(_Whereptr, _Whereptr + _Count);

  00268	6b 45 e4 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  0026c	03 45 e8	 add	 eax, DWORD PTR __Whereptr$[ebp]
  0026f	50		 push	 eax
  00270	8b 4d e8	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00273	51		 push	 ecx
  00274	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00277	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 915  : 
; 916  :                 _TRY_BEGIN

  0027c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3

; 917  :                 _Ucopy(_First, _Last, _Whereptr);

  00280	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00283	52		 push	 edx
  00284	8b 45 18	 mov	 eax, DWORD PTR __Last$[ebp]
  00287	50		 push	 eax
  00288	8b 4d 14	 mov	 ecx, DWORD PTR __First$[ebp]
  0028b	51		 push	 ecx
  0028c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0028f	e8 00 00 00 00	 call	 ??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
  00294	e9 c1 00 00 00	 jmp	 $LN19@Insert_ran
__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$2:

; 918  :                 _CATCH_ALL

  00299	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 919  :                 // glue the broken pieces back together
; 920  : 
; 921  :                 _TRY_BEGIN

  0029c	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5

; 922  :                 _Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);

  002a0	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  002a3	52		 push	 edx
  002a4	8b 45 e4	 mov	 eax, DWORD PTR __Count$[ebp]
  002a7	d1 e0		 shl	 eax, 1
  002a9	6b c8 1c	 imul	 ecx, eax, 28
  002ac	03 4d e8	 add	 ecx, DWORD PTR __Whereptr$[ebp]
  002af	51		 push	 ecx
  002b0	6b 55 e4 1c	 imul	 edx, DWORD PTR __Count$[ebp], 28
  002b4	03 55 e8	 add	 edx, DWORD PTR __Whereptr$[ebp]
  002b7	52		 push	 edx
  002b8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
  002c0	eb 3d		 jmp	 SHORT $LN21@Insert_ran
__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$3:

; 923  :                 _CATCH_ALL
; 924  :                 // vaporize the detached piece
; 925  :                 _Orphan_range(_Whereptr, _Oldlast);

  002c2	8b 45 d4	 mov	 eax, DWORD PTR __Oldlast$[ebp]
  002c5	50		 push	 eax
  002c6	8b 4d e8	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  002c9	51		 push	 ecx
  002ca	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 926  :                 _Destroy(_Whereptr + _Count, _Mylast);

  002d2	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  002d5	8b 02		 mov	 eax, DWORD PTR [edx]
  002d7	50		 push	 eax
  002d8	6b 4d e4 1c	 imul	 ecx, DWORD PTR __Count$[ebp], 28
  002dc	03 4d e8	 add	 ecx, DWORD PTR __Whereptr$[ebp]
  002df	51		 push	 ecx
  002e0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  002e3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 927  :                 _Mylast = _Whereptr;

  002e8	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  002eb	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  002ee	89 02		 mov	 DWORD PTR [edx], eax

; 928  :                 _RERAISE;

  002f0	6a 00		 push	 0
  002f2	6a 00		 push	 0
  002f4	e8 00 00 00 00	 call	 __CxxThrowException@8

; 929  :                 _CATCH_END

  002f9	b8 00 00 00 00	 mov	 eax, $LN31@Insert_ran
  002fe	c3		 ret	 0
$LN21@Insert_ran:
  002ff	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00306	eb 07		 jmp	 SHORT __tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$4
$LN31@Insert_ran:
  00308	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
__tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$4:

; 930  : 
; 931  :                 _Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);

  0030f	6b 4d e4 1c	 imul	 ecx, DWORD PTR __Count$[ebp], 28
  00313	03 4d e8	 add	 ecx, DWORD PTR __Whereptr$[ebp]
  00316	51		 push	 ecx
  00317	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0031a	8b 02		 mov	 eax, DWORD PTR [edx]
  0031c	50		 push	 eax
  0031d	8b 4d e4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00320	d1 e1		 shl	 ecx, 1
  00322	6b d1 1c	 imul	 edx, ecx, 28
  00325	03 55 e8	 add	 edx, DWORD PTR __Whereptr$[ebp]
  00328	52		 push	 edx
  00329	e8 00 00 00 00	 call	 ??$_Move_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00@Z ; std::_Move_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
  0032e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 932  :                 _Destroy(_Oldlast, _Mylast);

  00331	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00334	8b 08		 mov	 ecx, DWORD PTR [eax]
  00336	51		 push	 ecx
  00337	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  0033a	52		 push	 edx
  0033b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 933  :                 _Mylast = _Oldlast;

  00343	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00346	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  00349	89 08		 mov	 DWORD PTR [eax], ecx

; 934  :                 _RERAISE;

  0034b	6a 00		 push	 0
  0034d	6a 00		 push	 0
  0034f	e8 00 00 00 00	 call	 __CxxThrowException@8

; 935  :                 _CATCH_END

  00354	b8 00 00 00 00	 mov	 eax, $LN33@Insert_ran
  00359	c3		 ret	 0
$LN19@Insert_ran:
  0035a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00361	eb 07		 jmp	 SHORT __tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$5
$LN33@Insert_ran:
  00363	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
__tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$5:

; 936  :             } else { // affected elements don't overlap before/after

  0036a	e9 f1 00 00 00	 jmp	 $LN11@Insert_ran
$LN10@Insert_ran:

; 937  :                 const pointer _Relocated = _Whereptr + _Count;

  0036f	6b 55 e4 1c	 imul	 edx, DWORD PTR __Count$[ebp], 28
  00373	03 55 e8	 add	 edx, DWORD PTR __Whereptr$[ebp]
  00376	89 55 ac	 mov	 DWORD PTR __Relocated$2[ebp], edx

; 938  :                 _Mylast                  = _Umove(_Whereptr, _Oldlast, _Relocated);

  00379	8b 45 ac	 mov	 eax, DWORD PTR __Relocated$2[ebp]
  0037c	50		 push	 eax
  0037d	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  00380	51		 push	 ecx
  00381	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00384	52		 push	 edx
  00385	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00388	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
  0038d	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00390	89 01		 mov	 DWORD PTR [ecx], eax

; 939  :                 _Destroy(_Whereptr, _Oldlast);

  00392	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  00395	52		 push	 edx
  00396	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00399	50		 push	 eax
  0039a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 940  : 
; 941  :                 _TRY_BEGIN

  003a2	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7

; 942  :                 _Ucopy(_First, _Last, _Whereptr);

  003a6	8b 4d e8	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  003a9	51		 push	 ecx
  003aa	8b 55 18	 mov	 edx, DWORD PTR __Last$[ebp]
  003ad	52		 push	 edx
  003ae	8b 45 14	 mov	 eax, DWORD PTR __First$[ebp]
  003b1	50		 push	 eax
  003b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003b5	e8 00 00 00 00	 call	 ??$_Ucopy@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBV21@0PAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Ucopy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
  003ba	e9 91 00 00 00	 jmp	 $LN23@Insert_ran
__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$6:

; 943  :                 _CATCH_ALL

  003bf	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 944  :                 // glue the broken pieces back together
; 945  : 
; 946  :                 _TRY_BEGIN

  003c2	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+12], 9

; 947  :                 _Umove(_Relocated, _Mylast, _Whereptr);

  003c6	8b 4d e8	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  003c9	51		 push	 ecx
  003ca	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  003cd	8b 02		 mov	 eax, DWORD PTR [edx]
  003cf	50		 push	 eax
  003d0	8b 4d ac	 mov	 ecx, DWORD PTR __Relocated$2[ebp]
  003d3	51		 push	 ecx
  003d4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003d7	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
  003dc	eb 39		 jmp	 SHORT $LN25@Insert_ran
__catch$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$7:

; 948  :                 _CATCH_ALL
; 949  :                 // vaporize the detached piece
; 950  :                 _Orphan_range(_Whereptr, _Oldlast);

  003de	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  003e1	52		 push	 edx
  003e2	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  003e5	50		 push	 eax
  003e6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003e9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 951  :                 _Destroy(_Relocated, _Mylast);

  003ee	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  003f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f3	52		 push	 edx
  003f4	8b 45 ac	 mov	 eax, DWORD PTR __Relocated$2[ebp]
  003f7	50		 push	 eax
  003f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003fb	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 952  :                 _Mylast = _Whereptr;

  00400	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00403	8b 55 e8	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00406	89 11		 mov	 DWORD PTR [ecx], edx

; 953  :                 _RERAISE;

  00408	6a 00		 push	 0
  0040a	6a 00		 push	 0
  0040c	e8 00 00 00 00	 call	 __CxxThrowException@8

; 954  :                 _CATCH_END

  00411	b8 00 00 00 00	 mov	 eax, $LN35@Insert_ran
  00416	c3		 ret	 0
$LN25@Insert_ran:
  00417	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
  0041e	eb 07		 jmp	 SHORT __tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$8
$LN35@Insert_ran:
  00420	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 8
__tryend$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$8:

; 955  : 
; 956  :                 _Destroy(_Relocated, _Mylast);

  00427	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0042a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042c	51		 push	 ecx
  0042d	8b 55 ac	 mov	 edx, DWORD PTR __Relocated$2[ebp]
  00430	52		 push	 edx
  00431	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00434	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 957  :                 _Mylast = _Oldlast;

  00439	8b 45 dc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0043c	8b 4d d4	 mov	 ecx, DWORD PTR __Oldlast$[ebp]
  0043f	89 08		 mov	 DWORD PTR [eax], ecx

; 958  :                 _RERAISE;

  00441	6a 00		 push	 0
  00443	6a 00		 push	 0
  00445	e8 00 00 00 00	 call	 __CxxThrowException@8

; 959  :                 _CATCH_END

  0044a	b8 00 00 00 00	 mov	 eax, $LN37@Insert_ran
  0044f	c3		 ret	 0
$LN23@Insert_ran:
  00450	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00457	eb 07		 jmp	 SHORT $LN11@Insert_ran
$LN37@Insert_ran:
  00459	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN11@Insert_ran:

; 960  :             }
; 961  : 
; 962  :             _Orphan_range(_Whereptr, _Oldlast);

  00460	8b 55 d4	 mov	 edx, DWORD PTR __Oldlast$[ebp]
  00463	52		 push	 edx
  00464	8b 45 e8	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00467	50		 push	 eax
  00468	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0046b	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
$LN3@Insert_ran:

; 963  :         }
; 964  :     }

  00470	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00477	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  0047a	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN16@Insert_ran:
  0047f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00482	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00489	59		 pop	 ecx
  0048a	5f		 pop	 edi
  0048b	5e		 pop	 esi
  0048c	5b		 pop	 ebx
  0048d	83 c4 54	 add	 esp, 84			; 00000054H
  00490	3b ec		 cmp	 ebp, esp
  00492	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00497	8b e5		 mov	 esp, ebp
  00499	5d		 pop	 ebp
  0049a	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z$10:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,0>, COMDAT

; 257  : _NODISCARD constexpr auto _Get_unwrapped(const _Iter& _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 259  :     return _It._Unwrapped();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __It$[ebp]
  00006	e8 00 00 00 00	 call	 ?_Unwrapped@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Unwrapped

; 260  : }

  0000b	3b ec		 cmp	 ebp, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT

; 217  :     const _Iter& _First, const _Sentinel& _Last) { // check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 218  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 219  :         _Verify_range(_First, _Last);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@0@Z ; std::_Verify_range
  00010	83 c4 08	 add	 esp, 8

; 220  :     } else {
; 221  :         (void) _First; // TRANSITION, VSO#486357
; 222  :         (void) _Last; // TRANSITION, VSO#486357
; 223  :     }
; 224  : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Adl_verify_range@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<char> >, COMDAT

; 1795 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1796 :     // copy _Count copies of _Val to raw _First, using _Al
; 1797 :     using _Ty = typename _Alloc::value_type;
; 1798 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1799 :         (void) _Al;
; 1800 :         _CSTD memset(_Unfancy(_First), static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000a	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0000d	52		 push	 edx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _memset
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1801 :         return _First + _Count;

  00023	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00026	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]

; 1802 :     } else {
; 1803 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1804 :         for (; 0 < _Count; --_Count) {
; 1805 :             _Backout._Emplace_back(_Val);
; 1806 :         }
; 1807 : 
; 1808 :         return _Backout._Release();
; 1809 :     }
; 1810 : }

  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$3 = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z PROC ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >, COMDAT

; 1795 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type& _Val, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1796 :     // copy _Count copies of _Val to raw _First, using _Al
; 1797 :     using _Ty = typename _Alloc::value_type;
; 1798 :     if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
; 1799 :         (void) _Al;
; 1800 :         _CSTD memset(_Unfancy(_First), static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
; 1801 :         return _First + _Count;
; 1802 :     } else {
; 1803 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

  0003c	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00043	51		 push	 ecx
  00044	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00047	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@PA_WAAV?$allocator@_W@1@@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Uninitialized_backout_al<std::allocator<wchar_t> >
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1804 :         for (; 0 < _Count; --_Count) {

  00053	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00058	83 ea 01	 sub	 edx, 1
  0005b	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
$LN4@Uninitiali:
  0005e	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00062	76 0e		 jbe	 SHORT $LN3@Uninitiali

; 1805 :             _Backout._Emplace_back(_Val);

  00064	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00067	50		 push	 eax
  00068	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??$_Emplace_back@AB_W@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEXAB_W@Z ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Emplace_back<wchar_t const &>

; 1806 :         }

  00070	eb e3		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1807 : 
; 1808 :         return _Backout._Release();

  00072	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00075	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::_Release
  0007a	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  0007d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00084	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00087	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
  0008c	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1809 :     }
; 1810 : }

  0008f	52		 push	 edx
  00090	8b cd		 mov	 ecx, ebp
  00092	50		 push	 eax
  00093	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  00099	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009e	58		 pop	 eax
  0009f	5a		 pop	 edx
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	83 c4 24	 add	 esp, 36			; 00000024H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
  000b9	0f 1f 00	 npad	 3
$LN10@Uninitiali:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000c4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000c8	0c 00 00 00	 DD	 12			; 0000000cH
  000cc	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000d0	5f		 DB	 95			; 0000005fH
  000d1	42		 DB	 66			; 00000042H
  000d2	61		 DB	 97			; 00000061H
  000d3	63		 DB	 99			; 00000063H
  000d4	6b		 DB	 107			; 0000006bH
  000d5	6f		 DB	 111			; 0000006fH
  000d6	75		 DB	 117			; 00000075H
  000d7	74		 DB	 116			; 00000074H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<wchar_t> >::~_Uninitialized_backout_al<std::allocator<wchar_t> >
__ehhandler$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ENDP ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$3 = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT

; 1729 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1730 :     // move [_First, _Last) to raw _Dest, using _Al
; 1731 :     // note: only called internally from elsewhere in the STL
; 1732 :     using _Ptrval     = typename _Alloc::value_type*;
; 1733 :     auto _UFirst      = _Get_unwrapped(_First);

  00042	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1734 :     const auto _ULast = _Get_unwrapped(_Last);

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1735 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1736 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1737 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1738 :         return _Dest + (_ULast - _UFirst);
; 1739 :         (void) _Al;
; 1740 :     } else {
; 1741 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00060	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00063	52		 push	 edx
  00064	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00067	50		 push	 eax
  00068	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1742 :         for (; _UFirst != _ULast; ++_UFirst) {

  00077	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  0007c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0007f	89 4d f0	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  00082	8b 55 f0	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00085	3b 55 ec	 cmp	 edx, DWORD PTR __ULast$[ebp]
  00088	74 17		 je	 SHORT $LN3@Uninitiali

; 1743 :             _Backout._Emplace_back(_STD move(*_UFirst));

  0008a	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0009a	e8 00 00 00 00	 call	 ??$_Emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >

; 1744 :         }

  0009f	eb d8		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1745 : 
; 1746 :         return _Backout._Release();

  000a1	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Release
  000a9	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000b6	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 1747 :     }
; 1748 : }

  000be	52		 push	 edx
  000bf	8b cd		 mov	 ecx, ebp
  000c1	50		 push	 eax
  000c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cd	58		 pop	 eax
  000ce	5a		 pop	 edx
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	83 c4 2c	 add	 esp, 44			; 0000002cH
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Uninitiali:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	0c 00 00 00	 DD	 12			; 0000000cH
  000f8	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	42		 DB	 66			; 00000042H
  000fe	61		 DB	 97			; 00000061H
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	6f		 DB	 111			; 0000006fH
  00102	75		 DB	 117			; 00000075H
  00103	74		 DB	 116			; 00000074H
  00104	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
__ehhandler$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BM@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BM@@std@@YAII@Z PROC		; std::_Get_size_of_n<28>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 49 92
	24 09		 mov	 DWORD PTR __Max_possible$1[ebp], 153391689 ; 09249249H

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 49 92
	24 09		 cmp	 DWORD PTR __Count$[ebp], 153391689 ; 09249249H
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	6b 45 08 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
$LN3@Get_size_o:

; 36   : }

  00031	83 c4 08	 add	 esp, 8
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Get_size_of_n@$0BM@@std@@YAII@Z ENDP		; std::_Get_size_of_n<28>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Backout$3 = -36					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1729 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1730 :     // move [_First, _Last) to raw _Dest, using _Al
; 1731 :     // note: only called internally from elsewhere in the STL
; 1732 :     using _Ptrval     = typename _Alloc::value_type*;
; 1733 :     auto _UFirst      = _Get_unwrapped(_First);

  00042	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004b	83 c4 04	 add	 esp, 4
  0004e	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1734 :     const auto _ULast = _Get_unwrapped(_Last);

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00054	51		 push	 ecx
  00055	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1735 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1736 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1737 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1738 :         return _Dest + (_ULast - _UFirst);
; 1739 :         (void) _Al;
; 1740 :     } else {
; 1741 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00060	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00063	52		 push	 edx
  00064	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00067	50		 push	 eax
  00068	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0006b	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00070	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1742 :         for (; _UFirst != _ULast; ++_UFirst) {

  00077	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00079	8b 4d f0	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  0007c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0007f	89 4d f0	 mov	 DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
  00082	8b 55 f0	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00085	3b 55 ec	 cmp	 edx, DWORD PTR __ULast$[ebp]
  00088	74 17		 je	 SHORT $LN3@Uninitiali

; 1743 :             _Backout._Emplace_back(_STD move(*_UFirst));

  0008a	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0009a	e8 00 00 00 00	 call	 ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1744 :         }

  0009f	eb d8		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1745 : 
; 1746 :         return _Backout._Release();

  000a1	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
  000a9	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  000b6	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000bb	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 1747 :     }
; 1748 : }

  000be	52		 push	 edx
  000bf	8b cd		 mov	 ecx, ebp
  000c1	50		 push	 eax
  000c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Uninitiali
  000c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cd	58		 pop	 eax
  000ce	5a		 pop	 edx
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	83 c4 2c	 add	 esp, 44			; 0000002cH
  000dd	3b ec		 cmp	 ebp, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
$LN10@Uninitiali:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN9@Uninitiali
$LN9@Uninitiali:
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	0c 00 00 00	 DD	 12			; 0000000cH
  000f8	00 00 00 00	 DD	 $LN7@Uninitiali
$LN7@Uninitiali:
  000fc	5f		 DB	 95			; 0000005fH
  000fd	42		 DB	 66			; 00000042H
  000fe	61		 DB	 97			; 00000061H
  000ff	63		 DB	 99			; 00000063H
  00100	6b		 DB	 107			; 0000006bH
  00101	6f		 DB	 111			; 0000006fH
  00102	75		 DB	 117			; 00000075H
  00103	74		 DB	 116			; 00000074H
  00104	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__ehhandler$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  :         _Ptr->~_Uty();

  00003	6a 00		 push	 0
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z

; 764  :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 762  :     static void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 763  :         _Ptr->~_Uty();

  00003	6a 00		 push	 0
  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z

; 764  :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 83   : _DECLSPEC_ALLOCATOR void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 84   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 85   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001f	83 c0 27	 add	 eax, 39			; 00000027H
  00022	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 86   :     if (_Block_size <= _Bytes) {

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00028	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  0002b	77 05		 ja	 SHORT $LN8@Allocate_m

; 87   :         _Throw_bad_array_new_length(); // add overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 88   :     }
; 89   : 
; 90   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 91   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00041	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00045	74 02		 je	 SHORT $LN7@Allocate_m
  00047	eb 56		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00049	8b f4		 mov	 esi, esp
  0004b	68 00 00 00 00	 push	 OFFSET $SG151419
  00050	68 00 00 00 00	 push	 OFFSET $SG151420
  00055	6a 00		 push	 0
  00057	6a 5b		 push	 91			; 0000005bH
  00059	68 00 00 00 00	 push	 OFFSET $SG151421
  0005e	6a 02		 push	 2
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00066	83 c4 18	 add	 esp, 24			; 00000018H
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN12@Allocate_m
  00075	cc		 int	 3
$LN12@Allocate_m:
  00076	8b f4		 mov	 esi, esp
  00078	6a 00		 push	 0
  0007a	6a 5b		 push	 91			; 0000005bH
  0007c	68 00 00 00 00	 push	 OFFSET $SG151422
  00081	68 00 00 00 00	 push	 OFFSET $SG151423
  00086	68 00 00 00 00	 push	 OFFSET $SG151424
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	33 c9		 xor	 ecx, ecx
  0009d	75 aa		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0009f	33 d2		 xor	 edx, edx
  000a1	75 9e		 jne	 SHORT $LN4@Allocate_m

; 92   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000a3	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  000a6	83 c0 27	 add	 eax, 39			; 00000027H
  000a9	83 e0 e0	 and	 eax, -32		; ffffffe0H
  000ac	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 93   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	6b d1 ff	 imul	 edx, ecx, -1
  000b7	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 94   : 
; 95   : #ifdef _DEBUG
; 96   :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	6b c2 fe	 imul	 eax, edx, -2
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000cb	c7 04 01 fa fa
	fa fa		 mov	 DWORD PTR [ecx+eax], -84215046 ; fafafafaH

; 97   : #endif // _DEBUG
; 98   :     return _Ptr;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 99   : }

  000d5	5e		 pop	 esi
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z PROC		; std::forward<wchar_t * const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z ENDP		; std::forward<wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_String_bitmap@D$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_bitmap@D$00@std@@QAE@XZ PROC		; std::_String_bitmap<char,1>::_String_bitmap<char,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	68 00 01 00 00	 push	 256			; 00000100H
  00013	6a 00		 push	 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _memset
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$_String_bitmap@D$00@std@@QAE@XZ ENDP		; std::_String_bitmap<char,1>::_String_bitmap<char,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z PROC	; std::_String_bitmap<char,1>::_Match, COMDAT
; _this$ = ecx

; 643  :     constexpr bool _Match(const _Elem _Ch) const { // test if _Ch is in the bitmap

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 644  :         return _Matches[static_cast<unsigned char>(_Ch)];

  0000e	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 645  :     }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ENDP	; std::_String_bitmap<char,1>::_Match
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z PROC	; std::_String_bitmap<char,1>::_Mark, COMDAT
; _this$ = ecx

; 633  :     constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // mark this bitmap such that the characters in [_First, _Last) are intended to match
; 635  :         // returns whether all inputs can be placed in the bitmap
; 636  :         for (; _First != _Last; ++_First) {

  0000e	eb 09		 jmp	 SHORT $LN4@Mark
$LN2@Mark:
  00010	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00013	83 c0 01	 add	 eax, 1
  00016	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Mark:
  00019	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001c	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  0001f	74 0f		 je	 SHORT $LN3@Mark

; 637  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00021	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00024	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1

; 638  :         }

  0002e	eb e0		 jmp	 SHORT $LN2@Mark
$LN3@Mark:

; 639  : 
; 640  :         return true;

  00030	b0 01		 mov	 al, 1

; 641  :     }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ENDP	; std::_String_bitmap<char,1>::_Mark
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::forward<std::allocator<wchar_t> >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::forward<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_String_bitmap@_W$0A@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_bitmap@_W$0A@@std@@QAE@XZ PROC		; std::_String_bitmap<wchar_t,0>::_String_bitmap<wchar_t,0>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	68 00 01 00 00	 push	 256			; 00000100H
  00013	6a 00		 push	 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 _memset
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0?$_String_bitmap@_W$0A@@std@@QAE@XZ ENDP		; std::_String_bitmap<wchar_t,0>::_String_bitmap<wchar_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
__Ch$ = 8						; size = 2
?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z PROC	; std::_String_bitmap<wchar_t,0>::_Match, COMDAT
; _this$ = ecx

; 673  :     constexpr bool _Match(const _Elem _Ch) const { // test if _Ch is in the bitmap

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 674  :         return _Ch < 256U && _Matches[_Ch];

  00017	0f b7 45 08	 movzx	 eax, WORD PTR __Ch$[ebp]
  0001b	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00020	73 18		 jae	 SHORT $LN3@Match
  00022	0f b7 4d 08	 movzx	 ecx, WORD PTR __Ch$[ebp]
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0002d	85 c0		 test	 eax, eax
  0002f	74 09		 je	 SHORT $LN3@Match
  00031	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00038	eb 07		 jmp	 SHORT $LN4@Match
$LN3@Match:
  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@Match:
  00041	8a 45 f8	 mov	 al, BYTE PTR tv72[ebp]

; 675  :     }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z ENDP	; std::_String_bitmap<wchar_t,0>::_Match
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z
_TEXT	SEGMENT
__Ch$1 = -8						; size = 2
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z PROC ; std::_String_bitmap<wchar_t,0>::_Mark, COMDAT
; _this$ = ecx

; 658  :     constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 659  :         // mark this bitmap such that the characters in [_First, _Last) are intended to match
; 660  :         // returns whether all inputs can be placed in the bitmap
; 661  :         for (; _First != _Last; ++_First) {

  00017	eb 09		 jmp	 SHORT $LN4@Mark
$LN2@Mark:
  00019	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001c	83 c0 02	 add	 eax, 2
  0001f	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Mark:
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00025	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00028	74 27		 je	 SHORT $LN3@Mark

; 662  :             const auto _Ch = *_First;

  0002a	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00030	66 89 45 f8	 mov	 WORD PTR __Ch$1[ebp], ax

; 663  :             if (_Ch >= 256U) {

  00034	0f b7 4d f8	 movzx	 ecx, WORD PTR __Ch$1[ebp]
  00038	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  0003e	72 04		 jb	 SHORT $LN5@Mark

; 664  :                 return false;

  00040	32 c0		 xor	 al, al
  00042	eb 0f		 jmp	 SHORT $LN1@Mark
$LN5@Mark:

; 665  :             }
; 666  : 
; 667  :             _Matches[static_cast<unsigned char>(_Ch)] = true;

  00044	0f b6 55 f8	 movzx	 edx, BYTE PTR __Ch$1[ebp]
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c6 04 10 01	 mov	 BYTE PTR [eax+edx], 1

; 668  :         }

  0004f	eb c8		 jmp	 SHORT $LN2@Mark
$LN3@Mark:

; 669  : 
; 670  :         return true;

  00051	b0 01		 mov	 al, 1
$LN1@Mark:

; 671  :     }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z ENDP ; std::_String_bitmap<wchar_t,0>::_Mark
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 3526 :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3527 :         if (_Target) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 0a		 je	 SHORT $LN1@Tidy_guard

; 3528 :             _Target->_Tidy();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
$LN1@Tidy_guard:

; 3529 :         }
; 3530 :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z PROC ; std::forward<std::allocator<wchar_t> const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ENDP ; std::forward<std::allocator<wchar_t> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1081 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1082 :     // deallocate a plain pointer using an allocator
; 1083 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1084 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1085 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00022	6a 01		 push	 1
  00024	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1086 :     } else {
; 1087 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1088 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1089 :     }
; 1090 : }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
_TEXT	SEGMENT
_gcd$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$rgy_reduce@H@@YAXAAH0@Z PROC				; rgy_reduce<int>

; 240  : static inline void rgy_reduce(T& a, T& b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 241  :     static_assert(std::is_integral<T>::value, "rgy_reduce is defined only for integer.");
; 242  :     if (a == 0 || b == 0) return;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00011	74 08		 je	 SHORT $LN3@rgy_reduce
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00016	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00019	75 02		 jne	 SHORT $LN2@rgy_reduce
$LN3@rgy_reduce:
  0001b	eb 33		 jmp	 SHORT $LN1@rgy_reduce
$LN2@rgy_reduce:

; 243  :     T gcd = rgy_gcd(a, b);

  0001d	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	50		 push	 eax
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??$rgy_gcd@H@@YAHHH@Z	; rgy_gcd<int>
  0002e	83 c4 08	 add	 esp, 8
  00031	89 45 fc	 mov	 DWORD PTR _gcd$[ebp], eax

; 244  :     a /= gcd;

  00034	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	99		 cdq
  0003a	f7 7d fc	 idiv	 DWORD PTR _gcd$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00040	89 01		 mov	 DWORD PTR [ecx], eax

; 245  :     b /= gcd;

  00042	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00045	8b 02		 mov	 eax, DWORD PTR [edx]
  00047	99		 cdq
  00048	f7 7d fc	 idiv	 DWORD PTR _gcd$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0004e	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@rgy_reduce:

; 246  : }

  00050	83 c4 04	 add	 esp, 4
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??$rgy_reduce@H@@YAXAAH0@Z ENDP				; rgy_reduce<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HH$0A@@?$pair@HH@std@@QAE@$$QAH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HH$0A@@?$pair@HH@std@@QAE@$$QAH0@Z PROC		; std::pair<int,int>::pair<int,int><int,int,0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	89 11		 mov	 DWORD PTR [ecx], edx
  00021	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
??$?0HH$0A@@?$pair@HH@std@@QAE@$$QAH0@Z ENDP		; std::pair<int,int>::pair<int,int><int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HH$0A@@?$pair@HH@std@@QAE@ABH0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HH$0A@@?$pair@HH@std@@QAE@ABH0@Z PROC		; std::pair<int,int>::pair<int,int><int,int,0>, COMDAT
; _this$ = ecx

; 110  :         : first(_Val1), second(_Val2) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Val2$[ebp]
  0001e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00020	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
??$?0HH$0A@@?$pair@HH@std@@QAE@ABH0@Z ENDP		; std::pair<int,int>::pair<int,int><int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABH@std@@YAABHABH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABH@std@@YAABHABH@Z PROC			; std::forward<int const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABH@std@@YAABHABH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -17						; size = 1
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
__Pred$ = 36						; size = 1
??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z PROC ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::less<void> >, COMDAT

; 4294 : _NODISCARD constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred) { // find largest element, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00041	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 4295 :     _Adl_verify_range(_First, _Last);

  00048	8d 45 18	 lea	 eax, DWORD PTR __Last$[ebp]
  0004b	50		 push	 eax
  0004c	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
  00055	83 c4 08	 add	 esp, 8

; 4296 :     _Seek_wrapped(_First, _Max_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));

  00058	0f b6 55 24	 movzx	 edx, BYTE PTR __Pred$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 ??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z ; std::_Pass_fn<std::less<void>,0>
  00062	83 c4 04	 add	 esp, 4
  00065	88 45 ef	 mov	 BYTE PTR $T3[ebp], al
  00068	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,0>
  00076	83 c4 04	 add	 esp, 4
  00079	50		 push	 eax
  0007a	8d 55 0c	 lea	 edx, DWORD PTR __First$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@$0A@@std@@YAPANABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,0>
  00083	83 c4 04	 add	 esp, 4
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Max_element_unchecked@PANU?$less@X@std@@@std@@YAPANPAN0U?$less@X@0@@Z ; std::_Max_element_unchecked<double *,std::less<void> >
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00092	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
  00095	50		 push	 eax
  00096	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@PAN@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@ABQAN@Z ; std::_Seek_wrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,double *>
  0009f	83 c4 08	 add	 esp, 8

; 4297 :     return _First;

  000a2	8d 55 0c	 lea	 edx, DWORD PTR __First$[ebp]
  000a5	52		 push	 edx
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a9	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  000ae	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  000b1	83 c8 01	 or	 eax, 1
  000b4	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  000b7	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000bb	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  000be	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  000c3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000c7	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  000ca	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  000cf	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4298 : }

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	83 c4 18	 add	 esp, 24			; 00000018H
  000e0	3b ec		 cmp	 ebp, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$0:
  00000	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z$2:
  00010	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN6@max_elemen
  0001c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
$LN6@max_elemen:
  00028	c3		 ret	 0
__ehhandler$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z ENDP ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::less<void> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z
_TEXT	SEGMENT
tv184 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -34						; size = 1
__Whereoff$ = -32					; size = 4
__Oldfirst$ = -28					; size = 4
__My_data$ = -24					; size = 4
__Whereptr$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
__First$ = 24						; size = 12
__Last$ = 36						; size = 12
??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void>, COMDAT
; _this$ = ecx

; 968  :     iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) { // insert [_First, _Last) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001d	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  00020	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00023	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00026	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00029	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00032	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0003a	33 c5		 xor	 eax, ebp
  0003c	50		 push	 eax
  0003d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00040	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00046	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00049	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00050	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 969  :         const pointer _Whereptr = _Where._Ptr;

  00057	8b 45 14	 mov	 eax, DWORD PTR __Where$[ebp+8]
  0005a	89 45 ec	 mov	 DWORD PTR __Whereptr$[ebp], eax

; 970  :         auto& _My_data          = _Mypair._Myval2;

  0005d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	89 4d e8	 mov	 DWORD PTR __My_data$[ebp], ecx

; 971  :         const pointer _Oldfirst = _My_data._Myfirst;

  00063	8b 55 e8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00066	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00069	89 45 e4	 mov	 DWORD PTR __Oldfirst$[ebp], eax
$LN4@insert:

; 972  : #if _ITERATOR_DEBUG_LEVEL == 2
; 973  :         _STL_VERIFY(

  0006c	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00074	8b f0		 mov	 esi, eax
  00076	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0007f	83 c4 04	 add	 esp, 4
  00082	3b f0		 cmp	 esi, eax
  00084	75 15		 jne	 SHORT $LN7@insert
  00086	8b 55 ec	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00089	3b 55 e4	 cmp	 edx, DWORD PTR __Oldfirst$[ebp]
  0008c	72 0d		 jb	 SHORT $LN7@insert
  0008e	8b 45 e8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00091	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00094	3b 4d ec	 cmp	 ecx, DWORD PTR __Whereptr$[ebp]
  00097	72 02		 jb	 SHORT $LN7@insert
  00099	eb 5c		 jmp	 SHORT $LN2@insert
$LN7@insert:
  0009b	8b f4		 mov	 esi, esp
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NNBLLPGF@vector?5insert?5iterator?5outside?5@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000a7	6a 00		 push	 0
  000a9	68 cf 03 00 00	 push	 975			; 000003cfH
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000b3	6a 02		 push	 2
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000bb	83 c4 18	 add	 esp, 24			; 00000018H
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	83 f8 01	 cmp	 eax, 1
  000c8	75 01		 jne	 SHORT $LN11@insert
  000ca	cc		 int	 3
$LN11@insert:
  000cb	8b f4		 mov	 esi, esp
  000cd	6a 00		 push	 0
  000cf	68 cf 03 00 00	 push	 975			; 000003cfH
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_1BLK@GBKABDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@HCJPCNBE@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5@
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000e9	83 c4 14	 add	 esp, 20			; 00000014H
  000ec	3b f4		 cmp	 esi, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 974  :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr,
; 975  :             "vector insert iterator outside range");

  000f3	33 c0		 xor	 eax, eax
  000f5	75 a4		 jne	 SHORT $LN7@insert
$LN2@insert:
  000f7	33 c9		 xor	 ecx, ecx
  000f9	0f 85 6d ff ff
	ff		 jne	 $LN4@insert

; 976  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 977  : 
; 978  :         _Adl_verify_range(_First, _Last);

  000ff	8d 55 24	 lea	 edx, DWORD PTR __Last$[ebp]
  00102	52		 push	 edx
  00103	8d 45 18	 lea	 eax, DWORD PTR __First$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$_Adl_verify_range@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
  0010c	83 c4 08	 add	 esp, 8

; 979  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);

  0010f	8b 45 ec	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00112	2b 45 e4	 sub	 eax, DWORD PTR __Oldfirst$[ebp]
  00115	99		 cdq
  00116	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0011b	f7 f9		 idiv	 ecx
  0011d	89 45 e0	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 980  :         _Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00120	0f b6 55 de	 movzx	 edx, BYTE PTR $T4[ebp]
  00124	52		 push	 edx
  00125	8d 45 24	 lea	 eax, DWORD PTR __Last$[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,0>
  0012e	83 c4 04	 add	 esp, 4
  00131	50		 push	 eax
  00132	8d 4d 18	 lea	 ecx, DWORD PTR __First$[ebp]
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 ??$_Get_unwrapped@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@$0A@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,0>
  0013b	83 c4 04	 add	 esp, 4
  0013e	50		 push	 eax
  0013f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00142	8b cc		 mov	 ecx, esp
  00144	89 65 d8	 mov	 DWORD PTR $T3[ebp], esp
  00147	8d 55 0c	 lea	 edx, DWORD PTR __Where$[ebp]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  00150	89 45 d0	 mov	 DWORD PTR tv184[ebp], eax
  00153	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00157	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0015b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	e8 00 00 00 00	 call	 ??$_Insert_range@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@PBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@1Uforward_iterator_tag@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Insert_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const *>

; 981  :         return _Make_iterator_offset(_Whereoff);

  00163	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00166	50		 push	 eax
  00167	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0016a	51		 push	 ecx
  0016b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iterator_offset
  00173	8b 55 d4	 mov	 edx, DWORD PTR $T2[ebp]
  00176	83 ca 01	 or	 edx, 1
  00179	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  0017c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00180	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00183	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  00188	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0018c	8d 4d 18	 lea	 ecx, DWORD PTR __First$[ebp]
  0018f	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  00194	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00198	8d 4d 24	 lea	 ecx, DWORD PTR __Last$[ebp]
  0019b	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  001a0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 982  :     }

  001a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ad	59		 pop	 ecx
  001ae	5e		 pop	 esi
  001af	83 c4 30	 add	 esp, 48			; 00000030H
  001b2	3b ec		 cmp	 ebp, esp
  001b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c2 28 00	 ret	 40			; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$0:
  00000	8d 4d 24	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$1:
  00008	8d 4d 18	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$2:
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$3:
  00018	8b 4d d8	 mov	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z$4:
  00020	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00023	83 e0 01	 and	 eax, 1
  00026	0f 84 0c 00 00
	00		 je	 $LN17@insert
  0002c	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN17@insert:
  00038	c3		 ret	 0
__ehhandler$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 216  :     _Vector_iterator(pointer _Parg, const _Container_base* _Pvector) : _Mybase(_Parg, _Pvector) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &,0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &,0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT
; _this$ = ecx

; 127  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$01@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$01@std@@YAII@Z PROC			; std::_Get_size_of_n<2>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __Max_possible$1[ebp], 2147483647 ; 7fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 7f		 cmp	 DWORD PTR __Count$[ebp], 2147483647 ; 7fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	d1 e0		 shl	 eax, 1
$LN3@Get_size_o:

; 36   : }

  00032	83 c4 08	 add	 esp, 8
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YAII@Z ENDP			; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@_W@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@_W@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@_W@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z PROC ; std::_Destroy_range<std::allocator<char> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ENDP ; std::_Destroy_range<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z PROC ; std::_Destroy_range<std::allocator<wchar_t> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ENDP ; std::_Destroy_range<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {

  00022	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00024	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002a	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00030	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00033	74 1b		 je	 SHORT $LN1@Destroy_ra

; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  00035	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0004b	83 c4 08	 add	 esp, 8

; 1039 :         }

  0004e	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1040 :     }
; 1041 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {

  00022	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00024	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00027	83 c0 1c	 add	 eax, 28			; 0000001cH
  0002a	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00030	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00033	74 1b		 je	 SHORT $LN1@Destroy_ra

; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

  00035	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003e	83 c4 04	 add	 esp, 4
  00041	50		 push	 eax
  00042	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004b	83 c4 08	 add	 esp, 8

; 1039 :         }

  0004e	eb d4		 jmp	 SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1040 :     }
; 1041 : }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z PROC ; std::_Destroy_range<std::allocator<double> >, COMDAT

; 1027 : void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1028 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1029 :     using _Ty = typename _Alloc::value_type;
; 1030 :     if
; 1031 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1032 :             (void) _First;
; 1033 :             (void) _Last;
; 1034 :             (void) _Al;
; 1035 :         }
; 1036 :     else {
; 1037 :         for (; _First != _Last; ++_First) {
; 1038 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1039 :         }
; 1040 :     }
; 1041 : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ENDP ; std::_Destroy_range<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -8					; size = 4
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00014	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 1

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00018	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 30   :             if (_Count > _Max_possible) {

  0001f	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00026	76 05		 jbe	 SHORT $LN2@Get_size_o

; 31   :                 _Throw_bad_array_new_length(); // multiply overflow

  00028	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	c1 e0 03	 shl	 eax, 3
$LN3@Get_size_o:

; 36   : }

  00033	83 c4 08	 add	 esp, 8
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 183  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 184  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 185  : #if defined(_M_IX86) || defined(_M_X64)
; 186  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 10		 jb	 SHORT $LN2@Deallocate

; 187  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 188  :     }
; 189  : #endif // defined(_M_IX86) || defined(_M_X64)
; 190  : 
; 191  :     ::operator delete(_Ptr, _Bytes);

  0003b	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8

; 192  : }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 167  : _DECLSPEC_ALLOCATOR void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 168  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 169  : #if defined(_M_IX86) || defined(_M_X64)
; 170  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 171  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 172  :     }
; 173  : #endif // defined(_M_IX86) || defined(_M_X64)
; 174  : 
; 175  :     if (_Bytes != 0) {

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 176  :         return _Traits::_Allocate(_Bytes);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 177  :     }
; 178  : 
; 179  :     return nullptr;

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 180  : }

  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -1				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 24   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 25   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000b	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$[ebp], 0

; 26   : 
; 27   :     if
; 28   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 29   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 30   :             if (_Count > _Max_possible) {
; 31   :                 _Throw_bad_array_new_length(); // multiply overflow
; 32   :             }
; 33   :         }
; 34   : 
; 35   :     return _Count * _Ty_size;

  0000f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 36   : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 968  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 969  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 970  :         _Left = _STD move(_Right);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  0000c	83 c4 04	 add	 esp, 4

; 971  :     } else {
; 972  :         (void) _Left; // TRANSITION, VSO#486357
; 973  :         (void) _Right; // TRANSITION, VSO#486357
; 974  :     }
; 975  : }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 04		 push	 4
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4108 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4109 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4110 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4111 :         auto& _My_data            = _Mypair._Myval2;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4112 :         const size_type _Old_size = _My_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Old_size$[ebp], edx

; 4113 :         if (max_size() - _Old_size < _Size_increase) {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00035	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00038	73 05		 jae	 SHORT $LN2@Reallocate

; 4114 :             _Xlen(); // result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4115 :         }
; 4116 : 
; 4117 :         const size_type _New_size     = _Old_size + _Size_increase;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4118 :         const size_type _Old_capacity = _My_data._Myres;

  00048	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004e	89 55 ec	 mov	 DWORD PTR __Old_capacity$[ebp], edx

; 4119 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00051	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005d	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4120 :         auto& _Al                     = _Getal();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00068	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4121 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	51		 push	 ecx
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0007a	89 45 dc	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4122 :         _My_data._Orphan_all();

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4123 :         _My_data._Mysize      = _New_size;

  00085	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00088	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4124 :         _My_data._Myres       = _New_capacity;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00091	8b 55 e8	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  00094	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 4125 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00097	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d4	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4126 :         if (_BUF_SIZE <= _Old_capacity) {

  000a6	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000aa	72 4c		 jb	 SHORT $LN3@Reallocate

; 4127 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 55 d0	 mov	 DWORD PTR __Old_ptr$1[ebp], edx

; 4128 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000b5	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 d0	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000ca	83 c4 04	 add	 esp, 4
  000cd	50		 push	 eax
  000ce	8b 4d d4	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000d1	51		 push	 ecx
  000d2	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000d5	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4129 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000da	8b 55 ec	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000dd	83 c2 01	 add	 edx, 1
  000e0	52		 push	 edx
  000e1	8b 45 d0	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000e8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4130 :             _My_data._Bx._Ptr = _New_ptr;

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000f0	8b 55 dc	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  000f3	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 4131 :         } else {

  000f6	eb 32		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4132 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000f8	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00103	52		 push	 edx
  00104	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00107	83 c0 04	 add	 eax, 4
  0010a	50		 push	 eax
  0010b	8b 4d d4	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  0010e	51		 push	 ecx
  0010f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00112	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 4133 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00117	8d 55 dc	 lea	 edx, DWORD PTR __New_ptr$[ebp]
  0011a	52		 push	 edx
  0011b	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0011e	83 c0 04	 add	 eax, 4
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00127	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4134 :         }
; 4135 : 
; 4136 :         return *this;

  0012a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4137 :     }

  0012d	52		 push	 edx
  0012e	8b cd		 mov	 ecx, ebp
  00130	50		 push	 eax
  00131	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00137	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013c	58		 pop	 eax
  0013d	5a		 pop	 edx
  0013e	5f		 pop	 edi
  0013f	83 c4 30	 add	 esp, 48			; 00000030H
  00142	3b ec		 cmp	 ebp, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 10 00	 ret	 16			; 00000010H
  0014f	90		 npad	 1
$LN8@Reallocate:
  00150	01 00 00 00	 DD	 1
  00154	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00158	dc ff ff ff	 DD	 -36			; ffffffdcH
  0015c	04 00 00 00	 DD	 4
  00160	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00164	5f		 DB	 95			; 0000005fH
  00165	4e		 DB	 78			; 0000004eH
  00166	65		 DB	 101			; 00000065H
  00167	77		 DB	 119			; 00000077H
  00168	5f		 DB	 95			; 0000005fH
  00169	70		 DB	 112			; 00000070H
  0016a	74		 DB	 116			; 00000074H
  0016b	72		 DB	 114			; 00000072H
  0016c	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2748 :                 const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2749 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00017	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  0002b	8b 45 18	 mov	 eax, DWORD PTR __Count$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00032	51		 push	 ecx
  00033	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00036	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2751 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00042	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  00046	8d 45 fb	 lea	 eax, DWORD PTR $T1[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0004d	03 4d 18	 add	 ecx, DWORD PTR __Count$[ebp]
  00050	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00059	83 c4 08	 add	 esp, 8

; 2752 :             },

  0005c	83 c4 08	 add	 esp, 8
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4082 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4083 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4084 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4085 :         if (_New_size > max_size()) {

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0002b	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  0002e	76 05		 jbe	 SHORT $LN2@Reallocate

; 4086 :             _Xlen(); // result too long

  00030	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4087 :         }
; 4088 : 
; 4089 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	89 4d f8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4090 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003e	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004a	89 45 f4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4091 :         auto& _Al                     = _Getal();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00055	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 4092 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00058	8b 45 f4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00067	89 45 e8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4093 :         _Mypair._Myval2._Orphan_all();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4094 :         _Mypair._Myval2._Mysize = _New_size;

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00078	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 4095 :         _Mypair._Myval2._Myres  = _New_capacity;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00081	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4096 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00084	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0009c	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 4097 :         if (_BUF_SIZE <= _Old_capacity) {

  000a1	83 7d f8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000a5	72 21		 jb	 SHORT $LN3@Reallocate

; 4098 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000a7	8b 55 f8	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	52		 push	 edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	51		 push	 ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4099 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 45 e8	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000c3	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 4100 :         } else {

  000c6	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4101 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	83 c2 04	 add	 edx, 4
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000d8	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4102 :         }
; 4103 : 
; 4104 :         return *this;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4105 :     }

  000de	52		 push	 edx
  000df	8b cd		 mov	 ecx, ebp
  000e1	50		 push	 eax
  000e2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  000e8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ed	58		 pop	 eax
  000ee	5a		 pop	 edx
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
  000ff	90		 npad	 1
$LN8@Reallocate:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00108	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00114	5f		 DB	 95			; 0000005fH
  00115	4e		 DB	 78			; 0000004eH
  00116	65		 DB	 101			; 00000065H
  00117	77		 DB	 119			; 00000077H
  00118	5f		 DB	 95			; 0000005fH
  00119	70		 DB	 112			; 00000070H
  0011a	74		 DB	 116			; 00000074H
  0011b	72		 DB	 114			; 00000072H
  0011c	00		 DB	 0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002b	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  0002f	8d 45 fb	 lea	 eax, DWORD PTR $T1[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00036	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  0003f	83 c4 08	 add	 esp, 8

; 2856 :             },

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
_<_Args_3>$ = 28					; size = 4
??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4108 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4109 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4110 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4111 :         auto& _My_data            = _Mypair._Myval2;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4112 :         const size_type _Old_size = _My_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Old_size$[ebp], edx

; 4113 :         if (max_size() - _Old_size < _Size_increase) {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00032	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00035	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00038	73 05		 jae	 SHORT $LN2@Reallocate

; 4114 :             _Xlen(); // result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 4115 :         }
; 4116 : 
; 4117 :         const size_type _New_size     = _Old_size + _Size_increase;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4118 :         const size_type _Old_capacity = _My_data._Myres;

  00048	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004e	89 55 ec	 mov	 DWORD PTR __Old_capacity$[ebp], edx

; 4119 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00051	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0005d	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4120 :         auto& _Al                     = _Getal();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00068	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4121 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	51		 push	 ecx
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0007a	89 45 dc	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4122 :         _My_data._Orphan_all();

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4123 :         _My_data._Mysize      = _New_size;

  00085	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00088	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4124 :         _My_data._Myres       = _New_capacity;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00091	8b 55 e8	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  00094	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 4125 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00097	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d4	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4126 :         if (_BUF_SIZE <= _Old_capacity) {

  000a6	83 7d ec 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  000aa	72 54		 jb	 SHORT $LN3@Reallocate

; 4127 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 55 d0	 mov	 DWORD PTR __Old_ptr$1[ebp], edx

; 4128 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000b5	8b 45 1c	 mov	 eax, DWORD PTR _<_Args_3>$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 d0	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000d2	83 c4 04	 add	 esp, 4
  000d5	50		 push	 eax
  000d6	8b 45 d4	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000d9	50		 push	 eax
  000da	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000dd	e8 00 00 00 00	 call	 ??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator()

; 4129 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e2	8b 4d ec	 mov	 ecx, DWORD PTR __Old_capacity$[ebp]
  000e5	83 c1 01	 add	 ecx, 1
  000e8	51		 push	 ecx
  000e9	8b 55 d0	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000ec	52		 push	 edx
  000ed	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000f0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 4130 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f8	8b 4d dc	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4131 :         } else {

  000fe	eb 3a		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4132 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00100	8b 55 1c	 mov	 edx, DWORD PTR _<_Args_3>$[ebp]
  00103	52		 push	 edx
  00104	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00107	50		 push	 eax
  00108	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  0010f	52		 push	 edx
  00110	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00113	50		 push	 eax
  00114	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00117	83 c1 04	 add	 ecx, 4
  0011a	51		 push	 ecx
  0011b	8b 55 d4	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  0011e	52		 push	 edx
  0011f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00122	e8 00 00 00 00	 call	 ??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator()

; 4133 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00127	8d 45 dc	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0012e	83 c1 04	 add	 ecx, 4
  00131	51		 push	 ecx
  00132	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00137	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4134 :         }
; 4135 : 
; 4136 :         return *this;

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4137 :     }

  0013d	52		 push	 edx
  0013e	8b cd		 mov	 ecx, ebp
  00140	50		 push	 eax
  00141	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00147	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014c	58		 pop	 eax
  0014d	5a		 pop	 edx
  0014e	5f		 pop	 edi
  0014f	83 c4 30	 add	 esp, 48			; 00000030H
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 18 00	 ret	 24			; 00000018H
  0015f	90		 npad	 1
$LN8@Reallocate:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00168	dc ff ff ff	 DD	 -36			; ffffffdcH
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00174	5f		 DB	 95			; 0000005fH
  00175	4e		 DB	 78			; 0000004eH
  00176	65		 DB	 101			; 00000065H
  00177	77		 DB	 119			; 00000077H
  00178	5f		 DB	 95			; 0000005fH
  00179	70		 DB	 112			; 00000070H
  0017a	74		 DB	 116			; 00000074H
  0017b	72		 DB	 114			; 00000072H
  0017c	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__N0$ = 24						; size = 4
__Ptr$ = 28						; size = 4
__Count$ = 32						; size = 4
??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z PROC ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator(), COMDAT
; _this$ = ecx

; 3211 :                 const size_type _N0, const _Elem* const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3212 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);

  0000e	8b 45 14	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3213 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00022	8b 45 20	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 1c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0002d	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3214 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  00039	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0003c	2b 45 18	 sub	 eax, DWORD PTR __N0$[ebp]
  0003f	2b 45 14	 sub	 eax, DWORD PTR __Off$[ebp]
  00042	83 c0 01	 add	 eax, 1
  00045	50		 push	 eax
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00049	03 4d 14	 add	 ecx, DWORD PTR __Off$[ebp]
  0004c	03 4d 18	 add	 ecx, DWORD PTR __N0$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00053	03 55 14	 add	 edx, DWORD PTR __Off$[ebp]
  00056	03 55 20	 add	 edx, DWORD PTR __Count$[ebp]
  00059	52		 push	 edx
  0005a	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             },

  00062	83 c4 04	 add	 esp, 4
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 1c 00	 ret	 28			; 0000001cH
??R<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@QBEXQADQBDIII1I@Z ENDP ; <lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   :     _NOEXCEPT_COND(noexcept(_Left < _Right)) { // return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 33   :     return _Left < _Right ? _Right : _Left;

  00014	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Max_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 34   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  :     _Obj.~_Ty();
; 323  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z PROC ; std::_Pocma<std::allocator<wchar_t> >, COMDAT

; 968  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 969  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 970  :         _Left = _STD move(_Right);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::move<std::allocator<wchar_t> &>
  0000c	83 c4 04	 add	 esp, 4

; 971  :     } else {
; 972  :         (void) _Left; // TRANSITION, VSO#486357
; 973  :         (void) _Right; // TRANSITION, VSO#486357
; 974  :     }
; 975  : }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ENDP ; std::_Pocma<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z PROC ; std::_Construct_in_place<wchar_t *,wchar_t * const &>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ; std::addressof<wchar_t *>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 04		 push	 4
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z ; std::forward<wchar_t * const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  00038	83 c4 04	 add	 esp, 4
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ENDP ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z
_TEXT	SEGMENT
__New_ptr$ = -24					; size = 4
__Al$ = -16						; size = 4
__New_capacity$ = -12					; size = 4
__Old_capacity$ = -8					; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>, COMDAT
; _this$ = ecx

; 4082 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4083 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4084 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4085 :         if (_New_size > max_size()) {

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  0002b	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  0002e	76 05		 jbe	 SHORT $LN2@Reallocate

; 4086 :             _Xlen(); // result too long

  00030	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@Reallocate:

; 4087 :         }
; 4088 : 
; 4089 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	89 4d f8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 4090 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003e	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  0004a	89 45 f4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4091 :         auto& _Al                     = _Getal();

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00055	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 4092 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00058	8b 45 f4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00067	89 45 e8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4093 :         _Mypair._Myval2._Orphan_all();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4094 :         _Mypair._Myval2._Mysize = _New_size;

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00078	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 4095 :         _Mypair._Myval2._Myres  = _New_capacity;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00081	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 4096 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00084	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00087	52		 push	 edx
  00088	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  00095	83 c4 04	 add	 esp, 4
  00098	50		 push	 eax
  00099	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0009c	e8 00 00 00 00	 call	 ??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()

; 4097 :         if (_BUF_SIZE <= _Old_capacity) {

  000a1	83 7d f8 08	 cmp	 DWORD PTR __Old_capacity$[ebp], 8
  000a5	72 21		 jb	 SHORT $LN3@Reallocate

; 4098 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000a7	8b 55 f8	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  000aa	83 c2 01	 add	 edx, 1
  000ad	52		 push	 edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	51		 push	 ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000b8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate

; 4099 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 45 e8	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000c3	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 4100 :         } else {

  000c6	eb 13		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4101 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c8	8d 4d e8	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	83 c2 04	 add	 edx, 4
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  000d8	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4102 :         }
; 4103 : 
; 4104 :         return *this;

  000db	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4105 :     }

  000de	52		 push	 edx
  000df	8b cd		 mov	 ecx, ebp
  000e1	50		 push	 eax
  000e2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  000e8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ed	58		 pop	 eax
  000ee	5a		 pop	 edx
  000ef	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f2	3b ec		 cmp	 ebp, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 0c 00	 ret	 12			; 0000000cH
  000ff	90		 npad	 1
$LN8@Reallocate:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00108	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00114	5f		 DB	 95			; 0000005fH
  00115	4e		 DB	 78			; 0000004eH
  00116	65		 DB	 101			; 00000065H
  00117	77		 DB	 119			; 00000077H
  00118	5f		 DB	 95			; 0000005fH
  00119	70		 DB	 112			; 00000070H
  0011a	74		 DB	 116			; 00000074H
  0011b	72		 DB	 114			; 00000072H
  0011c	00		 DB	 0
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z
_TEXT	SEGMENT
$T1 = -6						; size = 2
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z PROC ; <lambda_03628ca18370b1f44a99b655e704819b>::operator(), COMDAT
; _this$ = ecx

; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00017	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002b	33 c0		 xor	 eax, eax
  0002d	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  00031	8d 4d fa	 lea	 ecx, DWORD PTR $T1[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00038	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0003b	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  00044	83 c4 08	 add	 esp, 8

; 2856 :             },

  00047	83 c4 08	 add	 esp, 8
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ENDP ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -48					; size = 4
__Raw_new$ = -44					; size = 4
__New_ptr$ = -36					; size = 4
__Al$ = -28						; size = 4
__New_capacity$ = -24					; size = 4
__Old_capacity$ = -20					; size = 4
__New_size$ = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
_<_Args_3>$ = 28					; size = 4
??$_Reallocate_grow_by@V<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_150d3e25e2edcb1375af403c31441d08>,unsigned int,unsigned int,wchar_t const *,unsigned int>, COMDAT
; _this$ = ecx

; 4108 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4109 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4110 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4111 :         auto& _My_data            = _Mypair._Myval2;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4112 :         const size_type _Old_size = _My_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Old_size$[ebp], edx

; 4113 :         if (max_size() - _Old_size < _Size_increase) {

  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00032	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00035	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00038	73 05		 jae	 SHORT $LN2@Reallocate

; 4114 :             _Xlen(); // result too long

  0003a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN2@Reallocate:

; 4115 :         }
; 4116 : 
; 4117 :         const size_type _New_size     = _Old_size + _Size_increase;

  0003f	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00042	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR __New_size$[ebp], eax

; 4118 :         const size_type _Old_capacity = _My_data._Myres;

  00048	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004b	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0004e	89 55 ec	 mov	 DWORD PTR __Old_capacity$[ebp], edx

; 4119 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00051	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  0005d	89 45 e8	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4120 :         auto& _Al                     = _Getal();

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00068	89 45 e4	 mov	 DWORD PTR __Al$[ebp], eax

; 4121 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	51		 push	 ecx
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00075	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  0007a	89 45 dc	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4122 :         _My_data._Orphan_all();

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4123 :         _My_data._Mysize      = _New_size;

  00085	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00088	8b 45 f0	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008b	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 4124 :         _My_data._Myres       = _New_capacity;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00091	8b 55 e8	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  00094	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 4125 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00097	8b 45 dc	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d4	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 4126 :         if (_BUF_SIZE <= _Old_capacity) {

  000a6	83 7d ec 08	 cmp	 DWORD PTR __Old_capacity$[ebp], 8
  000aa	72 54		 jb	 SHORT $LN3@Reallocate

; 4127 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ac	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b2	89 55 d0	 mov	 DWORD PTR __Old_ptr$1[ebp], edx

; 4128 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000b5	8b 45 1c	 mov	 eax, DWORD PTR _<_Args_3>$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 d0	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  000d2	83 c4 04	 add	 esp, 4
  000d5	50		 push	 eax
  000d6	8b 45 d4	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000d9	50		 push	 eax
  000da	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000dd	e8 00 00 00 00	 call	 ??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z ; <lambda_150d3e25e2edcb1375af403c31441d08>::operator()

; 4129 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e2	8b 4d ec	 mov	 ecx, DWORD PTR __Old_capacity$[ebp]
  000e5	83 c1 01	 add	 ecx, 1
  000e8	51		 push	 ecx
  000e9	8b 55 d0	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000ec	52		 push	 edx
  000ed	8b 4d e4	 mov	 ecx, DWORD PTR __Al$[ebp]
  000f0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate

; 4130 :             _My_data._Bx._Ptr = _New_ptr;

  000f5	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f8	8b 4d dc	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000fb	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4131 :         } else {

  000fe	eb 3a		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4132 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00100	8b 55 1c	 mov	 edx, DWORD PTR _<_Args_3>$[ebp]
  00103	52		 push	 edx
  00104	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00107	50		 push	 eax
  00108	8b 4d 14	 mov	 ecx, DWORD PTR _<_Args_1>$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  0010f	52		 push	 edx
  00110	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00113	50		 push	 eax
  00114	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00117	83 c1 04	 add	 ecx, 4
  0011a	51		 push	 ecx
  0011b	8b 55 d4	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  0011e	52		 push	 edx
  0011f	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00122	e8 00 00 00 00	 call	 ??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z ; <lambda_150d3e25e2edcb1375af403c31441d08>::operator()

; 4133 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00127	8d 45 dc	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0012e	83 c1 04	 add	 ecx, 4
  00131	51		 push	 ecx
  00132	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  00137	83 c4 08	 add	 esp, 8
$LN4@Reallocate:

; 4134 :         }
; 4135 : 
; 4136 :         return *this;

  0013a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4137 :     }

  0013d	52		 push	 edx
  0013e	8b cd		 mov	 ecx, ebp
  00140	50		 push	 eax
  00141	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@Reallocate
  00147	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014c	58		 pop	 eax
  0014d	5a		 pop	 edx
  0014e	5f		 pop	 edi
  0014f	83 c4 30	 add	 esp, 48			; 00000030H
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 18 00	 ret	 24			; 00000018H
  0015f	90		 npad	 1
$LN8@Reallocate:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN7@Reallocate
$LN7@Reallocate:
  00168	dc ff ff ff	 DD	 -36			; ffffffdcH
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN6@Reallocate
$LN6@Reallocate:
  00174	5f		 DB	 95			; 0000005fH
  00175	4e		 DB	 78			; 0000004eH
  00176	65		 DB	 101			; 00000065H
  00177	77		 DB	 119			; 00000077H
  00178	5f		 DB	 95			; 0000005fH
  00179	70		 DB	 112			; 00000070H
  0017a	74		 DB	 116			; 00000074H
  0017b	72		 DB	 114			; 00000072H
  0017c	00		 DB	 0
??$_Reallocate_grow_by@V<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_150d3e25e2edcb1375af403c31441d08>,unsigned int,unsigned int,wchar_t const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__N0$ = 24						; size = 4
__Ptr$ = 28						; size = 4
__Count$ = 32						; size = 4
??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z PROC ; <lambda_150d3e25e2edcb1375af403c31441d08>::operator(), COMDAT
; _this$ = ecx

; 3211 :                 const size_type _N0, const _Elem* const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3212 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);

  0000e	8b 45 14	 mov	 eax, DWORD PTR __Off$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3213 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);

  00022	8b 45 20	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 1c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 14	 mov	 edx, DWORD PTR __Off$[ebp]
  0002d	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00030	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3214 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);

  0003c	8b 55 10	 mov	 edx, DWORD PTR __Old_size$[ebp]
  0003f	2b 55 18	 sub	 edx, DWORD PTR __N0$[ebp]
  00042	2b 55 14	 sub	 edx, DWORD PTR __Off$[ebp]
  00045	83 c2 01	 add	 edx, 1
  00048	52		 push	 edx
  00049	8b 45 14	 mov	 eax, DWORD PTR __Off$[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  0004f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00052	8b 45 18	 mov	 eax, DWORD PTR __N0$[ebp]
  00055	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00058	51		 push	 ecx
  00059	8b 55 14	 mov	 edx, DWORD PTR __Off$[ebp]
  0005c	8b 45 08	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0005f	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00062	8b 55 20	 mov	 edx, DWORD PTR __Count$[ebp]
  00065	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3215 :             },

  00071	83 c4 04	 add	 esp, 4
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 1c 00	 ret	 28			; 0000001cH
??R<lambda_150d3e25e2edcb1375af403c31441d08>@@QBEXQA_WQB_WIII1I@Z ENDP ; <lambda_150d3e25e2edcb1375af403c31441d08>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z PROC		; std::_Destroy_in_place<wchar_t *>, COMDAT

; 321  : void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 322  :     _Obj.~_Ty();
; 323  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ENDP		; std::_Destroy_in_place<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unwrapped@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 184  :     _NODISCARD const value_type* _Unwrapped() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 185  :         return _Unfancy(_Ptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0001a	83 c4 04	 add	 esp, 4

; 186  :     }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Unwrapped@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@0@Z PROC ; std::_Verify_range, COMDAT

; 176  :     friend void _Verify_range(const _Vector_const_iterator& _First, const _Vector_const_iterator& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
$LN4@Verify_ran:

; 177  :         _STL_VERIFY(_First._Getcont() == _Last._Getcont(), "vector iterators in range are from different containers");

  00004	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00007	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0000c	8b f0		 mov	 esi, eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00016	3b f0		 cmp	 esi, eax
  00018	75 02		 jne	 SHORT $LN7@Verify_ran
  0001a	eb 5c		 jmp	 SHORT $LN2@Verify_ran
$LN7@Verify_ran:
  0001c	8b f4		 mov	 esi, esp
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PBEELKIF@vector?5iterators?5in?5range?5are?5f@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00028	6a 00		 push	 0
  0002a	68 b1 00 00 00	 push	 177			; 000000b1H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00034	6a 02		 push	 2
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	83 f8 01	 cmp	 eax, 1
  00049	75 01		 jne	 SHORT $LN19@Verify_ran
  0004b	cc		 int	 3
$LN19@Verify_ran:
  0004c	8b f4		 mov	 esi, esp
  0004e	6a 00		 push	 0
  00050	68 b1 00 00 00	 push	 177			; 000000b1H
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@KBMFDAFB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	33 c9		 xor	 ecx, ecx
  00076	75 a4		 jne	 SHORT $LN7@Verify_ran
$LN2@Verify_ran:
  00078	33 d2		 xor	 edx, edx
  0007a	75 88		 jne	 SHORT $LN4@Verify_ran
$LN10@Verify_ran:

; 178  :         _STL_VERIFY(_First._Ptr <= _Last._Ptr, "vector iterator range transposed");

  0007c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00082	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00085	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00088	77 02		 ja	 SHORT $LN13@Verify_ran
  0008a	eb 5c		 jmp	 SHORT $LN8@Verify_ran
$LN13@Verify_ran:
  0008c	8b f4		 mov	 esi, esp
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LIAHLBAO@vector?5iterator?5range?5transpose@
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00098	6a 00		 push	 0
  0009a	68 b2 00 00 00	 push	 178			; 000000b2H
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a4	6a 02		 push	 2
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	83 f8 01	 cmp	 eax, 1
  000b9	75 01		 jne	 SHORT $LN20@Verify_ran
  000bb	cc		 int	 3
$LN20@Verify_ran:
  000bc	8b f4		 mov	 esi, esp
  000be	6a 00		 push	 0
  000c0	68 b2 00 00 00	 push	 178			; 000000b2H
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@ODKBEHFN@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000da	83 c4 14	 add	 esp, 20			; 00000014H
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	33 c9		 xor	 ecx, ecx
  000e6	75 a4		 jne	 SHORT $LN13@Verify_ran
$LN8@Verify_ran:
  000e8	33 d2		 xor	 edx, edx
  000ea	75 90		 jne	 SHORT $LN10@Verify_ran

; 179  :     }

  000ec	5e		 pop	 esi
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@0@Z ENDP ; std::_Verify_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 36   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) : _Ptr(_Parg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00042	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 37   :         this->_Adopt(_Pvector);

  00045	8b 55 0c	 mov	 edx, DWORD PTR __Pvector$[ebp]
  00048	52		 push	 edx
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 38   :     }

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 198  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) _NOEXCEPT_COND(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 199  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
  00014	83 c4 04	 add	 esp, 4
  00017	50		 push	 eax
  00018	6a 08		 push	 8
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0001f	83 c4 08	 add	 esp, 8
  00022	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
  0002e	83 c4 04	 add	 esp, 4
  00031	8b 10		 mov	 edx, DWORD PTR [eax]
  00033	52		 push	 edx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00037	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 200  :         _Ty(_STD forward<_Types>(_Args)...);
; 201  : }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__Possible_matches_end$ = -4				; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z PROC ; std::_Traits_find<std::char_traits<char> >, COMDAT

; 541  :     const size_t _Needle_size) noexcept { // search [_Haystack, _Haystack + _Hay_size) for [_Needle, _Needle +

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 542  :                                           // _Needle_size), at/after _Start_at
; 543  :     if (_Needle_size > _Hay_size
; 544  :         || _Start_at > _Hay_size - _Needle_size) { // xpos cannot exist, report failure

  00014	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0001a	77 0b		 ja	 SHORT $LN6@Traits_fin
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  0001f	2b 4d 18	 sub	 ecx, DWORD PTR __Needle_size$[ebp]
  00022	39 4d 10	 cmp	 DWORD PTR __Start_at$[ebp], ecx
  00025	76 05		 jbe	 SHORT $LN5@Traits_fin
$LN6@Traits_fin:

; 545  :                                                    // N4659 24.3.2.7.2 [string.find]/1 says:
; 546  :                                                    // 1. _Start_at <= xpos
; 547  :                                                    // 2. xpos + _Needle_size <= _Hay_size;
; 548  :                                                    // therefore:
; 549  :                                                    // 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 550  :                                                    // 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 551  :                                                    // 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to
; 552  :                                                    // other side) (also checked above)
; 553  :         return static_cast<size_t>(-1);

  00027	83 c8 ff	 or	 eax, -1
  0002a	eb 76		 jmp	 SHORT $LN1@Traits_fin
$LN5@Traits_fin:

; 554  :     }
; 555  : 
; 556  :     if (_Needle_size == 0) { // empty string always matches if xpos is possible

  0002c	83 7d 18 00	 cmp	 DWORD PTR __Needle_size$[ebp], 0
  00030	75 05		 jne	 SHORT $LN7@Traits_fin

; 557  :         return _Start_at;

  00032	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00035	eb 6b		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 558  :     }
; 559  : 
; 560  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00037	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  0003a	2b 55 18	 sub	 edx, DWORD PTR __Needle_size$[ebp]
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00040	8d 4c 10 01	 lea	 ecx, DWORD PTR [eax+edx+1]
  00044	89 4d fc	 mov	 DWORD PTR __Possible_matches_end$[ebp], ecx

; 561  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  00047	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  0004a	03 55 10	 add	 edx, DWORD PTR __Start_at$[ebp]
  0004d	89 55 f8	 mov	 DWORD PTR __Match_try$1[ebp], edx
  00050	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00052	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
$LN4@Traits_fin:

; 562  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  0005b	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0005e	51		 push	 ecx
  0005f	8b 55 fc	 mov	 edx, DWORD PTR __Possible_matches_end$[ebp]
  00062	2b 55 f8	 sub	 edx, DWORD PTR __Match_try$1[ebp]
  00065	52		 push	 edx
  00066	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax

; 563  :         if (!_Match_try) { // didn't find first character; report failure

  00075	83 7d f8 00	 cmp	 DWORD PTR __Match_try$1[ebp], 0
  00079	75 05		 jne	 SHORT $LN8@Traits_fin

; 564  :             return static_cast<size_t>(-1);

  0007b	83 c8 ff	 or	 eax, -1
  0007e	eb 22		 jmp	 SHORT $LN1@Traits_fin
$LN8@Traits_fin:

; 565  :         }
; 566  : 
; 567  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  00080	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00087	52		 push	 edx
  00088	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	85 c0		 test	 eax, eax
  00096	75 08		 jne	 SHORT $LN9@Traits_fin

; 568  :             return static_cast<size_t>(_Match_try - _Haystack);

  00098	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  0009b	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  0009e	eb 02		 jmp	 SHORT $LN1@Traits_fin
$LN9@Traits_fin:

; 569  :         }
; 570  :     }

  000a0	eb b0		 jmp	 SHORT $LN2@Traits_fin
$LN1@Traits_fin:

; 571  : }

  000a2	83 c4 08	 add	 esp, 8
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ENDP ; std::_Traits_find<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__End$2 = -4						; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_first_of<std::char_traits<char> >, COMDAT

; 684  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 685  :     // in [_Haystack, _Haystack + _Hay_size), look for one of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 686  :     // general algorithm
; 687  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  00014	83 7d 18 00	 cmp	 DWORD PTR __Needle_size$[ebp], 0
  00018	74 4f		 je	 SHORT $LN5@Traits_fin
  0001a	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0001d	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  00020	73 47		 jae	 SHORT $LN5@Traits_fin

; 688  :         const auto _End = _Haystack + _Hay_size;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  00025	03 4d 0c	 add	 ecx, DWORD PTR __Hay_size$[ebp]
  00028	89 4d fc	 mov	 DWORD PTR __End$2[ebp], ecx

; 689  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  0002b	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  0002e	03 55 10	 add	 edx, DWORD PTR __Start_at$[ebp]
  00031	89 55 f8	 mov	 DWORD PTR __Match_try$1[ebp], edx
  00034	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00036	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
$LN4@Traits_fin:
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR __Match_try$1[ebp]
  00042	3b 4d fc	 cmp	 ecx, DWORD PTR __End$2[ebp]
  00045	73 22		 jae	 SHORT $LN5@Traits_fin

; 690  :             if (_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00047	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  0004a	52		 push	 edx
  0004b	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	85 c0		 test	 eax, eax
  0005d	74 08		 je	 SHORT $LN6@Traits_fin

; 691  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00062	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00065	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 692  :             }
; 693  :         }

  00067	eb cd		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 694  :     }
; 695  : 
; 696  :     return static_cast<size_t>(-1); // no match

  00069	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 697  : }

  0006c	83 c4 08	 add	 esp, 8
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_first_of<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -289						; size = 1
__Match_try$3 = -288					; size = 4
__End$4 = -284						; size = 4
__Matches$5 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_first_of<std::char_traits<char> >, COMDAT

; 702  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	57		 push	 edi
  00018	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  0001e	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 703  :     // in [_Haystack, _Haystack + _Hay_size), look for one of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 704  :     // special case for std::char_traits
; 705  :     if (_Needle_size != 0 && _Start_at < _Hay_size) { // room for match, look for it

  0003e	83 7d 18 00	 cmp	 DWORD PTR __Needle_size$[ebp], 0
  00042	0f 84 c2 00 00
	00		 je	 $LN5@Traits_fin
  00048	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0004b	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0004e	0f 83 b6 00 00
	00		 jae	 $LN5@Traits_fin

; 706  :         _String_bitmap<typename _Traits::char_type> _Matches;

  00054	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  0005a	e8 00 00 00 00	 call	 ??0?$_String_bitmap@D$00@std@@QAE@XZ

; 707  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  0005f	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00062	03 4d 18	 add	 ecx, DWORD PTR __Needle_size$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00069	52		 push	 edx
  0006a	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00070	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  00075	0f b6 c0	 movzx	 eax, al
  00078	85 c0		 test	 eax, eax
  0007a	75 2e		 jne	 SHORT $LN6@Traits_fin

; 708  :                                                                 // fall back to the serial algorithm
; 709  :             return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});

  0007c	33 c9		 xor	 ecx, ecx
  0007e	88 8d df fe ff
	ff		 mov	 BYTE PTR $T2[ebp], cl
  00084	0f b6 95 df fe
	ff ff		 movzx	 edx, BYTE PTR $T2[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00093	51		 push	 ecx
  00094	8b 55 10	 mov	 edx, DWORD PTR __Start_at$[ebp]
  00097	52		 push	 edx
  00098	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_of<std::char_traits<char> >
  000a5	83 c4 18	 add	 esp, 24			; 00000018H
  000a8	eb 63		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 710  :         }
; 711  : 
; 712  :         const auto _End = _Haystack + _Hay_size;

  000aa	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  000ad	03 55 0c	 add	 edx, DWORD PTR __Hay_size$[ebp]
  000b0	89 95 e4 fe ff
	ff		 mov	 DWORD PTR __End$4[ebp], edx

; 713  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  000b6	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  000b9	03 45 10	 add	 eax, DWORD PTR __Start_at$[ebp]
  000bc	89 85 e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], eax
  000c2	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000c4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR __Match_try$3[ebp]
  000ca	83 c1 01	 add	 ecx, 1
  000cd	89 8d e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], ecx
$LN4@Traits_fin:
  000d3	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR __Match_try$3[ebp]
  000d9	3b 95 e4 fe ff
	ff		 cmp	 edx, DWORD PTR __End$4[ebp]
  000df	73 29		 jae	 SHORT $LN5@Traits_fin

; 714  :             if (_Matches._Match(*_Match_try)) {

  000e1	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000e7	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ea	51		 push	 ecx
  000eb	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000f1	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ; std::_String_bitmap<char,1>::_Match
  000f6	0f b6 d0	 movzx	 edx, al
  000f9	85 d2		 test	 edx, edx
  000fb	74 0b		 je	 SHORT $LN7@Traits_fin

; 715  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000fd	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  00103	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00106	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 716  :             }
; 717  :         }

  00108	eb ba		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 718  :     }
; 719  : 
; 720  :     return static_cast<size_t>(-1); // no match

  0010a	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 721  : }

  0010d	52		 push	 edx
  0010e	8b cd		 mov	 ecx, ebp
  00110	50		 push	 eax
  00111	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Traits_fin
  00117	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011c	58		 pop	 eax
  0011d	5a		 pop	 edx
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN12@Traits_fin:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN11@Traits_fin
$LN11@Traits_fin:
  00150	ec fe ff ff	 DD	 -276			; fffffeecH
  00154	00 01 00 00	 DD	 256			; 00000100H
  00158	00 00 00 00	 DD	 $LN9@Traits_fin
$LN9@Traits_fin:
  0015c	5f		 DB	 95			; 0000005fH
  0015d	4d		 DB	 77			; 0000004dH
  0015e	61		 DB	 97			; 00000061H
  0015f	74		 DB	 116			; 00000074H
  00160	63		 DB	 99			; 00000063H
  00161	68		 DB	 104			; 00000068H
  00162	65		 DB	 101			; 00000065H
  00163	73		 DB	 115			; 00000073H
  00164	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_first_of<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__End$2 = -4						; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<char> >, COMDAT

; 774  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 775  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 776  :     // general algorithm
; 777  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00014	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0001a	73 47		 jae	 SHORT $LN5@Traits_fin

; 778  :         const auto _End = _Haystack + _Hay_size;

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  0001f	03 4d 0c	 add	 ecx, DWORD PTR __Hay_size$[ebp]
  00022	89 4d fc	 mov	 DWORD PTR __End$2[ebp], ecx

; 779  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00025	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  00028	03 55 10	 add	 edx, DWORD PTR __Start_at$[ebp]
  0002b	89 55 f8	 mov	 DWORD PTR __Match_try$1[ebp], edx
  0002e	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00030	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
$LN4@Traits_fin:
  00039	8b 4d f8	 mov	 ecx, DWORD PTR __Match_try$1[ebp]
  0003c	3b 4d fc	 cmp	 ecx, DWORD PTR __End$2[ebp]
  0003f	73 22		 jae	 SHORT $LN5@Traits_fin

; 780  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00041	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00044	52		 push	 edx
  00045	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	85 c0		 test	 eax, eax
  00057	75 08		 jne	 SHORT $LN6@Traits_fin

; 781  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00059	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  0005c	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  0005f	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 782  :             }
; 783  :         }

  00061	eb cd		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 784  :     }
; 785  : 
; 786  :     return static_cast<size_t>(-1); // no match

  00063	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 787  : }

  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -289						; size = 1
__Match_try$3 = -288					; size = 4
__End$4 = -284						; size = 4
__Matches$5 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<char> >, COMDAT

; 792  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	57		 push	 edi
  00018	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  0001e	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 793  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 794  :     // special case for std::char_traits
; 795  :     if (_Start_at < _Hay_size) { // room for match, look for it

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00041	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  00044	0f 83 b6 00 00
	00		 jae	 $LN5@Traits_fin

; 796  :         _String_bitmap<typename _Traits::char_type> _Matches;

  0004a	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00050	e8 00 00 00 00	 call	 ??0?$_String_bitmap@D$00@std@@QAE@XZ

; 797  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00055	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00058	03 4d 18	 add	 ecx, DWORD PTR __Needle_size$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  0005f	52		 push	 edx
  00060	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00066	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  0006b	0f b6 c0	 movzx	 eax, al
  0006e	85 c0		 test	 eax, eax
  00070	75 2e		 jne	 SHORT $LN6@Traits_fin

; 798  :                                                                 // fall back to the serial algorithm
; 799  :             return _Traits_find_first_not_of<_Traits>(

  00072	33 c9		 xor	 ecx, ecx
  00074	88 8d df fe ff
	ff		 mov	 BYTE PTR $T2[ebp], cl
  0007a	0f b6 95 df fe
	ff ff		 movzx	 edx, BYTE PTR $T2[ebp]
  00081	52		 push	 edx
  00082	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00085	50		 push	 eax
  00086	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 10	 mov	 edx, DWORD PTR __Start_at$[ebp]
  0008d	52		 push	 edx
  0008e	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  00091	50		 push	 eax
  00092	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
  0009b	83 c4 18	 add	 esp, 24			; 00000018H
  0009e	eb 63		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 800  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 801  :         }
; 802  : 
; 803  :         const auto _End = _Haystack + _Hay_size;

  000a0	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  000a3	03 55 0c	 add	 edx, DWORD PTR __Hay_size$[ebp]
  000a6	89 95 e4 fe ff
	ff		 mov	 DWORD PTR __End$4[ebp], edx

; 804  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  000ac	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  000af	03 45 10	 add	 eax, DWORD PTR __Start_at$[ebp]
  000b2	89 85 e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], eax
  000b8	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000ba	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR __Match_try$3[ebp]
  000c0	83 c1 01	 add	 ecx, 1
  000c3	89 8d e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], ecx
$LN4@Traits_fin:
  000c9	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR __Match_try$3[ebp]
  000cf	3b 95 e4 fe ff
	ff		 cmp	 edx, DWORD PTR __End$4[ebp]
  000d5	73 29		 jae	 SHORT $LN5@Traits_fin

; 805  :             if (!_Matches._Match(*_Match_try)) {

  000d7	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000dd	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000e0	51		 push	 ecx
  000e1	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000e7	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ; std::_String_bitmap<char,1>::_Match
  000ec	0f b6 d0	 movzx	 edx, al
  000ef	85 d2		 test	 edx, edx
  000f1	75 0b		 jne	 SHORT $LN7@Traits_fin

; 806  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000f3	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000f9	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000fc	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 807  :             }
; 808  :         }

  000fe	eb ba		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 809  :     }
; 810  : 
; 811  :     return static_cast<size_t>(-1); // no match

  00100	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 812  : }

  00103	52		 push	 edx
  00104	8b cd		 mov	 ecx, ebp
  00106	50		 push	 eax
  00107	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Traits_fin
  0010d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00112	58		 pop	 eax
  00113	5a		 pop	 edx
  00114	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00117	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011e	59		 pop	 ecx
  0011f	5f		 pop	 edi
  00120	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
  0013b	90		 npad	 1
$LN12@Traits_fin:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN11@Traits_fin
$LN11@Traits_fin:
  00144	ec fe ff ff	 DD	 -276			; fffffeecH
  00148	00 01 00 00	 DD	 256			; 00000100H
  0014c	00 00 00 00	 DD	 $LN9@Traits_fin
$LN9@Traits_fin:
  00150	5f		 DB	 95			; 0000005fH
  00151	4d		 DB	 77			; 0000004dH
  00152	61		 DB	 97			; 00000061H
  00153	74		 DB	 116			; 00000074H
  00154	63		 DB	 99			; 00000063H
  00155	68		 DB	 104			; 00000068H
  00156	65		 DB	 101			; 00000065H
  00157	73		 DB	 115			; 00000073H
  00158	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__Match_try$2 = -4					; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<char> >, COMDAT

; 833  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 834  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 835  :     // general algorithm
; 836  :     if (_Hay_size != 0) { // worth searching, do it

  00014	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00018	74 58		 je	 SHORT $LN5@Traits_fin

; 837  :         for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  0001d	83 e8 01	 sub	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  00026	51		 push	 ecx
  00027	8d 55 10	 lea	 edx, DWORD PTR __Start_at$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00030	83 c4 08	 add	 esp, 8
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  00036	03 08		 add	 ecx, DWORD PTR [eax]
  00038	89 4d fc	 mov	 DWORD PTR __Match_try$2[ebp], ecx
  0003b	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  0003d	8b 55 fc	 mov	 edx, DWORD PTR __Match_try$2[ebp]
  00040	83 ea 01	 sub	 edx, 1
  00043	89 55 fc	 mov	 DWORD PTR __Match_try$2[ebp], edx
$LN4@Traits_fin:

; 838  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00046	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ; std::_Narrow_char_traits<char,int>::find
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	85 c0		 test	 eax, eax
  0005c	75 08		 jne	 SHORT $LN6@Traits_fin

; 839  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0005e	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00061	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00064	eb 0f		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 840  :             }
; 841  : 
; 842  :             if (_Match_try == _Haystack) {

  00066	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00069	3b 45 08	 cmp	 eax, DWORD PTR __Haystack$[ebp]
  0006c	75 02		 jne	 SHORT $LN7@Traits_fin

; 843  :                 break; // at beginning, no more chance for match

  0006e	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN7@Traits_fin:

; 844  :             }
; 845  :         }

  00070	eb cb		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 846  :     }
; 847  : 
; 848  :     return static_cast<size_t>(-1); // no match

  00072	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 849  : }

  00075	83 c4 08	 add	 esp, 8
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -292						; size = 4
$T3 = -285						; size = 1
__Match_try$4 = -284					; size = 4
__Matches$5 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<char> >, COMDAT

; 854  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	57		 push	 edi
  00018	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  0001e	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 855  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 856  :     // special case for std::char_traits
; 857  :     if (_Hay_size != 0) { // worth searching, do it

  0003e	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00042	0f 84 c7 00 00
	00		 je	 $LN5@Traits_fin

; 858  :         _String_bitmap<typename _Traits::char_type> _Matches;

  00048	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  0004e	e8 00 00 00 00	 call	 ??0?$_String_bitmap@D$00@std@@QAE@XZ

; 859  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00053	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00056	03 45 18	 add	 eax, DWORD PTR __Needle_size$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0005d	51		 push	 ecx
  0005e	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00064	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  00069	0f b6 d0	 movzx	 edx, al
  0006c	85 d2		 test	 edx, edx
  0006e	75 2e		 jne	 SHORT $LN6@Traits_fin

; 860  :                                                                 // fall back to the serial algorithm
; 861  :             return _Traits_find_last_not_of<_Traits>(

  00070	33 c0		 xor	 eax, eax
  00072	88 85 e3 fe ff
	ff		 mov	 BYTE PTR $T3[ebp], al
  00078	0f b6 8d e3 fe
	ff ff		 movzx	 ecx, BYTE PTR $T3[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 18	 mov	 edx, DWORD PTR __Needle_size$[ebp]
  00083	52		 push	 edx
  00084	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00087	50		 push	 eax
  00088	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
  00099	83 c4 18	 add	 esp, 24			; 00000018H
  0009c	eb 74		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 862  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 863  :         }
; 864  : 
; 865  :         for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {

  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  000a1	83 e9 01	 sub	 ecx, 1
  000a4	89 8d dc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  000aa	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  000b0	52		 push	 edx
  000b1	8d 45 10	 lea	 eax, DWORD PTR __Start_at$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  000ba	83 c4 08	 add	 esp, 8
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  000c0	03 08		 add	 ecx, DWORD PTR [eax]
  000c2	89 8d e4 fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], ecx
  000c8	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000ca	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR __Match_try$4[ebp]
  000d0	83 ea 01	 sub	 edx, 1
  000d3	89 95 e4 fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], edx
$LN4@Traits_fin:

; 866  :             if (!_Matches._Match(*_Match_try)) {

  000d9	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000df	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000e2	51		 push	 ecx
  000e3	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000e9	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@D$00@std@@QBE_ND@Z ; std::_String_bitmap<char,1>::_Match
  000ee	0f b6 d0	 movzx	 edx, al
  000f1	85 d2		 test	 edx, edx
  000f3	75 0b		 jne	 SHORT $LN7@Traits_fin

; 867  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000f5	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000fb	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000fe	eb 12		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 868  :             }
; 869  : 
; 870  :             if (_Match_try == _Haystack) {

  00100	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  00106	3b 45 08	 cmp	 eax, DWORD PTR __Haystack$[ebp]
  00109	75 02		 jne	 SHORT $LN8@Traits_fin

; 871  :                 break; // at beginning, no more chance for match

  0010b	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN8@Traits_fin:

; 872  :             }
; 873  :         }

  0010d	eb bb		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 874  :     }
; 875  : 
; 876  :     return static_cast<size_t>(-1); // no match

  0010f	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 877  : }

  00112	52		 push	 edx
  00113	8b cd		 mov	 ecx, ebp
  00115	50		 push	 eax
  00116	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Traits_fin
  0011c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00121	58		 pop	 eax
  00122	5a		 pop	 edx
  00123	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00126	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012d	59		 pop	 ecx
  0012e	5f		 pop	 edi
  0012f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00132	33 cd		 xor	 ecx, ebp
  00134	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00139	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0013f	3b ec		 cmp	 ebp, esp
  00141	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
  0014a	66 90		 npad	 2
$LN13@Traits_fin:
  0014c	01 00 00 00	 DD	 1
  00150	00 00 00 00	 DD	 $LN12@Traits_fin
$LN12@Traits_fin:
  00154	ec fe ff ff	 DD	 -276			; fffffeecH
  00158	00 01 00 00	 DD	 256			; 00000100H
  0015c	00 00 00 00	 DD	 $LN10@Traits_fin
$LN10@Traits_fin:
  00160	5f		 DB	 95			; 0000005fH
  00161	4d		 DB	 77			; 0000004dH
  00162	61		 DB	 97			; 00000061H
  00163	74		 DB	 116			; 00000074H
  00164	63		 DB	 99			; 00000063H
  00165	68		 DB	 104			; 00000068H
  00166	65		 DB	 101			; 00000065H
  00167	73		 DB	 115			; 00000073H
  00168	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ; std::forward<std::allocator<wchar_t> const &>
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::forward<std::allocator<wchar_t> >
  00036	83 c4 04	 add	 esp, 4
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::move<std::allocator<wchar_t> &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::move<std::allocator<wchar_t> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find@U?$char_traits@_W@std@@@std@@YAIQB_WII0I@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__Possible_matches_end$ = -4				; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
??$_Traits_find@U?$char_traits@_W@std@@@std@@YAIQB_WII0I@Z PROC ; std::_Traits_find<std::char_traits<wchar_t> >, COMDAT

; 541  :     const size_t _Needle_size) noexcept { // search [_Haystack, _Haystack + _Hay_size) for [_Needle, _Needle +

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 542  :                                           // _Needle_size), at/after _Start_at
; 543  :     if (_Needle_size > _Hay_size
; 544  :         || _Start_at > _Hay_size - _Needle_size) { // xpos cannot exist, report failure

  00014	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0001a	77 0b		 ja	 SHORT $LN6@Traits_fin
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  0001f	2b 4d 18	 sub	 ecx, DWORD PTR __Needle_size$[ebp]
  00022	39 4d 10	 cmp	 DWORD PTR __Start_at$[ebp], ecx
  00025	76 05		 jbe	 SHORT $LN5@Traits_fin
$LN6@Traits_fin:

; 545  :                                                    // N4659 24.3.2.7.2 [string.find]/1 says:
; 546  :                                                    // 1. _Start_at <= xpos
; 547  :                                                    // 2. xpos + _Needle_size <= _Hay_size;
; 548  :                                                    // therefore:
; 549  :                                                    // 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 550  :                                                    // 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 551  :                                                    // 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to
; 552  :                                                    // other side) (also checked above)
; 553  :         return static_cast<size_t>(-1);

  00027	83 c8 ff	 or	 eax, -1
  0002a	eb 7d		 jmp	 SHORT $LN1@Traits_fin
$LN5@Traits_fin:

; 554  :     }
; 555  : 
; 556  :     if (_Needle_size == 0) { // empty string always matches if xpos is possible

  0002c	83 7d 18 00	 cmp	 DWORD PTR __Needle_size$[ebp], 0
  00030	75 05		 jne	 SHORT $LN7@Traits_fin

; 557  :         return _Start_at;

  00032	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00035	eb 72		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 558  :     }
; 559  : 
; 560  :     const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00037	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  0003a	2b 55 18	 sub	 edx, DWORD PTR __Needle_size$[ebp]
  0003d	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00040	8d 4c 50 02	 lea	 ecx, DWORD PTR [eax+edx*2+2]
  00044	89 4d fc	 mov	 DWORD PTR __Possible_matches_end$[ebp], ecx

; 561  :     for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {

  00047	8b 55 10	 mov	 edx, DWORD PTR __Start_at$[ebp]
  0004a	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  0004d	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00050	89 4d f8	 mov	 DWORD PTR __Match_try$1[ebp], ecx
  00053	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00055	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00058	83 c2 02	 add	 edx, 2
  0005b	89 55 f8	 mov	 DWORD PTR __Match_try$1[ebp], edx
$LN4@Traits_fin:

; 562  :         _Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  0005e	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00061	50		 push	 eax
  00062	8b 4d fc	 mov	 ecx, DWORD PTR __Possible_matches_end$[ebp]
  00065	2b 4d f8	 sub	 ecx, DWORD PTR __Match_try$1[ebp]
  00068	d1 f9		 sar	 ecx, 1
  0006a	51		 push	 ecx
  0006b	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::_WChar_traits<wchar_t>::find
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax

; 563  :         if (!_Match_try) { // didn't find first character; report failure

  0007a	83 7d f8 00	 cmp	 DWORD PTR __Match_try$1[ebp], 0
  0007e	75 05		 jne	 SHORT $LN8@Traits_fin

; 564  :             return static_cast<size_t>(-1);

  00080	83 c8 ff	 or	 eax, -1
  00083	eb 24		 jmp	 SHORT $LN1@Traits_fin
$LN8@Traits_fin:

; 565  :         }
; 566  : 
; 567  :         if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) { // found match

  00085	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 ?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z ; std::_WChar_traits<wchar_t>::compare
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	85 c0		 test	 eax, eax
  0009b	75 0a		 jne	 SHORT $LN9@Traits_fin

; 568  :             return static_cast<size_t>(_Match_try - _Haystack);

  0009d	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  000a0	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  000a3	d1 f8		 sar	 eax, 1
  000a5	eb 02		 jmp	 SHORT $LN1@Traits_fin
$LN9@Traits_fin:

; 569  :         }
; 570  :     }

  000a7	eb ac		 jmp	 SHORT $LN2@Traits_fin
$LN1@Traits_fin:

; 571  : }

  000a9	83 c4 08	 add	 esp, 8
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
??$_Traits_find@U?$char_traits@_W@std@@@std@@YAIQB_WII0I@Z ENDP ; std::_Traits_find<std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Match_try$1 = -8					; size = 4
__End$2 = -4						; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >, COMDAT

; 774  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 775  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 776  :     // general algorithm
; 777  :     if (_Start_at < _Hay_size) { // room for match, look for it

  00014	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00017	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  0001a	73 4f		 jae	 SHORT $LN5@Traits_fin

; 778  :         const auto _End = _Haystack + _Hay_size;

  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  00022	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00025	89 45 fc	 mov	 DWORD PTR __End$2[ebp], eax

; 779  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  00028	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  0002e	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00031	89 45 f8	 mov	 DWORD PTR __Match_try$1[ebp], eax
  00034	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00036	8b 4d f8	 mov	 ecx, DWORD PTR __Match_try$1[ebp]
  00039	83 c1 02	 add	 ecx, 2
  0003c	89 4d f8	 mov	 DWORD PTR __Match_try$1[ebp], ecx
$LN4@Traits_fin:
  0003f	8b 55 f8	 mov	 edx, DWORD PTR __Match_try$1[ebp]
  00042	3b 55 fc	 cmp	 edx, DWORD PTR __End$2[ebp]
  00045	73 24		 jae	 SHORT $LN5@Traits_fin

; 780  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00047	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::_WChar_traits<wchar_t>::find
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	85 c0		 test	 eax, eax
  0005d	75 0a		 jne	 SHORT $LN6@Traits_fin

; 781  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Match_try$1[ebp]
  00062	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00065	d1 f8		 sar	 eax, 1
  00067	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 782  :             }
; 783  :         }

  00069	eb cb		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 784  :     }
; 785  : 
; 786  :     return static_cast<size_t>(-1); // no match

  0006b	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 787  : }

  0006e	83 c4 08	 add	 esp, 8
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -289						; size = 1
__Match_try$3 = -288					; size = 4
__End$4 = -284						; size = 4
__Matches$5 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >, COMDAT

; 792  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	57		 push	 edi
  00018	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  0001e	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 793  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), at/after _Start_at
; 794  :     // special case for std::char_traits
; 795  :     if (_Start_at < _Hay_size) { // room for match, look for it

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  00041	3b 45 0c	 cmp	 eax, DWORD PTR __Hay_size$[ebp]
  00044	0f 83 c1 00 00
	00		 jae	 $LN5@Traits_fin

; 796  :         _String_bitmap<typename _Traits::char_type> _Matches;

  0004a	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00050	e8 00 00 00 00	 call	 ??0?$_String_bitmap@_W$0A@@std@@QAE@XZ

; 797  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00055	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  00058	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  0005b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0005e	50		 push	 eax
  0005f	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00062	51		 push	 ecx
  00063	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00069	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z ; std::_String_bitmap<wchar_t,0>::_Mark
  0006e	0f b6 d0	 movzx	 edx, al
  00071	85 d2		 test	 edx, edx
  00073	75 2e		 jne	 SHORT $LN6@Traits_fin

; 798  :                                                                 // fall back to the serial algorithm
; 799  :             return _Traits_find_first_not_of<_Traits>(

  00075	33 c0		 xor	 eax, eax
  00077	88 85 df fe ff
	ff		 mov	 BYTE PTR $T2[ebp], al
  0007d	0f b6 8d df fe
	ff ff		 movzx	 ecx, BYTE PTR $T2[ebp]
  00084	51		 push	 ecx
  00085	8b 55 18	 mov	 edx, DWORD PTR __Needle_size$[ebp]
  00088	52		 push	 edx
  00089	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 0c	 mov	 edx, DWORD PTR __Hay_size$[ebp]
  00094	52		 push	 edx
  00095	8b 45 08	 mov	 eax, DWORD PTR __Haystack$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
  0009e	83 c4 18	 add	 esp, 24			; 00000018H
  000a1	eb 6b		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 800  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 801  :         }
; 802  : 
; 803  :         const auto _End = _Haystack + _Hay_size;

  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  000a6	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  000a9	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  000ac	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __End$4[ebp], eax

; 804  :         for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {

  000b2	8b 4d 10	 mov	 ecx, DWORD PTR __Start_at$[ebp]
  000b5	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  000b8	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  000bb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], eax
  000c1	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000c3	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR __Match_try$3[ebp]
  000c9	83 c1 02	 add	 ecx, 2
  000cc	89 8d e0 fe ff
	ff		 mov	 DWORD PTR __Match_try$3[ebp], ecx
$LN4@Traits_fin:
  000d2	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR __Match_try$3[ebp]
  000d8	3b 95 e4 fe ff
	ff		 cmp	 edx, DWORD PTR __End$4[ebp]
  000de	73 2b		 jae	 SHORT $LN5@Traits_fin

; 805  :             if (!_Matches._Match(*_Match_try)) {

  000e0	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  000e6	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000e9	51		 push	 ecx
  000ea	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000f0	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z ; std::_String_bitmap<wchar_t,0>::_Match
  000f5	0f b6 d0	 movzx	 edx, al
  000f8	85 d2		 test	 edx, edx
  000fa	75 0d		 jne	 SHORT $LN7@Traits_fin

; 806  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000fc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$3[ebp]
  00102	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00105	d1 f8		 sar	 eax, 1
  00107	eb 05		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 807  :             }
; 808  :         }

  00109	eb b8		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 809  :     }
; 810  : 
; 811  :     return static_cast<size_t>(-1); // no match

  0010b	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 812  : }

  0010e	52		 push	 edx
  0010f	8b cd		 mov	 ecx, ebp
  00111	50		 push	 eax
  00112	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Traits_fin
  00118	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011d	58		 pop	 eax
  0011e	5a		 pop	 edx
  0011f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00122	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00129	59		 pop	 ecx
  0012a	5f		 pop	 edi
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0013b	3b ec		 cmp	 ebp, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
  00146	66 90		 npad	 2
$LN12@Traits_fin:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN11@Traits_fin
$LN11@Traits_fin:
  00150	ec fe ff ff	 DD	 -276			; fffffeecH
  00154	00 01 00 00	 DD	 256			; 00000100H
  00158	00 00 00 00	 DD	 $LN9@Traits_fin
$LN9@Traits_fin:
  0015c	5f		 DB	 95			; 0000005fH
  0015d	4d		 DB	 77			; 0000004dH
  0015e	61		 DB	 97			; 00000061H
  0015f	74		 DB	 116			; 00000074H
  00160	63		 DB	 99			; 00000063H
  00161	68		 DB	 104			; 00000068H
  00162	65		 DB	 101			; 00000065H
  00163	73		 DB	 115			; 00000073H
  00164	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
__Match_try$2 = -4					; size = 4
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >, COMDAT

; 833  :     const size_t _Needle_size, false_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 834  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 835  :     // general algorithm
; 836  :     if (_Hay_size != 0) { // worth searching, do it

  00014	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00018	74 5d		 je	 SHORT $LN5@Traits_fin

; 837  :         for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001a	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  0001d	83 e8 01	 sub	 eax, 1
  00020	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00023	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  00026	51		 push	 ecx
  00027	8d 55 10	 lea	 edx, DWORD PTR __Start_at$[ebp]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00030	83 c4 08	 add	 esp, 8
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  00038	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0003b	89 55 fc	 mov	 DWORD PTR __Match_try$2[ebp], edx
  0003e	eb 09		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  00040	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00043	83 e8 02	 sub	 eax, 2
  00046	89 45 fc	 mov	 DWORD PTR __Match_try$2[ebp], eax
$LN4@Traits_fin:

; 838  :             if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00049	8b 4d fc	 mov	 ecx, DWORD PTR __Match_try$2[ebp]
  0004c	51		 push	 ecx
  0004d	8b 55 18	 mov	 edx, DWORD PTR __Needle_size$[ebp]
  00050	52		 push	 edx
  00051	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z ; std::_WChar_traits<wchar_t>::find
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	85 c0		 test	 eax, eax
  0005f	75 0a		 jne	 SHORT $LN6@Traits_fin

; 839  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00061	8b 45 fc	 mov	 eax, DWORD PTR __Match_try$2[ebp]
  00064	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00067	d1 f8		 sar	 eax, 1
  00069	eb 0f		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 840  :             }
; 841  : 
; 842  :             if (_Match_try == _Haystack) {

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Match_try$2[ebp]
  0006e	3b 4d 08	 cmp	 ecx, DWORD PTR __Haystack$[ebp]
  00071	75 02		 jne	 SHORT $LN7@Traits_fin

; 843  :                 break; // at beginning, no more chance for match

  00073	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN7@Traits_fin:

; 844  :             }
; 845  :         }

  00075	eb c9		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 846  :     }
; 847  : 
; 848  :     return static_cast<size_t>(-1); // no match

  00077	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 849  : }

  0007a	83 c4 08	 add	 esp, 8
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T2 = -292						; size = 4
$T3 = -285						; size = 1
__Match_try$4 = -284					; size = 4
__Matches$5 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Haystack$ = 8						; size = 4
__Hay_size$ = 12					; size = 4
__Start_at$ = 16					; size = 4
__Needle$ = 20						; size = 4
__Needle_size$ = 24					; size = 4
___formal$ = 28						; size = 1
??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z PROC ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >, COMDAT

; 854  :     const size_t _Needle_size, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	57		 push	 edi
  00018	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  0001e	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 855  :     // in [_Haystack, _Haystack + _Hay_size), look for none of [_Needle, _Needle + _Needle_size), before _Start_at
; 856  :     // special case for std::char_traits
; 857  :     if (_Hay_size != 0) { // worth searching, do it

  0003e	83 7d 0c 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00042	0f 84 cf 00 00
	00		 je	 $LN5@Traits_fin

; 858  :         _String_bitmap<typename _Traits::char_type> _Matches;

  00048	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  0004e	e8 00 00 00 00	 call	 ??0?$_String_bitmap@_W$0A@@std@@QAE@XZ

; 859  :         if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) { // couldn't put one of the characters into the bitmap,

  00053	8b 45 18	 mov	 eax, DWORD PTR __Needle_size$[ebp]
  00056	8b 4d 14	 mov	 ecx, DWORD PTR __Needle$[ebp]
  00059	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0005c	52		 push	 edx
  0005d	8b 45 14	 mov	 eax, DWORD PTR __Needle$[ebp]
  00060	50		 push	 eax
  00061	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  00067	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@_W$0A@@std@@QAE_NPB_WQB_W@Z ; std::_String_bitmap<wchar_t,0>::_Mark
  0006c	0f b6 c8	 movzx	 ecx, al
  0006f	85 c9		 test	 ecx, ecx
  00071	75 2e		 jne	 SHORT $LN6@Traits_fin

; 860  :                                                                 // fall back to the serial algorithm
; 861  :             return _Traits_find_last_not_of<_Traits>(

  00073	33 d2		 xor	 edx, edx
  00075	88 95 e3 fe ff
	ff		 mov	 BYTE PTR $T3[ebp], dl
  0007b	0f b6 85 e3 fe
	ff ff		 movzx	 eax, BYTE PTR $T3[ebp]
  00082	50		 push	 eax
  00083	8b 4d 18	 mov	 ecx, DWORD PTR __Needle_size$[ebp]
  00086	51		 push	 ecx
  00087	8b 55 14	 mov	 edx, DWORD PTR __Needle$[ebp]
  0008a	52		 push	 edx
  0008b	8b 45 10	 mov	 eax, DWORD PTR __Start_at$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR __Hay_size$[ebp]
  00092	51		 push	 ecx
  00093	8b 55 08	 mov	 edx, DWORD PTR __Haystack$[ebp]
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$0A@@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
  0009c	83 c4 18	 add	 esp, 24			; 00000018H
  0009f	eb 79		 jmp	 SHORT $LN1@Traits_fin
$LN6@Traits_fin:

; 862  :                 _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
; 863  :         }
; 864  : 
; 865  :         for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {

  000a1	8b 45 0c	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  000a4	83 e8 01	 sub	 eax, 1
  000a7	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  000ad	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000b3	51		 push	 ecx
  000b4	8d 55 10	 lea	 edx, DWORD PTR __Start_at$[ebp]
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  000bd	83 c4 08	 add	 esp, 8
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR __Haystack$[ebp]
  000c5	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000c8	89 95 e4 fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], edx
  000ce	eb 0f		 jmp	 SHORT $LN4@Traits_fin
$LN2@Traits_fin:
  000d0	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  000d6	83 e8 02	 sub	 eax, 2
  000d9	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __Match_try$4[ebp], eax
$LN4@Traits_fin:

; 866  :             if (!_Matches._Match(*_Match_try)) {

  000df	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR __Match_try$4[ebp]
  000e5	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000e8	52		 push	 edx
  000e9	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$5[ebp]
  000ef	e8 00 00 00 00	 call	 ?_Match@?$_String_bitmap@_W$0A@@std@@QBE_N_W@Z ; std::_String_bitmap<wchar_t,0>::_Match
  000f4	0f b6 c0	 movzx	 eax, al
  000f7	85 c0		 test	 eax, eax
  000f9	75 0d		 jne	 SHORT $LN7@Traits_fin

; 867  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000fb	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR __Match_try$4[ebp]
  00101	2b 45 08	 sub	 eax, DWORD PTR __Haystack$[ebp]
  00104	d1 f8		 sar	 eax, 1
  00106	eb 12		 jmp	 SHORT $LN1@Traits_fin
$LN7@Traits_fin:

; 868  :             }
; 869  : 
; 870  :             if (_Match_try == _Haystack) {

  00108	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR __Match_try$4[ebp]
  0010e	3b 4d 08	 cmp	 ecx, DWORD PTR __Haystack$[ebp]
  00111	75 02		 jne	 SHORT $LN8@Traits_fin

; 871  :                 break; // at beginning, no more chance for match

  00113	eb 02		 jmp	 SHORT $LN5@Traits_fin
$LN8@Traits_fin:

; 872  :             }
; 873  :         }

  00115	eb b9		 jmp	 SHORT $LN2@Traits_fin
$LN5@Traits_fin:

; 874  :     }
; 875  : 
; 876  :     return static_cast<size_t>(-1); // no match

  00117	83 c8 ff	 or	 eax, -1
$LN1@Traits_fin:

; 877  : }

  0011a	52		 push	 edx
  0011b	8b cd		 mov	 ecx, ebp
  0011d	50		 push	 eax
  0011e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Traits_fin
  00124	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00129	58		 pop	 eax
  0012a	5a		 pop	 edx
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00135	59		 pop	 ecx
  00136	5f		 pop	 edi
  00137	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  00147	3b ec		 cmp	 ebp, esp
  00149	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
  00152	66 90		 npad	 2
$LN13@Traits_fin:
  00154	01 00 00 00	 DD	 1
  00158	00 00 00 00	 DD	 $LN12@Traits_fin
$LN12@Traits_fin:
  0015c	ec fe ff ff	 DD	 -276			; fffffeecH
  00160	00 01 00 00	 DD	 256			; 00000100H
  00164	00 00 00 00	 DD	 $LN10@Traits_fin
$LN10@Traits_fin:
  00168	5f		 DB	 95			; 0000005fH
  00169	4d		 DB	 77			; 0000004dH
  0016a	61		 DB	 97			; 00000061H
  0016b	74		 DB	 116			; 00000074H
  0016c	63		 DB	 99			; 00000063H
  0016d	68		 DB	 104			; 00000068H
  0016e	65		 DB	 101			; 00000065H
  0016f	73		 DB	 115			; 00000073H
  00170	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ENDP ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1382 :     ~_Container_proxy_ptr12() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1383 :         if (_Ptr) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 38 00	 cmp	 DWORD PTR [eax], 0
  00014	74 15		 je	 SHORT $LN1@Container_

; 1384 :             _Delete_plain_internal(_Al, _Ptr);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00028	83 c4 08	 add	 esp, 8
$LN1@Container_:

; 1385 :         }
; 1386 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1368 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1369 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0001d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1370 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00020	6a 01		 push	 1
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00025	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00030	83 c4 04	 add	 esp, 4
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	89 02		 mov	 DWORD PTR [edx], eax

; 1371 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Mycont$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00047	8d 4d f8	 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004e	8b 02		 mov	 eax, DWORD PTR [edx]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00056	83 c4 08	 add	 esp, 8

; 1372 :         _Mycont._Myproxy = _Ptr;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 1373 :     }

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 25   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 26   :     return _Right < _Left ? _Right : _Left;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0001e	73 08		 jae	 SHORT $LN3@Min_value
  00020	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv65[ebp], eax
  00026	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  0002e	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00031	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00034	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 27   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S23$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z PROC ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S23$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S23$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 46		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  00095	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00098	50		 push	 eax
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ; std::vector<char,std::allocator<char> >::_Ufill
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000a7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000ae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b2	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000ba	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c9	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cc	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	83 c4 40	 add	 esp, 64			; 00000040H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
  000fe	66 90		 npad	 2
$LN11@Construct_:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  00108	e7 ff ff ff	 DD	 -25			; ffffffe7H
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN6@Construct_
  00114	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN7@Construct_
  00120	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  0012c	5f		 DB	 95			; 0000005fH
  0012d	47		 DB	 71			; 00000047H
  0012e	75		 DB	 117			; 00000075H
  0012f	61		 DB	 97			; 00000061H
  00130	72		 DB	 114			; 00000072H
  00131	64		 DB	 100			; 00000064H
  00132	00		 DB	 0
$LN7@Construct_:
  00133	5f		 DB	 95			; 0000005fH
  00134	50		 DB	 80			; 00000050H
  00135	72		 DB	 114			; 00000072H
  00136	6f		 DB	 111			; 0000006fH
  00137	78		 DB	 120			; 00000078H
  00138	79		 DB	 121			; 00000079H
  00139	00		 DB	 0
$LN6@Construct_:
  0013a	24		 DB	 36			; 00000024H
  0013b	53		 DB	 83			; 00000053H
  0013c	32		 DB	 50			; 00000032H
  0013d	33		 DB	 51			; 00000033H
  0013e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char,std::allocator<char> > >::~_Tidy_guard<std::vector<char,std::allocator<char> > >
__ehhandler$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ENDP ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z PROC		; std::_Unfancy_maybe_null<char>, COMDAT

; 347  : _Ty* _Unfancy_maybe_null(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 348  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 349  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z ENDP		; std::_Unfancy_maybe_null<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
_TEXT	SEGMENT
__Guard$2 = -60						; size = 4
__Proxy$ = -48						; size = 8
__My_data$ = -36					; size = 4
_$S22$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>, COMDAT
; _this$ = ecx

; 397  :     void _Construct_n_copies_of_ty(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00019	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00042	50		 push	 eax
  00043	8d 4d e7	 lea	 ecx, DWORD PTR _$S22$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0004b	8d 45 e7	 lea	 eax, DWORD PTR _$S22$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 399  :         auto& _My_data  = _Mypair._Myval2;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 4d dc	 mov	 DWORD PTR __My_data$[ebp], ecx

; 400  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

  00057	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0005e	50		 push	 eax
  0005f	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 401  :         if (_Count != 0) {

  0006e	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00072	74 46		 je	 SHORT $LN2@Construct_

; 402  :             _Buy_nonzero(_Count);

  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero

; 403  :             _Tidy_guard<vector> _Guard{this};

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 55 c4	 mov	 DWORD PTR __Guard$2[ebp], edx
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 404  :             _My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 dc	 mov	 edx, DWORD PTR __My_data$[ebp]
  00095	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00098	50		 push	 eax
  00099	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
  000a1	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000a4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 405  :             _Guard._Target   = nullptr;

  000a7	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR __Guard$2[ebp], 0

; 406  :         }

  000ae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b2	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  000b5	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
$LN2@Construct_:

; 407  : 
; 408  :         _Proxy._Release();

  000ba	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 409  :     }

  000c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c9	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000cc	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000d1	52		 push	 edx
  000d2	8b cd		 mov	 ecx, ebp
  000d4	50		 push	 eax
  000d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Construct_
  000db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e0	58		 pop	 eax
  000e1	5a		 pop	 edx
  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	83 c4 40	 add	 esp, 64			; 00000040H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 08 00	 ret	 8
  000fe	66 90		 npad	 2
$LN11@Construct_:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN10@Construct_
$LN10@Construct_:
  00108	e7 ff ff ff	 DD	 -25			; ffffffe7H
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN6@Construct_
  00114	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00118	08 00 00 00	 DD	 8
  0011c	00 00 00 00	 DD	 $LN7@Construct_
  00120	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN8@Construct_
$LN8@Construct_:
  0012c	5f		 DB	 95			; 0000005fH
  0012d	47		 DB	 71			; 00000047H
  0012e	75		 DB	 117			; 00000075H
  0012f	61		 DB	 97			; 00000061H
  00130	72		 DB	 114			; 00000072H
  00131	64		 DB	 100			; 00000064H
  00132	00		 DB	 0
$LN7@Construct_:
  00133	5f		 DB	 95			; 0000005fH
  00134	50		 DB	 80			; 00000050H
  00135	72		 DB	 114			; 00000072H
  00136	6f		 DB	 111			; 0000006fH
  00137	78		 DB	 120			; 00000078H
  00138	79		 DB	 121			; 00000079H
  00139	00		 DB	 0
$LN6@Construct_:
  0013a	24		 DB	 36			; 00000024H
  0013b	53		 DB	 83			; 00000053H
  0013c	32		 DB	 50			; 00000032H
  0013d	32		 DB	 50			; 00000032H
  0013e	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z$1:
  00008	8d 4d c4	 lea	 ecx, DWORD PTR __Guard$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >::~_Tidy_guard<std::vector<wchar_t,std::allocator<wchar_t> > >
__ehhandler$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@ABV?$allocator@_W@std@@@std@@YAABV?$allocator@_W@0@ABV10@@Z ; std::forward<std::allocator<wchar_t> const &>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z PROC	; std::_Unfancy_maybe_null<wchar_t>, COMDAT

; 347  : _Ty* _Unfancy_maybe_null(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 348  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 349  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z ENDP	; std::_Unfancy_maybe_null<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z PROC ; std::move<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	8b c1		 mov	 eax, ecx
  0006d	99		 cdq
  0006e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00073	f7 f9		 idiv	 ecx
  00075	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00078	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0007b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00080	2b 08		 sub	 ecx, DWORD PTR [eax]
  00082	8b c1		 mov	 eax, ecx
  00084	99		 cdq
  00085	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0008a	f7 f9		 idiv	 ecx
  0008c	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
  00097	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0009a	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0009c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  000a1	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  000a4	83 c2 01	 add	 edx, 1
  000a7	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000aa	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Calculate_growth
  000b6	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000b9	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000c0	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocate
  000c5	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000c8	6b 55 d8 1c	 imul	 edx, DWORD PTR __Whereoff$[ebp], 28
  000cc	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000cf	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  000d3	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000d6	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000d9	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  000f4	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  000fd	83 c4 04	 add	 esp, 4
  00100	50		 push	 eax
  00101	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  0010d	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  00111	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  00114	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00117	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0011a	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0011d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0011f	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00121	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00124	50		 push	 eax
  00125	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	52		 push	 edx
  0012b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	51		 push	 ecx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  00139	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0013b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00146	8b 11		 mov	 edx, DWORD PTR [ecx]
  00148	52		 push	 edx
  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00151	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00154	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00157	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  0015b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0015e	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  00162	50		 push	 eax
  00163	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	52		 push	 edx
  00169	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove
$LN5@Emplace_re:
  00175	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  00177	8b 4d c4	 mov	 ecx, DWORD PTR __Constructed_last$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 c0	 mov	 edx, DWORD PTR __Constructed_first$[ebp]
  0017e	52		 push	 edx
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  00187	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00192	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate

; 713  :         _RERAISE;

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  001a0	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  001a5	c3		 ret	 0
$LN7@Emplace_re:
  001a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001ad	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$1
$LN10@Emplace_re:
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001b6	8b 55 cc	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c1	51		 push	 ecx
  001c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001ca	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  001ce	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 718  :     }

  001d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001db	59		 pop	 ecx
  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	83 c4 40	 add	 esp, 64			; 00000040H
  001e2	3b ec		 cmp	 ebp, esp
  001e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	8b c1		 mov	 eax, ecx
  0006d	99		 cdq
  0006e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00073	f7 f9		 idiv	 ecx
  00075	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00078	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0007b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00080	2b 08		 sub	 ecx, DWORD PTR [eax]
  00082	8b c1		 mov	 eax, ecx
  00084	99		 cdq
  00085	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0008a	f7 f9		 idiv	 ecx
  0008c	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
  00097	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0009a	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0009c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  000a1	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  000a4	83 c2 01	 add	 edx, 1
  000a7	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000aa	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Calculate_growth
  000b6	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000b9	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000c0	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocate
  000c5	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000c8	6b 55 d8 1c	 imul	 edx, DWORD PTR __Whereoff$[ebp], 28
  000cc	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000cf	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  000d3	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000d6	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000d9	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  000f4	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  000fd	83 c4 04	 add	 esp, 4
  00100	50		 push	 eax
  00101	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  0010d	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  00111	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  00114	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00117	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0011a	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0011d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0011f	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00121	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00124	50		 push	 eax
  00125	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	52		 push	 edx
  0012b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	51		 push	 ecx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  00139	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0013b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00146	8b 11		 mov	 edx, DWORD PTR [ecx]
  00148	52		 push	 edx
  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00151	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00154	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00157	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  0015b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0015e	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  00162	50		 push	 eax
  00163	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	52		 push	 edx
  00169	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove
$LN5@Emplace_re:
  00175	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  00177	8b 4d c4	 mov	 ecx, DWORD PTR __Constructed_last$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 c0	 mov	 edx, DWORD PTR __Constructed_first$[ebp]
  0017e	52		 push	 edx
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  00187	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00192	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate

; 713  :         _RERAISE;

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  001a0	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  001a5	c3		 ret	 0
$LN7@Emplace_re:
  001a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001ad	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$1
$LN10@Emplace_re:
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001b6	8b 55 cc	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c1	51		 push	 ecx
  001c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001ca	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  001ce	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 718  :     }

  001d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001db	59		 pop	 ecx
  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	83 c4 40	 add	 esp, 64			; 00000040H
  001e2	3b ec		 cmp	 ebp, esp
  001e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_back_with_unused_capacity<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Emplace_reallocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; _this$ = ecx

; 1414 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1184 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0001e	6a 01		 push	 1
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00023	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax

; 1186 :         _Construct_in_place(*_New_proxy, this);

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00047	83 c4 08	 add	 esp, 8

; 1187 :         _Myproxy            = _New_proxy;

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00050	89 08		 mov	 DWORD PTR [eax], ecx

; 1188 :         _New_proxy->_Mycont = this;

  00052	8b 55 f8	 mov	 edx, DWORD PTR __New_proxy$[ebp]
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	89 02		 mov	 DWORD PTR [edx], eax

; 1189 :     }

  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 1418 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	8b c1		 mov	 eax, ecx
  0006d	99		 cdq
  0006e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00073	f7 f9		 idiv	 ecx
  00075	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00078	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0007b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00080	2b 08		 sub	 ecx, DWORD PTR [eax]
  00082	8b c1		 mov	 eax, ecx
  00084	99		 cdq
  00085	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0008a	f7 f9		 idiv	 ecx
  0008c	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  00097	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0009a	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0009c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  000a1	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  000a4	83 c2 01	 add	 edx, 1
  000a7	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000aa	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
  000b6	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000b9	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000c0	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
  000c5	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000c8	6b 55 d8 1c	 imul	 edx, DWORD PTR __Whereoff$[ebp], 28
  000cc	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000cf	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  000d3	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000d6	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000d9	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  000f4	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000fd	83 c4 04	 add	 esp, 4
  00100	50		 push	 eax
  00101	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  0010d	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  00111	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  00114	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00117	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0011a	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0011d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0011f	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00121	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00124	50		 push	 eax
  00125	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	52		 push	 edx
  0012b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	51		 push	 ecx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  00139	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0013b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00146	8b 11		 mov	 edx, DWORD PTR [ecx]
  00148	52		 push	 edx
  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00151	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00154	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00157	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  0015b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0015e	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  00162	50		 push	 eax
  00163	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	52		 push	 edx
  00169	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
$LN5@Emplace_re:
  00175	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  00177	8b 4d c4	 mov	 ecx, DWORD PTR __Constructed_last$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 c0	 mov	 edx, DWORD PTR __Constructed_first$[ebp]
  0017e	52		 push	 edx
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  00187	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00192	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 713  :         _RERAISE;

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  001a0	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  001a5	c3		 ret	 0
$LN7@Emplace_re:
  001a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001ad	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$1
$LN10@Emplace_re:
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001b6	8b 55 cc	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c1	51		 push	 ecx
  001c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001ca	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  001ce	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 718  :     }

  001d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001db	59		 pop	 ecx
  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	83 c4 40	 add	 esp, 64			; 00000040H
  001e2	3b ec		 cmp	 ebp, esp
  001e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@ABV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 676  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 30	 sub	 esp, 48			; 00000030H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0003d	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 677  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 678  :         _Alty& _Al        = _Getal();

  00040	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00048	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 679  :         auto& _My_data    = _Mypair._Myval2;

  0004b	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR __My_data$[ebp], eax

; 680  :         pointer& _Myfirst = _My_data._Myfirst;

  00051	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00054	83 c1 04	 add	 ecx, 4
  00057	89 4d e0	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 681  :         pointer& _Mylast  = _My_data._Mylast;

  0005a	8b 55 e4	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005d	83 c2 08	 add	 edx, 8
  00060	89 55 dc	 mov	 DWORD PTR __Mylast$[ebp], edx

; 682  : 
; 683  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 684  : 
; 685  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00069	2b 08		 sub	 ecx, DWORD PTR [eax]
  0006b	8b c1		 mov	 eax, ecx
  0006d	99		 cdq
  0006e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00073	f7 f9		 idiv	 ecx
  00075	89 45 d8	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 686  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00078	8b 55 dc	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0007b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00080	2b 08		 sub	 ecx, DWORD PTR [eax]
  00082	8b c1		 mov	 eax, ecx
  00084	99		 cdq
  00085	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0008a	f7 f9		 idiv	 ecx
  0008c	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 687  : 
; 688  :         if (_Oldsize == max_size()) {

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  00097	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  0009a	75 05		 jne	 SHORT $LN2@Emplace_re

; 689  :             _Xlength();

  0009c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN2@Emplace_re:

; 690  :         }
; 691  : 
; 692  :         const size_type _Newsize     = _Oldsize + 1;

  000a1	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  000a4	83 c2 01	 add	 edx, 1
  000a7	89 55 d0	 mov	 DWORD PTR __Newsize$[ebp], edx

; 693  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000aa	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
  000b6	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 694  : 
; 695  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

  000b9	8b 4d cc	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  000bc	51		 push	 ecx
  000bd	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000c0	e8 00 00 00 00	 call	 ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
  000c5	89 45 c8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 696  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000c8	6b 55 d8 1c	 imul	 edx, DWORD PTR __Whereoff$[ebp], 28
  000cc	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000cf	8d 4c 10 1c	 lea	 ecx, DWORD PTR [eax+edx+28]
  000d3	89 4d c4	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 697  :         pointer _Constructed_first      = _Constructed_last;

  000d6	8b 55 c4	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000d9	89 55 c0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 698  : 
; 699  :         _TRY_BEGIN

  000dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 700  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000ec	83 c4 04	 add	 esp, 4
  000ef	50		 push	 eax
  000f0	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  000f4	03 4d c8	 add	 ecx, DWORD PTR __Newvec$[ebp]
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000fd	83 c4 04	 add	 esp, 4
  00100	50		 push	 eax
  00101	8b 55 e8	 mov	 edx, DWORD PTR __Al$[ebp]
  00104	52		 push	 edx
  00105	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :         _Constructed_first = _Newvec + _Whereoff;

  0010d	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  00111	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
  00114	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 702  : 
; 703  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00117	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0011a	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0011d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0011f	75 1a		 jne	 SHORT $LN4@Emplace_re

; 704  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00121	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00124	50		 push	 eax
  00125	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	52		 push	 edx
  0012b	8b 45 e0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	51		 push	 ecx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept

; 705  :         } else { // provide basic guarantee

  00139	eb 3a		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 706  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0013b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00146	8b 11		 mov	 edx, DWORD PTR [ecx]
  00148	52		 push	 edx
  00149	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove

; 707  :             _Constructed_first = _Newvec;

  00151	8b 45 c8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00154	89 45 c0	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 708  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00157	6b 4d d8 1c	 imul	 ecx, DWORD PTR __Whereoff$[ebp], 28
  0015b	8b 55 c8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0015e	8d 44 0a 1c	 lea	 eax, DWORD PTR [edx+ecx+28]
  00162	50		 push	 eax
  00163	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	52		 push	 edx
  00169	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
$LN5@Emplace_re:
  00175	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$0:

; 709  :         }
; 710  :         _CATCH_ALL
; 711  :         _Destroy(_Constructed_first, _Constructed_last);

  00177	8b 4d c4	 mov	 ecx, DWORD PTR __Constructed_last$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 c0	 mov	 edx, DWORD PTR __Constructed_first$[ebp]
  0017e	52		 push	 edx
  0017f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00182	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 712  :         _Al.deallocate(_Newvec, _Newcapacity);

  00187	8b 45 cc	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0018e	51		 push	 ecx
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  00192	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 713  :         _RERAISE;

  00197	6a 00		 push	 0
  00199	6a 00		 push	 0
  0019b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 714  :         _CATCH_END

  001a0	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  001a5	c3		 ret	 0
$LN7@Emplace_re:
  001a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001ad	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$1
$LN10@Emplace_re:
  001af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z$1:

; 715  : 
; 716  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001b6	8b 55 cc	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 d0	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d c8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001c1	51		 push	 ecx
  001c2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 717  :         return _Newvec + _Whereoff;

  001ca	6b 45 d8 1c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 28
  001ce	03 45 c8	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 718  :     }

  001d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001db	59		 pop	 ecx
  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi
  001de	5b		 pop	 ebx
  001df	83 c4 40	 add	 esp, 64			; 00000040H
  001e2	3b ec		 cmp	 ebp, esp
  001e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 757  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 758  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000e	50		 push	 eax
  0000f	6a 1c		 push	 28			; 0000001cH
  00011	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00016	83 c4 08	 add	 esp, 8
  00019	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00025	83 c4 04	 add	 esp, 4
  00028	50		 push	 eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 759  :     }

  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 293  : _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 295  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 633  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 634  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 635  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 636  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 637  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 638  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00029	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00032	83 c4 04	 add	 esp, 4
  00035	50		 push	 eax
  00036	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00041	83 c4 04	 add	 esp, 4
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 639  :         _Orphan_range(_Mylast, _Mylast);

  00056	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	50		 push	 eax
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range

; 640  :         _Ty& _Result = *_Mylast;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	89 4d f0	 mov	 DWORD PTR __Result$[ebp], ecx

; 641  :         ++_Mylast;

  00072	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00075	8b 02		 mov	 eax, DWORD PTR [edx]
  00077	83 c0 1c	 add	 eax, 28			; 0000001cH
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0007d	89 01		 mov	 DWORD PTR [ecx], eax

; 642  : #if _HAS_CXX17
; 643  :         return _Result;
; 644  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 645  :         (void) _Result;
; 646  : #endif // _HAS_CXX17
; 647  :     }

  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1420 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1421 :     return static_cast<_Ty&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1422 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 651  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 652  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 653  :         auto& _My_data   = _Mypair._Myval2;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 654  :         pointer& _Mylast = _My_data._Mylast;

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00023	83 c1 08	 add	 ecx, 8
  00026	89 4d f4	 mov	 DWORD PTR __Mylast$[ebp], ecx

; 655  :         if (_Mylast != _My_data._Myend) {

  00029	8b 55 f4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  0002c	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00034	74 17		 je	 SHORT $LN2@emplace_ba

; 656  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00036	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003f	83 c4 04	 add	 esp, 4
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0004b	eb 1e		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 657  :         }
; 658  : 
; 659  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00056	83 c4 04	 add	 esp, 4
  00059	50		 push	 eax
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00068	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 660  : #if _HAS_CXX17
; 661  :         return _Result;
; 662  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 663  :         (void) _Result;
; 664  : #endif // _HAS_CXX17
; 665  :     }

  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1109 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1110 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1111 :     using _Ty = typename _Alloc::value_type;
; 1112 :     _Ptr->~_Ty();
; 1113 :     _Deallocate_plain(_Al, _Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00010	83 c4 08	 add	 esp, 8

; 1114 : }

  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 526  : _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 527  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00010	89 4d fc	 mov	 DWORD PTR __Old_val$[ebp], ecx

; 528  :     _Val         = static_cast<_Other&&>(_New_val);

  00013	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00016	8b 45 0c	 mov	 eax, DWORD PTR __New_val$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  :     return _Old_val;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR __Old_val$[ebp]

; 530  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>, COMDAT
; _this$ = ecx

; 863  :     constexpr allocator(const allocator<_Other>&) noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YAII@Z ; std::_Get_size_of_n<8>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >, COMDAT

; 279  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     return __builtin_addressof(_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 281  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
_TEXT	SEGMENT
_int2$ = 8						; size = 4
??$rgy_reduce@H@@YAXAAU?$pair@HH@std@@@Z PROC		; rgy_reduce<int>

; 249  : static inline void rgy_reduce(std::pair<T, T>& int2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 250  :     rgy_reduce(int2.first, int2.second);

  00003	8b 45 08	 mov	 eax, DWORD PTR _int2$[ebp]
  00006	83 c0 04	 add	 eax, 4
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _int2$[ebp]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$rgy_reduce@H@@YAXAAH0@Z ; rgy_reduce<int>
  00013	83 c4 08	 add	 esp, 8

; 251  : }

  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$rgy_reduce@H@@YAXAAU?$pair@HH@std@@@Z ENDP		; rgy_reduce<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z PROC	; std::make_pair<int,int>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	e8 00 00 00 00	 call	 ??$?0HH$0A@@?$pair@HH@std@@QAE@$$QAH0@Z ; std::pair<int,int>::pair<int,int><int,int,0>
  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z ENDP	; std::make_pair<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@ABHABH@std@@YA?AU?$pair@HH@0@ABH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@ABHABH@std@@YA?AU?$pair@HH@0@ABH0@Z PROC	; std::make_pair<int const &,int const &>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ??$forward@ABH@std@@YAABHABH@Z ; std::forward<int const &>
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	e8 00 00 00 00	 call	 ??$?0HH$0A@@?$pair@HH@std@@QAE@ABH0@Z ; std::pair<int,int>::pair<int,int><int,int,0>
  00025	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$make_pair@ABHABH@std@@YA?AU?$pair@HH@0@ABH0@Z ENDP	; std::make_pair<int const &,int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z
_TEXT	SEGMENT
tv66 = -40						; size = 4
tv144 = -36						; size = 4
tv143 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z PROC ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >, COMDAT

; 4301 : _NODISCARD constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last) { // find largest element, using operator<

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00022	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00025	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00028	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00046	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 4302 :     return _STD max_element(_First, _Last, less<>());

  0004d	0f b6 45 f3	 movzx	 eax, BYTE PTR $T5[ebp]
  00051	50		 push	 eax
  00052	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00055	8b cc		 mov	 ecx, esp
  00057	89 65 ec	 mov	 DWORD PTR $T4[ebp], esp
  0005a	8d 55 18	 lea	 edx, DWORD PTR __Last$[ebp]
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  00063	89 45 e0	 mov	 DWORD PTR tv143[ebp], eax
  00066	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0006a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0006d	8b cc		 mov	 ecx, esp
  0006f	89 65 e8	 mov	 DWORD PTR $T3[ebp], esp
  00072	8d 45 0c	 lea	 eax, DWORD PTR __First$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  0007b	89 45 dc	 mov	 DWORD PTR tv144[ebp], eax
  0007e	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00082	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00085	51		 push	 ecx
  00086	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0008a	e8 00 00 00 00	 call	 ??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@U?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0U?$less@X@0@@Z ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >,std::less<void> >
  0008f	83 c4 20	 add	 esp, 32			; 00000020H
  00092	89 45 d8	 mov	 DWORD PTR tv66[ebp], eax
  00095	8b 55 e4	 mov	 edx, DWORD PTR $T2[ebp]
  00098	83 ca 01	 or	 edx, 1
  0009b	89 55 e4	 mov	 DWORD PTR $T2[ebp], edx
  0009e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a2	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  000a5	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  000aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ae	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  000b1	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  000b6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4303 : }

  000b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	83 c4 28	 add	 esp, 40			; 00000028H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$0:
  00000	8d 4d 18	 lea	 ecx, DWORD PTR __Last$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$1:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR __First$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$2:
  00010	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$3:
  00018	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z$4:
  00020	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00023	83 e0 01	 and	 eax, 1
  00026	0f 84 0c 00 00
	00		 je	 $LN8@max_elemen
  0002c	83 65 e4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
$LN8@max_elemen:
  00038	c3		 ret	 0
__ehhandler$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z:
  00039	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00040	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z
  0004f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z ENDP ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEPANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEPANXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 276  :     _NODISCARD value_type* _Unwrapped() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  :         return _Unfancy(this->_Ptr);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$_Unfancy@N@std@@YAPANPAN@Z ; std::_Unfancy<double>
  0001a	83 c4 04	 add	 esp, 4

; 278  :     }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEPANXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*, COMDAT
; _this$ = ecx

; 218  :     _NODISCARD reference operator*() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  :         return const_cast<reference>(_Mybase::operator*());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*

; 220  :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 216  :     _Vector_iterator(pointer _Parg, const _Container_base* _Pvector) : _Mybase(_Parg, _Pvector) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Pvector$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00034	51		 push	 ecx
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEXPBN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__It$ = 8						; size = 4
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEXPBN@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Seek_to, COMDAT
; _this$ = ecx

; 188  :     void _Seek_to(const value_type* _It) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 189  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Refancy@PAN$0A@@std@@YAPANPAN@Z ; std::_Refancy<double *,0>
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 190  :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEXPBN@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@1@0@Z PROC ; std::_Verify_range, COMDAT

; 176  :     friend void _Verify_range(const _Vector_const_iterator& _First, const _Vector_const_iterator& _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
$LN4@Verify_ran:

; 177  :         _STL_VERIFY(_First._Getcont() == _Last._Getcont(), "vector iterators in range are from different containers");

  00004	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00007	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  0000c	8b f0		 mov	 esi, eax
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00016	3b f0		 cmp	 esi, eax
  00018	75 02		 jne	 SHORT $LN7@Verify_ran
  0001a	eb 5c		 jmp	 SHORT $LN2@Verify_ran
$LN7@Verify_ran:
  0001c	8b f4		 mov	 esi, esp
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PBEELKIF@vector?5iterators?5in?5range?5are?5f@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00028	6a 00		 push	 0
  0002a	68 b1 00 00 00	 push	 177			; 000000b1H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00034	6a 02		 push	 2
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0003c	83 c4 18	 add	 esp, 24			; 00000018H
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	83 f8 01	 cmp	 eax, 1
  00049	75 01		 jne	 SHORT $LN19@Verify_ran
  0004b	cc		 int	 3
$LN19@Verify_ran:
  0004c	8b f4		 mov	 esi, esp
  0004e	6a 00		 push	 0
  00050	68 b1 00 00 00	 push	 177			; 000000b1H
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@KBMFDAFB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0006a	83 c4 14	 add	 esp, 20			; 00000014H
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	33 c9		 xor	 ecx, ecx
  00076	75 a4		 jne	 SHORT $LN7@Verify_ran
$LN2@Verify_ran:
  00078	33 d2		 xor	 edx, edx
  0007a	75 88		 jne	 SHORT $LN4@Verify_ran
$LN10@Verify_ran:

; 178  :         _STL_VERIFY(_First._Ptr <= _Last._Ptr, "vector iterator range transposed");

  0007c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00082	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00085	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00088	77 02		 ja	 SHORT $LN13@Verify_ran
  0008a	eb 5c		 jmp	 SHORT $LN8@Verify_ran
$LN13@Verify_ran:
  0008c	8b f4		 mov	 esi, esp
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LIAHLBAO@vector?5iterator?5range?5transpose@
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00098	6a 00		 push	 0
  0009a	68 b2 00 00 00	 push	 178			; 000000b2H
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000a4	6a 02		 push	 2
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000ac	83 c4 18	 add	 esp, 24			; 00000018H
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	83 f8 01	 cmp	 eax, 1
  000b9	75 01		 jne	 SHORT $LN20@Verify_ran
  000bb	cc		 int	 3
$LN20@Verify_ran:
  000bc	8b f4		 mov	 esi, esp
  000be	6a 00		 push	 0
  000c0	68 b2 00 00 00	 push	 178			; 000000b2H
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@ODKBEHFN@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000da	83 c4 14	 add	 esp, 20			; 00000014H
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	33 c9		 xor	 ecx, ecx
  000e6	75 a4		 jne	 SHORT $LN13@Verify_ran
$LN8@Verify_ran:
  000e8	33 d2		 xor	 edx, edx
  000ea	75 90		 jne	 SHORT $LN10@Verify_ran

; 179  :     }

  000ec	5e		 pop	 esi
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
?_Verify_range@std@@YAXABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@1@0@Z ENDP ; std::_Verify_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*, COMDAT
; _this$ = ecx

; 40   :     _NODISCARD reference operator*() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : #if _ITERATOR_DEBUG_LEVEL != 0
; 42   :         const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
  00020	89 45 f8	 mov	 DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 43   :         _STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0002a	74 02		 je	 SHORT $LN7@operator
  0002c	eb 56		 jmp	 SHORT $LN2@operator
$LN7@operator:
  0002e	8b f4		 mov	 esi, esp
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0003a	6a 00		 push	 0
  0003c	6a 2b		 push	 43			; 0000002bH
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 01		 jne	 SHORT $LN19@operator
  0005a	cc		 int	 3
$LN19@operator:
  0005b	8b f4		 mov	 esi, esp
  0005d	6a 00		 push	 0
  0005f	6a 2b		 push	 43			; 0000002bH
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00076	83 c4 14	 add	 esp, 20			; 00000014H
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	33 d2		 xor	 edx, edx
  00082	75 aa		 jne	 SHORT $LN7@operator
$LN2@operator:
  00084	33 c0		 xor	 eax, eax
  00086	75 9b		 jne	 SHORT $LN4@operator
$LN10@operator:

; 44   :         _STL_VERIFY(

  00088	8b 4d f8	 mov	 ecx, DWORD PTR __Mycont$[ebp]
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00091	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00094	77 10		 ja	 SHORT $LN13@operator
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 55 f8	 mov	 edx, DWORD PTR __Mycont$[ebp]
  0009c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0009f	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000a2	73 02		 jae	 SHORT $LN13@operator
  000a4	eb 56		 jmp	 SHORT $LN8@operator
$LN13@operator:
  000a6	8b f4		 mov	 esi, esp
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000b2	6a 00		 push	 0
  000b4	6a 2d		 push	 45			; 0000002dH
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0GH@OOPCKGB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000bb	6a 02		 push	 2
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000c3	83 c4 18	 add	 esp, 24			; 00000018H
  000c6	3b f4		 cmp	 esi, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 01		 jne	 SHORT $LN20@operator
  000d2	cc		 int	 3
$LN20@operator:
  000d3	8b f4		 mov	 esi, esp
  000d5	6a 00		 push	 0
  000d7	6a 2d		 push	 45			; 0000002dH
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_1MO@NOOOHLI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000ee	83 c4 14	 add	 esp, 20			; 00000014H
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   :             _Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast, "can't dereference out of range vector iterator");

  000f8	33 d2		 xor	 edx, edx
  000fa	75 aa		 jne	 SHORT $LN13@operator
$LN8@operator:
  000fc	33 c0		 xor	 eax, eax
  000fe	75 88		 jne	 SHORT $LN10@operator

; 46   : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 47   : 
; 48   :         return *_Ptr;

  00100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 49   :     }

  00106	5e		 pop	 esi
  00107	83 c4 08	 add	 esp, 8
  0010a	3b ec		 cmp	 ebp, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 36   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) : _Ptr(_Parg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00042	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 37   :         this->_Adopt(_Pvector);

  00045	8b 55 0c	 mov	 edx, DWORD PTR __Pvector$[ebp]
  00048	52		 push	 edx
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 38   :     }

  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ PROC ; std::vector<double,std::allocator<double> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ENDP ; std::vector<double,std::allocator<double> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ PROC	; std::vector<double,std::allocator<double> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 52		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	c1 fa 03	 sar	 edx, 3
  0008e	52		 push	 edx
  0008f	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	51		 push	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a4	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ad	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b6	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 20	 add	 esp, 32			; 00000020H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ENDP	; std::vector<double,std::allocator<double> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPANQANAAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ PROC ; std::vector<double,std::allocator<double> >::end, COMDAT
; _this$ = ecx

; 1370 :     _NODISCARD iterator end() noexcept { // return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1371 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1372 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00070	83 c9 01	 or	 ecx, 1
  00073	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1373 :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@end
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
$LN4@end:
  00018	c3		 ret	 0
__ehhandler$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ENDP ; std::vector<double,std::allocator<double> >::end
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ PROC ; std::vector<double,std::allocator<double> >::begin, COMDAT
; _this$ = ecx

; 1360 :     _NODISCARD iterator begin() noexcept { // return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1361 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1362 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00070	83 c9 01	 or	 ecx, 1
  00073	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1363 :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@begin
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
$LN4@begin:
  00018	c3		 ret	 0
__ehhandler$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ENDP ; std::vector<double,std::allocator<double> >::begin
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@NV?$allocator@N@std@@@std@@AAEAAV?$allocator@N@2@XZ ; std::vector<double,std::allocator<double> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S1$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S1$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	31		 DB	 49			; 00000031H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@N@std@@QAEXQANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@N@std@@QAEXQANI@Z PROC		; std::allocator<double>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	c1 e0 03	 shl	 eax, 3
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001e	83 c4 08	 add	 esp, 8

; 868  :     }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?deallocate@?$allocator@N@std@@QAEXQANI@Z ENDP		; std::allocator<double>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
;	COMDAT ??0<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<buf>$ = 8						; size = 4
??0<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>, COMDAT
; _this$ = ecx

; 908  :         };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _<buf>$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??0<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
;	COMDAT ??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z
_TEXT	SEGMENT
tv189 = -196						; size = 4
tv210 = -192						; size = 4
tv215 = -188						; size = 4
tv208 = -184						; size = 4
tv203 = -180						; size = 4
tv213 = -176						; size = 4
tv212 = -172						; size = 4
tv200 = -168						; size = 4
tv195 = -164						; size = 4
tv65 = -160						; size = 4
tv71 = -156						; size = 4
$T2 = -152						; size = 12
$T3 = -140						; size = 4
$T4 = -136						; size = 4
$T5 = -132						; size = 12
$T6 = -120						; size = 4
$T7 = -116						; size = 4
$T8 = -112						; size = 28
_max_write$9 = -84					; size = 8
_max_read$10 = -76					; size = 8
_ram_write_speed_list$11 = -64				; size = 16
_ram_read_speed_list$12 = -40				; size = 16
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_test_size$ = 12					; size = 4
??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z PROC ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator(), COMDAT
; _this$ = ecx

; 899  :         auto write_rw_speed = [&](const TCHAR *type, int test_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00017	57		 push	 edi
  00018	51		 push	 ecx
  00019	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  0001f	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 900  :             if (test_size) {

  00043	83 7d 0c 00	 cmp	 DWORD PTR _test_size$[ebp], 0
  00047	0f 84 ca 01 00
	00		 je	 $LN2@operator

; 901  :                 auto ram_read_speed_list = ram_speed_mt_list(test_size, RAM_SPEED_MODE_READ);

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	8b 45 0c	 mov	 eax, DWORD PTR _test_size$[ebp]
  00054	50		 push	 eax
  00055	8d 4d d8	 lea	 ecx, DWORD PTR _ram_read_speed_list$12[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z ; ram_speed_mt_list
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 902  :                 auto ram_write_speed_list = ram_speed_mt_list(test_size, RAM_SPEED_MODE_WRITE);

  00068	6a 00		 push	 0
  0006a	6a 01		 push	 1
  0006c	8b 55 0c	 mov	 edx, DWORD PTR _test_size$[ebp]
  0006f	52		 push	 edx
  00070	8d 45 c0	 lea	 eax, DWORD PTR _ram_write_speed_list$11[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?ram_speed_mt_list@@YA?AV?$vector@NV?$allocator@N@std@@@std@@HH_N@Z ; ram_speed_mt_list
  00079	83 c4 10	 add	 esp, 16			; 00000010H
  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 903  :                 double max_read  = *std::max_element(ram_read_speed_list.begin(), ram_read_speed_list.end())  * (1.0 / 1024.0);

  00080	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00083	8b cc		 mov	 ecx, esp
  00085	89 65 8c	 mov	 DWORD PTR $T7[ebp], esp
  00088	51		 push	 ecx
  00089	8d 4d d8	 lea	 ecx, DWORD PTR _ram_read_speed_list$12[ebp]
  0008c	e8 00 00 00 00	 call	 ?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::end
  00091	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  00097	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009b	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0009e	8b d4		 mov	 edx, esp
  000a0	89 65 88	 mov	 DWORD PTR $T6[ebp], esp
  000a3	52		 push	 edx
  000a4	8d 4d d8	 lea	 ecx, DWORD PTR _ram_read_speed_list$12[ebp]
  000a7	e8 00 00 00 00	 call	 ?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::begin
  000ac	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  000b2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000b6	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000bc	50		 push	 eax
  000bd	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c1	e8 00 00 00 00	 call	 ??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
  000c6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c9	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv195[ebp], eax
  000cf	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv195[ebp]
  000d5	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv200[ebp], ecx
  000db	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000df	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv200[ebp]
  000e5	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
  000ea	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000ee	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50000000000000
  000f6	f2 0f 11 45 b4	 movsd	 QWORD PTR _max_read$10[ebp], xmm0
  000fb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ff	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00105	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ

; 904  :                 double max_write = *std::max_element(ram_write_speed_list.begin(), ram_write_speed_list.end()) * (1.0 / 1024.0);

  0010a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0010d	8b d4		 mov	 edx, esp
  0010f	89 a5 78 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  00115	52		 push	 edx
  00116	8d 4d c0	 lea	 ecx, DWORD PTR _ram_write_speed_list$11[ebp]
  00119	e8 00 00 00 00	 call	 ?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::end
  0011e	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv212[ebp], eax
  00124	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00128	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0012b	8b c4		 mov	 eax, esp
  0012d	89 a5 74 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00133	50		 push	 eax
  00134	8d 4d c0	 lea	 ecx, DWORD PTR _ram_write_speed_list$11[ebp]
  00137	e8 00 00 00 00	 call	 ?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::begin
  0013c	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv213[ebp], eax
  00142	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00146	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0014c	51		 push	 ecx
  0014d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00151	e8 00 00 00 00	 call	 ??$max_element@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@0@V10@0@Z ; std::max_element<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > > >
  00156	83 c4 1c	 add	 esp, 28			; 0000001cH
  00159	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv203[ebp], eax
  0015f	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv203[ebp]
  00165	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv208[ebp], edx
  0016b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0016f	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv208[ebp]
  00175	e8 00 00 00 00	 call	 ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
  0017a	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  0017e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f50000000000000
  00186	f2 0f 11 45 ac	 movsd	 QWORD PTR _max_write$9[ebp], xmm0
  0018b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0018f	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00195	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ

; 905  :                 buf += strsprintf(_T("%s: Read:%7.2fGB/s, Write:%7.2fGB/s\n"), type, max_read, max_write);

  0019a	83 ec 08	 sub	 esp, 8
  0019d	f2 0f 10 45 ac	 movsd	 xmm0, QWORD PTR _max_write$9[ebp]
  001a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001a7	83 ec 08	 sub	 esp, 8
  001aa	f2 0f 10 45 b4	 movsd	 xmm0, QWORD PTR _max_read$10[ebp]
  001af	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001b4	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  001b7	50		 push	 eax
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PAGANAHI@?$CFs?3?5Read?3?$CF7?42fGB?1s?0?5Write?3?$CF7?42f@
  001bd	8d 4d 90	 lea	 ecx, DWORD PTR $T8[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  001c6	83 c4 1c	 add	 esp, 28			; 0000001cH
  001c9	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv215[ebp], eax
  001cf	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR tv215[ebp]
  001d5	89 95 40 ff ff
	ff		 mov	 DWORD PTR tv210[ebp], edx
  001db	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001df	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv210[ebp]
  001e5	50		 push	 eax
  001e6	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001eb	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  001f0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001f4	8d 4d 90	 lea	 ecx, DWORD PTR $T8[ebp]
  001f7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 906  :             }

  001fc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00200	8d 4d c0	 lea	 ecx, DWORD PTR _ram_write_speed_list$11[ebp]
  00203	e8 00 00 00 00	 call	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
  00208	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020f	8d 4d d8	 lea	 ecx, DWORD PTR _ram_read_speed_list$12[ebp]
  00212	e8 00 00 00 00	 call	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
$LN2@operator:

; 907  :             return test_size > 0;

  00217	83 7d 0c 00	 cmp	 DWORD PTR _test_size$[ebp], 0
  0021b	7e 0c		 jle	 SHORT $LN4@operator
  0021d	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv189[ebp], 1
  00227	eb 0a		 jmp	 SHORT $LN5@operator
$LN4@operator:
  00229	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN5@operator:
  00233	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv189[ebp]

; 908  :         };

  00239	52		 push	 edx
  0023a	8b cd		 mov	 ecx, ebp
  0023c	50		 push	 eax
  0023d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@operator
  00243	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00248	58		 pop	 eax
  00249	5a		 pop	 edx
  0024a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00254	59		 pop	 ecx
  00255	5f		 pop	 edi
  00256	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00259	33 cd		 xor	 ecx, ebp
  0025b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00260	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00266	3b ec		 cmp	 ebp, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	c2 08 00	 ret	 8
  00273	90		 npad	 1
$LN19@operator:
  00274	02 00 00 00	 DD	 2
  00278	00 00 00 00	 DD	 $LN18@operator
$LN18@operator:
  0027c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00280	10 00 00 00	 DD	 16			; 00000010H
  00284	00 00 00 00	 DD	 $LN15@operator
  00288	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0028c	10 00 00 00	 DD	 16			; 00000010H
  00290	00 00 00 00	 DD	 $LN16@operator
$LN16@operator:
  00294	72		 DB	 114			; 00000072H
  00295	61		 DB	 97			; 00000061H
  00296	6d		 DB	 109			; 0000006dH
  00297	5f		 DB	 95			; 0000005fH
  00298	77		 DB	 119			; 00000077H
  00299	72		 DB	 114			; 00000072H
  0029a	69		 DB	 105			; 00000069H
  0029b	74		 DB	 116			; 00000074H
  0029c	65		 DB	 101			; 00000065H
  0029d	5f		 DB	 95			; 0000005fH
  0029e	73		 DB	 115			; 00000073H
  0029f	70		 DB	 112			; 00000070H
  002a0	65		 DB	 101			; 00000065H
  002a1	65		 DB	 101			; 00000065H
  002a2	64		 DB	 100			; 00000064H
  002a3	5f		 DB	 95			; 0000005fH
  002a4	6c		 DB	 108			; 0000006cH
  002a5	69		 DB	 105			; 00000069H
  002a6	73		 DB	 115			; 00000073H
  002a7	74		 DB	 116			; 00000074H
  002a8	00		 DB	 0
$LN15@operator:
  002a9	72		 DB	 114			; 00000072H
  002aa	61		 DB	 97			; 00000061H
  002ab	6d		 DB	 109			; 0000006dH
  002ac	5f		 DB	 95			; 0000005fH
  002ad	72		 DB	 114			; 00000072H
  002ae	65		 DB	 101			; 00000065H
  002af	61		 DB	 97			; 00000061H
  002b0	64		 DB	 100			; 00000064H
  002b1	5f		 DB	 95			; 0000005fH
  002b2	73		 DB	 115			; 00000073H
  002b3	70		 DB	 112			; 00000070H
  002b4	65		 DB	 101			; 00000065H
  002b5	65		 DB	 101			; 00000065H
  002b6	64		 DB	 100			; 00000064H
  002b7	5f		 DB	 95			; 0000005fH
  002b8	6c		 DB	 108			; 0000006cH
  002b9	69		 DB	 105			; 00000069H
  002ba	73		 DB	 115			; 00000073H
  002bb	74		 DB	 116			; 00000074H
  002bc	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _ram_read_speed_list$12[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _ram_write_speed_list$11[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$2:
  00010	8b 4d 8c	 mov	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$3:
  00018	8b 4d 88	 mov	 ecx, DWORD PTR $T6[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$4:
  00020	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$5:
  0002b	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  00031	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$6:
  00036	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$7:
  00041	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00047	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z$8:
  0004c	8d 4d 90	 lea	 ecx, DWORD PTR $T8[ebp]
  0004f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z:
  00054	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00058	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005b	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  00061	33 c8		 xor	 ecx, eax
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z
  00077	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z ENDP ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator()
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_ret$ = -308						; size = 4
_func$ = -304						; size = 4
_hModule$ = -300					; size = 4
_osver$ = -292						; size = 284
__$ArrayPad$ = -4					; size = 4
_major$ = 8						; size = 4
_minor$ = 12						; size = 4
_build$ = 16						; size = 4
?getRealWindowsVersion@@YAHPAK00@Z PROC			; getRealWindowsVersion

; 688  : static int getRealWindowsVersion(DWORD *major, DWORD *minor, DWORD *build) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00011	b9 4d 00 00 00	 mov	 ecx, 77			; 0000004dH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 689  :     *major = 0;

  00027	8b 45 08	 mov	 eax, DWORD PTR _major$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 690  :     *minor = 0;

  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _minor$[ebp]
  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 691  :     OSVERSIONINFOEXW osver;
; 692  :     HMODULE hModule = NULL;

  00039	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _hModule$[ebp], 0

; 693  :     RtlGetVersion_FUNC func = NULL;

  00043	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _func$[ebp], 0

; 694  :     int ret = 1;

  0004d	c7 85 cc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _ret$[ebp], 1

; 695  :     if (   NULL != (hModule = LoadLibrary(_T("ntdll.dll")))
; 696  :         && NULL != (func = (RtlGetVersion_FUNC)GetProcAddress(hModule, "RtlGetVersion"))) {

  00057	8b f4		 mov	 esi, esp
  00059	68 00 00 00 00	 push	 OFFSET $SG118250
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _hModule$[ebp], eax
  00071	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _hModule$[ebp], 0
  00078	74 6b		 je	 SHORT $LN2@getRealWin
  0007a	8b f4		 mov	 esi, esp
  0007c	68 00 00 00 00	 push	 OFFSET $SG118251
  00081	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _hModule$[ebp]
  00087	52		 push	 edx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _func$[ebp], eax
  0009b	83 bd d0 fe ff
	ff 00		 cmp	 DWORD PTR _func$[ebp], 0
  000a2	74 41		 je	 SHORT $LN2@getRealWin

; 697  :         func(&osver);

  000a4	8b f4		 mov	 esi, esp
  000a6	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _osver$[ebp]
  000ac	50		 push	 eax
  000ad	ff 95 d0 fe ff
	ff		 call	 DWORD PTR _func$[ebp]
  000b3	3b f4		 cmp	 esi, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 698  :         *major = osver.dwMajorVersion;

  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _major$[ebp]
  000bd	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _osver$[ebp+4]
  000c3	89 11		 mov	 DWORD PTR [ecx], edx

; 699  :         *minor = osver.dwMinorVersion;

  000c5	8b 45 0c	 mov	 eax, DWORD PTR _minor$[ebp]
  000c8	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _osver$[ebp+8]
  000ce	89 08		 mov	 DWORD PTR [eax], ecx

; 700  :         *build = osver.dwBuildNumber;

  000d0	8b 55 10	 mov	 edx, DWORD PTR _build$[ebp]
  000d3	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _osver$[ebp+12]
  000d9	89 02		 mov	 DWORD PTR [edx], eax

; 701  :         ret = 0;

  000db	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ret$[ebp], 0
$LN2@getRealWin:

; 702  :     }
; 703  :     if (hModule) {

  000e5	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _hModule$[ebp], 0
  000ec	74 16		 je	 SHORT $LN3@getRealWin

; 704  :         FreeLibrary(hModule);

  000ee	8b f4		 mov	 esi, esp
  000f0	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _hModule$[ebp]
  000f6	51		 push	 ecx
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@getRealWin:

; 705  :     }
; 706  :     return ret;

  00104	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _ret$[ebp]

; 707  : }

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@getRealWin
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
$LN7@getRealWin:
  00138	01 00 00 00	 DD	 1
  0013c	00 00 00 00	 DD	 $LN6@getRealWin
$LN6@getRealWin:
  00140	dc fe ff ff	 DD	 -292			; fffffedcH
  00144	1c 01 00 00	 DD	 284			; 0000011cH
  00148	00 00 00 00	 DD	 $LN5@getRealWin
$LN5@getRealWin:
  0014c	6f		 DB	 111			; 0000006fH
  0014d	73		 DB	 115			; 00000073H
  0014e	76		 DB	 118			; 00000076H
  0014f	65		 DB	 101			; 00000065H
  00150	72		 DB	 114			; 00000072H
  00151	00		 DB	 0
?getRealWindowsVersion@@YAHPAK00@Z ENDP			; getRealWindowsVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\VersionHelpers.h
;	COMDAT ?IsWindows8OrGreater@@YA_NXZ
_TEXT	SEGMENT
?IsWindows8OrGreater@@YA_NXZ PROC			; IsWindows8OrGreater, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WIN8), LOBYTE(_WIN32_WINNT_WIN8), 0);

  00003	6a 00		 push	 0
  00005	6a 02		 push	 2
  00007	6a 06		 push	 6
  00009	e8 00 00 00 00	 call	 ?IsWindowsVersionOrGreater@@YA_NGGG@Z ; IsWindowsVersionOrGreater
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  : }

  00011	3b ec		 cmp	 ebp, esp
  00013	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?IsWindows8OrGreater@@YA_NXZ ENDP			; IsWindows8OrGreater
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um\VersionHelpers.h
;	COMDAT ?IsWindowsVersionOrGreater@@YA_NGGG@Z
_TEXT	SEGMENT
tv89 = -308						; size = 4
_dwlConditionMask$ = -304				; size = 8
_osvi$ = -292						; size = 284
__$ArrayPad$ = -4					; size = 4
_wMajorVersion$ = 8					; size = 2
_wMinorVersion$ = 12					; size = 2
_wServicePackMajor$ = 16				; size = 2
?IsWindowsVersionOrGreater@@YA_NGGG@Z PROC		; IsWindowsVersionOrGreater, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00012	b9 4d 00 00 00	 mov	 ecx, 77			; 0000004dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 42   :     OSVERSIONINFOEXW osvi = { sizeof(osvi), 0, 0, 0, 0, {0}, 0, 0 };

  00028	c7 85 dc fe ff
	ff 1c 01 00 00	 mov	 DWORD PTR _osvi$[ebp], 284 ; 0000011cH
  00032	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp+4], 0
  0003c	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp+8], 0
  00046	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp+12], 0
  00050	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _osvi$[ebp+16], 0
  0005a	68 00 01 00 00	 push	 256			; 00000100H
  0005f	6a 00		 push	 0
  00061	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _osvi$[ebp+20]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memset
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	33 c9		 xor	 ecx, ecx
  00072	66 89 4d f0	 mov	 WORD PTR _osvi$[ebp+276], cx
  00076	33 d2		 xor	 edx, edx
  00078	66 89 55 f2	 mov	 WORD PTR _osvi$[ebp+278], dx
  0007c	33 c0		 xor	 eax, eax
  0007e	89 45 f4	 mov	 DWORD PTR _osvi$[ebp+280], eax

; 43   :     DWORDLONG        const dwlConditionMask = VerSetConditionMask(

  00081	8b f4		 mov	 esi, esp
  00083	6a 03		 push	 3
  00085	6a 20		 push	 32			; 00000020H
  00087	8b fc		 mov	 edi, esp
  00089	6a 03		 push	 3
  0008b	6a 01		 push	 1
  0008d	8b dc		 mov	 ebx, esp
  0008f	6a 03		 push	 3
  00091	6a 02		 push	 2
  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VerSetConditionMask@16
  0009d	3b dc		 cmp	 ebx, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	52		 push	 edx
  000a5	50		 push	 eax
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VerSetConditionMask@16
  000ac	3b fc		 cmp	 edi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	52		 push	 edx
  000b4	50		 push	 eax
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VerSetConditionMask@16
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _dwlConditionMask$[ebp], eax
  000c8	89 95 d4 fe ff
	ff		 mov	 DWORD PTR _dwlConditionMask$[ebp+4], edx

; 44   :         VerSetConditionMask(
; 45   :         VerSetConditionMask(
; 46   :             0, VER_MAJORVERSION, VER_GREATER_EQUAL),
; 47   :                VER_MINORVERSION, VER_GREATER_EQUAL),
; 48   :                VER_SERVICEPACKMAJOR, VER_GREATER_EQUAL);
; 49   : 
; 50   :     osvi.dwMajorVersion = wMajorVersion;

  000ce	0f b7 4d 08	 movzx	 ecx, WORD PTR _wMajorVersion$[ebp]
  000d2	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _osvi$[ebp+4], ecx

; 51   :     osvi.dwMinorVersion = wMinorVersion;

  000d8	0f b7 55 0c	 movzx	 edx, WORD PTR _wMinorVersion$[ebp]
  000dc	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _osvi$[ebp+8], edx

; 52   :     osvi.wServicePackMajor = wServicePackMajor;

  000e2	66 8b 45 10	 mov	 ax, WORD PTR _wServicePackMajor$[ebp]
  000e6	66 89 45 f0	 mov	 WORD PTR _osvi$[ebp+276], ax

; 53   : 
; 54   :     return VerifyVersionInfoW(&osvi, VER_MAJORVERSION | VER_MINORVERSION | VER_SERVICEPACKMAJOR, dwlConditionMask) != FALSE;

  000ea	8b f4		 mov	 esi, esp
  000ec	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _dwlConditionMask$[ebp+4]
  000f2	51		 push	 ecx
  000f3	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _dwlConditionMask$[ebp]
  000f9	52		 push	 edx
  000fa	6a 23		 push	 35			; 00000023H
  000fc	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _osvi$[ebp]
  00102	50		 push	 eax
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VerifyVersionInfoW@16
  00109	3b f4		 cmp	 esi, esp
  0010b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00110	85 c0		 test	 eax, eax
  00112	74 0c		 je	 SHORT $LN3@IsWindowsV
  00114	c7 85 cc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv89[ebp], 1
  0011e	eb 0a		 jmp	 SHORT $LN4@IsWindowsV
$LN3@IsWindowsV:
  00120	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN4@IsWindowsV:
  0012a	8a 85 cc fe ff
	ff		 mov	 al, BYTE PTR tv89[ebp]

; 55   : }

  00130	52		 push	 edx
  00131	8b cd		 mov	 ecx, ebp
  00133	50		 push	 eax
  00134	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@IsWindowsV
  0013a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013f	58		 pop	 eax
  00140	5a		 pop	 edx
  00141	5f		 pop	 edi
  00142	5e		 pop	 esi
  00143	5b		 pop	 ebx
  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	33 cd		 xor	 ecx, ebp
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
  0015f	90		 npad	 1
$LN7@IsWindowsV:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN6@IsWindowsV
$LN6@IsWindowsV:
  00168	dc fe ff ff	 DD	 -292			; fffffedcH
  0016c	1c 01 00 00	 DD	 284			; 0000011cH
  00170	00 00 00 00	 DD	 $LN5@IsWindowsV
$LN5@IsWindowsV:
  00174	6f		 DB	 111			; 0000006fH
  00175	73		 DB	 115			; 00000073H
  00176	76		 DB	 118			; 00000076H
  00177	69		 DB	 105			; 00000069H
  00178	00		 DB	 0
?IsWindowsVersionOrGreater@@YA_NGGG@Z ENDP		; IsWindowsVersionOrGreater
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\algorithm
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 4454 :     const _Ty& _Left, const _Ty& _Right) _NOEXCEPT_COND(noexcept(_Left < _Right)) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$max@I@std@@YAABIABI0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 4455 :     // return larger of _Left and _Right
; 4456 :     if (_Left < _Right) {

  00023	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002d	73 73		 jae	 SHORT $LN8@max
$LN4@max:

; 4457 :         _STL_ASSERT(!(_Right < _Left), "invalid comparator");

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00035	8b 10		 mov	 edx, DWORD PTR [eax]
  00037	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00039	72 02		 jb	 SHORT $LN7@max
  0003b	eb 5c		 jmp	 SHORT $LN2@max
$LN7@max:
  0003d	8b f4		 mov	 esi, esp
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00049	6a 00		 push	 0
  0004b	68 69 11 00 00	 push	 4457			; 00001169H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEDLHHLD@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00055	6a 02		 push	 2
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	83 f8 01	 cmp	 eax, 1
  0006a	75 01		 jne	 SHORT $LN12@max
  0006c	cc		 int	 3
$LN12@max:
  0006d	8b f4		 mov	 esi, esp
  0006f	6a 00		 push	 0
  00071	68 69 11 00 00	 push	 4457			; 00001169H
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_1NE@BOCHNKFM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@ICCOKLEG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAm?$AAa?$AAx@
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	33 c9		 xor	 ecx, ecx
  00097	75 a4		 jne	 SHORT $LN7@max
$LN2@max:
  00099	33 d2		 xor	 edx, edx
  0009b	75 92		 jne	 SHORT $LN4@max

; 4458 :         return _Right;

  0009d	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  000a0	eb 03		 jmp	 SHORT $LN1@max
$LN8@max:

; 4459 :     }
; 4460 : 
; 4461 :     return _Left;

  000a2	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
$LN1@max:

; 4462 : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5e		 pop	 esi
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$max@I@std@@YAABIABI0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$max@I@std@@YAABIABI0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z
_TEXT	SEGMENT
tv154 = -72						; size = 4
tv167 = -68						; size = 4
tv159 = -64						; size = 4
tv166 = -60						; size = 4
tv165 = -56						; size = 4
tv164 = -52						; size = 4
$T2 = -48						; size = 12
$T3 = -36						; size = 12
$T4 = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z PROC ; vector_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 141  : void vector_cat(vector<T>& v1, const vector<T>& v2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  00019	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 142  :     if (v2.size()) {

  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00039	e8 00 00 00 00	 call	 ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 90 00 00
	00		 je	 $LN1@vector_cat

; 143  :         v1.insert(v1.end(), v2.begin(), v2.end());

  00046	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00049	8b c4		 mov	 eax, esp
  0004b	89 65 f0	 mov	 DWORD PTR $T6[ebp], esp
  0004e	50		 push	 eax
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00052	e8 00 00 00 00	 call	 ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
  00057	89 45 cc	 mov	 DWORD PTR tv164[ebp], eax
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00064	8b cc		 mov	 ecx, esp
  00066	89 65 ec	 mov	 DWORD PTR $T5[ebp], esp
  00069	51		 push	 ecx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  0006d	e8 00 00 00 00	 call	 ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
  00072	89 45 c8	 mov	 DWORD PTR tv165[ebp], eax
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00079	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0007c	8b f4		 mov	 esi, esp
  0007e	89 65 e8	 mov	 DWORD PTR $T4[ebp], esp
  00081	8d 55 dc	 lea	 edx, DWORD PTR $T3[ebp]
  00084	52		 push	 edx
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  00088	e8 00 00 00 00	 call	 ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
  0008d	89 45 c4	 mov	 DWORD PTR tv166[ebp], eax
  00090	8b 45 c4	 mov	 eax, DWORD PTR tv166[ebp]
  00093	89 45 c0	 mov	 DWORD PTR tv159[ebp], eax
  00096	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009a	8b 4d c0	 mov	 ecx, DWORD PTR tv159[ebp]
  0009d	51		 push	 ecx
  0009e	8b ce		 mov	 ecx, esi
  000a0	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@$$QAV01@@Z
  000a5	89 45 bc	 mov	 DWORD PTR tv167[ebp], eax
  000a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000ac	8d 55 d0	 lea	 edx, DWORD PTR $T2[ebp]
  000af	52		 push	 edx
  000b0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  000b7	e8 00 00 00 00	 call	 ??$insert@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@X@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@1@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void>
  000bc	89 45 b8	 mov	 DWORD PTR tv154[ebp], eax
  000bf	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  000c2	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
  000c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ce	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp]
  000d1	e8 00 00 00 00	 call	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN1@vector_cat:

; 144  :     }
; 145  : }

  000d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e0	59		 pop	 ecx
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	83 c4 48	 add	 esp, 72			; 00000048H
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR $T6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$2:
  00010	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z$3:
  00018	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z ENDP ; vector_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1427 :     const_pointer _Unchecked_end() const noexcept { // return pointer for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1428 :         return _Mypair._Myval2._Mylast;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1429 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1419 :     const_pointer _Unchecked_begin() const noexcept { // return pointer for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1420 :         return _Mypair._Myval2._Myfirst;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1421 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00031	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00047	83 c4 04	 add	 esp, 4
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$?0HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &,0>
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR $T2[ebp]
  0005d	83 ca 01	 or	 edx, 1
  00060	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@make_pair
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
$LN4@make_pair:
  00018	c3		 ret	 0
__ehhandler$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00031	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00047	83 c4 04	 add	 esp, 4
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$?0HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &,0>
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR $T2[ebp]
  0005d	83 ca 01	 or	 edx, 1
  00060	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@make_pair
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
$LN4@make_pair:
  00018	c3		 ret	 0
__ehhandler$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ PROC ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ENDP ; std::pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00031	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$forward@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00047	83 c4 04	 add	 esp, 4
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$?0HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &,0>
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR $T2[ebp]
  0005d	83 ca 01	 or	 edx, 1
  00060	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@make_pair
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
$LN4@make_pair:
  00018	c3		 ret	 0
__ehhandler$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\utility
;	COMDAT ??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 309  :             is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 310  :     // return pair composed from arguments
; 311  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 312  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00031	8b 45 10	 mov	 eax, DWORD PTR __Val2$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  0003a	83 c4 04	 add	 esp, 4
  0003d	50		 push	 eax
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR __Val1$[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>
  00047	83 c4 04	 add	 esp, 4
  0004a	50		 push	 eax
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$?0HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > ><int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	8b 55 f0	 mov	 edx, DWORD PTR $T2[ebp]
  0005d	83 ca 01	 or	 edx, 1
  00060	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@make_pair
  0000c	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
$LN4@make_pair:
  00018	c3		 ret	 0
__ehhandler$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv75 = -60						; size = 4
tv78 = -56						; size = 4
tv79 = -52						; size = 4
$T2 = -45						; size = 1
$T3 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
?PathRootExists@@YA_NPB_W@Z PROC			; PathRootExists

; 436  : static bool PathRootExists(const WCHAR *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRootExists@@YA_NPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 437  :     if (path == nullptr)

  00039	83 7d 08 00	 cmp	 DWORD PTR _path$[ebp], 0
  0003d	75 04		 jne	 SHORT $LN2@PathRootEx

; 438  :         return false;

  0003f	32 c0		 xor	 al, al
  00041	eb 64		 jmp	 SHORT $LN1@PathRootEx
$LN2@PathRootEx:

; 439  :     return PathIsDirectoryW(PathGetRoot(path).c_str()) != 0;

  00043	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00046	50		 push	 eax
  00047	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; PathGetRoot
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 cc	 mov	 DWORD PTR tv79[ebp], eax
  00056	8b 55 cc	 mov	 edx, DWORD PTR tv79[ebp]
  00059	89 55 c8	 mov	 DWORD PTR tv78[ebp], edx
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	8b 4d c8	 mov	 ecx, DWORD PTR tv78[ebp]
  00066	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0006b	8b f4		 mov	 esi, esp
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryW@4
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	85 c0		 test	 eax, eax
  0007d	74 09		 je	 SHORT $LN4@PathRootEx
  0007f	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  00086	eb 07		 jmp	 SHORT $LN5@PathRootEx
$LN4@PathRootEx:
  00088	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN5@PathRootEx:
  0008f	8a 45 c4	 mov	 al, BYTE PTR tv75[ebp]
  00092	88 45 d3	 mov	 BYTE PTR $T2[ebp], al
  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0009f	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a4	8a 45 d3	 mov	 al, BYTE PTR $T2[ebp]
$LN1@PathRootEx:

; 440  : }

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	83 c4 3c	 add	 esp, 60			; 0000003cH
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRootExists@@YA_NPB_W@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?PathRootExists@@YA_NPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRootExists@@YA_NPB_W@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRootExists@@YA_NPB_W@Z ENDP			; PathRootExists
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv75 = -60						; size = 4
tv78 = -56						; size = 4
tv79 = -52						; size = 4
$T2 = -45						; size = 1
$T3 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
?PathRootExists@@YA_NPBD@Z PROC				; PathRootExists

; 431  : static bool PathRootExists(const char *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRootExists@@YA_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 432  :     if (path == nullptr)

  00039	83 7d 08 00	 cmp	 DWORD PTR _path$[ebp], 0
  0003d	75 04		 jne	 SHORT $LN2@PathRootEx

; 433  :         return false;

  0003f	32 c0		 xor	 al, al
  00041	eb 64		 jmp	 SHORT $LN1@PathRootEx
$LN2@PathRootEx:

; 434  :     return PathIsDirectoryA(PathGetRoot(path).c_str()) != 0;

  00043	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00046	50		 push	 eax
  00047	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; PathGetRoot
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 cc	 mov	 DWORD PTR tv79[ebp], eax
  00056	8b 55 cc	 mov	 edx, DWORD PTR tv79[ebp]
  00059	89 55 c8	 mov	 DWORD PTR tv78[ebp], edx
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	8b 4d c8	 mov	 ecx, DWORD PTR tv78[ebp]
  00066	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0006b	8b f4		 mov	 esi, esp
  0006d	50		 push	 eax
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	85 c0		 test	 eax, eax
  0007d	74 09		 je	 SHORT $LN4@PathRootEx
  0007f	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  00086	eb 07		 jmp	 SHORT $LN5@PathRootEx
$LN4@PathRootEx:
  00088	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN5@PathRootEx:
  0008f	8a 45 c4	 mov	 al, BYTE PTR tv75[ebp]
  00092	88 45 d3	 mov	 BYTE PTR $T2[ebp], al
  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0009f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a4	8a 45 d3	 mov	 al, BYTE PTR $T2[ebp]
$LN1@PathRootEx:

; 435  : }

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	83 c4 3c	 add	 esp, 60			; 0000003cH
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRootExists@@YA_NPBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?PathRootExists@@YA_NPBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRootExists@@YA_NPBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRootExists@@YA_NPBD@Z ENDP				; PathRootExists
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 4
$T3 = -80						; size = 2
$T4 = -77						; size = 1
_buffer$ = -72						; size = 16
_fullpath$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z PROC ; PathGetRoot

; 422  : std::wstring PathGetRoot(const WCHAR *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  00019	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 423  :     auto fullpath = GetFullPath(path);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  00043	50		 push	 eax
  00044	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; GetFullPath
  0004d	83 c4 08	 add	 esp, 8
  00050	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 424  :     std::vector<WCHAR> buffer(fullpath.length() + 1, 0);

  00057	33 d2		 xor	 edx, edx
  00059	66 89 55 b0	 mov	 WORD PTR $T3[ebp], dx
  0005d	8d 4d b3	 lea	 ecx, DWORD PTR $T4[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00065	50		 push	 eax
  00066	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00069	50		 push	 eax
  0006a	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  0006d	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  00072	83 c0 01	 add	 eax, 1
  00075	50		 push	 eax
  00076	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00079	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 425  :     memcpy(buffer.data(), fullpath.c_str(), fullpath.length() * sizeof(fullpath[0]));

  00082	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00085	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  0008a	d1 e0		 shl	 eax, 1
  0008c	50		 push	 eax
  0008d	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00090	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  00095	50		 push	 eax
  00096	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00099	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 _memcpy
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 426  :     PathStripToRootW(buffer.data());

  000a7	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000aa	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000af	8b f4		 mov	 esi, esp
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathStripToRootW@4
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 427  :     return buffer.data();

  000bf	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000c2	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000c7	50		 push	 eax
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000cb	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000d0	8b 4d ac	 mov	 ecx, DWORD PTR $T2[ebp]
  000d3	83 c9 01	 or	 ecx, 1
  000d6	89 4d ac	 mov	 DWORD PTR $T2[ebp], ecx
  000d9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000dd	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000e0	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  000e5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e9	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  000ec	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000f1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 428  : }

  000f4	52		 push	 edx
  000f5	8b cd		 mov	 ecx, ebp
  000f7	50		 push	 eax
  000f8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@PathGetRoo
  000fe	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00103	58		 pop	 eax
  00104	5a		 pop	 edx
  00105	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00108	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010f	59		 pop	 ecx
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	83 c4 54	 add	 esp, 84			; 00000054H
  0011f	3b ec		 cmp	 ebp, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
  0012a	66 90		 npad	 2
$LN11@PathGetRoo:
  0012c	02 00 00 00	 DD	 2
  00130	00 00 00 00	 DD	 $LN10@PathGetRoo
$LN10@PathGetRoo:
  00134	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00138	1c 00 00 00	 DD	 28			; 0000001cH
  0013c	00 00 00 00	 DD	 $LN7@PathGetRoo
  00140	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00144	10 00 00 00	 DD	 16			; 00000010H
  00148	00 00 00 00	 DD	 $LN8@PathGetRoo
$LN8@PathGetRoo:
  0014c	62		 DB	 98			; 00000062H
  0014d	75		 DB	 117			; 00000075H
  0014e	66		 DB	 102			; 00000066H
  0014f	66		 DB	 102			; 00000066H
  00150	65		 DB	 101			; 00000065H
  00151	72		 DB	 114			; 00000072H
  00152	00		 DB	 0
$LN7@PathGetRoo:
  00153	66		 DB	 102			; 00000066H
  00154	75		 DB	 117			; 00000075H
  00155	6c		 DB	 108			; 0000006cH
  00156	6c		 DB	 108			; 0000006cH
  00157	70		 DB	 112			; 00000070H
  00158	61		 DB	 97			; 00000061H
  00159	74		 DB	 116			; 00000074H
  0015a	68		 DB	 104			; 00000068H
  0015b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$2:
  00010	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN6@PathGetRoo
  0001c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN6@PathGetRoo:
  00028	c3		 ret	 0
__ehhandler$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathGetRoot@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ENDP ; PathGetRoot
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 4
$T3 = -78						; size = 1
$T4 = -77						; size = 1
_buffer$ = -72						; size = 16
_fullpath$ = -48					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; PathGetRoot

; 415  : std::string PathGetRoot(const char *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  00019	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 416  :     auto fullpath = GetFullPath(path);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  00043	50		 push	 eax
  00044	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetFullPath
  0004d	83 c4 08	 add	 esp, 8
  00050	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 417  :     std::vector<char> buffer(fullpath.length() + 1, 0);

  00057	c6 45 b2 00	 mov	 BYTE PTR $T3[ebp], 0
  0005b	8d 4d b3	 lea	 ecx, DWORD PTR $T4[ebp]
  0005e	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00063	50		 push	 eax
  00064	8d 55 b2	 lea	 edx, DWORD PTR $T3[ebp]
  00067	52		 push	 edx
  00068	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  0006b	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00070	83 c0 01	 add	 eax, 1
  00073	50		 push	 eax
  00074	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00077	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  0007c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 418  :     memcpy(buffer.data(), fullpath.c_str(), fullpath.length() * sizeof(fullpath[0]));

  00080	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00083	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00088	50		 push	 eax
  00089	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  0008c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00091	50		 push	 eax
  00092	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00095	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memcpy
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 419  :     PathStripToRootA(buffer.data());

  000a3	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a6	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000ab	8b f4		 mov	 esi, esp
  000ad	50		 push	 eax
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathStripToRootA@4
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 420  :     return buffer.data();

  000bb	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000be	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000c3	50		 push	 eax
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cc	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  000cf	83 c8 01	 or	 eax, 1
  000d2	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax
  000d5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d9	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000dc	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  000e1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e5	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  000e8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ed	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 421  : }

  000f0	52		 push	 edx
  000f1	8b cd		 mov	 ecx, ebp
  000f3	50		 push	 eax
  000f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@PathGetRoo
  000fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ff	58		 pop	 eax
  00100	5a		 pop	 edx
  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00111	33 cd		 xor	 ecx, ebp
  00113	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00118	83 c4 54	 add	 esp, 84			; 00000054H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
  00126	66 90		 npad	 2
$LN11@PathGetRoo:
  00128	02 00 00 00	 DD	 2
  0012c	00 00 00 00	 DD	 $LN10@PathGetRoo
$LN10@PathGetRoo:
  00130	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00134	1c 00 00 00	 DD	 28			; 0000001cH
  00138	00 00 00 00	 DD	 $LN7@PathGetRoo
  0013c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00140	10 00 00 00	 DD	 16			; 00000010H
  00144	00 00 00 00	 DD	 $LN8@PathGetRoo
$LN8@PathGetRoo:
  00148	62		 DB	 98			; 00000062H
  00149	75		 DB	 117			; 00000075H
  0014a	66		 DB	 102			; 00000066H
  0014b	66		 DB	 102			; 00000066H
  0014c	65		 DB	 101			; 00000065H
  0014d	72		 DB	 114			; 00000072H
  0014e	00		 DB	 0
$LN7@PathGetRoo:
  0014f	66		 DB	 102			; 00000066H
  00150	75		 DB	 117			; 00000075H
  00151	6c		 DB	 108			; 0000006cH
  00152	6c		 DB	 108			; 0000006cH
  00153	70		 DB	 112			; 00000070H
  00154	61		 DB	 97			; 00000061H
  00155	74		 DB	 116			; 00000074H
  00156	68		 DB	 104			; 00000068H
  00157	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _fullpath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00008	8d 4d b8	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$2:
  00010	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN6@PathGetRoo
  0001c	83 65 ac fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@PathGetRoo:
  00028	c3		 ret	 0
__ehhandler$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathGetRoot@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; PathGetRoot
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents, COMDAT
; _this$ = ecx

; 324  :     void _Take_contents(_Vector_val& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  :         this->_Swap_proxy_and_iterators(_Right);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 326  :         _Myfirst = _Right._Myfirst;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 327  :         _Mylast  = _Right._Mylast;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 328  :         _Myend   = _Right._Myend;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00038	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 329  : 
; 330  :         _Right._Myfirst = pointer();

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00041	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 331  :         _Right._Mylast  = pointer();

  00048	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0004b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 332  :         _Right._Myend   = pointer();

  00052	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00055	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 333  :     }

  0005c	83 c4 04	 add	 esp, 4
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Offset$ = 12						; size = 4
?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iterator_offset, COMDAT
; _this$ = ecx

; 1700 :     iterator _Make_iterator_offset(const size_type _Offset) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1701 :         // return the iterator begin() + _Offset without a debugging check
; 1702 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1703 :         return iterator(_My_data._Myfirst + _Offset, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	6b 55 0c 1c	 imul	 edx, DWORD PTR __Offset$[ebp], 28
  0005b	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  0005e	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00061	52		 push	 edx
  00062	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00065	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  0006a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00071	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00074	83 c9 01	 or	 ecx, 1
  00077	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  0007a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1704 :     }

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 18	 add	 esp, 24			; 00000018H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@Make_itera
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN4@Make_itera:
  00018	c3		 ret	 0
__ehhandler$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Make_iterator_offset@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Make_iterator_offset
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__Pnextptr$2 = -36					; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1668 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1669 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 :         _Lockit _Lock(_LOCK_DEBUG);

  00040	8b f4		 mov	 esi, esp
  00042	6a 03		 push	 3
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1671 : 
; 1672 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	83 c1 04	 add	 ecx, 4
  00063	89 4d e0	 mov	 DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1673 :         while (*_Pnext) {

  00066	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  00069	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0006c	74 42		 je	 SHORT $LN3@Orphan_ran

; 1674 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

  0006e	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00076	89 55 dc	 mov	 DWORD PTR __Pnextptr$2[ebp], edx

; 1675 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

  00079	8b 45 dc	 mov	 eax, DWORD PTR __Pnextptr$2[ebp]
  0007c	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  0007f	72 08		 jb	 SHORT $LN6@Orphan_ran
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	3b 4d dc	 cmp	 ecx, DWORD PTR __Pnextptr$2[ebp]
  00087	73 0d		 jae	 SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1676 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00089	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	83 c0 04	 add	 eax, 4
  00091	89 45 e0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1677 :             } else { // orphan the iterator

  00094	eb 18		 jmp	 SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1678 :                 (*_Pnext)->_Myproxy = nullptr;

  00096	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1679 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

  000a1	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	89 02		 mov	 DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1680 :             }
; 1681 :         }

  000ae	eb b6		 jmp	 SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1682 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1683 :         (void) _First;
; 1684 :         (void) _Last;
; 1685 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1686 :     }

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b f4		 mov	 esi, esp
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	52		 push	 edx
  000ca	8b cd		 mov	 ecx, ebp
  000cc	50		 push	 eax
  000cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Orphan_ran
  000d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d8	58		 pop	 eax
  000d9	5a		 pop	 edx
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5e		 pop	 esi
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
  000f6	66 90		 npad	 2
$LN12@Orphan_ran:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN11@Orphan_ran
$LN11@Orphan_ran:
  00100	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00104	04 00 00 00	 DD	 4
  00108	00 00 00 00	 DD	 $LN9@Orphan_ran
$LN9@Orphan_ran:
  0010c	5f		 DB	 95			; 0000005fH
  0010d	4c		 DB	 76			; 0000004cH
  0010e	6f		 DB	 111			; 0000006fH
  0010f	63		 DB	 99			; 00000063H
  00110	6b		 DB	 107			; 0000006bH
  00111	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 57		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	2b 01		 sub	 eax, DWORD PTR [ecx]
  0008b	99		 cdq
  0008c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00091	f7 f9		 idiv	 ecx
  00093	50		 push	 eax
  00094	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	50		 push	 eax
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ac	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1655 :             _Mylast  = pointer();

  000b2	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000b5	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1656 :             _Myend   = pointer();

  000bb	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000be	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 20	 add	 esp, 32			; 00000020H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1623 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1624 :         // orphan all iterators, discard old array, acquire new array
; 1625 :         auto& _My_data    = _Mypair._Myval2;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1626 :         pointer& _Myfirst = _My_data._Myfirst;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1627 :         pointer& _Mylast  = _My_data._Mylast;

  0002c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0002f	83 c2 08	 add	 edx, 8
  00032	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1628 :         pointer& _Myend   = _My_data._Myend;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1629 : 
; 1630 :         _My_data._Orphan_all();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1631 : 
; 1632 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00049	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004c	74 3c		 je	 SHORT $LN2@Change_arr

; 1633 :             _Destroy(_Myfirst, _Mylast);

  0004e	8b 55 f0	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy

; 1634 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006c	99		 cdq
  0006d	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00072	f7 f9		 idiv	 ecx
  00074	50		 push	 eax
  00075	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00083	8b c8		 mov	 ecx, eax
  00085	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
$LN2@Change_arr:

; 1635 :         }
; 1636 : 
; 1637 :         _Myfirst = _Newvec;

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00090	89 11		 mov	 DWORD PTR [ecx], edx

; 1638 :         _Mylast  = _Newvec + _Newsize;

  00092	6b 45 0c 1c	 imul	 eax, DWORD PTR __Newsize$[ebp], 28
  00096	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00099	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0009c	89 01		 mov	 DWORD PTR [ecx], eax

; 1639 :         _Myend   = _Newvec + _Newcapacity;

  0009e	6b 55 10 1c	 imul	 edx, DWORD PTR __Newcapacity$[ebp], 28
  000a2	03 55 08	 add	 edx, DWORD PTR __Newvec$[ebp]
  000a5	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a8	89 10		 mov	 DWORD PTR [eax], edx

; 1640 :     }

  000aa	83 c4 14	 add	 esp, 20			; 00000014H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1571 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1572 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1573 :         const size_type _Oldcapacity = capacity();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
  00026	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1574 : 
; 1575 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  0003b	76 05		 jbe	 SHORT $LN2@Calculate_

; 1576 :             return _Newsize; // geometric growth would overflow

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00040	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1577 :         }
; 1578 : 
; 1579 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00042	8b 55 f8	 mov	 edx, DWORD PTR __Oldcapacity$[ebp]
  00045	d1 ea		 shr	 edx, 1
  00047	03 55 f8	 add	 edx, DWORD PTR __Oldcapacity$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR __Geometric$[ebp], edx

; 1580 : 
; 1581 :         if (_Geometric < _Newsize) {

  0004d	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00050	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00053	73 05		 jae	 SHORT $LN3@Calculate_

; 1582 :             return _Newsize; // geometric growth would be insufficient

  00055	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1583 :         }
; 1584 : 
; 1585 :         return _Geometric; // geometric growth is sufficient

  0005a	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1586 :     }

  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1561 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1562 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1563 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00024	52		 push	 edx
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1

; 1564 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1565 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1551 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 :         // move [_First, _Last) to raw _Dest, using allocator
; 1553 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove, COMDAT
; _this$ = ecx

; 1547 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1548 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1549 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 1446 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1447 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1448 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	99		 cdq
  0002a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0002f	f7 f9		 idiv	 ecx

; 1449 :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1436 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1438 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	99		 cdq
  0002a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0002f	f7 f9		 idiv	 ecx

; 1439 :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 1375 :     _NODISCARD const_iterator end() const noexcept { // return iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1376 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1377 :         return const_iterator(_My_data._Mylast, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00070	83 c9 01	 or	 ecx, 1
  00073	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1378 :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@end
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
  00018	c3		 ret	 0
__ehhandler$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end, COMDAT
; _this$ = ecx

; 1370 :     _NODISCARD iterator end() noexcept { // return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1371 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1372 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00070	83 c9 01	 or	 ecx, 1
  00073	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1373 :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@end
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN4@end:
  00018	c3		 ret	 0
__ehhandler$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::end
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
$T2 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin, COMDAT
; _this$ = ecx

; 1365 :     _NODISCARD const_iterator begin() const noexcept { // return iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 1366 :         auto& _My_data = _Mypair._Myval2;

  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1367 :         return const_iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0004a	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YAPBV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > const >
  00053	83 c4 04	 add	 esp, 4
  00056	50		 push	 eax
  00057	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005d	50		 push	 eax
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00070	83 c9 01	 or	 ecx, 1
  00073	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1368 :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@begin
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAE@XZ
$LN4@begin:
  00018	c3		 ret	 0
__ehhandler$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::begin
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 671  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  :         emplace_back(_STD move(_Val));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 673  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 667  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 668  :         emplace_back(_Val);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??$emplace_back@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>

; 669  :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S2$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S2$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S2$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	32		 DB	 50			; 00000032H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 531  :     vector(vector&& _Right) noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 532  :         : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) { // construct by moving _Right

  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 533  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0005d	50		 push	 eax
  0005e	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00061	e8 00 00 00 00	 call	 ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 534  :         _Move_construct(_Right, true_type{});

  0006f	33 c9		 xor	 ecx, ecx
  00071	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  00074	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct

; 535  :     }

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct, COMDAT
; _this$ = ecx

; 505  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 506  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Take_contents

; 507  :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?_Move_construct@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 385  :     vector() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :         : _Mypair(_Zero_then_variadic_args_t()) { // construct empty vector

  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>

; 387  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Getal
  0004b	50		 push	 eax
  0004c	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??$?0V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00054	50		 push	 eax
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 388  :     }

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BM@@std@@YAII@Z ; std::_Get_size_of_n<28>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	6b 45 0c 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001c	83 c4 08	 add	 esp, 8

; 868  :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Take_contents, COMDAT
; _this$ = ecx

; 324  :     void _Take_contents(_Vector_val& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 325  :         this->_Swap_proxy_and_iterators(_Right);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 326  :         _Myfirst = _Right._Myfirst;

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00020	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00023	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 327  :         _Mylast  = _Right._Mylast;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 328  :         _Myend   = _Right._Myend;

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00038	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 329  : 
; 330  :         _Right._Myfirst = pointer();

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00041	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 331  :         _Right._Mylast  = pointer();

  00048	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0004b	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 332  :         _Right._Myend   = pointer();

  00052	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00055	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 333  :     }

  0005c	83 c4 04	 add	 esp, 4
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
_TEXT	SEGMENT
__Pnextptr$2 = -36					; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1668 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00020	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00023	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00026	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00029	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1669 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1670 :         _Lockit _Lock(_LOCK_DEBUG);

  00040	8b f4		 mov	 esi, esp
  00042	6a 03		 push	 3
  00044	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1671 : 
; 1672 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00060	83 c1 04	 add	 ecx, 4
  00063	89 4d e0	 mov	 DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1673 :         while (*_Pnext) {

  00066	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  00069	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0006c	74 42		 je	 SHORT $LN3@Orphan_ran

; 1674 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

  0006e	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00076	89 55 dc	 mov	 DWORD PTR __Pnextptr$2[ebp], edx

; 1675 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

  00079	8b 45 dc	 mov	 eax, DWORD PTR __Pnextptr$2[ebp]
  0007c	3b 45 08	 cmp	 eax, DWORD PTR __First$[ebp]
  0007f	72 08		 jb	 SHORT $LN6@Orphan_ran
  00081	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00084	3b 4d dc	 cmp	 ecx, DWORD PTR __Pnextptr$2[ebp]
  00087	73 0d		 jae	 SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1676 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00089	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	83 c0 04	 add	 eax, 4
  00091	89 45 e0	 mov	 DWORD PTR __Pnext$[ebp], eax

; 1677 :             } else { // orphan the iterator

  00094	eb 18		 jmp	 SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1678 :                 (*_Pnext)->_Myproxy = nullptr;

  00096	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1679 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

  000a1	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$[ebp]
  000a9	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ac	89 02		 mov	 DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1680 :             }
; 1681 :         }

  000ae	eb b6		 jmp	 SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1682 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1683 :         (void) _First;
; 1684 :         (void) _Last;
; 1685 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1686 :     }

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b f4		 mov	 esi, esp
  000b9	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	52		 push	 edx
  000ca	8b cd		 mov	 ecx, ebp
  000cc	50		 push	 eax
  000cd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Orphan_ran
  000d3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d8	58		 pop	 eax
  000d9	5a		 pop	 edx
  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5e		 pop	 esi
  000e6	83 c4 24	 add	 esp, 36			; 00000024H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
  000f6	66 90		 npad	 2
$LN12@Orphan_ran:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN11@Orphan_ran
$LN11@Orphan_ran:
  00100	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00104	04 00 00 00	 DD	 4
  00108	00 00 00 00	 DD	 $LN9@Orphan_ran
$LN9@Orphan_ran:
  0010c	5f		 DB	 95			; 0000005fH
  0010d	4c		 DB	 76			; 0000004cH
  0010e	6f		 DB	 111			; 0000006fH
  0010f	63		 DB	 99			; 00000063H
  00110	6b		 DB	 107			; 0000006bH
  00111	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 57		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 00		 mov	 eax, DWORD PTR [eax]
  00089	2b 01		 sub	 eax, DWORD PTR [ecx]
  0008b	99		 cdq
  0008c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00091	f7 f9		 idiv	 ecx
  00093	50		 push	 eax
  00094	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	50		 push	 eax
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000ac	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1655 :             _Mylast  = pointer();

  000b2	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  000b5	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1656 :             _Myend   = pointer();

  000bb	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  000be	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	83 c4 20	 add	 esp, 32			; 00000020H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1623 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1624 :         // orphan all iterators, discard old array, acquire new array
; 1625 :         auto& _My_data    = _Mypair._Myval2;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1626 :         pointer& _Myfirst = _My_data._Myfirst;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00026	83 c1 04	 add	 ecx, 4
  00029	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1627 :         pointer& _Mylast  = _My_data._Mylast;

  0002c	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0002f	83 c2 08	 add	 edx, 8
  00032	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1628 :         pointer& _Myend   = _My_data._Myend;

  00035	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1629 : 
; 1630 :         _My_data._Orphan_all();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1631 : 
; 1632 :         if (_Myfirst) { // destroy and deallocate old array

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00049	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0004c	74 3c		 je	 SHORT $LN2@Change_arr

; 1633 :             _Destroy(_Myfirst, _Mylast);

  0004e	8b 55 f0	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	52		 push	 edx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy

; 1634 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006c	99		 cdq
  0006d	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00072	f7 f9		 idiv	 ecx
  00074	50		 push	 eax
  00075	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00083	8b c8		 mov	 ecx, eax
  00085	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate
$LN2@Change_arr:

; 1635 :         }
; 1636 : 
; 1637 :         _Myfirst = _Newvec;

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00090	89 11		 mov	 DWORD PTR [ecx], edx

; 1638 :         _Mylast  = _Newvec + _Newsize;

  00092	6b 45 0c 1c	 imul	 eax, DWORD PTR __Newsize$[ebp], 28
  00096	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  00099	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0009c	89 01		 mov	 DWORD PTR [ecx], eax

; 1639 :         _Myend   = _Newvec + _Newcapacity;

  0009e	6b 55 10 1c	 imul	 edx, DWORD PTR __Newcapacity$[ebp], 28
  000a2	03 55 08	 add	 edx, DWORD PTR __Newvec$[ebp]
  000a5	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a8	89 10		 mov	 DWORD PTR [eax], edx

; 1640 :     }

  000aa	83 c4 14	 add	 esp, 20			; 00000014H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@II@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1571 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1572 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1573 :         const size_type _Oldcapacity = capacity();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::capacity
  00026	89 45 f8	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1574 : 
; 1575 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	39 45 f8	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  0003b	76 05		 jbe	 SHORT $LN2@Calculate_

; 1576 :             return _Newsize; // geometric growth would overflow

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00040	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1577 :         }
; 1578 : 
; 1579 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00042	8b 55 f8	 mov	 edx, DWORD PTR __Oldcapacity$[ebp]
  00045	d1 ea		 shr	 edx, 1
  00047	03 55 f8	 add	 edx, DWORD PTR __Oldcapacity$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR __Geometric$[ebp], edx

; 1580 : 
; 1581 :         if (_Geometric < _Newsize) {

  0004d	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00050	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00053	73 05		 jae	 SHORT $LN3@Calculate_

; 1582 :             return _Newsize; // geometric growth would be insufficient

  00055	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00058	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1583 :         }
; 1584 : 
; 1585 :         return _Geometric; // geometric growth is sufficient

  0005a	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1586 :     }

  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1561 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1562 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1563 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00017	33 c0		 xor	 eax, eax
  00019	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0001c	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00020	51		 push	 ecx
  00021	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00024	52		 push	 edx
  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002c	51		 push	 ecx
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept1

; 1564 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1565 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1551 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1552 :         // move [_First, _Last) to raw _Dest, using allocator
; 1553 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1554 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove, COMDAT
; _this$ = ecx

; 1547 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1548 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1549 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PAV32@00@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::capacity, COMDAT
; _this$ = ecx

; 1446 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1447 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1448 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	99		 cdq
  0002a	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0002f	f7 f9		 idiv	 ecx

; 1449 :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABEABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back, COMDAT
; _this$ = ecx

; 671  :     void push_back(_Ty&& _Val) { // insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 672  :         emplace_back(_STD move(_Val));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$emplace_back@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >

; 673  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back, COMDAT
; _this$ = ecx

; 667  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 668  :         emplace_back(_Val);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??$emplace_back@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::emplace_back<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>

; 669  :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S3$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S3$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S3$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	33		 DB	 51			; 00000033H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 531  :     vector(vector&& _Right) noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 532  :         : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) { // construct by moving _Right

  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YA$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAV10@@Z ; std::move<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >

; 533  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0005d	50		 push	 eax
  0005e	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00061	e8 00 00 00 00	 call	 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00066	50		 push	 eax
  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 534  :         _Move_construct(_Right, true_type{});

  0006f	33 c9		 xor	 ecx, ecx
  00071	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  00074	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Move_construct@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Move_construct

; 535  :     }

  00085	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Move_construct@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Move_construct, COMDAT
; _this$ = ecx

; 505  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 506  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Take_contents@?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Take_contents

; 507  :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?_Move_construct@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 385  :     vector() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :         : _Mypair(_Zero_then_variadic_args_t()) { // construct empty vector

  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,1><>

; 387  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Getal@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAEAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::_Getal
  0004b	50		 push	 eax
  0004c	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	e8 00 00 00 00	 call	 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00054	50		 push	 eax
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 388  :     }

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BM@@std@@YAII@Z ; std::_Get_size_of_n<28>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	6b 45 0c 1c	 imul	 eax, DWORD PTR __Count$[ebp], 28
  00012	50		 push	 eax
  00013	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001c	83 c4 08	 add	 esp, 8

; 868  :     }

  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1432 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1434 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<wchar_t> >::_Vector_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 51		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	d1 fa		 sar	 edx, 1
  0008d	52		 push	 edx
  0008e	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	51		 push	 ecx
  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0009c	8b c8		 mov	 ecx, eax
  0009e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a3	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a6	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000ac	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000af	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b5	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b8	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	83 c4 20	 add	 esp, 32			; 00000020H
  000cc	3b ec		 cmp	 ebp, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@_WV?$allocator@_W@std@@@std@@CAXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00070	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00073	89 10		 mov	 DWORD PTR [eax], edx

; 1603 :     }

  00075	83 c4 18	 add	 esp, 24			; 00000018H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Buy_raw@?$vector@_WV?$allocator@_W@std@@@std@@AAEXI@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@_W@std@@@std@@YAXPA_WQA_WAAV?$allocator@_W@0@@Z ; std::_Destroy_range<std::allocator<wchar_t> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXPA_W0@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill, COMDAT
; _this$ = ecx

; 1532 :     pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 :         // fill raw _Dest with _Count copies of _Val, using allocator
; 1534 :         return _Uninitialized_fill_n(_Dest, _Count, _Val, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@_W@std@@@std@@YAPA_WPA_WIAB_WAAV?$allocator@_W@0@@Z ; std::_Uninitialized_fill_n<std::allocator<wchar_t> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1535 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@_WV?$allocator@_W@std@@@std@@AAEPA_WPA_WIAB_W@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@ABEABV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ PROC	; std::vector<wchar_t,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 1436 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1438 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  00029	d1 f8		 sar	 eax, 1

; 1439 :     }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ENDP	; std::vector<wchar_t,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::data, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Ty* data() noexcept { // return address of first element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1353 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Unfancy_maybe_null@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy_maybe_null<wchar_t>
  00039	83 c4 04	 add	 esp, 4

; 1354 :     }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::data
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S4$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@AAEXXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@_WV?$allocator@_W@std@@@std@@AAEAAV?$allocator@_W@2@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S4$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S4$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	34		 DB	 52			; 00000034H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z PROC ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 417  :     vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 418  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Val, optional allocator

  00017	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_Vector_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_Vector_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>

; 419  :         _Construct_n_copies_of_ty(_Count, _Val);

  00028	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@_W@?$vector@_WV?$allocator@_W@std@@@std@@AAEXIAB_W@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::_Construct_n_copies_of_ty<wchar_t>

; 420  :     }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ENDP ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 314  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 315  :     }

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::vector<char,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 1692 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first

; 1694 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::vector<char,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::vector<char,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 1688 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1689 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Get_first

; 1690 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::vector<char,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ PROC ; std::vector<char,std::allocator<char> >::_Xlength, COMDAT

; 1660 :     [[noreturn]] static void _Xlength() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1661 :         _Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1662 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ENDP ; std::vector<char,std::allocator<char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1642 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1643 :         auto& _My_data    = _Mypair._Myval2;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 1644 :         pointer& _Myfirst = _My_data._Myfirst;

  00042	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00045	83 c1 04	 add	 ecx, 4
  00048	89 4d e8	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1645 :         pointer& _Mylast  = _My_data._Mylast;

  0004b	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004e	83 c2 08	 add	 edx, 8
  00051	89 55 e4	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1646 :         pointer& _Myend   = _My_data._Myend;

  00054	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1647 : 
; 1648 :         _My_data._Orphan_all();

  0005d	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1649 : 
; 1650 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00068	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0006b	74 4f		 je	 SHORT $LN1@Tidy

; 1651 :             _Destroy(_Myfirst, _Mylast);

  0006d	8b 55 e4	 mov	 edx, DWORD PTR __Mylast$[ebp]
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	52		 push	 edx
  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1652 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00081	8b 45 e0	 mov	 eax, DWORD PTR __Myend$[ebp]
  00084	8b 4d e8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00087	8b 10		 mov	 edx, DWORD PTR [eax]
  00089	2b 11		 sub	 edx, DWORD PTR [ecx]
  0008b	52		 push	 edx
  0008c	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	51		 push	 ecx
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 1653 : 
; 1654 :             _Myfirst = pointer();

  000a1	8b 55 e8	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  000a4	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1655 :             _Mylast  = pointer();

  000aa	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000ad	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1656 :             _Myend   = pointer();

  000b3	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN1@Tidy:

; 1657 :         }
; 1658 :     }

  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	83 c4 20	 add	 esp, 32			; 00000020H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Buy_nonzero, COMDAT
; _this$ = ecx

; 1605 :     void _Buy_nonzero(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1606 :         // allocate array with _Newcapacity elements
; 1607 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1608 :         auto& _My_data    = _Mypair._Myval2;
; 1609 :         pointer& _Myfirst = _My_data._Myfirst;
; 1610 :         pointer& _Mylast  = _My_data._Mylast;
; 1611 :         pointer& _Myend   = _My_data._Myend;
; 1612 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1613 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1614 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1615 : 
; 1616 :         if (_Newcapacity > max_size()) {

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
  00016	39 45 08	 cmp	 DWORD PTR __Newcapacity$[ebp], eax
  00019	76 05		 jbe	 SHORT $LN2@Buy_nonzer

; 1617 :             _Xlength();

  0001b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@DV?$allocator@D@std@@@std@@CAXXZ ; std::vector<char,std::allocator<char> >::_Xlength
$LN2@Buy_nonzer:

; 1618 :         }
; 1619 : 
; 1620 :         _Buy_raw(_Newcapacity);

  00020	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00023	50		 push	 eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ; std::vector<char,std::allocator<char> >::_Buy_raw
$LN3@Buy_nonzer:

; 1621 :     }

  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?_Buy_nonzero@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z PROC ; std::vector<char,std::allocator<char> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1589 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1590 :         // allocate array with _Newcapacity elements
; 1591 :         auto& _My_data    = _Mypair._Myval2;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1592 :         pointer& _Myfirst = _My_data._Myfirst;

  00026	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00029	83 c1 04	 add	 ecx, 4
  0002c	89 4d f4	 mov	 DWORD PTR __Myfirst$[ebp], ecx

; 1593 :         pointer& _Mylast  = _My_data._Mylast;

  0002f	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00032	83 c2 08	 add	 edx, 8
  00035	89 55 f0	 mov	 DWORD PTR __Mylast$[ebp], edx

; 1594 :         pointer& _Myend   = _My_data._Myend;

  00038	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003e	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1595 : 
; 1596 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1597 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1598 : 
; 1599 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00054	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1600 :         _Myfirst           = _Newvec;

  00057	8b 55 f4	 mov	 edx, DWORD PTR __Myfirst$[ebp]
  0005a	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1601 :         _Mylast            = _Newvec;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00065	89 11		 mov	 DWORD PTR [ecx], edx

; 1602 :         _Myend             = _Newvec + _Newcapacity;

  00067	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  0006a	03 45 08	 add	 eax, DWORD PTR __Newcapacity$[ebp]
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00070	89 01		 mov	 DWORD PTR [ecx], eax

; 1603 :     }

  00072	83 c4 18	 add	 esp, 24			; 00000018H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?_Buy_raw@?$vector@DV?$allocator@D@std@@@std@@AAEXI@Z ENDP ; std::vector<char,std::allocator<char> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1567 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1568 :         _Destroy_range(_First, _Last, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@D@std@@@std@@YAXPADQADAAV?$allocator@D@0@@Z ; std::_Destroy_range<std::allocator<char> >
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1569 :     }

  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@AAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z PROC ; std::vector<char,std::allocator<char> >::_Ufill, COMDAT
; _this$ = ecx

; 1532 :     pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1533 :         // fill raw _Dest with _Count copies of _Val, using allocator
; 1534 :         return _Uninitialized_fill_n(_Dest, _Count, _Val, _Getal());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00016	50		 push	 eax
  00017	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Dest$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$_Uninitialized_fill_n@V?$allocator@D@std@@@std@@YAPADPADIABDAAV?$allocator@D@0@@Z ; std::_Uninitialized_fill_n<std::allocator<char> >
  00028	83 c4 10	 add	 esp, 16			; 00000010H

; 1535 :     }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@DV?$allocator@D@std@@@std@@AAEPADPADIABD@Z ENDP ; std::vector<char,std::allocator<char> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1441 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1442 :         return _Min_value(

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@ABEABV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00032	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00037	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  0003a	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	50		 push	 eax
  0003e	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00041	51		 push	 ecx
  00042	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00047	83 c4 08	 add	 esp, 8
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1443 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1444 :     }

  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1436 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1437 :         auto& _My_data = _Mypair._Myval2;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1438 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00023	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00026	2b 42 04	 sub	 eax, DWORD PTR [edx+4]

; 1439 :     }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ PROC	; std::vector<char,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 1352 :     _NODISCARD _Ty* data() noexcept { // return address of first element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1353 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 ??$_Unfancy_maybe_null@D@std@@YAPADPAD@Z ; std::_Unfancy_maybe_null<char>
  00039	83 c4 04	 add	 esp, 4

; 1354 :     }

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00046	59		 pop	 ecx
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ENDP	; std::vector<char,std::allocator<char> >::data
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S5$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 623  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 624  :         _Tidy();

  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@AAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 625  : #if _ITERATOR_DEBUG_LEVEL != 0
; 626  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Getal@?$vector@DV?$allocator@D@std@@@std@@AAEAAV?$allocator@D@2@XZ ; std::vector<char,std::allocator<char> >::_Getal
  0004f	50		 push	 eax
  00050	8d 4d e7	 lea	 ecx, DWORD PTR _$S5$[ebp]
  00053	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00058	8d 45 e7	 lea	 eax, DWORD PTR _$S5$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 627  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

  0005e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00065	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00068	51		 push	 ecx
  00069	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00072	83 c4 08	 add	 esp, 8
  00075	50		 push	 eax
  00076	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  0007f	83 c4 08	 add	 esp, 8

; 628  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 629  :     }

  00082	52		 push	 edx
  00083	8b cd		 mov	 ecx, ebp
  00085	50		 push	 eax
  00086	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@vector
  0008c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00091	58		 pop	 eax
  00092	5a		 pop	 edx
  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	83 c4 24	 add	 esp, 36			; 00000024H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
$LN6@vector:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN5@vector
$LN5@vector:
  000b4	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN3@vector
$LN3@vector:
  000c0	24		 DB	 36			; 00000024H
  000c1	53		 DB	 83			; 00000053H
  000c2	35		 DB	 53			; 00000035H
  000c3	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vector
;	COMDAT ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z PROC ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 417  :     vector(_CRT_GUARDOVERFLOW const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 418  :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Count * _Val, optional allocator

  00017	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0001a	50		 push	 eax
  0001b	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_Vector_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_Vector_val<std::_Simple_types<char> >,1><std::allocator<char> const &>

; 419  :         _Construct_n_copies_of_ty(_Count, _Val);

  00028	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0002b	52		 push	 edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??$_Construct_n_copies_of_ty@D@?$vector@DV?$allocator@D@std@@@std@@AAEXIABD@Z ; std::vector<char,std::allocator<char> >::_Construct_n_copies_of_ty<char>

; 420  :     }

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ENDP ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T1 = -240						; size = 16
$T2 = -224						; size = 32
$T3 = -192						; size = 32
$T4 = -160						; size = 32
$T5 = -128						; size = 32
$T6 = -80						; size = 16
_y0$ = -64						; size = 32
_ret$ = -4						; size = 4
_bAVXAvail$ = 8						; size = 4
?rgy_avx_dummy_if_avail@@YAHH@Z PROC			; rgy_avx_dummy_if_avail

; 1030 : RGY_NOINLINE int rgy_avx_dummy_if_avail(int bAVXAvail) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 e0	 and	 esp, -32		; ffffffe0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  0001c	57		 push	 edi
  0001d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00023	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 1031 :     int ret = 1;

  0002f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 1

; 1032 :     if (bAVXAvail) {

  00036	83 7b 08 00	 cmp	 DWORD PTR _bAVXAvail$[ebx], 0
  0003a	74 05		 je	 SHORT $LN2@rgy_avx_du

; 1033 :         return ret;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
  0003f	eb 78		 jmp	 SHORT $LN1@rgy_avx_du
$LN2@rgy_avx_du:

; 1034 :     }
; 1035 :     __m256 y0 = _mm256_castsi256_ps(_mm256_castsi128_si256(_mm_cvtsi32_si128(bAVXAvail)));

  00041	8b 43 08	 mov	 eax, DWORD PTR _bAVXAvail$[ebx]
  00044	66 0f 6e c0	 movd	 xmm0, eax
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0004c	c5 fa 6f 45 b0	 vmovdqu xmm0, XMMWORD PTR $T6[ebp]
  00051	c5 fe 7f 45 80	 vmovdqu YMMWORD PTR $T5[ebp], ymm0
  00056	c5 fc 10 45 80	 vmovups ymm0, YMMWORD PTR $T5[ebp]
  0005b	c5 fc 11 85 60
	ff ff ff	 vmovups YMMWORD PTR $T4[ebp], ymm0
  00063	c5 fc 10 85 60
	ff ff ff	 vmovups ymm0, YMMWORD PTR $T4[ebp]
  0006b	c5 fc 11 45 c0	 vmovups YMMWORD PTR _y0$[ebp], ymm0

; 1036 :     y0 = _mm256_xor_ps(y0, y0);

  00070	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00074	c5 fc 11 85 40
	ff ff ff	 vmovups YMMWORD PTR $T3[ebp], ymm0
  0007c	c5 fc 10 85 40
	ff ff ff	 vmovups ymm0, YMMWORD PTR $T3[ebp]
  00084	c5 fc 11 45 c0	 vmovups YMMWORD PTR _y0$[ebp], ymm0

; 1037 :     ret = _mm_cvtsi128_si32(_mm256_castsi256_si128(_mm256_castps_si256(y0)));

  00089	c5 fe 6f 45 c0	 vmovdqu ymm0, YMMWORD PTR _y0$[ebp]
  0008e	c5 fe 7f 85 20
	ff ff ff	 vmovdqu YMMWORD PTR $T2[ebp], ymm0
  00096	c5 fa 6f 85 20
	ff ff ff	 vmovdqu xmm0, XMMWORD PTR $T2[ebp]
  0009e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000a5	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000ac	66 0f 7e c1	 movd	 ecx, xmm0
  000b0	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx

; 1038 :     _mm256_zeroupper();

  000b3	c5 f8 77	 vzeroupper

; 1039 :     return ret;

  000b6	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN1@rgy_avx_du:

; 1040 : }

  000b9	5f		 pop	 edi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	8b e3		 mov	 esp, ebx
  000bf	5b		 pop	 ebx
  000c0	c3		 ret	 0
?rgy_avx_dummy_if_avail@@YAHH@Z ENDP			; rgy_avx_dummy_if_avail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DataSelect@@QAE@XZ PROC				; DataSelect::DataSelect
; _this$ = ecx

; 1069 :     trackID(0) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1070 : 
; 1071 : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0DataSelect@@QAE@XZ ENDP				; DataSelect::DataSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SubtitleSelect@@QAE@XZ PROC				; SubtitleSelect::SubtitleSelect
; _this$ = ecx

; 1064 :     asdata(false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SubtitleSelect@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1060 :     trackID(0),

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1061 :     encCodec(),

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1062 :     encCodecPrm(),

  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 20	 add	 ecx, 32			; 00000020H
  0004e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00053	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1063 :     decCodecPrm(),

  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0005d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00062	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1064 :     asdata(false) {

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	c6 41 58 00	 mov	 BYTE PTR [ecx+88], 0

; 1065 : 
; 1066 : }

  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SubtitleSelect@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SubtitleSelect@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SubtitleSelect@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0SubtitleSelect@@QAE@XZ:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SubtitleSelect@@QAE@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SubtitleSelect@@QAE@XZ ENDP				; SubtitleSelect::SubtitleSelect
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0AudioSelect@@QAE@XZ PROC				; AudioSelect::AudioSelect
; _this$ = ecx

; 1054 :     pnStreamChannelOut() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0AudioSelect@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1043 :     trackID(0),

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1044 :     decCodecPrm(),

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1045 :     encCodec(),

  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 20	 add	 ecx, 32			; 00000020H
  0004e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00053	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1046 :     encCodecPrm(),

  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0005d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00062	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1047 :     encCodecProfile(),

  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 58	 add	 ecx, 88			; 00000058H
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1048 :     encBitrate(0),

  00075	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 1049 :     encSamplingRate(0),

  0007f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00082	c7 42 78 00 00
	00 00		 mov	 DWORD PTR [edx+120], 0

; 1050 :     extractFilename(),

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0008f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00094	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 1051 :     extractFormat(),

  00098	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  000a1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a6	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 1052 :     filter(),

  000aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  000b3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 1053 :     pnStreamChannelSelect(),

  000bc	68 00 01 00 00	 push	 256			; 00000100H
  000c1	6a 00		 push	 0
  000c3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 _memset
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1054 :     pnStreamChannelOut() {

  000d4	68 00 01 00 00	 push	 256			; 00000100H
  000d9	6a 00		 push	 0
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	81 c1 d0 01 00
	00		 add	 ecx, 464		; 000001d0H
  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 _memset
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1055 :     memset(pnStreamChannelSelect, 0, sizeof(pnStreamChannelSelect));

  000ed	68 00 01 00 00	 push	 256			; 00000100H
  000f2	6a 00		 push	 0
  000f4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	81 c2 d0 00 00
	00		 add	 edx, 208		; 000000d0H
  000fd	52		 push	 edx
  000fe	e8 00 00 00 00	 call	 _memset
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 :     memset(pnStreamChannelOut, 0, sizeof(pnStreamChannelOut));

  00106	68 00 01 00 00	 push	 256			; 00000100H
  0010b	6a 00		 push	 0
  0010d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00110	05 d0 01 00 00	 add	 eax, 464		; 000001d0H
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 _memset
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1057 : }

  0011e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00125	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	3b ec		 cmp	 ebp, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0AudioSelect@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 20	 add	 ecx, 32			; 00000020H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 58	 add	 ecx, 88			; 00000058H
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$5:
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00040	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0AudioSelect@@QAE@XZ$6:
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 b4 00 00
	00		 add	 ecx, 180		; 000000b4H
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0AudioSelect@@QAE@XZ:
  00053	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00057	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0005d	33 c8		 xor	 ecx, eax
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AudioSelect@@QAE@XZ
  00069	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AudioSelect@@QAE@XZ ENDP				; AudioSelect::AudioSelect
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_i$3 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_idx$ = 12						; size = 4
?get_h264_sar@@YA?AU?$pair@HH@std@@H@Z PROC		; get_h264_sar

; 945  : std::pair<int, int> get_h264_sar(int idx) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 946  :     for (int i = 0; i < _countof(SAR_LIST); i++) {

  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00022	eb 09		 jmp	 SHORT $LN4@get_h264_s
$LN2@get_h264_s:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _i$3[ebp]
  00027	83 c0 01	 add	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@get_h264_s:
  0002d	83 7d fc 11	 cmp	 DWORD PTR _i$3[ebp], 17	; 00000011H
  00031	73 4a		 jae	 SHORT $LN3@get_h264_s

; 947  :         if (SAR_LIST[i].key == idx)

  00033	6b 4d fc 0c	 imul	 ecx, DWORD PTR _i$3[ebp], 12
  00037	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[ecx]
  0003d	3b 55 0c	 cmp	 edx, DWORD PTR _idx$[ebp]
  00040	75 39		 jne	 SHORT $LN5@get_h264_s

; 948  :             return std::make_pair(SAR_LIST[i].sar[0], SAR_LIST[i].sar[1]);

  00042	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	c1 e1 00	 shl	 ecx, 0
  0004e	8d 94 08 04 00
	00 00		 lea	 edx, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[eax+ecx+4]
  00055	52		 push	 edx
  00056	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$3[ebp], 12
  0005a	b9 04 00 00 00	 mov	 ecx, 4
  0005f	6b d1 00	 imul	 edx, ecx, 0
  00062	8d 84 10 04 00
	00 00		 lea	 eax, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[eax+edx+4]
  00069	50		 push	 eax
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ??$make_pair@ABHABH@std@@YA?AU?$pair@HH@0@ABH0@Z ; std::make_pair<int const &,int const &>
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH
  00076	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00079	eb 27		 jmp	 SHORT $LN1@get_h264_s
$LN5@get_h264_s:

; 949  :     }

  0007b	eb a7		 jmp	 SHORT $LN2@get_h264_s
$LN3@get_h264_s:

; 950  :     return std::make_pair(0, 0);

  0007d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00084	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0008b	8d 55 f8	 lea	 edx, DWORD PTR $T2[ebp]
  0008e	52		 push	 edx
  0008f	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00092	50		 push	 eax
  00093	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z ; std::make_pair<int,int>
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@get_h264_s:

; 951  : }

  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?get_h264_sar@@YA?AU?$pair@HH@std@@H@Z ENDP		; get_h264_sar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_sar$ = 8						; size = 8
?get_h264_sar_idx@@YAHU?$pair@HH@std@@@Z PROC		; get_h264_sar_idx

; 953  : int get_h264_sar_idx(std::pair<int, int> sar) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 954  : 
; 955  :     if (0 != sar.first && 0 != sar.second) {

  0000b	83 7d 08 00	 cmp	 DWORD PTR _sar$[ebp], 0
  0000f	74 12		 je	 SHORT $LN5@get_h264_s
  00011	83 7d 0c 00	 cmp	 DWORD PTR _sar$[ebp+4], 0
  00015	74 0c		 je	 SHORT $LN5@get_h264_s

; 956  :         rgy_reduce(sar);

  00017	8d 45 08	 lea	 eax, DWORD PTR _sar$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$rgy_reduce@H@@YAXAAU?$pair@HH@std@@@Z ; rgy_reduce<int>
  00020	83 c4 04	 add	 esp, 4
$LN5@get_h264_s:

; 957  :     }
; 958  : 
; 959  :     for (int i = 0; i < _countof(SAR_LIST); i++) {

  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002a	eb 09		 jmp	 SHORT $LN4@get_h264_s
$LN2@get_h264_s:
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002f	83 c1 01	 add	 ecx, 1
  00032	89 4d fc	 mov	 DWORD PTR _i$1[ebp], ecx
$LN4@get_h264_s:
  00035	83 7d fc 11	 cmp	 DWORD PTR _i$1[ebp], 17	; 00000011H
  00039	73 3e		 jae	 SHORT $LN3@get_h264_s

; 960  :         if (SAR_LIST[i].sar[0] == sar.first && SAR_LIST[i].sar[1] == sar.second) {

  0003b	6b 55 fc 0c	 imul	 edx, DWORD PTR _i$1[ebp], 12
  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	6b c8 00	 imul	 ecx, eax, 0
  00047	8b 94 0a 04 00
	00 00		 mov	 edx, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[edx+ecx+4]
  0004e	3b 55 08	 cmp	 edx, DWORD PTR _sar$[ebp]
  00051	75 24		 jne	 SHORT $LN6@get_h264_s
  00053	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  00057	b9 04 00 00 00	 mov	 ecx, 4
  0005c	c1 e1 00	 shl	 ecx, 0
  0005f	8b 94 08 04 00
	00 00		 mov	 edx, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[eax+ecx+4]
  00066	3b 55 0c	 cmp	 edx, DWORD PTR _sar$[ebp+4]
  00069	75 0c		 jne	 SHORT $LN6@get_h264_s

; 961  :             return SAR_LIST[i].key;

  0006b	6b 45 fc 0c	 imul	 eax, DWORD PTR _i$1[ebp], 12
  0006f	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?SAR_LIST@@3QBUsar_option_t@@B[eax]
  00075	eb 05		 jmp	 SHORT $LN1@get_h264_s
$LN6@get_h264_s:

; 962  :         }
; 963  :     }

  00077	eb b3		 jmp	 SHORT $LN2@get_h264_s
$LN3@get_h264_s:

; 964  :     return -1;

  00079	83 c8 ff	 or	 eax, -1
$LN1@get_h264_s:

; 965  : }

  0007c	83 c4 04	 add	 esp, 4
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?get_h264_sar_idx@@YAHU?$pair@HH@std@@@Z ENDP		; get_h264_sar_idx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_c$1 = -48						; size = 4
_b$2 = -44						; size = 4
_a$3 = -40						; size = 4
_c$4 = -36						; size = 4
_b$5 = -32						; size = 4
_a$6 = -28						; size = 4
_y$7 = -24						; size = 4
_x$8 = -20						; size = 4
_dar_y$9 = -16						; size = 4
_dar_x$10 = -12						; size = 4
_aspect_h$ = -8						; size = 4
_aspect_w$ = -4						; size = 4
_sar_w$ = 8						; size = 4
_sar_h$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?adjust_sar@@YAXPAH0HH@Z PROC				; adjust_sar

; 967  : void adjust_sar(int *sar_w, int *sar_h, int width, int height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 968  :     int aspect_w = *sar_w;

  00016	8b 45 08	 mov	 eax, DWORD PTR _sar_w$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d fc	 mov	 DWORD PTR _aspect_w$[ebp], ecx

; 969  :     int aspect_h = *sar_h;

  0001e	8b 55 0c	 mov	 edx, DWORD PTR _sar_h$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	89 45 f8	 mov	 DWORD PTR _aspect_h$[ebp], eax

; 970  :     //正負チェック
; 971  :     if (aspect_w * aspect_h <= 0)

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _aspect_w$[ebp]
  00029	0f af 4d f8	 imul	 ecx, DWORD PTR _aspect_h$[ebp]
  0002d	85 c9		 test	 ecx, ecx
  0002f	7f 12		 jg	 SHORT $LN6@adjust_sar

; 972  :         aspect_w = aspect_h = 0;

  00031	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _aspect_h$[ebp], 0
  00038	8b 55 f8	 mov	 edx, DWORD PTR _aspect_h$[ebp]
  0003b	89 55 fc	 mov	 DWORD PTR _aspect_w$[ebp], edx
  0003e	e9 df 00 00 00	 jmp	 $LN1@adjust_sar
$LN6@adjust_sar:

; 973  :     else if (aspect_w < 0) {

  00043	83 7d fc 00	 cmp	 DWORD PTR _aspect_w$[ebp], 0
  00047	0f 8d 93 00 00
	00		 jge	 $LN8@adjust_sar

; 974  :         //負で与えられている場合はDARでの指定
; 975  :         //SAR比に変換する
; 976  :         int dar_x = -1 * aspect_w;

  0004d	6b 45 fc ff	 imul	 eax, DWORD PTR _aspect_w$[ebp], -1
  00051	89 45 f4	 mov	 DWORD PTR _dar_x$10[ebp], eax

; 977  :         int dar_y = -1 * aspect_h;

  00054	6b 4d f8 ff	 imul	 ecx, DWORD PTR _aspect_h$[ebp], -1
  00058	89 4d f0	 mov	 DWORD PTR _dar_y$9[ebp], ecx

; 978  :         int x = dar_x * height;

  0005b	8b 55 f4	 mov	 edx, DWORD PTR _dar_x$10[ebp]
  0005e	0f af 55 14	 imul	 edx, DWORD PTR _height$[ebp]
  00062	89 55 ec	 mov	 DWORD PTR _x$8[ebp], edx

; 979  :         int y = dar_y * width;

  00065	8b 45 f0	 mov	 eax, DWORD PTR _dar_y$9[ebp]
  00068	0f af 45 10	 imul	 eax, DWORD PTR _width$[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR _y$7[ebp], eax

; 980  :         //多少のづれは容認する
; 981  :         if (abs(y - x) > 16 * dar_y) {

  0006f	8b 4d e8	 mov	 ecx, DWORD PTR _y$7[ebp]
  00072	2b 4d ec	 sub	 ecx, DWORD PTR _x$8[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _abs
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b 55 f0	 mov	 edx, DWORD PTR _dar_y$9[ebp]
  00081	c1 e2 04	 shl	 edx, 4
  00084	3b c2		 cmp	 eax, edx
  00086	7e 44		 jle	 SHORT $LN10@adjust_sar

; 982  :             //gcd
; 983  :             int a = x, b = y, c;

  00088	8b 45 ec	 mov	 eax, DWORD PTR _x$8[ebp]
  0008b	89 45 e4	 mov	 DWORD PTR _a$6[ebp], eax
  0008e	8b 4d e8	 mov	 ecx, DWORD PTR _y$7[ebp]
  00091	89 4d e0	 mov	 DWORD PTR _b$5[ebp], ecx
$LN2@adjust_sar:

; 984  :             while ((c = a % b) != 0)

  00094	8b 45 e4	 mov	 eax, DWORD PTR _a$6[ebp]
  00097	99		 cdq
  00098	f7 7d e0	 idiv	 DWORD PTR _b$5[ebp]
  0009b	89 55 dc	 mov	 DWORD PTR _c$4[ebp], edx
  0009e	83 7d dc 00	 cmp	 DWORD PTR _c$4[ebp], 0
  000a2	74 0e		 je	 SHORT $LN3@adjust_sar

; 985  :                 a = b, b = c;

  000a4	8b 55 e0	 mov	 edx, DWORD PTR _b$5[ebp]
  000a7	89 55 e4	 mov	 DWORD PTR _a$6[ebp], edx
  000aa	8b 45 dc	 mov	 eax, DWORD PTR _c$4[ebp]
  000ad	89 45 e0	 mov	 DWORD PTR _b$5[ebp], eax
  000b0	eb e2		 jmp	 SHORT $LN2@adjust_sar
$LN3@adjust_sar:

; 986  :             *sar_w = x / b;

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _x$8[ebp]
  000b5	99		 cdq
  000b6	f7 7d e0	 idiv	 DWORD PTR _b$5[ebp]
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _sar_w$[ebp]
  000bc	89 01		 mov	 DWORD PTR [ecx], eax

; 987  :             *sar_h = y / b;

  000be	8b 45 e8	 mov	 eax, DWORD PTR _y$7[ebp]
  000c1	99		 cdq
  000c2	f7 7d e0	 idiv	 DWORD PTR _b$5[ebp]
  000c5	8b 55 0c	 mov	 edx, DWORD PTR _sar_h$[ebp]
  000c8	89 02		 mov	 DWORD PTR [edx], eax

; 988  :         } else {

  000ca	eb 12		 jmp	 SHORT $LN11@adjust_sar
$LN10@adjust_sar:

; 989  :             *sar_w = *sar_h = 1;

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _sar_h$[ebp]
  000cf	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _sar_w$[ebp]
  000d8	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
$LN11@adjust_sar:

; 990  :         }
; 991  :     } else {

  000de	eb 42		 jmp	 SHORT $LN1@adjust_sar
$LN8@adjust_sar:

; 992  :         //sarも一応gcdをとっておく
; 993  :         int a = aspect_w, b = aspect_h, c;

  000e0	8b 55 fc	 mov	 edx, DWORD PTR _aspect_w$[ebp]
  000e3	89 55 d8	 mov	 DWORD PTR _a$3[ebp], edx
  000e6	8b 45 f8	 mov	 eax, DWORD PTR _aspect_h$[ebp]
  000e9	89 45 d4	 mov	 DWORD PTR _b$2[ebp], eax
$LN4@adjust_sar:

; 994  :         while ((c = a % b) != 0)

  000ec	8b 45 d8	 mov	 eax, DWORD PTR _a$3[ebp]
  000ef	99		 cdq
  000f0	f7 7d d4	 idiv	 DWORD PTR _b$2[ebp]
  000f3	89 55 d0	 mov	 DWORD PTR _c$1[ebp], edx
  000f6	83 7d d0 00	 cmp	 DWORD PTR _c$1[ebp], 0
  000fa	74 0e		 je	 SHORT $LN5@adjust_sar

; 995  :             a = b, b = c;

  000fc	8b 4d d4	 mov	 ecx, DWORD PTR _b$2[ebp]
  000ff	89 4d d8	 mov	 DWORD PTR _a$3[ebp], ecx
  00102	8b 55 d0	 mov	 edx, DWORD PTR _c$1[ebp]
  00105	89 55 d4	 mov	 DWORD PTR _b$2[ebp], edx
  00108	eb e2		 jmp	 SHORT $LN4@adjust_sar
$LN5@adjust_sar:

; 996  :         *sar_w = aspect_w / b;

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _aspect_w$[ebp]
  0010d	99		 cdq
  0010e	f7 7d d4	 idiv	 DWORD PTR _b$2[ebp]
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _sar_w$[ebp]
  00114	89 01		 mov	 DWORD PTR [ecx], eax

; 997  :         *sar_h = aspect_h / b;

  00116	8b 45 f8	 mov	 eax, DWORD PTR _aspect_h$[ebp]
  00119	99		 cdq
  0011a	f7 7d d4	 idiv	 DWORD PTR _b$2[ebp]
  0011d	8b 55 0c	 mov	 edx, DWORD PTR _sar_h$[ebp]
  00120	89 02		 mov	 DWORD PTR [edx], eax
$LN1@adjust_sar:

; 998  :     }
; 999  : }

  00122	5f		 pop	 edi
  00123	83 c4 30	 add	 esp, 48			; 00000030H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
?adjust_sar@@YAXPAH0HH@Z ENDP				; adjust_sar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
_c$ = -20						; size = 4
_b$ = -16						; size = 4
_a$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_darWidth$ = 20						; size = 4
_darHeight$ = 24					; size = 4
?get_sar@@YA?AU?$pair@HH@std@@IIII@Z PROC		; get_sar

; 1018 : std::pair<int, int> get_sar(unsigned int width, unsigned int height, unsigned int darWidth, unsigned int darHeight) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1019 :     int x = darWidth  * height;

  00020	8b 45 14	 mov	 eax, DWORD PTR _darWidth$[ebp]
  00023	0f af 45 10	 imul	 eax, DWORD PTR _height$[ebp]
  00027	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1020 :     int y = darHeight *  width;

  0002a	8b 4d 18	 mov	 ecx, DWORD PTR _darHeight$[ebp]
  0002d	0f af 4d 0c	 imul	 ecx, DWORD PTR _width$[ebp]
  00031	89 4d f8	 mov	 DWORD PTR _y$[ebp], ecx

; 1021 :     int a = x, b = y, c;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _x$[ebp]
  00037	89 55 f4	 mov	 DWORD PTR _a$[ebp], edx
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  0003d	89 45 f0	 mov	 DWORD PTR _b$[ebp], eax
$LN2@get_sar:

; 1022 :     while ((c = a % b) != 0)

  00040	8b 45 f4	 mov	 eax, DWORD PTR _a$[ebp]
  00043	99		 cdq
  00044	f7 7d f0	 idiv	 DWORD PTR _b$[ebp]
  00047	89 55 ec	 mov	 DWORD PTR _c$[ebp], edx
  0004a	83 7d ec 00	 cmp	 DWORD PTR _c$[ebp], 0
  0004e	74 0e		 je	 SHORT $LN3@get_sar

; 1023 :         a = b, b = c;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _b$[ebp]
  00053	89 4d f4	 mov	 DWORD PTR _a$[ebp], ecx
  00056	8b 55 ec	 mov	 edx, DWORD PTR _c$[ebp]
  00059	89 55 f0	 mov	 DWORD PTR _b$[ebp], edx
  0005c	eb e2		 jmp	 SHORT $LN2@get_sar
$LN3@get_sar:

; 1024 :     return std::make_pair<int, int>(x / b, y / b);

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _y$[ebp]
  00061	99		 cdq
  00062	f7 7d f0	 idiv	 DWORD PTR _b$[ebp]
  00065	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00068	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]
  0006b	99		 cdq
  0006c	f7 7d f0	 idiv	 DWORD PTR _b$[ebp]
  0006f	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
  00072	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00075	50		 push	 eax
  00076	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$make_pair@HH@std@@YA?AU?$pair@HH@0@$$QAH0@Z ; std::make_pair<int,int>
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1025 : }

  00089	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008c	3b ec		 cmp	 ebp, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?get_sar@@YA?AU?$pair@HH@std@@IIII@Z ENDP		; get_sar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv81 = -44						; size = 8
_ratio$1 = -36						; size = 8
_c$2 = -28						; size = 4
_b$3 = -24						; size = 4
_a$4 = -20						; size = 4
_y$5 = -16						; size = 4
_x$6 = -12						; size = 4
_h$ = -8						; size = 4
_w$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_sar_w$ = 16						; size = 4
_sar_h$ = 20						; size = 4
?get_dar_pixels@@YAXPAI0HH@Z PROC			; get_dar_pixels

; 1001 : void get_dar_pixels(unsigned int* width, unsigned int* height, int sar_w, int sar_h) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd

; 1002 :     int w = *width;

  00016	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	89 4d fc	 mov	 DWORD PTR _w$[ebp], ecx

; 1003 :     int h = *height;

  0001e	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 1004 :     if (0 != (w * h * sar_w * sar_h)) {

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _w$[ebp]
  00029	0f af 4d f8	 imul	 ecx, DWORD PTR _h$[ebp]
  0002d	0f af 4d 10	 imul	 ecx, DWORD PTR _sar_w$[ebp]
  00031	0f af 4d 14	 imul	 ecx, DWORD PTR _sar_h$[ebp]
  00035	85 c9		 test	 ecx, ecx
  00037	0f 84 c2 00 00
	00		 je	 $LN4@get_dar_pi

; 1005 :         int x = w * sar_w;

  0003d	8b 55 fc	 mov	 edx, DWORD PTR _w$[ebp]
  00040	0f af 55 10	 imul	 edx, DWORD PTR _sar_w$[ebp]
  00044	89 55 f4	 mov	 DWORD PTR _x$6[ebp], edx

; 1006 :         int y = h * sar_h;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]
  0004a	0f af 45 14	 imul	 eax, DWORD PTR _sar_h$[ebp]
  0004e	89 45 f0	 mov	 DWORD PTR _y$5[ebp], eax

; 1007 :         int a = x, b = y, c;

  00051	8b 4d f4	 mov	 ecx, DWORD PTR _x$6[ebp]
  00054	89 4d ec	 mov	 DWORD PTR _a$4[ebp], ecx
  00057	8b 55 f0	 mov	 edx, DWORD PTR _y$5[ebp]
  0005a	89 55 e8	 mov	 DWORD PTR _b$3[ebp], edx
$LN2@get_dar_pi:

; 1008 :         while ((c = a % b) != 0)

  0005d	8b 45 ec	 mov	 eax, DWORD PTR _a$4[ebp]
  00060	99		 cdq
  00061	f7 7d e8	 idiv	 DWORD PTR _b$3[ebp]
  00064	89 55 e4	 mov	 DWORD PTR _c$2[ebp], edx
  00067	83 7d e4 00	 cmp	 DWORD PTR _c$2[ebp], 0
  0006b	74 0e		 je	 SHORT $LN3@get_dar_pi

; 1009 :             a = b, b = c;

  0006d	8b 45 e8	 mov	 eax, DWORD PTR _b$3[ebp]
  00070	89 45 ec	 mov	 DWORD PTR _a$4[ebp], eax
  00073	8b 4d e4	 mov	 ecx, DWORD PTR _c$2[ebp]
  00076	89 4d e8	 mov	 DWORD PTR _b$3[ebp], ecx
  00079	eb e2		 jmp	 SHORT $LN2@get_dar_pi
$LN3@get_dar_pi:

; 1010 :         x /= b;

  0007b	8b 45 f4	 mov	 eax, DWORD PTR _x$6[ebp]
  0007e	99		 cdq
  0007f	f7 7d e8	 idiv	 DWORD PTR _b$3[ebp]
  00082	89 45 f4	 mov	 DWORD PTR _x$6[ebp], eax

; 1011 :         y /= b;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _y$5[ebp]
  00088	99		 cdq
  00089	f7 7d e8	 idiv	 DWORD PTR _b$3[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _y$5[ebp], eax

; 1012 :         const double ratio = (sar_w >= sar_h) ? h / (double)y : w / (double)x;

  0008f	8b 55 10	 mov	 edx, DWORD PTR _sar_w$[ebp]
  00092	3b 55 14	 cmp	 edx, DWORD PTR _sar_h$[ebp]
  00095	7c 15		 jl	 SHORT $LN6@get_dar_pi
  00097	f2 0f 2a 45 f8	 cvtsi2sd xmm0, DWORD PTR _h$[ebp]
  0009c	f2 0f 2a 4d f0	 cvtsi2sd xmm1, DWORD PTR _y$5[ebp]
  000a1	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000a5	f2 0f 11 45 d4	 movsd	 QWORD PTR tv81[ebp], xmm0
  000aa	eb 13		 jmp	 SHORT $LN7@get_dar_pi
$LN6@get_dar_pi:
  000ac	f2 0f 2a 45 fc	 cvtsi2sd xmm0, DWORD PTR _w$[ebp]
  000b1	f2 0f 2a 4d f4	 cvtsi2sd xmm1, DWORD PTR _x$6[ebp]
  000b6	f2 0f 5e c1	 divsd	 xmm0, xmm1
  000ba	f2 0f 11 45 d4	 movsd	 QWORD PTR tv81[ebp], xmm0
$LN7@get_dar_pi:
  000bf	f2 0f 10 45 d4	 movsd	 xmm0, QWORD PTR tv81[ebp]
  000c4	f2 0f 11 45 dc	 movsd	 QWORD PTR _ratio$1[ebp], xmm0

; 1013 :         *width  = (int)(x * ratio + 0.5);

  000c9	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR _x$6[ebp]
  000ce	f2 0f 59 45 dc	 mulsd	 xmm0, QWORD PTR _ratio$1[ebp]
  000d3	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000db	f2 0f 2c c0	 cvttsd2si eax, xmm0
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000e2	89 01		 mov	 DWORD PTR [ecx], eax

; 1014 :         *height = (int)(y * ratio + 0.5);

  000e4	f2 0f 2a 45 f0	 cvtsi2sd xmm0, DWORD PTR _y$5[ebp]
  000e9	f2 0f 59 45 dc	 mulsd	 xmm0, QWORD PTR _ratio$1[ebp]
  000ee	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  000f6	f2 0f 2c d0	 cvttsd2si edx, xmm0
  000fa	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000fd	89 10		 mov	 DWORD PTR [eax], edx
$LN4@get_dar_pi:

; 1015 :     }
; 1016 : }

  000ff	5f		 pop	 edi
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
?get_dar_pixels@@YAXPAI0HH@Z ENDP			; get_dar_pixels
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspColorprimList@@YAXXZ
text$di	SEGMENT
$T1 = -148						; size = 48
$T2 = -100						; size = 4
$T3 = -96						; size = 4
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
$T7 = -80						; size = 4
$T8 = -76						; size = 4
$T9 = -72						; size = 4
$T10 = -68						; size = 4
$T11 = -64						; size = 4
$T12 = -60						; size = 4
$T13 = -56						; size = 4
$T14 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
??__ECspColorprimList@@YAXXZ PROC			; `dynamic initializer for 'CspColorprimList'', COMDAT

; 1187 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00011	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1174 : static const auto CspColorprimList = make_array<CspColorprim>(

  00027	c7 45 c8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0002e	c7 45 c4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00035	c7 45 c0 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  0003c	c7 45 bc 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00043	c7 45 b8 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0004a	c7 45 b4 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00051	c7 45 b0 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  00058	c7 45 ac 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  0005f	c7 45 a8 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  00066	c7 45 a4 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  0006d	c7 45 a0 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00074	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  0007b	8d 45 c8	 lea	 eax, DWORD PTR $T13[ebp]
  0007e	50		 push	 eax
  0007f	8d 4d c4	 lea	 ecx, DWORD PTR $T12[ebp]
  00082	51		 push	 ecx
  00083	8d 55 c0	 lea	 edx, DWORD PTR $T11[ebp]
  00086	52		 push	 edx
  00087	8d 45 bc	 lea	 eax, DWORD PTR $T10[ebp]
  0008a	50		 push	 eax
  0008b	8d 4d b8	 lea	 ecx, DWORD PTR $T9[ebp]
  0008e	51		 push	 ecx
  0008f	8d 55 b4	 lea	 edx, DWORD PTR $T8[ebp]
  00092	52		 push	 edx
  00093	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  00096	50		 push	 eax
  00097	8d 4d ac	 lea	 ecx, DWORD PTR $T6[ebp]
  0009a	51		 push	 ecx
  0009b	8d 55 a8	 lea	 edx, DWORD PTR $T5[ebp]
  0009e	52		 push	 edx
  0009f	8d 45 a4	 lea	 eax, DWORD PTR $T4[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a6	51		 push	 ecx
  000a7	8d 55 9c	 lea	 edx, DWORD PTR $T2[ebp]
  000aa	52		 push	 edx
  000ab	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
  000b7	83 c4 34	 add	 esp, 52			; 00000034H
  000ba	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000bf	8b f0		 mov	 esi, eax
  000c1	8d 7d cc	 lea	 edi, DWORD PTR $T14[ebp]
  000c4	f3 a5		 rep movsd
  000c6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000cb	8d 75 cc	 lea	 esi, DWORD PTR $T14[ebp]
  000ce	bf 00 00 00 00	 mov	 edi, OFFSET ?CspColorprimList@@3V?$array@W4CspColorprim@@$0M@@std@@B
  000d3	f3 a5		 rep movsd
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
??__ECspColorprimList@@YAXXZ ENDP			; `dynamic initializer for 'CspColorprimList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z
_TEXT	SEGMENT
$T1 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z PROC ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d cc	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 d0	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 d4	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d8	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 dc	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 e0	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d e4	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e8	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 ec	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d f0	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 f4	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f8	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00086	8d 75 cc	 lea	 esi, DWORD PTR $T1[ebp]
  00089	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0008c	f3 a5		 rep movsd
  0008e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00096	33 cd		 xor	 ecx, ebp
  00098	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??$make_array@W4CspColorprim@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspColorprim@@$0M@@std@@$$QAW4CspColorprim@@00000000000@Z ENDP ; make_array<enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim,enum CspColorprim>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspTransferList@@YAXXZ
text$di	SEGMENT
$T1 = -184						; size = 60
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
$T9 = -96						; size = 4
$T10 = -92						; size = 4
$T11 = -88						; size = 4
$T12 = -84						; size = 4
$T13 = -80						; size = 4
$T14 = -76						; size = 4
$T15 = -72						; size = 4
$T16 = -68						; size = 4
$T17 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
??__ECspTransferList@@YAXXZ PROC			; `dynamic initializer for 'CspTransferList'', COMDAT

; 1135 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00011	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1119 : static const auto CspTransferList = make_array<CspTransfer>(

  00027	c7 45 bc 12 00
	00 00		 mov	 DWORD PTR $T16[ebp], 18	; 00000012H
  0002e	c7 45 b8 10 00
	00 00		 mov	 DWORD PTR $T15[ebp], 16	; 00000010H
  00035	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp], 15	; 0000000fH
  0003c	c7 45 b0 0e 00
	00 00		 mov	 DWORD PTR $T13[ebp], 14	; 0000000eH
  00043	c7 45 ac 0d 00
	00 00		 mov	 DWORD PTR $T12[ebp], 13	; 0000000dH
  0004a	c7 45 a8 0b 00
	00 00		 mov	 DWORD PTR $T11[ebp], 11	; 0000000bH
  00051	c7 45 a4 0a 00
	00 00		 mov	 DWORD PTR $T10[ebp], 10	; 0000000aH
  00058	c7 45 a0 09 00
	00 00		 mov	 DWORD PTR $T9[ebp], 9
  0005f	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR $T8[ebp], 8
  00066	c7 45 98 07 00
	00 00		 mov	 DWORD PTR $T7[ebp], 7
  0006d	c7 45 94 06 00
	00 00		 mov	 DWORD PTR $T6[ebp], 6
  00074	c7 45 90 05 00
	00 00		 mov	 DWORD PTR $T5[ebp], 5
  0007b	c7 45 8c 04 00
	00 00		 mov	 DWORD PTR $T4[ebp], 4
  00082	c7 45 88 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  00089	c7 45 84 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1
  00090	8d 45 bc	 lea	 eax, DWORD PTR $T16[ebp]
  00093	50		 push	 eax
  00094	8d 4d b8	 lea	 ecx, DWORD PTR $T15[ebp]
  00097	51		 push	 ecx
  00098	8d 55 b4	 lea	 edx, DWORD PTR $T14[ebp]
  0009b	52		 push	 edx
  0009c	8d 45 b0	 lea	 eax, DWORD PTR $T13[ebp]
  0009f	50		 push	 eax
  000a0	8d 4d ac	 lea	 ecx, DWORD PTR $T12[ebp]
  000a3	51		 push	 ecx
  000a4	8d 55 a8	 lea	 edx, DWORD PTR $T11[ebp]
  000a7	52		 push	 edx
  000a8	8d 45 a4	 lea	 eax, DWORD PTR $T10[ebp]
  000ab	50		 push	 eax
  000ac	8d 4d a0	 lea	 ecx, DWORD PTR $T9[ebp]
  000af	51		 push	 ecx
  000b0	8d 55 9c	 lea	 edx, DWORD PTR $T8[ebp]
  000b3	52		 push	 edx
  000b4	8d 45 98	 lea	 eax, DWORD PTR $T7[ebp]
  000b7	50		 push	 eax
  000b8	8d 4d 94	 lea	 ecx, DWORD PTR $T6[ebp]
  000bb	51		 push	 ecx
  000bc	8d 55 90	 lea	 edx, DWORD PTR $T5[ebp]
  000bf	52		 push	 edx
  000c0	8d 45 8c	 lea	 eax, DWORD PTR $T4[ebp]
  000c3	50		 push	 eax
  000c4	8d 4d 88	 lea	 ecx, DWORD PTR $T3[ebp]
  000c7	51		 push	 ecx
  000c8	8d 55 84	 lea	 edx, DWORD PTR $T2[ebp]
  000cb	52		 push	 edx
  000cc	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
  000d8	83 c4 40	 add	 esp, 64			; 00000040H
  000db	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000e0	8b f0		 mov	 esi, eax
  000e2	8d 7d c0	 lea	 edi, DWORD PTR $T17[ebp]
  000e5	f3 a5		 rep movsd
  000e7	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  000ec	8d 75 c0	 lea	 esi, DWORD PTR $T17[ebp]
  000ef	bf 00 00 00 00	 mov	 edi, OFFSET ?CspTransferList@@3V?$array@W4CspTransfer@@$0P@@std@@B
  000f4	f3 a5		 rep movsd
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
??__ECspTransferList@@YAXXZ ENDP			; `dynamic initializer for 'CspTransferList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z
_TEXT	SEGMENT
$T1 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
_<args_14>$ = 68					; size = 4
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z PROC ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c0	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c4	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 c8	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d cc	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d0	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d4	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d d8	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 dc	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e0	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e4	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 e8	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 ec	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f0	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f4	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	8b 4d 44	 mov	 ecx, DWORD PTR _<args_14>$[ebp]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	89 55 f8	 mov	 DWORD PTR $T1[ebp+56], edx
  00099	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0009e	8d 75 c0	 lea	 esi, DWORD PTR $T1[ebp]
  000a1	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  000a4	f3 a5		 rep movsd
  000a6	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
??$make_array@W4CspTransfer@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspTransfer@@$0P@@std@@$$QAW4CspTransfer@@00000000000000@Z ENDP ; make_array<enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer,enum CspTransfer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??__ECspMatrixList@@YAXXZ
text$di	SEGMENT
$T1 = -172						; size = 56
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
$T6 = -100						; size = 4
$T7 = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
$T13 = -72						; size = 4
$T14 = -68						; size = 4
$T15 = -64						; size = 4
$T16 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
??__ECspMatrixList@@YAXXZ PROC				; `dynamic initializer for 'CspMatrixList'', COMDAT

; 1080 : );

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00011	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1065 : static const auto CspMatrixList = make_array<CspMatrix>(

  00027	c7 45 c0 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp], 15	; 0000000fH
  0002e	c7 45 bc 0e 00
	00 00		 mov	 DWORD PTR $T14[ebp], 14	; 0000000eH
  00035	c7 45 b8 0d 00
	00 00		 mov	 DWORD PTR $T13[ebp], 13	; 0000000dH
  0003c	c7 45 b4 0c 00
	00 00		 mov	 DWORD PTR $T12[ebp], 12	; 0000000cH
  00043	c7 45 b0 0a 00
	00 00		 mov	 DWORD PTR $T11[ebp], 10	; 0000000aH
  0004a	c7 45 ac 09 00
	00 00		 mov	 DWORD PTR $T10[ebp], 9
  00051	c7 45 a8 08 00
	00 00		 mov	 DWORD PTR $T9[ebp], 8
  00058	c7 45 a4 07 00
	00 00		 mov	 DWORD PTR $T8[ebp], 7
  0005f	c7 45 a0 06 00
	00 00		 mov	 DWORD PTR $T7[ebp], 6
  00066	c7 45 9c 05 00
	00 00		 mov	 DWORD PTR $T6[ebp], 5
  0006d	c7 45 98 04 00
	00 00		 mov	 DWORD PTR $T5[ebp], 4
  00074	c7 45 94 02 00
	00 00		 mov	 DWORD PTR $T4[ebp], 2
  0007b	c7 45 90 01 00
	00 00		 mov	 DWORD PTR $T3[ebp], 1
  00082	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00089	8d 45 c0	 lea	 eax, DWORD PTR $T15[ebp]
  0008c	50		 push	 eax
  0008d	8d 4d bc	 lea	 ecx, DWORD PTR $T14[ebp]
  00090	51		 push	 ecx
  00091	8d 55 b8	 lea	 edx, DWORD PTR $T13[ebp]
  00094	52		 push	 edx
  00095	8d 45 b4	 lea	 eax, DWORD PTR $T12[ebp]
  00098	50		 push	 eax
  00099	8d 4d b0	 lea	 ecx, DWORD PTR $T11[ebp]
  0009c	51		 push	 ecx
  0009d	8d 55 ac	 lea	 edx, DWORD PTR $T10[ebp]
  000a0	52		 push	 edx
  000a1	8d 45 a8	 lea	 eax, DWORD PTR $T9[ebp]
  000a4	50		 push	 eax
  000a5	8d 4d a4	 lea	 ecx, DWORD PTR $T8[ebp]
  000a8	51		 push	 ecx
  000a9	8d 55 a0	 lea	 edx, DWORD PTR $T7[ebp]
  000ac	52		 push	 edx
  000ad	8d 45 9c	 lea	 eax, DWORD PTR $T6[ebp]
  000b0	50		 push	 eax
  000b1	8d 4d 98	 lea	 ecx, DWORD PTR $T5[ebp]
  000b4	51		 push	 ecx
  000b5	8d 55 94	 lea	 edx, DWORD PTR $T4[ebp]
  000b8	52		 push	 edx
  000b9	8d 45 90	 lea	 eax, DWORD PTR $T3[ebp]
  000bc	50		 push	 eax
  000bd	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000c0	51		 push	 ecx
  000c1	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
  000cd	83 c4 3c	 add	 esp, 60			; 0000003cH
  000d0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000d5	8b f0		 mov	 esi, eax
  000d7	8d 7d c4	 lea	 edi, DWORD PTR $T16[ebp]
  000da	f3 a5		 rep movsd
  000dc	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000e1	8d 75 c4	 lea	 esi, DWORD PTR $T16[ebp]
  000e4	bf 00 00 00 00	 mov	 edi, OFFSET ?CspMatrixList@@3V?$array@W4CspMatrix@@$0O@@std@@B
  000e9	f3 a5		 rep movsd
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  000fd	3b ec		 cmp	 ebp, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
??__ECspMatrixList@@YAXXZ ENDP				; `dynamic initializer for 'CspMatrixList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.h
;	COMDAT ??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z
_TEXT	SEGMENT
$T1 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
$T2 = 8							; size = 4
_<args_0>$ = 12						; size = 4
_<args_1>$ = 16						; size = 4
_<args_2>$ = 20						; size = 4
_<args_3>$ = 24						; size = 4
_<args_4>$ = 28						; size = 4
_<args_5>$ = 32						; size = 4
_<args_6>$ = 36						; size = 4
_<args_7>$ = 40						; size = 4
_<args_8>$ = 44						; size = 4
_<args_9>$ = 48						; size = 4
_<args_10>$ = 52					; size = 4
_<args_11>$ = 56					; size = 4
_<args_12>$ = 60					; size = 4
_<args_13>$ = 64					; size = 4
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z PROC ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>, COMDAT

; 129  : constexpr std::array<T, sizeof...(Args)> make_array(Args&&... args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 130  :     return std::array<T, sizeof...(Args)>{ static_cast<Args&&>(args)... };

  00021	8b 45 0c	 mov	 eax, DWORD PTR _<args_0>$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d c4	 mov	 DWORD PTR $T1[ebp], ecx
  00029	8b 55 10	 mov	 edx, DWORD PTR _<args_1>$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	89 45 c8	 mov	 DWORD PTR $T1[ebp+4], eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _<args_2>$[ebp]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	89 55 cc	 mov	 DWORD PTR $T1[ebp+8], edx
  00039	8b 45 18	 mov	 eax, DWORD PTR _<args_3>$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	89 4d d0	 mov	 DWORD PTR $T1[ebp+12], ecx
  00041	8b 55 1c	 mov	 edx, DWORD PTR _<args_4>$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	89 45 d4	 mov	 DWORD PTR $T1[ebp+16], eax
  00049	8b 4d 20	 mov	 ecx, DWORD PTR _<args_5>$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	89 55 d8	 mov	 DWORD PTR $T1[ebp+20], edx
  00051	8b 45 24	 mov	 eax, DWORD PTR _<args_6>$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d dc	 mov	 DWORD PTR $T1[ebp+24], ecx
  00059	8b 55 28	 mov	 edx, DWORD PTR _<args_7>$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	89 45 e0	 mov	 DWORD PTR $T1[ebp+28], eax
  00061	8b 4d 2c	 mov	 ecx, DWORD PTR _<args_8>$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	89 55 e4	 mov	 DWORD PTR $T1[ebp+32], edx
  00069	8b 45 30	 mov	 eax, DWORD PTR _<args_9>$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	89 4d e8	 mov	 DWORD PTR $T1[ebp+36], ecx
  00071	8b 55 34	 mov	 edx, DWORD PTR _<args_10>$[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 ec	 mov	 DWORD PTR $T1[ebp+40], eax
  00079	8b 4d 38	 mov	 ecx, DWORD PTR _<args_11>$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	89 55 f0	 mov	 DWORD PTR $T1[ebp+44], edx
  00081	8b 45 3c	 mov	 eax, DWORD PTR _<args_12>$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	89 4d f4	 mov	 DWORD PTR $T1[ebp+48], ecx
  00089	8b 55 40	 mov	 edx, DWORD PTR _<args_13>$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	89 45 f8	 mov	 DWORD PTR $T1[ebp+52], eax
  00091	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00096	8d 75 c4	 lea	 esi, DWORD PTR $T1[ebp]
  00099	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  0009c	f3 a5		 rep movsd
  0009e	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]

; 131  : }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a6	33 cd		 xor	 ecx, ebp
  000a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
??$make_array@W4CspMatrix@@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@W41@@@YA?AV?$array@W4CspMatrix@@$0O@@std@@$$QAW4CspMatrix@@0000000000000@Z ENDP ; make_array<enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix,enum CspMatrix>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T1 = -16						; size = 4
_i$2 = -12						; size = 4
_nNextSize$3 = -8					; size = 4
_qtr$4 = -4						; size = 4
_ptr$ = 8						; size = 4
_nSize$ = 12						; size = 4
_nMinSize$ = 16						; size = 4
?malloc_degeneracy@@YAIPAPAXII@Z PROC			; malloc_degeneracy

; 660  : size_t malloc_degeneracy(void **ptr, size_t nSize, size_t nMinSize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 661  :     *ptr = nullptr;

  00018	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 662  :     nMinSize = (std::max<size_t>)(nMinSize, 1);

  00021	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00028	8d 4d f0	 lea	 ecx, DWORD PTR $T1[ebp]
  0002b	51		 push	 ecx
  0002c	8d 55 10	 lea	 edx, DWORD PTR _nMinSize$[ebp]
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  00035	83 c4 08	 add	 esp, 8
  00038	8b 00		 mov	 eax, DWORD PTR [eax]
  0003a	89 45 10	 mov	 DWORD PTR _nMinSize$[ebp], eax

; 663  :     nSize = (std::max<size_t>)(nSize, nMinSize);

  0003d	8d 4d 10	 lea	 ecx, DWORD PTR _nMinSize$[ebp]
  00040	51		 push	 ecx
  00041	8d 55 0c	 lea	 edx, DWORD PTR _nSize$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$max@I@std@@YAABIABI0@Z ; std::max<unsigned int>
  0004a	83 c4 08	 add	 esp, 8
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	89 45 0c	 mov	 DWORD PTR _nSize$[ebp], eax
$LN2@malloc_deg:

; 664  :     //確保できなかったら、サイズを小さくして再度確保を試みる (最終的に1MBも確保できなかったら諦める)
; 665  :     while (nSize >= nMinSize) {

  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00055	3b 4d 10	 cmp	 ecx, DWORD PTR _nMinSize$[ebp]
  00058	72 5b		 jb	 SHORT $LN3@malloc_deg

; 666  :         void *qtr = malloc(nSize);

  0005a	8b f4		 mov	 esi, esp
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  0005f	52		 push	 edx
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00066	83 c4 04	 add	 esp, 4
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	89 45 fc	 mov	 DWORD PTR _qtr$4[ebp], eax

; 667  :         if (qtr != nullptr) {

  00073	83 7d fc 00	 cmp	 DWORD PTR _qtr$4[ebp], 0
  00077	74 0d		 je	 SHORT $LN7@malloc_deg

; 668  :             *ptr = qtr;

  00079	8b 45 08	 mov	 eax, DWORD PTR _ptr$[ebp]
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _qtr$4[ebp]
  0007f	89 08		 mov	 DWORD PTR [eax], ecx

; 669  :             return nSize;

  00081	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00084	eb 31		 jmp	 SHORT $LN1@malloc_deg
$LN7@malloc_deg:

; 670  :         }
; 671  :         size_t nNextSize = 0;

  00086	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nNextSize$3[ebp], 0

; 672  :         for (size_t i = nMinSize; i < nSize; i<<=1) {

  0008d	8b 55 10	 mov	 edx, DWORD PTR _nMinSize$[ebp]
  00090	89 55 f4	 mov	 DWORD PTR _i$2[ebp], edx
  00093	eb 08		 jmp	 SHORT $LN6@malloc_deg
$LN4@malloc_deg:
  00095	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00098	d1 e0		 shl	 eax, 1
  0009a	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
$LN6@malloc_deg:
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR _i$2[ebp]
  000a0	3b 4d 0c	 cmp	 ecx, DWORD PTR _nSize$[ebp]
  000a3	73 08		 jae	 SHORT $LN5@malloc_deg

; 673  :             nNextSize = i;

  000a5	8b 55 f4	 mov	 edx, DWORD PTR _i$2[ebp]
  000a8	89 55 f8	 mov	 DWORD PTR _nNextSize$3[ebp], edx

; 674  :         }

  000ab	eb e8		 jmp	 SHORT $LN4@malloc_deg
$LN5@malloc_deg:

; 675  :         nSize = nNextSize;

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _nNextSize$3[ebp]
  000b0	89 45 0c	 mov	 DWORD PTR _nSize$[ebp], eax

; 676  :     }

  000b3	eb 9d		 jmp	 SHORT $LN2@malloc_deg
$LN3@malloc_deg:

; 677  :     return 0;

  000b5	33 c0		 xor	 eax, eax
$LN1@malloc_deg:

; 678  : }

  000b7	5e		 pop	 esi
  000b8	83 c4 10	 add	 esp, 16			; 00000010H
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?malloc_degeneracy@@YAIPAPAXII@Z ENDP			; malloc_degeneracy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
?check_OS_Win8orLater@@YAHXZ PROC			; check_OS_Win8orLater

; 710  : BOOL check_OS_Win8orLater() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 711  : #if defined(_WIN32) || defined(_WIN64)
; 712  : #if (_MSC_VER >= 1800)
; 713  :     return IsWindows8OrGreater();

  00003	e8 00 00 00 00	 call	 ?IsWindows8OrGreater@@YA_NXZ ; IsWindows8OrGreater
  00008	0f b6 c0	 movzx	 eax, al

; 714  : #else
; 715  :     OSVERSIONINFO osvi = { 0 };
; 716  :     osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
; 717  :     GetVersionEx(&osvi);
; 718  :     return ((osvi.dwPlatformId == VER_PLATFORM_WIN32_NT) && ((osvi.dwMajorVersion == 6 && osvi.dwMinorVersion >= 2) || osvi.dwMajorVersion > 6));
; 719  : #endif //(_MSC_VER >= 1800)
; 720  : #else //#if defined(_WIN32) || defined(_WIN64)
; 721  :     return FALSE;
; 722  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 723  : }

  0000b	3b ec		 cmp	 ebp, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?check_OS_Win8orLater@@YAHXZ ENDP			; check_OS_Win8orLater
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv244 = -2760						; size = 4
tv252 = -2756						; size = 4
tv242 = -2752						; size = 4
tv251 = -2748						; size = 4
tv217 = -2744						; size = 4
tv200 = -2740						; size = 4
tv240 = -2736						; size = 4
tv65 = -2732						; size = 4
tv238 = -2728						; size = 4
tv83 = -2724						; size = 4
tv129 = -2720						; size = 4
$T2 = -2716						; size = 4
$T3 = -2712						; size = 28
$T4 = -2684						; size = 28
_write_rw_speed$5 = -2652				; size = 4
_cpuinfo$6 = -2640					; size = 112
$T7 = -2524						; size = 28
$T8 = -2496						; size = 28
_osversionstr$ = -2464					; size = 28
_osversioninfo$ = -2428					; size = 284
_totalRamsize$ = -2140					; size = 8
_UsedRamSize$ = -2128					; size = 8
_gpu_info$ = -2112					; size = 1024
_cpu_info$ = -1080					; size = 1024
_buf$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_add_ram_info$ = 12					; size = 1
?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; getEnviromentInfo

; 874  : tstring getEnviromentInfo(bool add_ram_info) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 0a 00
	00		 sub	 esp, 2748		; 00000abcH
  00017	53		 push	 ebx
  00018	57		 push	 edi
  00019	8d bd 38 f5 ff
	ff		 lea	 edi, DWORD PTR [ebp-2760]
  0001f	b9 af 02 00 00	 mov	 ecx, 687		; 000002afH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 64 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 875  :     tstring buf;

  00049	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00051	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 876  : 
; 877  :     TCHAR cpu_info[1024] = { 0 };

  00058	68 00 04 00 00	 push	 1024			; 00000400H
  0005d	6a 00		 push	 0
  0005f	8d 85 c8 fb ff
	ff		 lea	 eax, DWORD PTR _cpu_info$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 878  :     getCPUInfo(cpu_info, _countof(cpu_info));

  0006e	6a 00		 push	 0
  00070	68 00 04 00 00	 push	 1024			; 00000400H
  00075	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR _cpu_info$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?getCPUInfo@@YAHPADIPAVMFXVideoSession@@@Z ; getCPUInfo
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 879  : 
; 880  :     TCHAR gpu_info[1024] = { 0 };

  00084	68 00 04 00 00	 push	 1024			; 00000400H
  00089	6a 00		 push	 0
  0008b	8d 95 c0 f7 ff
	ff		 lea	 edx, DWORD PTR _gpu_info$[ebp]
  00091	52		 push	 edx
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 881  :     getGPUInfo(GPU_VENDOR, gpu_info, _countof(gpu_info));

  0009a	6a 00		 push	 0
  0009c	68 00 04 00 00	 push	 1024			; 00000400H
  000a1	8d 85 c0 f7 ff
	ff		 lea	 eax, DWORD PTR _gpu_info$[ebp]
  000a7	50		 push	 eax
  000a8	68 00 00 00 00	 push	 OFFSET $SG119062
  000ad	e8 00 00 00 00	 call	 ?getGPUInfo@@YAHPBDPADI_N@Z ; getGPUInfo
  000b2	83 c4 10	 add	 esp, 16			; 00000010H

; 882  : 
; 883  :     uint64_t UsedRamSize = 0;

  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	66 0f 13 85 b0
	f7 ff ff	 movlpd	 QWORD PTR _UsedRamSize$[ebp], xmm0

; 884  :     uint64_t totalRamsize = getPhysicalRamSize(&UsedRamSize);

  000c0	8d 8d b0 f7 ff
	ff		 lea	 ecx, DWORD PTR _UsedRamSize$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?getPhysicalRamSize@@YA_KPA_K@Z ; getPhysicalRamSize
  000cc	83 c4 04	 add	 esp, 4
  000cf	89 85 a4 f7 ff
	ff		 mov	 DWORD PTR _totalRamsize$[ebp], eax
  000d5	89 95 a8 f7 ff
	ff		 mov	 DWORD PTR _totalRamsize$[ebp+4], edx

; 885  : 
; 886  : 
; 887  :     buf += _T("[DEBUG]--->Environment Info\n");

  000db	68 00 00 00 00	 push	 OFFSET $SG119063
  000e0	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  000e3	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 888  : #if defined(_WIN32) || defined(_WIN64)
; 889  :     OSVERSIONINFOEXW osversioninfo = { 0 };

  000e8	68 1c 01 00 00	 push	 284			; 0000011cH
  000ed	6a 00		 push	 0
  000ef	8d 95 84 f6 ff
	ff		 lea	 edx, DWORD PTR _osversioninfo$[ebp]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 _memset
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 890  :     tstring osversionstr = getOSVersion(&osversioninfo);

  000fe	8d 85 84 f6 ff
	ff		 lea	 eax, DWORD PTR _osversioninfo$[ebp]
  00104	50		 push	 eax
  00105	8d 8d 60 f6 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$[ebp]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z ; getOSVersion
  00111	83 c4 08	 add	 esp, 8
  00114	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 891  :     buf += strsprintf(_T("OS : %s %s (%d)\n"), osversionstr.c_str(), rgy_is_64bit_os() ? _T("x64") : _T("x86"), osversioninfo.dwBuildNumber);

  00118	e8 00 00 00 00	 call	 ?rgy_is_64bit_os@@YAHXZ	; rgy_is_64bit_os
  0011d	85 c0		 test	 eax, eax
  0011f	74 0c		 je	 SHORT $LN4@getEnvirom
  00121	c7 85 60 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], OFFSET $SG119064
  0012b	eb 0a		 jmp	 SHORT $LN5@getEnvirom
$LN4@getEnvirom:
  0012d	c7 85 60 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], OFFSET $SG119065
$LN5@getEnvirom:
  00137	8b 95 90 f6 ff
	ff		 mov	 edx, DWORD PTR _osversioninfo$[ebp+12]
  0013d	52		 push	 edx
  0013e	8b 85 60 f5 ff
	ff		 mov	 eax, DWORD PTR tv129[ebp]
  00144	50		 push	 eax
  00145	8d 8d 60 f6 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$[ebp]
  0014b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00150	50		 push	 eax
  00151	68 00 00 00 00	 push	 OFFSET $SG119066
  00156	8d 8d 40 f6 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  00162	83 c4 14	 add	 esp, 20			; 00000014H
  00165	89 85 5c f5 ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  0016b	8b 95 5c f5 ff
	ff		 mov	 edx, DWORD PTR tv83[ebp]
  00171	89 95 58 f5 ff
	ff		 mov	 DWORD PTR tv238[ebp], edx
  00177	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0017b	8b 85 58 f5 ff
	ff		 mov	 eax, DWORD PTR tv238[ebp]
  00181	50		 push	 eax
  00182	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  00185	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  0018a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0018e	8d 8d 40 f6 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00194	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 892  : #else
; 893  :     buf += strsprintf(_T("OS : %s %s\n"), getOSVersion().c_str(), rgy_is_64bit_os() ? _T("x64") : _T("x86"));
; 894  : #endif
; 895  :     buf += strsprintf(_T("CPU: %s\n"), cpu_info);

  00199	8d 8d c8 fb ff
	ff		 lea	 ecx, DWORD PTR _cpu_info$[ebp]
  0019f	51		 push	 ecx
  001a0	68 00 00 00 00	 push	 OFFSET $SG119067
  001a5	8d 95 24 f6 ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  001ab	52		 push	 edx
  001ac	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b4	89 85 54 f5 ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  001ba	8b 85 54 f5 ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  001c0	89 85 50 f5 ff
	ff		 mov	 DWORD PTR tv240[ebp], eax
  001c6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001ca	8b 8d 50 f5 ff
	ff		 mov	 ecx, DWORD PTR tv240[ebp]
  001d0	51		 push	 ecx
  001d1	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  001d4	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  001d9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001dd	8d 8d 24 f6 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001e3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 896  :     if (add_ram_info) {

  001e8	0f b6 55 0c	 movzx	 edx, BYTE PTR _add_ram_info$[ebp]
  001ec	85 d2		 test	 edx, edx
  001ee	0f 84 0c 01 00
	00		 je	 $LN2@getEnvirom

; 897  :         cpu_info_t cpuinfo;
; 898  :         get_cpu_info(&cpuinfo);

  001f4	8d 85 b0 f5 ff
	ff		 lea	 eax, DWORD PTR _cpuinfo$6[ebp]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?get_cpu_info@@YA_NPAUcpu_info_t@@@Z ; get_cpu_info
  00200	83 c4 04	 add	 esp, 4

; 899  :         auto write_rw_speed = [&](const TCHAR *type, int test_size) {
; 900  :             if (test_size) {
; 901  :                 auto ram_read_speed_list = ram_speed_mt_list(test_size, RAM_SPEED_MODE_READ);
; 902  :                 auto ram_write_speed_list = ram_speed_mt_list(test_size, RAM_SPEED_MODE_WRITE);
; 903  :                 double max_read  = *std::max_element(ram_read_speed_list.begin(), ram_read_speed_list.end())  * (1.0 / 1024.0);
; 904  :                 double max_write = *std::max_element(ram_write_speed_list.begin(), ram_write_speed_list.end()) * (1.0 / 1024.0);
; 905  :                 buf += strsprintf(_T("%s: Read:%7.2fGB/s, Write:%7.2fGB/s\n"), type, max_read, max_write);
; 906  :             }
; 907  :             return test_size > 0;
; 908  :         };

  00203	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  00206	51		 push	 ecx
  00207	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR _write_rw_speed$5[ebp]
  0020d	e8 00 00 00 00	 call	 ??0<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QAE@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>

; 909  :         add_ram_info = false;

  00212	c6 45 0c 00	 mov	 BYTE PTR _add_ram_info$[ebp], 0

; 910  :         add_ram_info |= write_rw_speed(_T("L1 "), cpuinfo.caches[0].size / 1024 / 8);

  00216	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _add_ram_info$[ebp]
  0021a	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  0021f	6b c2 00	 imul	 eax, edx, 0
  00222	8b 8c 05 d4 f5
	ff ff		 mov	 ecx, DWORD PTR _cpuinfo$6[ebp+eax+36]
  00229	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0022c	c1 e9 03	 shr	 ecx, 3
  0022f	51		 push	 ecx
  00230	68 00 00 00 00	 push	 OFFSET $SG119069
  00235	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR _write_rw_speed$5[ebp]
  0023b	e8 00 00 00 00	 call	 ??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator()
  00240	0f b6 d0	 movzx	 edx, al
  00243	0b da		 or	 ebx, edx
  00245	88 5d 0c	 mov	 BYTE PTR _add_ram_info$[ebp], bl

; 911  :         add_ram_info |= write_rw_speed(_T("L2 "), cpuinfo.caches[1].size / 1024 / 2);

  00248	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _add_ram_info$[ebp]
  0024c	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00251	c1 e0 00	 shl	 eax, 0
  00254	8b 8c 05 d4 f5
	ff ff		 mov	 ecx, DWORD PTR _cpuinfo$6[ebp+eax+36]
  0025b	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0025e	d1 e9		 shr	 ecx, 1
  00260	51		 push	 ecx
  00261	68 00 00 00 00	 push	 OFFSET $SG119070
  00266	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR _write_rw_speed$5[ebp]
  0026c	e8 00 00 00 00	 call	 ??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator()
  00271	0f b6 d0	 movzx	 edx, al
  00274	0b da		 or	 ebx, edx
  00276	88 5d 0c	 mov	 BYTE PTR _add_ram_info$[ebp], bl

; 912  :         add_ram_info |= write_rw_speed(_T("L3 "), cpuinfo.caches[2].size / 1024 / 2);

  00279	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _add_ram_info$[ebp]
  0027d	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00282	d1 e0		 shl	 eax, 1
  00284	8b 8c 05 d4 f5
	ff ff		 mov	 ecx, DWORD PTR _cpuinfo$6[ebp+eax+36]
  0028b	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0028e	d1 e9		 shr	 ecx, 1
  00290	51		 push	 ecx
  00291	68 00 00 00 00	 push	 OFFSET $SG119071
  00296	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR _write_rw_speed$5[ebp]
  0029c	e8 00 00 00 00	 call	 ??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator()
  002a1	0f b6 d0	 movzx	 edx, al
  002a4	0b da		 or	 ebx, edx
  002a6	88 5d 0c	 mov	 BYTE PTR _add_ram_info$[ebp], bl

; 913  :         add_ram_info |= write_rw_speed(_T("RAM"), (cpuinfo.max_cache_level) ? cpuinfo.caches[cpuinfo.max_cache_level-1].size / 1024 * 8 : 96 * 1024);

  002a9	83 bd bc f5 ff
	ff 00		 cmp	 DWORD PTR _cpuinfo$6[ebp+12], 0
  002b0	74 21		 je	 SHORT $LN6@getEnvirom
  002b2	8b 85 bc f5 ff
	ff		 mov	 eax, DWORD PTR _cpuinfo$6[ebp+12]
  002b8	83 e8 01	 sub	 eax, 1
  002bb	6b c8 18	 imul	 ecx, eax, 24
  002be	8b 94 0d d4 f5
	ff ff		 mov	 edx, DWORD PTR _cpuinfo$6[ebp+ecx+36]
  002c5	c1 ea 0a	 shr	 edx, 10			; 0000000aH
  002c8	c1 e2 03	 shl	 edx, 3
  002cb	89 95 4c f5 ff
	ff		 mov	 DWORD PTR tv200[ebp], edx
  002d1	eb 0a		 jmp	 SHORT $LN7@getEnvirom
$LN6@getEnvirom:
  002d3	c7 85 4c f5 ff
	ff 00 80 01 00	 mov	 DWORD PTR tv200[ebp], 98304 ; 00018000H
$LN7@getEnvirom:
  002dd	0f b6 5d 0c	 movzx	 ebx, BYTE PTR _add_ram_info$[ebp]
  002e1	8b 85 4c f5 ff
	ff		 mov	 eax, DWORD PTR tv200[ebp]
  002e7	50		 push	 eax
  002e8	68 00 00 00 00	 push	 OFFSET $SG119072
  002ed	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR _write_rw_speed$5[ebp]
  002f3	e8 00 00 00 00	 call	 ??R<lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>@@QBE_NPBDH@Z ; <lambda_03f6ab1952c8fe7fc7b4cfb7e060a3ef>::operator()
  002f8	0f b6 c8	 movzx	 ecx, al
  002fb	0b d9		 or	 ebx, ecx
  002fd	88 5d 0c	 mov	 BYTE PTR _add_ram_info$[ebp], bl
$LN2@getEnvirom:

; 914  :     }
; 915  :     buf += strsprintf(_T("%s Used %d MB, Total %d MB\n"), (add_ram_info) ? _T("    ") : _T("RAM:"), (uint32_t)(UsedRamSize >> 20), (uint32_t)(totalRamsize >> 20));

  00300	0f b6 55 0c	 movzx	 edx, BYTE PTR _add_ram_info$[ebp]
  00304	85 d2		 test	 edx, edx
  00306	74 0c		 je	 SHORT $LN8@getEnvirom
  00308	c7 85 48 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], OFFSET $SG119073
  00312	eb 0a		 jmp	 SHORT $LN9@getEnvirom
$LN8@getEnvirom:
  00314	c7 85 48 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv217[ebp], OFFSET $SG119074
$LN9@getEnvirom:
  0031e	8b 85 a4 f7 ff
	ff		 mov	 eax, DWORD PTR _totalRamsize$[ebp]
  00324	8b 95 a8 f7 ff
	ff		 mov	 edx, DWORD PTR _totalRamsize$[ebp+4]
  0032a	b1 14		 mov	 cl, 20			; 00000014H
  0032c	e8 00 00 00 00	 call	 __aullshr
  00331	50		 push	 eax
  00332	8b 85 b0 f7 ff
	ff		 mov	 eax, DWORD PTR _UsedRamSize$[ebp]
  00338	8b 95 b4 f7 ff
	ff		 mov	 edx, DWORD PTR _UsedRamSize$[ebp+4]
  0033e	b1 14		 mov	 cl, 20			; 00000014H
  00340	e8 00 00 00 00	 call	 __aullshr
  00345	50		 push	 eax
  00346	8b 85 48 f5 ff
	ff		 mov	 eax, DWORD PTR tv217[ebp]
  0034c	50		 push	 eax
  0034d	68 00 00 00 00	 push	 OFFSET $SG119075
  00352	8d 8d 84 f5 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00358	51		 push	 ecx
  00359	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  0035e	83 c4 14	 add	 esp, 20			; 00000014H
  00361	89 85 44 f5 ff
	ff		 mov	 DWORD PTR tv251[ebp], eax
  00367	8b 95 44 f5 ff
	ff		 mov	 edx, DWORD PTR tv251[ebp]
  0036d	89 95 40 f5 ff
	ff		 mov	 DWORD PTR tv242[ebp], edx
  00373	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00377	8b 85 40 f5 ff
	ff		 mov	 eax, DWORD PTR tv242[ebp]
  0037d	50		 push	 eax
  0037e	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  00381	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  00386	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0038a	8d 8d 84 f5 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00390	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 916  :     buf += strsprintf(_T("GPU: %s\n"), gpu_info);

  00395	8d 8d c0 f7 ff
	ff		 lea	 ecx, DWORD PTR _gpu_info$[ebp]
  0039b	51		 push	 ecx
  0039c	68 00 00 00 00	 push	 OFFSET $SG119076
  003a1	8d 95 68 f5 ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  003a7	52		 push	 edx
  003a8	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  003ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  003b0	89 85 3c f5 ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
  003b6	8b 85 3c f5 ff
	ff		 mov	 eax, DWORD PTR tv252[ebp]
  003bc	89 85 38 f5 ff
	ff		 mov	 DWORD PTR tv244[ebp], eax
  003c2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  003c6	8b 8d 38 f5 ff
	ff		 mov	 ecx, DWORD PTR tv244[ebp]
  003cc	51		 push	 ecx
  003cd	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  003d0	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
  003d5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  003d9	8d 8d 68 f5 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  003df	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 917  :     return buf;

  003e4	8d 55 d0	 lea	 edx, DWORD PTR _buf$[ebp]
  003e7	52		 push	 edx
  003e8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003eb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f0	8b 85 64 f5 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  003f6	83 c8 01	 or	 eax, 1
  003f9	89 85 64 f5 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003ff	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00403	8d 8d 60 f6 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$[ebp]
  00409	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0040e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00412	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  00415	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0041a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 918  : }

  0041d	52		 push	 edx
  0041e	8b cd		 mov	 ecx, ebp
  00420	50		 push	 eax
  00421	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@getEnvirom
  00427	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0042c	58		 pop	 eax
  0042d	5a		 pop	 edx
  0042e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00431	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00438	59		 pop	 ecx
  00439	5f		 pop	 edi
  0043a	5b		 pop	 ebx
  0043b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043e	33 cd		 xor	 ecx, ebp
  00440	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00445	81 c4 c8 0a 00
	00		 add	 esp, 2760		; 00000ac8H
  0044b	3b ec		 cmp	 ebp, esp
  0044d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00452	8b e5		 mov	 esp, ebp
  00454	5d		 pop	 ebp
  00455	c3		 ret	 0
  00456	66 90		 npad	 2
$LN28@getEnvirom:
  00458	08 00 00 00	 DD	 8
  0045c	00 00 00 00	 DD	 $LN27@getEnvirom
$LN27@getEnvirom:
  00460	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00464	1c 00 00 00	 DD	 28			; 0000001cH
  00468	00 00 00 00	 DD	 $LN18@getEnvirom
  0046c	c8 fb ff ff	 DD	 -1080			; fffffbc8H
  00470	00 04 00 00	 DD	 1024			; 00000400H
  00474	00 00 00 00	 DD	 $LN19@getEnvirom
  00478	c0 f7 ff ff	 DD	 -2112			; fffff7c0H
  0047c	00 04 00 00	 DD	 1024			; 00000400H
  00480	00 00 00 00	 DD	 $LN20@getEnvirom
  00484	b0 f7 ff ff	 DD	 -2128			; fffff7b0H
  00488	08 00 00 00	 DD	 8
  0048c	00 00 00 00	 DD	 $LN21@getEnvirom
  00490	84 f6 ff ff	 DD	 -2428			; fffff684H
  00494	1c 01 00 00	 DD	 284			; 0000011cH
  00498	00 00 00 00	 DD	 $LN22@getEnvirom
  0049c	60 f6 ff ff	 DD	 -2464			; fffff660H
  004a0	1c 00 00 00	 DD	 28			; 0000001cH
  004a4	00 00 00 00	 DD	 $LN23@getEnvirom
  004a8	b0 f5 ff ff	 DD	 -2640			; fffff5b0H
  004ac	70 00 00 00	 DD	 112			; 00000070H
  004b0	00 00 00 00	 DD	 $LN24@getEnvirom
  004b4	a4 f5 ff ff	 DD	 -2652			; fffff5a4H
  004b8	04 00 00 00	 DD	 4
  004bc	00 00 00 00	 DD	 $LN25@getEnvirom
$LN25@getEnvirom:
  004c0	77		 DB	 119			; 00000077H
  004c1	72		 DB	 114			; 00000072H
  004c2	69		 DB	 105			; 00000069H
  004c3	74		 DB	 116			; 00000074H
  004c4	65		 DB	 101			; 00000065H
  004c5	5f		 DB	 95			; 0000005fH
  004c6	72		 DB	 114			; 00000072H
  004c7	77		 DB	 119			; 00000077H
  004c8	5f		 DB	 95			; 0000005fH
  004c9	73		 DB	 115			; 00000073H
  004ca	70		 DB	 112			; 00000070H
  004cb	65		 DB	 101			; 00000065H
  004cc	65		 DB	 101			; 00000065H
  004cd	64		 DB	 100			; 00000064H
  004ce	00		 DB	 0
$LN24@getEnvirom:
  004cf	63		 DB	 99			; 00000063H
  004d0	70		 DB	 112			; 00000070H
  004d1	75		 DB	 117			; 00000075H
  004d2	69		 DB	 105			; 00000069H
  004d3	6e		 DB	 110			; 0000006eH
  004d4	66		 DB	 102			; 00000066H
  004d5	6f		 DB	 111			; 0000006fH
  004d6	00		 DB	 0
$LN23@getEnvirom:
  004d7	6f		 DB	 111			; 0000006fH
  004d8	73		 DB	 115			; 00000073H
  004d9	76		 DB	 118			; 00000076H
  004da	65		 DB	 101			; 00000065H
  004db	72		 DB	 114			; 00000072H
  004dc	73		 DB	 115			; 00000073H
  004dd	69		 DB	 105			; 00000069H
  004de	6f		 DB	 111			; 0000006fH
  004df	6e		 DB	 110			; 0000006eH
  004e0	73		 DB	 115			; 00000073H
  004e1	74		 DB	 116			; 00000074H
  004e2	72		 DB	 114			; 00000072H
  004e3	00		 DB	 0
$LN22@getEnvirom:
  004e4	6f		 DB	 111			; 0000006fH
  004e5	73		 DB	 115			; 00000073H
  004e6	76		 DB	 118			; 00000076H
  004e7	65		 DB	 101			; 00000065H
  004e8	72		 DB	 114			; 00000072H
  004e9	73		 DB	 115			; 00000073H
  004ea	69		 DB	 105			; 00000069H
  004eb	6f		 DB	 111			; 0000006fH
  004ec	6e		 DB	 110			; 0000006eH
  004ed	69		 DB	 105			; 00000069H
  004ee	6e		 DB	 110			; 0000006eH
  004ef	66		 DB	 102			; 00000066H
  004f0	6f		 DB	 111			; 0000006fH
  004f1	00		 DB	 0
$LN21@getEnvirom:
  004f2	55		 DB	 85			; 00000055H
  004f3	73		 DB	 115			; 00000073H
  004f4	65		 DB	 101			; 00000065H
  004f5	64		 DB	 100			; 00000064H
  004f6	52		 DB	 82			; 00000052H
  004f7	61		 DB	 97			; 00000061H
  004f8	6d		 DB	 109			; 0000006dH
  004f9	53		 DB	 83			; 00000053H
  004fa	69		 DB	 105			; 00000069H
  004fb	7a		 DB	 122			; 0000007aH
  004fc	65		 DB	 101			; 00000065H
  004fd	00		 DB	 0
$LN20@getEnvirom:
  004fe	67		 DB	 103			; 00000067H
  004ff	70		 DB	 112			; 00000070H
  00500	75		 DB	 117			; 00000075H
  00501	5f		 DB	 95			; 0000005fH
  00502	69		 DB	 105			; 00000069H
  00503	6e		 DB	 110			; 0000006eH
  00504	66		 DB	 102			; 00000066H
  00505	6f		 DB	 111			; 0000006fH
  00506	00		 DB	 0
$LN19@getEnvirom:
  00507	63		 DB	 99			; 00000063H
  00508	70		 DB	 112			; 00000070H
  00509	75		 DB	 117			; 00000075H
  0050a	5f		 DB	 95			; 0000005fH
  0050b	69		 DB	 105			; 00000069H
  0050c	6e		 DB	 110			; 0000006eH
  0050d	66		 DB	 102			; 00000066H
  0050e	6f		 DB	 111			; 0000006fH
  0050f	00		 DB	 0
$LN18@getEnvirom:
  00510	62		 DB	 98			; 00000062H
  00511	75		 DB	 117			; 00000075H
  00512	66		 DB	 102			; 00000066H
  00513	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$1:
  00008	8d 8d 60 f6 ff
	ff		 lea	 ecx, DWORD PTR _osversionstr$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$2:
  00013	8d 8d 40 f6 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$3:
  0001e	8d 8d 24 f6 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$4:
  00029	8d 8d 84 f5 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$5:
  00034	8d 8d 68 f5 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z$6:
  0003f	8b 85 64 f5 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00045	83 e0 01	 and	 eax, 1
  00048	0f 84 0f 00 00
	00		 je	 $LN17@getEnvirom
  0004e	83 a5 64 f5 ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00055	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00058	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN17@getEnvirom:
  0005d	c3		 ret	 0
__ehhandler$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 8a 38 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2760]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00075	33 c8		 xor	 ecx, eax
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
  00081	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getEnviromentInfo@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; getEnviromentInfo
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_msex$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_ramUsed$ = 8						; size = 4
?getPhysicalRamSize@@YA_KPA_K@Z PROC			; getPhysicalRamSize

; 855  : uint64_t getPhysicalRamSize(uint64_t *ramUsed) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000b	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 856  : #if defined(_WIN32) || defined(_WIN64)
; 857  :     MEMORYSTATUSEX msex ={ 0 };

  00021	6a 40		 push	 64			; 00000040H
  00023	6a 00		 push	 0
  00025	8d 45 b8	 lea	 eax, DWORD PTR _msex$[ebp]
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 _memset
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 858  :     msex.dwLength = sizeof(msex);

  00031	c7 45 b8 40 00
	00 00		 mov	 DWORD PTR _msex$[ebp], 64 ; 00000040H

; 859  :     GlobalMemoryStatusEx(&msex);

  00038	8b f4		 mov	 esi, esp
  0003a	8d 4d b8	 lea	 ecx, DWORD PTR _msex$[ebp]
  0003d	51		 push	 ecx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalMemoryStatusEx@4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 860  :     if (NULL != ramUsed) {

  0004b	83 7d 08 00	 cmp	 DWORD PTR _ramUsed$[ebp], 0
  0004f	74 14		 je	 SHORT $LN2@getPhysica

; 861  :         *ramUsed = msex.ullTotalPhys - msex.ullAvailPhys;

  00051	8b 55 c0	 mov	 edx, DWORD PTR _msex$[ebp+8]
  00054	2b 55 c8	 sub	 edx, DWORD PTR _msex$[ebp+16]
  00057	8b 45 c4	 mov	 eax, DWORD PTR _msex$[ebp+12]
  0005a	1b 45 cc	 sbb	 eax, DWORD PTR _msex$[ebp+20]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _ramUsed$[ebp]
  00060	89 11		 mov	 DWORD PTR [ecx], edx
  00062	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN2@getPhysica:

; 862  :     }
; 863  :     return msex.ullTotalPhys;

  00065	8b 45 c0	 mov	 eax, DWORD PTR _msex$[ebp+8]
  00068	8b 55 c4	 mov	 edx, DWORD PTR _msex$[ebp+12]

; 864  : #else //#if defined(_WIN32) || defined(_WIN64)
; 865  :     struct sysinfo info;
; 866  :     sysinfo(&info);
; 867  :     if (NULL != ramUsed) {
; 868  :         *ramUsed = info.totalram - info.freeram;
; 869  :     }
; 870  :     return info.totalram;
; 871  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 872  : }

  0006b	52		 push	 edx
  0006c	8b cd		 mov	 ecx, ebp
  0006e	50		 push	 eax
  0006f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@getPhysica
  00075	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007a	58		 pop	 eax
  0007b	5a		 pop	 edx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	83 c4 4c	 add	 esp, 76			; 0000004cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
  00096	66 90		 npad	 2
$LN6@getPhysica:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN5@getPhysica
$LN5@getPhysica:
  000a0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  000a4	40 00 00 00	 DD	 64			; 00000040H
  000a8	00 00 00 00	 DD	 $LN4@getPhysica
$LN4@getPhysica:
  000ac	6d		 DB	 109			; 0000006dH
  000ad	73		 DB	 115			; 00000073H
  000ae	65		 DB	 101			; 00000065H
  000af	78		 DB	 120			; 00000078H
  000b0	00		 DB	 0
?getPhysicalRamSize@@YA_KPA_K@Z ENDP			; getPhysicalRamSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv70 = -48						; size = 4
_sinfo$ = -40						; size = 36
?rgy_is_64bit_os@@YAHXZ PROC				; rgy_is_64bit_os

; 841  : BOOL rgy_is_64bit_os() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 842  : #if defined(_WIN32) || defined(_WIN64)
; 843  :     SYSTEM_INFO sinfo = { 0 };

  00017	33 c0		 xor	 eax, eax
  00019	89 45 d8	 mov	 DWORD PTR _sinfo$[ebp], eax
  0001c	89 45 dc	 mov	 DWORD PTR _sinfo$[ebp+4], eax
  0001f	89 45 e0	 mov	 DWORD PTR _sinfo$[ebp+8], eax
  00022	89 45 e4	 mov	 DWORD PTR _sinfo$[ebp+12], eax
  00025	89 45 e8	 mov	 DWORD PTR _sinfo$[ebp+16], eax
  00028	89 45 ec	 mov	 DWORD PTR _sinfo$[ebp+20], eax
  0002b	89 45 f0	 mov	 DWORD PTR _sinfo$[ebp+24], eax
  0002e	89 45 f4	 mov	 DWORD PTR _sinfo$[ebp+28], eax
  00031	89 45 f8	 mov	 DWORD PTR _sinfo$[ebp+32], eax

; 844  :     GetNativeSystemInfo(&sinfo);

  00034	8b f4		 mov	 esi, esp
  00036	8d 4d d8	 lea	 ecx, DWORD PTR _sinfo$[ebp]
  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetNativeSystemInfo@4
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 845  :     return sinfo.wProcessorArchitecture == PROCESSOR_ARCHITECTURE_AMD64;

  00047	0f b7 55 d8	 movzx	 edx, WORD PTR _sinfo$[ebp]
  0004b	83 fa 09	 cmp	 edx, 9
  0004e	75 09		 jne	 SHORT $LN3@rgy_is_64b
  00050	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00057	eb 07		 jmp	 SHORT $LN4@rgy_is_64b
$LN3@rgy_is_64b:
  00059	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@rgy_is_64b:
  00060	8b 45 d0	 mov	 eax, DWORD PTR tv70[ebp]

; 846  : #else //#if defined(_WIN32) || defined(_WIN64)
; 847  :     struct utsname buf;
; 848  :     uname(&buf);
; 849  :     return NULL != strstr(buf.machine, "x64")
; 850  :         || NULL != strstr(buf.machine, "x86_64")
; 851  :         || NULL != strstr(buf.machine, "amd64");
; 852  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 853  : }

  00063	52		 push	 edx
  00064	8b cd		 mov	 ecx, ebp
  00066	50		 push	 eax
  00067	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@rgy_is_64b
  0006d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00072	58		 pop	 eax
  00073	5a		 pop	 edx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c4 30	 add	 esp, 48			; 00000030H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN7@rgy_is_64b:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN6@rgy_is_64b
$LN6@rgy_is_64b:
  0008c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00090	24 00 00 00	 DD	 36			; 00000024H
  00094	00 00 00 00	 DD	 $LN5@rgy_is_64b
$LN5@rgy_is_64b:
  00098	73		 DB	 115			; 00000073H
  00099	69		 DB	 105			; 00000069H
  0009a	6e		 DB	 110			; 0000006eH
  0009b	66		 DB	 102			; 00000066H
  0009c	6f		 DB	 111			; 0000006fH
  0009d	00		 DB	 0
?rgy_is_64bit_os@@YAHXZ ENDP				; rgy_is_64bit_os
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv152 = -648						; size = 4
tv147 = -644						; size = 4
tv144 = -640						; size = 4
tv141 = -636						; size = 4
tv138 = -632						; size = 4
tv135 = -628						; size = 4
tv132 = -624						; size = 4
tv128 = -620						; size = 4
tv93 = -616						; size = 4
tv89 = -612						; size = 4
tv73 = -608						; size = 4
tv64 = -604						; size = 4
$T2 = -600						; size = 4
_infoex$ = -592						; size = 284
_info$ = -300						; size = 276
_ptr$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_osinfo$ = 12						; size = 4
?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z PROC ; getOSVersion

; 726  : tstring getOSVersion(OSVERSIONINFOEXW *osinfo) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 02 00
	00		 sub	 esp, 636		; 0000027cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 78 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-648]
  0001f	b9 9f 00 00 00	 mov	 ecx, 159		; 0000009fH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 a8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 727  :     const TCHAR *ptr = _T("Unknown");

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118276

; 728  :     OSVERSIONINFOW info = { 0 };

  00050	68 14 01 00 00	 push	 276			; 00000114H
  00055	6a 00		 push	 0
  00057	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _info$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _memset
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 729  :     OSVERSIONINFOEXW infoex = { 0 };

  00066	68 1c 01 00 00	 push	 284			; 0000011cH
  0006b	6a 00		 push	 0
  0006d	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _infoex$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 _memset
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH

; 730  :     info.dwOSVersionInfoSize = sizeof(info);

  0007c	c7 85 d4 fe ff
	ff 14 01 00 00	 mov	 DWORD PTR _info$[ebp], 276 ; 00000114H

; 731  :     infoex.dwOSVersionInfoSize = sizeof(infoex);

  00086	c7 85 b0 fd ff
	ff 1c 01 00 00	 mov	 DWORD PTR _infoex$[ebp], 284 ; 0000011cH

; 732  :     GetVersionExW(&info);

  00090	8b f4		 mov	 esi, esp
  00092	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR _info$[ebp]
  00098	52		 push	 edx
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExW@4
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 733  :     switch (info.dwPlatformId) {

  000a6	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _info$[ebp+16]
  000ac	89 85 a4 fd ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  000b2	83 bd a4 fd ff
	ff 01		 cmp	 DWORD PTR tv64[ebp], 1
  000b9	74 0e		 je	 SHORT $LN14@getOSVersi
  000bb	83 bd a4 fd ff
	ff 02		 cmp	 DWORD PTR tv64[ebp], 2
  000c2	74 55		 je	 SHORT $LN20@getOSVersi
  000c4	e9 1f 03 00 00	 jmp	 $LN2@getOSVersi
$LN14@getOSVersi:

; 734  :     case VER_PLATFORM_WIN32_WINDOWS:
; 735  :         if (4 <= info.dwMajorVersion) {

  000c9	83 bd d8 fe ff
	ff 04		 cmp	 DWORD PTR _info$[ebp+4], 4
  000d0	72 42		 jb	 SHORT $LN15@getOSVersi

; 736  :             switch (info.dwMinorVersion) {

  000d2	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _info$[ebp+8]
  000d8	89 8d a0 fd ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  000de	83 bd a0 fd ff
	ff 00		 cmp	 DWORD PTR tv73[ebp], 0
  000e5	74 14		 je	 SHORT $LN16@getOSVersi
  000e7	83 bd a0 fd ff
	ff 0a		 cmp	 DWORD PTR tv73[ebp], 10	; 0000000aH
  000ee	74 14		 je	 SHORT $LN17@getOSVersi
  000f0	83 bd a0 fd ff
	ff 5a		 cmp	 DWORD PTR tv73[ebp], 90	; 0000005aH
  000f7	74 14		 je	 SHORT $LN18@getOSVersi
  000f9	eb 19		 jmp	 SHORT $LN15@getOSVersi
$LN16@getOSVersi:

; 737  :             case 0:  ptr = _T("Windows 95"); break;

  000fb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118280
  00102	eb 10		 jmp	 SHORT $LN15@getOSVersi
$LN17@getOSVersi:

; 738  :             case 10: ptr = _T("Windows 98"); break;

  00104	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118282
  0010b	eb 07		 jmp	 SHORT $LN15@getOSVersi
$LN18@getOSVersi:

; 739  :             case 90: ptr = _T("Windows Me"); break;

  0010d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118284
$LN15@getOSVersi:

; 740  :             default: break;
; 741  :             }
; 742  :         }
; 743  :         break;

  00114	e9 cf 02 00 00	 jmp	 $LN2@getOSVersi
$LN20@getOSVersi:

; 744  :     case VER_PLATFORM_WIN32_NT:
; 745  :         if (info.dwMajorVersion >= 6 || (info.dwMajorVersion == 5 && info.dwMinorVersion >= 2)) {

  00119	83 bd d8 fe ff
	ff 06		 cmp	 DWORD PTR _info$[ebp+4], 6
  00120	73 12		 jae	 SHORT $LN23@getOSVersi
  00122	83 bd d8 fe ff
	ff 05		 cmp	 DWORD PTR _info$[ebp+4], 5
  00129	75 21		 jne	 SHORT $LN21@getOSVersi
  0012b	83 bd dc fe ff
	ff 02		 cmp	 DWORD PTR _info$[ebp+8], 2
  00132	72 18		 jb	 SHORT $LN21@getOSVersi
$LN23@getOSVersi:

; 746  :             GetVersionExW((OSVERSIONINFOW *)&infoex);

  00134	8b f4		 mov	 esi, esp
  00136	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR _infoex$[ebp]
  0013c	52		 push	 edx
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExW@4
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 747  :         } else {

  0014a	eb 1b		 jmp	 SHORT $LN22@getOSVersi
$LN21@getOSVersi:

; 748  :             memcpy(&infoex, &info, sizeof(info));

  0014c	68 14 01 00 00	 push	 276			; 00000114H
  00151	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _info$[ebp]
  00157	50		 push	 eax
  00158	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _infoex$[ebp]
  0015e	51		 push	 ecx
  0015f	e8 00 00 00 00	 call	 _memcpy
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN22@getOSVersi:

; 749  :         }
; 750  :         if (info.dwMajorVersion == 6) {

  00167	83 bd d8 fe ff
	ff 06		 cmp	 DWORD PTR _info$[ebp+4], 6
  0016e	75 1d		 jne	 SHORT $LN24@getOSVersi

; 751  :             getRealWindowsVersion(&infoex.dwMajorVersion, &infoex.dwMinorVersion, &infoex.dwBuildNumber);

  00170	8d 95 bc fd ff
	ff		 lea	 edx, DWORD PTR _infoex$[ebp+12]
  00176	52		 push	 edx
  00177	8d 85 b8 fd ff
	ff		 lea	 eax, DWORD PTR _infoex$[ebp+8]
  0017d	50		 push	 eax
  0017e	8d 8d b4 fd ff
	ff		 lea	 ecx, DWORD PTR _infoex$[ebp+4]
  00184	51		 push	 ecx
  00185	e8 00 00 00 00	 call	 ?getRealWindowsVersion@@YAHPAK00@Z ; getRealWindowsVersion
  0018a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@getOSVersi:

; 752  :         }
; 753  :         if (osinfo) {

  0018d	83 7d 0c 00	 cmp	 DWORD PTR _osinfo$[ebp], 0
  00191	74 18		 je	 SHORT $LN25@getOSVersi

; 754  :             memcpy(osinfo, &infoex, sizeof(infoex));

  00193	68 1c 01 00 00	 push	 284			; 0000011cH
  00198	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR _infoex$[ebp]
  0019e	52		 push	 edx
  0019f	8b 45 0c	 mov	 eax, DWORD PTR _osinfo$[ebp]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _memcpy
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@getOSVersi:

; 755  :         }
; 756  :         switch (infoex.dwMajorVersion) {

  001ab	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR _infoex$[ebp+4]
  001b1	89 8d 9c fd ff
	ff		 mov	 DWORD PTR tv89[ebp], ecx
  001b7	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR tv89[ebp]
  001bd	83 ea 03	 sub	 edx, 3
  001c0	89 95 9c fd ff
	ff		 mov	 DWORD PTR tv89[ebp], edx
  001c6	83 bd 9c fd ff
	ff 07		 cmp	 DWORD PTR tv89[ebp], 7
  001cd	0f 87 05 02 00
	00		 ja	 $LN48@getOSVersi
  001d3	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR tv89[ebp]
  001d9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN66@getOSVersi[eax*4]
$LN26@getOSVersi:

; 757  :         case 3:
; 758  :             switch (infoex.dwMinorVersion) {

  001e0	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _infoex$[ebp+8]
  001e6	89 8d 98 fd ff
	ff		 mov	 DWORD PTR tv93[ebp], ecx
  001ec	83 bd 98 fd ff
	ff 33		 cmp	 DWORD PTR tv93[ebp], 51	; 00000033H
  001f3	77 36		 ja	 SHORT $LN8@getOSVersi
  001f5	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR tv93[ebp]
  001fb	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN67@getOSVersi[edx]
  00202	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN68@getOSVersi[eax*4]
$LN27@getOSVersi:

; 759  :             case 0:  ptr = _T("Windows NT 3"); break;

  00209	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118294
  00210	eb 19		 jmp	 SHORT $LN8@getOSVersi
$LN28@getOSVersi:

; 760  :             case 1:  ptr = _T("Windows NT 3.1"); break;

  00212	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118296
  00219	eb 10		 jmp	 SHORT $LN8@getOSVersi
$LN29@getOSVersi:

; 761  :             case 5:  ptr = _T("Windows NT 3.5"); break;

  0021b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118298
  00222	eb 07		 jmp	 SHORT $LN8@getOSVersi
$LN30@getOSVersi:

; 762  :             case 51: ptr = _T("Windows NT 3.51"); break;

  00224	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118300
$LN8@getOSVersi:

; 763  :             default: break;
; 764  :             }
; 765  :             break;

  0022b	e9 b8 01 00 00	 jmp	 $LN2@getOSVersi
$LN32@getOSVersi:

; 766  :         case 4:
; 767  :             if (0 == infoex.dwMinorVersion)

  00230	83 bd b8 fd ff
	ff 00		 cmp	 DWORD PTR _infoex$[ebp+8], 0
  00237	75 07		 jne	 SHORT $LN33@getOSVersi

; 768  :                 ptr = _T("Windows NT 4.0");

  00239	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118304
$LN33@getOSVersi:

; 769  :             break;

  00240	e9 a3 01 00 00	 jmp	 $LN2@getOSVersi
$LN34@getOSVersi:

; 770  :         case 5:
; 771  :             switch (infoex.dwMinorVersion) {

  00245	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _infoex$[ebp+8]
  0024b	89 8d 94 fd ff
	ff		 mov	 DWORD PTR tv128[ebp], ecx
  00251	83 bd 94 fd ff
	ff 00		 cmp	 DWORD PTR tv128[ebp], 0
  00258	74 14		 je	 SHORT $LN35@getOSVersi
  0025a	83 bd 94 fd ff
	ff 01		 cmp	 DWORD PTR tv128[ebp], 1
  00261	74 14		 je	 SHORT $LN36@getOSVersi
  00263	83 bd 94 fd ff
	ff 02		 cmp	 DWORD PTR tv128[ebp], 2
  0026a	74 14		 je	 SHORT $LN37@getOSVersi
  0026c	eb 19		 jmp	 SHORT $LN10@getOSVersi
$LN35@getOSVersi:

; 772  :             case 0:  ptr = _T("Windows 2000"); break;

  0026e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118307
  00275	eb 10		 jmp	 SHORT $LN10@getOSVersi
$LN36@getOSVersi:

; 773  :             case 1:  ptr = _T("Windows XP"); break;

  00277	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118309
  0027e	eb 07		 jmp	 SHORT $LN10@getOSVersi
$LN37@getOSVersi:

; 774  :             case 2:  ptr = _T("Windows Server 2003"); break;

  00280	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118311
$LN10@getOSVersi:

; 775  :             default: break;
; 776  :             }
; 777  :             break;

  00287	e9 5c 01 00 00	 jmp	 $LN2@getOSVersi
$LN39@getOSVersi:

; 778  :         case 6:
; 779  :             switch (infoex.dwMinorVersion) {

  0028c	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _infoex$[ebp+8]
  00292	89 95 90 fd ff
	ff		 mov	 DWORD PTR tv132[ebp], edx
  00298	83 bd 90 fd ff
	ff 04		 cmp	 DWORD PTR tv132[ebp], 4
  0029f	0f 87 f4 00 00
	00		 ja	 $LN45@getOSVersi
  002a5	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR tv132[ebp]
  002ab	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN69@getOSVersi[eax*4]
$LN40@getOSVersi:

; 780  :             case 0:  ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows Vista") : _T("Windows Server 2008");    break;

  002b2	0f b6 8d ca fe
	ff ff		 movzx	 ecx, BYTE PTR _infoex$[ebp+282]
  002b9	83 f9 01	 cmp	 ecx, 1
  002bc	75 0c		 jne	 SHORT $LN52@getOSVersi
  002be	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], OFFSET $SG118315
  002c8	eb 0a		 jmp	 SHORT $LN53@getOSVersi
$LN52@getOSVersi:
  002ca	c7 85 8c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv135[ebp], OFFSET $SG118316
$LN53@getOSVersi:
  002d4	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR tv135[ebp]
  002da	89 55 ec	 mov	 DWORD PTR _ptr$[ebp], edx
  002dd	e9 c7 00 00 00	 jmp	 $LN12@getOSVersi
$LN41@getOSVersi:

; 781  :             case 1:  ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows 7")     : _T("Windows Server 2008 R2"); break;

  002e2	0f b6 85 ca fe
	ff ff		 movzx	 eax, BYTE PTR _infoex$[ebp+282]
  002e9	83 f8 01	 cmp	 eax, 1
  002ec	75 0c		 jne	 SHORT $LN54@getOSVersi
  002ee	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], OFFSET $SG118318
  002f8	eb 0a		 jmp	 SHORT $LN55@getOSVersi
$LN54@getOSVersi:
  002fa	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], OFFSET $SG118319
$LN55@getOSVersi:
  00304	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR tv138[ebp]
  0030a	89 4d ec	 mov	 DWORD PTR _ptr$[ebp], ecx
  0030d	e9 97 00 00 00	 jmp	 $LN12@getOSVersi
$LN42@getOSVersi:

; 782  :             case 2:  ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows 8")     : _T("Windows Server 2012");    break;

  00312	0f b6 95 ca fe
	ff ff		 movzx	 edx, BYTE PTR _infoex$[ebp+282]
  00319	83 fa 01	 cmp	 edx, 1
  0031c	75 0c		 jne	 SHORT $LN56@getOSVersi
  0031e	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], OFFSET $SG118321
  00328	eb 0a		 jmp	 SHORT $LN57@getOSVersi
$LN56@getOSVersi:
  0032a	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], OFFSET $SG118322
$LN57@getOSVersi:
  00334	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR tv141[ebp]
  0033a	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax
  0033d	eb 6a		 jmp	 SHORT $LN12@getOSVersi
$LN43@getOSVersi:

; 783  :             case 3:  ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows 8.1")   : _T("Windows Server 2012 R2"); break;

  0033f	0f b6 8d ca fe
	ff ff		 movzx	 ecx, BYTE PTR _infoex$[ebp+282]
  00346	83 f9 01	 cmp	 ecx, 1
  00349	75 0c		 jne	 SHORT $LN58@getOSVersi
  0034b	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], OFFSET $SG118324
  00355	eb 0a		 jmp	 SHORT $LN59@getOSVersi
$LN58@getOSVersi:
  00357	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv144[ebp], OFFSET $SG118325
$LN59@getOSVersi:
  00361	8b 95 80 fd ff
	ff		 mov	 edx, DWORD PTR tv144[ebp]
  00367	89 55 ec	 mov	 DWORD PTR _ptr$[ebp], edx
  0036a	eb 3d		 jmp	 SHORT $LN12@getOSVersi
$LN44@getOSVersi:

; 784  :             case 4:  ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows 10")    : _T("Windows Server 2016");    break;

  0036c	0f b6 85 ca fe
	ff ff		 movzx	 eax, BYTE PTR _infoex$[ebp+282]
  00373	83 f8 01	 cmp	 eax, 1
  00376	75 0c		 jne	 SHORT $LN60@getOSVersi
  00378	c7 85 7c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv147[ebp], OFFSET $SG118327
  00382	eb 0a		 jmp	 SHORT $LN61@getOSVersi
$LN60@getOSVersi:
  00384	c7 85 7c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv147[ebp], OFFSET $SG118328
$LN61@getOSVersi:
  0038e	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  00394	89 4d ec	 mov	 DWORD PTR _ptr$[ebp], ecx
  00397	eb 10		 jmp	 SHORT $LN12@getOSVersi
$LN45@getOSVersi:

; 785  :             default:
; 786  :                 if (5 <= infoex.dwMinorVersion) {

  00399	83 bd b8 fd ff
	ff 05		 cmp	 DWORD PTR _infoex$[ebp+8], 5
  003a0	72 07		 jb	 SHORT $LN12@getOSVersi

; 787  :                     ptr = _T("Later than Windows 10");

  003a2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118331
$LN12@getOSVersi:

; 788  :                 }
; 789  :                 break;
; 790  :             }
; 791  :             break;

  003a9	eb 3d		 jmp	 SHORT $LN2@getOSVersi
$LN47@getOSVersi:

; 792  :         case 10:
; 793  :             ptr = (infoex.wProductType == VER_NT_WORKSTATION) ? _T("Windows 10") : _T("Windows Server 2016"); break;

  003ab	0f b6 95 ca fe
	ff ff		 movzx	 edx, BYTE PTR _infoex$[ebp+282]
  003b2	83 fa 01	 cmp	 edx, 1
  003b5	75 0c		 jne	 SHORT $LN62@getOSVersi
  003b7	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], OFFSET $SG118333
  003c1	eb 0a		 jmp	 SHORT $LN63@getOSVersi
$LN62@getOSVersi:
  003c3	c7 85 78 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], OFFSET $SG118334
$LN63@getOSVersi:
  003cd	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR tv152[ebp]
  003d3	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax
  003d6	eb 10		 jmp	 SHORT $LN2@getOSVersi
$LN48@getOSVersi:

; 794  :         default:
; 795  :             if (10 <= infoex.dwMajorVersion) {

  003d8	83 bd b4 fd ff
	ff 0a		 cmp	 DWORD PTR _infoex$[ebp+4], 10 ; 0000000aH
  003df	72 07		 jb	 SHORT $LN2@getOSVersi

; 796  :                 ptr = _T("Later than Windows 10");

  003e1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], OFFSET $SG118337
$LN2@getOSVersi:

; 797  :             }
; 798  :             break;
; 799  :         }
; 800  :         break;
; 801  :     default:
; 802  :         break;
; 803  :     }
; 804  :     return tstring(ptr);

  003e8	8b 4d ec	 mov	 ecx, DWORD PTR _ptr$[ebp]
  003eb	51		 push	 ecx
  003ec	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003ef	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  003fb	8b 95 a8 fd ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00401	83 ca 01	 or	 edx, 1
  00404	89 95 a8 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0040a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 805  : #else //#if defined(_WIN32) || defined(_WIN64)
; 806  : tstring getOSVersion() {
; 807  :     std::string str = "";
; 808  :     FILE *fp = popen("/usr/bin/lsb_release -a", "r");
; 809  :     if (fp != NULL) {
; 810  :         char buffer[2048];
; 811  :         while (NULL != fgets(buffer, _countof(buffer), fp)) {
; 812  :             str += buffer;
; 813  :         }
; 814  :         pclose(fp);
; 815  :         if (str.length() > 0) {
; 816  :             auto sep = split(str, "\n");
; 817  :             for (auto line : sep) {
; 818  :                 if (line.find("Description") != std::string::npos) {
; 819  :                     std::string::size_type pos = line.find(":");
; 820  :                     if (pos == std::string::npos) {
; 821  :                         pos = std::string("Description").length();
; 822  :                     }
; 823  :                     pos++;
; 824  :                     str = line.substr(pos);
; 825  :                     break;
; 826  :                 }
; 827  :             }
; 828  :         }
; 829  :     }
; 830  :     if (str.length() == 0) {
; 831  :         struct utsname buf;
; 832  :         uname(&buf);
; 833  :         str += buf.sysname;
; 834  :         str += " ";
; 835  :         str += buf.release;
; 836  :     }
; 837  :     return char_to_tstring(trim(str));
; 838  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 839  : }

  0040d	52		 push	 edx
  0040e	8b cd		 mov	 ecx, ebp
  00410	50		 push	 eax
  00411	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN74@getOSVersi
  00417	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041c	58		 pop	 eax
  0041d	5a		 pop	 edx
  0041e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00421	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00428	59		 pop	 ecx
  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042e	33 cd		 xor	 ecx, ebp
  00430	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00435	81 c4 88 02 00
	00		 add	 esp, 648		; 00000288H
  0043b	3b ec		 cmp	 ebp, esp
  0043d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00442	8b e5		 mov	 esp, ebp
  00444	5d		 pop	 ebp
  00445	c3		 ret	 0
  00446	66 90		 npad	 2
$LN74@getOSVersi:
  00448	02 00 00 00	 DD	 2
  0044c	00 00 00 00	 DD	 $LN73@getOSVersi
$LN73@getOSVersi:
  00450	d4 fe ff ff	 DD	 -300			; fffffed4H
  00454	14 01 00 00	 DD	 276			; 00000114H
  00458	00 00 00 00	 DD	 $LN70@getOSVersi
  0045c	b0 fd ff ff	 DD	 -592			; fffffdb0H
  00460	1c 01 00 00	 DD	 284			; 0000011cH
  00464	00 00 00 00	 DD	 $LN71@getOSVersi
$LN71@getOSVersi:
  00468	69		 DB	 105			; 00000069H
  00469	6e		 DB	 110			; 0000006eH
  0046a	66		 DB	 102			; 00000066H
  0046b	6f		 DB	 111			; 0000006fH
  0046c	65		 DB	 101			; 00000065H
  0046d	78		 DB	 120			; 00000078H
  0046e	00		 DB	 0
$LN70@getOSVersi:
  0046f	69		 DB	 105			; 00000069H
  00470	6e		 DB	 110			; 0000006eH
  00471	66		 DB	 102			; 00000066H
  00472	6f		 DB	 111			; 0000006fH
  00473	00		 DB	 0
$LN66@getOSVersi:
  00474	00 00 00 00	 DD	 $LN26@getOSVersi
  00478	00 00 00 00	 DD	 $LN32@getOSVersi
  0047c	00 00 00 00	 DD	 $LN34@getOSVersi
  00480	00 00 00 00	 DD	 $LN39@getOSVersi
  00484	00 00 00 00	 DD	 $LN48@getOSVersi
  00488	00 00 00 00	 DD	 $LN48@getOSVersi
  0048c	00 00 00 00	 DD	 $LN48@getOSVersi
  00490	00 00 00 00	 DD	 $LN47@getOSVersi
$LN68@getOSVersi:
  00494	00 00 00 00	 DD	 $LN27@getOSVersi
  00498	00 00 00 00	 DD	 $LN28@getOSVersi
  0049c	00 00 00 00	 DD	 $LN29@getOSVersi
  004a0	00 00 00 00	 DD	 $LN30@getOSVersi
  004a4	00 00 00 00	 DD	 $LN8@getOSVersi
$LN67@getOSVersi:
  004a8	00		 DB	 0
  004a9	01		 DB	 1
  004aa	04		 DB	 4
  004ab	04		 DB	 4
  004ac	04		 DB	 4
  004ad	02		 DB	 2
  004ae	04		 DB	 4
  004af	04		 DB	 4
  004b0	04		 DB	 4
  004b1	04		 DB	 4
  004b2	04		 DB	 4
  004b3	04		 DB	 4
  004b4	04		 DB	 4
  004b5	04		 DB	 4
  004b6	04		 DB	 4
  004b7	04		 DB	 4
  004b8	04		 DB	 4
  004b9	04		 DB	 4
  004ba	04		 DB	 4
  004bb	04		 DB	 4
  004bc	04		 DB	 4
  004bd	04		 DB	 4
  004be	04		 DB	 4
  004bf	04		 DB	 4
  004c0	04		 DB	 4
  004c1	04		 DB	 4
  004c2	04		 DB	 4
  004c3	04		 DB	 4
  004c4	04		 DB	 4
  004c5	04		 DB	 4
  004c6	04		 DB	 4
  004c7	04		 DB	 4
  004c8	04		 DB	 4
  004c9	04		 DB	 4
  004ca	04		 DB	 4
  004cb	04		 DB	 4
  004cc	04		 DB	 4
  004cd	04		 DB	 4
  004ce	04		 DB	 4
  004cf	04		 DB	 4
  004d0	04		 DB	 4
  004d1	04		 DB	 4
  004d2	04		 DB	 4
  004d3	04		 DB	 4
  004d4	04		 DB	 4
  004d5	04		 DB	 4
  004d6	04		 DB	 4
  004d7	04		 DB	 4
  004d8	04		 DB	 4
  004d9	04		 DB	 4
  004da	04		 DB	 4
  004db	03		 DB	 3
$LN69@getOSVersi:
  004dc	00 00 00 00	 DD	 $LN40@getOSVersi
  004e0	00 00 00 00	 DD	 $LN41@getOSVersi
  004e4	00 00 00 00	 DD	 $LN42@getOSVersi
  004e8	00 00 00 00	 DD	 $LN43@getOSVersi
  004ec	00 00 00 00	 DD	 $LN44@getOSVersi
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z$0:
  00000	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 0f 00 00
	00		 je	 $LN65@getOSVersi
  0000f	83 a5 a8 fd ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN65@getOSVersi:
  0001e	c3		 ret	 0
__ehhandler$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z:
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 78 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-648]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getOSVersion@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAU_OSVERSIONINFOEXW@@@Z ENDP ; getOSVersion
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv183 = -168						; size = 4
tv93 = -164						; size = 4
tv132 = -160						; size = 4
tv155 = -156						; size = 4
tv78 = -152						; size = 4
tv77 = -148						; size = 4
$T2 = -144						; size = 4
$T3 = -140						; size = 4
$T4 = -136						; size = 28
$T5 = -108						; size = 28
$T6 = -80						; size = 28
_ret$ = -52						; size = 4
_csbi$ = -44						; size = 22
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_log_level$ = 8						; size = 4
_mes$ = 12						; size = 4
_handle$ = 16						; size = 4
?rgy_print_stderr@@YAHHPBDPAX@Z PROC			; rgy_print_stderr

; 622  : int rgy_print_stderr(int log_level, const TCHAR *mes, HANDLE handle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?rgy_print_stderr@@YAHHPBDPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  0001f	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 623  : #if defined(_WIN32) || defined(_WIN64)
; 624  :     CONSOLE_SCREEN_BUFFER_INFO csbi = { 0 };

  00049	33 c0		 xor	 eax, eax
  0004b	66 89 45 d4	 mov	 WORD PTR _csbi$[ebp], ax
  0004f	33 c9		 xor	 ecx, ecx
  00051	89 4d d6	 mov	 DWORD PTR _csbi$[ebp+2], ecx
  00054	89 4d da	 mov	 DWORD PTR _csbi$[ebp+6], ecx
  00057	89 4d de	 mov	 DWORD PTR _csbi$[ebp+10], ecx
  0005a	89 4d e2	 mov	 DWORD PTR _csbi$[ebp+14], ecx
  0005d	89 4d e6	 mov	 DWORD PTR _csbi$[ebp+18], ecx

; 625  :     static const WORD LOG_COLOR[] = {
; 626  :         FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_BLUE, //水色
; 627  :         FOREGROUND_INTENSITY | FOREGROUND_GREEN, //緑
; 628  :         FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE,
; 629  :         FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE,
; 630  :         FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED, //黄色
; 631  :         FOREGROUND_INTENSITY | FOREGROUND_RED //赤
; 632  :     };
; 633  :     if (handle == NULL) {

  00060	83 7d 10 00	 cmp	 DWORD PTR _handle$[ebp], 0
  00064	75 14		 jne	 SHORT $LN2@rgy_print_

; 634  :         handle = GetStdHandle(STD_ERROR_HANDLE);

  00066	8b f4		 mov	 esi, esp
  00068	6a f4		 push	 -12			; fffffff4H
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetStdHandle@4
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 10	 mov	 DWORD PTR _handle$[ebp], eax
$LN2@rgy_print_:

; 635  :     }
; 636  :     if (handle && log_level != RGY_LOG_INFO) {

  0007a	83 7d 10 00	 cmp	 DWORD PTR _handle$[ebp], 0
  0007e	0f 84 84 00 00
	00		 je	 $LN3@rgy_print_
  00084	83 7d 08 00	 cmp	 DWORD PTR _log_level$[ebp], 0
  00088	74 7e		 je	 SHORT $LN3@rgy_print_

; 637  :         GetConsoleScreenBufferInfo(handle, &csbi);

  0008a	8b f4		 mov	 esi, esp
  0008c	8d 55 d4	 lea	 edx, DWORD PTR _csbi$[ebp]
  0008f	52		 push	 edx
  00090	8b 45 10	 mov	 eax, DWORD PTR _handle$[ebp]
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetConsoleScreenBufferInfo@8
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 638  :         SetConsoleTextAttribute(handle, LOG_COLOR[clamp(log_level, RGY_LOG_TRACE, RGY_LOG_ERROR) - RGY_LOG_TRACE] | (csbi.wAttributes & 0x00f0));

  000a1	83 7d 08 02	 cmp	 DWORD PTR _log_level$[ebp], 2
  000a5	7f 29		 jg	 SHORT $LN8@rgy_print_
  000a7	83 7d 08 fd	 cmp	 DWORD PTR _log_level$[ebp], -3 ; fffffffdH
  000ab	7c 0b		 jl	 SHORT $LN6@rgy_print_
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _log_level$[ebp]
  000b0	89 8d 6c ff ff
	ff		 mov	 DWORD PTR tv77[ebp], ecx
  000b6	eb 0a		 jmp	 SHORT $LN7@rgy_print_
$LN6@rgy_print_:
  000b8	c7 85 6c ff ff
	ff fd ff ff ff	 mov	 DWORD PTR tv77[ebp], -3	; fffffffdH
$LN7@rgy_print_:
  000c2	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv77[ebp]
  000c8	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv78[ebp], edx
  000ce	eb 0a		 jmp	 SHORT $LN9@rgy_print_
$LN8@rgy_print_:
  000d0	c7 85 68 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR tv78[ebp], 2
$LN9@rgy_print_:
  000da	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv78[ebp]
  000e0	0f b7 0c 45 06
	00 00 00	 movzx	 ecx, WORD PTR ?LOG_COLOR@?1??rgy_print_stderr@@YAHHPBDPAX@Z@4QBGB[eax*2+6]
  000e8	0f b7 55 dc	 movzx	 edx, WORD PTR _csbi$[ebp+8]
  000ec	81 e2 f0 00 00
	00		 and	 edx, 240		; 000000f0H
  000f2	0b ca		 or	 ecx, edx
  000f4	8b f4		 mov	 esi, esp
  000f6	51		 push	 ecx
  000f7	8b 45 10	 mov	 eax, DWORD PTR _handle$[ebp]
  000fa	50		 push	 eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleTextAttribute@8
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@rgy_print_:

; 639  :     }
; 640  :     //このfprintfで"%"が消えてしまわないよう置換する
; 641  :     int ret = _ftprintf(stderr, (nullptr == _tcschr(mes, _T('%'))) ? mes : str_replace(tstring(mes), _T("%"), _T("%%")).c_str());

  00108	6a 25		 push	 37			; 00000025H
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _mes$[ebp]
  0010d	51		 push	 ecx
  0010e	e8 00 00 00 00	 call	 __tcschr
  00113	83 c4 08	 add	 esp, 8
  00116	85 c0		 test	 eax, eax
  00118	75 0e		 jne	 SHORT $LN10@rgy_print_
  0011a	8b 55 0c	 mov	 edx, DWORD PTR _mes$[ebp]
  0011d	89 95 64 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], edx
  00123	e9 bb 00 00 00	 jmp	 $LN11@rgy_print_
$LN10@rgy_print_:
  00128	68 00 00 00 00	 push	 OFFSET $SG118104
  0012d	8d 4d b0	 lea	 ecx, DWORD PTR $T6[ebp]
  00130	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00135	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0013c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00142	83 c8 01	 or	 eax, 1
  00145	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0014b	68 00 00 00 00	 push	 OFFSET $SG118105
  00150	8d 4d 94	 lea	 ecx, DWORD PTR $T5[ebp]
  00153	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00158	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0015f	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00165	83 c9 02	 or	 ecx, 2
  00168	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0016e	8d 55 b0	 lea	 edx, DWORD PTR $T6[ebp]
  00171	52		 push	 edx
  00172	8d 45 94	 lea	 eax, DWORD PTR $T5[ebp]
  00175	50		 push	 eax
  00176	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00179	8b cc		 mov	 ecx, esp
  0017b	89 a5 74 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00181	8b 55 0c	 mov	 edx, DWORD PTR _mes$[ebp]
  00184	52		 push	 edx
  00185	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0018a	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  00190	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00197	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0019d	50		 push	 eax
  0019e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001a2	e8 00 00 00 00	 call	 ?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z ; str_replace
  001a7	83 c4 28	 add	 esp, 40			; 00000028H
  001aa	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  001b0	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  001b6	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv183[ebp], ecx
  001bc	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  001c3	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  001c9	83 ca 04	 or	 edx, 4
  001cc	89 95 70 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  001d2	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv183[ebp]
  001d8	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001dd	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
$LN11@rgy_print_:
  001e3	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv155[ebp]
  001e9	50		 push	 eax
  001ea	8b f4		 mov	 esi, esp
  001ec	6a 02		 push	 2
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  001f4	83 c4 04	 add	 esp, 4
  001f7	3b f4		 cmp	 esi, esp
  001f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 _fprintf
  00204	83 c4 08	 add	 esp, 8
  00207	89 45 cc	 mov	 DWORD PTR _ret$[ebp], eax
  0020a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00211	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00217	83 e1 04	 and	 ecx, 4
  0021a	74 12		 je	 SHORT $LN19@rgy_print_
  0021c	83 a5 70 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  00223	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00229	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN19@rgy_print_:
  0022e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00235	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0023b	83 e2 02	 and	 edx, 2
  0023e	74 0f		 je	 SHORT $LN20@rgy_print_
  00240	83 a5 70 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00247	8d 4d 94	 lea	 ecx, DWORD PTR $T5[ebp]
  0024a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN20@rgy_print_:
  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0025c	83 e0 01	 and	 eax, 1
  0025f	74 0f		 je	 SHORT $LN21@rgy_print_
  00261	83 a5 70 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00268	8d 4d b0	 lea	 ecx, DWORD PTR $T6[ebp]
  0026b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN21@rgy_print_:

; 642  :     if (handle && log_level != RGY_LOG_INFO) {

  00270	83 7d 10 00	 cmp	 DWORD PTR _handle$[ebp], 0
  00274	74 1e		 je	 SHORT $LN4@rgy_print_
  00276	83 7d 08 00	 cmp	 DWORD PTR _log_level$[ebp], 0
  0027a	74 18		 je	 SHORT $LN4@rgy_print_

; 643  :         SetConsoleTextAttribute(handle, csbi.wAttributes); //元に戻す

  0027c	8b f4		 mov	 esi, esp
  0027e	0f b7 4d dc	 movzx	 ecx, WORD PTR _csbi$[ebp+8]
  00282	51		 push	 ecx
  00283	8b 55 10	 mov	 edx, DWORD PTR _handle$[ebp]
  00286	52		 push	 edx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetConsoleTextAttribute@8
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@rgy_print_:

; 644  :     }
; 645  : #else
; 646  :     static const char *const LOG_COLOR[] = {
; 647  :         "\x1b[36m", //水色
; 648  :         "\x1b[32m", //緑
; 649  :         "\x1b[39m", //デフォルト
; 650  :         "\x1b[39m", //デフォルト
; 651  :         "\x1b[33m", //黄色
; 652  :         "\x1b[31m", //赤
; 653  :     };
; 654  :     int ret = _ftprintf(stderr, "%s%s%s", LOG_COLOR[clamp(log_level, RGY_LOG_TRACE, RGY_LOG_ERROR) - RGY_LOG_TRACE], mes, LOG_COLOR[RGY_LOG_INFO - RGY_LOG_TRACE]);
; 655  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 656  :     fflush(stderr);

  00294	8b f4		 mov	 esi, esp
  00296	6a 02		 push	 2
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0029e	83 c4 04	 add	 esp, 4
  002a1	3b f4		 cmp	 esi, esp
  002a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a8	8b f4		 mov	 esi, esp
  002aa	50		 push	 eax
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  002b1	83 c4 04	 add	 esp, 4
  002b4	3b f4		 cmp	 esi, esp
  002b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 657  :     return ret;

  002bb	8b 45 cc	 mov	 eax, DWORD PTR _ret$[ebp]

; 658  : }

  002be	52		 push	 edx
  002bf	8b cd		 mov	 ecx, ebp
  002c1	50		 push	 eax
  002c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@rgy_print_
  002c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002cd	58		 pop	 eax
  002ce	5a		 pop	 edx
  002cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d9	59		 pop	 ecx
  002da	5f		 pop	 edi
  002db	5e		 pop	 esi
  002dc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002df	33 cd		 xor	 ecx, ebp
  002e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e6	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  002ec	3b ec		 cmp	 ebp, esp
  002ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f3	8b e5		 mov	 esp, ebp
  002f5	5d		 pop	 ebp
  002f6	c3		 ret	 0
  002f7	90		 npad	 1
$LN25@rgy_print_:
  002f8	01 00 00 00	 DD	 1
  002fc	00 00 00 00	 DD	 $LN24@rgy_print_
$LN24@rgy_print_:
  00300	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00304	16 00 00 00	 DD	 22			; 00000016H
  00308	00 00 00 00	 DD	 $LN22@rgy_print_
$LN22@rgy_print_:
  0030c	63		 DB	 99			; 00000063H
  0030d	73		 DB	 115			; 00000073H
  0030e	62		 DB	 98			; 00000062H
  0030f	69		 DB	 105			; 00000069H
  00310	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$0:
  00000	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00006	83 e0 01	 and	 eax, 1
  00009	0f 84 0f 00 00
	00		 je	 $LN13@rgy_print_
  0000f	83 a5 70 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00016	8d 4d b0	 lea	 ecx, DWORD PTR $T6[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN13@rgy_print_:
  0001e	c3		 ret	 0
__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$1:
  0001f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00025	83 e0 02	 and	 eax, 2
  00028	0f 84 0f 00 00
	00		 je	 $LN15@rgy_print_
  0002e	83 a5 70 ff ff
	ff fd		 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00035	8d 4d 94	 lea	 ecx, DWORD PTR $T5[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN15@rgy_print_:
  0003d	c3		 ret	 0
__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$2:
  0003e	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00044	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?rgy_print_stderr@@YAHHPBDPAX@Z$3:
  00049	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0004f	83 e0 04	 and	 eax, 4
  00052	0f 84 12 00 00
	00		 je	 $LN18@rgy_print_
  00058	83 a5 70 ff ff
	ff fb		 and	 DWORD PTR $T2[ebp], -5	; fffffffbH
  0005f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00065	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN18@rgy_print_:
  0006a	c3		 ret	 0
__ehhandler$?rgy_print_stderr@@YAHHPBDPAX@Z:
  0006b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00072	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00078	33 c8		 xor	 ecx, eax
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00082	33 c8		 xor	 ecx, eax
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?rgy_print_stderr@@YAHHPBDPAX@Z
  0008e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?rgy_print_stderr@@YAHHPBDPAX@Z ENDP			; rgy_print_stderr
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_ext_list$ = 12						; size = 4
?check_ext@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBDV?$allocator@PBD@std@@@2@@Z PROC ; check_ext

; 540  : bool check_ext(const tstring& filename, const std::vector<const char*>& ext_list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  :     return check_ext(filename.c_str(), ext_list);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _ext_list$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR _filename$[ebp]
  0000a	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z ; check_ext
  00015	83 c4 08	 add	 esp, 8

; 542  : }

  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?check_ext@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBDV?$allocator@PBD@std@@@2@@Z ENDP ; check_ext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv85 = -80						; size = 4
tv90 = -76						; size = 4
tv91 = -72						; size = 4
$T2 = -65						; size = 1
$T3 = -64						; size = 28
_ext$4 = -36						; size = 4
_<end>$L0$5 = -32					; size = 4
_<begin>$L0$6 = -28					; size = 4
_<range>$L0$7 = -24					; size = 4
_target$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
_ext_list$ = 12						; size = 4
?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z PROC ; check_ext

; 528  : bool check_ext(const TCHAR *filename, const std::vector<const char*>& ext_list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  00019	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 529  :     const TCHAR *target = PathFindExtension(filename);

  00039	8b f4		 mov	 esi, esp
  0003b	8b 45 08	 mov	 eax, DWORD PTR _filename$[ebp]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathFindExtensionA@4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	89 45 ec	 mov	 DWORD PTR _target$[ebp], eax

; 530  :     if (target) {

  0004f	83 7d ec 00	 cmp	 DWORD PTR _target$[ebp], 0
  00053	0f 84 a8 00 00
	00		 je	 $LN5@check_ext

; 531  :         for (auto ext : ext_list) {

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _ext_list$[ebp]
  0005c	89 4d e8	 mov	 DWORD PTR _<range>$L0$7[ebp], ecx
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _<range>$L0$7[ebp]
  00062	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
  00067	89 45 e4	 mov	 DWORD PTR _<begin>$L0$6[ebp], eax
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR _<range>$L0$7[ebp]
  0006d	e8 00 00 00 00	 call	 ?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEPBQBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
  00072	89 45 e0	 mov	 DWORD PTR _<end>$L0$5[ebp], eax
  00075	eb 09		 jmp	 SHORT $LN4@check_ext
$LN2@check_ext:
  00077	8b 55 e4	 mov	 edx, DWORD PTR _<begin>$L0$6[ebp]
  0007a	83 c2 04	 add	 edx, 4
  0007d	89 55 e4	 mov	 DWORD PTR _<begin>$L0$6[ebp], edx
$LN4@check_ext:
  00080	8b 45 e4	 mov	 eax, DWORD PTR _<begin>$L0$6[ebp]
  00083	3b 45 e0	 cmp	 eax, DWORD PTR _<end>$L0$5[ebp]
  00086	74 79		 je	 SHORT $LN5@check_ext
  00088	8b 4d e4	 mov	 ecx, DWORD PTR _<begin>$L0$6[ebp]
  0008b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008d	89 55 dc	 mov	 DWORD PTR _ext$4[ebp], edx

; 532  :             if (0 == _tcsicmp(target, char_to_tstring(ext).c_str())) {

  00090	6a 03		 push	 3
  00092	8b 45 dc	 mov	 eax, DWORD PTR _ext$4[ebp]
  00095	50		 push	 eax
  00096	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 ?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a2	89 45 b8	 mov	 DWORD PTR tv91[ebp], eax
  000a5	8b 55 b8	 mov	 edx, DWORD PTR tv91[ebp]
  000a8	89 55 b4	 mov	 DWORD PTR tv90[ebp], edx
  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b2	8b 4d b4	 mov	 ecx, DWORD PTR tv90[ebp]
  000b5	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000ba	50		 push	 eax
  000bb	8b 45 ec	 mov	 eax, DWORD PTR _target$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 __tcsicmp
  000c4	83 c4 08	 add	 esp, 8
  000c7	85 c0		 test	 eax, eax
  000c9	75 09		 jne	 SHORT $LN8@check_ext
  000cb	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
  000d2	eb 07		 jmp	 SHORT $LN9@check_ext
$LN8@check_ext:
  000d4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
$LN9@check_ext:
  000db	8a 4d b0	 mov	 cl, BYTE PTR tv85[ebp]
  000de	88 4d bf	 mov	 BYTE PTR $T2[ebp], cl
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000eb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f0	0f b6 55 bf	 movzx	 edx, BYTE PTR $T2[ebp]
  000f4	85 d2		 test	 edx, edx
  000f6	74 04		 je	 SHORT $LN6@check_ext

; 533  :                 return true;

  000f8	b0 01		 mov	 al, 1
  000fa	eb 07		 jmp	 SHORT $LN1@check_ext
$LN6@check_ext:

; 534  :             }
; 535  :         }

  000fc	e9 76 ff ff ff	 jmp	 $LN2@check_ext
$LN5@check_ext:

; 536  :     }
; 537  :     return false;

  00101	32 c0		 xor	 al, al
$LN1@check_ext:

; 538  : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	83 c4 50	 add	 esp, 80			; 00000050H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?check_ext@@YA_NPBDABV?$vector@PBDV?$allocator@PBD@std@@@std@@@Z ENDP ; check_ext
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv133 = -104						; size = 4
tv73 = -100						; size = 4
$T2 = -96						; size = 4
$T3 = -92						; size = 28
_frac$ = -60						; size = 28
_hour$ = -28						; size = 4
_miniute$ = -24						; size = 4
_sec$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z PROC ; print_time

; 611  : tstring print_time(double time) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	57		 push	 edi
  00015	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00018	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 612  :     int sec = (int)time;

  0003f	f2 0f 2c 45 0c	 cvttsd2si eax, QWORD PTR _time$[ebp]
  00044	89 45 ec	 mov	 DWORD PTR _sec$[ebp], eax

; 613  :     time -= sec;

  00047	f2 0f 2a 45 ec	 cvtsi2sd xmm0, DWORD PTR _sec$[ebp]
  0004c	f2 0f 10 4d 0c	 movsd	 xmm1, QWORD PTR _time$[ebp]
  00051	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00055	f2 0f 11 4d 0c	 movsd	 QWORD PTR _time$[ebp], xmm1

; 614  :     int miniute = (int)(sec / 60);

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _sec$[ebp]
  0005d	99		 cdq
  0005e	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00063	f7 f9		 idiv	 ecx
  00065	89 45 e8	 mov	 DWORD PTR _miniute$[ebp], eax

; 615  :     sec -= miniute * 60;

  00068	6b 55 e8 3c	 imul	 edx, DWORD PTR _miniute$[ebp], 60
  0006c	8b 45 ec	 mov	 eax, DWORD PTR _sec$[ebp]
  0006f	2b c2		 sub	 eax, edx
  00071	89 45 ec	 mov	 DWORD PTR _sec$[ebp], eax

; 616  :     int hour = miniute / 60;

  00074	8b 45 e8	 mov	 eax, DWORD PTR _miniute$[ebp]
  00077	99		 cdq
  00078	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0007d	f7 f9		 idiv	 ecx
  0007f	89 45 e4	 mov	 DWORD PTR _hour$[ebp], eax

; 617  :     miniute -= hour * 60;

  00082	6b 55 e4 3c	 imul	 edx, DWORD PTR _hour$[ebp], 60
  00086	8b 45 e8	 mov	 eax, DWORD PTR _miniute$[ebp]
  00089	2b c2		 sub	 eax, edx
  0008b	89 45 e8	 mov	 DWORD PTR _miniute$[ebp], eax

; 618  :     tstring frac = strsprintf(_T("%.3f"), time);

  0008e	83 ec 08	 sub	 esp, 8
  00091	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _time$[ebp]
  00096	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009b	68 00 00 00 00	 push	 OFFSET $SG118084
  000a0	8d 4d c4	 lea	 ecx, DWORD PTR _frac$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 619  :     return strsprintf(_T("%d:%02d:%02d%s"), hour, miniute, sec, frac.substr(frac.find_first_of(_T("."))).c_str());

  000b3	6a ff		 push	 -1
  000b5	6a 00		 push	 0
  000b7	68 00 00 00 00	 push	 OFFSET $SG118085
  000bc	8d 4d c4	 lea	 ecx, DWORD PTR _frac$[ebp]
  000bf	e8 00 00 00 00	 call	 ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
  000c4	50		 push	 eax
  000c5	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  000c8	52		 push	 edx
  000c9	8d 4d c4	 lea	 ecx, DWORD PTR _frac$[ebp]
  000cc	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000d1	89 45 9c	 mov	 DWORD PTR tv73[ebp], eax
  000d4	8b 45 9c	 mov	 eax, DWORD PTR tv73[ebp]
  000d7	89 45 98	 mov	 DWORD PTR tv133[ebp], eax
  000da	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000de	8b 4d 98	 mov	 ecx, DWORD PTR tv133[ebp]
  000e1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000e6	50		 push	 eax
  000e7	8b 4d ec	 mov	 ecx, DWORD PTR _sec$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 e8	 mov	 edx, DWORD PTR _miniute$[ebp]
  000ee	52		 push	 edx
  000ef	8b 45 e4	 mov	 eax, DWORD PTR _hour$[ebp]
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET $SG118086
  000f8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; strsprintf
  00101	83 c4 18	 add	 esp, 24			; 00000018H
  00104	8b 55 a0	 mov	 edx, DWORD PTR $T2[ebp]
  00107	83 ca 01	 or	 edx, 1
  0010a	89 55 a0	 mov	 DWORD PTR $T2[ebp], edx
  0010d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00111	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00119	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0011d	8d 4d c4	 lea	 ecx, DWORD PTR _frac$[ebp]
  00120	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00125	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 620  : }

  00128	52		 push	 edx
  00129	8b cd		 mov	 ecx, ebp
  0012b	50		 push	 eax
  0012c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@print_time
  00132	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00137	58		 pop	 eax
  00138	5a		 pop	 edx
  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	83 c4 68	 add	 esp, 104		; 00000068H
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
  0015d	0f 1f 00	 npad	 3
$LN10@print_time:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN9@print_time
$LN9@print_time:
  00168	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0016c	1c 00 00 00	 DD	 28			; 0000001cH
  00170	00 00 00 00	 DD	 $LN7@print_time
$LN7@print_time:
  00174	66		 DB	 102			; 00000066H
  00175	72		 DB	 114			; 00000072H
  00176	61		 DB	 97			; 00000061H
  00177	63		 DB	 99			; 00000063H
  00178	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _frac$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$1:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z$2:
  00010	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN6@print_time
  0001c	83 65 a0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@print_time:
  00028	c3		 ret	 0
__ehhandler$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?print_time@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ENDP ; print_time
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv90 = -92						; size = 4
$T2 = -87						; size = 1
$T3 = -86						; size = 1
$T4 = -85						; size = 1
$T5 = -84						; size = 28
_ret$ = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dir$ = 8						; size = 4
?CreateDirectoryRecursive@@YA_NPBD@Z PROC		; CreateDirectoryRecursive

; 491  : bool CreateDirectoryRecursive(const char *dir) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDirectoryRecursive@@YA_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00019	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 492  :     if (PathIsDirectoryA(dir)) {

  00039	8b f4		 mov	 esi, esp
  0003b	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 07		 je	 SHORT $LN2@CreateDire

; 493  :         return true;

  00050	b0 01		 mov	 al, 1
  00052	e9 d8 00 00 00	 jmp	 $LN1@CreateDire
$LN2@CreateDire:

; 494  :     }
; 495  : #if defined(_WIN32) || defined(_WIN64)
; 496  :     if (!PathRootExists(dir)) {

  00057	8b 4d 08	 mov	 ecx, DWORD PTR _dir$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?PathRootExists@@YA_NPBD@Z ; PathRootExists
  00060	83 c4 04	 add	 esp, 4
  00063	0f b6 d0	 movzx	 edx, al
  00066	85 d2		 test	 edx, edx
  00068	75 07		 jne	 SHORT $LN3@CreateDire

; 497  :         return false;

  0006a	32 c0		 xor	 al, al
  0006c	e9 be 00 00 00	 jmp	 $LN1@CreateDire
$LN3@CreateDire:

; 498  :     }
; 499  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 500  :     auto ret = PathRemoveFileSpecFixed(dir);

  00071	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00074	50		 push	 eax
  00075	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00087	51		 push	 ecx
  00088	8d 55 cc	 lea	 edx, DWORD PTR _ret$[ebp]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; PathRemoveFileSpecFixed
  00091	83 c4 08	 add	 esp, 8
  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 501  :     if (ret.first == 0) {

  000a0	83 7d cc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000a4	75 18		 jne	 SHORT $LN4@CreateDire

; 502  :         return false;

  000a6	c6 45 ab 00	 mov	 BYTE PTR $T4[ebp], 0
  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b1	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  000b4	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  000b9	8a 45 ab	 mov	 al, BYTE PTR $T4[ebp]
  000bc	eb 71		 jmp	 SHORT $LN1@CreateDire
$LN4@CreateDire:

; 503  :     }
; 504  :     if (!CreateDirectoryRecursive(ret.second.c_str())) {

  000be	8d 4d d0	 lea	 ecx, DWORD PTR _ret$[ebp+4]
  000c1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?CreateDirectoryRecursive@@YA_NPBD@Z ; CreateDirectoryRecursive
  000cc	83 c4 04	 add	 esp, 4
  000cf	0f b6 c0	 movzx	 eax, al
  000d2	85 c0		 test	 eax, eax
  000d4	75 18		 jne	 SHORT $LN5@CreateDire

; 505  :         return false;

  000d6	c6 45 aa 00	 mov	 BYTE PTR $T3[ebp], 0
  000da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e1	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  000e4	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  000e9	8a 45 aa	 mov	 al, BYTE PTR $T3[ebp]
  000ec	eb 41		 jmp	 SHORT $LN1@CreateDire
$LN5@CreateDire:

; 506  :     }
; 507  :     return CreateDirectoryA(dir, NULL) != 0;

  000ee	8b f4		 mov	 esi, esp
  000f0	6a 00		 push	 0
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _dir$[ebp]
  000f5	51		 push	 ecx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	85 c0		 test	 eax, eax
  00105	74 09		 je	 SHORT $LN7@CreateDire
  00107	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  0010e	eb 07		 jmp	 SHORT $LN8@CreateDire
$LN7@CreateDire:
  00110	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@CreateDire:
  00117	8a 55 a4	 mov	 dl, BYTE PTR tv90[ebp]
  0011a	88 55 a9	 mov	 BYTE PTR $T2[ebp], dl
  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  00127	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  0012c	8a 45 a9	 mov	 al, BYTE PTR $T2[ebp]
$LN1@CreateDire:

; 508  : }

  0012f	52		 push	 edx
  00130	8b cd		 mov	 ecx, ebp
  00132	50		 push	 eax
  00133	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@CreateDire
  00139	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013e	58		 pop	 eax
  0013f	5a		 pop	 edx
  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00150	33 cd		 xor	 ecx, ebp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	83 c4 5c	 add	 esp, 92			; 0000005cH
  0015a	3b ec		 cmp	 ebp, esp
  0015c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
  00165	0f 1f 00	 npad	 3
$LN14@CreateDire:
  00168	01 00 00 00	 DD	 1
  0016c	00 00 00 00	 DD	 $LN13@CreateDire
$LN13@CreateDire:
  00170	cc ff ff ff	 DD	 -52			; ffffffccH
  00174	20 00 00 00	 DD	 32			; 00000020H
  00178	00 00 00 00	 DD	 $LN11@CreateDire
$LN11@CreateDire:
  0017c	72		 DB	 114			; 00000072H
  0017d	65		 DB	 101			; 00000065H
  0017e	74		 DB	 116			; 00000074H
  0017f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDirectoryRecursive@@YA_NPBD@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateDirectoryRecursive@@YA_NPBD@Z$1:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__ehhandler$?CreateDirectoryRecursive@@YA_NPBD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDirectoryRecursive@@YA_NPBD@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDirectoryRecursive@@YA_NPBD@Z ENDP		; CreateDirectoryRecursive
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_qtr$ = -20						; size = 4
_ptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; PathRemoveExtensionS

; 462  : std::string PathRemoveExtensionS(const std::string& path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001c	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00023	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 463  :     const char *ptr = path.c_str();

  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00045	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0004a	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax

; 464  :     const char *qtr = PathFindExtensionA(ptr);

  0004d	8b f4		 mov	 esi, esp
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathFindExtensionA@4
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR _qtr$[ebp], eax

; 465  :     if (qtr == ptr || qtr == nullptr) {

  00063	8b 4d ec	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00066	3b 4d f0	 cmp	 ecx, DWORD PTR _ptr$[ebp]
  00069	74 06		 je	 SHORT $LN3@PathRemove
  0006b	83 7d ec 00	 cmp	 DWORD PTR _qtr$[ebp], 0
  0006f	75 21		 jne	 SHORT $LN2@PathRemove
$LN3@PathRemove:

; 466  :         return path;

  00071	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  00074	52		 push	 edx
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0008d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00090	eb 28		 jmp	 SHORT $LN1@PathRemove
$LN2@PathRemove:

; 467  :     }
; 468  :     return path.substr(0, qtr - ptr);

  00092	8b 4d ec	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00095	2b 4d f0	 sub	 ecx, DWORD PTR _ptr$[ebp]
  00098	51		 push	 ecx
  00099	6a 00		 push	 0
  0009b	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0009e	52		 push	 edx
  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000a2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ae	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  000b1	83 c8 01	 or	 eax, 1
  000b4	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  000b7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@PathRemove:

; 469  : }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5e		 pop	 esi
  000c6	83 c4 18	 add	 esp, 24			; 00000018H
  000c9	3b ec		 cmp	 ebp, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@PathRemove
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@PathRemove:
  00018	c3		 ret	 0
__ehhandler$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRemoveExtensionS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; PathRemoveExtensionS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 4
_newPath$ = -56						; size = 28
_qtr$ = -24						; size = 4
_ptr$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; PathRemoveFileSpecFixed

; 442  : std::pair<int, std::string> PathRemoveFileSpecFixed(const std::string& path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  00019	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 443  :     const char *ptr = path.c_str();

  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00043	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00048	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 444  :     const char *qtr = PathFindFileNameA(ptr);

  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathFindFileNameA@4
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	89 45 e8	 mov	 DWORD PTR _qtr$[ebp], eax

; 445  :     if (qtr == ptr) {

  00061	8b 4d e8	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00064	3b 4d ec	 cmp	 ecx, DWORD PTR _ptr$[ebp]
  00067	75 30		 jne	 SHORT $LN2@PathRemove

; 446  :         return std::make_pair(0, path);

  00069	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  00070	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  00073	52		 push	 edx
  00074	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00077	50		 push	 eax
  00078	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$make_pair@HABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  0008e	83 ca 01	 or	 edx, 1
  00091	89 55 b8	 mov	 DWORD PTR $T2[ebp], edx
  00094	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00097	eb 62		 jmp	 SHORT $LN1@PathRemove
$LN2@PathRemove:

; 447  :     }
; 448  :     std::string newPath = path.substr(0, qtr - ptr - 1);

  00099	8b 45 e8	 mov	 eax, DWORD PTR _qtr$[ebp]
  0009c	2b 45 ec	 sub	 eax, DWORD PTR _ptr$[ebp]
  0009f	83 e8 01	 sub	 eax, 1
  000a2	50		 push	 eax
  000a3	6a 00		 push	 0
  000a5	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000a8	51		 push	 ecx
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000ac	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  000b1	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 449  :     return std::make_pair((int)(path.length() - newPath.length()), newPath);

  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000bb	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  000c0	8b f0		 mov	 esi, eax
  000c2	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000c5	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  000ca	2b f0		 sub	 esi, eax
  000cc	89 75 bc	 mov	 DWORD PTR $T3[ebp], esi
  000cf	8d 55 c8	 lea	 edx, DWORD PTR _newPath$[ebp]
  000d2	52		 push	 edx
  000d3	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000da	51		 push	 ecx
  000db	e8 00 00 00 00	 call	 ??$make_pair@HAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@$$QAHAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::make_pair<int,std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  000e6	83 ca 01	 or	 edx, 1
  000e9	89 55 b8	 mov	 DWORD PTR $T2[ebp], edx
  000ec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f0	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000f3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@PathRemove:

; 450  : }

  000fb	52		 push	 edx
  000fc	8b cd		 mov	 ecx, ebp
  000fe	50		 push	 eax
  000ff	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@PathRemove
  00105	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010a	58		 pop	 eax
  0010b	5a		 pop	 edx
  0010c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00116	59		 pop	 ecx
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011c	33 cd		 xor	 ecx, ebp
  0011e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00123	83 c4 48	 add	 esp, 72			; 00000048H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
  00131	0f 1f 00	 npad	 3
$LN10@PathRemove:
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN9@PathRemove
$LN9@PathRemove:
  0013c	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00140	1c 00 00 00	 DD	 28			; 0000001cH
  00144	00 00 00 00	 DD	 $LN7@PathRemove
$LN7@PathRemove:
  00148	6e		 DB	 110			; 0000006eH
  00149	65		 DB	 101			; 00000065H
  0014a	77		 DB	 119			; 00000077H
  0014b	50		 DB	 80			; 00000050H
  0014c	61		 DB	 97			; 00000061H
  0014d	74		 DB	 116			; 00000074H
  0014e	68		 DB	 104			; 00000068H
  0014f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@PathRemove
  0000c	83 65 b8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
$LN5@PathRemove:
  00018	c3		 ret	 0
__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1:
  00019	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; PathRemoveFileSpecFixed
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv79 = -60						; size = 8
tv72 = -50						; size = 1
_ret$ = -49						; size = 1
_fd$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_filepath$ = 8						; size = 4
_filesize$ = 12						; size = 4
?rgy_get_filesize@@YA_NPBDPA_K@Z PROC			; rgy_get_filesize

; 544  : bool rgy_get_filesize(const char *filepath, uint64_t *filesize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 545  : #if defined(_WIN32) || defined(_WIN64)
; 546  :     WIN32_FILE_ATTRIBUTE_DATA fd = { 0 };

  00021	33 c0		 xor	 eax, eax
  00023	89 45 d4	 mov	 DWORD PTR _fd$[ebp], eax
  00026	89 45 d8	 mov	 DWORD PTR _fd$[ebp+4], eax
  00029	89 45 dc	 mov	 DWORD PTR _fd$[ebp+8], eax
  0002c	89 45 e0	 mov	 DWORD PTR _fd$[ebp+12], eax
  0002f	89 45 e4	 mov	 DWORD PTR _fd$[ebp+16], eax
  00032	89 45 e8	 mov	 DWORD PTR _fd$[ebp+20], eax
  00035	89 45 ec	 mov	 DWORD PTR _fd$[ebp+24], eax
  00038	89 45 f0	 mov	 DWORD PTR _fd$[ebp+28], eax
  0003b	89 45 f4	 mov	 DWORD PTR _fd$[ebp+32], eax

; 547  :     bool ret = (GetFileAttributesExA(filepath, GetFileExInfoStandard, &fd)) ? true : false;

  0003e	8b f4		 mov	 esi, esp
  00040	8d 4d d4	 lea	 ecx, DWORD PTR _fd$[ebp]
  00043	51		 push	 ecx
  00044	6a 00		 push	 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _filepath$[ebp]
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesExA@12
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	85 c0		 test	 eax, eax
  00059	74 06		 je	 SHORT $LN3@rgy_get_fi
  0005b	c6 45 ce 01	 mov	 BYTE PTR tv72[ebp], 1
  0005f	eb 04		 jmp	 SHORT $LN4@rgy_get_fi
$LN3@rgy_get_fi:
  00061	c6 45 ce 00	 mov	 BYTE PTR tv72[ebp], 0
$LN4@rgy_get_fi:
  00065	8a 45 ce	 mov	 al, BYTE PTR tv72[ebp]
  00068	88 45 cf	 mov	 BYTE PTR _ret$[ebp], al

; 548  :     *filesize = (ret) ? (((UINT64)fd.nFileSizeHigh) << 32) + (UINT64)fd.nFileSizeLow : NULL;

  0006b	0f b6 4d cf	 movzx	 ecx, BYTE PTR _ret$[ebp]
  0006f	85 c9		 test	 ecx, ecx
  00071	74 1b		 je	 SHORT $LN5@rgy_get_fi
  00073	33 d2		 xor	 edx, edx
  00075	8b 45 f0	 mov	 eax, DWORD PTR _fd$[ebp+28]
  00078	b1 20		 mov	 cl, 32			; 00000020H
  0007a	e8 00 00 00 00	 call	 __allshl
  0007f	33 c9		 xor	 ecx, ecx
  00081	03 45 f4	 add	 eax, DWORD PTR _fd$[ebp+32]
  00084	13 d1		 adc	 edx, ecx
  00086	89 45 c4	 mov	 DWORD PTR tv79[ebp], eax
  00089	89 55 c8	 mov	 DWORD PTR tv79[ebp+4], edx
  0008c	eb 08		 jmp	 SHORT $LN6@rgy_get_fi
$LN5@rgy_get_fi:
  0008e	0f 57 c0	 xorps	 xmm0, xmm0
  00091	66 0f 13 45 c4	 movlpd	 QWORD PTR tv79[ebp], xmm0
$LN6@rgy_get_fi:
  00096	8b 55 0c	 mov	 edx, DWORD PTR _filesize$[ebp]
  00099	8b 45 c4	 mov	 eax, DWORD PTR tv79[ebp]
  0009c	89 02		 mov	 DWORD PTR [edx], eax
  0009e	8b 4d c8	 mov	 ecx, DWORD PTR tv79[ebp+4]
  000a1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 549  :     return ret;

  000a4	8a 45 cf	 mov	 al, BYTE PTR _ret$[ebp]

; 550  : #else //#if defined(_WIN32) || defined(_WIN64)
; 551  :     struct stat stat;
; 552  :     FILE *fp = fopen(filepath, "rb");
; 553  :     if (fp == NULL || fstat(fileno(fp), &stat)) {
; 554  :         *filesize = 0;
; 555  :         return 1;
; 556  :     }
; 557  :     if (fp) {
; 558  :         fclose(fp);
; 559  :     }
; 560  :     *filesize = stat.st_size;
; 561  :     return 0;
; 562  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 563  : }

  000a7	52		 push	 edx
  000a8	8b cd		 mov	 ecx, ebp
  000aa	50		 push	 eax
  000ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@rgy_get_fi
  000b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b6	58		 pop	 eax
  000b7	5a		 pop	 edx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
  000d2	66 90		 npad	 2
$LN9@rgy_get_fi:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN8@rgy_get_fi
$LN8@rgy_get_fi:
  000dc	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000e0	24 00 00 00	 DD	 36			; 00000024H
  000e4	00 00 00 00	 DD	 $LN7@rgy_get_fi
$LN7@rgy_get_fi:
  000e8	66		 DB	 102			; 00000066H
  000e9	64		 DB	 100			; 00000064H
  000ea	00		 DB	 0
?rgy_get_filesize@@YA_NPBDPA_K@Z ENDP			; rgy_get_filesize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -38						; size = 1
$T4 = -37						; size = 1
_buffer$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; GetFullPath

; 396  : std::string GetFullPath(const char *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 397  : #if defined(_WIN32) || defined(_WIN64)
; 398  :     if (PathIsRelativeA(path) == FALSE)

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsRelativeA@4
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	85 c0		 test	 eax, eax
  0005f	75 24		 jne	 SHORT $LN2@GetFullPat

; 399  :         return std::string(path);

  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00064	51		 push	 ecx
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	8b 55 d4	 mov	 edx, DWORD PTR $T2[ebp]
  00077	83 ca 01	 or	 edx, 1
  0007a	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  0007d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00080	e9 83 00 00 00	 jmp	 $LN1@GetFullPat
$LN2@GetFullPat:

; 400  : #endif //#if defined(_WIN32) || defined(_WIN64)
; 401  :     std::vector<char> buffer(strlen(path) + 1024, 0);

  00085	c6 45 da 00	 mov	 BYTE PTR $T3[ebp], 0
  00089	8d 4d db	 lea	 ecx, DWORD PTR $T4[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00091	50		 push	 eax
  00092	8d 45 da	 lea	 eax, DWORD PTR $T3[ebp]
  00095	50		 push	 eax
  00096	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 _strlen
  0009f	83 c4 04	 add	 esp, 4
  000a2	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000a7	50		 push	 eax
  000a8	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ab	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  000b0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 402  :     _fullpath(buffer.data(), path, buffer.size());

  000b7	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ba	e8 00 00 00 00	 call	 ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
  000bf	8b f4		 mov	 esi, esp
  000c1	50		 push	 eax
  000c2	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  000c5	52		 push	 edx
  000c6	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000c9	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000ce	50		 push	 eax
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fullpath
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 403  :     return std::string(buffer.data());

  000df	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000e2	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000e7	50		 push	 eax
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000eb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f0	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  000f3	83 c8 01	 or	 eax, 1
  000f6	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000f9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000fd	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00100	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  00105	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetFullPat:

; 404  : }

  00108	52		 push	 edx
  00109	8b cd		 mov	 ecx, ebp
  0010b	50		 push	 eax
  0010c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@GetFullPat
  00112	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00117	58		 pop	 eax
  00118	5a		 pop	 edx
  00119	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00123	59		 pop	 ecx
  00124	5e		 pop	 esi
  00125	83 c4 2c	 add	 esp, 44			; 0000002cH
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
  00133	90		 npad	 1
$LN10@GetFullPat:
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN9@GetFullPat
$LN9@GetFullPat:
  0013c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00140	10 00 00 00	 DD	 16			; 00000010H
  00144	00 00 00 00	 DD	 $LN7@GetFullPat
$LN7@GetFullPat:
  00148	62		 DB	 98			; 00000062H
  00149	75		 DB	 117			; 00000075H
  0014a	66		 DB	 102			; 00000066H
  0014b	66		 DB	 102			; 00000066H
  0014c	65		 DB	 101			; 00000065H
  0014d	72		 DB	 114			; 00000072H
  0014e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@GetFullPat
  0000c	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@GetFullPat:
  00018	c3		 ret	 0
__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00019	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__ehhandler$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; GetFullPath
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -20						; size = 4
_pos$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 28
_from$ = 40						; size = 4
_to$ = 44						; size = 4
?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z PROC ; str_replace

; 270  : std::string str_replace(std::string str, const std::string& from, const std::string& to) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 271  :     std::string::size_type pos = 0;

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN2@str_replac:

; 272  :     while(pos = str.find(from, pos), pos != std::string::npos) {

  00048	8b 45 f0	 mov	 eax, DWORD PTR _pos$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 28	 mov	 ecx, DWORD PTR _from$[ebp]
  0004f	51		 push	 ecx
  00050	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00053	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00058	89 45 f0	 mov	 DWORD PTR _pos$[ebp], eax
  0005b	83 7d f0 ff	 cmp	 DWORD PTR _pos$[ebp], -1
  0005f	74 29		 je	 SHORT $LN3@str_replac

; 273  :         str.replace(pos, from.length(), to);

  00061	8b 55 2c	 mov	 edx, DWORD PTR _to$[ebp]
  00064	52		 push	 edx
  00065	8b 4d 28	 mov	 ecx, DWORD PTR _from$[ebp]
  00068	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  0006d	50		 push	 eax
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _pos$[ebp]
  00071	50		 push	 eax
  00072	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00075	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace

; 274  :         pos += to.length();

  0007a	8b 4d 2c	 mov	 ecx, DWORD PTR _to$[ebp]
  0007d	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00082	03 45 f0	 add	 eax, DWORD PTR _pos$[ebp]
  00085	89 45 f0	 mov	 DWORD PTR _pos$[ebp], eax

; 275  :     }

  00088	eb be		 jmp	 SHORT $LN2@str_replac
$LN3@str_replac:

; 276  :     return std::move(str);

  0008a	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009f	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp]
  000a2	83 ca 01	 or	 edx, 1
  000a5	89 55 ec	 mov	 DWORD PTR $T2[ebp], edx
  000a8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ac	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  000af	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 277  : }

  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN7@str_replac
  00014	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@str_replac:
  00020	c3		 ret	 0
__ehhandler$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str_replace@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@ABV12@1@Z ENDP ; str_replace
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv94 = -100						; size = 4
tv65 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 28
_right$4 = -60						; size = 4
_left$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z PROC ; trim

; 385  : std::wstring trim(const std::wstring& string, const WCHAR* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 386  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 387  :     auto left = string.find_first_not_of(trim);

  00052	6a 00		 push	 0
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_first_not_of
  00060	89 45 c8	 mov	 DWORD PTR _left$[ebp], eax

; 388  :     if (left != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _left$[ebp], -1
  00067	74 50		 je	 SHORT $LN2@trim

; 389  :         auto right = string.find_last_not_of(trim);

  00069	6a ff		 push	 -1
  0006b	8b 55 10	 mov	 edx, DWORD PTR _trim$[ebp]
  0006e	52		 push	 edx
  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00072	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_last_not_of
  00077	89 45 c4	 mov	 DWORD PTR _right$4[ebp], eax

; 390  :         result = string.substr(left, right - left + 1);

  0007a	8b 45 c4	 mov	 eax, DWORD PTR _right$4[ebp]
  0007d	2b 45 c8	 sub	 eax, DWORD PTR _left$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	50		 push	 eax
  00084	8b 4d c8	 mov	 ecx, DWORD PTR _left$[ebp]
  00087	51		 push	 ecx
  00088	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  0008b	52		 push	 edx
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0008f	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  00094	89 45 a0	 mov	 DWORD PTR tv65[ebp], eax
  00097	8b 45 a0	 mov	 eax, DWORD PTR tv65[ebp]
  0009a	89 45 9c	 mov	 DWORD PTR tv94[ebp], eax
  0009d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a1	8b 4d 9c	 mov	 ecx, DWORD PTR tv94[ebp]
  000a4	51		 push	 ecx
  000a5	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000a8	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b4	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN2@trim:

; 391  :     }
; 392  :     return result;

  000b9	8d 55 d0	 lea	 edx, DWORD PTR _result$[ebp]
  000bc	52		 push	 edx
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c5	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  000c8	83 c8 01	 or	 eax, 1
  000cb	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000ce	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d2	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000d5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000da	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 393  : }

  000dd	52		 push	 edx
  000de	8b cd		 mov	 ecx, ebp
  000e0	50		 push	 eax
  000e1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@trim
  000e7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ec	58		 pop	 eax
  000ed	5a		 pop	 edx
  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	83 c4 64	 add	 esp, 100		; 00000064H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
  00112	66 90		 npad	 2
$LN11@trim:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN10@trim
$LN10@trim:
  0011c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00120	1c 00 00 00	 DD	 28			; 0000001cH
  00124	00 00 00 00	 DD	 $LN8@trim
$LN8@trim:
  00128	72		 DB	 114			; 00000072H
  00129	65		 DB	 101			; 00000065H
  0012a	73		 DB	 115			; 00000073H
  0012b	75		 DB	 117			; 00000075H
  0012c	6c		 DB	 108			; 0000006cH
  0012d	74		 DB	 116			; 00000074H
  0012e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2:
  00010	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@trim
  0001c	83 65 a4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@trim:
  00028	c3		 ret	 0
__ehhandler$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ENDP ; trim
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv88 = -96						; size = 4
tv65 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 28
_right$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z PROC ; rstrip

; 376  : std::wstring rstrip(const std::wstring& string, const WCHAR* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 377  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 378  :     auto right = string.find_last_not_of(trim);

  00052	6a ff		 push	 -1
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_last_not_of
  00060	89 45 c8	 mov	 DWORD PTR _right$[ebp], eax

; 379  :     if (right != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _right$[ebp], -1
  00067	74 37		 je	 SHORT $LN2@rstrip

; 380  :         result = string.substr(0, right);

  00069	8b 55 c8	 mov	 edx, DWORD PTR _right$[ebp]
  0006c	52		 push	 edx
  0006d	6a 00		 push	 0
  0006f	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00076	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  0007b	89 45 a4	 mov	 DWORD PTR tv65[ebp], eax
  0007e	8b 4d a4	 mov	 ecx, DWORD PTR tv65[ebp]
  00081	89 4d a0	 mov	 DWORD PTR tv88[ebp], ecx
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00088	8b 55 a0	 mov	 edx, DWORD PTR tv88[ebp]
  0008b	52		 push	 edx
  0008c	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  0008f	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN2@rstrip:

; 381  :     }
; 382  :     return result;

  000a0	8d 45 d0	 lea	 eax, DWORD PTR _result$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ac	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  000af	83 c9 01	 or	 ecx, 1
  000b2	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000bc	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : }

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@rstrip
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	83 c4 60	 add	 esp, 96			; 00000060H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
  000f9	0f 1f 00	 npad	 3
$LN11@rstrip:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN10@rstrip
$LN10@rstrip:
  00104	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00108	1c 00 00 00	 DD	 28			; 0000001cH
  0010c	00 00 00 00	 DD	 $LN8@rstrip
$LN8@rstrip:
  00110	72		 DB	 114			; 00000072H
  00111	65		 DB	 101			; 00000065H
  00112	73		 DB	 115			; 00000073H
  00113	75		 DB	 117			; 00000075H
  00114	6c		 DB	 108			; 0000006cH
  00115	74		 DB	 116			; 00000074H
  00116	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2:
  00010	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@rstrip
  0001c	83 65 a8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@rstrip:
  00028	c3		 ret	 0
__ehhandler$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?rstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ENDP ; rstrip
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv88 = -96						; size = 4
tv65 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 28
_left$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z PROC ; lstrip

; 367  : std::wstring lstrip(const std::wstring& string, const WCHAR* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 368  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 369  :     auto left = string.find_first_not_of(trim);

  00052	6a 00		 push	 0
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_first_not_of
  00060	89 45 c8	 mov	 DWORD PTR _left$[ebp], eax

; 370  :     if (left != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _left$[ebp], -1
  00067	74 37		 je	 SHORT $LN2@lstrip

; 371  :         result = string.substr(left, 0);

  00069	6a 00		 push	 0
  0006b	8b 55 c8	 mov	 edx, DWORD PTR _left$[ebp]
  0006e	52		 push	 edx
  0006f	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00076	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  0007b	89 45 a4	 mov	 DWORD PTR tv65[ebp], eax
  0007e	8b 4d a4	 mov	 ecx, DWORD PTR tv65[ebp]
  00081	89 4d a0	 mov	 DWORD PTR tv88[ebp], ecx
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00088	8b 55 a0	 mov	 edx, DWORD PTR tv88[ebp]
  0008b	52		 push	 edx
  0008c	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  0008f	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN2@lstrip:

; 372  :     }
; 373  :     return result;

  000a0	8d 45 d0	 lea	 eax, DWORD PTR _result$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ac	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  000af	83 c9 01	 or	 ecx, 1
  000b2	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000bc	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 374  : }

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@lstrip
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	83 c4 60	 add	 esp, 96			; 00000060H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
  000f9	0f 1f 00	 npad	 3
$LN11@lstrip:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN10@lstrip
$LN10@lstrip:
  00104	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00108	1c 00 00 00	 DD	 28			; 0000001cH
  0010c	00 00 00 00	 DD	 $LN8@lstrip
$LN8@lstrip:
  00110	72		 DB	 114			; 00000072H
  00111	65		 DB	 101			; 00000065H
  00112	73		 DB	 115			; 00000073H
  00113	75		 DB	 117			; 00000075H
  00114	6c		 DB	 108			; 0000006cH
  00115	74		 DB	 116			; 00000074H
  00116	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z$2:
  00010	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@lstrip
  0001c	83 65 a8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@lstrip:
  00028	c3		 ret	 0
__ehhandler$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lstrip@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ENDP ; lstrip
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv94 = -100						; size = 4
tv65 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 28
_right$4 = -60						; size = 4
_left$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z PROC ; trim

; 357  : std::string trim(const std::string& string, const char* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 358  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 359  :     auto left = string.find_first_not_of(trim);

  00052	6a 00		 push	 0
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
  00060	89 45 c8	 mov	 DWORD PTR _left$[ebp], eax

; 360  :     if (left != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _left$[ebp], -1
  00067	74 50		 je	 SHORT $LN2@trim

; 361  :         auto right = string.find_last_not_of(trim);

  00069	6a ff		 push	 -1
  0006b	8b 55 10	 mov	 edx, DWORD PTR _trim$[ebp]
  0006e	52		 push	 edx
  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00072	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
  00077	89 45 c4	 mov	 DWORD PTR _right$4[ebp], eax

; 362  :         result = string.substr(left, right - left + 1);

  0007a	8b 45 c4	 mov	 eax, DWORD PTR _right$4[ebp]
  0007d	2b 45 c8	 sub	 eax, DWORD PTR _left$[ebp]
  00080	83 c0 01	 add	 eax, 1
  00083	50		 push	 eax
  00084	8b 4d c8	 mov	 ecx, DWORD PTR _left$[ebp]
  00087	51		 push	 ecx
  00088	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  0008b	52		 push	 edx
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0008f	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  00094	89 45 a0	 mov	 DWORD PTR tv65[ebp], eax
  00097	8b 45 a0	 mov	 eax, DWORD PTR tv65[ebp]
  0009a	89 45 9c	 mov	 DWORD PTR tv94[ebp], eax
  0009d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a1	8b 4d 9c	 mov	 ecx, DWORD PTR tv94[ebp]
  000a4	51		 push	 ecx
  000a5	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000a8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  000b4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN2@trim:

; 363  :     }
; 364  :     return result;

  000b9	8d 55 d0	 lea	 edx, DWORD PTR _result$[ebp]
  000bc	52		 push	 edx
  000bd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c5	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  000c8	83 c8 01	 or	 eax, 1
  000cb	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000ce	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d2	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000d5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000da	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 365  : }

  000dd	52		 push	 edx
  000de	8b cd		 mov	 ecx, ebp
  000e0	50		 push	 eax
  000e1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@trim
  000e7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ec	58		 pop	 eax
  000ed	5a		 pop	 edx
  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	83 c4 64	 add	 esp, 100		; 00000064H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
  00112	66 90		 npad	 2
$LN11@trim:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN10@trim
$LN10@trim:
  0011c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00120	1c 00 00 00	 DD	 28			; 0000001cH
  00124	00 00 00 00	 DD	 $LN8@trim
$LN8@trim:
  00128	72		 DB	 114			; 00000072H
  00129	65		 DB	 101			; 00000065H
  0012a	73		 DB	 115			; 00000073H
  0012b	75		 DB	 117			; 00000075H
  0012c	6c		 DB	 108			; 0000006cH
  0012d	74		 DB	 116			; 00000074H
  0012e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2:
  00010	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@trim
  0001c	83 65 a4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@trim:
  00028	c3		 ret	 0
__ehhandler$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ENDP ; trim
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv88 = -96						; size = 4
tv65 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 28
_right$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z PROC ; rstrip

; 348  : std::string rstrip(const std::string& string, const char* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 349  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 350  :     auto right = string.find_last_not_of(trim);

  00052	6a ff		 push	 -1
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
  00060	89 45 c8	 mov	 DWORD PTR _right$[ebp], eax

; 351  :     if (right != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _right$[ebp], -1
  00067	74 37		 je	 SHORT $LN2@rstrip

; 352  :         result = string.substr(0, right);

  00069	8b 55 c8	 mov	 edx, DWORD PTR _right$[ebp]
  0006c	52		 push	 edx
  0006d	6a 00		 push	 0
  0006f	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00076	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0007b	89 45 a4	 mov	 DWORD PTR tv65[ebp], eax
  0007e	8b 4d a4	 mov	 ecx, DWORD PTR tv65[ebp]
  00081	89 4d a0	 mov	 DWORD PTR tv88[ebp], ecx
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00088	8b 55 a0	 mov	 edx, DWORD PTR tv88[ebp]
  0008b	52		 push	 edx
  0008c	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  0008f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN2@rstrip:

; 353  :     }
; 354  :     return result;

  000a0	8d 45 d0	 lea	 eax, DWORD PTR _result$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ac	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  000af	83 c9 01	 or	 ecx, 1
  000b2	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : }

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@rstrip
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	83 c4 60	 add	 esp, 96			; 00000060H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
  000f9	0f 1f 00	 npad	 3
$LN11@rstrip:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN10@rstrip
$LN10@rstrip:
  00104	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00108	1c 00 00 00	 DD	 28			; 0000001cH
  0010c	00 00 00 00	 DD	 $LN8@rstrip
$LN8@rstrip:
  00110	72		 DB	 114			; 00000072H
  00111	65		 DB	 101			; 00000065H
  00112	73		 DB	 115			; 00000073H
  00113	75		 DB	 117			; 00000075H
  00114	6c		 DB	 108			; 0000006cH
  00115	74		 DB	 116			; 00000074H
  00116	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2:
  00010	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@rstrip
  0001c	83 65 a8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@rstrip:
  00028	c3		 ret	 0
__ehhandler$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?rstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ENDP ; rstrip
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv88 = -96						; size = 4
tv65 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 28
_left$ = -56						; size = 4
_result$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_string$ = 12						; size = 4
_trim$ = 16						; size = 4
?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z PROC ; lstrip

; 339  : std::string lstrip(const std::string& string, const char* trim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 340  :     auto result = string;

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _string$[ebp]
  00042	50		 push	 eax
  00043	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 341  :     auto left = string.find_first_not_of(trim);

  00052	6a 00		 push	 0
  00054	8b 4d 10	 mov	 ecx, DWORD PTR _trim$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  0005b	e8 00 00 00 00	 call	 ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
  00060	89 45 c8	 mov	 DWORD PTR _left$[ebp], eax

; 342  :     if (left != std::string::npos) {

  00063	83 7d c8 ff	 cmp	 DWORD PTR _left$[ebp], -1
  00067	74 37		 je	 SHORT $LN2@lstrip

; 343  :         result = string.substr(left, 0);

  00069	6a 00		 push	 0
  0006b	8b 55 c8	 mov	 edx, DWORD PTR _left$[ebp]
  0006e	52		 push	 edx
  0006f	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _string$[ebp]
  00076	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  0007b	89 45 a4	 mov	 DWORD PTR tv65[ebp], eax
  0007e	8b 4d a4	 mov	 ecx, DWORD PTR tv65[ebp]
  00081	89 4d a0	 mov	 DWORD PTR tv88[ebp], ecx
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00088	8b 55 a0	 mov	 edx, DWORD PTR tv88[ebp]
  0008b	52		 push	 edx
  0008c	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  0008f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN2@lstrip:

; 344  :     }
; 345  :     return result;

  000a0	8d 45 d0	 lea	 eax, DWORD PTR _result$[ebp]
  000a3	50		 push	 eax
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ac	8b 4d a8	 mov	 ecx, DWORD PTR $T2[ebp]
  000af	83 c9 01	 or	 ecx, 1
  000b2	89 4d a8	 mov	 DWORD PTR $T2[ebp], ecx
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  000bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 346  : }

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@lstrip
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	83 c4 60	 add	 esp, 96			; 00000060H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
  000f9	0f 1f 00	 npad	 3
$LN11@lstrip:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN10@lstrip
$LN10@lstrip:
  00104	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00108	1c 00 00 00	 DD	 28			; 0000001cH
  0010c	00 00 00 00	 DD	 $LN8@lstrip
$LN8@lstrip:
  00110	72		 DB	 114			; 00000072H
  00111	65		 DB	 101			; 00000065H
  00112	73		 DB	 115			; 00000073H
  00113	75		 DB	 117			; 00000075H
  00114	6c		 DB	 108			; 0000006cH
  00115	74		 DB	 116			; 00000074H
  00116	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _result$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z$2:
  00010	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	0f 84 0c 00 00
	00		 je	 $LN7@lstrip
  0001c	83 65 a8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@lstrip:
  00028	c3		 ret	 0
__ehhandler$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lstrip@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ENDP ; lstrip
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv182 = -240						; size = 4
tv65 = -236						; size = 4
tv180 = -232						; size = 4
tv135 = -228						; size = 4
tv177 = -224						; size = 4
tv75 = -220						; size = 4
$T2 = -216						; size = 4
$T3 = -210						; size = 1
$T4 = -209						; size = 1
$T5 = -208						; size = 28
$T6 = -180						; size = 28
_segment$ = -148					; size = 28
$T7 = -116						; size = 28
_segment$8 = -84					; size = 28
_delimlen$ = -52					; size = 4
_found$ = -48						; size = 4
_current$ = -44						; size = 4
_res$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_delim$ = 16						; size = 4
_bTrim$ = 20						; size = 1
?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z PROC ; split

; 316  : std::vector<std::string> split(const std::string &str, const std::string &delim, bool bTrim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	57		 push	 edi
  00018	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  0001e	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 317  :     std::vector<std::string> res;

  00048	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00050	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 318  :     size_t current = 0, found, delimlen = delim.size();

  00057	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _current$[ebp], 0
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _delim$[ebp]
  00061	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00066	89 45 cc	 mov	 DWORD PTR _delimlen$[ebp], eax
$LN2@split:

; 319  :     while (std::string::npos != (found = str.find(delim, current))) {

  00069	8b 45 d4	 mov	 eax, DWORD PTR _current$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _delim$[ebp]
  00070	51		 push	 ecx
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00074	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00079	89 45 d0	 mov	 DWORD PTR _found$[ebp], eax
  0007c	83 7d d0 ff	 cmp	 DWORD PTR _found$[ebp], -1
  00080	0f 84 af 00 00
	00		 je	 $LN3@split

; 320  :         auto segment = std::string(str, current, found - current);

  00086	8d 8d 2f ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00091	50		 push	 eax
  00092	8b 55 d0	 mov	 edx, DWORD PTR _found$[ebp]
  00095	2b 55 d4	 sub	 edx, DWORD PTR _current$[ebp]
  00098	52		 push	 edx
  00099	8b 45 d4	 mov	 eax, DWORD PTR _current$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000a0	51		 push	 ecx
  000a1	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  000a4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 321  :         if (bTrim) {

  000ad	0f b6 55 14	 movzx	 edx, BYTE PTR _bTrim$[ebp]
  000b1	85 d2		 test	 edx, edx
  000b3	74 46		 je	 SHORT $LN4@split

; 322  :             segment = trim(segment);

  000b5	68 00 00 00 00	 push	 OFFSET $SG116931
  000ba	8d 45 ac	 lea	 eax, DWORD PTR _segment$8[ebp]
  000bd	50		 push	 eax
  000be	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ; trim
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv75[ebp], eax
  000d0	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv75[ebp]
  000d6	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv177[ebp], edx
  000dc	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000e0	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  000e6	50		 push	 eax
  000e7	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  000ea	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000ef	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f3	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  000f6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@split:

; 323  :         }
; 324  :         if (!bTrim || segment.length()) {

  000fb	0f b6 4d 14	 movzx	 ecx, BYTE PTR _bTrim$[ebp]
  000ff	85 c9		 test	 ecx, ecx
  00101	74 0c		 je	 SHORT $LN6@split
  00103	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  00106	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  0010b	85 c0		 test	 eax, eax
  0010d	74 0c		 je	 SHORT $LN5@split
$LN6@split:

; 325  :             res.push_back(segment);

  0010f	8d 55 ac	 lea	 edx, DWORD PTR _segment$8[ebp]
  00112	52		 push	 edx
  00113	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00116	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
$LN5@split:

; 326  :         }
; 327  :         current = found + delimlen;

  0011b	8b 45 d0	 mov	 eax, DWORD PTR _found$[ebp]
  0011e	03 45 cc	 add	 eax, DWORD PTR _delimlen$[ebp]
  00121	89 45 d4	 mov	 DWORD PTR _current$[ebp], eax

; 328  :     }

  00124	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00128	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  0012b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00130	e9 34 ff ff ff	 jmp	 $LN2@split
$LN3@split:

; 329  :     auto segment = std::string(str, current, str.size() - current);

  00135	8d 8d 2e ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0013b	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00140	50		 push	 eax
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00144	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00149	2b 45 d4	 sub	 eax, DWORD PTR _current$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d d4	 mov	 ecx, DWORD PTR _current$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00154	52		 push	 edx
  00155	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  0015b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00160	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 330  :     if (bTrim) {

  00164	0f b6 45 14	 movzx	 eax, BYTE PTR _bTrim$[ebp]
  00168	85 c0		 test	 eax, eax
  0016a	74 52		 je	 SHORT $LN7@split

; 331  :         segment = trim(segment);

  0016c	68 00 00 00 00	 push	 OFFSET $SG116935
  00171	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  00177	51		 push	 ecx
  00178	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 ?trim@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@PBD@Z ; trim
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
  00187	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0018d	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00193	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], eax
  00199	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0019d	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv180[ebp]
  001a3	51		 push	 ecx
  001a4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001aa	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001af	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001b3	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001b9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@split:

; 332  :     }
; 333  :     if (!bTrim || segment.length()) {

  001be	0f b6 55 14	 movzx	 edx, BYTE PTR _bTrim$[ebp]
  001c2	85 d2		 test	 edx, edx
  001c4	74 0f		 je	 SHORT $LN9@split
  001c6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001cc	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  001d1	85 c0		 test	 eax, eax
  001d3	74 4b		 je	 SHORT $LN8@split
$LN9@split:

; 334  :         res.push_back(std::string(segment.c_str()));

  001d5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001db	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001e0	50		 push	 eax
  001e1	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001e7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ec	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  001f2	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  001f8	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], eax
  001fe	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00202	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv182[ebp]
  00208	51		 push	 ecx
  00209	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  0020c	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  00211	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00215	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0021b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@split:

; 335  :     }
; 336  :     return res;

  00220	8d 55 dc	 lea	 edx, DWORD PTR _res$[ebp]
  00223	52		 push	 edx
  00224	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00227	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0022c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00232	83 c8 01	 or	 eax, 1
  00235	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0023b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0023f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  00245	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0024a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0024e	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00251	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00256	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 337  : }

  00259	52		 push	 edx
  0025a	8b cd		 mov	 ecx, ebp
  0025c	50		 push	 eax
  0025d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@split
  00263	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00268	58		 pop	 eax
  00269	5a		 pop	 edx
  0026a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00274	59		 pop	 ecx
  00275	5f		 pop	 edi
  00276	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	33 cd		 xor	 ecx, ebp
  0027b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00280	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00286	3b ec		 cmp	 ebp, esp
  00288	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c3		 ret	 0
  00291	0f 1f 00	 npad	 3
$LN24@split:
  00294	03 00 00 00	 DD	 3
  00298	00 00 00 00	 DD	 $LN23@split
$LN23@split:
  0029c	dc ff ff ff	 DD	 -36			; ffffffdcH
  002a0	10 00 00 00	 DD	 16			; 00000010H
  002a4	00 00 00 00	 DD	 $LN19@split
  002a8	ac ff ff ff	 DD	 -84			; ffffffacH
  002ac	1c 00 00 00	 DD	 28			; 0000001cH
  002b0	00 00 00 00	 DD	 $LN20@split
  002b4	6c ff ff ff	 DD	 -148			; ffffff6cH
  002b8	1c 00 00 00	 DD	 28			; 0000001cH
  002bc	00 00 00 00	 DD	 $LN21@split
$LN21@split:
  002c0	73		 DB	 115			; 00000073H
  002c1	65		 DB	 101			; 00000065H
  002c2	67		 DB	 103			; 00000067H
  002c3	6d		 DB	 109			; 0000006dH
  002c4	65		 DB	 101			; 00000065H
  002c5	6e		 DB	 110			; 0000006eH
  002c6	74		 DB	 116			; 00000074H
  002c7	00		 DB	 0
$LN20@split:
  002c8	73		 DB	 115			; 00000073H
  002c9	65		 DB	 101			; 00000065H
  002ca	67		 DB	 103			; 00000067H
  002cb	6d		 DB	 109			; 0000006dH
  002cc	65		 DB	 101			; 00000065H
  002cd	6e		 DB	 110			; 0000006eH
  002ce	74		 DB	 116			; 00000074H
  002cf	00		 DB	 0
$LN19@split:
  002d0	72		 DB	 114			; 00000072H
  002d1	65		 DB	 101			; 00000065H
  002d2	73		 DB	 115			; 00000073H
  002d3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$2:
  00010	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$3:
  00018	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$4:
  00023	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$5:
  0002e	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z$6:
  00039	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0003f	83 e0 01	 and	 eax, 1
  00042	0f 84 0f 00 00
	00		 je	 $LN18@split
  00048	83 a5 28 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00052	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
$LN18@split:
  00057	c3		 ret	 0
__ehhandler$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?split@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0_N@Z ENDP ; split
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv182 = -240						; size = 4
tv65 = -236						; size = 4
tv180 = -232						; size = 4
tv135 = -228						; size = 4
tv177 = -224						; size = 4
tv75 = -220						; size = 4
$T2 = -216						; size = 4
$T3 = -210						; size = 1
$T4 = -209						; size = 1
$T5 = -208						; size = 28
$T6 = -180						; size = 28
_segment$ = -148					; size = 28
$T7 = -116						; size = 28
_segment$8 = -84					; size = 28
_delimlen$ = -52					; size = 4
_found$ = -48						; size = 4
_current$ = -44						; size = 4
_res$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_delim$ = 16						; size = 4
_bTrim$ = 20						; size = 1
?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z PROC ; split

; 292  : std::vector<std::wstring> split(const std::wstring &str, const std::wstring &delim, bool bTrim) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	57		 push	 edi
  00018	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  0001e	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 293  :     std::vector<std::wstring> res;

  00048	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00050	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 294  :     size_t current = 0, found, delimlen = delim.size();

  00057	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _current$[ebp], 0
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _delim$[ebp]
  00061	e8 00 00 00 00	 call	 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
  00066	89 45 cc	 mov	 DWORD PTR _delimlen$[ebp], eax
$LN2@split:

; 295  :     while (std::wstring::npos != (found = str.find(delim, current))) {

  00069	8b 45 d4	 mov	 eax, DWORD PTR _current$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _delim$[ebp]
  00070	51		 push	 ecx
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00074	e8 00 00 00 00	 call	 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
  00079	89 45 d0	 mov	 DWORD PTR _found$[ebp], eax
  0007c	83 7d d0 ff	 cmp	 DWORD PTR _found$[ebp], -1
  00080	0f 84 af 00 00
	00		 je	 $LN3@split

; 296  :         auto segment = std::wstring(str, current, found - current);

  00086	8d 8d 2f ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00091	50		 push	 eax
  00092	8b 55 d0	 mov	 edx, DWORD PTR _found$[ebp]
  00095	2b 55 d4	 sub	 edx, DWORD PTR _current$[ebp]
  00098	52		 push	 edx
  00099	8b 45 d4	 mov	 eax, DWORD PTR _current$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000a0	51		 push	 ecx
  000a1	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  000a4	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000a9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 297  :         if (bTrim) {

  000ad	0f b6 55 14	 movzx	 edx, BYTE PTR _bTrim$[ebp]
  000b1	85 d2		 test	 edx, edx
  000b3	74 46		 je	 SHORT $LN4@split

; 298  :             segment = trim(segment);

  000b5	68 00 00 00 00	 push	 OFFSET $SG116377
  000ba	8d 45 ac	 lea	 eax, DWORD PTR _segment$8[ebp]
  000bd	50		 push	 eax
  000be	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ; trim
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv75[ebp], eax
  000d0	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv75[ebp]
  000d6	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv177[ebp], edx
  000dc	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000e0	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  000e6	50		 push	 eax
  000e7	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  000ea	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
  000ef	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f3	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  000f6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN4@split:

; 299  :         }
; 300  :         if (!bTrim || segment.length()) {

  000fb	0f b6 4d 14	 movzx	 ecx, BYTE PTR _bTrim$[ebp]
  000ff	85 c9		 test	 ecx, ecx
  00101	74 0c		 je	 SHORT $LN6@split
  00103	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  00106	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  0010b	85 c0		 test	 eax, eax
  0010d	74 0c		 je	 SHORT $LN5@split
$LN6@split:

; 301  :             res.push_back(segment);

  0010f	8d 55 ac	 lea	 edx, DWORD PTR _segment$8[ebp]
  00112	52		 push	 edx
  00113	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00116	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
$LN5@split:

; 302  :         }
; 303  :         current = found + delimlen;

  0011b	8b 45 d0	 mov	 eax, DWORD PTR _found$[ebp]
  0011e	03 45 cc	 add	 eax, DWORD PTR _delimlen$[ebp]
  00121	89 45 d4	 mov	 DWORD PTR _current$[ebp], eax

; 304  :     }

  00124	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00128	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  0012b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00130	e9 34 ff ff ff	 jmp	 $LN2@split
$LN3@split:

; 305  :     auto segment = std::wstring(str, current, str.size() - current);

  00135	8d 8d 2e ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0013b	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00140	50		 push	 eax
  00141	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00144	e8 00 00 00 00	 call	 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
  00149	2b 45 d4	 sub	 eax, DWORD PTR _current$[ebp]
  0014c	50		 push	 eax
  0014d	8b 4d d4	 mov	 ecx, DWORD PTR _current$[ebp]
  00150	51		 push	 ecx
  00151	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00154	52		 push	 edx
  00155	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  0015b	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00160	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 306  :     if (bTrim) {

  00164	0f b6 45 14	 movzx	 eax, BYTE PTR _bTrim$[ebp]
  00168	85 c0		 test	 eax, eax
  0016a	74 52		 je	 SHORT $LN7@split

; 307  :         segment = trim(segment);

  0016c	68 00 00 00 00	 push	 OFFSET $SG116381
  00171	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  00177	51		 push	 ecx
  00178	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 ?trim@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@PB_W@Z ; trim
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
  00187	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0018d	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR tv135[ebp]
  00193	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv180[ebp], eax
  00199	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0019d	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv180[ebp]
  001a3	51		 push	 ecx
  001a4	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001aa	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
  001af	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001b3	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001b9	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@split:

; 308  :     }
; 309  :     if (!bTrim || segment.length()) {

  001be	0f b6 55 14	 movzx	 edx, BYTE PTR _bTrim$[ebp]
  001c2	85 d2		 test	 edx, edx
  001c4	74 0f		 je	 SHORT $LN9@split
  001c6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001cc	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  001d1	85 c0		 test	 eax, eax
  001d3	74 4b		 je	 SHORT $LN8@split
$LN9@split:

; 310  :         res.push_back(std::wstring(segment.c_str()));

  001d5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  001db	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  001e0	50		 push	 eax
  001e1	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001e7	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  001ec	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  001f2	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  001f8	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv182[ebp], eax
  001fe	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00202	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv182[ebp]
  00208	51		 push	 ecx
  00209	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  0020c	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::push_back
  00211	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00215	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0021b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN8@split:

; 311  :     }
; 312  :     return res;

  00220	8d 55 dc	 lea	 edx, DWORD PTR _res$[ebp]
  00223	52		 push	 edx
  00224	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00227	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  0022c	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00232	83 c8 01	 or	 eax, 1
  00235	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0023b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0023f	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  00245	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0024a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0024e	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00251	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
  00256	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : }

  00259	52		 push	 edx
  0025a	8b cd		 mov	 ecx, ebp
  0025c	50		 push	 eax
  0025d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@split
  00263	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00268	58		 pop	 eax
  00269	5a		 pop	 edx
  0026a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00274	59		 pop	 ecx
  00275	5f		 pop	 edi
  00276	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	33 cd		 xor	 ecx, ebp
  0027b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00280	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00286	3b ec		 cmp	 ebp, esp
  00288	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c3		 ret	 0
  00291	0f 1f 00	 npad	 3
$LN24@split:
  00294	03 00 00 00	 DD	 3
  00298	00 00 00 00	 DD	 $LN23@split
$LN23@split:
  0029c	dc ff ff ff	 DD	 -36			; ffffffdcH
  002a0	10 00 00 00	 DD	 16			; 00000010H
  002a4	00 00 00 00	 DD	 $LN19@split
  002a8	ac ff ff ff	 DD	 -84			; ffffffacH
  002ac	1c 00 00 00	 DD	 28			; 0000001cH
  002b0	00 00 00 00	 DD	 $LN20@split
  002b4	6c ff ff ff	 DD	 -148			; ffffff6cH
  002b8	1c 00 00 00	 DD	 28			; 0000001cH
  002bc	00 00 00 00	 DD	 $LN21@split
$LN21@split:
  002c0	73		 DB	 115			; 00000073H
  002c1	65		 DB	 101			; 00000065H
  002c2	67		 DB	 103			; 00000067H
  002c3	6d		 DB	 109			; 0000006dH
  002c4	65		 DB	 101			; 00000065H
  002c5	6e		 DB	 110			; 0000006eH
  002c6	74		 DB	 116			; 00000074H
  002c7	00		 DB	 0
$LN20@split:
  002c8	73		 DB	 115			; 00000073H
  002c9	65		 DB	 101			; 00000065H
  002ca	67		 DB	 103			; 00000067H
  002cb	6d		 DB	 109			; 0000006dH
  002cc	65		 DB	 101			; 00000065H
  002cd	6e		 DB	 110			; 0000006eH
  002ce	74		 DB	 116			; 00000074H
  002cf	00		 DB	 0
$LN19@split:
  002d0	72		 DB	 114			; 00000072H
  002d1	65		 DB	 101			; 00000065H
  002d2	73		 DB	 115			; 00000073H
  002d3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _res$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$1:
  00008	8d 4d ac	 lea	 ecx, DWORD PTR _segment$8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$2:
  00010	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$3:
  00018	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _segment$[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$4:
  00023	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$5:
  0002e	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z$6:
  00039	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0003f	83 e0 01	 and	 eax, 1
  00042	0f 84 0f 00 00
	00		 je	 $LN18@split
  00048	83 a5 28 ff ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00052	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
$LN18@split:
  00057	c3		 ret	 0
__ehhandler$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z:
  00058	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005f	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  00065	33 c8		 xor	 ecx, eax
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?split@@YA?AV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0_N@Z ENDP ; split
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -87						; size = 1
$T4 = -86						; size = 1
_retStr$ = -80						; size = 28
_buffer$ = -44						; size = 16
_len$ = -24						; size = 4
_args$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_format$ = 12						; size = 4
?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ PROC ; strsprintf

; 239  : std::string strsprintf(const char* format, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 240  :     if (format == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _format$[ebp], 0
  00043	75 25		 jne	 SHORT $LN2@strsprintf

; 241  :         return "";

  00045	68 00 00 00 00	 push	 OFFSET $SG115699
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	e9 a5 00 00 00	 jmp	 $LN1@strsprintf
$LN2@strsprintf:

; 242  :     }
; 243  :     va_list args;
; 244  :     va_start(args, format);

  0006a	8d 4d 10	 lea	 ecx, DWORD PTR _format$[ebp+4]
  0006d	89 4d ec	 mov	 DWORD PTR _args$[ebp], ecx

; 245  :     const size_t len = _vscprintf(format, args) + 1;

  00070	8b 55 ec	 mov	 edx, DWORD PTR _args$[ebp]
  00073	52		 push	 edx
  00074	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 __vscprintf
  0007d	83 c4 08	 add	 esp, 8
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 246  : 
; 247  :     std::vector<char> buffer(len, 0);

  00086	c6 45 a9 00	 mov	 BYTE PTR $T3[ebp], 0
  0008a	8d 4d aa	 lea	 ecx, DWORD PTR $T4[ebp]
  0008d	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00092	50		 push	 eax
  00093	8d 4d a9	 lea	 ecx, DWORD PTR $T3[ebp]
  00096	51		 push	 ecx
  00097	8b 55 e8	 mov	 edx, DWORD PTR _len$[ebp]
  0009a	52		 push	 edx
  0009b	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  000a3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 248  :     vsprintf(buffer.data(), format, args);

  000aa	8b 45 ec	 mov	 eax, DWORD PTR _args$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  000b1	51		 push	 ecx
  000b2	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b5	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _vsprintf
  000c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  :     va_end(args);

  000c3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 250  :     std::string retStr = std::string(buffer.data());

  000ca	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000cd	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000d2	50		 push	 eax
  000d3	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  000d6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000db	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 251  :     return retStr;

  000df	8d 55 b0	 lea	 edx, DWORD PTR _retStr$[ebp]
  000e2	52		 push	 edx
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000eb	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  000ee	83 c8 01	 or	 eax, 1
  000f1	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  000fb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00100	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00104	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00107	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  0010c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@strsprintf:

; 252  : }

  0010f	52		 push	 edx
  00110	8b cd		 mov	 ecx, ebp
  00112	50		 push	 eax
  00113	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@strsprintf
  00119	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011e	58		 pop	 eax
  0011f	5a		 pop	 edx
  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	5f		 pop	 edi
  0012c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012f	33 cd		 xor	 ecx, ebp
  00131	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00136	83 c4 5c	 add	 esp, 92			; 0000005cH
  00139	3b ec		 cmp	 ebp, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
$LN12@strsprintf:
  00144	02 00 00 00	 DD	 2
  00148	00 00 00 00	 DD	 $LN11@strsprintf
$LN11@strsprintf:
  0014c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00150	10 00 00 00	 DD	 16			; 00000010H
  00154	00 00 00 00	 DD	 $LN8@strsprintf
  00158	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0015c	1c 00 00 00	 DD	 28			; 0000001cH
  00160	00 00 00 00	 DD	 $LN9@strsprintf
$LN9@strsprintf:
  00164	72		 DB	 114			; 00000072H
  00165	65		 DB	 101			; 00000065H
  00166	74		 DB	 116			; 00000074H
  00167	53		 DB	 83			; 00000053H
  00168	74		 DB	 116			; 00000074H
  00169	72		 DB	 114			; 00000072H
  0016a	00		 DB	 0
$LN8@strsprintf:
  0016b	62		 DB	 98			; 00000062H
  0016c	75		 DB	 117			; 00000075H
  0016d	66		 DB	 102			; 00000066H
  0016e	66		 DB	 102			; 00000066H
  0016f	65		 DB	 101			; 00000065H
  00170	72		 DB	 114			; 00000072H
  00171	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$0:
  00000	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@strsprintf
  0000c	83 65 a4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@strsprintf:
  00018	c3		 ret	 0
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$1:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ$2:
  00021	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?strsprintf@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ENDP ; strsprintf
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_tstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC ; wstring_to_tstring

; 159  : tstring wstring_to_tstring(const std::wstring& wstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 160  :     tstring tstr;

  0003f	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 161  :     wstring_to_tstring(wstr.c_str(), tstr, codepage);

  0004e	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00051	50		 push	 eax
  00052	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR _wstr$[ebp]
  00059	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?wstring_to_tstring@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_tstring
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  :     return tstr;

  00067	8d 55 d0	 lea	 edx, DWORD PTR _tstr$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0007c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00088	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 163  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@wstring_to
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	83 c4 38	 add	 esp, 56			; 00000038H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN9@wstring_to:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN8@wstring_to
$LN8@wstring_to:
  000c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@wstring_to
$LN6@wstring_to:
  000d4	74		 DB	 116			; 00000074H
  000d5	73		 DB	 115			; 00000073H
  000d6	74		 DB	 116			; 00000074H
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$1:
  00008	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@wstring_to
  00014	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@wstring_to:
  00020	c3		 ret	 0
__ehhandler$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ENDP ; wstring_to_tstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_tstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z PROC ; wstring_to_tstring

; 150  : tstring wstring_to_tstring(const WCHAR *wstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 151  :     if (wstr == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _wstr$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@wstring_to

; 152  :         return _T("");

  00045	68 00 00 00 00	 push	 OFFSET $SG115235
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 47		 jmp	 SHORT $LN1@wstring_to
$LN2@wstring_to:

; 153  :     }
; 154  :     tstring tstr;

  00067	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 155  :     wstring_to_tstring(wstr, tstr, codepage);

  00076	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00079	51		 push	 ecx
  0007a	8d 55 d0	 lea	 edx, DWORD PTR _tstr$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _wstr$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?wstring_to_tstring@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_tstring
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 156  :     return tstr;

  0008a	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00096	8b 55 c8	 mov	 edx, DWORD PTR $T2[ebp]
  00099	83 ca 01	 or	 edx, 1
  0009c	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@wstring_to:

; 157  : }

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@wstring_to
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	83 c4 38	 add	 esp, 56			; 00000038H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@wstring_to:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN9@wstring_to
$LN9@wstring_to:
  000ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000f0	1c 00 00 00	 DD	 28			; 0000001cH
  000f4	00 00 00 00	 DD	 $LN7@wstring_to
$LN7@wstring_to:
  000f8	74		 DB	 116			; 00000074H
  000f9	73		 DB	 115			; 00000073H
  000fa	74		 DB	 116			; 00000074H
  000fb	72		 DB	 114			; 00000072H
  000fc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$0:
  00000	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@wstring_to
  0000c	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@wstring_to:
  00018	c3		 ret	 0
__unwindfunclet$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$1:
  00019	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?wstring_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z ENDP ; wstring_to_tstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
_wstr$ = 8						; size = 4
_tstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_tstring@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; wstring_to_tstring

; 137  : unsigned int wstring_to_tstring(const WCHAR *wstr, tstring& tstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  :     if (wstr == nullptr) {

  00003	83 7d 08 00	 cmp	 DWORD PTR _wstr$[ebp], 0
  00007	75 11		 jne	 SHORT $LN2@wstring_to

; 139  :         tstr = _T("");

  00009	68 00 00 00 00	 push	 OFFSET $SG115227
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _tstr$[ebp]
  00011	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 140  :         return 0;

  00016	33 c0		 xor	 eax, eax
  00018	eb 1e		 jmp	 SHORT $LN1@wstring_to
$LN2@wstring_to:

; 141  :     }
; 142  : #if UNICODE
; 143  :     tstr = std::wstring(wstr);
; 144  : #else
; 145  :     return wstring_to_string(wstr, tstr, codepage);

  0001a	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _tstr$[ebp]
  00021	51		 push	 ecx
  00022	8b 55 08	 mov	 edx, DWORD PTR _wstr$[ebp]
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 ?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_string
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	eb 08		 jmp	 SHORT $LN1@wstring_to

; 146  : #endif
; 147  :     return (unsigned int)tstr.length();

  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _tstr$[ebp]
  00033	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
$LN1@wstring_to:

; 148  : }

  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?wstring_to_tstring@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; wstring_to_tstring
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_tstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z PROC ; char_to_tstring

; 234  : tstring char_to_tstring(const std::string& str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 235  :     tstring tstr;

  0003f	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 236  :     char_to_tstring(tstr, str.c_str(), codepage);

  0004e	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00055	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0005a	50		 push	 eax
  0005b	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  :     return tstr;

  00067	8d 55 d0	 lea	 edx, DWORD PTR _tstr$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0007c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00088	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 238  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@char_to_ts
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	83 c4 38	 add	 esp, 56			; 00000038H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN9@char_to_ts:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN8@char_to_ts
$LN8@char_to_ts:
  000c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@char_to_ts
$LN6@char_to_ts:
  000d4	74		 DB	 116			; 00000074H
  000d5	73		 DB	 115			; 00000073H
  000d6	74		 DB	 116			; 00000074H
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$1:
  00008	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@char_to_ts
  00014	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@char_to_ts:
  00020	c3		 ret	 0
__ehhandler$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z ENDP ; char_to_tstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_tstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z PROC ; char_to_tstring

; 226  : tstring char_to_tstring(const char *str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 227  :     if (str == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@char_to_ts

; 228  :         return _T("");

  00045	68 00 00 00 00	 push	 OFFSET $SG115642
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 47		 jmp	 SHORT $LN1@char_to_ts
$LN2@char_to_ts:

; 229  :     }
; 230  :     tstring tstr;

  00067	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 231  :     char_to_tstring(tstr, str, codepage);

  00076	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  0007d	52		 push	 edx
  0007e	8d 45 d0	 lea	 eax, DWORD PTR _tstr$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ; char_to_tstring
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  :     return tstr;

  0008a	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00096	8b 55 c8	 mov	 edx, DWORD PTR $T2[ebp]
  00099	83 ca 01	 or	 edx, 1
  0009c	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@char_to_ts:

; 233  : }

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@char_to_ts
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	83 c4 38	 add	 esp, 56			; 00000038H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@char_to_ts:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN9@char_to_ts
$LN9@char_to_ts:
  000ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000f0	1c 00 00 00	 DD	 28			; 0000001cH
  000f4	00 00 00 00	 DD	 $LN7@char_to_ts
$LN7@char_to_ts:
  000f8	74		 DB	 116			; 00000074H
  000f9	73		 DB	 115			; 00000073H
  000fa	74		 DB	 116			; 00000074H
  000fb	72		 DB	 114			; 00000072H
  000fc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0:
  00000	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@char_to_ts
  0000c	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@char_to_ts:
  00018	c3		 ret	 0
__unwindfunclet$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1:
  00019	8d 4d d0	 lea	 ecx, DWORD PTR _tstr$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_tstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ENDP ; char_to_tstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv89 = -100						; size = 4
tv95 = -96						; size = 4
tv77 = -92						; size = 4
tv84 = -88						; size = 4
tv94 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 28
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tstr$ = 8						; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z PROC ; char_to_tstring

; 217  : unsigned int char_to_tstring(tstring& tstr, const char *str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 218  : #if UNICODE
; 219  :     return char_to_wstring(tstr, str, codepage);
; 220  : #else
; 221  :     tstr = (str) ? std::string(str) : _T("");

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  00043	74 2d		 je	 SHORT $LN3@char_to_ts
  00045	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00048	50		 push	 eax
  00049	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00051	89 45 ac	 mov	 DWORD PTR tv94[ebp], eax
  00054	8b 4d ac	 mov	 ecx, DWORD PTR tv94[ebp]
  00057	89 4d a8	 mov	 DWORD PTR tv84[ebp], ecx
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	8b 55 b0	 mov	 edx, DWORD PTR $T2[ebp]
  00064	83 ca 01	 or	 edx, 1
  00067	89 55 b0	 mov	 DWORD PTR $T2[ebp], edx
  0006a	8b 45 a8	 mov	 eax, DWORD PTR tv84[ebp]
  0006d	89 45 a4	 mov	 DWORD PTR tv77[ebp], eax
  00070	eb 2c		 jmp	 SHORT $LN4@char_to_ts
$LN3@char_to_ts:
  00072	68 00 00 00 00	 push	 OFFSET $SG115634
  00077	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  0007a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007f	89 45 a0	 mov	 DWORD PTR tv95[ebp], eax
  00082	8b 4d a0	 mov	 ecx, DWORD PTR tv95[ebp]
  00085	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	8b 55 b0	 mov	 edx, DWORD PTR $T2[ebp]
  00092	83 ca 02	 or	 edx, 2
  00095	89 55 b0	 mov	 DWORD PTR $T2[ebp], edx
  00098	8b 45 9c	 mov	 eax, DWORD PTR tv89[ebp]
  0009b	89 45 a4	 mov	 DWORD PTR tv77[ebp], eax
$LN4@char_to_ts:
  0009e	8b 4d a4	 mov	 ecx, DWORD PTR tv77[ebp]
  000a1	89 4d b4	 mov	 DWORD PTR $T3[ebp], ecx
  000a4	8b 55 b4	 mov	 edx, DWORD PTR $T3[ebp]
  000a7	52		 push	 edx
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _tstr$[ebp]
  000ab	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b7	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  000ba	83 e0 02	 and	 eax, 2
  000bd	74 0c		 je	 SHORT $LN9@char_to_ts
  000bf	83 65 b0 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  000c3	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@char_to_ts:
  000cb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d2	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000d5	83 e1 01	 and	 ecx, 1
  000d8	74 0c		 je	 SHORT $LN10@char_to_ts
  000da	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000de	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  000e1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN10@char_to_ts:

; 222  :     return (unsigned int)tstr.length();

  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _tstr$[ebp]
  000e9	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length

; 223  : #endif
; 224  : }

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	83 c4 64	 add	 esp, 100		; 00000064H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0:
  00000	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@char_to_ts
  0000c	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@char_to_ts:
  00018	c3		 ret	 0
__unwindfunclet$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1:
  00019	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN8@char_to_ts
  00025	83 65 b0 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00029	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@char_to_ts:
  00031	c3		 ret	 0
__ehhandler$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_tstring@@YAIAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ENDP ; char_to_tstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_str$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_tstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z PROC ; tchar_to_string

; 131  : std::string tchar_to_string(const tstring& tstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 132  :     std::string str;

  0003f	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 133  :     tchar_to_string(tstr.c_str(), str, codepage);

  0004e	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00051	50		 push	 eax
  00052	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR _tstr$[ebp]
  00059	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; tchar_to_string
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 134  :     return str;

  00067	8d 55 d0	 lea	 edx, DWORD PTR _str$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0007c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00088	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 135  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@tchar_to_s
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	83 c4 38	 add	 esp, 56			; 00000038H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN9@tchar_to_s:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN8@tchar_to_s
$LN8@tchar_to_s:
  000c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@tchar_to_s
$LN6@tchar_to_s:
  000d4	73		 DB	 115			; 00000073H
  000d5	74		 DB	 116			; 00000074H
  000d6	72		 DB	 114			; 00000072H
  000d7	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z$1:
  00008	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@tchar_to_s
  00014	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@tchar_to_s:
  00020	c3		 ret	 0
__ehhandler$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@I@Z ENDP ; tchar_to_string
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_str$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_tstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z PROC ; tchar_to_string

; 107  : std::string tchar_to_string(const TCHAR *tstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 108  :     if (tstr == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _tstr$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@tchar_to_s

; 109  :         return "";

  00045	68 00 00 00 00	 push	 OFFSET $SG115198
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 47		 jmp	 SHORT $LN1@tchar_to_s
$LN2@tchar_to_s:

; 110  :     }
; 111  :     std::string str;

  00067	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 112  :     tchar_to_string(tstr, str, codepage);

  00076	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00079	51		 push	 ecx
  0007a	8d 55 d0	 lea	 edx, DWORD PTR _str$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _tstr$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; tchar_to_string
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  :     return str;

  0008a	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00096	8b 55 c8	 mov	 edx, DWORD PTR $T2[ebp]
  00099	83 ca 01	 or	 edx, 1
  0009c	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@tchar_to_s:

; 114  : }

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@tchar_to_s
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	83 c4 38	 add	 esp, 56			; 00000038H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@tchar_to_s:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN9@tchar_to_s
$LN9@tchar_to_s:
  000ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000f0	1c 00 00 00	 DD	 28			; 0000001cH
  000f4	00 00 00 00	 DD	 $LN7@tchar_to_s
$LN7@tchar_to_s:
  000f8	73		 DB	 115			; 00000073H
  000f9	74		 DB	 116			; 00000074H
  000fa	72		 DB	 114			; 00000072H
  000fb	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$0:
  00000	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@tchar_to_s
  0000c	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@tchar_to_s:
  00018	c3		 ret	 0
__unwindfunclet$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z$1:
  00019	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tchar_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDI@Z ENDP ; tchar_to_string
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv89 = -100						; size = 4
tv95 = -96						; size = 4
tv77 = -92						; size = 4
tv84 = -88						; size = 4
tv94 = -84						; size = 4
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 28
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tstr$ = 8						; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; tchar_to_string

; 98   : unsigned int tchar_to_string(const TCHAR *tstr, std::string& str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 99   : #if UNICODE
; 100  :     return wstring_to_string(tstr, str, codepage);
; 101  : #else
; 102  :     str = (tstr) ? std::string(tstr) : "";

  0003f	83 7d 08 00	 cmp	 DWORD PTR _tstr$[ebp], 0
  00043	74 2d		 je	 SHORT $LN3@tchar_to_s
  00045	8b 45 08	 mov	 eax, DWORD PTR _tstr$[ebp]
  00048	50		 push	 eax
  00049	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00051	89 45 ac	 mov	 DWORD PTR tv94[ebp], eax
  00054	8b 4d ac	 mov	 ecx, DWORD PTR tv94[ebp]
  00057	89 4d a8	 mov	 DWORD PTR tv84[ebp], ecx
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	8b 55 b0	 mov	 edx, DWORD PTR $T2[ebp]
  00064	83 ca 01	 or	 edx, 1
  00067	89 55 b0	 mov	 DWORD PTR $T2[ebp], edx
  0006a	8b 45 a8	 mov	 eax, DWORD PTR tv84[ebp]
  0006d	89 45 a4	 mov	 DWORD PTR tv77[ebp], eax
  00070	eb 2c		 jmp	 SHORT $LN4@tchar_to_s
$LN3@tchar_to_s:
  00072	68 00 00 00 00	 push	 OFFSET $SG115190
  00077	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  0007a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0007f	89 45 a0	 mov	 DWORD PTR tv95[ebp], eax
  00082	8b 4d a0	 mov	 ecx, DWORD PTR tv95[ebp]
  00085	89 4d 9c	 mov	 DWORD PTR tv89[ebp], ecx
  00088	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0008f	8b 55 b0	 mov	 edx, DWORD PTR $T2[ebp]
  00092	83 ca 02	 or	 edx, 2
  00095	89 55 b0	 mov	 DWORD PTR $T2[ebp], edx
  00098	8b 45 9c	 mov	 eax, DWORD PTR tv89[ebp]
  0009b	89 45 a4	 mov	 DWORD PTR tv77[ebp], eax
$LN4@tchar_to_s:
  0009e	8b 4d a4	 mov	 ecx, DWORD PTR tv77[ebp]
  000a1	89 4d b4	 mov	 DWORD PTR $T3[ebp], ecx
  000a4	8b 55 b4	 mov	 edx, DWORD PTR $T3[ebp]
  000a7	52		 push	 edx
  000a8	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000ab	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b7	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  000ba	83 e0 02	 and	 eax, 2
  000bd	74 0c		 je	 SHORT $LN9@tchar_to_s
  000bf	83 65 b0 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  000c3	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  000c6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN9@tchar_to_s:
  000cb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d2	8b 4d b0	 mov	 ecx, DWORD PTR $T2[ebp]
  000d5	83 e1 01	 and	 ecx, 1
  000d8	74 0c		 je	 SHORT $LN10@tchar_to_s
  000da	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  000de	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  000e1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN10@tchar_to_s:

; 103  :     return (unsigned int)str.length();

  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000e9	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length

; 104  : #endif
; 105  : }

  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	5f		 pop	 edi
  000fa	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	83 c4 64	 add	 esp, 100		; 00000064H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0:
  00000	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@tchar_to_s
  0000c	83 65 b0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@tchar_to_s:
  00018	c3		 ret	 0
__unwindfunclet$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$1:
  00019	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]
  0001c	83 e0 02	 and	 eax, 2
  0001f	0f 84 0c 00 00
	00		 je	 $LN8@tchar_to_s
  00025	83 65 b0 fd	 and	 DWORD PTR $T2[ebp], -3	; fffffffdH
  00029	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@tchar_to_s:
  00031	c3		 ret	 0
__ehhandler$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00046	33 c8		 xor	 ecx, eax
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  00052	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tchar_to_string@@YAIPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; tchar_to_string
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv84 = -56						; size = 4
tv66 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_tstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z PROC ; tchar_to_wstring

; 124  : std::wstring tchar_to_wstring(const TCHAR *tstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 125  :     if (tstr == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _tstr$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@tchar_to_w

; 126  :         return L"";

  00045	68 00 00 00 00	 push	 OFFSET $SG115213
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 48		 jmp	 SHORT $LN1@tchar_to_w
$LN2@tchar_to_w:

; 127  :     }
; 128  :     return tchar_to_wstring(tstring(tstr), codepage);

  00067	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  0006a	51		 push	 ecx
  0006b	8b 55 0c	 mov	 edx, DWORD PTR _tstr$[ebp]
  0006e	52		 push	 edx
  0006f	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  00072	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00077	89 45 cc	 mov	 DWORD PTR tv66[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR tv66[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR tv84[ebp], eax
  00080	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00087	8b 4d c8	 mov	 ecx, DWORD PTR tv84[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; tchar_to_wstring
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH
  00097	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0009a	83 c8 01	 or	 eax, 1
  0009d	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  000a0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a4	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  000a7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ac	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@tchar_to_w:

; 129  : }

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	83 c4 38	 add	 esp, 56			; 00000038H
  000c8	3b ec		 cmp	 ebp, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0:
  00000	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@tchar_to_w
  0000c	83 65 d0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@tchar_to_w:
  00018	c3		 ret	 0
__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$1:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ENDP ; tchar_to_wstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_tstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; tchar_to_wstring

; 116  : std::wstring tchar_to_wstring(const tstring& tstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 117  : #if UNICODE
; 118  :     return std::wstring(tstr);
; 119  : #else
; 120  :     return char_to_wstring(tstr, codepage);

  00031	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _tstr$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 ?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; char_to_wstring
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0004f	83 c8 01	 or	 eax, 1
  00052	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00055	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 121  : #endif
; 122  : }

  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	74 0c		 je	 SHORT $LN4@tchar_to_w
  00008	83 65 f0 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000f	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN4@tchar_to_w:
  00014	c3		 ret	 0
__ehhandler$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?tchar_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; tchar_to_wstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv88 = -1128						; size = 4
tv94 = -1124						; size = 4
tv86 = -1120						; size = 4
tv93 = -1116						; size = 4
$T2 = -1112						; size = 4
$T3 = -1108						; size = 32
$T4 = -1076						; size = 28
_exePath$ = -1044					; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; getExeDir

; 602  : tstring getExeDir() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 5c 04 00
	00		 sub	 esp, 1116		; 0000045cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 98 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1128]
  0001f	b9 17 01 00 00	 mov	 ecx, 279		; 00000117H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 a8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 603  :     TCHAR exePath[1024];
; 604  :     memset(exePath, 0, sizeof(exePath));

  00049	68 00 04 00 00	 push	 1024			; 00000400H
  0004e	6a 00		 push	 0
  00050	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _exePath$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _memset
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 605  :     GetModuleFileName(NULL, exePath, _countof(exePath));

  0005f	8b f4		 mov	 esi, esp
  00061	68 00 04 00 00	 push	 1024			; 00000400H
  00066	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _exePath$[ebp]
  0006c	51		 push	 ecx
  0006d	6a 00		 push	 0
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 606  :     return PathRemoveFileSpecFixed(tstring(exePath)).second;

  0007c	8d 95 ec fb ff
	ff		 lea	 edx, DWORD PTR _exePath$[ebp]
  00082	52		 push	 edx
  00083	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00089	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008e	89 85 a4 fb ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  00094	8b 85 a4 fb ff
	ff		 mov	 eax, DWORD PTR tv93[ebp]
  0009a	89 85 a0 fb ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000a0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a7	8b 8d a0 fb ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  000ad	51		 push	 ecx
  000ae	8d 95 ac fb ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; PathRemoveFileSpecFixed
  000ba	83 c4 08	 add	 esp, 8
  000bd	89 85 9c fb ff
	ff		 mov	 DWORD PTR tv94[ebp], eax
  000c3	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR tv94[ebp]
  000c9	89 85 98 fb ff
	ff		 mov	 DWORD PTR tv88[ebp], eax
  000cf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000d3	8b 8d 98 fb ff
	ff		 mov	 ecx, DWORD PTR tv88[ebp]
  000d9	83 c1 04	 add	 ecx, 4
  000dc	51		 push	 ecx
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e5	8b 95 a8 fb ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  000eb	83 ca 01	 or	 edx, 1
  000ee	89 95 a8 fb ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000fe	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
  00103	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00107	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0010d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00112	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 607  : }

  00115	52		 push	 edx
  00116	8b cd		 mov	 ecx, ebp
  00118	50		 push	 eax
  00119	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@getExeDir
  0011f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00124	58		 pop	 eax
  00125	5a		 pop	 edx
  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	81 c4 68 04 00
	00		 add	 esp, 1128		; 00000468H
  00143	3b ec		 cmp	 ebp, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
  0014e	66 90		 npad	 2
$LN10@getExeDir:
  00150	01 00 00 00	 DD	 1
  00154	00 00 00 00	 DD	 $LN9@getExeDir
$LN9@getExeDir:
  00158	ec fb ff ff	 DD	 -1044			; fffffbecH
  0015c	00 04 00 00	 DD	 1024			; 00000400H
  00160	00 00 00 00	 DD	 $LN7@getExeDir
$LN7@getExeDir:
  00164	65		 DB	 101			; 00000065H
  00165	78		 DB	 120			; 00000078H
  00166	65		 DB	 101			; 00000065H
  00167	50		 DB	 80			; 00000050H
  00168	61		 DB	 97			; 00000061H
  00169	74		 DB	 116			; 00000074H
  0016a	68		 DB	 104			; 00000068H
  0016b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  0000b	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
  00016	8b 85 a8 fb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	0f 84 0f 00 00
	00		 je	 $LN6@getExeDir
  00025	83 a5 a8 fb ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@getExeDir:
  00034	c3		 ret	 0
__ehhandler$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00035	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00039	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003c	8b 8a 98 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1128]
  00042	33 c8		 xor	 ecx, eax
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00058	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getExeDir@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; getExeDir
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv187 = -2592						; size = 4
tv86 = -2588						; size = 4
tv185 = -2584						; size = 4
tv138 = -2580						; size = 4
tv177 = -2576						; size = 4
tv65 = -2572						; size = 4
$T2 = -2568						; size = 4
$T3 = -2564						; size = 16
$T4 = -2548						; size = 28
$T5 = -2520						; size = 28
$T6 = -2492						; size = 28
_buf2$7 = -2460						; size = 1024
_hFind$ = -1432						; size = 4
_win32fd$ = -1424					; size = 320
$T8 = -1100						; size = 28
_buf$ = -1068						; size = 1024
_list$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pattern$ = 12						; size = 4
_dir$ = 16						; size = 4
?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; get_file_list

; 573  : std::vector<tstring> get_file_list(const tstring& pattern, const tstring& dir) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 0a 00
	00		 sub	 esp, 2580		; 00000a14H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd e0 f5 ff
	ff		 lea	 edi, DWORD PTR [ebp-2592]
  0001f	b9 85 02 00 00	 mov	 ecx, 645		; 00000285H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	c7 85 f8 f5 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 574  :     std::vector<tstring> list;

  00049	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00051	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 575  : 
; 576  :     TCHAR buf[1024];
; 577  :     PathCombine(buf, GetFullPath(dir.c_str()).c_str(), pattern.c_str());

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _pattern$[ebp]
  0005b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00060	8b f4		 mov	 esi, esp
  00062	50		 push	 eax
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _dir$[ebp]
  00066	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0006b	50		 push	 eax
  0006c	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetFullPath
  00078	83 c4 08	 add	 esp, 8
  0007b	89 85 f4 f5 ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  00081	8b 8d f4 f5 ff
	ff		 mov	 ecx, DWORD PTR tv65[ebp]
  00087	89 8d f0 f5 ff
	ff		 mov	 DWORD PTR tv177[ebp], ecx
  0008d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00091	8b 8d f0 f5 ff
	ff		 mov	 ecx, DWORD PTR tv177[ebp]
  00097	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0009c	50		 push	 eax
  0009d	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  000a3	52		 push	 edx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathCombineA@12
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b5	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 578  : 
; 579  :     WIN32_FIND_DATA win32fd;
; 580  :     HANDLE hFind = FindFirstFile(buf, &win32fd);

  000c0	8b f4		 mov	 esi, esp
  000c2	8d 85 70 fa ff
	ff		 lea	 eax, DWORD PTR _win32fd$[ebp]
  000c8	50		 push	 eax
  000c9	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  000cf	51		 push	 ecx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	89 85 68 fa ff
	ff		 mov	 DWORD PTR _hFind$[ebp], eax

; 581  : 
; 582  :     if (hFind == INVALID_HANDLE_VALUE) {

  000e3	83 bd 68 fa ff
	ff ff		 cmp	 DWORD PTR _hFind$[ebp], -1
  000ea	75 2f		 jne	 SHORT $LN4@get_file_l

; 583  :         return list;

  000ec	8d 55 dc	 lea	 edx, DWORD PTR _list$[ebp]
  000ef	52		 push	 edx
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f3	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  000f8	8b 85 f8 f5 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  000fe	83 c8 01	 or	 eax, 1
  00101	89 85 f8 f5 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00107	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0010b	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  0010e	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00113	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00116	e9 e8 01 00 00	 jmp	 $LN1@get_file_l
$LN4@get_file_l:

; 584  :     }
; 585  : 
; 586  :     do {
; 587  :         if ((win32fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
; 588  :             && _tcscmp(win32fd.cFileName, _T("..")) !=0
; 589  :             && _tcscmp(win32fd.cFileName, _T(".")) != 0) {

  0011b	8b 8d 70 fa ff
	ff		 mov	 ecx, DWORD PTR _win32fd$[ebp]
  00121	83 e1 10	 and	 ecx, 16			; 00000010H
  00124	0f 84 da 00 00
	00		 je	 $LN6@get_file_l
  0012a	68 00 00 00 00	 push	 OFFSET $SG118058
  0012f	8d 95 9c fa ff
	ff		 lea	 edx, DWORD PTR _win32fd$[ebp+44]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 __tcscmp
  0013b	83 c4 08	 add	 esp, 8
  0013e	85 c0		 test	 eax, eax
  00140	0f 84 be 00 00
	00		 je	 $LN6@get_file_l
  00146	68 00 00 00 00	 push	 OFFSET $SG118059
  0014b	8d 85 9c fa ff
	ff		 lea	 eax, DWORD PTR _win32fd$[ebp+44]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 __tcscmp
  00157	83 c4 08	 add	 esp, 8
  0015a	85 c0		 test	 eax, eax
  0015c	0f 84 a2 00 00
	00		 je	 $LN6@get_file_l

; 590  :             TCHAR buf2[1024];
; 591  :             PathCombine(buf2, dir.c_str(), win32fd.cFileName);

  00162	8b f4		 mov	 esi, esp
  00164	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _win32fd$[ebp+44]
  0016a	51		 push	 ecx
  0016b	8b 4d 10	 mov	 ecx, DWORD PTR _dir$[ebp]
  0016e	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00173	50		 push	 eax
  00174	8d 95 64 f6 ff
	ff		 lea	 edx, DWORD PTR _buf2$7[ebp]
  0017a	52		 push	 edx
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathCombineA@12
  00181	3b f4		 cmp	 esi, esp
  00183	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 592  :             vector_cat(list, get_file_list(pattern, buf2));

  00188	8d 85 64 f6 ff
	ff		 lea	 eax, DWORD PTR _buf2$7[ebp]
  0018e	50		 push	 eax
  0018f	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00195	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0019a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0019e	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 0c	 mov	 edx, DWORD PTR _pattern$[ebp]
  001a8	52		 push	 edx
  001a9	8d 85 fc f5 ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; get_file_list
  001b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b8	89 85 ec f5 ff
	ff		 mov	 DWORD PTR tv138[ebp], eax
  001be	8b 8d ec f5 ff
	ff		 mov	 ecx, DWORD PTR tv138[ebp]
  001c4	89 8d e8 f5 ff
	ff		 mov	 DWORD PTR tv185[ebp], ecx
  001ca	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001ce	8b 95 e8 f5 ff
	ff		 mov	 edx, DWORD PTR tv185[ebp]
  001d4	52		 push	 edx
  001d5	8d 45 dc	 lea	 eax, DWORD PTR _list$[ebp]
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ??$vector_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAXAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV01@@Z ; vector_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  001de	83 c4 08	 add	 esp, 8
  001e1	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001e5	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001eb	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  001f0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001f4	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 593  :         } else {

  001ff	e9 9a 00 00 00	 jmp	 $LN2@get_file_l
$LN6@get_file_l:

; 594  :             PathCombine(buf, GetFullPath(dir.c_str()).c_str(), win32fd.cFileName);

  00204	8b f4		 mov	 esi, esp
  00206	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _win32fd$[ebp+44]
  0020c	51		 push	 ecx
  0020d	8b 4d 10	 mov	 ecx, DWORD PTR _dir$[ebp]
  00210	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00215	50		 push	 eax
  00216	8d 95 28 f6 ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  0021c	52		 push	 edx
  0021d	e8 00 00 00 00	 call	 ?GetFullPath@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; GetFullPath
  00222	83 c4 08	 add	 esp, 8
  00225	89 85 e4 f5 ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  0022b	8b 85 e4 f5 ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  00231	89 85 e0 f5 ff
	ff		 mov	 DWORD PTR tv187[ebp], eax
  00237	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0023b	8b 8d e0 f5 ff
	ff		 mov	 ecx, DWORD PTR tv187[ebp]
  00241	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00246	50		 push	 eax
  00247	8d 8d d4 fb ff
	ff		 lea	 ecx, DWORD PTR _buf$[ebp]
  0024d	51		 push	 ecx
  0024e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathCombineA@12
  00254	3b f4		 cmp	 esi, esp
  00256	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0025f	8d 8d 28 f6 ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00265	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 595  :             list.push_back(buf);

  0026a	8d 95 d4 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00270	52		 push	 edx
  00271	8d 8d 0c f6 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00277	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0027c	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00280	8d 85 0c f6 ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00286	50		 push	 eax
  00287	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  0028a	e8 00 00 00 00	 call	 ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
  0028f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00293	8d 8d 0c f6 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00299	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN2@get_file_l:

; 596  :         }
; 597  :     } while (FindNextFile(hFind, &win32fd));

  0029e	8b f4		 mov	 esi, esp
  002a0	8d 8d 70 fa ff
	ff		 lea	 ecx, DWORD PTR _win32fd$[ebp]
  002a6	51		 push	 ecx
  002a7	8b 95 68 fa ff
	ff		 mov	 edx, DWORD PTR _hFind$[ebp]
  002ad	52		 push	 edx
  002ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  002b4	3b f4		 cmp	 esi, esp
  002b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002bb	85 c0		 test	 eax, eax
  002bd	0f 85 58 fe ff
	ff		 jne	 $LN4@get_file_l

; 598  :     FindClose(hFind);

  002c3	8b f4		 mov	 esi, esp
  002c5	8b 85 68 fa ff
	ff		 mov	 eax, DWORD PTR _hFind$[ebp]
  002cb	50		 push	 eax
  002cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
  002d2	3b f4		 cmp	 esi, esp
  002d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 599  :     return list;

  002d9	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  002dc	51		 push	 ecx
  002dd	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002e0	e8 00 00 00 00	 call	 ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  002e5	8b 95 f8 f5 ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  002eb	83 ca 01	 or	 edx, 1
  002ee	89 95 f8 f5 ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  002f4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002f8	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  002fb	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00300	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@get_file_l:

; 600  : }

  00303	52		 push	 edx
  00304	8b cd		 mov	 ecx, ebp
  00306	50		 push	 eax
  00307	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@get_file_l
  0030d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00312	58		 pop	 eax
  00313	5a		 pop	 edx
  00314	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00317	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0031e	59		 pop	 ecx
  0031f	5f		 pop	 edi
  00320	5e		 pop	 esi
  00321	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00324	33 cd		 xor	 ecx, ebp
  00326	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032b	81 c4 20 0a 00
	00		 add	 esp, 2592		; 00000a20H
  00331	3b ec		 cmp	 ebp, esp
  00333	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00338	8b e5		 mov	 esp, ebp
  0033a	5d		 pop	 ebp
  0033b	c3		 ret	 0
$LN23@get_file_l:
  0033c	04 00 00 00	 DD	 4
  00340	00 00 00 00	 DD	 $LN22@get_file_l
$LN22@get_file_l:
  00344	dc ff ff ff	 DD	 -36			; ffffffdcH
  00348	10 00 00 00	 DD	 16			; 00000010H
  0034c	00 00 00 00	 DD	 $LN17@get_file_l
  00350	d4 fb ff ff	 DD	 -1068			; fffffbd4H
  00354	00 04 00 00	 DD	 1024			; 00000400H
  00358	00 00 00 00	 DD	 $LN18@get_file_l
  0035c	70 fa ff ff	 DD	 -1424			; fffffa70H
  00360	40 01 00 00	 DD	 320			; 00000140H
  00364	00 00 00 00	 DD	 $LN19@get_file_l
  00368	64 f6 ff ff	 DD	 -2460			; fffff664H
  0036c	00 04 00 00	 DD	 1024			; 00000400H
  00370	00 00 00 00	 DD	 $LN20@get_file_l
$LN20@get_file_l:
  00374	62		 DB	 98			; 00000062H
  00375	75		 DB	 117			; 00000075H
  00376	66		 DB	 102			; 00000066H
  00377	32		 DB	 50			; 00000032H
  00378	00		 DB	 0
$LN19@get_file_l:
  00379	77		 DB	 119			; 00000077H
  0037a	69		 DB	 105			; 00000069H
  0037b	6e		 DB	 110			; 0000006eH
  0037c	33		 DB	 51			; 00000033H
  0037d	32		 DB	 50			; 00000032H
  0037e	66		 DB	 102			; 00000066H
  0037f	64		 DB	 100			; 00000064H
  00380	00		 DB	 0
$LN18@get_file_l:
  00381	62		 DB	 98			; 00000062H
  00382	75		 DB	 117			; 00000075H
  00383	66		 DB	 102			; 00000066H
  00384	00		 DB	 0
$LN17@get_file_l:
  00385	6c		 DB	 108			; 0000006cH
  00386	69		 DB	 105			; 00000069H
  00387	73		 DB	 115			; 00000073H
  00388	74		 DB	 116			; 00000074H
  00389	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _list$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$1:
  00008	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$2:
  00013	8b 85 f8 f5 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	0f 84 0f 00 00
	00		 je	 $LN12@get_file_l
  00022	83 a5 f8 f5 ff
	ff fe		 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00029	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
$LN12@get_file_l:
  00031	c3		 ret	 0
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$3:
  00032	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$4:
  0003d	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$5:
  00048	8d 8d 28 f6 ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z$6:
  00053	8d 8d 0c f6 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00059	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z:
  0005e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00062	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00065	8b 8a e0 f5 ff
	ff		 mov	 ecx, DWORD PTR [edx-2592]
  0006b	33 c8		 xor	 ecx, eax
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00075	33 c8		 xor	 ecx, eax
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
  00081	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?get_file_list@@YA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; get_file_list
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv90 = -92						; size = 4
$T2 = -87						; size = 1
$T3 = -86						; size = 1
$T4 = -85						; size = 1
$T5 = -84						; size = 28
_ret$ = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dir$ = 8						; size = 4
?CreateDirectoryRecursive@@YA_NPB_W@Z PROC		; CreateDirectoryRecursive

; 510  : bool CreateDirectoryRecursive(const WCHAR *dir) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDirectoryRecursive@@YA_NPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00019	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 511  :     if (PathIsDirectoryW(dir)) {

  00039	8b f4		 mov	 esi, esp
  0003b	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryW@4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	85 c0		 test	 eax, eax
  0004e	74 07		 je	 SHORT $LN2@CreateDire

; 512  :         return true;

  00050	b0 01		 mov	 al, 1
  00052	e9 d8 00 00 00	 jmp	 $LN1@CreateDire
$LN2@CreateDire:

; 513  :     }
; 514  :     if (!PathRootExists(dir)) {

  00057	8b 4d 08	 mov	 ecx, DWORD PTR _dir$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?PathRootExists@@YA_NPB_W@Z ; PathRootExists
  00060	83 c4 04	 add	 esp, 4
  00063	0f b6 d0	 movzx	 edx, al
  00066	85 d2		 test	 edx, edx
  00068	75 07		 jne	 SHORT $LN3@CreateDire

; 515  :         return false;

  0006a	32 c0		 xor	 al, al
  0006c	e9 be 00 00 00	 jmp	 $LN1@CreateDire
$LN3@CreateDire:

; 516  :     }
; 517  :     auto ret = PathRemoveFileSpecFixed(dir);

  00071	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00074	50		 push	 eax
  00075	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00087	51		 push	 ecx
  00088	8d 55 cc	 lea	 edx, DWORD PTR _ret$[ebp]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; PathRemoveFileSpecFixed
  00091	83 c4 08	 add	 esp, 8
  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00098	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  0009b	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >

; 518  :     if (ret.first == 0) {

  000a0	83 7d cc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  000a4	75 18		 jne	 SHORT $LN4@CreateDire

; 519  :         return false;

  000a6	c6 45 ab 00	 mov	 BYTE PTR $T4[ebp], 0
  000aa	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b1	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  000b4	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  000b9	8a 45 ab	 mov	 al, BYTE PTR $T4[ebp]
  000bc	eb 71		 jmp	 SHORT $LN1@CreateDire
$LN4@CreateDire:

; 520  :     }
; 521  :     if (!CreateDirectoryRecursive(ret.second.c_str())) {

  000be	8d 4d d0	 lea	 ecx, DWORD PTR _ret$[ebp+4]
  000c1	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ?CreateDirectoryRecursive@@YA_NPB_W@Z ; CreateDirectoryRecursive
  000cc	83 c4 04	 add	 esp, 4
  000cf	0f b6 c0	 movzx	 eax, al
  000d2	85 c0		 test	 eax, eax
  000d4	75 18		 jne	 SHORT $LN5@CreateDire

; 522  :         return false;

  000d6	c6 45 aa 00	 mov	 BYTE PTR $T3[ebp], 0
  000da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e1	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  000e4	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  000e9	8a 45 aa	 mov	 al, BYTE PTR $T3[ebp]
  000ec	eb 41		 jmp	 SHORT $LN1@CreateDire
$LN5@CreateDire:

; 523  :     }
; 524  :     return CreateDirectoryW(dir, NULL) != 0;

  000ee	8b f4		 mov	 esi, esp
  000f0	6a 00		 push	 0
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _dir$[ebp]
  000f5	51		 push	 ecx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryW@8
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	85 c0		 test	 eax, eax
  00105	74 09		 je	 SHORT $LN7@CreateDire
  00107	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  0010e	eb 07		 jmp	 SHORT $LN8@CreateDire
$LN7@CreateDire:
  00110	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN8@CreateDire:
  00117	8a 55 a4	 mov	 dl, BYTE PTR tv90[ebp]
  0011a	88 55 a9	 mov	 BYTE PTR $T2[ebp], dl
  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  00127	e8 00 00 00 00	 call	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  0012c	8a 45 a9	 mov	 al, BYTE PTR $T2[ebp]
$LN1@CreateDire:

; 525  : }

  0012f	52		 push	 edx
  00130	8b cd		 mov	 ecx, ebp
  00132	50		 push	 eax
  00133	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@CreateDire
  00139	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013e	58		 pop	 eax
  0013f	5a		 pop	 edx
  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00150	33 cd		 xor	 ecx, ebp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	83 c4 5c	 add	 esp, 92			; 0000005cH
  0015a	3b ec		 cmp	 ebp, esp
  0015c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
  00165	0f 1f 00	 npad	 3
$LN14@CreateDire:
  00168	01 00 00 00	 DD	 1
  0016c	00 00 00 00	 DD	 $LN13@CreateDire
$LN13@CreateDire:
  00170	cc ff ff ff	 DD	 -52			; ffffffccH
  00174	20 00 00 00	 DD	 32			; 00000020H
  00178	00 00 00 00	 DD	 $LN11@CreateDire
$LN11@CreateDire:
  0017c	72		 DB	 114			; 00000072H
  0017d	65		 DB	 101			; 00000065H
  0017e	74		 DB	 116			; 00000074H
  0017f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDirectoryRecursive@@YA_NPB_W@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?CreateDirectoryRecursive@@YA_NPB_W@Z$1:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR _ret$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__ehhandler$?CreateDirectoryRecursive@@YA_NPB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDirectoryRecursive@@YA_NPB_W@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDirectoryRecursive@@YA_NPB_W@Z ENDP		; CreateDirectoryRecursive
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -38						; size = 1
$T4 = -37						; size = 1
_buffer$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_dir$ = 12						; size = 4
_filename$ = 16						; size = 4
?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z PROC ; PathCombineS

; 479  : std::string PathCombineS(const std::string& dir, const std::string& filename) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 480  :     std::vector<char> buffer(dir.length() + filename.length() + 128, '\0');

  0004a	c6 45 da 00	 mov	 BYTE PTR $T3[ebp], 0
  0004e	8d 4d db	 lea	 ecx, DWORD PTR $T4[ebp]
  00051	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00056	50		 push	 eax
  00057	8d 45 da	 lea	 eax, DWORD PTR $T3[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _dir$[ebp]
  0005e	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  00063	8b f0		 mov	 esi, eax
  00065	8b 4d 10	 mov	 ecx, DWORD PTR _filename$[ebp]
  00068	e8 00 00 00 00	 call	 ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
  0006d	8d 8c 06 80 00
	00 00		 lea	 ecx, DWORD PTR [esi+eax+128]
  00074	51		 push	 ecx
  00075	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  0007d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 481  :     PathCombineA(buffer.data(), dir.c_str(), filename.c_str());

  00084	8b 4d 10	 mov	 ecx, DWORD PTR _filename$[ebp]
  00087	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0008c	8b f4		 mov	 esi, esp
  0008e	50		 push	 eax
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _dir$[ebp]
  00092	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00097	50		 push	 eax
  00098	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0009b	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathCombineA@12
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 482  :     return std::string(buffer.data());

  000ae	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b1	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000b6	50		 push	 eax
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000ba	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000bf	8b 55 d4	 mov	 edx, DWORD PTR $T2[ebp]
  000c2	83 ca 01	 or	 edx, 1
  000c5	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  000c8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000cc	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000cf	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  000d4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 483  : }

  000d7	52		 push	 edx
  000d8	8b cd		 mov	 ecx, ebp
  000da	50		 push	 eax
  000db	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PathCombin
  000e1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e6	58		 pop	 eax
  000e7	5a		 pop	 edx
  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5e		 pop	 esi
  000f4	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f7	3b ec		 cmp	 ebp, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
  00102	66 90		 npad	 2
$LN9@PathCombin:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN8@PathCombin
$LN8@PathCombin:
  0010c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00110	10 00 00 00	 DD	 16			; 00000010H
  00114	00 00 00 00	 DD	 $LN6@PathCombin
$LN6@PathCombin:
  00118	62		 DB	 98			; 00000062H
  00119	75		 DB	 117			; 00000075H
  0011a	66		 DB	 102			; 00000066H
  0011b	66		 DB	 102			; 00000066H
  0011c	65		 DB	 101			; 00000065H
  0011d	72		 DB	 114			; 00000072H
  0011e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z$1:
  00008	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@PathCombin
  00014	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@PathCombin:
  00020	c3		 ret	 0
__ehhandler$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathCombineS@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@0@Z ENDP ; PathCombineS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 2
$T4 = -37						; size = 1
_buffer$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_dir$ = 12						; size = 4
_filename$ = 16						; size = 4
?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z PROC ; PathCombineS

; 484  : std::wstring PathCombineS(const std::wstring& dir, const std::wstring& filename) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 485  :     std::vector<WCHAR> buffer(dir.length() + filename.length() + 128, '\0');

  0004a	33 c0		 xor	 eax, eax
  0004c	66 89 45 d8	 mov	 WORD PTR $T3[ebp], ax
  00050	8d 4d db	 lea	 ecx, DWORD PTR $T4[ebp]
  00053	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00058	50		 push	 eax
  00059	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0005c	51		 push	 ecx
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _dir$[ebp]
  00060	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  00065	8b f0		 mov	 esi, eax
  00067	8b 4d 10	 mov	 ecx, DWORD PTR _filename$[ebp]
  0006a	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  0006f	8d 94 06 80 00
	00 00		 lea	 edx, DWORD PTR [esi+eax+128]
  00076	52		 push	 edx
  00077	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0007a	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  0007f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 486  :     PathCombineW(buffer.data(), dir.c_str(), filename.c_str());

  00086	8b 4d 10	 mov	 ecx, DWORD PTR _filename$[ebp]
  00089	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0008e	8b f4		 mov	 esi, esp
  00090	50		 push	 eax
  00091	8b 4d 0c	 mov	 ecx, DWORD PTR _dir$[ebp]
  00094	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  00099	50		 push	 eax
  0009a	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0009d	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000a2	50		 push	 eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathCombineW@12
  000a9	3b f4		 cmp	 esi, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 487  :     return std::wstring(buffer.data());

  000b0	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b3	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000b8	50		 push	 eax
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000bc	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000c1	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  000c4	83 c8 01	 or	 eax, 1
  000c7	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000ca	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ce	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d1	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  000d6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 488  : }

  000d9	52		 push	 edx
  000da	8b cd		 mov	 ecx, ebp
  000dc	50		 push	 eax
  000dd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PathCombin
  000e3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e8	58		 pop	 eax
  000e9	5a		 pop	 edx
  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5e		 pop	 esi
  000f6	83 c4 2c	 add	 esp, 44			; 0000002cH
  000f9	3b ec		 cmp	 ebp, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN9@PathCombin:
  00104	01 00 00 00	 DD	 1
  00108	00 00 00 00	 DD	 $LN8@PathCombin
$LN8@PathCombin:
  0010c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00110	10 00 00 00	 DD	 16			; 00000010H
  00114	00 00 00 00	 DD	 $LN6@PathCombin
$LN6@PathCombin:
  00118	62		 DB	 98			; 00000062H
  00119	75		 DB	 117			; 00000075H
  0011a	66		 DB	 102			; 00000066H
  0011b	66		 DB	 102			; 00000066H
  0011c	65		 DB	 101			; 00000065H
  0011d	72		 DB	 114			; 00000072H
  0011e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__unwindfunclet$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z$1:
  00008	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@PathCombin
  00014	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@PathCombin:
  00020	c3		 ret	 0
__ehhandler$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathCombineS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@0@Z ENDP ; PathCombineS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_qtr$ = -20						; size = 4
_ptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z PROC ; PathRemoveExtensionS

; 471  : std::wstring PathRemoveExtensionS(const std::wstring& path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001c	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00023	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 472  :     const WCHAR *ptr = path.c_str();

  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00045	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0004a	89 45 f0	 mov	 DWORD PTR _ptr$[ebp], eax

; 473  :     WCHAR *qtr = PathFindExtensionW(ptr);

  0004d	8b f4		 mov	 esi, esp
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _ptr$[ebp]
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathFindExtensionW@4
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR _qtr$[ebp], eax

; 474  :     if (qtr == ptr || qtr == nullptr) {

  00063	8b 4d ec	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00066	3b 4d f0	 cmp	 ecx, DWORD PTR _ptr$[ebp]
  00069	74 06		 je	 SHORT $LN3@PathRemove
  0006b	83 7d ec 00	 cmp	 DWORD PTR _qtr$[ebp], 0
  0006f	75 21		 jne	 SHORT $LN2@PathRemove
$LN3@PathRemove:

; 475  :         return path;

  00071	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  00074	52		 push	 edx
  00075	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00078	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00084	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0008d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00090	eb 2a		 jmp	 SHORT $LN1@PathRemove
$LN2@PathRemove:

; 476  :     }
; 477  :     return path.substr(0, qtr - ptr);

  00092	8b 4d ec	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00095	2b 4d f0	 sub	 ecx, DWORD PTR _ptr$[ebp]
  00098	d1 f9		 sar	 ecx, 1
  0009a	51		 push	 ecx
  0009b	6a 00		 push	 0
  0009d	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000a0	52		 push	 edx
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000a4	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  000a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b0	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  000b3	83 c8 01	 or	 eax, 1
  000b6	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  000b9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@PathRemove:

; 478  : }

  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5e		 pop	 esi
  000c8	83 c4 18	 add	 esp, 24			; 00000018H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN6@PathRemove
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN6@PathRemove:
  00018	c3		 ret	 0
__ehhandler$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRemoveExtensionS@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@Z ENDP ; PathRemoveExtensionS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 4
$T3 = -68						; size = 4
$T4 = -64						; size = 4
_newPath$ = -56						; size = 28
_qtr$ = -24						; size = 4
_ptr$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; PathRemoveFileSpecFixed

; 452  : std::pair<int, std::wstring> PathRemoveFileSpecFixed(const std::wstring& path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  00019	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 453  :     const WCHAR *ptr = path.c_str();

  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00043	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  00048	89 45 ec	 mov	 DWORD PTR _ptr$[ebp], eax

; 454  :     WCHAR *qtr = PathFindFileNameW(ptr);

  0004b	8b f4		 mov	 esi, esp
  0004d	8b 45 ec	 mov	 eax, DWORD PTR _ptr$[ebp]
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathFindFileNameW@4
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	89 45 e8	 mov	 DWORD PTR _qtr$[ebp], eax

; 455  :     if (qtr == ptr) {

  00061	8b 4d e8	 mov	 ecx, DWORD PTR _qtr$[ebp]
  00064	3b 4d ec	 cmp	 ecx, DWORD PTR _ptr$[ebp]
  00067	75 30		 jne	 SHORT $LN2@PathRemove

; 456  :         return std::make_pair(0, path);

  00069	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  00070	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  00073	52		 push	 edx
  00074	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  00077	50		 push	 eax
  00078	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ??$make_pair@HABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const &>
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH
  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  0008e	83 ca 01	 or	 edx, 1
  00091	89 55 b8	 mov	 DWORD PTR $T2[ebp], edx
  00094	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00097	eb 64		 jmp	 SHORT $LN1@PathRemove
$LN2@PathRemove:

; 457  :     }
; 458  :     std::wstring newPath = path.substr(0, qtr - ptr - 1);

  00099	8b 45 e8	 mov	 eax, DWORD PTR _qtr$[ebp]
  0009c	2b 45 ec	 sub	 eax, DWORD PTR _ptr$[ebp]
  0009f	d1 f8		 sar	 eax, 1
  000a1	83 e8 01	 sub	 eax, 1
  000a4	50		 push	 eax
  000a5	6a 00		 push	 0
  000a7	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000ae	e8 00 00 00 00	 call	 ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
  000b3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 459  :     return std::make_pair((int)(path.length() - newPath.length()), newPath);

  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  000bd	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  000c2	8b f0		 mov	 esi, eax
  000c4	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000c7	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  000cc	2b f0		 sub	 esi, eax
  000ce	89 75 bc	 mov	 DWORD PTR $T3[ebp], esi
  000d1	8d 55 c8	 lea	 edx, DWORD PTR _newPath$[ebp]
  000d4	52		 push	 edx
  000d5	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ??$make_pair@HAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@$$QAHAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::make_pair<int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	8b 55 b8	 mov	 edx, DWORD PTR $T2[ebp]
  000e8	83 ca 01	 or	 edx, 1
  000eb	89 55 b8	 mov	 DWORD PTR $T2[ebp], edx
  000ee	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f2	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  000f5	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fa	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@PathRemove:

; 460  : }

  000fd	52		 push	 edx
  000fe	8b cd		 mov	 ecx, ebp
  00100	50		 push	 eax
  00101	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@PathRemove
  00107	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010c	58		 pop	 eax
  0010d	5a		 pop	 edx
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	83 c4 48	 add	 esp, 72			; 00000048H
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
  00133	90		 npad	 1
$LN10@PathRemove:
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN9@PathRemove
$LN9@PathRemove:
  0013c	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00140	1c 00 00 00	 DD	 28			; 0000001cH
  00144	00 00 00 00	 DD	 $LN7@PathRemove
$LN7@PathRemove:
  00148	6e		 DB	 110			; 0000006eH
  00149	65		 DB	 101			; 00000065H
  0014a	77		 DB	 119			; 00000077H
  0014b	50		 DB	 80			; 00000050H
  0014c	61		 DB	 97			; 00000061H
  0014d	74		 DB	 116			; 00000074H
  0014e	68		 DB	 104			; 00000068H
  0014f	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0:
  00000	8b 45 b8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@PathRemove
  0000c	83 65 b8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
$LN5@PathRemove:
  00018	c3		 ret	 0
__unwindfunclet$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1:
  00019	8d 4d c8	 lea	 ecx, DWORD PTR _newPath$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PathRemoveFileSpecFixed@@YA?AU?$pair@HV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; PathRemoveFileSpecFixed
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv79 = -60						; size = 8
tv72 = -50						; size = 1
_ret$ = -49						; size = 1
_fd$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_filepath$ = 8						; size = 4
_filesize$ = 12						; size = 4
?rgy_get_filesize@@YA_NPB_WPA_K@Z PROC			; rgy_get_filesize

; 566  : bool rgy_get_filesize(const WCHAR *filepath, uint64_t *filesize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 567  :     WIN32_FILE_ATTRIBUTE_DATA fd = { 0 };

  00021	33 c0		 xor	 eax, eax
  00023	89 45 d4	 mov	 DWORD PTR _fd$[ebp], eax
  00026	89 45 d8	 mov	 DWORD PTR _fd$[ebp+4], eax
  00029	89 45 dc	 mov	 DWORD PTR _fd$[ebp+8], eax
  0002c	89 45 e0	 mov	 DWORD PTR _fd$[ebp+12], eax
  0002f	89 45 e4	 mov	 DWORD PTR _fd$[ebp+16], eax
  00032	89 45 e8	 mov	 DWORD PTR _fd$[ebp+20], eax
  00035	89 45 ec	 mov	 DWORD PTR _fd$[ebp+24], eax
  00038	89 45 f0	 mov	 DWORD PTR _fd$[ebp+28], eax
  0003b	89 45 f4	 mov	 DWORD PTR _fd$[ebp+32], eax

; 568  :     bool ret = (GetFileAttributesExW(filepath, GetFileExInfoStandard, &fd)) ? true : false;

  0003e	8b f4		 mov	 esi, esp
  00040	8d 4d d4	 lea	 ecx, DWORD PTR _fd$[ebp]
  00043	51		 push	 ecx
  00044	6a 00		 push	 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _filepath$[ebp]
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileAttributesExW@12
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	85 c0		 test	 eax, eax
  00059	74 06		 je	 SHORT $LN3@rgy_get_fi
  0005b	c6 45 ce 01	 mov	 BYTE PTR tv72[ebp], 1
  0005f	eb 04		 jmp	 SHORT $LN4@rgy_get_fi
$LN3@rgy_get_fi:
  00061	c6 45 ce 00	 mov	 BYTE PTR tv72[ebp], 0
$LN4@rgy_get_fi:
  00065	8a 45 ce	 mov	 al, BYTE PTR tv72[ebp]
  00068	88 45 cf	 mov	 BYTE PTR _ret$[ebp], al

; 569  :     *filesize = (ret) ? (((UINT64)fd.nFileSizeHigh) << 32) + (UINT64)fd.nFileSizeLow : NULL;

  0006b	0f b6 4d cf	 movzx	 ecx, BYTE PTR _ret$[ebp]
  0006f	85 c9		 test	 ecx, ecx
  00071	74 1b		 je	 SHORT $LN5@rgy_get_fi
  00073	33 d2		 xor	 edx, edx
  00075	8b 45 f0	 mov	 eax, DWORD PTR _fd$[ebp+28]
  00078	b1 20		 mov	 cl, 32			; 00000020H
  0007a	e8 00 00 00 00	 call	 __allshl
  0007f	33 c9		 xor	 ecx, ecx
  00081	03 45 f4	 add	 eax, DWORD PTR _fd$[ebp+32]
  00084	13 d1		 adc	 edx, ecx
  00086	89 45 c4	 mov	 DWORD PTR tv79[ebp], eax
  00089	89 55 c8	 mov	 DWORD PTR tv79[ebp+4], edx
  0008c	eb 08		 jmp	 SHORT $LN6@rgy_get_fi
$LN5@rgy_get_fi:
  0008e	0f 57 c0	 xorps	 xmm0, xmm0
  00091	66 0f 13 45 c4	 movlpd	 QWORD PTR tv79[ebp], xmm0
$LN6@rgy_get_fi:
  00096	8b 55 0c	 mov	 edx, DWORD PTR _filesize$[ebp]
  00099	8b 45 c4	 mov	 eax, DWORD PTR tv79[ebp]
  0009c	89 02		 mov	 DWORD PTR [edx], eax
  0009e	8b 4d c8	 mov	 ecx, DWORD PTR tv79[ebp+4]
  000a1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 570  :     return ret;

  000a4	8a 45 cf	 mov	 al, BYTE PTR _ret$[ebp]

; 571  : }

  000a7	52		 push	 edx
  000a8	8b cd		 mov	 ecx, ebp
  000aa	50		 push	 eax
  000ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@rgy_get_fi
  000b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b6	58		 pop	 eax
  000b7	5a		 pop	 edx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
  000d2	66 90		 npad	 2
$LN9@rgy_get_fi:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN8@rgy_get_fi
$LN8@rgy_get_fi:
  000dc	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000e0	24 00 00 00	 DD	 36			; 00000024H
  000e4	00 00 00 00	 DD	 $LN7@rgy_get_fi
$LN7@rgy_get_fi:
  000e8	66		 DB	 102			; 00000066H
  000e9	64		 DB	 100			; 00000064H
  000ea	00		 DB	 0
?rgy_get_filesize@@YA_NPB_WPA_K@Z ENDP			; rgy_get_filesize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 2
$T4 = -37						; size = 1
_buffer$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z PROC ; GetFullPath

; 406  : std::wstring GetFullPath(const WCHAR *path) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 407  :     if (PathIsRelativeW(path) == FALSE)

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsRelativeW@4
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	85 c0		 test	 eax, eax
  0005f	75 24		 jne	 SHORT $LN2@GetFullPat

; 408  :         return std::wstring(path);

  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _path$[ebp]
  00064	51		 push	 ecx
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	8b 55 d4	 mov	 edx, DWORD PTR $T2[ebp]
  00077	83 ca 01	 or	 edx, 1
  0007a	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  0007d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00080	e9 8f 00 00 00	 jmp	 $LN1@GetFullPat
$LN2@GetFullPat:

; 409  : 
; 410  :     std::vector<WCHAR> buffer(wcslen(path) + 1024, 0);

  00085	33 c0		 xor	 eax, eax
  00087	66 89 45 d8	 mov	 WORD PTR $T3[ebp], ax
  0008b	8d 4d db	 lea	 ecx, DWORD PTR $T4[ebp]
  0008e	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00093	50		 push	 eax
  00094	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00097	51		 push	 ecx
  00098	8b f4		 mov	 esi, esp
  0009a	8b 55 0c	 mov	 edx, DWORD PTR _path$[ebp]
  0009d	52		 push	 edx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000a4	83 c4 04	 add	 esp, 4
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	05 00 04 00 00	 add	 eax, 1024		; 00000400H
  000b3	50		 push	 eax
  000b4	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  000bc	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 411  :     _wfullpath(buffer.data(), path, buffer.size());

  000c3	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000c6	e8 00 00 00 00	 call	 ?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
  000cb	8b f4		 mov	 esi, esp
  000cd	50		 push	 eax
  000ce	8b 45 0c	 mov	 eax, DWORD PTR _path$[ebp]
  000d1	50		 push	 eax
  000d2	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000d5	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000da	50		 push	 eax
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wfullpath
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e4	3b f4		 cmp	 esi, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 412  :     return std::wstring(buffer.data());

  000eb	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000ee	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000f3	50		 push	 eax
  000f4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f7	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000fc	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
  000ff	83 c9 01	 or	 ecx, 1
  00102	89 4d d4	 mov	 DWORD PTR $T2[ebp], ecx
  00105	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00109	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0010c	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  00111	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@GetFullPat:

; 413  : }

  00114	52		 push	 edx
  00115	8b cd		 mov	 ecx, ebp
  00117	50		 push	 eax
  00118	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@GetFullPat
  0011e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00123	58		 pop	 eax
  00124	5a		 pop	 edx
  00125	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00128	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012f	59		 pop	 ecx
  00130	5e		 pop	 esi
  00131	83 c4 2c	 add	 esp, 44			; 0000002cH
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
  0013f	90		 npad	 1
$LN10@GetFullPat:
  00140	01 00 00 00	 DD	 1
  00144	00 00 00 00	 DD	 $LN9@GetFullPat
$LN9@GetFullPat:
  00148	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0014c	10 00 00 00	 DD	 16			; 00000010H
  00150	00 00 00 00	 DD	 $LN7@GetFullPat
$LN7@GetFullPat:
  00154	62		 DB	 98			; 00000062H
  00155	75		 DB	 117			; 00000075H
  00156	66		 DB	 102			; 00000066H
  00157	66		 DB	 102			; 00000066H
  00158	65		 DB	 101			; 00000065H
  00159	72		 DB	 114			; 00000072H
  0015a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0:
  00000	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@GetFullPat
  0000c	83 65 d4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@GetFullPat:
  00018	c3		 ret	 0
__unwindfunclet$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1:
  00019	8d 4d e0	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__ehhandler$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFullPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ENDP ; GetFullPath
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -20						; size = 4
_pos$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 28
_from$ = 40						; size = 4
_to$ = 44						; size = 4
?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z PROC ; str_replace

; 280  : std::wstring str_replace(std::wstring str, const std::wstring& from, const std::wstring& to) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 281  :     std::wstring::size_type pos = 0;

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
$LN2@str_replac:

; 282  :     while (pos = str.find(from, pos), pos != std::wstring::npos) {

  00048	8b 45 f0	 mov	 eax, DWORD PTR _pos$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 28	 mov	 ecx, DWORD PTR _from$[ebp]
  0004f	51		 push	 ecx
  00050	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00053	e8 00 00 00 00	 call	 ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
  00058	89 45 f0	 mov	 DWORD PTR _pos$[ebp], eax
  0005b	83 7d f0 ff	 cmp	 DWORD PTR _pos$[ebp], -1
  0005f	74 29		 je	 SHORT $LN3@str_replac

; 283  :         str.replace(pos, from.length(), to);

  00061	8b 55 2c	 mov	 edx, DWORD PTR _to$[ebp]
  00064	52		 push	 edx
  00065	8b 4d 28	 mov	 ecx, DWORD PTR _from$[ebp]
  00068	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  0006d	50		 push	 eax
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _pos$[ebp]
  00071	50		 push	 eax
  00072	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00075	e8 00 00 00 00	 call	 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace

; 284  :         pos += to.length();

  0007a	8b 4d 2c	 mov	 ecx, DWORD PTR _to$[ebp]
  0007d	e8 00 00 00 00	 call	 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
  00082	03 45 f0	 add	 eax, DWORD PTR _pos$[ebp]
  00085	89 45 f0	 mov	 DWORD PTR _pos$[ebp], eax

; 285  :     }

  00088	eb be		 jmp	 SHORT $LN2@str_replac
$LN3@str_replac:

; 286  :     return std::move(str);

  0008a	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
  00093	83 c4 04	 add	 esp, 4
  00096	50		 push	 eax
  00097	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0009f	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp]
  000a2	83 ca 01	 or	 edx, 1
  000a5	89 55 ec	 mov	 DWORD PTR $T2[ebp], edx
  000a8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000ac	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  000af	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000b4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 287  : }

  000b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c1	59		 pop	 ecx
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN7@str_replac
  00014	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN7@str_replac:
  00020	c3		 ret	 0
__ehhandler$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str_replace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ENDP ; str_replace
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 2
$T4 = -86						; size = 1
_retStr$ = -80						; size = 28
_buffer$ = -44						; size = 16
_len$ = -24						; size = 4
_args$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_format$ = 12						; size = 4
?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ PROC ; strsprintf

; 254  : std::wstring strsprintf(const WCHAR* format, ...) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 255  :     if (format == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _format$[ebp], 0
  00043	75 25		 jne	 SHORT $LN2@strsprintf

; 256  :         return L"";

  00045	68 00 00 00 00	 push	 OFFSET $SG115724
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	e9 a7 00 00 00	 jmp	 $LN1@strsprintf
$LN2@strsprintf:

; 257  :     }
; 258  :     va_list args;
; 259  :     va_start(args, format);

  0006a	8d 4d 10	 lea	 ecx, DWORD PTR _format$[ebp+4]
  0006d	89 4d ec	 mov	 DWORD PTR _args$[ebp], ecx

; 260  :     const size_t len = _vscwprintf(format, args) + 1;

  00070	8b 55 ec	 mov	 edx, DWORD PTR _args$[ebp]
  00073	52		 push	 edx
  00074	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 __vscwprintf
  0007d	83 c4 08	 add	 esp, 8
  00080	83 c0 01	 add	 eax, 1
  00083	89 45 e8	 mov	 DWORD PTR _len$[ebp], eax

; 261  : 
; 262  :     std::vector<WCHAR> buffer(len, 0);

  00086	33 c9		 xor	 ecx, ecx
  00088	66 89 4d a8	 mov	 WORD PTR $T3[ebp], cx
  0008c	8d 4d aa	 lea	 ecx, DWORD PTR $T4[ebp]
  0008f	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00094	50		 push	 eax
  00095	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00098	52		 push	 edx
  00099	8b 45 e8	 mov	 eax, DWORD PTR _len$[ebp]
  0009c	50		 push	 eax
  0009d	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000a0	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  000a5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 263  :     vswprintf(buffer.data(), format, args);

  000ac	8b 4d ec	 mov	 ecx, DWORD PTR _args$[ebp]
  000af	51		 push	 ecx
  000b0	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  000b3	52		 push	 edx
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000b7	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?vswprintf@@YAHQA_WQB_WPAD@Z ; vswprintf
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 264  :     va_end(args);

  000c5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 265  :     std::wstring retStr = std::wstring(buffer.data());

  000cc	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  000cf	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000d4	50		 push	 eax
  000d5	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  000d8	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000dd	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 266  :     return retStr;

  000e1	8d 45 b0	 lea	 eax, DWORD PTR _retStr$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e8	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ed	8b 4d a4	 mov	 ecx, DWORD PTR $T2[ebp]
  000f0	83 c9 01	 or	 ecx, 1
  000f3	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  000f6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000fa	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  000fd	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00102	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00106	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  00109	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  0010e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@strsprintf:

; 267  : }

  00111	52		 push	 edx
  00112	8b cd		 mov	 ecx, ebp
  00114	50		 push	 eax
  00115	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@strsprintf
  0011b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00120	58		 pop	 eax
  00121	5a		 pop	 edx
  00122	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00125	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012c	59		 pop	 ecx
  0012d	5f		 pop	 edi
  0012e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00131	33 cd		 xor	 ecx, ebp
  00133	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00138	83 c4 5c	 add	 esp, 92			; 0000005cH
  0013b	3b ec		 cmp	 ebp, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
  00146	66 90		 npad	 2
$LN12@strsprintf:
  00148	02 00 00 00	 DD	 2
  0014c	00 00 00 00	 DD	 $LN11@strsprintf
$LN11@strsprintf:
  00150	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00154	10 00 00 00	 DD	 16			; 00000010H
  00158	00 00 00 00	 DD	 $LN8@strsprintf
  0015c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00160	1c 00 00 00	 DD	 28			; 0000001cH
  00164	00 00 00 00	 DD	 $LN9@strsprintf
$LN9@strsprintf:
  00168	72		 DB	 114			; 00000072H
  00169	65		 DB	 101			; 00000065H
  0016a	74		 DB	 116			; 00000074H
  0016b	53		 DB	 83			; 00000053H
  0016c	74		 DB	 116			; 00000074H
  0016d	72		 DB	 114			; 00000072H
  0016e	00		 DB	 0
$LN8@strsprintf:
  0016f	62		 DB	 98			; 00000062H
  00170	75		 DB	 117			; 00000075H
  00171	66		 DB	 102			; 00000066H
  00172	66		 DB	 102			; 00000066H
  00173	65		 DB	 101			; 00000065H
  00174	72		 DB	 114			; 00000072H
  00175	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$0:
  00000	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@strsprintf
  0000c	83 65 a4 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@strsprintf:
  00018	c3		 ret	 0
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$1:
  00019	8d 4d d4	 lea	 ecx, DWORD PTR _buffer$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__unwindfunclet$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ$2:
  00021	8d 4d b0	 lea	 ecx, DWORD PTR _retStr$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003d	33 c8		 xor	 ecx, eax
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ
  00049	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?strsprintf@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WZZ ENDP ; strsprintf
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_wstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; char_to_wstring

; 211  : std::wstring char_to_wstring(const std::string& str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 212  :     std::wstring wstr;

  0003f	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 213  :     char_to_wstring(wstr, str.c_str(), codepage);

  0004e	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00055	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0005a	50		 push	 eax
  0005b	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; char_to_wstring
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  :     return wstr;

  00067	8d 55 d0	 lea	 edx, DWORD PTR _wstr$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00073	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0007c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00088	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 215  : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@char_to_ws
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	83 c4 38	 add	 esp, 56			; 00000038H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN9@char_to_ws:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN8@char_to_ws
$LN8@char_to_ws:
  000c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@char_to_ws
$LN6@char_to_ws:
  000d4	77		 DB	 119			; 00000077H
  000d5	73		 DB	 115			; 00000073H
  000d6	74		 DB	 116			; 00000074H
  000d7	72		 DB	 114			; 00000072H
  000d8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z$1:
  00008	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@char_to_ws
  00014	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@char_to_ws:
  00020	c3		 ret	 0
__ehhandler$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; char_to_wstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_wstr$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z PROC ; char_to_wstring

; 203  : std::wstring char_to_wstring(const char *str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 204  :     if (str == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@char_to_ws

; 205  :         return L"";

  00045	68 00 00 00 00	 push	 OFFSET $SG115616
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 47		 jmp	 SHORT $LN1@char_to_ws
$LN2@char_to_ws:

; 206  :     }
; 207  :     std::wstring wstr;

  00067	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 208  :     char_to_wstring(wstr, str, codepage);

  00076	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  0007d	52		 push	 edx
  0007e	8d 45 d0	 lea	 eax, DWORD PTR _wstr$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ; char_to_wstring
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  :     return wstr;

  0008a	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00096	8b 55 c8	 mov	 edx, DWORD PTR $T2[ebp]
  00099	83 ca 01	 or	 edx, 1
  0009c	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@char_to_ws:

; 210  : }

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@char_to_ws
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	83 c4 38	 add	 esp, 56			; 00000038H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@char_to_ws:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN9@char_to_ws
$LN9@char_to_ws:
  000ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000f0	1c 00 00 00	 DD	 28			; 0000001cH
  000f4	00 00 00 00	 DD	 $LN7@char_to_ws
$LN7@char_to_ws:
  000f8	77		 DB	 119			; 00000077H
  000f9	73		 DB	 115			; 00000073H
  000fa	74		 DB	 116			; 00000074H
  000fb	72		 DB	 114			; 00000072H
  000fc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0:
  00000	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@char_to_ws
  0000c	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@char_to_ws:
  00018	c3		 ret	 0
__unwindfunclet$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$1:
  00019	8d 4d d0	 lea	 ecx, DWORD PTR _wstr$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_wstring@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ENDP ; char_to_wstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 4
$T3 = -48						; size = 4
$T4 = -44						; size = 2
$T5 = -41						; size = 1
_tmp$ = -36						; size = 16
_widechar_length$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wstr$ = 8						; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z PROC ; char_to_wstring

; 166  : unsigned int char_to_wstring(std::wstring& wstr, const char *str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 167  :     if (str == nullptr) {

  00036	83 7d 0c 00	 cmp	 DWORD PTR _str$[ebp], 0
  0003a	75 14		 jne	 SHORT $LN2@char_to_ws

; 168  :         wstr = L"";

  0003c	68 00 00 00 00	 push	 OFFSET $SG115602
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _wstr$[ebp]
  00044	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=

; 169  :         return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 c5 00 00 00	 jmp	 $LN1@char_to_ws
$LN2@char_to_ws:

; 170  :     }
; 171  :     int widechar_length = MultiByteToWideChar(codepage, 0, str, -1, nullptr, 0);

  00050	8b f4		 mov	 esi, esp
  00052	6a 00		 push	 0
  00054	6a 00		 push	 0
  00056	6a ff		 push	 -1
  00058	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  0005b	50		 push	 eax
  0005c	6a 00		 push	 0
  0005e	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00061	51		 push	 ecx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 f0	 mov	 DWORD PTR _widechar_length$[ebp], eax

; 172  :     std::vector<wchar_t> tmp(widechar_length, 0);

  00072	33 d2		 xor	 edx, edx
  00074	66 89 55 d4	 mov	 WORD PTR $T4[ebp], dx
  00078	8d 4d d7	 lea	 ecx, DWORD PTR $T5[ebp]
  0007b	e8 00 00 00 00	 call	 ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>
  00080	50		 push	 eax
  00081	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
  00084	50		 push	 eax
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _widechar_length$[ebp]
  00088	51		 push	 ecx
  00089	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$vector@_WV?$allocator@_W@std@@@std@@QAE@IAB_WABV?$allocator@_W@1@@Z ; std::vector<wchar_t,std::allocator<wchar_t> >::vector<wchar_t,std::allocator<wchar_t> >
  00091	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 173  :     if (0 == MultiByteToWideChar(codepage, 0, str, -1, tmp.data(), (int)tmp.size())) {

  00098	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0009b	e8 00 00 00 00	 call	 ?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::size
  000a0	8b f4		 mov	 esi, esp
  000a2	50		 push	 eax
  000a3	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000a6	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000ab	50		 push	 eax
  000ac	6a ff		 push	 -1
  000ae	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  000b1	52		 push	 edx
  000b2	6a 00		 push	 0
  000b4	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  000b7	50		 push	 eax
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	85 c0		 test	 eax, eax
  000c7	75 23		 jne	 SHORT $LN3@char_to_ws

; 174  :         wstr.clear();

  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _wstr$[ebp]
  000cc	e8 00 00 00 00	 call	 ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear

; 175  :         return 0;

  000d1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  000d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000df	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000e2	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  000e7	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  000ea	eb 29		 jmp	 SHORT $LN1@char_to_ws
$LN3@char_to_ws:

; 176  :     }
; 177  :     wstr = tmp.data();

  000ec	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000ef	e8 00 00 00 00	 call	 ?data@?$vector@_WV?$allocator@_W@std@@@std@@QAEPA_WXZ ; std::vector<wchar_t,std::allocator<wchar_t> >::data
  000f4	50		 push	 eax
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _wstr$[ebp]
  000f8	e8 00 00 00 00	 call	 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=

; 178  :     return widechar_length;

  000fd	8b 4d f0	 mov	 ecx, DWORD PTR _widechar_length$[ebp]
  00100	89 4d cc	 mov	 DWORD PTR $T2[ebp], ecx
  00103	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010a	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0010d	e8 00 00 00 00	 call	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
  00112	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@char_to_ws:

; 179  : }

  00115	52		 push	 edx
  00116	8b cd		 mov	 ecx, ebp
  00118	50		 push	 eax
  00119	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@char_to_ws
  0011f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00124	58		 pop	 eax
  00125	5a		 pop	 edx
  00126	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00129	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00130	59		 pop	 ecx
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	83 c4 34	 add	 esp, 52			; 00000034H
  00136	3b ec		 cmp	 ebp, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
  00141	0f 1f 00	 npad	 3
$LN9@char_to_ws:
  00144	01 00 00 00	 DD	 1
  00148	00 00 00 00	 DD	 $LN8@char_to_ws
$LN8@char_to_ws:
  0014c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00150	10 00 00 00	 DD	 16			; 00000010H
  00154	00 00 00 00	 DD	 $LN6@char_to_ws
$LN6@char_to_ws:
  00158	74		 DB	 116			; 00000074H
  00159	6d		 DB	 109			; 0000006dH
  0015a	70		 DB	 112			; 00000070H
  0015b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ ; std::vector<wchar_t,std::allocator<wchar_t> >::~vector<wchar_t,std::allocator<wchar_t> >
__ehhandler$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?char_to_wstring@@YAIAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDI@Z ENDP ; char_to_wstring
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_str$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC ; wstring_to_string

; 92   : std::string wstring_to_string(const std::wstring& wstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 93   :     std::string str;

  0003f	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00047	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 94   :     wstring_to_string(wstr.c_str(), str, codepage);

  0004e	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00051	50		 push	 eax
  00052	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00055	51		 push	 ecx
  00056	8b 4d 0c	 mov	 ecx, DWORD PTR _wstr$[ebp]
  00059	e8 00 00 00 00	 call	 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_string
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 95   :     return str;

  00067	8d 55 d0	 lea	 edx, DWORD PTR _str$[ebp]
  0006a	52		 push	 edx
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00076	83 c8 01	 or	 eax, 1
  00079	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0007c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00083	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00088	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 96   : }

  0008b	52		 push	 edx
  0008c	8b cd		 mov	 ecx, ebp
  0008e	50		 push	 eax
  0008f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@wstring_to
  00095	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009a	58		 pop	 eax
  0009b	5a		 pop	 edx
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	83 c4 38	 add	 esp, 56			; 00000038H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN9@wstring_to:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN8@wstring_to
$LN8@wstring_to:
  000c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@wstring_to
$LN6@wstring_to:
  000d4	73		 DB	 115			; 00000073H
  000d5	74		 DB	 116			; 00000074H
  000d6	72		 DB	 114			; 00000072H
  000d7	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z$1:
  00008	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	83 e0 01	 and	 eax, 1
  0000e	0f 84 0c 00 00
	00		 je	 $LN5@wstring_to
  00014	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@wstring_to:
  00020	c3		 ret	 0
__ehhandler$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ENDP ; wstring_to_string
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_str$ = -48						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wstr$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z PROC ; wstring_to_string

; 83   : std::string wstring_to_string(const wchar_t *wstr, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 84   :     if (wstr == nullptr) {

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _wstr$[ebp], 0
  00043	75 22		 jne	 SHORT $LN2@wstring_to

; 85   :         return "";

  00045	68 00 00 00 00	 push	 OFFSET $SG115167
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	83 c8 01	 or	 eax, 1
  0005f	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00062	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00065	eb 47		 jmp	 SHORT $LN1@wstring_to
$LN2@wstring_to:

; 86   :     }
; 87   :     std::string str;

  00067	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 88   :     wstring_to_string(wstr, str, codepage);

  00076	8b 4d 10	 mov	 ecx, DWORD PTR _codepage$[ebp]
  00079	51		 push	 ecx
  0007a	8d 55 d0	 lea	 edx, DWORD PTR _str$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _wstr$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; wstring_to_string
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 89   :     return str;

  0008a	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00091	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00096	8b 55 c8	 mov	 edx, DWORD PTR $T2[ebp]
  00099	83 ca 01	 or	 edx, 1
  0009c	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0009f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a3	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  000a6	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ab	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@wstring_to:

; 90   : }

  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@wstring_to
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	83 c4 38	 add	 esp, 56			; 00000038H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@wstring_to:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN9@wstring_to
$LN9@wstring_to:
  000ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000f0	1c 00 00 00	 DD	 28			; 0000001cH
  000f4	00 00 00 00	 DD	 $LN7@wstring_to
$LN7@wstring_to:
  000f8	73		 DB	 115			; 00000073H
  000f9	74		 DB	 116			; 00000074H
  000fa	72		 DB	 114			; 00000072H
  000fb	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$0:
  00000	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@wstring_to
  0000c	83 65 c8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@wstring_to:
  00018	c3		 ret	 0
__unwindfunclet$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z$1:
  00019	8d 4d d0	 lea	 ecx, DWORD PTR _str$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?wstring_to_string@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_WI@Z ENDP ; wstring_to_string
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
_TEXT	SEGMENT
tv68 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -46						; size = 1
$T5 = -45						; size = 1
_tmp$ = -40						; size = 16
_multibyte_length$ = -20				; size = 4
_flags$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_wstr$ = 8						; size = 4
_str$ = 12						; size = 4
_codepage$ = 16						; size = 4
?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; wstring_to_string

; 50   : unsigned int wstring_to_string(const wchar_t *wstr, std::string& str, uint32_t codepage) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 51   :     if (wstr == nullptr) {

  00036	83 7d 08 00	 cmp	 DWORD PTR _wstr$[ebp], 0
  0003a	75 14		 jne	 SHORT $LN2@wstring_to

; 52   :         str = "";

  0003c	68 00 00 00 00	 push	 OFFSET $SG115156
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00044	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 53   :         return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 ee 00 00 00	 jmp	 $LN1@wstring_to
$LN2@wstring_to:

; 54   :     }
; 55   :     uint32_t flags = (codepage == CP_UTF8) ? 0 : WC_NO_BEST_FIT_CHARS;

  00050	81 7d 10 e9 fd
	00 00		 cmp	 DWORD PTR _codepage$[ebp], 65001 ; 0000fde9H
  00057	75 09		 jne	 SHORT $LN5@wstring_to
  00059	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  00060	eb 07		 jmp	 SHORT $LN6@wstring_to
$LN5@wstring_to:
  00062	c7 45 c4 00 04
	00 00		 mov	 DWORD PTR tv68[ebp], 1024 ; 00000400H
$LN6@wstring_to:
  00069	8b 45 c4	 mov	 eax, DWORD PTR tv68[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR _flags$[ebp], eax

; 56   :     int multibyte_length = WideCharToMultiByte(codepage, flags, wstr, -1, nullptr, 0, nullptr, nullptr);

  0006f	8b f4		 mov	 esi, esp
  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	6a ff		 push	 -1
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _wstr$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 f0	 mov	 edx, DWORD PTR _flags$[ebp]
  00082	52		 push	 edx
  00083	8b 45 10	 mov	 eax, DWORD PTR _codepage$[ebp]
  00086	50		 push	 eax
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	89 45 ec	 mov	 DWORD PTR _multibyte_length$[ebp], eax

; 57   :     std::vector<char> tmp(multibyte_length, 0);

  00097	c6 45 d2 00	 mov	 BYTE PTR $T4[ebp], 0
  0009b	8d 4d d3	 lea	 ecx, DWORD PTR $T5[ebp]
  0009e	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  000a3	50		 push	 eax
  000a4	8d 4d d2	 lea	 ecx, DWORD PTR $T4[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 ec	 mov	 edx, DWORD PTR _multibyte_length$[ebp]
  000ab	52		 push	 edx
  000ac	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000af	e8 00 00 00 00	 call	 ??0?$vector@DV?$allocator@D@std@@@std@@QAE@IABDABV?$allocator@D@1@@Z ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
  000b4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 58   :     if (0 == WideCharToMultiByte(codepage, flags, wstr, -1, tmp.data(), (int)tmp.size(), nullptr, nullptr)) {

  000bb	8b f4		 mov	 esi, esp
  000bd	6a 00		 push	 0
  000bf	6a 00		 push	 0
  000c1	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000c4	e8 00 00 00 00	 call	 ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
  000c9	50		 push	 eax
  000ca	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  000cd	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  000d2	50		 push	 eax
  000d3	6a ff		 push	 -1
  000d5	8b 45 08	 mov	 eax, DWORD PTR _wstr$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d f0	 mov	 ecx, DWORD PTR _flags$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 10	 mov	 edx, DWORD PTR _codepage$[ebp]
  000e0	52		 push	 edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000e7	3b f4		 cmp	 esi, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	85 c0		 test	 eax, eax
  000f0	75 23		 jne	 SHORT $LN3@wstring_to

; 59   :         str.clear();

  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  000f5	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear

; 60   :         return 0;

  000fa	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  00101	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00108	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0010b	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  00110	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  00113	eb 29		 jmp	 SHORT $LN1@wstring_to
$LN3@wstring_to:

; 61   :     }
; 62   :     str = tmp.data();

  00115	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00118	e8 00 00 00 00	 call	 ?data@?$vector@DV?$allocator@D@std@@@std@@QAEPADXZ ; std::vector<char,std::allocator<char> >::data
  0011d	50		 push	 eax
  0011e	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00121	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 63   :     return multibyte_length;

  00126	8b 45 ec	 mov	 eax, DWORD PTR _multibyte_length$[ebp]
  00129	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0012c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00133	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00136	e8 00 00 00 00	 call	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
  0013b	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@wstring_to:

; 64   : }

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@wstring_to
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00159	59		 pop	 ecx
  0015a	5f		 pop	 edi
  0015b	5e		 pop	 esi
  0015c	83 c4 3c	 add	 esp, 60			; 0000003cH
  0015f	3b ec		 cmp	 ebp, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
  0016a	66 90		 npad	 2
$LN11@wstring_to:
  0016c	01 00 00 00	 DD	 1
  00170	00 00 00 00	 DD	 $LN10@wstring_to
$LN10@wstring_to:
  00174	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00178	10 00 00 00	 DD	 16			; 00000010H
  0017c	00 00 00 00	 DD	 $LN8@wstring_to
$LN8@wstring_to:
  00180	74		 DB	 116			; 00000074H
  00181	6d		 DB	 109			; 0000006dH
  00182	70		 DB	 112			; 00000070H
  00183	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
__ehhandler$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?wstring_to_string@@YAIPB_WAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; wstring_to_string
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT __tcsicmp
_TEXT	SEGMENT
__String1$ = 8						; size = 4
__String2$ = 12						; size = 4
__tcsicmp PROC						; COMDAT

; 1684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1685 :     return _mbsicmp((const unsigned char *)_String1,(const unsigned char *)_String2);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __String2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __String1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsicmp
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1686 : }

  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcsicmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT __tcscmp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcscmp PROC						; COMDAT

; 1681 : _Check_return_ __inline int _tcscmp(_In_z_ _CPC _s1,_In_z_ _CPC _s2) {return _mbscmp((_CPUC)_s1,(_CPUC)_s2);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __s2$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbscmp
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcscmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\tchar.h
;	COMDAT __tcschr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcschr PROC						; COMDAT

; 1506 : __inline _CRPC _tcschr(_In_z_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbschr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __c$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbschr
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcschr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 1c		 push	 28			; 0000001cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
__ehhandler$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 4198 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4199 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4200 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal, COMDAT
; _this$ = ecx

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first

; 4196 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 4190 :     void _Swap_proxy_and_iterators(basic_string& _Right) { // swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4191 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 4192 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT

; 4180 :     [[noreturn]] static void _Xlen() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4181 :         _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 4182 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -26						; size = 2
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4165 :         _Mypair._Myval2._Orphan_all();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 55 ec	 mov	 DWORD PTR __Ptr$4[ebp], edx

; 4168 :             auto& _Al          = _Getal();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00061	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 04	 add	 eax, 4
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PA_W@std@@YAXAAPA_W@Z ; std::_Destroy_in_place<wchar_t *>
  00070	83 c4 04	 add	 esp, 4

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00079	83 c2 01	 add	 edx, 1
  0007c	52		 push	 edx
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  00080	50		 push	 eax
  00081	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00084	e8 00 00 00 00	 call	 ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ; std::allocator<wchar_t>::deallocate
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00093	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00096	c7 42 18 07 00
	00 00		 mov	 DWORD PTR [edx+24], 7

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	33 c0		 xor	 eax, eax
  0009f	66 89 45 e6	 mov	 WORD PTR $T2[ebp], ax
  000a3	8d 4d e6	 lea	 ecx, DWORD PTR $T2[ebp]
  000a6	51		 push	 ecx
  000a7	ba 02 00 00 00	 mov	 edx, 2
  000ac	6b c2 00	 imul	 eax, edx, 0
  000af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8d 54 01 04	 lea	 edx, DWORD PTR [ecx+eax+4]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  000bc	83 c4 08	 add	 esp, 8

; 4178 :     }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -6						; size = 2
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4156 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4157 :         _Mypair._Myval2._Mysize = 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4158 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 18 07 00
	00 00		 mov	 DWORD PTR [ecx+24], 7

; 4159 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4160 :         // write can alias this
; 4161 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002b	33 d2		 xor	 edx, edx
  0002d	66 89 55 fa	 mov	 WORD PTR $T1[ebp], dx
  00031	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00034	50		 push	 eax
  00035	b9 02 00 00 00	 mov	 ecx, 2
  0003a	6b d1 00	 imul	 edx, ecx, 0
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  0004a	83 c4 08	 add	 esp, 8

; 4162 :     }

  0004d	83 c4 08	 add	 esp, 8
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -6						; size = 2
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 4152 :     void _Eos(const size_type _Newsize) { // set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4153 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  00017	33 c0		 xor	 eax, eax
  00019	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00023	89 51 14	 mov	 DWORD PTR [ecx+20], edx
  00026	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00029	50		 push	 eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00032	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00035	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  0003e	83 c4 08	 add	 esp, 8

; 4154 :     }

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4077 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4078 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00016	50		 push	 eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4079 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT

; 4064 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 4065 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  0001a	83 c8 07	 or	 eax, 7
  0001d	89 45 f8	 mov	 DWORD PTR __Masked$[ebp], eax

; 4066 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __Masked$[ebp]
  00023	3b 4d 10	 cmp	 ecx, DWORD PTR __Max$[ebp]
  00026	76 05		 jbe	 SHORT $LN2@Calculate_

; 4067 :             return _Max;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0002b	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4068 :         }
; 4069 : 
; 4070 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Old$[ebp]
  00030	d1 ea		 shr	 edx, 1
  00032	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00035	2b c2		 sub	 eax, edx
  00037	39 45 0c	 cmp	 DWORD PTR __Old$[ebp], eax
  0003a	76 05		 jbe	 SHORT $LN3@Calculate_

; 4071 :             return _Max;

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0003f	eb 1d		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4072 :         }
; 4073 : 
; 4074 :         return _Max_value(_Masked, _Old + _Old / 2);

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Old$[ebp]
  00044	d1 e9		 shr	 ecx, 1
  00046	03 4d 0c	 add	 ecx, DWORD PTR __Old$[ebp]
  00049	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  0004c	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  0004f	52		 push	 edx
  00050	8d 45 f8	 lea	 eax, DWORD PTR __Masked$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 4075 :     }

  0005e	52		 push	 edx
  0005f	8b cd		 mov	 ecx, ebp
  00061	50		 push	 eax
  00062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006d	58		 pop	 eax
  0006e	5a		 pop	 edx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN7@Calculate_:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  00088	f8 ff ff ff	 DD	 -8			; fffffff8H
  0008c	04 00 00 00	 DD	 4
  00090	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  00094	5f		 DB	 95			; 0000005fH
  00095	4d		 DB	 77			; 0000004dH
  00096	61		 DB	 97			; 00000061H
  00097	73		 DB	 115			; 00000073H
  00098	6b		 DB	 107			; 0000006bH
  00099	65		 DB	 101			; 00000065H
  0009a	64		 DB	 100			; 00000064H
  0009b	00		 DB	 0
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAIIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator, COMDAT
; _this$ = ecx

; 4058 :     _NODISCARD allocator_type get_allocator() const noexcept { // return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4059 :         return static_cast<allocator_type>(_Getal());

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4060 :     }

  00022	83 c4 08	 add	 esp, 8
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr, COMDAT
; _this$ = ecx

; 3943 :     _NODISCARD basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 3944 :         // return [_Off, _Off + _Count) as new string
; 3945 :         return basic_string(*this, _Off, _Count, get_allocator());

  00044	8d 45 ef	 lea	 eax, DWORD PTR $T3[ebp]
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::get_allocator
  00050	50		 push	 eax
  00051	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00058	52		 push	 edx
  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0006f	83 c9 01	 or	 ecx, 1
  00072	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00075	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3946 :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	83 c4 18	 add	 esp, 24			; 00000018H
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@substr
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN4@substr:
  00018	c3		 ret	 0
__ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::substr
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_last_not_of, COMDAT
; _this$ = ecx

; 3924 :         noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3925 :         // look for none of [_Ptr, <null>) before _Off
; 3926 :         return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  00036	0f b6 45 ee	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ; std::_WChar_traits<wchar_t>::length
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<wchar_t> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 3927 :             _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3928 :     }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find_last_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_last_not_of
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_first_not_of, COMDAT
; _this$ = ecx

; 3886 :         noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3887 :         // look for one of [_Ptr, <null>) at or after _Off
; 3888 :         return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  00036	0f b6 45 ee	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ; std::_WChar_traits<wchar_t>::length
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@_W@std@@@std@@YAIQB_WII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<wchar_t> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 3889 :             _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3890 :     }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find_first_not_of@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIQB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find_first_not_of
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find, COMDAT
; _this$ = ecx

; 3725 :     _NODISCARD size_type find(const basic_string& _Right, const size_type _Off = 0) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3726 :         // look for _Right beginning at or after _Off
; 3727 :         return static_cast<size_type>(_Traits_find<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off,

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00030	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00033	51		 push	 ecx
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0003c	50		 push	 eax
  0003d	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00040	52		 push	 edx
  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00047	51		 push	 ecx
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Traits_find@U?$char_traits@_W@std@@@std@@YAIQB_WII0I@Z ; std::_Traits_find<std::char_traits<wchar_t> >
  00056	83 c4 14	 add	 esp, 20			; 00000014H

; 3728 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize));
; 3729 :     }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::find
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 3570 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3571 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f4	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3572 :         const size_type _Storage_max = // can always store small string

  0003a	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR $T3[ebp], 8
  00041	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00044	50		 push	 eax
  00045	8d 4d f4	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 10		 mov	 edx, DWORD PTR [eax]
  00053	89 55 ec	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3573 :             _Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3574 :         return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00064	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	51		 push	 ecx
  0006b	8d 55 e0	 lea	 edx, DWORD PTR $T1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00074	83 c4 08	 add	 esp, 8
  00077	8b 00		 mov	 eax, DWORD PTR [eax]

; 3575 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3576 :         );
; 3577 :     }

  00079	52		 push	 edx
  0007a	8b cd		 mov	 ecx, ebp
  0007c	50		 push	 eax
  0007d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  00083	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00088	58		 pop	 eax
  00089	5a		 pop	 edx
  0008a	83 c4 20	 add	 esp, 32			; 00000020H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN5@max_size:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000a0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000a4	04 00 00 00	 DD	 4
  000a8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000ac	5f		 DB	 95			; 0000005fH
  000ad	41		 DB	 65			; 00000041H
  000ae	6c		 DB	 108			; 0000006cH
  000af	6c		 DB	 108			; 0000006cH
  000b0	6f		 DB	 111			; 0000006fH
  000b1	63		 DB	 99			; 00000063H
  000b2	5f		 DB	 95			; 0000005fH
  000b3	6d		 DB	 109			; 0000006dH
  000b4	61		 DB	 97			; 00000061H
  000b5	78		 DB	 120			; 00000078H
  000b6	00		 DB	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size, COMDAT
; _this$ = ecx

; 3566 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3567 :         return _Mypair._Myval2._Mysize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3568 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 3562 :     _NODISCARD size_type length() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3563 :         return _Mypair._Myval2._Mysize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3564 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 3548 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3549 :         return _Mypair._Myval2._Myptr();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr

; 3550 :     }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIQB_WI@Z
_TEXT	SEGMENT
$T1 = -41						; size = 1
__Ptr_shifted_after$2 = -40				; size = 4
__Suffix_at$3 = -36					; size = 4
__Insert_at$4 = -32					; size = 4
__Old_ptr$5 = -28					; size = 4
__Growth$ = -24						; size = 4
__Insert_at$6 = -20					; size = 4
__Old_ptr$7 = -16					; size = 4
__Suffix_size$ = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIQB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace, COMDAT
; _this$ = ecx

; 3160 :         const size_type _Off, size_type _N0, _In_reads_(_Count) const _Elem* const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3161 :         // replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 3162 :         _Mypair._Myval2._Check_offset(_Off);

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Check_offset

; 3163 :         _N0 = _Mypair._Myval2._Clamp_suffix_size(_Off, _N0);

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Clamp_suffix_size
  00037	89 45 0c	 mov	 DWORD PTR __N0$[ebp], eax

; 3164 :         if (_N0 == _Count) { // size doesn't change, so a single move does the trick

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __N0$[ebp]
  0003d	3b 45 14	 cmp	 eax, DWORD PTR __Count$[ebp]
  00040	75 27		 jne	 SHORT $LN2@replace

; 3165 :             _Traits::move(_Mypair._Myval2._Myptr() + _Off, _Ptr, _Count);

  00042	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00049	52		 push	 edx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00052	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00055	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3166 :             return *this;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	e9 90 01 00 00	 jmp	 $LN1@replace
$LN2@replace:

; 3167 :         }
; 3168 : 
; 3169 :         const size_type _Old_size    = _Mypair._Myval2._Mysize;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006f	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3170 :         const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;

  00072	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00075	2b 55 0c	 sub	 edx, DWORD PTR __N0$[ebp]
  00078	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  0007b	83 c2 01	 add	 edx, 1
  0007e	89 55 f4	 mov	 DWORD PTR __Suffix_size$[ebp], edx

; 3171 :         if (_Count < _N0) { // suffix shifts backwards; we don't have to move anything out of the way

  00081	8b 45 14	 mov	 eax, DWORD PTR __Count$[ebp]
  00084	3b 45 0c	 cmp	 eax, DWORD PTR __N0$[ebp]
  00087	73 64		 jae	 SHORT $LN3@replace

; 3172 :             _Mypair._Myval2._Mysize = _Old_size - (_N0 - _Count);

  00089	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  0008c	2b 4d 14	 sub	 ecx, DWORD PTR __Count$[ebp]
  0008f	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00092	2b d1		 sub	 edx, ecx
  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 3173 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  000a2	89 45 f0	 mov	 DWORD PTR __Old_ptr$7[ebp], eax

; 3174 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  000a5	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  000a8	8b 55 f0	 mov	 edx, DWORD PTR __Old_ptr$7[ebp]
  000ab	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  000ae	89 45 ec	 mov	 DWORD PTR __Insert_at$6[ebp], eax

; 3175 :             _Traits::move(_Insert_at, _Ptr, _Count);

  000b1	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  000b4	51		 push	 ecx
  000b5	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000b8	52		 push	 edx
  000b9	8b 45 ec	 mov	 eax, DWORD PTR __Insert_at$6[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3176 :             _Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);

  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __Suffix_size$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  000cc	8b 45 ec	 mov	 eax, DWORD PTR __Insert_at$6[ebp]
  000cf	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000d2	51		 push	 ecx
  000d3	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  000d6	8b 45 ec	 mov	 eax, DWORD PTR __Insert_at$6[ebp]
  000d9	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  000dc	51		 push	 ecx
  000dd	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3177 :             return *this;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	e9 0c 01 00 00	 jmp	 $LN1@replace
$LN3@replace:

; 3178 :         }
; 3179 : 
; 3180 :         const size_type _Growth = static_cast<size_type>(_Count - _N0);

  000ed	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  000f0	2b 55 0c	 sub	 edx, DWORD PTR __N0$[ebp]
  000f3	89 55 e8	 mov	 DWORD PTR __Growth$[ebp], edx

; 3181 :         if (_Growth <= _Mypair._Myval2._Myres - _Old_size) { // growth fits

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000fc	2b 4d f8	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  000ff	39 4d e8	 cmp	 DWORD PTR __Growth$[ebp], ecx
  00102	0f 87 cb 00 00
	00		 ja	 $LN4@replace

; 3182 :             _Mypair._Myval2._Mysize = _Old_size + _Growth;

  00108	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  0010b	03 55 e8	 add	 edx, DWORD PTR __Growth$[ebp]
  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 3183 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00114	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0011c	89 45 e4	 mov	 DWORD PTR __Old_ptr$5[ebp], eax

; 3184 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  0011f	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  00122	8b 55 e4	 mov	 edx, DWORD PTR __Old_ptr$5[ebp]
  00125	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00128	89 45 e0	 mov	 DWORD PTR __Insert_at$4[ebp], eax

; 3185 :             _Elem* const _Suffix_at = _Insert_at + _N0;

  0012b	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  0012e	8b 55 e0	 mov	 edx, DWORD PTR __Insert_at$4[ebp]
  00131	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00134	89 45 dc	 mov	 DWORD PTR __Suffix_at$3[ebp], eax

; 3186 : 
; 3187 :             size_type _Ptr_shifted_after; // see rationale in insert
; 3188 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  00137	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  0013a	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0013d	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00140	3b 45 e0	 cmp	 eax, DWORD PTR __Insert_at$4[ebp]
  00143	76 0e		 jbe	 SHORT $LN7@replace
  00145	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00148	8b 55 e4	 mov	 edx, DWORD PTR __Old_ptr$5[ebp]
  0014b	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0014e	39 45 10	 cmp	 DWORD PTR __Ptr$[ebp], eax
  00151	76 08		 jbe	 SHORT $LN5@replace
$LN7@replace:

; 3189 :                 _Ptr_shifted_after = _Count;

  00153	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  00156	89 4d d8	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], ecx
  00159	eb 1c		 jmp	 SHORT $LN6@replace
$LN5@replace:

; 3190 :             } else if (_Suffix_at <= _Ptr) {

  0015b	8b 55 dc	 mov	 edx, DWORD PTR __Suffix_at$3[ebp]
  0015e	3b 55 10	 cmp	 edx, DWORD PTR __Ptr$[ebp]
  00161	77 09		 ja	 SHORT $LN8@replace

; 3191 :                 _Ptr_shifted_after = 0;

  00163	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], 0

; 3192 :             } else {

  0016a	eb 0b		 jmp	 SHORT $LN6@replace
$LN8@replace:

; 3193 :                 _Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);

  0016c	8b 45 dc	 mov	 eax, DWORD PTR __Suffix_at$3[ebp]
  0016f	2b 45 10	 sub	 eax, DWORD PTR __Ptr$[ebp]
  00172	d1 f8		 sar	 eax, 1
  00174	89 45 d8	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], eax
$LN6@replace:

; 3194 :             }
; 3195 : 
; 3196 :             _Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);

  00177	8b 4d f4	 mov	 ecx, DWORD PTR __Suffix_size$[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 dc	 mov	 edx, DWORD PTR __Suffix_at$3[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 e8	 mov	 eax, DWORD PTR __Growth$[ebp]
  00182	8b 4d dc	 mov	 ecx, DWORD PTR __Suffix_at$3[ebp]
  00185	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  0018e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3197 :             // next case must be move, in case _Ptr begins before _Insert_at and contains part of the hole;
; 3198 :             // this case doesn't occur in insert because the new content must come from outside the removed
; 3199 :             // content there (because in insert there is no removed content)
; 3200 :             _Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);

  00191	8b 45 d8	 mov	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  00194	50		 push	 eax
  00195	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00198	51		 push	 ecx
  00199	8b 55 e0	 mov	 edx, DWORD PTR __Insert_at$4[ebp]
  0019c	52		 push	 edx
  0019d	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  001a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3201 :             // the next case can be copy, because it comes from the chunk moved out of the way in the
; 3202 :             // first move, and the hole we're filling can't alias the chunk we moved out of the way
; 3203 :             _Traits::copy(

  001a5	8b 45 14	 mov	 eax, DWORD PTR __Count$[ebp]
  001a8	2b 45 d8	 sub	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  001ab	50		 push	 eax
  001ac	8b 4d e8	 mov	 ecx, DWORD PTR __Growth$[ebp]
  001af	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  001b2	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  001b5	8b 4d d8	 mov	 ecx, DWORD PTR __Ptr_shifted_after$2[ebp]
  001b8	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  001bb	52		 push	 edx
  001bc	8b 45 d8	 mov	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  001bf	8b 4d e0	 mov	 ecx, DWORD PTR __Insert_at$4[ebp]
  001c2	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001c5	52		 push	 edx
  001c6	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3204 :                 _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after);
; 3205 :             return *this;

  001ce	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d1	eb 26		 jmp	 SHORT $LN1@replace
$LN4@replace:

; 3206 :         }
; 3207 : 
; 3208 :         return _Reallocate_grow_by(

  001d3	33 c0		 xor	 eax, eax
  001d5	88 45 d7	 mov	 BYTE PTR $T1[ebp], al
  001d8	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  001db	51		 push	 ecx
  001dc	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  001df	52		 push	 edx
  001e0	8b 45 0c	 mov	 eax, DWORD PTR __N0$[ebp]
  001e3	50		 push	 eax
  001e4	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  001e7	51		 push	 ecx
  001e8	0f b6 55 d7	 movzx	 edx, BYTE PTR $T1[ebp]
  001ec	52		 push	 edx
  001ed	8b 45 e8	 mov	 eax, DWORD PTR __Growth$[ebp]
  001f0	50		 push	 eax
  001f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f4	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_150d3e25e2edcb1375af403c31441d08>@@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_grow_by<<lambda_150d3e25e2edcb1375af403c31441d08>,unsigned int,unsigned int,wchar_t const *,unsigned int>
$LN1@replace:

; 3209 :             _Growth,
; 3210 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
; 3211 :                 const size_type _N0, const _Elem* const _Ptr, const size_type _Count) {
; 3212 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);
; 3213 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);
; 3214 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
; 3215 :             },
; 3216 :             _Off, _N0, _Ptr, _Count);
; 3217 :     }

  001f9	5f		 pop	 edi
  001fa	83 c4 2c	 add	 esp, 44			; 0000002cH
  001fd	3b ec		 cmp	 ebp, esp
  001ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00204	8b e5		 mov	 esp, ebp
  00206	5d		 pop	 ebp
  00207	c2 10 00	 ret	 16			; 00000010H
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIQB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Right$ = 16						; size = 4
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace, COMDAT
; _this$ = ecx

; 3129 :     basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3130 :         // replace [_Off, _Off + _N0) with _Right
; 3131 :         return replace(_Off, _N0, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	51		 push	 ecx
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  0001d	50		 push	 eax
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace

; 3132 :     }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear, COMDAT
; _this$ = ecx

; 3125 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3126 :         _Eos(0);

  0002d	6a 00		 push	 0
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos

; 3127 :     }

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::clear
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2860 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2861 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ; std::_WChar_traits<wchar_t>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2862 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
$T1 = -11						; size = 1
$T2 = -10						; size = 2
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2841 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2842 :         // assign [_Ptr, _Ptr + _Count)
; 2843 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00024	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00027	77 49		 ja	 SHORT $LN2@assign

; 2844 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00031	89 45 f8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2845 :             _Mypair._Myval2._Mysize = _Count;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 2846 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00044	52		 push	 edx
  00045	8b 45 f8	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::move
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2847 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00051	33 c9		 xor	 ecx, ecx
  00053	66 89 4d f6	 mov	 WORD PTR $T2[ebp], cx
  00057	8d 55 f6	 lea	 edx, DWORD PTR $T2[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00061	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ; std::_WChar_traits<wchar_t>::assign
  0006a	83 c4 08	 add	 esp, 8

; 2848 :             return *this;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2849 :         }
; 2850 : 
; 2851 :         return _Reallocate_for(

  00072	33 c0		 xor	 eax, eax
  00074	88 45 f5	 mov	 BYTE PTR $T1[ebp], al
  00077	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0007a	51		 push	 ecx
  0007b	0f b6 55 f5	 movzx	 edx, BYTE PTR $T1[ebp]
  0007f	52		 push	 edx
  00080	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	50		 push	 eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
$LN1@assign:

; 2852 :             _Count,
; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2856 :             },
; 2857 :             _Ptr);
; 2858 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2819 :     basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2820 :         // assign _Right [_Roff, _Roff + _Count)
; 2821 :         _Right._Mypair._Myval2._Check_offset(_Roff);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Check_offset

; 2822 :         _Count = _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count);

  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Roff$[ebp]
  00021	52		 push	 edx
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<wchar_t> >::_Clamp_suffix_size
  0002a	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 2823 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0002d	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR __Roff$[ebp]
  0003c	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  0003f	52		 push	 edx
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2824 :     }

  00048	83 c4 04	 add	 esp, 4
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 2676 :     basic_string& operator=(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2677 :         return assign(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2678 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -36					; size = 4
_$S10$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2597 :     ~basic_string() noexcept { // destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2598 :         _Tidy_deallocate();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S10$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0005f	8d 45 e7	 lea	 eax, DWORD PTR _$S10$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	89 55 dc	 mov	 DWORD PTR __To_delete$[ebp], edx

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00076	8b 4d dc	 mov	 ecx, DWORD PTR __To_delete$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 ec	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00083	83 c4 08	 add	 esp, 8

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
  00095	52		 push	 edx
  00096	8b cd		 mov	 ecx, ebp
  00098	50		 push	 eax
  00099	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@basic_stri
  0009f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a4	58		 pop	 eax
  000a5	5a		 pop	 edx
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	83 c4 24	 add	 esp, 36			; 00000024H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@basic_stri:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000c8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000d4	24		 DB	 36			; 00000024H
  000d5	53		 DB	 83			; 00000053H
  000d6	31		 DB	 49			; 00000031H
  000d7	30		 DB	 48			; 00000030H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
__New_array$ = -36					; size = 4
__New_capacity$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
__Right_ptr$ = -16					; size = 4
__Right_size$ = -12					; size = 4
__Right_data$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2525 :     void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2526 :         // assign by copying data stored in _Right
; 2527 :         // pre: this != &_Right
; 2528 :         // pre: *this owns no memory, iterators orphaned (note:
; 2529 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2530 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2531 :         const size_type _Right_size   = _Right_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Right_size$[ebp], edx

; 2532 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
  00032	89 45 f0	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2533 :         auto& _My_data                = _Mypair._Myval2;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2534 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0003b	83 7d f4 08	 cmp	 DWORD PTR __Right_size$[ebp], 8
  0003f	73 2d		 jae	 SHORT $LN2@Construct_

; 2535 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  00041	6a 08		 push	 8
  00043	8b 4d f0	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  00046	51		 push	 ecx
  00047	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004a	83 c2 04	 add	 edx, 4
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2536 :             _My_data._Mysize = _Right_size;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0005c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2537 :             _My_data._Myres  = _BUF_SIZE - 1;

  0005f	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00062	c7 42 18 07 00
	00 00		 mov	 DWORD PTR [edx+24], 7

; 2538 :             return;

  00069	e9 8b 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2539 :         }
; 2540 : 
; 2541 :         auto& _Al                     = _Getal();

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00076	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 2542 :         const size_type _New_capacity = _Min_value(_Right_size | _ALLOC_MASK, max_size());

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
  00081	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00084	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00087	83 c8 07	 or	 eax, 7
  0008a	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  0008d	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00090	51		 push	 ecx
  00091	8d 55 d0	 lea	 edx, DWORD PTR $T1[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0009a	83 c4 08	 add	 esp, 8
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2543 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000a2	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	51		 push	 ecx
  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000ac	e8 00 00 00 00	 call	 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
  000b1	89 45 dc	 mov	 DWORD PTR __New_array$[ebp], eax

; 2544 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000b4	8d 55 dc	 lea	 edx, DWORD PTR __New_array$[ebp]
  000b7	52		 push	 edx
  000b8	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000bb	83 c0 04	 add	 eax, 4
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$_Construct_in_place@PA_WABQA_W@std@@YAXAAPA_WABQA_W@Z ; std::_Construct_in_place<wchar_t *,wchar_t * const &>
  000c4	83 c4 08	 add	 esp, 8

; 2545 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000ca	83 c1 01	 add	 ecx, 1
  000cd	51		 push	 ecx
  000ce	8b 55 f0	 mov	 edx, DWORD PTR __Right_ptr$[ebp]
  000d1	52		 push	 edx
  000d2	8b 45 dc	 mov	 eax, DWORD PTR __New_array$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  000db	83 c4 04	 add	 esp, 4
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ; std::_WChar_traits<wchar_t>::copy
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2546 :         _My_data._Mysize = _Right_size;

  000e7	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ea	8b 55 f4	 mov	 edx, DWORD PTR __Right_size$[ebp]
  000ed	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 2547 :         _My_data._Myres  = _New_capacity;

  000f0	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000f6	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN1@Construct_:

; 2548 :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Construct_
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	5f		 pop	 edi
  0010b	83 c4 30	 add	 esp, 48			; 00000030H
  0010e	3b ec		 cmp	 ebp, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
  0011b	90		 npad	 1
$LN6@Construct_:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN5@Construct_
$LN5@Construct_:
  00124	dc ff ff ff	 DD	 -36			; ffffffdcH
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN4@Construct_
$LN4@Construct_:
  00130	5f		 DB	 95			; 0000005fH
  00131	4e		 DB	 78			; 0000004eH
  00132	65		 DB	 101			; 00000065H
  00133	77		 DB	 119			; 00000077H
  00134	5f		 DB	 95			; 0000005fH
  00135	61		 DB	 97			; 00000061H
  00136	72		 DB	 114			; 00000072H
  00137	72		 DB	 114			; 00000072H
  00138	61		 DB	 97			; 00000061H
  00139	79		 DB	 121			; 00000079H
  0013a	00		 DB	 0
?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents, COMDAT
; _this$ = ecx

; 2484 :     void _Take_contents(basic_string& _Right, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2485 :         // assign by stealing _Right's buffer, memcpy optimization
; 2486 :         // pre: this != &_Right
; 2487 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2488 :         // pre: *this owns no memory, iterators orphaned (note:
; 2489 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2490 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2491 :         if (_Right._Mypair._Myval2._Large_string_engaged()) {

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0e		 je	 SHORT $LN2@Take_conte

; 2492 :             // take ownership of _Right's iterators along with its buffer
; 2493 :             _Swap_proxy_and_iterators(_Right);

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Swap_proxy_and_iterators

; 2494 :         } else {

  00048	eb 08		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 2495 :             _Right._Mypair._Myval2._Orphan_all();

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 2496 :         }
; 2497 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2498 : 
; 2499 :         _Memcpy_val_from(_Right);

  00052	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00055	52		 push	 edx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Memcpy_val_from

; 2500 :         _Right._Tidy_init();

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init

; 2501 :     }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -24					; size = 4
__My_data_mem$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 2475 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2476 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2477 :         const auto _My_data_mem =

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
  00046	83 c4 04	 add	 esp, 4
  00049	83 c0 04	 add	 eax, 4
  0004c	89 45 ec	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2478 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2479 :         const auto _Right_data_mem =

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@_W@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > const >
  00058	83 c4 04	 add	 esp, 4
  0005b	83 c0 04	 add	 eax, 4
  0005e	89 45 e8	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2480 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2481 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00061	6a 18		 push	 24			; 00000018H
  00063	8b 55 e8	 mov	 edx, DWORD PTR __Right_data_mem$[ebp]
  00066	52		 push	 edx
  00067	8b 45 ec	 mov	 eax, DWORD PTR __My_data_mem$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2482 :     }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Memcpy_val_from@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Memcpy_val_from
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 2460 :         _NOEXCEPT_COND(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2461 :         if (this != _STD addressof(_Right)) {

  00017	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
  00020	83 c4 04	 add	 esp, 4
  00023	39 45 fc	 cmp	 DWORD PTR _this$[ebp], eax
  00026	74 16		 je	 SHORT $LN2@operator

; 2462 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  00028	33 c9		 xor	 ecx, ecx
  0002a	88 4d fb	 mov	 BYTE PTR $T1[ebp], cl
  0002d	0f b6 55 fb	 movzx	 edx, BYTE PTR $T1[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Move_assign
$LN2@operator:

; 2463 :         }
; 2464 : 
; 2465 :         return *this;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2466 :     }

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Move_assign, COMDAT
; _this$ = ecx

; 2431 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2432 :         _Tidy_deallocate();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate

; 2433 :         _Pocma(_Getal(), _Right._Getal());

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@_W@std@@@std@@YAXAAV?$allocator@_W@0@0@Z ; std::_Pocma<std::allocator<wchar_t> >
  00036	83 c4 08	 add	 esp, 8

; 2434 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00039	33 c0		 xor	 eax, eax
  0003b	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0003e	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00046	52		 push	 edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents

; 2435 :     }

  0004f	83 c4 08	 add	 esp, 8
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2383 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::move<std::allocator<wchar_t> &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2384 :         // construct by moving _Right
; 2385 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00064	50		 push	 eax
  00065	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00068	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0006d	50		 push	 eax
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2386 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00076	33 c9		 xor	 ecx, ecx
  00078	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  0007b	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  0007f	52		 push	 edx
  00080	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00083	50		 push	 eax
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Take_contents

; 2387 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S12$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2297 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	0f b6 45 cf	 movzx	 eax, BYTE PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2298 :         // construct from [_Ptr, <null>)
; 2299 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S12$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0005f	8d 4d e7	 lea	 ecx, DWORD PTR _$S12$[ebp]
  00062	89 4d ec	 mov	 DWORD PTR __Alproxy$[ebp], ecx

; 2300 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00065	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00068	52		 push	 edx
  00069	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00070	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2301 :         _Tidy_init();

  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init

; 2302 :         assign(_Ptr);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00084	51		 push	 ecx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2303 :         _Proxy._Release();

  0008d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2304 :     }

  00095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	83 c4 34	 add	 esp, 52			; 00000034H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN9@basic_stri:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000e0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN5@basic_stri
  000ec	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f0	08 00 00 00	 DD	 8
  000f4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000f8	5f		 DB	 95			; 0000005fH
  000f9	50		 DB	 80			; 00000050H
  000fa	72		 DB	 114			; 00000072H
  000fb	6f		 DB	 111			; 0000006fH
  000fc	78		 DB	 120			; 00000078H
  000fd	79		 DB	 121			; 00000079H
  000fe	00		 DB	 0
$LN5@basic_stri:
  000ff	24		 DB	 36			; 00000024H
  00100	53		 DB	 83			; 00000053H
  00101	31		 DB	 49			; 00000031H
  00102	32		 DB	 50			; 00000032H
  00103	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S14$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2268 :     basic_string(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2269 :         const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2270 :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Right [_Roff, _Roff + _Count)

  0003a	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0003d	50		 push	 eax
  0003e	0f b6 4d cf	 movzx	 ecx, BYTE PTR $T2[ebp]
  00042	51		 push	 ecx
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> const &>
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2271 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0005a	50		 push	 eax
  0005b	8d 4d e7	 lea	 ecx, DWORD PTR _$S14$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  00063	8d 55 e7	 lea	 edx, DWORD PTR _$S14$[ebp]
  00066	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 2272 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00069	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00070	51		 push	 ecx
  00071	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00079	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2273 :         _Tidy_init();

  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init

; 2274 :         assign(_Right, _Roff, _Count);

  00085	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00088	52		 push	 edx
  00089	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00090	51		 push	 ecx
  00091	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2275 :         _Proxy._Release();

  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2276 :     }

  000a1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a5	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000a8	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	52		 push	 edx
  000b8	8b cd		 mov	 ecx, ebp
  000ba	50		 push	 eax
  000bb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000c1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c6	58		 pop	 eax
  000c7	5a		 pop	 edx
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	83 c4 34	 add	 esp, 52			; 00000034H
  000d7	3b ec		 cmp	 ebp, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 10 00	 ret	 16			; 00000010H
$LN9@basic_stri:
  000e4	02 00 00 00	 DD	 2
  000e8	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000ec	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN5@basic_stri
  000f8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000fc	08 00 00 00	 DD	 8
  00100	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00104	5f		 DB	 95			; 0000005fH
  00105	50		 DB	 80			; 00000050H
  00106	72		 DB	 114			; 00000072H
  00107	6f		 DB	 111			; 0000006fH
  00108	78		 DB	 120			; 00000078H
  00109	79		 DB	 121			; 00000079H
  0010a	00		 DB	 0
$LN5@basic_stri:
  0010b	24		 DB	 36			; 00000024H
  0010c	53		 DB	 83			; 00000053H
  0010d	31		 DB	 49			; 00000031H
  0010e	34		 DB	 52			; 00000034H
  0010f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2247 :     basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2248 :         // construct empty string
; 2249 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00052	50		 push	 eax
  00053	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  00056	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  0005b	50		 push	 eax
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2250 :         _Tidy_init();

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init

; 2251 :     }

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -50						; size = 1
$T3 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S15$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2230 :     basic_string(const basic_string& _Right)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 :         : _Mypair(_One_then_variadic_args_t(), _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABEABV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  00042	50		 push	 eax
  00043	8d 45 cf	 lea	 eax, DWORD PTR $T3[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
  0004c	83 c4 08	 add	 esp, 8
  0004f	50		 push	 eax
  00050	0f b6 4d ce	 movzx	 ecx, BYTE PTR $T2[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2232 :         // construct by copying _Right
; 2233 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEAAV?$allocator@_W@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Getal
  0006c	50		 push	 eax
  0006d	8d 4d e7	 lea	 ecx, DWORD PTR _$S15$[ebp]
  00070	e8 00 00 00 00	 call	 ??$?0_W@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><wchar_t>
  00075	8d 55 e7	 lea	 edx, DWORD PTR _$S15$[ebp]
  00078	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 2234 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00082	51		 push	 ecx
  00083	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00086	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0008b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2235 :         _Construct_lv_contents(_Right);

  0008f	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00092	52		 push	 edx
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents

; 2236 :         _Proxy._Release();

  0009b	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2237 :     }

  000a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a7	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	52		 push	 edx
  000ba	8b cd		 mov	 ecx, ebp
  000bc	50		 push	 eax
  000bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c8	58		 pop	 eax
  000c9	5a		 pop	 edx
  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	83 c4 34	 add	 esp, 52			; 00000034H
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
  000e6	66 90		 npad	 2
$LN9@basic_stri:
  000e8	02 00 00 00	 DD	 2
  000ec	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000f0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000f4	01 00 00 00	 DD	 1
  000f8	00 00 00 00	 DD	 $LN5@basic_stri
  000fc	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00100	08 00 00 00	 DD	 8
  00104	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00108	5f		 DB	 95			; 0000005fH
  00109	50		 DB	 80			; 00000050H
  0010a	72		 DB	 114			; 00000072H
  0010b	6f		 DB	 111			; 0000006fH
  0010c	78		 DB	 120			; 00000078H
  0010d	79		 DB	 121			; 00000079H
  0010e	00		 DB	 0
$LN5@basic_stri:
  0010f	24		 DB	 36			; 00000024H
  00110	53		 DB	 83			; 00000053H
  00111	31		 DB	 49			; 00000031H
  00112	35		 DB	 53			; 00000035H
  00113	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2146 :         _Bxty() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2140 :     size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2141 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2142 :         return _Min_value(_Size, _Mysize - _Off);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001d	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  00020	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00023	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00026	52		 push	 edx
  00027	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00030	83 c4 08	 add	 esp, 8
  00033	8b 00		 mov	 eax, DWORD PTR [eax]

; 2143 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran, COMDAT

; 2136 :     [[noreturn]] static void _Xran() { // report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2137 :         _Xout_of_range("invalid string position");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2138 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Check_offset, COMDAT
; _this$ = ecx

; 2124 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2125 :         if (_Mysize < _Off) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00017	73 05		 jae	 SHORT $LN3@Check_offs

; 2126 :             _Xran();

  00019	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
$LN3@Check_offs:

; 2127 :         }
; 2128 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2121 :         return _BUF_SIZE <= _Myres;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 08	 cmp	 DWORD PTR [eax+24], 8
  0001e	72 09		 jb	 SHORT $LN3@Large_stri
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2122 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2111 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2112 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2113 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2114 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2115 :         }
; 2116 : 
; 2117 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2118 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 2102 :     value_type* _Myptr() { // determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2103 :         value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2104 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2105 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@_W@std@@YAPA_WPA_W@Z ; std::_Unfancy<wchar_t>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2106 :         }
; 2107 : 
; 2108 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2109 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 2092 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 770  :     _NODISCARD static _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 771  :         return _Al;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 772  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 768  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$01@std@@YAII@Z ; std::_Get_size_of_n<2>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	d1 e0		 shl	 eax, 1
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001d	83 c4 08	 add	 esp, 8

; 868  :     }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 1c		 push	 28			; 0000001cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1424 :     const _Ty1& _Get_first() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1425 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1426 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1420 :     _Ty1& _Get_first() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1421 :         return *this;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1422 :     }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4198 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4199 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4200 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4194 :     _Alty& _Getal() noexcept { // return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4195 :         return _Mypair._Get_first();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4196 :     }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 4190 :     void _Swap_proxy_and_iterators(basic_string& _Right) { // swap all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4191 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 4192 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4180 :     [[noreturn]] static void _Xlen() { // report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4181 :         _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 4182 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -25						; size = 1
__Al$3 = -24						; size = 4
__Ptr$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4164 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4165 :         _Mypair._Myval2._Orphan_all();

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 4166 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 39		 je	 SHORT $LN2@Tidy_deall

; 4167 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	89 55 ec	 mov	 DWORD PTR __Ptr$4[ebp], edx

; 4168 :             auto& _Al          = _Getal();

  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00061	89 45 e8	 mov	 DWORD PTR __Al$3[ebp], eax

; 4169 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c0 04	 add	 eax, 4
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00070	83 c4 04	 add	 esp, 4

; 4170 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00079	83 c2 01	 add	 edx, 1
  0007c	52		 push	 edx
  0007d	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  00080	50		 push	 eax
  00081	8b 4d e8	 mov	 ecx, DWORD PTR __Al$3[ebp]
  00084	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4171 :         }
; 4172 : 
; 4173 :         _Mypair._Myval2._Mysize = 0;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 4174 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00093	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00096	c7 42 18 0f 00
	00 00		 mov	 DWORD PTR [edx+24], 15	; 0000000fH

; 4175 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4176 :         // write can alias this
; 4177 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0009d	c6 45 e7 00	 mov	 BYTE PTR $T2[ebp], 0
  000a1	8d 45 e7	 lea	 eax, DWORD PTR $T2[ebp]
  000a4	50		 push	 eax
  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	6b d1 00	 imul	 edx, ecx, 0
  000ad	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8d 4c 10 04	 lea	 ecx, DWORD PTR [eax+edx+4]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  000ba	83 c4 08	 add	 esp, 8

; 4178 :     }

  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4156 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4157 :         _Mypair._Myval2._Mysize = 0;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 4158 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH

; 4159 :         // the _Traits::assign is last so the codegen doesn't think the char
; 4160 :         // write can alias this
; 4161 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0002b	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  0002f	8d 55 fb	 lea	 edx, DWORD PTR $T1[ebp]
  00032	52		 push	 edx
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	6b c8 00	 imul	 ecx, eax, 0
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00048	83 c4 08	 add	 esp, 8

; 4162 :     }

  0004b	83 c4 08	 add	 esp, 8
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 4152 :     void _Eos(const size_type _Newsize) { // set new length and null terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4153 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  00017	c6 45 fb 00	 mov	 BYTE PTR $T1[ebp], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  00021	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00024	8d 55 fb	 lea	 edx, DWORD PTR $T1[ebp]
  00027	52		 push	 edx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00030	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00039	83 c4 08	 add	 esp, 8

; 4154 :     }

  0003c	83 c4 08	 add	 esp, 8
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4077 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4078 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00016	50		 push	 eax
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0001d	51		 push	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4079 :     }

  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4064 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 4065 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00017	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  0001a	83 c8 0f	 or	 eax, 15			; 0000000fH
  0001d	89 45 f8	 mov	 DWORD PTR __Masked$[ebp], eax

; 4066 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __Masked$[ebp]
  00023	3b 4d 10	 cmp	 ecx, DWORD PTR __Max$[ebp]
  00026	76 05		 jbe	 SHORT $LN2@Calculate_

; 4067 :             return _Max;

  00028	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0002b	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4068 :         }
; 4069 : 
; 4070 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0002d	8b 55 0c	 mov	 edx, DWORD PTR __Old$[ebp]
  00030	d1 ea		 shr	 edx, 1
  00032	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  00035	2b c2		 sub	 eax, edx
  00037	39 45 0c	 cmp	 DWORD PTR __Old$[ebp], eax
  0003a	76 05		 jbe	 SHORT $LN3@Calculate_

; 4071 :             return _Max;

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0003f	eb 1d		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4072 :         }
; 4073 : 
; 4074 :         return _Max_value(_Masked, _Old + _Old / 2);

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR __Old$[ebp]
  00044	d1 e9		 shr	 ecx, 1
  00046	03 4d 0c	 add	 ecx, DWORD PTR __Old$[ebp]
  00049	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  0004c	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  0004f	52		 push	 edx
  00050	8d 45 f8	 lea	 eax, DWORD PTR __Masked$[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00059	83 c4 08	 add	 esp, 8
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 4075 :     }

  0005e	52		 push	 edx
  0005f	8b cd		 mov	 ecx, ebp
  00061	50		 push	 eax
  00062	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Calculate_
  00068	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006d	58		 pop	 eax
  0006e	5a		 pop	 edx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN7@Calculate_:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@Calculate_
$LN6@Calculate_:
  00088	f8 ff ff ff	 DD	 -8			; fffffff8H
  0008c	04 00 00 00	 DD	 4
  00090	00 00 00 00	 DD	 $LN5@Calculate_
$LN5@Calculate_:
  00094	5f		 DB	 95			; 0000005fH
  00095	4d		 DB	 77			; 0000004dH
  00096	61		 DB	 97			; 00000061H
  00097	73		 DB	 115			; 00000073H
  00098	6b		 DB	 107			; 0000006bH
  00099	65		 DB	 101			; 00000065H
  0009a	64		 DB	 100			; 00000064H
  0009b	00		 DB	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx

; 4058 :     _NODISCARD allocator_type get_allocator() const noexcept { // return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4059 :         return static_cast<allocator_type>(_Getal());

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4060 :     }

  00022	83 c4 08	 add	 esp, 8
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 3943 :     _NODISCARD basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 3944 :         // return [_Off, _Off + _Count) as new string
; 3945 :         return basic_string(*this, _Off, _Count, get_allocator());

  00044	8d 45 ef	 lea	 eax, DWORD PTR $T3[ebp]
  00047	50		 push	 eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  00050	50		 push	 eax
  00051	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00058	52		 push	 edx
  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00065	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006c	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0006f	83 c9 01	 or	 ecx, 1
  00072	89 4d e8	 mov	 DWORD PTR $T2[ebp], ecx
  00075	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3946 :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	83 c4 18	 add	 esp, 24			; 00000018H
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN4@substr
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN4@substr:
  00018	c3		 ret	 0
__ehhandler$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx

; 3924 :         noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3925 :         // look for none of [_Ptr, <null>) before _Off
; 3926 :         return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  00036	0f b6 45 ee	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Traits_find_last_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_last_not_of<std::char_traits<char> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 3927 :             _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3928 :     }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx

; 3886 :         noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3887 :         // look for one of [_Ptr, <null>) at or after _Off
; 3888 :         return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_Mypair._Myval2._Myptr(),

  00036	0f b6 45 ee	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Traits_find_first_not_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_not_of<std::char_traits<char> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 3889 :             _Mypair._Myval2._Mysize, _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3890 :     }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
_TEXT	SEGMENT
$T2 = -18						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx

; 3811 :         noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3812 :         // look for one of [_Ptr, <null>) at or after _Off
; 3813 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00036	0f b6 45 ee	 movzx	 eax, BYTE PTR $T2[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00056	52		 push	 edx
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??$_Traits_find_first_of@U?$char_traits@D@std@@@std@@YAIQBDII0IU?$integral_constant@_N$00@0@@Z ; std::_Traits_find_first_of<std::char_traits<char> >
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 3814 :             _Off, _Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
; 3815 :     }

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	83 c4 14	 add	 esp, 20			; 00000014H
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 3725 :     _NODISCARD size_type find(const basic_string& _Right, const size_type _Off = 0) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3726 :         // look for _Right beginning at or after _Off
; 3727 :         return static_cast<size_type>(_Traits_find<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off,

  0002d	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00030	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00033	51		 push	 ecx
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003c	50		 push	 eax
  0003d	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp]
  00040	52		 push	 edx
  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00047	51		 push	 ecx
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ; std::_Traits_find<std::char_traits<char> >
  00056	83 c4 14	 add	 esp, 20			; 00000014H

; 3728 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize));
; 3729 :     }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3570 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3571 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f4	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3572 :         const size_type _Storage_max = // can always store small string

  0003a	c7 45 e8 10 00
	00 00		 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00041	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00044	50		 push	 eax
  00045	8d 4d f4	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0004e	83 c4 08	 add	 esp, 8
  00051	8b 10		 mov	 edx, DWORD PTR [eax]
  00053	89 55 ec	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3573 :             _Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3574 :         return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00064	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	51		 push	 ecx
  0006b	8d 55 e0	 lea	 edx, DWORD PTR $T1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00074	83 c4 08	 add	 esp, 8
  00077	8b 00		 mov	 eax, DWORD PTR [eax]

; 3575 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3576 :         );
; 3577 :     }

  00079	52		 push	 edx
  0007a	8b cd		 mov	 ecx, ebp
  0007c	50		 push	 eax
  0007d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@max_size
  00083	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00088	58		 pop	 eax
  00089	5a		 pop	 edx
  0008a	83 c4 20	 add	 esp, 32			; 00000020H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
$LN5@max_size:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN4@max_size
$LN4@max_size:
  000a0	f4 ff ff ff	 DD	 -12			; fffffff4H
  000a4	04 00 00 00	 DD	 4
  000a8	00 00 00 00	 DD	 $LN3@max_size
$LN3@max_size:
  000ac	5f		 DB	 95			; 0000005fH
  000ad	41		 DB	 65			; 00000041H
  000ae	6c		 DB	 108			; 0000006cH
  000af	6c		 DB	 108			; 0000006cH
  000b0	6f		 DB	 111			; 0000006fH
  000b1	63		 DB	 99			; 00000063H
  000b2	5f		 DB	 95			; 0000005fH
  000b3	6d		 DB	 109			; 0000006dH
  000b4	61		 DB	 97			; 00000061H
  000b5	78		 DB	 120			; 00000078H
  000b6	00		 DB	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3566 :     _NODISCARD size_type size() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3567 :         return _Mypair._Myval2._Mysize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3568 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 3562 :     _NODISCARD size_type length() const noexcept { // return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3563 :         return _Mypair._Myval2._Mysize;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 3564 :     }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3548 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3549 :         return _Mypair._Myval2._Myptr();

  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3550 :     }

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	83 c4 10	 add	 esp, 16			; 00000010H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z
_TEXT	SEGMENT
$T1 = -41						; size = 1
__Ptr_shifted_after$2 = -40				; size = 4
__Suffix_at$3 = -36					; size = 4
__Insert_at$4 = -32					; size = 4
__Old_ptr$5 = -28					; size = 4
__Growth$ = -24						; size = 4
__Insert_at$6 = -20					; size = 4
__Old_ptr$7 = -16					; size = 4
__Suffix_size$ = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 3160 :         const size_type _Off, size_type _N0, _In_reads_(_Count) const _Elem* const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3161 :         // replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 3162 :         _Mypair._Myval2._Check_offset(_Off);

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  0001e	50		 push	 eax
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3163 :         _N0 = _Mypair._Myval2._Clamp_suffix_size(_Off, _N0);

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  0002e	52		 push	 edx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00037	89 45 0c	 mov	 DWORD PTR __N0$[ebp], eax

; 3164 :         if (_N0 == _Count) { // size doesn't change, so a single move does the trick

  0003a	8b 45 0c	 mov	 eax, DWORD PTR __N0$[ebp]
  0003d	3b 45 14	 cmp	 eax, DWORD PTR __Count$[ebp]
  00040	75 24		 jne	 SHORT $LN2@replace

; 3165 :             _Traits::move(_Mypair._Myval2._Myptr() + _Off, _Ptr, _Count);

  00042	8b 4d 14	 mov	 ecx, DWORD PTR __Count$[ebp]
  00045	51		 push	 ecx
  00046	8b 55 10	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00049	52		 push	 edx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00052	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3166 :             return *this;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	e9 6d 01 00 00	 jmp	 $LN1@replace
$LN2@replace:

; 3167 :         }
; 3168 : 
; 3169 :         const size_type _Old_size    = _Mypair._Myval2._Mysize;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006c	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3170 :         const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;

  0006f	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00072	2b 55 0c	 sub	 edx, DWORD PTR __N0$[ebp]
  00075	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00078	83 c2 01	 add	 edx, 1
  0007b	89 55 f4	 mov	 DWORD PTR __Suffix_size$[ebp], edx

; 3171 :         if (_Count < _N0) { // suffix shifts backwards; we don't have to move anything out of the way

  0007e	8b 45 14	 mov	 eax, DWORD PTR __Count$[ebp]
  00081	3b 45 0c	 cmp	 eax, DWORD PTR __N0$[ebp]
  00084	73 5b		 jae	 SHORT $LN3@replace

; 3172 :             _Mypair._Myval2._Mysize = _Old_size - (_N0 - _Count);

  00086	8b 4d 0c	 mov	 ecx, DWORD PTR __N0$[ebp]
  00089	2b 4d 14	 sub	 ecx, DWORD PTR __Count$[ebp]
  0008c	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  0008f	2b d1		 sub	 edx, ecx
  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 3173 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0009f	89 45 f0	 mov	 DWORD PTR __Old_ptr$7[ebp], eax

; 3174 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __Old_ptr$7[ebp]
  000a5	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  000a8	89 4d ec	 mov	 DWORD PTR __Insert_at$6[ebp], ecx

; 3175 :             _Traits::move(_Insert_at, _Ptr, _Count);

  000ab	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  000ae	52		 push	 edx
  000af	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d ec	 mov	 ecx, DWORD PTR __Insert_at$6[ebp]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3176 :             _Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);

  000bf	8b 55 f4	 mov	 edx, DWORD PTR __Suffix_size$[ebp]
  000c2	52		 push	 edx
  000c3	8b 45 ec	 mov	 eax, DWORD PTR __Insert_at$6[ebp]
  000c6	03 45 0c	 add	 eax, DWORD PTR __N0$[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d ec	 mov	 ecx, DWORD PTR __Insert_at$6[ebp]
  000cd	03 4d 14	 add	 ecx, DWORD PTR __Count$[ebp]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3177 :             return *this;

  000d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	e9 f2 00 00 00	 jmp	 $LN1@replace
$LN3@replace:

; 3178 :         }
; 3179 : 
; 3180 :         const size_type _Growth = static_cast<size_type>(_Count - _N0);

  000e1	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  000e4	2b 55 0c	 sub	 edx, DWORD PTR __N0$[ebp]
  000e7	89 55 e8	 mov	 DWORD PTR __Growth$[ebp], edx

; 3181 :         if (_Growth <= _Mypair._Myval2._Myres - _Old_size) { // growth fits

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000f0	2b 4d f8	 sub	 ecx, DWORD PTR __Old_size$[ebp]
  000f3	39 4d e8	 cmp	 DWORD PTR __Growth$[ebp], ecx
  000f6	0f 87 b1 00 00
	00		 ja	 $LN4@replace

; 3182 :             _Mypair._Myval2._Mysize = _Old_size + _Growth;

  000fc	8b 55 f8	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000ff	03 55 e8	 add	 edx, DWORD PTR __Growth$[ebp]
  00102	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00105	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 3183 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00110	89 45 e4	 mov	 DWORD PTR __Old_ptr$5[ebp], eax

; 3184 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  00113	8b 4d e4	 mov	 ecx, DWORD PTR __Old_ptr$5[ebp]
  00116	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  00119	89 4d e0	 mov	 DWORD PTR __Insert_at$4[ebp], ecx

; 3185 :             _Elem* const _Suffix_at = _Insert_at + _N0;

  0011c	8b 55 e0	 mov	 edx, DWORD PTR __Insert_at$4[ebp]
  0011f	03 55 0c	 add	 edx, DWORD PTR __N0$[ebp]
  00122	89 55 dc	 mov	 DWORD PTR __Suffix_at$3[ebp], edx

; 3186 : 
; 3187 :             size_type _Ptr_shifted_after; // see rationale in insert
; 3188 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  00125	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00128	03 45 14	 add	 eax, DWORD PTR __Count$[ebp]
  0012b	3b 45 e0	 cmp	 eax, DWORD PTR __Insert_at$4[ebp]
  0012e	76 0b		 jbe	 SHORT $LN7@replace
  00130	8b 4d e4	 mov	 ecx, DWORD PTR __Old_ptr$5[ebp]
  00133	03 4d f8	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00136	39 4d 10	 cmp	 DWORD PTR __Ptr$[ebp], ecx
  00139	76 08		 jbe	 SHORT $LN5@replace
$LN7@replace:

; 3189 :                 _Ptr_shifted_after = _Count;

  0013b	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  0013e	89 55 d8	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], edx
  00141	eb 1a		 jmp	 SHORT $LN6@replace
$LN5@replace:

; 3190 :             } else if (_Suffix_at <= _Ptr) {

  00143	8b 45 dc	 mov	 eax, DWORD PTR __Suffix_at$3[ebp]
  00146	3b 45 10	 cmp	 eax, DWORD PTR __Ptr$[ebp]
  00149	77 09		 ja	 SHORT $LN8@replace

; 3191 :                 _Ptr_shifted_after = 0;

  0014b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], 0

; 3192 :             } else {

  00152	eb 09		 jmp	 SHORT $LN6@replace
$LN8@replace:

; 3193 :                 _Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);

  00154	8b 4d dc	 mov	 ecx, DWORD PTR __Suffix_at$3[ebp]
  00157	2b 4d 10	 sub	 ecx, DWORD PTR __Ptr$[ebp]
  0015a	89 4d d8	 mov	 DWORD PTR __Ptr_shifted_after$2[ebp], ecx
$LN6@replace:

; 3194 :             }
; 3195 : 
; 3196 :             _Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);

  0015d	8b 55 f4	 mov	 edx, DWORD PTR __Suffix_size$[ebp]
  00160	52		 push	 edx
  00161	8b 45 dc	 mov	 eax, DWORD PTR __Suffix_at$3[ebp]
  00164	50		 push	 eax
  00165	8b 4d dc	 mov	 ecx, DWORD PTR __Suffix_at$3[ebp]
  00168	03 4d e8	 add	 ecx, DWORD PTR __Growth$[ebp]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3197 :             // next case must be move, in case _Ptr begins before _Insert_at and contains part of the hole;
; 3198 :             // this case doesn't occur in insert because the new content must come from outside the removed
; 3199 :             // content there (because in insert there is no removed content)
; 3200 :             _Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);

  00174	8b 55 d8	 mov	 edx, DWORD PTR __Ptr_shifted_after$2[ebp]
  00177	52		 push	 edx
  00178	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0017b	50		 push	 eax
  0017c	8b 4d e0	 mov	 ecx, DWORD PTR __Insert_at$4[ebp]
  0017f	51		 push	 ecx
  00180	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3201 :             // the next case can be copy, because it comes from the chunk moved out of the way in the
; 3202 :             // first move, and the hole we're filling can't alias the chunk we moved out of the way
; 3203 :             _Traits::copy(

  00188	8b 55 14	 mov	 edx, DWORD PTR __Count$[ebp]
  0018b	2b 55 d8	 sub	 edx, DWORD PTR __Ptr_shifted_after$2[ebp]
  0018e	52		 push	 edx
  0018f	8b 45 10	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00192	03 45 e8	 add	 eax, DWORD PTR __Growth$[ebp]
  00195	03 45 d8	 add	 eax, DWORD PTR __Ptr_shifted_after$2[ebp]
  00198	50		 push	 eax
  00199	8b 4d e0	 mov	 ecx, DWORD PTR __Insert_at$4[ebp]
  0019c	03 4d d8	 add	 ecx, DWORD PTR __Ptr_shifted_after$2[ebp]
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  001a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3204 :                 _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after);
; 3205 :             return *this;

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	eb 26		 jmp	 SHORT $LN1@replace
$LN4@replace:

; 3206 :         }
; 3207 : 
; 3208 :         return _Reallocate_grow_by(

  001ad	33 d2		 xor	 edx, edx
  001af	88 55 d7	 mov	 BYTE PTR $T1[ebp], dl
  001b2	8b 45 14	 mov	 eax, DWORD PTR __Count$[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  001b9	51		 push	 ecx
  001ba	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  001bd	52		 push	 edx
  001be	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  001c1	50		 push	 eax
  001c2	0f b6 4d d7	 movzx	 ecx, BYTE PTR $T1[ebp]
  001c6	51		 push	 ecx
  001c7	8b 55 e8	 mov	 edx, DWORD PTR __Growth$[ebp]
  001ca	52		 push	 edx
  001cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>@@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_f4fd5ca79072ce85a36b5022cfb0e6d1>,unsigned int,unsigned int,char const *,unsigned int>
$LN1@replace:

; 3209 :             _Growth,
; 3210 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
; 3211 :                 const size_type _N0, const _Elem* const _Ptr, const size_type _Count) {
; 3212 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);
; 3213 :                 _Traits::copy(_New_ptr + _Off, _Ptr, _Count);
; 3214 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
; 3215 :             },
; 3216 :             _Off, _N0, _Ptr, _Count);
; 3217 :     }

  001d3	5f		 pop	 edi
  001d4	83 c4 2c	 add	 esp, 44			; 0000002cH
  001d7	3b ec		 cmp	 ebp, esp
  001d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 10 00	 ret	 16			; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Right$ = 16						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx

; 3129 :     basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3130 :         // replace [_Off, _Off + _N0) with _Right
; 3131 :         return replace(_Off, _N0, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	51		 push	 ecx
  00015	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001d	50		 push	 eax
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __N0$[ebp]
  00021	52		 push	 edx
  00022	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace

; 3132 :     }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 0c 00	 ret	 12			; 0000000cH
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 3125 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3126 :         _Eos(0);

  0002d	6a 00		 push	 0
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 3127 :     }

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2860 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2861 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2862 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -10						; size = 1
$T2 = -9						; size = 1
__Old_ptr$3 = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2841 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2842 :         // assign [_Ptr, _Ptr + _Count)
; 2843 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00024	3b 48 18	 cmp	 ecx, DWORD PTR [eax+24]
  00027	77 44		 ja	 SHORT $LN2@assign

; 2844 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	89 45 f8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2845 :             _Mypair._Myval2._Mysize = _Count;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0003a	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 2846 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00044	52		 push	 edx
  00045	8b 45 f8	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2847 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00051	c6 45 f7 00	 mov	 BYTE PTR $T2[ebp], 0
  00055	8d 4d f7	 lea	 ecx, DWORD PTR $T2[ebp]
  00058	51		 push	 ecx
  00059	8b 55 f8	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  0005c	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00065	83 c4 08	 add	 esp, 8

; 2848 :             return *this;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2849 :         }
; 2850 : 
; 2851 :         return _Reallocate_for(

  0006d	33 c0		 xor	 eax, eax
  0006f	88 45 f6	 mov	 BYTE PTR $T1[ebp], al
  00072	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00075	51		 push	 ecx
  00076	0f b6 55 f6	 movzx	 edx, BYTE PTR $T1[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2852 :             _Count,
; 2853 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2854 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2855 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2856 :             },
; 2857 :             _Ptr);
; 2858 :     }

  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2819 :     basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2820 :         // assign _Right [_Roff, _Roff + _Count)
; 2821 :         _Right._Mypair._Myval2._Check_offset(_Roff);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2822 :         _Count = _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count);

  0001a	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Roff$[ebp]
  00021	52		 push	 edx
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00025	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  0002a	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 2823 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  0002d	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00034	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00039	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2824 :     }

  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2756 :     basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2757 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00020	83 c4 04	 add	 esp, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00027	51		 push	 ecx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2758 :     }

  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -14						; size = 1
$T2 = -13						; size = 1
__Old_ptr$3 = -12					; size = 4
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2734 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2735 :         // append [_Ptr, _Ptr + _Count)
; 2736 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00020	89 4d f8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2737 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00029	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0002c	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0002f	77 4d		 ja	 SHORT $LN2@append

; 2738 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00031	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00034	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 2739 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00045	89 45 f4	 mov	 DWORD PTR __Old_ptr$3[ebp], eax

; 2740 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00048	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 f4	 mov	 edx, DWORD PTR __Old_ptr$3[ebp]
  00053	03 55 f8	 add	 edx, DWORD PTR __Old_size$[ebp]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::move
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2741 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0005f	c6 45 f3 00	 mov	 BYTE PTR $T2[ebp], 0
  00063	8d 45 f3	 lea	 eax, DWORD PTR $T2[ebp]
  00066	50		 push	 eax
  00067	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0006a	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0006d	03 4d f4	 add	 ecx, DWORD PTR __Old_ptr$3[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
  00076	83 c4 08	 add	 esp, 8

; 2742 :             return *this;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	eb 1e		 jmp	 SHORT $LN1@append
$LN2@append:

; 2743 :         }
; 2744 : 
; 2745 :         return _Reallocate_grow_by(

  0007e	33 d2		 xor	 edx, edx
  00080	88 55 f2	 mov	 BYTE PTR $T1[ebp], dl
  00083	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0008a	51		 push	 ecx
  0008b	0f b6 55 f2	 movzx	 edx, BYTE PTR $T1[ebp]
  0008f	52		 push	 edx
  00090	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00093	50		 push	 eax
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2746 :             _Count,
; 2747 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 2748 :                 const size_type _Count) {
; 2749 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2750 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2751 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2752 :             },
; 2753 :             _Ptr, _Count);
; 2754 :     }

  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2708 :     basic_string& append(const basic_string& _Right) { // append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2709 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	51		 push	 ecx
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00018	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2710 :     }

  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2699 :     basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2700 :         return append(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2701 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2688 :     basic_string& operator+=(const basic_string& _Right) { // append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2689 :         return append(_Right);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2690 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2676 :     basic_string& operator=(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2677 :         return assign(_Ptr);

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2678 :     }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -36					; size = 4
_$S16$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2597 :     ~basic_string() noexcept { // destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2598 :         _Tidy_deallocate();

  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2599 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2600 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S16$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005f	8d 45 e7	 lea	 eax, DWORD PTR _$S16$[ebp]
  00062	89 45 ec	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2601 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	89 55 dc	 mov	 DWORD PTR __To_delete$[ebp], edx

; 2602 :         _Mypair._Myval2._Myproxy = nullptr;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2603 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00076	8b 4d dc	 mov	 ecx, DWORD PTR __To_delete$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 ec	 mov	 edx, DWORD PTR __Alproxy$[ebp]
  0007d	52		 push	 edx
  0007e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00083	83 c4 08	 add	 esp, 8

; 2604 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2605 :     }

  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00095	52		 push	 edx
  00096	8b cd		 mov	 ecx, ebp
  00098	50		 push	 eax
  00099	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@basic_stri
  0009f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a4	58		 pop	 eax
  000a5	5a		 pop	 edx
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	83 c4 24	 add	 esp, 36			; 00000024H
  000b4	3b ec		 cmp	 ebp, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN7@basic_stri:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000c8	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN4@basic_stri
$LN4@basic_stri:
  000d4	24		 DB	 36			; 00000024H
  000d5	53		 DB	 83			; 00000053H
  000d6	31		 DB	 49			; 00000031H
  000d7	36		 DB	 54			; 00000036H
  000d8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
__New_array$ = -36					; size = 4
__New_capacity$ = -28					; size = 4
__Al$ = -24						; size = 4
__My_data$ = -20					; size = 4
__Right_ptr$ = -16					; size = 4
__Right_size$ = -12					; size = 4
__Right_data$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2525 :     void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2526 :         // assign by copying data stored in _Right
; 2527 :         // pre: this != &_Right
; 2528 :         // pre: *this owns no memory, iterators orphaned (note:
; 2529 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2530 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2531 :         const size_type _Right_size   = _Right_data._Mysize;

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	89 55 f4	 mov	 DWORD PTR __Right_size$[ebp], edx

; 2532 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00032	89 45 f0	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2533 :         auto& _My_data                = _Mypair._Myval2;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 2534 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0003b	83 7d f4 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  0003f	73 2d		 jae	 SHORT $LN2@Construct_

; 2535 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  00041	6a 10		 push	 16			; 00000010H
  00043	8b 4d f0	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  00046	51		 push	 ecx
  00047	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  0004a	83 c2 04	 add	 edx, 4
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2536 :             _My_data._Mysize = _Right_size;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0005c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2537 :             _My_data._Myres  = _BUF_SIZE - 1;

  0005f	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00062	c7 42 18 0f 00
	00 00		 mov	 DWORD PTR [edx+24], 15	; 0000000fH

; 2538 :             return;

  00069	e9 8b 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2539 :         }
; 2540 : 
; 2541 :         auto& _Al                     = _Getal();

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00076	89 45 e8	 mov	 DWORD PTR __Al$[ebp], eax

; 2542 :         const size_type _New_capacity = _Min_value(_Right_size | _ALLOC_MASK, max_size());

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00081	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  00084	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00087	83 c8 0f	 or	 eax, 15			; 0000000fH
  0008a	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
  0008d	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  00090	51		 push	 ecx
  00091	8d 55 d0	 lea	 edx, DWORD PTR $T1[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0009a	83 c4 08	 add	 esp, 8
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 2543 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000a2	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	51		 push	 ecx
  000a9	8b 4d e8	 mov	 ecx, DWORD PTR __Al$[ebp]
  000ac	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000b1	89 45 dc	 mov	 DWORD PTR __New_array$[ebp], eax

; 2544 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000b4	8d 55 dc	 lea	 edx, DWORD PTR __New_array$[ebp]
  000b7	52		 push	 edx
  000b8	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000bb	83 c0 04	 add	 eax, 4
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c4	83 c4 08	 add	 esp, 8

; 2545 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000ca	83 c1 01	 add	 ecx, 1
  000cd	51		 push	 ecx
  000ce	8b 55 f0	 mov	 edx, DWORD PTR __Right_ptr$[ebp]
  000d1	52		 push	 edx
  000d2	8b 45 dc	 mov	 eax, DWORD PTR __New_array$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000db	83 c4 04	 add	 esp, 4
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Narrow_char_traits<char,int>::copy
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2546 :         _My_data._Mysize = _Right_size;

  000e7	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000ea	8b 55 f4	 mov	 edx, DWORD PTR __Right_size$[ebp]
  000ed	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 2547 :         _My_data._Myres  = _New_capacity;

  000f0	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000f6	89 48 18	 mov	 DWORD PTR [eax+24], ecx
$LN1@Construct_:

; 2548 :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Construct_
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	5f		 pop	 edi
  0010b	83 c4 30	 add	 esp, 48			; 00000030H
  0010e	3b ec		 cmp	 ebp, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 04 00	 ret	 4
  0011b	90		 npad	 1
$LN6@Construct_:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN5@Construct_
$LN5@Construct_:
  00124	dc ff ff ff	 DD	 -36			; ffffffdcH
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN4@Construct_
$LN4@Construct_:
  00130	5f		 DB	 95			; 0000005fH
  00131	4e		 DB	 78			; 0000004eH
  00132	65		 DB	 101			; 00000065H
  00133	77		 DB	 119			; 00000077H
  00134	5f		 DB	 95			; 0000005fH
  00135	61		 DB	 97			; 00000061H
  00136	72		 DB	 114			; 00000072H
  00137	72		 DB	 114			; 00000072H
  00138	61		 DB	 97			; 00000061H
  00139	79		 DB	 121			; 00000079H
  0013a	00		 DB	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 2484 :     void _Take_contents(basic_string& _Right, true_type) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2485 :         // assign by stealing _Right's buffer, memcpy optimization
; 2486 :         // pre: this != &_Right
; 2487 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2488 :         // pre: *this owns no memory, iterators orphaned (note:
; 2489 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2490 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2491 :         if (_Right._Mypair._Myval2._Large_string_engaged()) {

  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00030	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0e		 je	 SHORT $LN2@Take_conte

; 2492 :             // take ownership of _Right's iterators along with its buffer
; 2493 :             _Swap_proxy_and_iterators(_Right);

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 2494 :         } else {

  00048	eb 08		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 2495 :             _Right._Mypair._Myval2._Orphan_all();

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 2496 :         }
; 2497 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2498 : 
; 2499 :         _Memcpy_val_from(_Right);

  00052	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00055	52		 push	 edx
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2500 :         _Right._Tidy_init();

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2501 :     }

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Right_data_mem$ = -24					; size = 4
__My_data_mem$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 2475 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2476 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2477 :         const auto _My_data_mem =

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00046	83 c4 04	 add	 esp, 4
  00049	83 c0 04	 add	 eax, 4
  0004c	89 45 ec	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2478 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2479 :         const auto _Right_data_mem =

  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPBV?$_String_val@U?$_Simple_types@D@std@@@0@ABV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
  00058	83 c4 04	 add	 esp, 4
  0005b	83 c0 04	 add	 eax, 4
  0005e	89 45 e8	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2480 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2481 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00061	6a 18		 push	 24			; 00000018H
  00063	8b 55 e8	 mov	 edx, DWORD PTR __Right_data_mem$[ebp]
  00066	52		 push	 edx
  00067	8b 45 ec	 mov	 eax, DWORD PTR __My_data_mem$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _memcpy
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2482 :     }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	83 c4 18	 add	 esp, 24			; 00000018H
  00081	3b ec		 cmp	 ebp, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2460 :         _NOEXCEPT_COND(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2461 :         if (this != _STD addressof(_Right)) {

  00017	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00020	83 c4 04	 add	 esp, 4
  00023	39 45 fc	 cmp	 DWORD PTR _this$[ebp], eax
  00026	74 16		 je	 SHORT $LN2@operator

; 2462 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  00028	33 c9		 xor	 ecx, ecx
  0002a	88 4d fb	 mov	 BYTE PTR $T1[ebp], cl
  0002d	0f b6 55 fb	 movzx	 edx, BYTE PTR $T1[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN2@operator:

; 2463 :         }
; 2464 : 
; 2465 :         return *this;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2466 :     }

  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT
; _this$ = ecx

; 2431 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2432 :         _Tidy_deallocate();

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2433 :         _Pocma(_Getal(), _Right._Getal());

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  00036	83 c4 08	 add	 esp, 8

; 2434 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00039	33 c0		 xor	 eax, eax
  0003b	88 45 fb	 mov	 BYTE PTR $T1[ebp], al
  0003e	0f b6 4d fb	 movzx	 ecx, BYTE PTR $T1[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00046	52		 push	 edx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2435 :     }

  0004f	83 c4 08	 add	 esp, 8
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2383 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	0f b6 45 ef	 movzx	 eax, BYTE PTR $T4[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2384 :         // construct by moving _Right
; 2385 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00064	50		 push	 eax
  00065	8d 4d ee	 lea	 ecx, DWORD PTR $T3[ebp]
  00068	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006d	50		 push	 eax
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2386 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00076	33 c9		 xor	 ecx, ecx
  00078	88 4d ed	 mov	 BYTE PTR $T2[ebp], cl
  0007b	0f b6 55 ed	 movzx	 edx, BYTE PTR $T2[ebp]
  0007f	52		 push	 edx
  00080	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00083	50		 push	 eax
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2387 :     }

  0008c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00093	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	83 c4 14	 add	 esp, 20			; 00000014H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S18$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2297 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	0f b6 45 cf	 movzx	 eax, BYTE PTR $T2[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2298 :         // construct from [_Ptr, <null>)
; 2299 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	50		 push	 eax
  00057	8d 4d e7	 lea	 ecx, DWORD PTR _$S18$[ebp]
  0005a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005f	8d 4d e7	 lea	 ecx, DWORD PTR _$S18$[ebp]
  00062	89 4d ec	 mov	 DWORD PTR __Alproxy$[ebp], ecx

; 2300 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00065	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00068	52		 push	 edx
  00069	8b 45 ec	 mov	 eax, DWORD PTR __Alproxy$[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00070	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2301 :         _Tidy_init();

  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2302 :         assign(_Ptr);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00084	51		 push	 ecx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2303 :         _Proxy._Release();

  0008d	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00090	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2304 :     }

  00095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c6	59		 pop	 ecx
  000c7	5f		 pop	 edi
  000c8	83 c4 34	 add	 esp, 52			; 00000034H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN9@basic_stri:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000e0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN5@basic_stri
  000ec	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000f0	08 00 00 00	 DD	 8
  000f4	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  000f8	5f		 DB	 95			; 0000005fH
  000f9	50		 DB	 80			; 00000050H
  000fa	72		 DB	 114			; 00000072H
  000fb	6f		 DB	 111			; 0000006fH
  000fc	78		 DB	 120			; 00000078H
  000fd	79		 DB	 121			; 00000079H
  000fe	00		 DB	 0
$LN5@basic_stri:
  000ff	24		 DB	 36			; 00000024H
  00100	53		 DB	 83			; 00000053H
  00101	31		 DB	 49			; 00000031H
  00102	38		 DB	 56			; 00000038H
  00103	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S20$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 :     basic_string(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2269 :         const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2270 :         : _Mypair(_One_then_variadic_args_t(), _Al) { // construct from _Right [_Roff, _Roff + _Count)

  0003a	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  0003d	50		 push	 eax
  0003e	0f b6 4d cf	 movzx	 ecx, BYTE PTR $T2[ebp]
  00042	51		 push	 ecx
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2271 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0005a	50		 push	 eax
  0005b	8d 4d e7	 lea	 ecx, DWORD PTR _$S20$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00063	8d 55 e7	 lea	 edx, DWORD PTR _$S20$[ebp]
  00066	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 2272 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00069	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00070	51		 push	 ecx
  00071	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00079	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2273 :         _Tidy_init();

  0007d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2274 :         assign(_Right, _Roff, _Count);

  00085	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00088	52		 push	 edx
  00089	8b 45 0c	 mov	 eax, DWORD PTR __Roff$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00090	51		 push	 ecx
  00091	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2275 :         _Proxy._Release();

  00099	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2276 :     }

  000a1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a5	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000a8	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b7	52		 push	 edx
  000b8	8b cd		 mov	 ecx, ebp
  000ba	50		 push	 eax
  000bb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000c1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c6	58		 pop	 eax
  000c7	5a		 pop	 edx
  000c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d2	59		 pop	 ecx
  000d3	5f		 pop	 edi
  000d4	83 c4 34	 add	 esp, 52			; 00000034H
  000d7	3b ec		 cmp	 ebp, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 10 00	 ret	 16			; 00000010H
$LN9@basic_stri:
  000e4	02 00 00 00	 DD	 2
  000e8	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000ec	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN5@basic_stri
  000f8	d4 ff ff ff	 DD	 -44			; ffffffd4H
  000fc	08 00 00 00	 DD	 8
  00100	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00104	5f		 DB	 95			; 0000005fH
  00105	50		 DB	 80			; 00000050H
  00106	72		 DB	 114			; 00000072H
  00107	6f		 DB	 111			; 0000006fH
  00108	78		 DB	 120			; 00000078H
  00109	79		 DB	 121			; 00000079H
  0010a	00		 DB	 0
$LN5@basic_stri:
  0010b	24		 DB	 36			; 00000024H
  0010c	53		 DB	 83			; 00000053H
  0010d	32		 DB	 50			; 00000032H
  0010e	30		 DB	 48			; 00000030H
  0010f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2247 :     basic_string() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001b	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	50		 push	 eax
  0002a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00036	0f b6 45 ef	 movzx	 eax, BYTE PTR $T3[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2248 :         // construct empty string
; 2249 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00052	50		 push	 eax
  00053	8d 4d ee	 lea	 ecx, DWORD PTR $T2[ebp]
  00056	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005b	50		 push	 eax
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2250 :         _Tidy_init();

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2251 :     }

  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	83 c4 14	 add	 esp, 20			; 00000014H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -50						; size = 1
$T3 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S21$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2230 :     basic_string(const basic_string& _Right)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 :         : _Mypair(_One_then_variadic_args_t(), _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00042	50		 push	 eax
  00043	8d 45 cf	 lea	 eax, DWORD PTR $T3[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  0004c	83 c4 08	 add	 esp, 8
  0004f	50		 push	 eax
  00050	0f b6 4d ce	 movzx	 ecx, BYTE PTR $T2[ebp]
  00054	51		 push	 ecx
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2232 :         // construct by copying _Right
; 2233 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0006c	50		 push	 eax
  0006d	8d 4d e7	 lea	 ecx, DWORD PTR _$S21$[ebp]
  00070	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00075	8d 55 e7	 lea	 edx, DWORD PTR _$S21$[ebp]
  00078	89 55 ec	 mov	 DWORD PTR __Alproxy$[ebp], edx

; 2234 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR __Alproxy$[ebp]
  00082	51		 push	 ecx
  00083	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  00086	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0008b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2235 :         _Construct_lv_contents(_Right);

  0008f	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00092	52		 push	 edx
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2236 :         _Proxy._Release();

  0009b	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2237 :     }

  000a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a7	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	52		 push	 edx
  000ba	8b cd		 mov	 ecx, ebp
  000bc	50		 push	 eax
  000bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@basic_stri
  000c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c8	58		 pop	 eax
  000c9	5a		 pop	 edx
  000ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d4	59		 pop	 ecx
  000d5	5f		 pop	 edi
  000d6	83 c4 34	 add	 esp, 52			; 00000034H
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
  000e6	66 90		 npad	 2
$LN9@basic_stri:
  000e8	02 00 00 00	 DD	 2
  000ec	00 00 00 00	 DD	 $LN8@basic_stri
$LN8@basic_stri:
  000f0	e7 ff ff ff	 DD	 -25			; ffffffe7H
  000f4	01 00 00 00	 DD	 1
  000f8	00 00 00 00	 DD	 $LN5@basic_stri
  000fc	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00100	08 00 00 00	 DD	 8
  00104	00 00 00 00	 DD	 $LN6@basic_stri
$LN6@basic_stri:
  00108	5f		 DB	 95			; 0000005fH
  00109	50		 DB	 80			; 00000050H
  0010a	72		 DB	 114			; 00000072H
  0010b	6f		 DB	 111			; 0000006fH
  0010c	78		 DB	 120			; 00000078H
  0010d	79		 DB	 121			; 00000079H
  0010e	00		 DB	 0
$LN5@basic_stri:
  0010f	24		 DB	 36			; 00000024H
  00110	53		 DB	 83			; 00000053H
  00111	32		 DB	 50			; 00000032H
  00112	31		 DB	 49			; 00000031H
  00113	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR __Proxy$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 04	 add	 ecx, 4
  00041	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2148 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2146 :         _Bxty() {} // user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2140 :     size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2141 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2142 :         return _Min_value(_Size, _Mysize - _Off);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001d	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  00020	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00023	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00026	52		 push	 edx
  00027	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00030	83 c4 08	 add	 esp, 8
  00033	8b 00		 mov	 eax, DWORD PTR [eax]

; 2143 :     }

  00035	83 c4 08	 add	 esp, 8
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2136 :     [[noreturn]] static void _Xran() { // report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2137 :         _Xout_of_range("invalid string position");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2138 :     }

  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2124 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2125 :         if (_Mysize < _Off) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00017	73 05		 jae	 SHORT $LN3@Check_offs

; 2126 :             _Xran();

  00019	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 2127 :         }
; 2128 :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2120 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2121 :         return _BUF_SIZE <= _Myres;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0001e	72 09		 jb	 SHORT $LN3@Large_stri
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv66[ebp]

; 2122 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2111 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2112 :         const value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2113 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2114 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2115 :         }
; 2116 : 
; 2117 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2118 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2102 :     value_type* _Myptr() { // determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2103 :         value_type* _Result = _Bx._Buf;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 2104 :         if (_Large_string_engaged()) {

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN2@Myptr

; 2105 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  0003b	83 c4 04	 add	 esp, 4
  0003e	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2106 :         }
; 2107 : 
; 2108 :         return _Result;

  00041	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 2109 :     }

  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2092 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 04	 add	 ecx, 4
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 770  :     _NODISCARD static _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 771  :         return _Al;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 772  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 766  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00003	83 c8 ff	 or	 eax, -1

; 768  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 870  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 871  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00020	83 c4 04	 add	 esp, 4

; 872  :     }

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 865  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 866  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 867  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 08	 add	 esp, 8

; 868  :     }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 859  :     constexpr allocator() noexcept {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 377  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 378  :         _Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl

; 379  :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::move, COMDAT

; 366  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 367  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 368  :         return static_cast<_Elem*>(_CSTD memmove(_First1, _First2, _Count));

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 369  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?move@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::move
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z PROC	; std::_Narrow_char_traits<char,int>::find, COMDAT

; 345  :         _In_reads_(_Count) const _Elem* const _First, const size_t _Count, const _Elem& _Ch) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 346  :         // look for _Ch in [_First, _First + _Count)
; 347  : #if _HAS_CXX17
; 348  : #if _HAS_CHAR8_T
; 349  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 350  : #if _HAS_U8_INTRINSICS
; 351  :             return __builtin_u8memchr(_First, _Ch, _Count);
; 352  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 353  :             return _Char_traits<_Elem, _Int_type>::find(_First, _Count, _Ch);
; 354  : #endif // _HAS_U8_INTRINSICS
; 355  :         } else
; 356  : #endif // _HAS_CHAR8_T
; 357  :         {
; 358  :             return __builtin_char_memchr(_First, _Ch, _Count);
; 359  :         }
; 360  : #else // _HAS_CXX17
; 361  :         return static_cast<const _Elem*>(_CSTD memchr(_First, _Ch, _Count));

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Ch$[ebp]
  00029	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _memchr
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 362  : #endif // _HAS_CXX17
; 363  :     }

  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$_Narrow_char_traits@DH@std@@SAPBDQBDIABD@Z ENDP	; std::_Narrow_char_traits<char,int>::find
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Narrow_char_traits<char,int>::copy, COMDAT

; 331  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 332  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 333  :         return static_cast<_Elem*>(_CSTD memcpy(_First1, _First2, _Count));

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memcpy
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 334  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?copy@?$_Narrow_char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Narrow_char_traits<char,int>::copy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 310  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 311  :         // find length of null-terminated string
; 312  : #if _HAS_CXX17
; 313  : #if _HAS_CHAR8_T
; 314  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 315  : #if _HAS_U8_INTRINSICS
; 316  :             return __builtin_u8strlen(_First);
; 317  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 318  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 319  : #endif // _HAS_U8_INTRINSICS
; 320  :         } else
; 321  : #endif // _HAS_CHAR8_T
; 322  :         {
; 323  :             return __builtin_strlen(_First);
; 324  :         }
; 325  : #else // _HAS_CXX17
; 326  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strlen
  0002b	83 c4 04	 add	 esp, 4

; 327  : #endif // _HAS_CXX17
; 328  :     }

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z PROC	; std::_Narrow_char_traits<char,int>::compare, COMDAT

; 294  :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 295  :         // compare [_First1, _First1 + _Count) with [_First2, ...)
; 296  : #if _HAS_CXX17
; 297  : #if _HAS_U8_INTRINSICS
; 298  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 299  :             return __builtin_u8memcmp(_First1, _First2, _Count);
; 300  :         } else
; 301  : #endif // _HAS_U8_INTRINSICS
; 302  :         {
; 303  :             return __builtin_memcmp(_First1, _First2, _Count);
; 304  :         }
; 305  : #else // _HAS_CXX17
; 306  :         return _CSTD memcmp(_First1, _First2, _Count);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _memcmp
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 307  : #endif // _HAS_CXX17
; 308  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ENDP	; std::_Narrow_char_traits<char,int>::compare
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT

; 211  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept { // assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  :         _Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	66 8b 11	 mov	 dx, WORD PTR [ecx]
  0000c	66 89 10	 mov	 WORD PTR [eax], dx

; 213  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::move, COMDAT

; 199  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 200  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 201  :         return reinterpret_cast<_Elem*>(

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _wmemmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 202  :             _CSTD wmemmove(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
; 203  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::move
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z PROC	; std::_WChar_traits<wchar_t>::find, COMDAT

; 185  :         _In_reads_(_Count) const _Elem* _First, const size_t _Count, const _Elem& _Ch) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 186  :         // look for _Ch in [_First, _First + _Count)
; 187  : #if _HAS_CXX17
; 188  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 189  :             return __builtin_wmemchr(_First, _Ch, _Count);
; 190  :         } else {
; 191  :             return _Char_traits<_Elem, unsigned short>::find(_First, _Count, _Ch);
; 192  :         }
; 193  : #else // _HAS_CXX17
; 194  :         return reinterpret_cast<const _Elem*>(_CSTD wmemchr(reinterpret_cast<const wchar_t*>(_First), _Ch, _Count));

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 10	 mov	 ecx, DWORD PTR __Ch$[ebp]
  00029	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _wmemchr
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : #endif // _HAS_CXX17
; 196  :     }

  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?find@?$_WChar_traits@_W@std@@SAPB_WPB_WIAB_W@Z ENDP	; std::_WChar_traits<wchar_t>::find
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::copy, COMDAT

; 170  :         const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 171  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 172  :         return reinterpret_cast<_Elem*>(

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _wmemcpy
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  :             _CSTD wmemcpy(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
; 174  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::copy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z PROC		; std::_WChar_traits<wchar_t>::length, COMDAT

; 156  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* _First) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 157  :         // find length of null-terminated sequence
; 158  : #if _HAS_CXX17
; 159  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 160  :             return __builtin_wcslen(_First);
; 161  :         } else {
; 162  :             return _Char_traits<_Elem, unsigned short>::length(_First);
; 163  :         }
; 164  : #else // _HAS_CXX17
; 165  :         return _CSTD wcslen(reinterpret_cast<const wchar_t*>(_First));

  00023	8b f4		 mov	 esi, esp
  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  0002f	83 c4 04	 add	 esp, 4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  : #endif // _HAS_CXX17
; 167  :     }

  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	5e		 pop	 esi
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ENDP		; std::_WChar_traits<wchar_t>::length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xstring
;	COMDAT ?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z PROC	; std::_WChar_traits<wchar_t>::compare, COMDAT

; 142  :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept { // strengthened

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 143  :         // compare [_First1, _First1 + _Count) with [_First2, ...)
; 144  : #if _HAS_CXX17
; 145  :         if constexpr (is_same_v<_Elem, wchar_t>) {
; 146  :             return __builtin_wmemcmp(_First1, _First2, _Count);
; 147  :         } else {
; 148  :             return _Char_traits<_Elem, unsigned short>::compare(_First1, _First2, _Count);
; 149  :         }
; 150  : #else // _HAS_CXX17
; 151  :         return _CSTD wmemcmp(

  00022	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0002d	52		 push	 edx
  0002e	e8 00 00 00 00	 call	 _wmemcmp
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  :             reinterpret_cast<const wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count);
; 153  : #endif // _HAS_CXX17
; 154  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?compare@?$_WChar_traits@_W@std@@SAHQB_W0I@Z ENDP	; std::_WChar_traits<wchar_t>::compare
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1348 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1349 :         _Ptr = nullptr;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1350 :     }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 1267 :     void _Orphan_me() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001c	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1268 :         if (_Myproxy) { // adopted, remove self from list

  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003d	0f 84 a8 00 00
	00		 je	 $LN1@Orphan_me

; 1269 :             _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	83 c2 04	 add	 edx, 4
  0004b	89 55 ec	 mov	 DWORD PTR __Pnext$2[ebp], edx
$LN2@Orphan_me:

; 1270 :             while (*_Pnext && *_Pnext != this) {

  0004e	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	74 17		 je	 SHORT $LN6@Orphan_me
  00056	8b 4d ec	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	3b 55 f0	 cmp	 edx, DWORD PTR _this$[ebp]
  0005e	74 0d		 je	 SHORT $LN6@Orphan_me

; 1271 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  00060	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	83 c1 04	 add	 ecx, 4
  00068	89 4d ec	 mov	 DWORD PTR __Pnext$2[ebp], ecx

; 1272 :             }

  0006b	eb e1		 jmp	 SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 1273 : 
; 1274 :             _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

  0006d	8b 55 ec	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00070	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00073	74 02		 je	 SHORT $LN9@Orphan_me
  00075	eb 5c		 jmp	 SHORT $LN4@Orphan_me
$LN9@Orphan_me:
  00077	8b f4		 mov	 esi, esp
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00083	6a 00		 push	 0
  00085	68 fa 04 00 00	 push	 1274			; 000004faH
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0008f	6a 02		 push	 2
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00097	83 c4 18	 add	 esp, 24			; 00000018H
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	83 f8 01	 cmp	 eax, 1
  000a4	75 01		 jne	 SHORT $LN14@Orphan_me
  000a6	cc		 int	 3
$LN14@Orphan_me:
  000a7	8b f4		 mov	 esi, esp
  000a9	6a 00		 push	 0
  000ab	68 fa 04 00 00	 push	 1274			; 000004faH
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	3b f4		 cmp	 esi, esp
  000ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cf	33 c9		 xor	 ecx, ecx
  000d1	75 a4		 jne	 SHORT $LN9@Orphan_me
$LN4@Orphan_me:
  000d3	33 d2		 xor	 edx, edx
  000d5	75 96		 jne	 SHORT $LN6@Orphan_me

; 1275 :             *_Pnext  = _Mynextiter;

  000d7	8b 45 ec	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  000da	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e0	89 10		 mov	 DWORD PTR [eax], edx

; 1276 :             _Myproxy = nullptr;

  000e2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Orphan_me:

; 1277 :         }
; 1278 :     }

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5e		 pop	 esi
  000f7	83 c4 14	 add	 esp, 20			; 00000014H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_me@_Iterator_base12@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_me@_Iterator_base12@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1262 :     const _Container_base12* _Getcont() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1263 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 0c		 je	 SHORT $LN3@Getcont
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 11		 mov	 edx, DWORD PTR [ecx]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  00029	eb 07		 jmp	 SHORT $LN4@Getcont
$LN3@Getcont:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@Getcont:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]

; 1264 :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Lock$3 = -28						; size = 4
__Parent_proxy$4 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1234 :     void _Adopt(const _Container_base12* _Parent) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1235 :         if (_Parent) {

  00046	83 7d 08 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  0004a	74 6d		 je	 SHORT $LN2@Adopt

; 1236 :             // have a parent, do adoption
; 1237 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  0004c	8b 45 08	 mov	 eax, DWORD PTR __Parent$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 4d ec	 mov	 DWORD PTR __Parent_proxy$4[ebp], ecx

; 1238 : 
; 1239 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1240 :             if (_Myproxy != _Parent_proxy) { // change parentage

  00054	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 02		 mov	 eax, DWORD PTR [edx]
  00059	3b 45 ec	 cmp	 eax, DWORD PTR __Parent_proxy$4[ebp]
  0005c	74 59		 je	 SHORT $LN4@Adopt

; 1241 :                 _Lockit _Lock(_LOCK_DEBUG);

  0005e	8b f4		 mov	 esi, esp
  00060	6a 03		 push	 3
  00062	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1242 :                 _Orphan_me();

  00079	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1243 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;

  00081	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	8b 55 ec	 mov	 edx, DWORD PTR __Parent_proxy$4[ebp]
  00087	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1244 :                 _Parent_proxy->_Myfirstiter = this;

  0008d	8b 4d ec	 mov	 ecx, DWORD PTR __Parent_proxy$4[ebp]
  00090	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00093	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1245 :                 _Myproxy                    = _Parent_proxy;

  00096	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d ec	 mov	 ecx, DWORD PTR __Parent_proxy$4[ebp]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 1246 :             }

  0009e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a5	8b f4		 mov	 esi, esp
  000a7	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@Adopt:

; 1247 : 
; 1248 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1249 :             _Myproxy = _Parent_proxy;
; 1250 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1251 :         } else {

  000b7	eb 3c		 jmp	 SHORT $LN1@Adopt
$LN2@Adopt:

; 1252 :             // no future parent, just disown current parent
; 1253 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1254 :             _Lockit _Lock(_LOCK_DEBUG);

  000b9	8b f4		 mov	 esi, esp
  000bb	6a 03		 push	 3
  000bd	8d 4d d8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  000c6	3b f4		 cmp	 esi, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1255 :             _Orphan_me();

  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1256 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1257 :             _Myproxy = nullptr;
; 1258 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1259 :         }

  000dc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e3	8b f4		 mov	 esi, esp
  000e5	8d 4d d8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Adopt:

; 1260 :     }

  000f5	52		 push	 edx
  000f6	8b cd		 mov	 ecx, ebp
  000f8	50		 push	 eax
  000f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@Adopt
  000ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00104	58		 pop	 eax
  00105	5a		 pop	 edx
  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	5e		 pop	 esi
  00112	83 c4 2c	 add	 esp, 44			; 0000002cH
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
  00122	66 90		 npad	 2
$LN12@Adopt:
  00124	02 00 00 00	 DD	 2
  00128	00 00 00 00	 DD	 $LN11@Adopt
$LN11@Adopt:
  0012c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN8@Adopt
  00138	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN9@Adopt
$LN9@Adopt:
  00144	5f		 DB	 95			; 0000005fH
  00145	4c		 DB	 76			; 0000004cH
  00146	6f		 DB	 111			; 0000006fH
  00147	63		 DB	 99			; 00000063H
  00148	6b		 DB	 107			; 0000006bH
  00149	00		 DB	 0
$LN8@Adopt:
  0014a	5f		 DB	 95			; 0000005fH
  0014b	4c		 DB	 76			; 0000004cH
  0014c	6f		 DB	 111			; 0000006fH
  0014d	63		 DB	 99			; 00000063H
  0014e	6b		 DB	 107			; 0000006bH
  0014f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1:
  00013	8b f4		 mov	 esi, esp
  00015	8d 4d d8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0001e	3b f4		 cmp	 esi, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	c3		 ret	 0
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1227 :     ~_Iterator_base12() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Iterator_base12@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00020	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00023	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 :         _Lockit _Lock(_LOCK_DEBUG);

  0003a	8b f4		 mov	 esi, esp
  0003c	6a 03		 push	 3
  0003e	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1230 :         _Orphan_me();

  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1231 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1232 :     }

  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00064	8b f4		 mov	 esi, esp
  00066	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	52		 push	 edx
  00077	8b cd		 mov	 ecx, ebp
  00079	50		 push	 eax
  0007a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@Iterator_b
  00080	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00085	58		 pop	 eax
  00086	5a		 pop	 edx
  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5e		 pop	 esi
  00093	83 c4 1c	 add	 esp, 28			; 0000001cH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
  000a1	0f 1f 00	 npad	 3
$LN7@Iterator_b:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN6@Iterator_b
$LN6@Iterator_b:
  000ac	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000b0	04 00 00 00	 DD	 4
  000b4	00 00 00 00	 DD	 $LN4@Iterator_b
$LN4@Iterator_b:
  000b8	5f		 DB	 95			; 0000005fH
  000b9	4c		 DB	 76			; 0000004cH
  000ba	6f		 DB	 111			; 0000006fH
  000bb	63		 DB	 99			; 00000063H
  000bc	6b		 DB	 107			; 0000006bH
  000bd	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1210 :     _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001d	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00020	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00023	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1211 :         if (_Myproxy != _Right._Myproxy) {

  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00040	8b 10		 mov	 edx, DWORD PTR [eax]
  00042	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00044	74 56		 je	 SHORT $LN2@operator

; 1212 :             if (_Right._Myproxy) {

  00046	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00049	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004c	74 12		 je	 SHORT $LN3@operator

; 1213 :                 _Adopt(_Right._Myproxy->_Mycont);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	50		 push	 eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 1214 :             } else { // becoming invalid, disown current parent

  0005e	eb 3c		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 1215 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1216 :                 _Lockit _Lock(_LOCK_DEBUG);

  00060	8b f4		 mov	 esi, esp
  00062	6a 03		 push	 3
  00064	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1217 :                 _Orphan_me();

  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1218 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1219 :                 _Myproxy = nullptr;
; 1220 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1221 :             }

  00083	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008a	8b f4		 mov	 esi, esp
  0008c	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@operator:

; 1222 :         }
; 1223 : 
; 1224 :         return *this;

  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 1225 :     }

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@operator
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5e		 pop	 esi
  000bc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN10@operator:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN9@operator
$LN9@operator:
  000d4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000d8	04 00 00 00	 DD	 4
  000dc	00 00 00 00	 DD	 $LN7@operator
$LN7@operator:
  000e0	5f		 DB	 95			; 0000005fH
  000e1	4c		 DB	 76			; 0000004cH
  000e2	6f		 DB	 111			; 0000006fH
  000e3	63		 DB	 99			; 00000063H
  000e4	6b		 DB	 107			; 0000006bH
  000e5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1206 :     _Iterator_base12(const _Iterator_base12& _Right) noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1207 :         *this = _Right;

  00021	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1208 :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c4 04	 add	 esp, 4
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1204 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1302 : inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1303 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1304 :     _Lockit _Lock(_LOCK_DEBUG);

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 03		 push	 3
  00041	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1305 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1306 : 
; 1307 :     _Container_proxy* _Temp = _Myproxy;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 4d e0	 mov	 DWORD PTR __Temp$[ebp], ecx

; 1308 :     _Myproxy                = _Right._Myproxy;

  00060	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx

; 1309 :     _Right._Myproxy         = _Temp;

  0006a	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Temp$[ebp]
  00070	89 02		 mov	 DWORD PTR [edx], eax

; 1310 : 
; 1311 :     if (_Myproxy) {

  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00078	74 0a		 je	 SHORT $LN2@Swap_proxy

; 1312 :         _Myproxy->_Mycont = this;

  0007a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1313 :     }
; 1314 : 
; 1315 :     if (_Right._Myproxy) {

  00084	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00087	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0008a	74 0a		 je	 SHORT $LN3@Swap_proxy

; 1316 :         _Right._Myproxy->_Mycont = &_Right;

  0008c	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1317 :     }
; 1318 : }

  00096	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009d	8b f4		 mov	 esi, esp
  0009f	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	52		 push	 edx
  000b0	8b cd		 mov	 ecx, ebp
  000b2	50		 push	 eax
  000b3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Swap_proxy
  000b9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000be	58		 pop	 eax
  000bf	5a		 pop	 edx
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5e		 pop	 esi
  000cc	83 c4 20	 add	 esp, 32			; 00000020H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 04 00	 ret	 4
$LN9@Swap_proxy:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN8@Swap_proxy
$LN8@Swap_proxy:
  000e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN6@Swap_proxy
$LN6@Swap_proxy:
  000f0	5f		 DB	 95			; 0000005fH
  000f1	4c		 DB	 76			; 0000004cH
  000f2	6f		 DB	 111			; 0000006fH
  000f3	63		 DB	 99			; 00000063H
  000f4	6b		 DB	 107			; 0000006bH
  000f5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1288 : inline void _Container_base12::_Orphan_all() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00020	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00023	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00026	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1289 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1290 :     if (_Myproxy) { // proxy allocated, drain it

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 38 00	 cmp	 DWORD PTR [eax], 0
  00043	74 6f		 je	 SHORT $LN1@Orphan_all

; 1291 :         _Lockit _Lock(_LOCK_DEBUG);

  00045	8b f4		 mov	 esi, esp
  00047	6a 03		 push	 3
  00049	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1292 : 
; 1293 :         for (auto _Pnext = &_Myproxy->_Myfirstiter; *_Pnext; *_Pnext = (*_Pnext)->_Mynextiter) {

  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	83 c2 04	 add	 edx, 4
  00068	89 55 e0	 mov	 DWORD PTR __Pnext$2[ebp], edx
  0006b	eb 0d		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0006d	8b 45 e0	 mov	 eax, DWORD PTR __Pnext$2[ebp]
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00075	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00078	89 02		 mov	 DWORD PTR [edx], eax
$LN4@Orphan_all:
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR __Pnext$2[ebp]
  0007d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00080	74 0d		 je	 SHORT $LN3@Orphan_all

; 1294 :             (*_Pnext)->_Myproxy = nullptr;

  00082	8b 55 e0	 mov	 edx, DWORD PTR __Pnext$2[ebp]
  00085	8b 02		 mov	 eax, DWORD PTR [edx]
  00087	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1295 :         }

  0008d	eb de		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1296 : 
; 1297 :         _Myproxy->_Myfirstiter = nullptr;

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	8b 11		 mov	 edx, DWORD PTR [ecx]
  00094	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1298 :     }

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8b f4		 mov	 esi, esp
  000a4	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Orphan_all:

; 1299 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1300 : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Orphan_all
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5e		 pop	 esi
  000d1	83 c4 20	 add	 esp, 32			; 00000020H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
  000df	90		 npad	 1
$LN11@Orphan_all:
  000e0	01 00 00 00	 DD	 1
  000e4	00 00 00 00	 DD	 $LN10@Orphan_all
$LN10@Orphan_all:
  000e8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000ec	04 00 00 00	 DD	 4
  000f0	00 00 00 00	 DD	 $LN8@Orphan_all
$LN8@Orphan_all:
  000f4	5f		 DB	 95			; 0000005fH
  000f5	4c		 DB	 76			; 0000004cH
  000f6	6f		 DB	 111			; 0000006fH
  000f7	63		 DB	 99			; 00000063H
  000f8	6b		 DB	 107			; 0000006bH
  000f9	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00012	c3		 ret	 0
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _Container_base12() : _Myproxy(nullptr) {} // construct childless container

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1073 : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1074 :     // convert size_t to size_t, unchanged
; 1075 :     return _Len;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1076 : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 102  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 103  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 104  :     _Bytes += _Non_user_size;

  00018	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	83 c1 27	 add	 ecx, 39			; 00000027H
  00020	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00023	89 0a		 mov	 DWORD PTR [edx], ecx

; 105  : 
; 106  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00025	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	89 4d fc	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 107  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	6b c2 ff	 imul	 eax, edx, -1
  00035	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00038	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0003b	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 108  : 
; 109  :     // If the following asserts, it likely means that we are performing
; 110  :     // an aligned delete on memory coming from an unaligned allocation.
; 111  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 fe	 imul	 ecx, eax, -2
  00046	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_user$[ebp]
  00049	81 3c 0a fa fa
	fa fa		 cmp	 DWORD PTR [edx+ecx], -84215046 ; fafafafaH
  00050	75 02		 jne	 SHORT $LN7@Adjust_man
  00052	eb 56		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  00054	8b f4		 mov	 esi, esp
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00060	6a 00		 push	 0
  00062	6a 6f		 push	 111			; 0000006fH
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00069	6a 02		 push	 2
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  00071	83 c4 18	 add	 esp, 24			; 00000018H
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	75 01		 jne	 SHORT $LN19@Adjust_man
  00080	cc		 int	 3
$LN19@Adjust_man:
  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	6a 6f		 push	 111			; 0000006fH
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	33 c9		 xor	 ecx, ecx
  000a8	75 aa		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  000aa	33 d2		 xor	 edx, edx
  000ac	75 90		 jne	 SHORT $LN4@Adjust_man

; 112  : 
; 113  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 114  :     // in range [_Min_back_shift, _Non_user_size]
; 115  : #ifdef _DEBUG
; 116  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ae	c7 45 f4 08 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 8

; 117  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 118  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 119  : #endif // _DEBUG
; 120  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  000bd	89 4d f0	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 121  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c0	83 7d f0 08	 cmp	 DWORD PTR __Back_shift$[ebp], 8
  000c4	72 08		 jb	 SHORT $LN13@Adjust_man
  000c6	83 7d f0 27	 cmp	 DWORD PTR __Back_shift$[ebp], 39 ; 00000027H
  000ca	77 02		 ja	 SHORT $LN13@Adjust_man
  000cc	eb 56		 jmp	 SHORT $LN8@Adjust_man
$LN13@Adjust_man:
  000ce	8b f4		 mov	 esi, esp
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  000da	6a 00		 push	 0
  000dc	6a 79		 push	 121			; 00000079H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@FJIKDGOA@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000e3	6a 02		 push	 2
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  000eb	83 c4 18	 add	 esp, 24			; 00000018H
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	83 f8 01	 cmp	 eax, 1
  000f8	75 01		 jne	 SHORT $LN20@Adjust_man
  000fa	cc		 int	 3
$LN20@Adjust_man:
  000fb	8b f4		 mov	 esi, esp
  000fd	6a 00		 push	 0
  000ff	6a 79		 push	 121			; 00000079H
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CDBIFGMM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter
  00116	83 c4 14	 add	 esp, 20			; 00000014H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	33 c0		 xor	 eax, eax
  00122	75 aa		 jne	 SHORT $LN13@Adjust_man
$LN8@Adjust_man:
  00124	33 c9		 xor	 ecx, ecx
  00126	75 98		 jne	 SHORT $LN10@Adjust_man

; 122  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00128	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0012b	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0012e	89 02		 mov	 DWORD PTR [edx], eax

; 123  : }

  00130	5e		 pop	 esi
  00131	83 c4 10	 add	 esp, 16			; 00000010H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 46   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   :         return ::operator new(_Bytes);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 48   :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 324  :     _THROW(bad_array_new_length{});

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0001e	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  00023	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 325  : }

  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QAE@ABV01@@Z
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_array_new_length@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_array_new_length@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??1bad_array_new_length@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_array_new_length@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 138  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_array_new_length@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 137  :         : bad_alloc("bad array new length")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AAE@QBD@Z ; std::bad_alloc::bad_alloc
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 138  :     {

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 139  :     }

  0004a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_array_new_length@std@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1bad_alloc@std@@UAE@XZ
__ehhandler$??0bad_array_new_length@std@@QAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_array_new_length@std@@QAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UAE@XZ
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1bad_alloc@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	83 c4 10	 add	 esp, 16			; 00000010H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1bad_alloc@std@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1bad_alloc@std@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1bad_alloc@std@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 127  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0bad_alloc@std@@AAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 126  :         : exception(_Message, 1)

  0002d	6a 01		 push	 1
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	50		 push	 eax
  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  :     {

  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 128  :     }

  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	83 c4 10	 add	 esp, 16			; 00000010H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0bad_alloc@std@@AAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0bad_alloc@std@@AAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0bad_alloc@std@@AAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :         return _Data._What ? _Data._What : "Unknown exception";

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001e	74 0b		 je	 SHORT $LN3@what
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00029	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00032	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 93   :     }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 87   :         __std_exception_destroy(&_Data);

  00036	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	83 c1 04	 add	 ecx, 4
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4

; 88   :     }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 69   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 68   :         : _Data()

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 04	 add	 edx, 4
  0003e	89 0a		 mov	 DWORD PTR [edx], ecx
  00040	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 70   :         __std_exception_copy(&_Other._Data, &_Data);

  00043	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  0004d	83 c1 04	 add	 ecx, 4
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ___std_exception_copy
  00056	83 c4 08	 add	 esp, 8

; 71   :     }

  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 62   :         : _Data()

  00017	33 c9		 xor	 ecx, ecx
  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	83 c2 04	 add	 edx, 4
  0001f	89 0a		 mov	 DWORD PTR [edx], ecx
  00021	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 64   :         _Data._What = _Message;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0002a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 65   :     }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 553  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 554  :         return INT_MAX;

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 555  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 243  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :         #pragma warning(push)
; 245  :         #pragma warning(disable : 4996 6386)
; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 247  :         #pragma warning(pop)
; 248  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 10	 mov	 eax, DWORD PTR __N$[ebp]
  00006	d1 e0		 shl	 eax, 1
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __S1$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _memcpy
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemcmp
_TEXT	SEGMENT
tv74 = -4						; size = 4
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcmp PROC						; COMDAT

; 214  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 215  :         for (; 0 < _N; ++_S1, ++_S2, --_N)

  0000b	eb 1b		 jmp	 SHORT $LN4@wmemcmp
$LN2@wmemcmp:
  0000d	8b 45 08	 mov	 eax, DWORD PTR __S1$[ebp]
  00010	83 c0 02	 add	 eax, 2
  00013	89 45 08	 mov	 DWORD PTR __S1$[ebp], eax
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR __S2$[ebp]
  00019	83 c1 02	 add	 ecx, 2
  0001c	89 4d 0c	 mov	 DWORD PTR __S2$[ebp], ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __N$[ebp]
  00022	83 ea 01	 sub	 edx, 1
  00025	89 55 10	 mov	 DWORD PTR __N$[ebp], edx
$LN4@wmemcmp:
  00028	83 7d 10 00	 cmp	 DWORD PTR __N$[ebp], 0
  0002c	76 37		 jbe	 SHORT $LN3@wmemcmp

; 216  :             if (*_S1 != *_S2)

  0002e	8b 45 08	 mov	 eax, DWORD PTR __S1$[ebp]
  00031	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00034	8b 55 0c	 mov	 edx, DWORD PTR __S2$[ebp]
  00037	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003a	3b c8		 cmp	 ecx, eax
  0003c	74 25		 je	 SHORT $LN5@wmemcmp

; 217  :                 return *_S1 < *_S2 ? -1 : 1;

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __S1$[ebp]
  00041	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00044	8b 45 0c	 mov	 eax, DWORD PTR __S2$[ebp]
  00047	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0004a	3b d1		 cmp	 edx, ecx
  0004c	7d 09		 jge	 SHORT $LN7@wmemcmp
  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00055	eb 07		 jmp	 SHORT $LN8@wmemcmp
$LN7@wmemcmp:
  00057	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
$LN8@wmemcmp:
  0005e	8b 45 fc	 mov	 eax, DWORD PTR tv74[ebp]
  00061	eb 04		 jmp	 SHORT $LN1@wmemcmp
$LN5@wmemcmp:
  00063	eb a8		 jmp	 SHORT $LN2@wmemcmp
$LN3@wmemcmp:

; 218  : 
; 219  :         return 0;

  00065	33 c0		 xor	 eax, eax
$LN1@wmemcmp:

; 220  :     }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_wmemcmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\wchar.h
;	COMDAT _wmemchr
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 2
__N$ = 16						; size = 4
_wmemchr PROC						; COMDAT

; 201  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  :         for (; 0 < _N; ++_S, --_N)

  00003	eb 12		 jmp	 SHORT $LN4@wmemchr
$LN2@wmemchr:
  00005	8b 45 08	 mov	 eax, DWORD PTR __S$[ebp]
  00008	83 c0 02	 add	 eax, 2
  0000b	89 45 08	 mov	 DWORD PTR __S$[ebp], eax
  0000e	8b 4d 10	 mov	 ecx, DWORD PTR __N$[ebp]
  00011	83 e9 01	 sub	 ecx, 1
  00014	89 4d 10	 mov	 DWORD PTR __N$[ebp], ecx
$LN4@wmemchr:
  00017	83 7d 10 00	 cmp	 DWORD PTR __N$[ebp], 0
  0001b	76 15		 jbe	 SHORT $LN3@wmemchr

; 203  :             if (*_S == _C)

  0001d	8b 55 08	 mov	 edx, DWORD PTR __S$[ebp]
  00020	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00023	0f b7 4d 0c	 movzx	 ecx, WORD PTR __C$[ebp]
  00027	3b c1		 cmp	 eax, ecx
  00029	75 05		 jne	 SHORT $LN5@wmemchr

; 204  :                 return (wchar_t _CONST_RETURN*)_S;

  0002b	8b 45 08	 mov	 eax, DWORD PTR __S$[ebp]
  0002e	eb 04		 jmp	 SHORT $LN1@wmemchr
$LN5@wmemchr:
  00030	eb d3		 jmp	 SHORT $LN2@wmemchr
$LN3@wmemchr:

; 205  : 
; 206  :         return 0;

  00032	33 c0		 xor	 eax, eax
$LN1@wmemchr:

; 207  :     }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_wmemchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 171  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1675 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1676 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1677 :     }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1658 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1659 :         int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1660 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1661 :             NULL, 0, _Format, _Locale, _ArgList);
; 1662 : 
; 1663 :         return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscprintf_
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1664 :     }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	6a ff		 push	 -1
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __vsnprintf_l
  00018	83 c4 14	 add	 esp, 20			; 00000014H

; 1481 :         #pragma warning(pop)
; 1482 :     }

  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	83 ca 01	 or	 edx, 1
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00040	83 c4 1c	 add	 esp, 28			; 0000001cH
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0004d	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00051	7d 09		 jge	 SHORT $LN3@vsnprintf_
  00053	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0005a	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005f	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
$LN4@vsnprintf_:
  00062	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00065	5e		 pop	 esi
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __vfprintf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT ?vswprintf@@YAHQA_WQB_WPAD@Z
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
?vswprintf@@YAHQA_WQB_WPAD@Z PROC			; vswprintf, COMDAT

; 1842 :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1843 :                 #pragma warning(suppress: 28719)
; 1844 :                 return vswprintf(_Buffer, _CRT_INT_MAX, _Format, _ArgList);

  00003	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000a	51		 push	 ecx
  0000b	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00010	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 _vswprintf
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 1845 :             }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?vswprintf@@YAHQA_WQB_WPAD@Z ENDP			; vswprintf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vscwprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscwprintf PROC					; COMDAT

; 1365 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1366 :         return _vscwprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscwprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1367 :     }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vscwprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscwprintf_l PROC					; COMDAT

; 1347 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1348 :         int const _Result = __stdio_common_vswprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1349 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1350 :             NULL, 0, _Format, _Locale, _ArgList);
; 1351 : 
; 1352 :         return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscwprintf
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscwprintf
$LN3@vscwprintf:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscwprintf:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1353 :     }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT _vswprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vswprintf PROC						; COMDAT

; 1247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1248 :         return _vswprintf_c_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vswprintf_c_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1249 :     }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
_vswprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_c_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_c_l PROC					; COMDAT

; 1160 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1161 :         int const _Result = __stdio_common_vswprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1162 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1163 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1164 : 
; 1165 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1166 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_c_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\work\intel\intel_codec\QSVPipeline\rgy_util.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
